if (AjxPackage.define("Admin")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
 * <p>Contains the list of all the JavaScript files to be loaded during runtime.</p>
 *
 * <p><u>Format</u>: Similar convention to that of Java Package names relative to
 * JavaScript source location.</p>
 *
 * <p><b>NOTE</b>: Comments should be in a line of their own. NO comments are allowed
 * after the semicolon ';' as the java parser doesn't recognise the same.</p>
 *
 */
if (AjxPackage.define("zimbraAdmin.common.ZaUtil")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
 * Utility Class for the Admin Console.
 * @class ZaUtil
 *
 **/
ZaUtil = function() {};

ZaUtil.HELP_URL = "https://docs.zextras.com";

/**
 * @param v: all the valid life time value is end with smhd
 *
 */
ZaUtil.getLifeTimeInSeconds = function (v) {
    if (AjxUtil.isLifeTime(v)) {
        var len = v.length ;
        var d = v.substr (0, len - 1);
        var p = v.substr (len - 1, len);

        if (p == "s") {
            if (v[len - 2] == 'm') {
                // millisecond support
                d = v.substr(0, len - 2);
                return d / 1000.0;
            }
            return d;
        } else if ( p == "m") {
            return d * 60 ;
        } else if (p == "h"){
            return d * 3600 ;
        } else if (p == "d") {
            return d * 216000;
        }
    } else {
        throw (new AjxException(AjxMessageFormat.format(ZaMsg.UTIL_INVALID_LIFETIME,[v])));
    }
}

ZaUtil.findValueInObjArrByPropertyName = function (arr, value, property) {
    if (!property) property = "name" ; //for ZaAccountMemberOfListView
	if (arr != null) {
        for(var i=0; i<arr.length; i++) {
            if (arr[i] && arr[i][property] == value){
                return i ;
            }
        }
    }
	return -1;
}

ZaUtil.getListItemLabel = function (arr, value)  {
   if (arr != null) {
       for(var i=0; i<arr.length; i++) {
            if (arr[i]["value"] == value){
                return arr[i]["label"] ;
            }
       }
   }
    return null ;
}

ZaUtil.findValueInArray = function (arr, value){
    if (arr != null) {
        for(var i=0; i<arr.length; i++) {
            if (arr[i] == value){
                return i ;
            }
        }	
    }
	return -1;
}

/**
 * remove the duplicate elements from an array
 */
ZaUtil.getUniqueArrayElements = function (arr) {
	var uniqueArr = [] ;
	for (var i=0; i < arr.length; i++) {
		if (ZaUtil.findValueInArray(uniqueArr, arr[i]) < 0) {
			uniqueArr.push(arr[i]);
		}
	}
	
	return uniqueArr ;
}

/**
 * return a server date time string in yyyyMMddHHmmss'Z' format
 * @param date: a Date object
 * 
 */
ZaUtil.getAdminServerDateTime = function (date, useUTC) {
	var s = AjxDateUtil.getServerDateTime(date, useUTC) ;
	//remove the T of the server string generated by AjaxTK
	return s.substring(0,8) + s.substring(9) ;
}

ZaUtil.compareObjects = function(obj1, obj2) {
	if(obj1.id==obj2.id)
		return 0;
	if (obj1.name > obj2.name)
		return 1;
	if (obj1.name < obj2.name)
		return -1;	
}

ZaUtil.deepCloneObject = function (obj, ignoredProperties) {
    var newObj = {};
    if (obj) {
        for (var key in obj) {
            if (ignoredProperties && ignoredProperties.length > 0) {
                if (ZaUtil.findValueInArray(ignoredProperties, key) >=0) {
                    continue ;
                }
            }
            var v = obj [key] ;
            if (v!= null && (v instanceof Array || typeof (v) == "object")){
                newObj [key] = ZaUtil.deepCloneObject (v) ;
            }  else {
                newObj [key] = v ;
            }
        }

    }else {
        return null ;
    }

    return newObj ;
}

/**
 * copy an array's content to another array.
 * Assume all the array elements types are primitive.
 *
 * @param srcArr
 */
ZaUtil.cloneArray = function (srcArr) {
    var resultArr = [];
    for (var i = 0; i < srcArr.length; i ++) {
        resultArr.push(srcArr[i])  ;
    }

    return resultArr ;
}

/**
 * combine the object array property values
 *
 * an example:
 * var objArr =
 * [
 *      {name: "abc"},
 *      {name:"efg}
 * ]
 *
 * ZaUtil.join(objArr, "name", ":") => "abc:efg"
 */
ZaUtil.join = function (objArray, key, delimiter) {
    if (objArray == null) return "" ;
    var strArr = [] ;
    for (var i=0; i < objArray.length; i ++) {
        strArr.push (objArray[i][key]) ;
    }
    return strArr.join(delimiter) ;
}

ZaUtil.getItemUUid = function() {
    var itemPrefix = "ZaItem";
    return Dwt.getNextId(itemPrefix);
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaEvent")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* Creates an empty event of the given type.
* @constructor
* @class
* @parameter type - the type of the source of the event
* This class represents an event that encapsulates some sort of change to a model (data).
* The event has a data type (eg conversation), an event type (eg delete), a source (the
* data object generating the event), and a hash of arbitrary information (details).
*/
ZaEvent = function(type) {

	this.type = type; //source type
	this.event = null; //event type
	this.source = null;
	this._details = null;
}

// Listener types
ZaEvent.L_MODIFY = 1;
ZaEvent.L_PICKER = 2;

// Source types (note: there are not separate types for list models)
ZaEvent.EVENT_SOURCE_INDEX = 1;
ZaEvent.S_FOLDER		= ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_TAG			= ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_CONV			= ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_MSG			= ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_ATT			= ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_CONTACT		= ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_APPT			= ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_NOTE			= ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_PICKER		= ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_SEARCH		= ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_SETTING		= ZaEvent.EVENT_SOURCE_INDEX++;

//Source types for admin
ZaEvent.S_ACCOUNT		 = ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_COS			 = ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_DOMAIN		 = ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_SERVER		 = ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_GLOBALCONFIG	 = ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_STATUS		 = ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_CLUSTER_STATUS = ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_DL 			 = ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_MTA			 = ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_ZIMLET		 = ZaEvent.EVENT_SOURCE_INDEX++;
ZaEvent.S_HOME		 = ZaEvent.EVENT_SOURCE_INDEX++;
// Event types
ZaEvent.EVENT_TYPES_INDEX = 1;
ZaEvent.E_CREATE		= ZaEvent.EVENT_TYPES_INDEX++;
ZaEvent.E_DELETE		= ZaEvent.EVENT_TYPES_INDEX++;
ZaEvent.E_MODIFY		= ZaEvent.EVENT_TYPES_INDEX++;
ZaEvent.E_LOAD			= ZaEvent.EVENT_TYPES_INDEX++;
ZaEvent.E_REMOVE		= ZaEvent.EVENT_TYPES_INDEX++;
ZaEvent.E_REMOVE_ALL	= ZaEvent.EVENT_TYPES_INDEX++;
ZaEvent.E_RENAME		= ZaEvent.EVENT_TYPES_INDEX++;
ZaEvent.E_MOVE			= ZaEvent.EVENT_TYPES_INDEX++;
ZaEvent.E_FLAGS			= ZaEvent.EVENT_TYPES_INDEX++;
ZaEvent.E_ADD_TAG		= ZaEvent.EVENT_TYPES_INDEX++;
ZaEvent.E_REMOVE_TAG	= ZaEvent.EVENT_TYPES_INDEX++;
ZaEvent.E_SEARCH  	    = ZaEvent.EVENT_TYPES_INDEX++;

// Public methods

ZaEvent.prototype.toString = 
function() {
	return "ZaEvent";
}

/**
* Sets the event type and source.
*
* @param event		event type
* @param source		object that generated the event (typically "this")
*/
ZaEvent.prototype.set =
function(event, source) {
	this.event = event; 
	this.source = source; 
}

/**
* Adds an arbitrary bit of info to the event.
*
* @param field		the detail's name
* @param value		the detail's value
*/
ZaEvent.prototype.setDetail =
function(field, value) {
	if(!this._details)
		this._details = new Object();
	this._details[field] = value;
}

/**
* Returns an arbitrary bit of info from the event.
*
* @param field		the detail's name
*/
ZaEvent.prototype.getDetail =
function(field) {
	if(!this._details)
		return null;
	else
		return this._details[field];
}

/**
* Sets the event details. Any existing details will be lost.
*
* @param details	a hash representing event details
*/
ZaEvent.prototype.setDetails =
function(details) {
	this._details = details ? details : new Object();
}

/**
* Returns the event details.
*/
ZaEvent.prototype.getDetails =
function() {
	return this._details;
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaModel")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

ZaModel = function(init) {
 	if (arguments.length == 0) return;
	this._evtMgr = new AjxEventMgr();
}

ZaModel.getBooleanChoices = function () {
    return [
        {
            value: "TRUE",
            label: ZaMsg.Yes
        },
        {
            value: "FALSE",
            label: ZaMsg.No
        },
        {
            value: null,
            label: ZaMsg.No
        }
    ];
}

ZaModel.BOOLEAN_CHOICES= ZaModel.getBooleanChoices ;

ZaModel.getBooleanChoices1 = function () {
    return [
        {
            value: true,
            label: ZaMsg.Yes
        },
        {
            value: false,
            label: ZaMsg.No
        },
        {
            value: null,
            label: ZaMsg.No
        }
    ];
}

ZaModel.BOOLEAN_CHOICES1= ZaModel.getBooleanChoices1 ;

ZaModel.getBooleanChoices2 = function () {
    return [
        {
            value: "1",
            label: ZaMsg.Yes
        },
        {
            value: "0",
            label: ZaMsg.No
        },
        {
            value: null,
            label: ZaMsg.No
        }
    ];
}

ZaModel.BOOLEAN_CHOICES2= ZaModel.getBooleanChoices2 ;

ZaModel.getAllowChoices = function () {
	return [
        {
            value: "1",
            label: ZaMsg.Yes
        },
        {
            value: "0",
            label: ZaMsg.No
        },
        {
            value: "-1",
            label: ZaMsg.Ignored
        },
        {
            value: null,
            label: ZaMsg.No
        }
    ];
}

ZaModel.ALLOW_CHOICES = ZaModel.getAllowChoices;

ZaModel.FONT_SIZE_CHOICES = [
    {
        value: "8pt",
        label: "8pt"
    },
    {
        value: "10pt",
        label: "10pt"
    },
    {
        value: "12pt",
        label: "12pt"
    },
    {
        value: "14pt",
        label: "14pt"
    },
    {
        value: "18pt",
        label: "18pt"
    },
    {
        value: "24pt",
        label: "24pt"
    },
    {
        value: "36pt",
        label: "36pt"
    }
];

ZaModel.getFontFamilyChoices = function() {
	return [
        {
            label: ZaMsg.LBL_fontFamilySansSerif,
            value: "arial, helvetica, sans-serif"
        },
        {
            label: ZaMsg.LBL_fontFamilySerif,
            value: "times new roman, new york, times, serif"
        },
        {
            label: ZaMsg.LBL_fontFamilyWideBlock,
            value: "arial black,avant garde"
        },
        {
            label: ZaMsg.LBL_fontFamilyMonospaced,
            value: "courier new, courier, monaco, monospace, sans-serif"
        },
        {
            label: ZaMsg.LBL_fontFamilyComic,
            value: "comic sans ms, comic sans, sans-serif"
        },
        {
            label: ZaMsg.LBL_fontFamilyConsole,
            value: "lucida console, sans-serif"
        },
        {
            label: ZaMsg.LBL_fontFamilyGaramond,
            value: "garamond, new york, times, serif"
        },
        {
            label: ZaMsg.LBL_fontFamilyElegant,
            value: "georgia,serif"
        },
        {
            label: ZaMsg.LBL_fontFamilyProfessional,
            value: "tahoma, new york, times, serif"
        },
        {
            label: ZaMsg.LBL_fontFamilyTerminal,
            value: "terminal,monaco"
        },
        {
            label: ZaMsg.LBL_fontFamilyModern,
            value: "trebuchet ms,sans-serif"
        },
        {
            label: ZaMsg.LBL_fontFamilyWide,
            value: "verdana, helvetica, sans-serif"
        }
    ];
}

ZaModel.FONT_FAMILY_CHOICES = ZaModel.getFontFamilyChoices;

ZaModel.getComposeFormatChoices =   function () {
    return [
        {
            value: "text",
            label: ZaMsg.Text
        },
        {
            value: "html",
            label: ZaMsg.HTML
        }
    ];
}

ZaModel.COMPOSE_FORMAT_CHOICES = ZaModel.getComposeFormatChoices ;

ZaModel.SEND_READ_RECEIPT_ALWAYS = "always";
ZaModel.SEND_READ_RECEIPT_NEVER = "never";
ZaModel.SEND_READ_RECEIPT_PROMPT = "prompt";

ZaModel.getSendReadReceiptByChoices = function() {
    return [
        {
            value: ZaModel.SEND_READ_RECEIPT_ALWAYS,
            label: ZaMsg.SEND_READ_RECEIPT_ALWAYS
        },
        {
            value: ZaModel.SEND_READ_RECEIPT_NEVER,
            label: ZaMsg.SEND_READ_RECEIPT_NEVER
        },
        {
            value: ZaModel.SEND_READ_RECEIPT_PROMPT,
            label: ZaMsg.SEND_READ_RECEIPT_PROMPT
        }
    ];
}

ZaModel.SEND_READ_RECEPIT_CHOICES = ZaModel.getSendReadReceiptByChoices;

ZaModel.getGroupMailByChoices = function () {
    return [
        {
            value: "conversation",
            label: ZaMsg.Conversation
        },
        {
            value: "message",
            label: ZaMsg.Message
        }
    ];
}

ZaModel.GROUP_MAIL_BY_CHOICES = ZaModel.getGroupMailByChoices ;

ZaModel.getSignatureStyleChoices = function () {
    return [
        {
            value: "outlook",
            label: ZaMsg.No
        },
        {
            value: "internet",
            label: ZaMsg.Yes
        }
    ];
}

ZaModel.SIGNATURE_STYLE_CHOICES = ZaModel.getSignatureStyleChoices ;

ZaModel.getReminderChoices = function () {
    return [
        {
            value: "0",
            label: ZaMsg.never
        },
        {
            value: 1,
            label: "1"
        },
        {
            value: 5,
            label: "5"
        },
        {
            value: 10,
            label: "10"
        },
        {
            value: 15,
            label: "15"
        },
        {
            value: 20,
            label: "20"
        },
        {
            value: 25,
            label: "25"
        },
        {
            value: 30,
            label: "30"
        },
        {
            value: 45,
            label: "45"
        },
        {
            value: 50,
            label: "50"
        },
        {
            value: 55,
            label: "55"
        },
        {
            value: 60,
            label: "60"
        }
    ];
}

ZaModel.REMINDER_CHOICES = ZaModel.getReminderChoices ;

ZaModel.ErrorCode = "code";

ZaModel.ErrorMessage = "error_message";

ZaModel.currentStep = "currentStep";

ZaModel.currentTab = "currentTab";

ZaModel.getTimeChoices = function () {
    return [
        {
            value: "d",
            label: AjxMsg.days
        },
        {
            value: "h",
            label: AjxMsg.hours
        },
        {
            value: "m",
            label: AjxMsg.minutes
        },
        {
            value: "s",
            label: AjxMsg.seconds
        }
    ];
}

ZaModel.getTimeChoices1 = function () {
    return [
        {
            value: "d",
            label: AjxMsg.days
        },
        {
            value: "h",
            label: AjxMsg.hours
        }
    ];
}

ZaModel.getLongTimeChoices = function () {
    return [
        {
            value: "d",
            label: AjxMsg.days
        },
        {
            value: "w",
            label: AjxMsg.weeks
        },
        {
            value: "m",
            label: AjxMsg.months
        },
        {
            value: "y",
            label: AjxMsg.years
        }
    ];
}

/**
 * The length of one year is used to indicate manual choice
 * @returns {Array}
 */
ZaModel.getMailPollingIntervalChoices = function () {
    return [
        {
            value: "500ms",
            label: ZaMsg.LBL_asNewMailArrives
        },
        {
            value: "120s",
            label: "2 " + ZaMsg.LBL_minute
        },
        {
            value: "180s",
            label: "3 " + ZaMsg.LBL_minute
        },
        {
            value: "240s",
            label: "4 " + ZaMsg.LBL_minute
        },
        {
            value: "300s",
            label: "5 " + ZaMsg.LBL_minute
        },
        {
            value: "360s",
            label: "6 " + ZaMsg.LBL_minute
        },
        {
            value: "420s",
            label: "7 " + ZaMsg.LBL_minute
        },
        {
            value: "480s",
            label: "8 " + ZaMsg.LBL_minute
        },
        {
            value: "540s",
            label: "9 " + ZaMsg.LBL_minute
        },
        {
            value: "600s",
            label: "10 " + ZaMsg.LBL_minute
        },
        {
            value: "900s",
            label: "15 " + ZaMsg.LBL_minute
        },
        {
            value: "31536000s",
            label: ZaMsg.LBL_manual
        }
    ];
}

ZaModel.MAIL_POLLING_INTERVAL_CHOICES = ZaModel.getMailPollingIntervalChoices;

ZaModel.prototype.toString = function() {
    return "ZaModel";
}

ZaModel.prototype.addChangeListener = function(listener) {
    return this._evtMgr.addListener(ZaEvent.L_MODIFY, listener);
}

ZaModel.prototype.removeChangeListener = function(listener) {
    return this._evtMgr.removeListener(ZaEvent.L_MODIFY, listener);
}

ZaModel.setUnrecoganizedChoiceValue = function (v, choices) {
    var new_v = ZaMsg.VALUE_UNRECOGNIZED;
    var myChoices = choices ;
    if (typeof(choices) == "function") {
        myChoices = choices.call (this) ;
    }
    for (var i = 0; i < myChoices.length; i++) {
        if (v == myChoices[i].value) {
            new_v = v ;
            break ;
        }
    }
    return new_v ;
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaItem")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaItem
* @param app reference to the application instance
**/
ZaItem = function(iKeyName) {
	if (arguments.length == 0) return;
	this._iKeyName = iKeyName;
    this._uuid = ZaUtil.getItemUUid();
    this.rightsLoaded = false;
	ZaModel.call(this, true);

}

ZaItem.prototype = new ZaModel;
ZaItem.prototype.constructor = ZaItem;

ZaItem.loadMethods = new Object();
ZaItem.initMethods = new Object();
ZaItem.modifyMethods = new Object();
ZaItem.modifyMethodsExt = new Object();
ZaItem.createMethods = new Object();
ZaItem.removeMethods = new Object();
ZaItem.modelExtensions = new Object();
ZaItem.getRelatedMethods = new Object();

ZaItem.ACCOUNT = "account";
ZaItem.DATASOURCE = "dataSource";
ZaItem.DL = "dl";
ZaItem.GROUP = "group";
ZaItem.ALIAS = "alias";
ZaItem.RESOURCE = "calresource";
ZaItem.DOMAIN = "domain";
ZaItem.COS = "cos";
ZaItem.GLOBAL_CONFIG = "config";
ZaItem.GLOBAL_GRANT = "global";
ZaItem.SERVER = "server";
ZaItem.STATS = "stats";
ZaItem.ZIMLET = "zimlet";
ZaItem.MAILQ_ITEM = "message";
ZaItem.MAILQ = "mailque";
ZaItem.HOME = "home";
ZaItem.A_objectClass = "objectClass";
ZaItem.A_zimbraId = "zimbraId";
ZaItem.A_cn = "cn" ;
ZaItem.A_zimbraACE = "zimbraACE";
ZaItem.A_zimbraCreateTimestamp = "zimbraCreateTimestamp";

/* Translation of  the attribute names to the screen names */
ZaItem._ATTR = new Object();
ZaItem._ATTR[ZaItem.A_zimbraId] = ZaMsg.attrDesc_zimbraId;

ZaItem.ID_PATTERN = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;

ZaItem.prototype.toString = 
function() {
	if(this.name)
		return this.name;
	else if (this.id)
		return this.id;
	else
		return "ZaItem "+this.type+": name="+this.name+" id="+this.id;
}

ZaItem.compareNamesAsc = 
function(a,b) {
	var al = a.name.toLowerCase();
	var bl = b.name.toLowerCase();

	if (al < bl)
		return -1;
	if (al > bl)
		return 1;
	else
		return 0;
}

ZaItem.compareNamesDesc = 
function(a,b) {
	var al = a.name.toLowerCase();
	var bl = b.name.toLowerCase();

	if (al < bl)
		return 1;
	if (al > bl)
		return -1;
	else
		return 0;
}

ZaItem.compareDescription = 
function(a,b) {
	return ZaItem.compareAttr(a,b,"description");
}

ZaItem.compareAttr = 
function(a, b, attr) {
    if (a.attrs[attr] == null) {
        return -1 ;
    }

    if (b.attrs[attr] == null) {
        return 1 ;    
    }

	if (a.attrs[attr] < b.attrs[attr])
		return -1;
	if (a.attrs[attr] > b.attrs[attr])
		return 1;
	else
		return 0;
}

ZaItem.compareAttrAsc = ZaItem.compareAttr

ZaItem.compareAttrDesc =
function(a, b, attr) {
	if (a.attrs[attr] == null) {
        return 1 ;
    }

    if (b.attrs[attr] == null) {
        return -1 ;    
    }

    if (a.attrs[attr] < b.attrs[attr])
		return 1;
	if (a.attrs[attr] > b.attrs[attr])
		return -1;
	else
		return 0;
}


/**
* Item Factory
**/
ZaItem.getFromType = 
function (type) {
	switch (type) {
		case ZaItem.ACCOUNT:
			return new ZaAccount();

		case ZaItem.ALIAS:
			return new ZaAlias();

		case ZaItem.DL:
            return new ZaDistributionList();

		case ZaItem.RESOURCE:
			return new ZaResource();
		
		case ZaItem.DOMAIN:
			return new ZaDomain();

		case ZaItem.COS:
			return new ZaCos();

		case ZaItem.SERVER:
			return new ZaServer();

		case ZaItem.MAILQ:
			return new ZaMTA();
		
		case ZaItem.DATASOURCE:
			return new ZaDataSource();

	}
}

ZaItem.prototype.remove = 
function () {
	//Instrumentation code start
	if(ZaItem.removeMethods[this._iKeyName]) {
		var methods = ZaItem.removeMethods[this._iKeyName];
		var cnt = methods.length;
		for(var i = 0; i < cnt; i++) {
			if(typeof(methods[i]) == "function") {
				methods[i].call(this);
			}
		}
	}	
	//Instrumentation code end
}


ZaItem.prototype.refresh = 
function (skipRights,expandDefaults) {
	this.load(this.id ? "id" : null, this.id ? this.id : null,skipRights,expandDefaults);
}

ZaItem.prototype.getRelatedList =
function (parentPath) {
	//Instrumentation code start
    var ret = [];
	if(ZaItem.getRelatedMethods[this._iKeyName]) {
		var methods = ZaItem.getRelatedMethods[this._iKeyName];
		var cnt = methods.length;
		for(var i = 0; i < cnt; i++) {
			if(typeof(methods[i]) == "function") {
				ret = ret.concat(methods[i].call(this, parentPath));
			}
		}
	}
    return ret;
	//Instrumentation code end
}

ZaItem.prototype.copyTo = 
function (target, fullRecursion, maxRecursion, currentRecLevel) {
	if(!currentRecLevel) {
		currentRecLevel = 1;
	} else {
		currentRecLevel++;
	}
	if(!maxRecursion) {
		maxRecursion = 4;
	}
	for(var a in this) {
		if (this[a] == null || this[a] == undefined) {
			target[a] = null;
		} else if(fullRecursion && (currentRecLevel <= maxRecursion)) {
			if(this[a] instanceof Array) {
				target[a] = [];
				ZaItem.prototype.copyTo.call(this[a],target[a],fullRecursion,maxRecursion, currentRecLevel)
			} else if(typeof(this[a]) == "object") {
				target[a] = {};
				ZaItem.prototype.copyTo.call(this[a],target[a],fullRecursion,maxRecursion, currentRecLevel)
			} else {
				target[a] = this[a];
			}
		} else {
			target[a] = this[a];
		}
	}
}

ZaItem.prototype.parseTargetsRightsFromJS = function(targetObj) {
	if(targetObj) {
		this.noAttrsAvailable = true;
		this.rights = {};
		if(targetObj.right && targetObj.right instanceof Array) {
			var rights = targetObj.right;
			for(var r in rights) {
				this.rights[rights[r].n] = true;
			}
		}
		
		if(targetObj.id)
			this.id = targetObj.id;
		
		if(targetObj.name)
			this.name = targetObj.name;

		if(!this._defaultValues)
			this._defaultValues = {attrs:{}};

		if(!this.getAttrs)
			this.getAttrs = {};

		if(!this.setAttrs)
			this.setAttrs = {};
		
		if(AjxUtil.isEmpty(targetObj.getAttrs) && AjxUtil.isEmpty(targetObj.setAttrs)) {
			this.getAttrs = null;
			return;
		}
		this.attrsToGet = [];									
		if(targetObj.getAttrs && targetObj.getAttrs instanceof Array && 
			targetObj.getAttrs[0]) {
			if(targetObj.getAttrs[0].a && targetObj.getAttrs[0].a instanceof Array) {
				var getAttrs = targetObj.getAttrs[0].a;
				this.noAttrsAvailable = false;
				for (var a in getAttrs) {
					this.getAttrs[getAttrs[a].n] = true;
					this.attrsToGet.push(getAttrs[a].n);
					if(getAttrs[a]["default"] && getAttrs[a]["default"][0] && getAttrs[a]["default"][0].v && getAttrs[a]["default"][0].v instanceof Array) {
						var cnt = getAttrs[a]["default"][0].v.length; 
						if(cnt == 1) {
							if((getAttrs[a].n == ZaDomain.A_zimbraFreebusyExchangeAuthPassword) &&
								(getAttrs[a]["default"][0].v[0]._content == "VALUE-BLOCKED")) {
								/* Value was replaced in SOAP response.  Treat as empty string so that it is clear it
								 * needs to be typed again before using "Check the settings" */
								this._defaultValues.attrs[getAttrs[a].n] = "";
							} else {
								this._defaultValues.attrs[getAttrs[a].n] = getAttrs[a]["default"][0].v[0]._content;
							}
						} else if (cnt >1) {
							this._defaultValues.attrs[getAttrs[a].n] = new Array();
							for(var i = 0; i<cnt;i++) { 
								this._defaultValues.attrs[getAttrs[a].n][i] = getAttrs[a]["default"][0].v[i]._content;
							}
						}
					}
				}
				if(!getAttrs[ZaItem.A_zimbraId] ) {
					this.attrsToGet.push(ZaItem.A_zimbraId);
				}				
			} 
			if (targetObj.getAttrs[0].all){
				this.getAttrs.all = true;
				this.noAttrsAvailable = false; 	
			}
		} 
				
		if(targetObj.setAttrs && targetObj.setAttrs instanceof Array && 
			targetObj.setAttrs[0]) {
				
			if(targetObj.setAttrs[0].a && targetObj.setAttrs[0].a instanceof Array) {
				var setAttrs = targetObj.setAttrs[0].a;
				if(!this.getAttrs)
					this.getAttrs = {};
					
				this.noAttrsAvailable = false;
				for (var a in setAttrs) {
					this.setAttrs[setAttrs[a].n] = true;
					this.getAttrs[setAttrs[a].n] = true;
					if(setAttrs[a]["default"] && setAttrs[a]["default"][0] && setAttrs[a]["default"][0].v && setAttrs[a]["default"][0].v instanceof Array) {
						var cnt = setAttrs[a]["default"][0].v.length; 
						if(cnt==1) {
							this._defaultValues.attrs[setAttrs[a].n] = setAttrs[a]["default"][0].v[0]._content;
						} else if (cnt > 1) {
							this._defaultValues.attrs[setAttrs[a].n] = new Array();
							for(var i = 0; i<cnt;i++) { 
								this._defaultValues.attrs[setAttrs[a].n][i] = setAttrs[a]["default"][0].v[i]._content;
							}
						}
					}
				}
			} 
			if(targetObj.setAttrs[0].all) {
				this.noAttrsAvailable = false;
				this.setAttrs.all = true;
				this.getAttrs.all = true; 	
			}
		} 
	}
	this.rightsLoaded = true;
}

ZaItem.prototype.initEffectiveRightsFromJS = function(resp) {
	this._defaultValues = {attrs:{}};
	if(resp && resp.target && resp.target instanceof Array) {
		this.parseTargetsRightsFromJS(resp.target[0]);
	}
}

ZaItem.prototype.loadEffectiveRights = function (by, val, expandDefaults, callback) {
	if(!this.type)
		return;

	if(AjxUtil.isUndefined(val) || AjxUtil.isNull(val))
		val = "";

	try {
		if(callback) {
			this._getEffectiveRights(by, val, expandDefaults, callback);
		} else {
			var resp = this._getEffectiveRights(by, val, expandDefaults, callback);
			this.initEffectiveRightsFromJS(resp);
		}
	} catch (ex) {
		throw (ex);
	}
}

ZaItem.RightCache = [];
ZaItem.getCacheName = function (by, val, type, expandDefaults) {
    var cacheName = by + val + " " + type;
    if (expandDefaults)
        cacheName = cacheName + "TRUE";
    else
        cacheName = cacheName + "FALSE";
    return cacheName;
}

ZaItem.inCacheProcess = function (val) {
    if (!val)
        return false;

    return ZaSettings.initializing;
}

ZaItem.prototype._getEffectiveRights = function (by, val, expandDefaults, callback) {
	var cacheName = ZaItem.getCacheName(by, val, this.type, expandDefaults);
    var inCacheProcess =  ZaItem.inCacheProcess(val);
    var resp;
    if (((!ZaItem.RightCache[cacheName])&&inCacheProcess) || !inCacheProcess) {
        var soapDoc = AjxSoapDoc.create("GetEffectiveRightsRequest", ZaZimbraAdmin.URN, null);
        if(expandDefaults) {
            soapDoc.setMethodAttribute("expandAllAttrs","getAttrs");
        }

        var elTarget = soapDoc.set("target", val);

        if(!AjxUtil.isEmpty(by))
            elTarget.setAttribute("by",by);

        elTarget.setAttribute("type",this.type);

        var elGrantee = soapDoc.set("grantee", ZaZimbraAdmin.currentUserId);
        elGrantee.setAttribute("by","id");

        var csfeParams = new Object();
        csfeParams.soapDoc = soapDoc;
        csfeParams.asyncMode = callback ? true : false;
        csfeParams.callback =  callback ? callback : null;
        
        var reqMgrParams = {} ;
        reqMgrParams.controller = (ZaApp.getInstance() && ZaApp.getInstance().getCurrentController()) ? ZaApp.getInstance().getCurrentController() : null;
        reqMgrParams.busyMsg = ZaMsg.BUSY_REQUESTING_ACCESS_RIGHTS ;
        
        try {
        	if(callback) {
        		ZaRequestMgr.invoke(csfeParams, reqMgrParams);
        	} else {
        		resp = ZaRequestMgr.invoke(csfeParams, reqMgrParams).Body.GetEffectiveRightsResponse;
                if (inCacheProcess) {
                    ZaItem.RightCache[cacheName]= resp;
                }
        	}
        } catch (ex) {
            throw (ex);
        }

    } else {
        resp = ZaItem.RightCache[cacheName];
    }
    return resp;
}

ZaItem.prototype.loadNewObjectDefaults = function (domainBy, domain, cosBy, cos) {
	if(!this.type)
		return;
		
	var soapDoc = AjxSoapDoc.create("GetCreateObjectAttrsRequest", ZaZimbraAdmin.URN, null);
	var elTarget = soapDoc.set("target", "");
	elTarget.setAttribute("type",this.type);	

	
	if(!AjxUtil.isEmpty(domain) && !AjxUtil.isEmpty(domainBy)) {
		var elDomain = soapDoc.set("domain", domain);
		elDomain.setAttribute("by",domainBy);
	}

	if(!AjxUtil.isEmpty(cos) && !AjxUtil.isEmpty(cosBy)) {
		var elCos = soapDoc.set("cos", cos);
		elCos.setAttribute("by",cosBy);
	}
	
	var csfeParams = new Object();
	csfeParams.soapDoc = soapDoc;	
	var reqMgrParams = {} ;
	reqMgrParams.controller = (ZaApp.getInstance() && ZaApp.getInstance().getCurrentController()) ? ZaApp.getInstance().getCurrentController() : null;
	reqMgrParams.busyMsg = ZaMsg.BUSY_REQUESTING_ACCESS_RIGHTS ;
	try {
		var resp = ZaRequestMgr.invoke(csfeParams, reqMgrParams ).Body.GetCreateObjectAttrsResponse;
		this.parseTargetsRightsFromJS(resp);
	} catch (ex) {
		//not implemented yet
	}	
}

ZaItem.prototype.load = function (by, val, skipRights, expandDefaults) {
	by = by ? by : "id";
	val = val ? val : this.id;
	//load rights
	if(!skipRights) {
		this.rights = {};
		this.getAttrs = {};
		this.setAttrs = {};
		this.loadEffectiveRights(by,val,expandDefaults);
	}	
	if(this.noAttrsAvailable) {
		return;
	}	
	//Instrumentation code start
	if(ZaItem.loadMethods[this._iKeyName]) {
		var methods = ZaItem.loadMethods[this._iKeyName];
		var cnt = methods.length;
		for(var i = 0; i < cnt; i++) {
			if(typeof(methods[i]) == "function") {
				methods[i].call(this, by, val);
			}
		}
	}	
	//Instrumentation code end
}

/**
 * this - the current instance should be the old instance
 * @param mods: modified attributes
 * @param tmpObj: the new data object of the view
 */
ZaItem.prototype.modify = function (mods, tmpObj) {
	//Instrumentation code start
	if(ZaItem.modifyMethods[this._iKeyName]) {
		var methods = ZaItem.modifyMethods[this._iKeyName];
		var cnt = methods.length;
		for(var i = 0; i < cnt; i++) {
			if(typeof(methods[i]) == "function") {
				methods[i].call(this, mods, tmpObj);

			}
		}
	}	
	//Instrumentation code end
}



/**
* Factory method
* creates a new object of class constructorFunction, then passes the new object to every method in
* ZaItem.createMethods[key] 
* @see ZaItem#createMethods
**/
ZaItem.create = function (tmpObj, constructorFunction, key) {
	var item = new constructorFunction();
	//Instrumentation code start
	if(ZaItem.createMethods[key]) {
		var methods = ZaItem.createMethods[key];
		var cnt = methods.length;
		for(var i = 0; i < cnt; i++) {
			if(typeof(methods[i]) == "function") {
				methods[i].call(this, tmpObj, item);
			}
		}
	}	
	//Instrumentation code end
	return item;
}

ZaItem.prototype.initFromDom =
function(node) {
	this.name = node.getAttribute("name");
	this.id = node.getAttribute("id");
	this.attrs = new Object();
	if(!AjxUtil.isEmpty(node.nodeName))
		this.type = node.nodeName;
	
	var children = node.childNodes;
	var cnt = children.length;
	for (var i=0; i< cnt;  i++) {
		var child = children[i];
		if (child.nodeName != 'a') continue;
		var name = child.getAttribute("n");
		var pd = child.getAttribute("pd");
		if(pd && pd==1)
			continue;
			
		if (child.firstChild != null) {
			var value = child.firstChild.nodeValue;
			if (name in this.attrs) {
				var vc = this.attrs[name];
				if ((typeof vc) == "object") {
					vc.push(value);
				} else {
					this.attrs[name] = [vc, value];
				}
			} else {
				this.attrs[name] = value;
			}
		}
	}
}

ZaItem.prototype.initFromJS = 
function (obj) {
	if(!obj)
		return;

	if(obj.name)	
		this.name = obj.name;

	if(obj.id)
		this.id = obj.id;

	if (obj.isgroup == false) {
		this.isgroup = 0 ;
	}else if (obj.isgroup == true){
		this.isgroup = 1 ;
	}
	this.attrs = new Object();
	if(obj.a) {
		var len = obj.a.length;
		for(var ix = 0; ix < len; ix++) {
			if(obj.a[ix].pd)
				continue;
				
			if(!this.attrs[[obj.a[ix].n]]) {
				this.attrs[[obj.a[ix].n]] = obj.a[ix]._content;
			}else {
				if(!(this.attrs[[obj.a[ix].n]] instanceof Array)) {
					this.attrs[[obj.a[ix].n]] = [this.attrs[[obj.a[ix].n]]];
				} 
				this.attrs[[obj.a[ix].n]].push(obj.a[ix]._content);
			}
		}
	}
	if(obj._attrs) {
		for (var ix in obj._attrs) {
			if(obj._attrs[ix].pd)
				continue;
							
			if(!this.attrs[ix]) {
				this.attrs[ix] = obj._attrs[ix];
			} else {
				if(!(this.attrs[ix] instanceof Array)) {
					this.attrs[ix] = [this.attrs[ix]];
				} 
				this.attrs[ix].push(obj._attrs[ix]);
			}
		}
	}
	if(!this.attrs[ZaAccount.A_description])
		this.attrs[ZaAccount.A_description] = [];
		
	if(!(this.attrs[ZaAccount.A_description] instanceof Array)) {
		this.attrs[ZaAccount.A_description] = [this.attrs[ZaAccount.A_description]];
	}	
	
	if(!this.attrs[ZaItem.A_zimbraId] && this.id) {
		this.attrs[ZaItem.A_zimbraId] = this.id;
	}	
}

ZaItem.initAttrsFromJS =
function (obj) {
	if(!obj)
		return;

    var attrs = {} ;
	if(obj.a) {
		var len = obj.a.length;
		for(var ix = 0; ix < len; ix++) {
			if(obj.a[ix].pd)
				continue;
			
			if(!attrs[[obj.a[ix].n]]) {
				attrs[[obj.a[ix].n]] = obj.a[ix]._content;
			}else {
				if(!(attrs[[obj.a[ix].n]] instanceof Array)) {
					attrs[[obj.a[ix].n]] = [attrs[[obj.a[ix].n]]];
				}
				attrs[[obj.a[ix].n]].push(obj.a[ix]._content);
			}
		}
	}
	if(obj._attrs) {
		for (var ix in obj._attrs) {
			if(obj._attrs[ix].pd)
				continue;
							
			if(!attrs[ix]) {
				attrs[ix] = obj._attrs[ix];
			} else {
				if(!(attrs[ix] instanceof Array)) {
					attrs[ix] = [attrs[ix]];
				}
				attrs[ix].push(obj._attrs[ix]);
			}
		}
	}

    return attrs ;
}


// Adds a row to the tool tip.
ZaItem.prototype._addRow =
function(msg, value, html, idx) {
	if (value != null) {
		html[idx++] = "<tr valign='top'><td align='right' style='padding-right: 5px;'><b>";
		html[idx++] = AjxStringUtil.htmlEncode(msg);
		html[idx++] = "</b></td><td align='left'><div style='white-space:nowrap; overflow:hidden;'>";
		html[idx++] = AjxStringUtil.htmlEncode(value);
		html[idx++] = "</div></td></tr>";
	}
	return idx;
}

// Adds a row to the tool tip.
ZaItem.prototype._addAttrRow =
function(name, html, idx) {
	var value = this.attrs[name];
	if (value != null) {
		var desc = ZaItem._attrDesc(name);
		html[idx++] = "<tr valign='top'><td align='left' style='padding-right: 5px;'><b>";
		html[idx++] = AjxStringUtil.htmlEncode(desc) + ":";
		html[idx++] = "</b></td><td align='left'><div style='white-space:nowrap; overflow:hidden;'>";
		html[idx++] = AjxStringUtil.htmlEncode(value);
		html[idx++] = "</div></td></tr>";
	}
	return idx;
}

ZaItem._attrDesc = 
function(name) {
	var desc = ZaItem._ATTR[name];
	return (desc == null) ? name : desc;
}

ZaItem.prototype._init = function () {
	//Instrumentation code start
	if(ZaItem.initMethods[this._iKeyName]) {
		var methods = ZaItem.initMethods[this._iKeyName];
		var cnt = methods.length;
		for(var i = 0; i < cnt; i++) {
			if(typeof(methods[i]) == "function") {
				methods[i].call(this);
			}
		}
	}	
	//Instrumentation code end
}

/**
* @param newAlias
* addAlias adds one alias to the account. Adding each alias takes separate Soap Request
**/
ZaItem.prototype.addAlias = 
function (newAlias) {
	var soapCmd  ;
	switch(this.type) {
		case ZaItem.ACCOUNT: soapCmd = "AddAccountAliasRequest" ; break ;
		case ZaItem.RESOURCE: soapCmd = "AddAccountAliasRequest" ; break ;
		case ZaItem.DL: soapCmd = "AddDistributionListAliasRequest" ; break ;
		default: throw new Error("Can't add alias for account type: " + this.type) ;				
	}
	
	var soapDoc = AjxSoapDoc.create(soapCmd, ZaZimbraAdmin.URN, null);
	soapDoc.set("id", this.id);
	soapDoc.set("alias", newAlias);	
	
	//var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_ADD_ALIAS
	}
	ZaRequestMgr.invoke(params, reqMgrParams);
}

/**
* @param aliasToRemove
* addAlias adds one alias to the account. Adding each alias takes separate Soap Request
**/
ZaItem.prototype.removeAlias = 
function (aliasToRemove) {
	var soapCmd  ;
	
	switch(this.type) {
		case ZaItem.ACCOUNT: soapCmd = "RemoveAccountAliasRequest" ; break ;
		case ZaItem.DL: soapCmd = "RemoveDistributionListAliasRequest" ; break ;
		default: throw new Error("Can't add alias for account type: " + account.type) ;				
	}

	var soapDoc = AjxSoapDoc.create(soapCmd, ZaZimbraAdmin.URN, null);
	soapDoc.set("id", this.id);
	soapDoc.set("alias", aliasToRemove);	
	//var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_REMOVE_ALIAS
	}
	ZaRequestMgr.invoke(params, reqMgrParams);	
}

ZaItem.checkInteropSettings  =
function () {

    var controller =  ZaApp.getInstance().getCurrentController() ;

    try {
        //bug 29424 - save the settings before the check
//        var oldSettingObj = controller._currentObject  ;
//        ZaItem.checkFBSettings (oldSettingObj, currentSettingObj, controller) ;
        var currentSettingObj = this.getForm().getInstance() ;
        var defaultValues = currentSettingObj._defaultValues ; //it could be the global settings for domain

       //if(window.console && window.console.log) console.log("Checking the interop settings ...") ;
       var soapCmd  = "CheckExchangeAuthRequest";
       var soapDoc = AjxSoapDoc.create(soapCmd, ZaZimbraAdmin.URN, null);
       var authEl = soapDoc.set("auth", "") ;

        var attrNames = [ZaDomain.A_zimbraFreebusyExchangeURL, ZaDomain.A_zimbraFreebusyExchangeAuthScheme,
                             ZaDomain.A_zimbraFreebusyExchangeAuthUsername, ZaDomain.A_zimbraFreebusyExchangeAuthPassword ];

        for (var i=0; i < attrNames.length; i ++ ) {
           var n = attrNames [i] ;
           var value =  currentSettingObj.attrs[n] || defaultValues.attrs[n];
           if (value == null) {
               var errorMsg ;
               if (n == ZaDomain.A_zimbraFreebusyExchangeURL) {
                   errorMsg = ZaMsg.Error_missing_exchange_url ;
               } else if (n == ZaDomain.A_zimbraFreebusyExchangeAuthScheme) {
                   errorMsg = ZaMsg.Error_missing_scheme ;
               } else if (n == ZaDomain.A_zimbraFreebusyExchangeAuthUsername) {
                   errorMsg = ZaMsg.Error_missing_exchange_username ;
               } else if (n == ZaDomain.A_zimbraFreebusyExchangeAuthPassword) {
                   errorMsg = ZaMsg.Error_missing_exchange_password ;
               }
               controller.popupErrorDialog(errorMsg);
               return ;
           } else {
               var attrName ;
               if (n == ZaDomain.A_zimbraFreebusyExchangeURL) {
                   attrName = "url" ;
               } else if (n == ZaDomain.A_zimbraFreebusyExchangeAuthScheme) {
                    attrName = "scheme" ;
               } else if (n == ZaDomain.A_zimbraFreebusyExchangeAuthUsername) {
                   attrName = "user" ;
               } else if (n == ZaDomain.A_zimbraFreebusyExchangeAuthPassword) {
                   attrName = "pass" ;
               }
               authEl.setAttribute(attrName, value ) ;
           }
        }
  
        var params = new Object();
        params.soapDoc = soapDoc;
        var reqMgrParams = {
            controller : controller ,
            busyMsg : ZaMsg.BUSY_CHECKING_INTEROP_SETTINGS
        }
        var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.CheckExchangeAuthResponse;
        
        controller.popupMsgDialog(resp.code[0]._content + "<br />" + resp.message[0]._content) ;
    }catch (e) {
        controller._handleException(e)  ;
    }
}

ZaItem.clearInteropSettings = function () {
     var currentSettingObj = this.getForm().getInstance() ;
     var attrNames = [ZaDomain.A_zimbraFreebusyExchangeURL, ZaDomain.A_zimbraFreebusyExchangeAuthScheme,
                     ZaDomain.A_zimbraFreebusyExchangeAuthUsername, ZaDomain.A_zimbraFreebusyExchangeAuthPassword,
                     ZaDomain.A_zimbraFreebusyExchangeUserOrg ] ;

    for (var i=0; i < attrNames.length; i ++ ) {
        var n = attrNames [i] ;
        this.setInstanceValue("", n) ;
    }
    var form = this.getForm();
    form.parent.setDirty(true);
    form.refresh () ;
}

//Sometimes, the admin extensions needs to modify the object value before it is set
//We can add the modifer function in the extension and it will be called by the main program
ZaItem.ObjectModifiers = {} ;
ZaItem.prototype.modifyObject =
function () {
    if(ZaItem.ObjectModifiers[this._iKeyName]) {
		var methods = ZaItem.ObjectModifiers[this._iKeyName];
		var cnt = methods.length;
		for(var i = 0; i < cnt; i++) {
			if(typeof(methods[i]) == "function") {
				methods[i].call(this);
			}
		}
	}
}

/** It is used to get the object description property value.
 *  especially when it has multi-values
 *
 * @param desp
 */
ZaItem.initDescriptionItem = function () { 
    ZaItem.descriptionModelItem =  {id:"description", type: _LIST_, ref:"attrs/description",
            listItem:{type:_STRING_}
        } ;

    ZaItem.descriptionXFormItem = {
        ref:"description",  msgName:ZaMsg.NAD_Description,
        label:ZaMsg.NAD_Description, labelLocation:_LEFT_, //cssClass:"admin_xform_name_input" ,
        labelCssStyle:"vertical-align:top",
        type:_REPEAT_,
        align:_LEFT_,
        repeatInstance:"",
        showAddButton:false,
        showRemoveButton:false,
        showAddOnNextRow:false,
       //    enableDisableChecks:[ZaItem.hasWritePermission] ,
       //    visibilityChecks:[ZaItem.hasReadPermission],
        items: [
            {ref:".", type:_TEXTFIELD_,
                enableDisableChecks:[] ,
                visibilityChecks:[],
                width:"30em"}
        ]
    } ;
}

ZaItem.initDescriptionItem();

ZaItem.getDescriptionValue = function (desp) {
    if ( !desp)  desp = "";
    
    if (desp instanceof Array) {
        desp = desp.toString ();
    }

    return desp ;
}

/**
 *
 * @param entry
 * @param attrName
 * @return an new array object with the each value deep copied
 */
ZaItem.deepCloneListItem = function (sourceValue) {
   if (sourceValue == null) {
       return [];
    } else if (! (sourceValue instanceof Array)) {
       return [sourceValue] ;
    } else {
       var val = [] ;
       for (var i = 0 ; i < sourceValue.length; i ++) {
            val.push (sourceValue[i]) ;
       }
       return val ;
   }
}

/**
 * Method of XFormItem
 */
ZaItem.hasReadPermission = function (refToCheck, instance) {
	if(ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE')
		return true;
	
	if(!instance)
		instance = this.getInstance();
	
	if (!instance.getAttrs)
		return false;
	
	var refPath=null;
	if(refToCheck) {
		refPath=refToCheck;
	} else {
		if(!this.refPath)
			return true;
		else
			refPath=this.refPath;
	}
		
	return ((instance.getAttrs.all === true) || (instance.getAttrs[refPath] === true));
}
XFormItem.prototype.hasReadPermission = ZaItem.hasReadPermission;
OSelect1_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];
Checkbox_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];
Textfield_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];
Select1_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];
Repeat_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];

/**
 * Method of XFormItem
 */
ZaItem.hasWritePermission = function (refToCheck,instance) {
	if(ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE')
		return true;

	if(!instance)
		instance = this.getInstance();
	
	if (!instance.setAttrs)
		return false;
	
	var refPath=null;
	if(refToCheck) {
		refPath=refToCheck;
	} else {
		if(!this.refPath)
			return true;
		else
			refPath=this.refPath;
	}
		
	return ((instance.setAttrs.all === true) || (instance.setAttrs[refPath] === true));
}


XFormItem.prototype.hasWritePermission = ZaItem.hasWritePermission;
Textfield_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
OSelect1_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
Checkbox_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
Select1_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
Repeat_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];

/**
 * Method of XFormItem
 */
ZaItem.hasRight = function (right, instance) {
	if(ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE')
		return true;
		
	if(!instance)
		instance = this.getInstance();

	if(!right)
		return true;
	
	if(!instance.rightsLoaded && instance.id && instance.loadEffectiveRights) {
		instance.loadEffectiveRights("id", instance.id, true);
	}
	
	if (!instance.rights)
		return false;
	
		
	return (instance.rights[right] === true);
}
XFormItem.prototype.hasRight = ZaItem.hasRight;

ZaItem.hasAnyRight = function (rights, instance) {
	if(ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE')
		return true;

	if(!instance)
		instance = this.getInstance();

	if (!instance.rights)
		return false;

    if (!rights)
        return true;

    if (!rights instanceof Array)
        rights = [rights];

    for (var i = 0; i < rights.length; i++) {
        if (instance.rights[rights[i]] === true) {
            return true;
        }
    }
    return false;
}
XFormItem.prototype.hasAnyRight = ZaItem.hasAnyRight;

ZaItem.adminHasAnyRight = function (rights) {
    if(ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE') {
        return true;
    }

    if (!rights) {
        return true;
    }

    if (!rights instanceof Array) {
        rights = [rights];
    }

    var adminAccount = new ZaAccount();
    adminAccount.load(null, ZaZimbraAdmin.currentAdminId, false, true);

    if (!adminAccount.rights) {
        return false;
    }

    for (var i = 0; i < rights.length; i++) {
        if (adminAccount.rights[rights[i]] === true) {
            return true;
        }
    }

    return false;
}

ZaItem.formatServerTime = function(serverStr) {
	if(serverStr) {
		var regex = /(\d{14})\.\d{3}Z/;
		serverStr = serverStr.replace(regex, '$1Z');
		var ajxTKServerStr = serverStr.substring(0,8) + "T" + serverStr.substring(8) ;
		var curDate = AjxDateUtil.parseServerDateTime(ajxTKServerStr);	
        var formatter = AjxDateFormat.getDateTimeInstance(AjxDateFormat.LONG) ;
      	return formatter.format(curDate) ;
	} else {
		return "";
	}	
}

ZaItem.getZeroIsUnlimitedItem = function () {
    var item= { type: _DWT_ALERT_,
//              containerCssStyle: "padding-top:20px;width:400px;",
              style: DwtAlert.INFORMATION,
              iconVisible: true,
              content: ZaMsg.NAD_ZERO_UNLIMETED
            } ;
    return item ;
}

/**
 * Returns the copyright information for the about screen
 *
 * @return {string} copyright string with the end year information
 */
ZaItem.getAboutScreenCopyright = function() {
    var version = ZaServerVersionInfo.version || 'N/A';
    var release = ZaServerVersionInfo.release || 'N/A';
    return AjxMessageFormat.format(ZabMsg.aboutScreenCopyright, [version, release, AjxDateUtil.getYearStr()]);
}

/**
 * Returns the copyright information for the login screen and the subsequent splash screen
 *
 * @return {string} copyright string with the end year information
 */
ZaItem.getSplashScreenCopyright = function() {
	return AjxMessageFormat.format(ZabMsg.splashScreenCopyright, [AjxDateUtil.getYearStr()]);
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaId")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
 * @overview
 * This file contains ids.
 * 
 */

/**
 * Constructor
 * 
 * @author Conrad Damon
 */
ZaId = function() {};


/* Element IDs, and functions to generate them */


// widget types (used to prefix IDs)
/**
 * Defines the "generic element" widget type prefix.
 */
ZaId.WIDGET				= "z";			// generic element
/**
 * Defines the "view within content area" widget type prefix.
 */
ZaId.WIDGET_VIEW			= "zv";			// view within content area
/**
 * Defines the "toolbar" widget type prefix.
 */
ZaId.WIDGET_TOOLBAR			= "ztb";		// toolbar
/**
 * Defines the "button" widget type prefix.
 */
ZaId.WIDGET_BUTTON			= "zb";			// button
/**
 * Defines the "text input or textarea" widget type prefix.
 */
ZaId.WIDGET_INPUT			= "zi";			// text input or textarea
/**
 * Defines the "menu" widget type prefix.
 */
ZaId.WIDGET_MENU			= "zm";			// menu
/**
 * Defines the "menu item" widget type prefix.
 */
ZaId.WIDGET_MENU_ITEM			= "zmi";		// menu item
/**
 * Defines the "dropdown select" widget type prefix.
 */
ZaId.WIDGET_SELECT			= "zs";			// dropdown select
/**
 * Defines the "collection of overview" widget type prefix.
 */
ZaId.WIDGET_OVERVIEW_CNTR		= "zovc";		// collection of overviews
/**
 * Defines the "collection of tree views" widget type prefix.
 */
ZaId.WIDGET_OVERVIEW			= "zov";		// collection of tree views
/**
 * Defines the "tree view" widget type prefix.
 */
ZaId.WIDGET_TREE			= "zt";			// tree view
/**
 * Defines the "root tree item" widget type prefix.
 */
ZaId.WIDGET_TREE_ITEM_HDR		= "ztih";		// root tree item
/**
 * Defines the "tree item (node)" widget type prefix.
 */
ZaId.WIDGET_TREE_ITEM			= "zti";		// tree item (node)
/**
 * Defines the "tab button" widget type prefix.
 */
ZaId.WIDGET_TAB				= "ztab";		// tab button
/**
 *  * Defines the "tab view" widget type prefix.
 *   */
ZaId.WIDGET_TAB_VIEW                    = "ztabv";               // tab view

/**
 *  * Defines the "dialog" widget type prefix.
 *   */
ZaId.WIDGET_DLG                         = "zdlg";               //  dialog

/**
 *  * Defines the "dialog view " widget type prefix.
 *   */
ZaId.WIDGET_DLG_VIEW                    = "zdlgv";               // dialog view

/**
 * Defines the "dialog button" widget type prefix.
 */
ZaId.WIDGET_DLG_BUTTON			= "zdlgb";		//  dialog button

/**
 * Defines the "search panel view" widget type prefix.
 */
ZaId.WIDGET_SEARCH_VIEW			= "zschv";		// view within search panel



/* Preset IDs */


/*
 * Container IDs defined by the skin.
 * 
 * These must match what's in skin.html. They are used by ZmAppViewMgr to visually
 * match components to the containers in which they should be positioned. 
 */
ZaId.SKIN_APP_BOTTOM_TOOLBAR			= "skin_container_app_bottom_toolbar";
ZaId.SKIN_APP_CHOOSER				= "skin_container_app_chooser";
ZaId.SKIN_APP_MAIN_FULL				= "skin_container_app_main_full";
ZaId.SKIN_APP_MAIN				= "skin_container_app_main";
ZaId.SKIN_APP_MAIN_ROW_FULL			= "skin_tr_main_full";
ZaId.SKIN_APP_MAIN_ROW				= "skin_tr_main";
ZaId.SKIN_APP_TOP_TOOLBAR			= "skin_container_app_top_toolbar";
ZaId.SKIN_LINKS					= "skin_container_links";
ZaId.SKIN_LOGO					= "skin_container_logo";
ZaId.SKIN_QUOTA_INFO				= "skin_container_quota";
ZaId.SKIN_SASH					= "skin_container_tree_app_sash";
ZaId.SKIN_SEARCH_BUILDER			= "skin_container_search_builder";
ZaId.SKIN_SEARCH_BUILDER_TOOLBAR		= "skin_container_search_builder_toolbar";
ZaId.SKIN_SEARCH_BUILDER_TR			= "skin_tr_search_builder";
ZaId.SKIN_SEARCH				= "skin_container_search";
ZaId.SKIN_PEOPLE_SEARCH				= "skin_container_people_search";
ZaId.SKIN_SHELL					= "skin_outer";
ZaId.SKIN_SPACING_SEARCH			= "skin_spacing_search";
ZaId.SKIN_SPLASH_SCREEN				= "skin_container_splash_screen";
ZaId.SKIN_STATUS				= "skin_container_status";
ZaId.SKIN_STATUS_ROW				= "skin_tr_status";
ZaId.SKIN_TREE_FOOTER				= "skin_container_tree_footer";
ZaId.SKIN_TREE					= "skin_container_tree";
ZaId.SKIN_USER_INFO				= "skin_container_username";
ZaId.SKIN_TASKBAR				= "skin_container_taskbar";
ZaId.SKIN_FOOTER				= "skin_footer";
ZaId.SKIN_AD					= "skin_adsrvc";


/* Literal IDs */


/*
 * Top-level components. These are elements that are placed directly into skin containers.
 */
ZaId.SHELL					= "z_shell";			// the main shell
ZaId.LOADING_VIEW				= "z_loading";			// "Loading..." view
ZaId.MAIN_SASH					= "z_sash";				// sash between overview and content
ZaId.BANNER					= "z_banner";			// logo (at upper left by default)
ZaId.SEARCH_TOOLBAR				= "ztb_search";			// search toolbar
ZaId.PEOPLE_SEARCH_TOOLBAR			= "ztb_people_search";	// people search toolbar
ZaId.USER_NAME					= "z_userName";			// account name
ZaId.USER_QUOTA					= "z_userQuota";		// quota
ZaId.PRESENCE					= "z_presence";			// presence
ZaId.TASKBAR					= "z_taskbar";			// taskbar
ZaId.NEW_FOLDER_BUTTON				= "zb_newFolder";		// New Folder button on current app toolbar
ZaId.STATUS_VIEW				= "z_status";			// status view (shows toast)
ZaId.TOAST					= "z_toast";			// toast
ZaId.APP_CHOOSER				= "ztb_appChooser";		// app chooser toolbar
/* New UI*/
ZaId.CURRENT_APP_BAR         = "zb_currentApp";

/* Functions for generating IDs */


/**
 * Generates the ID for a toolbar.
 * 
 * <p>
 * Examples: <code>ztb|CLV ztb|TV|Nav ztb|CV|Inv</code>
 * </p>
 * 
 * @param 	{String}	context	the toolbar context (ID of owning view)
 * @param	{constant}	tbType	the type of toolbar (for example, invite or nav)
 * @return	{String}	the id
 */
ZaId.getToolbarId =
function(context, tbType) {
	return DwtId._makeId(ZaId.WIDGET_TOOLBAR, context, tbType);
};

/**
 * Generates the ID for a button. Intended for use with the top toolbar, nav toolbar,
 * and invite toolbar.
 * 
 * @param 	{String}	context	the toolbar context (ID of owning view)
 * @param 	{constant}	op	the button operation
 * @param 	{constant}	tbType	the type of toolbar (eg invite or nav)
 * @return	{String}	the id
 */
ZaId.getButtonId =
function(context, op, tbType) {
	return DwtId._makeId(ZaId.WIDGET_BUTTON, context, tbType, op);
};

/**
 * Generates the ID for an action menu.
 * 
 * @param 	{String}	context		the menu context (eg ID of owning view, or app)
 * @param 	{constant}	menuType	the type of menu (eg participant)
 * @return	{String}	the id
 */
ZaId.getMenuId =
function(context, menuType) {
	return DwtId._makeId(ZaId.WIDGET_MENU, context, menuType);
};

/**
 * Generates the ID for a menu item in an action menu.
 * 
 * @param 	{String}	context		the menu context
 * @param 	{constant}	op		the menu operation
 * @param 	{constant}	menuType	the type of menu (eg participant)
 * @return	{String}	the id
 */
ZaId.getMenuItemId =
function(context, op, menuType) {
	return DwtId._makeId(ZaId.WIDGET_MENU_ITEM, context, menuType, op);
};

/**
 * Generates the ID for an overview container.
 *
 * @param 	{String}	overviewContainerId	the overview container ID
 * @return	{String}	the id
 */
ZaId.getOverviewContainerId =
function(overviewContainerId) {
	return DwtId._makeId(ZaId.WIDGET_OVERVIEW_CNTR, overviewContainerId);
};

/**
 * Generates the ID for an overview.
 * 
 * @param 	{String}	overviewId	the overview ID
 * @return	{String}	the id
 */
ZaId.getOverviewId =
function(overviewId) {
	return DwtId._makeId(ZaId.WIDGET_OVERVIEW, overviewId);
};

/**
 * Generates the ID for a tree within an overview.
 * 
 * @param 	{String}	overviewId	the overview ID
 * @param 	{String}	orgType 	the organizer type (see <code>ZaId.ORG_</code> constants)
 * @return	{String}	the id
 */
ZaId.getTreeId =
function(overviewId, orgType) {
	return DwtId._makeId(ZaId.WIDGET_TREE, overviewId, orgType);
};

/**
 * Generates a tree item ID 
 * 
 * @param 	{String}	overviewId	the unique ID for overview
 * @param 	{ZmOrganizer}	organizerId	the ID of the data object backing tree item
 * @param 	{constant}	type		the organizer type (for headers only)
 * @return	{String}	the id
 */
ZaId.getTreeItemId =
function(overviewId, organizerId, type, indexNo) {
	//if (!organizerId && !type) { return; }
	if (type) {
		return DwtId._makeId(ZaId.WIDGET_TREE_ITEM_HDR, overviewId, organizerId, indexNo);
	} else {
		return DwtId._makeId(ZaId.WIDGET_TREE_ITEM, overviewId, organizerId, indexNo);
	}
};

/**
 * Generates an ID for a view 
 * 
 * @param 	{constant}	viewId		the view identifier 
 * @param 	{constant}	component	the component identifier 
 * @param 	{constant}	context		the ID of owning view
 * @return	{String}	the id
 */
ZaId.getViewId =
function(viewId, component, context) {
	var id = DwtId._makeId(ZaId.WIDGET_VIEW, context, viewId);
	return component ? [id, component].join("") : id;
};

/**
 * Generates an ID for a dialog
 * 
 * @param       {constant}      component       the component identifier
 * @param       {constant}      context         the ID of owning view
 * @return      {String}        the id
 */
ZaId.getDialogId =
function(component, context) {
	return DwtId._makeId(ZaId.WIDGET_DLG, component, context);
};

/**
 * Generates an ID for a dialog view
 * 
 * @param       {constant}      component       the component identifier
 * @param       {constant}      context         the ID of owning view
 * @return      {String}        the id
 */
ZaId.getDialogViewId =
function(component, context) {
	return DwtId._makeId(ZaId.WIDGET_DLG_VIEW, component, context);
};


/**
 * Generates an ID for a dialog button
 * 
 * @param       {constant}      component       the component identifier
 * @param       {constant}      context         the ID of owning view
 * @return      {String}        the id
 */
ZaId.getDialogButtonId =
function(component, context) {
	return DwtId._makeId(ZaId.WIDGET_DLG_BUTTON, component, context);
};



/**
 * Generates an ID for the compose view
 * 
 * @param 	{constant}	component	component identifier 
 * @return	{String}	the id
 */
ZaId.getComposeViewId =
function(component) {
	var id = DwtId._makeId(ZaId.WIDGET, ZaId.COMPOSE_VIEW);
	return component ? [id, component].join("") : id;
};

/**
 * Generates an ID for a tab (actually the tab button in the tab bar).
 * 
 * @param 	{constant}	context		the owning view identifier 
 * @param 	{String}	tabName		[string]name of tab
 * @return	{String}	the id
 */
ZaId.getTabId =
function(context, tabName) {
	return DwtId._makeId(ZaId.WIDGET_TAB, context, tabName);
};


/**
 * Generates an ID for a tab view.
 * 
 * @param 	{constant}	context		the owning view identifier 
 * @param 	{String}	tabName		[string]name of tab
 * @return	{String}	the id
 */
ZaId.getTabViewId =
function(context, tabName) {
	return DwtId._makeId(ZaId.WIDGET_TAB_VIEW, context, tabName);
};


/**
 * Generates an ID for a pref page tab.
 *
 * @param	{String}	tabKey		the tab key
 * @return	{String}	the id
 */
ZaId.getPrefPageId = function(tabKey) {
	return "PREF_PAGE_"+tabKey;
};


/**
 * Generates an ID for a search view.
 * 
 * @param 	{constant}	context		the owning view identifier 
 * @param 	{String}	tabName		[string]name of tab
 * @return	{String}	the id
 */
ZaId.getSearchViewId =
function(context, tabName) {
	return DwtId._makeId(ZaId.WIDGET_SEARCH_VIEW, context, tabName);
};



/*
 * 
 * Gettings IDs for different areas of Admin console
 * 
 */

/*
 * -----------
 *    App 
 * -----------
 * 
 */

// context
ZaId.APP	= "App";

/*
 * ---------
 * Overviews
 * ---------
 * 
 */


/* address */
ZaId.TREEITEM_ACCOUNT		= "ACCOUNT";
ZaId.TREEITEM_ALIASES		= "ALIASES";
ZaId.TREEITEM_DL		= "DL";
ZaId.TREEITEM_RESOURCES		= "RESOURCES";
/* configuration */
ZaId.TREEITEM_COS		= "COS";
ZaId.TREEITEM_DOMAINS		= "DOMAINS";
ZaId.TREEITEM_SERVERS		= "SERVERS";
ZaId.TREEITEM_ZIMLETS		= "ZIMLETS";
ZaId.TREEITEM_ADMINEXT		= "AEMINEXT";
ZaId.TREEITEM_GSET		= "GSET";
ZaId.TREEITEM_RIGHTS		= "RIGHTS";
ZaId.TREEITEM_GACL		= "GACL";
/* monitoring */
ZaId.TREEITEM_SSTATUS		= "SSTATUS";
ZaId.TREEITEM_SSTATIS		= "SSTATIS";
/* tools */
ZaId.TREEITEM_MQUEUE		= "MQUEUE";
ZaId.TREEITEM_BACKUPS		= "BACKUPS";
ZaId.TREEITEM_DATAINPUT		= "DATAINPUT";
ZaId.TREEITEM_CERT		= "CERT";
ZaId.TREEITEM_SEARCHMAIL	= "SEARCHMAIL";
/* search */



/*
 * ----------
 *  panel 
 * ----------
 *
 */

// Overview panel
ZaId.PANEL_APP			= "AppAdmin";
ZaId.PANEL_ADDRESS		= "ADDRESS";
ZaId.PANEL_CONFIGURATION	= "CONFIGURATION";
ZaId.PANEL_MONITORING		= "MONITORING";
ZaId.PANEL_TOOLS		= "TOOLS";
ZaId.PANEL_SEARCHS		= "SEARCHOPTS";


// search panel
ZaId.PANEL_APPSEARCH		= "AppSearch";
ZaId.SEARCH_VIEW		= "SEARCHV";
ZaId.SEARCH_QUERY		= "SEARCH_QUERY";



/* 
 * ------------
 * List  View 
 * ------------
 *
 * */

ZaId.VIEW_ACCTLIST              = "ACLV";
ZaId.VIEW_ALASLIST		= "ALLV";
ZaId.VIEW_DLLIST		= "DLLV";  // redundant
ZaId.VIEW_RESLIST		= "RESLV";

ZaId.VIEW_COSLIST		= "COSLV";
ZaId.VIEW_DMLIST		= "DMLV";
ZaId.VIEW_SERLIST		= "SERLV";
ZaId.VIEW_ZIMLIST		= "ZIMLV";
ZaId.VIEW_AELIST		= "AELV";
ZaId.VIEW_GSETLIST		= "GSLV";  // redundant
ZaId.VIEW_RIGHTLIST		= "RLV";
ZaId.VIEW_GACLIST		= "ACLV";

ZaId.VIEW_STATUSLIST		= "STALV"; 
ZaId.VIEW_STATISLIST		= "STSLV";

ZaId.VIEW_MQLIST		= "MQLV";  // redundant
ZaId.VIEW_BKLIST		= "BKLV";
ZaId.VIEW_DILIST		= "DILV";
ZaId.VIEW_CRTLIST		= "CRTLV";
ZaId.VIEW_SMLIST		= "SMLV";
ZaId.VIEW_SCHLIST		= "SCHLV";

ZaId.VIEW_MTALIST		= "MTALV";

ZaId.VIEW_MEMLIST		= "MEMLV";  // memberOf list view

/* View */
ZaId.VIEW_ACCT              	= "ACCTV";
ZaId.VIEW_ALAS              	= "ALASV";
ZaId.VIEW_DL                	= "DLV";
ZaId.VIEW_RES               	= "RESV";

ZaId.VIEW_COS               	= "COSV";
ZaId.VIEW_DOMAIN                = "DMV";
ZaId.VIEW_SERVER               	= "SERV";
ZaId.VIEW_ZIMLET               	= "ZIMV";
ZaId.VIEW_ADEXT                	= "AEV";
ZaId.VIEW_GSET              	= "GSV";
ZaId.VIEW_RIGHT             	= "RTV";
ZaId.VIEW_GACL               	= "GACV";

ZaId.VIEW_STATUS            	= "STAV";
ZaId.VIEW_STATIS            	= "STSV";

ZaId.VIEW_MQ                	= "MQV";  //redundant
ZaId.VIEW_BK                	= "BKV";
ZaId.VIEW_DI                	= "DIV";
ZaId.VIEW_CRT               	= "CRTV";
ZaId.VIEW_SM                	= "SMV";
ZaId.VIEW_SCH               	= "SCHV";

ZaId.VIEW_MTA			= "MTAV";

ZaId.VIEW_HOME          = "HOMEV";
/* Operation  */
ZaId.OP_NEW_ACCT		= "NEW_ACCT";
ZaId.OP_EDIT_ACCT		= "EDIT_ACCT";
ZaId.OP_DEL_ACCT		= "DEL_ACCT";
ZaId.OP_CHD_ACCTPWD		= "CHD_ACTPWD";

/* click type */
ZaId.OP_CLICK_LEFT		= "LEFT_CLICK";
ZaId.OP_CLICK_RIGHT		= "RIGHT_CLICK";
ZaId.OP_CLICK_DBLEFT 		= "DBLEFT_CLICK";


/* Menu type */
ZaId.MENU_DROP			= "MENU_DROP";
ZaId.MENU_POP			= "MENU_POP";


/* tab */
ZaId.TAB_GROUP			= "TAB_GROUP";

ZaId.TAB_MAIN			= "MAIN_TAB";
ZaId.TAB_ACCT_MANAGE		= "ACCT_MANAGE";
ZaId.TAB_ACCT_EDIT		= "ACCT_EDIT";
ZaId.TAB_ALIAS_MANAGE           = "ALIAS_MANAGE";
ZaId.TAB_ALIAS_EDIT             = "ALIAS_EDIT";
ZaId.TAB_DL_MANAGE            	= "DL_MANAGE";
ZaId.TAB_DL_EDIT              	= "DL_EDIT";
ZaId.TAB_RES_MANAGE            	= "RES_MANAGE";
ZaId.TAB_RES_EDIT              	= "RES_EDIT";

ZaId.TAB_COS_MANAGE		= "COS_MANAGE";
ZaId.TAB_COS_EDIT		= "COS_EDIT";
ZaId.TAB_DOMAIN_MANAGE          = "DOMAIN_MANAGE";
ZaId.TAB_DOMAIN_EDIT            = "DOAMIN_EDIT";
ZaId.TAB_SERVER_MANAGE          = "SERVER_MANAGE";
ZaId.TAB_SERVER_EDIT            = "SERVER_EDIT";
ZaId.TAB_ZIM_MANAGE             = "ZIMLET_MANAGE";
ZaId.TAB_ZIM_EDIT               = "ZIMLET_EDIT";
ZaId.TAB_AE_MANAGE              = "ADMEXT_MANAGE";
ZaId.TAB_AE_EDIT                = "ADMEXT_EDIT";
ZaId.TAB_STATUS_MANAGE          = "STATUS_MANAGE";
ZaId.TAB_STATUS_EDIT            = "STATUS_EDIT";
ZaId.TAB_MTX_MANAGE             = "MTX_MANAGE";
ZaId.TAB_MTX_EDIT               = "MTX_EDIT";
ZaId.TAB_SEARCH_MANAGE          = "SEARCH_MANAGE";
ZaId.TAB_SEARCH_EDIT            = "SEARCH_EDIT";
ZaId.TAB_GSET_EDIT              = "GSET_EDIT";

ZaId.TAB_DOWNLOADS		= "DOWNLOADS";
ZaId.TAB_VIEWRIGHTS		= "VIEW_RIGHTS";

ZaId.TAB_UNDEF			= "UNDEFINE";


/* tab view */
/*
ZaId.TABV_ACCT_EDIT              = "V_ACCT_EDIT";
ZaId.TABV_DL_EDIT                = "V_DL_EDIT";
ZaId.TABV_RES_EDIT               = "V_RES_EDIT";
ZaId.TABV_COS_EDIT               = "V_COS_EDIT";
ZaId.TABV_DOMAIN_EDIT            = "V_DOAMIN_EDIT";
ZaId.TABV_SERVER_EDIT            = "V_SERVER_EDIT";
ZaId.TABV_ZIM_EDIT               = "V_ZIMLET_EDIT";
ZaId.TABV_AE_EDIT                = "V_ADMEXT_EDIT";
ZaId.TABV_STATUS_EDIT            = "V_STATUS_EDIT";
ZaId.TABV_MTX_EDIT               = "V_MTX_EDIT";
ZaId.TABV_GSET_EDIT              = "V_GSET_EDIT";
*/



/* Dialog */
ZaId.DLG_NEW_ACCT		= "NEW_ACCT";
ZaId.DLG_NEW_ALIAS              = "NEW_ALIAS";
ZaId.DLG_EDIT_ALIAS             = "EDIT_ALIAS";
ZaId.DLG_EDIT_SIGNATURE         = "EDIT_SIGNATURE";
ZaId.DLG_NEW_RES               	= "NEW_RES";
ZaId.DLG_NEW_ADMIN              = "NEW_ADMIN";
ZaId.DLG_NEW_DOMAIN             = "NEW_DOMAIN";
ZaId.DLG_ZIM_DEPLOY             = "ZIM_DEPLOY";
ZaId.DLG_AUTH_CONFIG            = "AUTH_CONFIG";
ZaId.DLG_AUTPROV_CONFIG         = "AUTOPROV_CONFIG";
ZaId.DLG_AUTPROV_MANUAL         = "AUTOPROV_MANUAL";
ZaId.DLG_AUTPROV_MANUAL_PWD     = "AUTOPROV_MANUAL_PWD";
ZaId.DLG_AUTH_SPNEGO            = "AUTH_SPNEGO";
ZaId.DLG_AUTH_SPNEGO_UA         = "AUTH_SPNEGO_UA";
ZaId.DLG_NEW_DL                 = "NEW_DL";
ZaId.DLG_NEW_COS                = "NEW_COS";
ZaId.FLUSH_SERVER_CACHE			= "FLUSH_SERVER_CACHE";

ZaId.DLG_MSG			= "MSG";
ZaId.DLG_ERR			= "ERR";


ZaId.DLG_UNDEF			= "UNDEFINE";

/* controller */

ZaId.CTR_GLOBAL			= "GLOBAL_"
ZaId.CTR_PREFIX			= "CTR_";

// ZaId.CTR_PREFIX should be used like the follows:
// e.g.
// ZaId.CTR_VIEW_ACCT = ZaId.CTR_PREFIX + ZaId.VIEW_ACCT
// ZaId.CTR_VIEW_ACCTLIST = ZaId.CTR_PREFIX + ZaId.VIEW_ACCTLIST 

ZaId.CTR_UNDEF			= "CTR_UNDEFINE";
}
if (AjxPackage.define("zimbraAdmin.common.ZaIPUtil")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 3/28/12
 * Time: 4:26 AM
 * To change this template use File | Settings | File Templates.
 */

ZaIPUtil = function () {

}

ZaIPUtil.MASK_RE = /^\d{1,3}$/;
ZaIPUtil.IP4_CHUNK_RE = ZaIPUtil.MASK_RE;
ZaIPUtil.IP6_CHUNK_RE = /^([A-Fa-f0-9]{1,4})$/;
ZaIPUtil.IPMIX_PREFIX_RE = /^::(f|F){4}:$/;
// The following doesn't need localization
ZaIPUtil.ERROR_CIDR_NULL = "ERROR_CIDR_NULL";
ZaIPUtil.ERROR_MASK_NULL = "ERROR_MASK_NULL";
ZaIPUtil.ERROR_MASK_FORMAT = "ERROR_MASK_FORMAT";
ZaIPUtil.ERROR_IP_NULL = "ERROR_IP_NULL";
ZaIPUtil.ERROR_IP_FORMAT = "ERROR_IP_FORMAT";
ZaIPUtil.ERROR_IP_VER_DISMATCH = "ERROR_IP_VER_DISMATCH";
ZaIPUtil.isValidCIDR = function (cidrStr) {
    if (!cidrStr)
        throw ZaIPUtil.ERROR_CIDR_NULL;

    var maskIndex = cidrStr.indexOf("/");
    if (maskIndex == -1) {
        throw ZaIPUtil.ERROR_MASK_NULL;
    }
    var ipPart = cidrStr.substring(0, maskIndex);
    var maskPart = cidrStr.substring(maskIndex + 1);
    if (!ZaIPUtil.MASK_RE.test(maskPart)) {
        throw ZaIPUtil.ERROR_MASK_FORMAT;
    }
    var maskData = parseInt (maskPart, 10);
    var ipData = ZaIPUtil.isValidIP (ipPart);
    if (!ipData)
        return "";

    if (ipData.ver == ZaIPData.v4) {
        if (maskData > 32)
            throw ZaIPUtil.ERROR_MASK_FORMAT;
    } else {
        if (maskData > 128)
            throw ZaIPUtil.ERROR_MASK_FORMAT;
    }

    return new ZaCIDRData(ipData, maskData, cidrStr);

}


// TODO  Add more check for parameter
// for nifs data we get from server and can't be modified in admin console.
// We will assume the input is valid here
ZaIPUtil.getNetworkAddr = function (ipData, maskData) {
    var totalBit;
    var bitPerChunk;
    if (ipData.ver == ZaIPData.v4) {
        totalBit = 32;
        bitPerChunk = 8;
    } else if (ipData.ver == ZaIPData.v6){
        totalBit = 128;
        bitPerChunk = 16;
    }

    var allOneLength = Math.floor(maskData / bitPerChunk);
    var highOneBitNum = maskData % bitPerChunk;
    var nonZeroChunk =  ZaIPUtil.getNonZeroNum(highOneBitNum, bitPerChunk);
    var netIPData = [];
    for (var i = 0; i < ipData.fmtArr.length; i++) {
        if (allOneLength > 0) {
            netIPData.push(ipData.fmtArr[i]);
            allOneLength --;
        } else if (nonZeroChunk != 0) {
            var tmp = ipData.fmtArr[i] & nonZeroChunk;
            netIPData.push(tmp);
            nonZeroChunk = 0;
        } else {
            netIPData.push(0);
        }
    }

    return new ZaCIDRData(new ZaIPData(netIPData, ipData.ver, undefined, ipData.src), maskData);
}

ZaIPUtil.getNonZeroNum = function (sobn, chunkSize) {
    if (sobn == 0)
        return 0;
    var ret = 0;
    var baseValue = Math.pow(2, chunkSize - sobn);
    for (var i = 0; i < sobn; i++) {
        ret = ret + baseValue;
        baseValue = baseValue * 2;
    }
    return ret;
}

ZaIPUtil.countOneBit = function (num) {
    var ret = 0;
    while (num) {
        ret ++;
        num = num & (num -1);
    }
    return ret;
}

ZaIPUtil.getNetBit = function (netMask) {
    var isDot = (netMask.indexOf(".") != -1) ? true: false;
    var isColon = (netMask.indexOf(":") != -1) ? true: false;
    if ( !isDot && !isColon) {
        var netValue = parseInt(netMask, 16);
        return ZaIPUtil.countOneBit(netValue);
    }

    var ipData = ZaIPUtil.isValidIP(netMask);
    if (!ipData) {
        return 0;
    }

    var netBit = 0;
    for(var i = 0; i < ipData.fmtArr.length; i++) {
        if (ipData.fmtArr[i] == 0)
            break;
        netBit = netBit + ZaIPUtil.countOneBit(ipData.fmtArr[i]);
    }

    return netBit;
}

ZaIPUtil.isInSubNet = function (cidrData, ipData) {
    var cidrIP = cidrData.ipData;
    var mask = cidrData.mask;
    if (cidrIP.ver != ipData.ver) {
        return false;
    }

    var leftBitNum = mask;
    var currentCmpBit, crtFirstValue, crtSecondValue;
    var chunkSize = (cidrIP.ver == ZaIPData.v4) ? 8 : 16;
    for (var i = 0 ;i < cidrIP.fmtArr.length; i++) {
        if (leftBitNum == 0) {
            break;
        }

        if (leftBitNum >= chunkSize) {
            currentCmpBit = chunkSize;
        } else {
            currentCmpBit = leftBitNum;
        }

        leftBitNum = leftBitNum - chunkSize;

        crtFirstValue = cidrIP.fmtArr[i] >> (chunkSize - currentCmpBit);
        crtSecondValue = ipData.fmtArr[i] >> (chunkSize - currentCmpBit);
        if (crtFirstValue !=  crtSecondValue)  {
            return false;
        }
    }
    return true;
}

ZaIPUtil.compareIP = function(first, second) {
    if (!first || !second) {
        throw ZaIPUtil.ERROR_IP_NULL;
    }
    if (first.ver != second.ver) {
        throw ZaIPUtil.ERROR_IP_VER_DISMATCH;
    }

    if (first.fmtArr.length != second.fmtArr.length) {
        throw ZaIPUtil.ERROR_IP_VER_DISMATCH;
    }

    for (var i = 0; i < first.fmtArr.length; i++) {
        if (first.fmtArr[i] >  second.fmtArr[i])  {
            return 1;
        } else if (first.fmtArr[i] <  second.fmtArr[i]) {
            return -1;
        }
    }
    return 0;
}

ZaIPUtil.isValidIP = function (ipStr) {
    if (!ipStr) {
        throw ZaIPUtil.ERROR_IP_NULL;
    }

    var isDot = (ipStr.indexOf (".") == -1) ? false: true;
    var isColon = (ipStr.indexOf (":") == -1) ? false: true;
    if (!isColon && isDot) {
        return ZaIPUtil.isIPV4(ipStr);
    } else if (isColon && !isDot) {
        return ZaIPUtil.isIPV6(ipStr);
    } else if (isColon && isDot) {
        return ZaIPUtil.isIPVMix(ipStr);
    } else {
        throw ZaIPUtil.ERROR_IP_FORMAT;
    }
}

ZaIPUtil.isIPV4 = function (ipV4Str) {
    if (!ipV4Str) {
        throw ZaIPUtil.ERROR_IP_NULL;
    }
    var chunks = ipV4Str.split(".");
    if (chunks.length != 4) {
        throw ZaIPUtil.ERROR_IP_FORMAT;
    }

    //Check ipV4Str has '.' at index 0 (First dot in IPv4 address)
    if (ipV4Str[0] == ".") {
        throw ZaIPUtil.ERROR_IP_FORMAT;
    }
       
    //Check ipV4Str has '.' at the end of IP address (Last dot in IPv4 address)
    if (ipV4Str[ipV4Str.length -1] == ".") {
        throw ZaIPUtil.ERROR_IP_FORMAT;
    }
        
    //Invalid IPv4 address that has two or more adjacent dot
    for(var i = 0; i < ipV4Str.length - 1; i++) {
        if (ipV4Str[i] == "." && ipV4Str[i+1] == ".") {
            throw ZaIPUtil.ERROR_IP_FORMAT;
        }
    }

    var longValue;
    for (var i = 0; i < chunks.length; i++) {
        if (!chunks[i])
            throw ZaIPUtil.ERROR_IP_FORMAT;
        if (!ZaIPUtil.IP4_CHUNK_RE.test(chunks[i]))
            throw ZaIPUtil.ERROR_IP_FORMAT;

        // Must add 10 here to avoid leading 0.
        longValue = parseInt(chunks[i], 10);
        if (longValue > 255)
            throw ZaIPUtil.ERROR_IP_FORMAT;

        chunks[i] = longValue;
    }

    return new ZaIPData(chunks, ZaIPData.v4, undefined, ipV4Str);
}

ZaIPUtil.isIPV6 = function (ipV6Str) {
    if (!ipV6Str) {
        throw ZaIPUtil.ERROR_IP_NULL;
    }

    var ipCntStr;
    if ((ipV6Str[0] == "[") &&
        (ipV6Str[ipV6Str.length -1] == "]")) {
        ipCntStr =  ipV6Str.substring (1, ipV6Str.length - 1);
    } else {
        ipCntStr = ipV6Str;
    }

    var zoneIndex = ipCntStr.indexOf("%");
    var zoneContent;
    if (zoneIndex != -1) {
        zoneContent = ipCntStr.substring(zoneIndex + 1);
        ipCntStr = ipCntStr.substring(0, zoneIndex);
    }

    if (!ipCntStr) {
        throw ZaIPUtil.ERROR_IP_FORMAT;
    }

    // Only one group zero is allowed
    var isDottedQuad = ipCntStr.indexOf("::");
    if (isDottedQuad != -1) {
        if (ipCntStr.indexOf("::", isDottedQuad + 2) != -1)
            throw ZaIPUtil.ERROR_IP_FORMAT;
    }

    //Invalid IPv6 address that has three or more adjacent colon
    if (isDottedQuad != -1) {
        if (ipCntStr[isDottedQuad + 2] == ":") {
            throw ZaIPUtil.ERROR_IP_FORMAT;
        }
    }

    //':' is at index 0 of IP address (not group zero "::"). Ex: :2001:db8:cafe::1
    if (ipCntStr[0] == ":" && ipCntStr[1] != ":") {
        throw ZaIPUtil.ERROR_IP_FORMAT;
    }
        
    // ':' is at the end of IP address (not group zero "::"). Ex: 2001:db8:cafe::1: 
    if (ipCntStr[ipCntStr.length -1] == ":" && ipCntStr[ipCntStr.length -2] != ":") {
        throw ZaIPUtil.ERROR_IP_FORMAT;
    }
        
    var chunks = ipCntStr.split(":");
    if (chunks.length > 8)
        throw ZaIPUtil.ERROR_IP_FORMAT;

    var zeroLocation;
    for (var i = 0; i < chunks.length; i++) {
        if (!chunks[i]) {
            if (zeroLocation === undefined) {
                zeroLocation = i;
            }
            chunks[i] = 0;
            continue;
        }

        if (!ZaIPUtil.IP6_CHUNK_RE.test(chunks[i])) {
            throw ZaIPUtil.ERROR_IP_FORMAT;
        }

        chunks[i] = parseInt(chunks[i], 16);
    }

    if (zeroLocation === undefined && (chunks.length != 8)) {
        throw ZaIPUtil.ERROR_IP_FORMAT;
    }

    if (chunks.length < 8 && (zeroLocation!== undefined)) {
        var addZeroNum = 8 - chunks.length;
        for(var j = 0; j < addZeroNum; j++) {
            chunks.splice(zeroLocation, 0, 0);
        }
    }

    return  new ZaIPData(chunks, ZaIPData.v6, zoneContent, ipV6Str);
}

// Convert the compatiable IP v6 to IP v4
ZaIPUtil.isIPVMix = function (ipVMixStr) {
    if (!ipVMixStr || ipVMixStr.length < 9 ) {
        throw ZaIPUtil.ERROR_IP_FORMAT;
    }

    var ipCntStr;
    if ((ipVMixStr[0] == "[") &&
        (ipVMixStr[ipVMixStr.length -1] == "]")) {
        ipCntStr =  ipVMixStr.substring (1, ipVMixStr.length - 1);
    } else {
        ipCntStr = ipVMixStr;
    }

    var ipV6Prefix = ipCntStr.substring(0, 7);
    if (!ZaIPUtil.IPMIX_PREFIX_RE.test(ipV6Prefix)) {
        throw ZaIPUtil.ERROR_IP_FORMAT;
    }

    var ipV4Str = ipCntStr.substring(7);
    var ipData = ZaIPUtil.isIPV4(ipV4Str);
    if (!ipData) {
        throw ZaIPUtil.ERROR_IP_FORMAT;
    }
    ipData.src = ipCntStr;
    return ipData;
}

ZaCIDRData = function (ipData, mask, src) {
    this.ipData = ipData;
    this.mask = mask;
    this.src = src;
}

ZaIPData = function (fmtArr, ver, zoneSection, src) {
    this.fmtArr= fmtArr;
    this.ver = ver;
    this.zoneSection = zoneSection;
    this.src = src;
}

ZaIPData.v4 = "4";
ZaIPData.v6 = "6";
ZaIPData.vMix = "Mix";
}
if (AjxPackage.define("zimbraAdmin.common.Lifetime_XFormItem")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* _MLIFETIME XModelItem
**/

MLifetime_XModelItem = function () {}
XModelItemFactory.createItemType("_MLIFETIME_", "mlifetime", MLifetime_XModelItem);
MLifetime_XModelItem.prototype.minInclusive = 0;
MLifetime_XModelItem.prototype.zeroValue = ZaMsg.Unlimited;
MLifetime_XModelItem.prototype.required = false;
MLifetime_XModelItem.prototype.validateType = function (value) {
	var val = "";
	if(value == this.zeroValue) {
		val = "0";
	} else if(value != null && value.length >0) {
		if(value.length > 1) {
			val = value.substr(0, value.length-1);				
		} else {
			val = "0";
		}
	}
	
	if(val)
		val =  XModelItem.prototype.validateNumber.call(this, val);

	if (val == 0 && this.required) {
		throw AjxMessageFormat.format(ZaMsg.exception_required_lifetime, value);
	}
	
	return value;
}
/**
* XFormItem class: "lifetime (composite item)
* this item is used in the Admin UI to display fields such as session token lifetime
* instance values are strings that contain numbers and characters (/^([0-9])+([dhms])?$/;)
* values d, h, m, and s mean 1 day, 1 hour, 1 minute and 1 second
* 1d means 1 day, 4d means 4 days, 4h means 4 hours, etc.
*
* @class Lifetime_XFormItem
* @constructor Lifetime_XFormItem
* @author Greg Solovyev
**/
Lifetime_XFormItem = function() {}
XFormItemFactory.createItemType("_LIFETIME_", "lifetime", Lifetime_XFormItem, Composite_XFormItem);
Lifetime_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];
Lifetime_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
Lifetime_XFormItem.prototype.nowrap = false;
Lifetime_XFormItem.prototype.labelWrap = true;

Lifetime_XFormItem.prototype.initializeItems = function(){
	this.items = [
	{type:_TEXTFIELD_, ref:".", labelLocation:_NONE_, cssClass:"admin_xform_number_input", 
	 	visibilityChecks:[],
	 	enableDisableChecks:[],		
		getDisplayValue:function (itemVal) {
			var val = "";
			if(itemVal != null && itemVal.length >0) {
				if(itemVal.length > 1) {
					val = parseInt(itemVal);			
				} else {
					if(itemVal == "0") {
						val = "0";
					} else {
						val = "";
					}
				}
			}

			this.getParentItem()._numericPart = val;
			return ((!val || val=="0") ? this.getModelItem().zeroValue : val);
		},
		elementChanged:function(numericPart, instanceValue, event) {
            if (numericPart  == this.getModelItem().zeroValue) {
                numericPart = 0;
            }
			var val = null;
			if (AjxUtil.isNumeric(numericPart)) {
				val = numericPart + this.getParentItem()._stringPart;
			}
			this.getParentItem()._numericPart = numericPart;
			this.getForm().itemChanged(this.getParentItem(), val, event);
		}
	},
	{type:_OSELECT1_, ref:".", labelLocation:_NONE_, choices: ZaModel.getTimeChoices(),
		visibilityChecks:[],
	 	enableDisableChecks:[],
		getDisplayValue:function (itemVal){
			var val = "d";
			if(itemVal != null && itemVal.length >0) {
				if(itemVal.length > 1) {
					val = itemVal.substr(itemVal.length-1, 1);
				} else if (itemVal != "0") {
					val = (itemVal == "d" || itemVal == "h" || itemVal== "m" || itemVal == "s") ? itemVal : "d";
				}
			}
			this.getParentItem()._stringPart = val;
			return val;
		},
		elementChanged:function(stringPart,instanceValue, event) {
			var val = this.getParentItem()._numericPart + stringPart;
			this.getParentItem()._stringPart = stringPart;
			this.getForm().itemChanged(this.getParentItem(), val, event);
		}
	}
];
	Composite_XFormItem.prototype.initializeItems.call(this);
}

Lifetime_XFormItem.prototype.items = [];
Lifetime_XFormItem.prototype.getDisplayElement = function () {
	return this.getElement(this.getId() + "_display");
}

Lifetime1_XFormItem = function() {}
XFormItemFactory.createItemType("_LIFETIME1_", "lifetime1", Lifetime1_XFormItem, Composite_XFormItem);
Lifetime1_XFormItem.prototype.nowrap = false;
Lifetime1_XFormItem.prototype.labelWrap = true;
Lifetime1_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];
Lifetime1_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
Lifetime1_XFormItem.prototype.initializeItems  = function() {
	this.items = [
	{type:_TEXTFIELD_, ref:".", labelLocation:_NONE_,cssClass:"admin_xform_number_input", 
		visibilityChecks:[],
	 	enableDisableChecks:[],
		getDisplayValue:function (itemVal) {
			var val = "";
			if(itemVal != null && itemVal.length >0) {
				if(itemVal.length > 1) {
					val = itemVal.substr(0, itemVal.length-1);				
				} else {
					if(itemVal == "0") {
						val = "0";
					} else {
						val = "";
					}
				}
			}
			this.getParentItem()._numericPart = val;
			return val;	
		},
		elementChanged:function(numericPart, instanceValue, event) {
			var val = numericPart + this.getParentItem()._stringPart;
			this.getForm().itemChanged(this.getParentItem(), val, event);
		}
	},
	{type:_OSELECT1_, ref:".", labelLocation:_NONE_, choices:ZaModel.getTimeChoices1(),
		visibilityChecks:[],
	 	enableDisableChecks:[],
		getDisplayValue:function (itemVal){
			var val = "d";
			if(itemVal != null && itemVal.length >0) {
				if(itemVal.length > 1) {
					val = itemVal.substr(itemVal.length-1, 1);
				} else if (itemVal != "0") {
					val = (itemVal == "d" || itemVal == "h" || itemVal== "m" || itemVal == "s") ? itemVal : "d";
				}
			}
			this.getParentItem()._stringPart = val;
			return val;
		},
		elementChanged:function(stringPart,instanceValue, event) {
			var val = this.getParentItem()._numericPart + stringPart;
			this.getForm().itemChanged(this.getParentItem(), val, event);
		}
	}
];
Composite_XFormItem.prototype.initializeItems.call(this);
}
Lifetime1_XFormItem.prototype.items = [];

Lifetime2_XFormItem = function() {}
Lifetime2_XFormItem.prototype.nowrap = false;
Lifetime2_XFormItem.prototype.labelWrap = true;
XFormItemFactory.createItemType("_LIFETIME2_", "lifetime2", Lifetime2_XFormItem, Lifetime1_XFormItem);

Lifetime2_XFormItem.prototype.initializeItems = function () {
	this.items = [
		{type:_TEXTFIELD_, ref:".", labelLocation:_NONE_,cssClass:"admin_xform_number_input", 
			visibilityChecks:[],
		 	enableDisableChecks:[],		
			getDisplayValue:function (itemVal) {
				var val = "";
				if(itemVal != null && itemVal.length >0) {
					if(itemVal.length > 1) {
						val = itemVal.substr(0, itemVal.length-1);				
					} else {
						if(itemVal == "0") {
							val = "0";
						} else {
							val = "";
						}
					}
				}
				this.getParentItem()._numericPart = val;
				this.getParentItem()._stringPart="d";
				return val;	
			},
			elementChanged:function(numericPart, instanceValue, event) {
				var val = numericPart + "d";
				this.getForm().itemChanged(this.getParentItem(), val, event);
			}
		},
		{type:_OUTPUT_, ref:null, labelLocation:_NONE_, value:"d",getDisplayValue:function (itemVal){ return AjxMsg.days;}}
	];
	Composite_XFormItem.prototype.initializeItems.call(this);
};
Lifetime2_XFormItem.prototype.items = [];

/**
* _LIFETIME_MINUTES_ XForm item type allows time interval to be expressed only in minutes
**/
LifetimeMinutes_XFormItem = function() {}
LifetimeMinutes_XFormItem.prototype.nowrap = false;
LifetimeMinutes_XFormItem.prototype.labelWrap = true;
XFormItemFactory.createItemType("_LIFETIME_MINUTES_", "lifetime_minutes", LifetimeMinutes_XFormItem, Lifetime1_XFormItem);

LifetimeMinutes_XFormItem.prototype.initializeItems = function () {
	this.items = [
		{type:_TEXTFIELD_, ref:".", labelLocation:_NONE_,cssClass:"admin_xform_number_input", 
			visibilityChecks:[],
		 	enableDisableChecks:[],		
			getDisplayValue:function (itemVal) {
				var val = "";
				if(itemVal != null && itemVal.length >0) {
					if(itemVal.length > 1) {
						val = itemVal.substr(0, itemVal.length-1);				
					} else {
						if(itemVal == "0") {
							val = "0";
						} else {
							val = "";
						}
					}
				}
				this.getParentItem()._numericPart = val;
				this.getParentItem()._stringPart="m";
				return val;	
			},
			elementChanged:function(numericPart, instanceValue, event) {
				var val = numericPart + "m";
				this.getForm().itemChanged(this.getParentItem(), val, event);
			}
		},
		{type:_OUTPUT_, ref:null, labelLocation:_NONE_, value:"m",getDisplayValue:function (itemVal){ return AjxMsg.minutes;}}
	];
	Composite_XFormItem.prototype.initializeItems.call(this);
};
LifetimeMinutes_XFormItem.prototype.items = [];

Long_Lifetime_XFormItem = function() {}
XFormItemFactory.createItemType("_LONG_LIFETIME_", "long_lifetime", Long_Lifetime_XFormItem, Composite_XFormItem);
Long_Lifetime_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];
Long_Lifetime_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
Long_Lifetime_XFormItem.prototype.nowrap = false;
Long_Lifetime_XFormItem.prototype.labelWrap = true;
Long_Lifetime_XFormItem.prototype.initializeItems = function(){
    this.items = [
        {type:_TEXTFIELD_, ref:".", labelLocation:_NONE_, cssClass:"admin_xform_number_input",
            visibilityChecks:[],
            enableDisableChecks:[],
            getDisplayValue:function (itemVal) {
                var val = "";
                if(itemVal != null && itemVal.length >0) {
                    if(itemVal.length > 1) {
                        val = parseInt(itemVal);
                    } else {
                        if(itemVal == "0") {
                            val = "0";
                        } else {
                            val = "";
                        }
                    }
                }
                this.getParentItem()._numericPart = val;
                return ((!val || val=="0") ? "0" : val);
            },
            elementChanged:function(numericPart, instanceValue, event) {
                if (numericPart == this.getModelItem().zeroValue) {
                    numericPart = 0;
                }
                var val = numericPart + this.getParentItem()._stringPart;
                this.getParentItem()._numericPart = numericPart;
                this.getForm().itemChanged(this.getParentItem(), val, event);
            }
        },
        {type:_OSELECT1_, ref:".", labelLocation:_NONE_, choices: ZaModel.getLongTimeChoices,
            visibilityChecks:[],
            enableDisableChecks:[],
            getDisplayValue:function (itemVal){
                var val = "d";
                if(itemVal != null && itemVal.length >0) {
                    if(itemVal.length > 1) {
                        val = itemVal.substr(itemVal.length-1, 1);
                    } else if (itemVal != "0") {
                        val = (itemVal == "h" || itemVal == "d" || itemVal== "m" || itemVal == "y") ? itemVal : "d";
                    }
                }
                this.getParentItem()._stringPart = val;
                return val;
            },
            elementChanged:function(stringPart,instanceValue, event) {
                var val = this.getParentItem()._numericPart + stringPart;
                this.getParentItem()._stringPart = stringPart;
                this.getForm().itemChanged(this.getParentItem(), val, event);
            }
        }
    ];
    Composite_XFormItem.prototype.initializeItems.call(this);
}
Long_Lifetime_XFormItem.prototype.items = [];
Long_Lifetime_XFormItem.prototype.getDisplayElement = function () {
    return this.getElement(this.getId() + "_display");
}

MInterval_XModelItem = function () {}
XModelItemFactory.createItemType("_MINTERVAL_", "minterval", MInterval_XModelItem, MLifetime_XModelItem);
MInterval_XModelItem.prototype.zeroValue = ZaMsg.never.toLowerCase();
}
if (AjxPackage.define("zimbraAdmin.config.settings.ZaSettings")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

ZaSettings = function() {
}

ZaSettings.initialized = false;
ZaSettings.initializing = false
ZaSettings.initMethods = new Array();
ZaSettings.RESULTSPERPAGE = 50;
ZaSettings.MAXSEARCHRESULTS = 100;
ZaSettings.HAVE_MORE_DOMAINS = false;
/**
* Look for admin name cookies and admin type cookies
**/
ZaSettings.postInit = function() {
    //if(window.console && window.console.log) console.log("Finishing loading all the zimlets, and ready to initialize the application ...");
        
	//Instrumentation code end	
	var shell = DwtShell.getShell(window);
	var appCtxt = ZaAppCtxt.getFromShell(shell);
	var appController = appCtxt.getAppController();
	appController._createApp();
	        
    //Instrumentation code start
	if(ZaSettings.initMethods) {
		var cnt = ZaSettings.initMethods.length;
		for(var i = 0; i < cnt; i++) {
			if(typeof(ZaSettings.initMethods[i]) == "function") {
				try {
					ZaSettings.initMethods[i].call(this);
				} catch (ex) {
				//	
				}
			}
		}
	}	

    appController._lauchNewApp();

    if (ZaZimbraAdmin.isWarnOnExit) {
	    ZaZimbraAdmin.setOnbeforeunload(ZaZimbraAdmin._confirmExitMethod);
    }
	ZaSettings.initialized = true;
	ZaSettings.initializing = false;
};

ZaSettings.initRights = function () {
	ZaSettings.ENABLED_UI_COMPONENTS=[];
	ZaZimbraAdmin.currentAdminAccount = new ZaAccount();
	try {
		if(ZaZimbraAdmin.currentAdminId) {
			ZaZimbraAdmin.currentAdminAccount.load("id", ZaZimbraAdmin.currentAdminId,false,true);
		} else {
			ZaZimbraAdmin.currentAdminAccount.load("name", ZaZimbraAdmin.currentUserLogin,false,true);
		}
	} catch (ex) {
		//account may fail to load due to failing admin extensions 
	}
	//if this is a system admin account - enable access to all UI elements
	if(ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE') {
		ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI] = true;
	}	
	if(AjxUtil.isEmpty(ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraAdminConsoleUIComponents])) {
		ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraAdminConsoleUIComponents] = [];
	} else {
		if(typeof(ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraAdminConsoleUIComponents])=="string") {
			ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraAdminConsoleUIComponents] = [ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraAdminConsoleUIComponents]];
		}	
		var cnt = ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraAdminConsoleUIComponents].length;
		for(var i=0;i<cnt;i++) {
			ZaSettings.ENABLED_UI_COMPONENTS[ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraAdminConsoleUIComponents][i]] = true;
		}
	}
	//load  permissions, e.g. createTopDomain, createCos, createDistributionList
	var soapDoc = AjxSoapDoc.create("GetAllEffectiveRightsRequest", ZaZimbraAdmin.URN, null);
	var elGrantee = soapDoc.set("grantee", ZaZimbraAdmin.currentUserId);
	elGrantee.setAttribute("by","id");
	
	var csfeParams = new Object();
	csfeParams.soapDoc = soapDoc;	
	var reqMgrParams = {} ;
	reqMgrParams.controller = ZaApp.getInstance().getCurrentController();
	reqMgrParams.busyMsg = ZaMsg.BUSY_REQUESTING_ACCESS_RIGHTS ;
	try {
		var resp = ZaRequestMgr.invoke(csfeParams, reqMgrParams ).Body.GetAllEffectiveRightsResponse;
		ZaSettings.initGlobalRightsFromJS(resp);
	} catch (ex) {
		//keep loading
	}	
	
	var comps = ZaSettings.getUIComponents() ;
    var cnt = comps.length;
    for(var i=0;i<cnt;i++) {
      ZaSettings.ENABLED_UI_COMPONENTS[comps[i]._content] = true;
    }
    
}
ZaSettings.initMethods.push(ZaSettings.initRights);

ZaSettings.initGlobalRightsFromJS = function(resp) {
	ZaSettings.targetRights = {};
	var cosNameList = [];
	var domainNameList = [];
	if(resp && resp.target && resp.target instanceof Array) {
		for(var i = 0; i < resp.target.length; i++) {
			ZaSettings.parseTargetsRightsFromJS(resp.target[i]);
			if(resp.target[i].type == ZaItem.COS) {
				if(resp.target[i].entries && resp.target[i].entries.length) {
					for(var j = 0; j < resp.target[i].entries.length; j++) {
						var entry = resp.target[i].entries[j].entry;
						for(var k = 0; k < entry.length; k++) {
							cosNameList.push(entry[k].name);
						}
					}
	            }
			} else if(resp.target[i].type == ZaItem.DOMAIN) {
				if(resp.target[i].entries && resp.target[i].entries.length) {
					for(var j = 0; j < resp.target[i].entries.length; j++) {
						var entry = resp.target[i].entries[j].entry;
						for(var k = 0; k < entry.length; k++) {
							domainNameList.push(entry[k].name);
						}
					}
	            }
			}
		}
	}	
	ZaApp.getInstance()._cosNameList = cosNameList;
	ZaApp.getInstance()._domainNameList = domainNameList;
}

ZaSettings.parseTargetsRightsFromJS = function(targetObj) {
	if(targetObj) {
		if(targetObj.type && AjxUtil.isEmpty(ZaSettings.targetRights[targetObj.type])) {
			ZaSettings.targetRights[targetObj.type] = {};
		}

		if(targetObj.all && targetObj.all.length && targetObj.all[0] && targetObj.all[0].right && targetObj.all[0].right.length) {
			var rights = targetObj.all[0].right;
			for (var r in rights) {
				if(!ZaSettings.targetRights[targetObj.type][rights[r].n]) {
					ZaSettings.targetRights[targetObj.type][rights[r].n] = {all:true,some:true};
				} else {
					ZaSettings.targetRights[targetObj.type][rights[r].n].all = true;
					ZaSettings.targetRights[targetObj.type][rights[r].n].some = true;
				}
			}
		}
		
		if(targetObj.entries && targetObj.entries.length) {
			for (var i = 0; i < targetObj.entries.length; i++) {
				var entry = targetObj.entries[i];
				if(entry.rights && entry.rights.length && entry.rights[0] && entry.rights[0].right && entry.rights[0].right.length) {
					var rights = entry.rights[0].right;
					for (var r in rights) {
						if(!ZaSettings.targetRights[targetObj.type][rights[r].n]) {
							ZaSettings.targetRights[targetObj.type][rights[r].n] = {all:false};
						}
					}
				}
				
				if(entry.entry && entry.entry.length) {
					for(var j = 0; j < entry.entry.length; j++) {
						if(entry.entry[j] && entry.entry[j].name) {
							for(var rightName in ZaSettings.targetRights[targetObj.type]) {
								ZaSettings.targetRights[targetObj.type][rightName][entry.entry[j].name] = true;
								ZaSettings.targetRights[targetObj.type][rightName].some = true;
							}
						}
					}
				}
			}
		}
		
		if(targetObj.inDomains && targetObj.inDomains.length) {
			for (var i = 0; i < targetObj.inDomains.length; i++) {
				var entry = targetObj.inDomains[i];
				var domainList = [];
				if(entry.domain && entry.domain.length) {
					for(var j = 0; j < entry.domain.length; j++) {
						domainList.push(entry.domain[j].name);
					}
				}
				if(entry.rights && entry.rights.length && entry.rights[0] 
						&& entry.rights[0].right && entry.rights[0].right.length) {
					for(var j = 0; j < entry.rights[0].right.length; j++) {
						if(!ZaSettings.targetRights[targetObj.type][entry.rights[0].right[j].n]) {
							ZaSettings.targetRights[targetObj.type][entry.rights[0].right[j].n] = {all:false,some:true};
						} 
						for(var k = 0; k < domainList.length; k++) {
							ZaSettings.targetRights[targetObj.type][entry.rights[0].right[j].n][domainList[k]] = true;
							ZaSettings.targetRights[targetObj.type][entry.rights[0].right[j].n].some = true;
						}
					}
				}
			}
		}
	}
}

ZaSettings.getUIComponents = function (item) {
    soapDoc = AjxSoapDoc.create("GetAdminConsoleUICompRequest", ZaZimbraAdmin.URN, null);
	if (item && item.type && item.id) {
        var el = soapDoc.set(item.type, item.id) ;
        el.setAttribute("by", "id");
    }
    csfeParams = new Object();
	csfeParams.soapDoc = soapDoc;
	reqMgrParams = {} ;
	reqMgrParams.controller = ZaApp.getInstance().getCurrentController();
	reqMgrParams.busyMsg = ZaMsg.BUSY_REQUESTING_UI_COMP ;
	try {
		var resp = ZaRequestMgr.invoke(csfeParams, reqMgrParams ).Body.GetAdminConsoleUICompResponse;
		var comps = [];
		if(!AjxUtil.isEmpty(resp.a)) {
			if (typeof(resp.a) == "string" ) {
				comps = [resp.a];
			} else if(resp.a instanceof Array) {
				comps = resp.a;
			}
		}

        return comps ;
    } catch (ex) {
		//not implemented yet
	}

    return [];
}

ZaSettings.loadStyles = function(includes) {
    var head = document.getElementsByTagName("head")[0];
    for (var i = 0; i < includes.length; i++) {
        var style = document.createElement("link");
        style.type = "text/css";
        style.rel = "stylesheet";
        style.href = includes[i];

        head.appendChild(style);
    }
};

ZaSettings.EnabledZimlet = {};
ZaSettings.init = function () {
	if(ZaSettings.initialized || ZaSettings.initializing)
		return;
		
	ZaSettings.initializing = true ;
	DBG.println(AjxDebug.DBG1,"Initializing ZaSettings");		
	

	try {
		var soapDoc = AjxSoapDoc.create("GetAdminExtensionZimletsRequest", ZaZimbraAdmin.URN, null);
                var command = new ZmCsfeCommand();
                var params = new Object();
                params.soapDoc = soapDoc;
				params.noAuthToken = true;
                var resp = command.invoke(params);
                var zimlets = null;
                try {
                       if(resp && resp.Body && resp.Body.GetAdminExtensionZimletsResponse && resp.Body.GetAdminExtensionZimletsResponse.zimlets && resp.Body.GetAdminExtensionZimletsResponse.zimlets.zimlet) {
                       		zimlets = resp.Body.GetAdminExtensionZimletsResponse.zimlets.zimlet;
                       }
               } catch (ex) {
                                //go on
                                //                    //if(window.console && window.console.log) console.log("Error Getting the Zimlets: " + ex.message);
               }
		
		if(appDevMode || (DBG.getDebugLevel() > AjxDebug.NONE) || (location.search && (location.search.indexOf("mode=mjsf") != -1))) {
			if(zimlets && zimlets.length > 0) {
				var includes = new Array();	
				var cssIncludes = new Array();	
				var cnt = zimlets.length;
				for(var ix = 0; ix < cnt; ix++) {
					if(zimlets[ix] && zimlets[ix].zimlet && zimlets[ix].zimlet[0] && zimlets[ix].zimletContext && zimlets[ix].zimletContext[0]) {
						var zimlet = zimlets[ix].zimlet[0];
						var zimletContext = zimlets[ix].zimletContext[0];
						ZaSettings.EnabledZimlet[zimlet.name] = true;
	                    //if(window.console && window.console.log) console.log("Adding zimlet: " + zimlet.name);
	                    //load message file first because consequent files may reference it
	                    			includes.push([appContextPath, "/res/", zimlet.name, ".js?v=",appVers,ZaZimbraAdmin.LOCALE_QS].join(""));
						if(zimlet.include && zimlet.include.length>0) {
							var cnt2 = zimlet.include.length;
							for (var j=0;j<cnt2;j++) {
								includes.push(zimletContext.baseUrl + zimlet.include[j]._content + "?v=" +appVers);
							}
						}
						if(zimlet.includeCSS && zimlet.includeCSS.length>0) {
							var cnt3 = zimlet.includeCSS.length;
							for (var j=0;j<cnt3;j++) {
								cssIncludes.push(zimletContext.baseUrl + zimlet.includeCSS[j]._content  + "?v=" +appVers);
							}
						}
					} else {
						continue;
					}
				}
				try {
		
					if(cssIncludes.length > 0){
					    //if(window.console && window.console.log) console.log ("Loading Zimlets CSS: " + cssIncludes.join(", ") );
	                    ZaSettings.loadStyles(cssIncludes);
	                }
	
					if(includes.length > 0)   {
	                    //if(window.console && window.console.log) console.log ("Loading Zimlets JS: " + includes.join(", ") );
	                   	AjxInclude(includes, null,new AjxCallback(ZaSettings.postInit ));
	                }
	
	            } catch (ex) {
					//go on
					throw ex;
				}
						
			} else {
				ZaSettings.postInit();
			}
		} else {
			if(zimlets && zimlets.length > 0) {
				var cnt = zimlets.length;
				for(var ix = 0; ix < cnt; ix++) {
					if(zimlets[ix] && zimlets[ix].zimlet && zimlets[ix].zimlet[0]){
						var zimlet = zimlets[ix].zimlet[0];
						ZaSettings.EnabledZimlet[zimlet.name] = true;
					}
				}
			}
			var zimletURL = ["/service/zimlet/res/Zimlets-nodev_all.js.zgz", ".js?v=",appVers,ZaZimbraAdmin.LOCALE_QS].join("");
			AjxInclude([zimletURL], null,new AjxCallback(ZaSettings.postInit ));
		}
	} catch (ex) {
		ZaSettings.initializing = false ;
//		DBG.dumpObj(ex);
		throw ex;	
	}
	
	// post-processing code
/*	DBG.println("+++ document.location.pathname: "+document.location.pathname);
	var files = [ document.location.pathname + "public/adminPost.js" ];
	AjxInclude(files);
	*/
	
};


/**
* Static method so that static code can get the default value of a setting if it needs to.
*
* @param id		the numeric ID of the setting
*/
ZaSettings.get =
function(id) {
	var args = ZaSettings.INIT[id];
	return args ? args[3] : null;
}

// setting types
ZaSettings.T_CONFIG		= 1;

// setting data types
ZaSettings.D_STRING		= 1; // default type
ZaSettings.D_INT			= 2;
ZaSettings.D_BOOLEAN		= 3;
ZaSettings.D_LDAP_TIME 	= 4;
ZaSettings.D_HASH_TABLE 	= 5;
ZaSettings.LOGO_URI = "https://www.zextras.com";
ZaSettings.CSFE_SERVER_URI = (location.port == "80") ? "/service/admin/soap/" : ":" + location.port + "/service/admin/soap/";
ZaSettings.CSFE_MSG_FETCHER_URI = (location.port == "80") ? "/service/content/get?" : ":" + location.port + "/service/content/get?";
ZaSettings.CONFIG_PATH = location.pathname + "js/zimbraAdmin/config";
//ZaSettings.ADMIN_NAME_COOKIE = "ZA_ADMIN_NAME_COOKIE";
ZaSettings.myDomainName = null;
ZaSettings.ZIMBRA_SUPPORT_URL = "https://community.zextras.com/forum/";
ZaSettings.ZIMBRA_SUPPORT_URL_QUERY = ZaSettings.ZIMBRA_SUPPORT_URL + "?wpfs=";

//CONSTANTS FOR ROLE-BASED ACCESS
/**
 * In order for an admin to be able to access a UI component, zimbraAdminConsoleUIComponents attribute of the admin's account should contain the corresponding values listed below
 */
//carte blanche - gives access to any UI element
ZaSettings.CARTE_BLANCHE_UI = "cartBlancheUI";

ZaSettings.initConst = function() {
//*init List View *
ZaSettings.ALL_UI_COMPONENTS = [] ;
//List views
ZaSettings.ACCOUNT_LIST_VIEW = "accountListView";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.ACCOUNT_LIST_VIEW, label: ZaMsg.UI_Comp_AccountListView });
ZaSettings.DL_LIST_VIEW = "DLListView";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.DL_LIST_VIEW, label: ZaMsg.UI_Comp_DlListView });
ZaSettings.ALIAS_LIST_VIEW = "aliasListView";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.ALIAS_LIST_VIEW, label: ZaMsg.UI_Comp_AliasListView });
ZaSettings.RESOURCE_LIST_VIEW = "resourceListView";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.RESOURCE_LIST_VIEW, label: ZaMsg.UI_Comp_ResourceListView });
ZaSettings.COS_LIST_VIEW = "COSListView";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.COS_LIST_VIEW, label: ZaMsg.UI_Comp_COSListView });
ZaSettings.DOMAIN_LIST_VIEW = "domainListView";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.DOMAIN_LIST_VIEW, label: ZaMsg.UI_Comp_DomainListView });
ZaSettings.SERVER_LIST_VIEW = "serverListView";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.SERVER_LIST_VIEW, label: ZaMsg.UI_Comp_ServerListView });
ZaSettings.ZIMLET_LIST_VIEW = "zimletListView";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.ZIMLET_LIST_VIEW, label: ZaMsg.UI_Comp_ZimletListView });
ZaSettings.ADMIN_ZIMLET_LIST_VIEW = "adminZimletListView";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.ADMIN_ZIMLET_LIST_VIEW, label: ZaMsg.UI_Comp_AdminZimletListView });
ZaSettings.GLOBAL_CONFIG_VIEW="globalConfigView";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.GLOBAL_CONFIG_VIEW, label: ZaMsg.UI_Comp_globalConfigView });
ZaSettings.GLOBAL_STATUS_VIEW = "globalServerStatusView";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.GLOBAL_STATUS_VIEW, label: ZaMsg.UI_Comp_GlobalStatusView });
//ZaSettings.GLOBAL_STATS_VIEW = "globalServerStatisticsView";
//ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.GLOBAL_STATS_VIEW, label: ZaMsg.UI_Comp_GlobalStatsView });
ZaSettings.SAVE_SEARCH = "saveSearch";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.SAVE_SEARCH, label: ZaMsg.UI_Comp_SaveSearch });
ZaSettings.HELP_SEARCH = "helpSearch";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.HELP_SEARCH, label: ZaMsg.UI_Comp_HelpSearch });
ZaSettings.MAILQ_VIEW = "mailQueue";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.MAILQ_VIEW, label: ZaMsg.UI_Comp_mailQueueView });
ZaSettings.SERVER_STATS_VIEW = "perServerStatisticsView";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.SERVER_STATS_VIEW, label: ZaMsg.UI_Comp_ServerStatsView });
ZaSettings.DOWNLOADS_VIEW = "downloadsView";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.DOWNLOADS_VIEW, label: ZaMsg.UI_Comp_DownloadsView });
ZaSettings.HELP_CENTER_VIEW = "helpCenterView";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.HELP_CENTER_VIEW, label: ZaMsg.UI_Comp_HelpCenterView });
ZaSettings.STATUS_PANE = "statusPane";
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.STATUS_PANE, label: ZaMsg.UI_Comp_StatusPane });
}
ZaSettings.initConst();

ZaSettings.getCalendarViewChoinces = function(){
   return  [
    {value:"day",label:ZaMsg.CalViewDay},
    {value:"week",label:ZaMsg.CalViewWeek},
    {value:"workWeek",label:ZaMsg.CalViewWorkWeek},
    {value:"month",label:ZaMsg.CalViewMonth},
    {value:"schedule",label:ZaMsg.CalViewSchedule},
    {value:"list",label:ZaMsg.CalViewList}
    ];
}
ZaSettings.calendarViewChoinces = ZaSettings.getCalendarViewChoinces; 

ZaSettings.getDayOfWeekChoices = function(){
   return [
    {value:0,label:ZaMsg.Sunday},
    {value:1,label:ZaMsg.Monday},
    {value:2,label:ZaMsg.Tuesday},
    {value:3,label:ZaMsg.Wednesday},
    {value:4,label:ZaMsg.Thursday},
    {value:5,label:ZaMsg.Friday},
    {value:6,label:ZaMsg.Saturday}
    ];
}
ZaSettings.dayOfWeekChoices = ZaSettings.getDayOfWeekChoices; 

ZaSettings.getApptVisibilityChoices = function(){
  return [
    {value:"public",label:ZaMsg.AptVisibilityPublic},
    {value:"private",label:ZaMsg.AptVisibilityPrivate}
];
}
ZaSettings.apptVisibilityChoices = ZaSettings.getApptVisibilityChoices; 

ZaSettings.getClientTypeChoices = function(){
  return [
    {value:"advanced", label:ZaMsg.clientClassic},
    {value:"modern", label:ZaMsg.clientModern},
    ];
}
ZaSettings.clientTypeChoices = ZaSettings.getClientTypeChoices;

ZaSettings.getAuthorizationScheme = function(){
  return [
    {value: "basic", label: ZaMsg.choice_basic},
    {value: "form", label: ZaMsg.choice_form}
    ];
}
ZaSettings.authorizationScheme  = ZaSettings.getAuthorizationScheme;

ZaSettings.getExchangeServerType = function(){
  return [
    {value: "webdav", label: ZaMsg.choice_webdav},
    {value: "ews", label: ZaMsg.choice_ews}
    ];
}
ZaSettings.exchangeServerType = ZaSettings.getExchangeServerType;

//List view groups
ZaSettings.OVERVIEW_CONFIG_ITEMS = [ZaSettings.COS_LIST_VIEW,ZaSettings.ZIMLET_LIST_VIEW,ZaSettings.SERVER_LIST_VIEW,ZaSettings.ADMIN_ZIMLET_LIST_VIEW,
    ZaSettings.DOMAIN_LIST_VIEW,ZaSettings.GLOBAL_CONFIG_VIEW];
ZaSettings.OVERVIEW_ADDRESSES_ITEMS = [ZaSettings.ACCOUNT_LIST_VIEW,ZaSettings.ALIAS_LIST_VIEW,ZaSettings.DL_LIST_VIEW,ZaSettings.RESOURCE_LIST_VIEW];
ZaSettings.OVERVIEW_TOOLS_ITEMS = [ZaSettings.MAILQ_VIEW,ZaSettings.DOWNLOADS_VIEW];
ZaSettings.OVERVIEW_MONITORING_ITEMS = [ZaSettings.GLOBAL_STATS_VIEW,ZaSettings.GLOBAL_STATUS_VIEW,ZaSettings.SERVER_STATS_VIEW];

ZaSettings.OVERVIEW_MANAGER_ACCOUNT_ITEMS = [ZaSettings.ACCOUNT_LIST_VIEW,ZaSettings.ALIAS_LIST_VIEW,ZaSettings.DL_LIST_VIEW,ZaSettings.RESOURCE_LIST_VIEW];
ZaSettings.OVERVIEW_ADMIN_ITEMS = [ZaSettings.COS_LIST_VIEW,ZaSettings.ZIMLET_LIST_VIEW,ZaSettings.SERVER_LIST_VIEW,ZaSettings.ADMIN_ZIMLET_LIST_VIEW,
    ZaSettings.DOMAIN_LIST_VIEW,ZaSettings.GLOBAL_CONFIG_VIEW];
ZaSettings.HELP_CENTER_ITEMS = [ZaSettings.HELP_CENTER_VIEW];
ZaSettings.STATUS_PANE_ITEMS = [ZaSettings.STATUS_PANE];
ZaSettings.OVERVIEW_MONITORING_ITEMS = [ZaSettings.MAILQ_VIEW, ZaSettings.GLOBAL_STATUS_VIEW,ZaSettings.SERVER_STATS_VIEW];
//Domain operations  - it might be duplicated to domain view tabs
ZaSettings.DOMAIN_GAL_WIZ = "domainGALWizard";
ZaSettings.DOMAIN_AUTH_WIZ = "domainAuthWizard";
ZaSettings.DOMAIN_WIKI_WIZ = "domainWikiWizard";
ZaSettings.DOMAIN_CHECK_MX_WIZ = "domainCheckMXWiz";

//Global Server Statistics View
/* No need to have the statistics view since they are all system admin only rights
ZaSettings.GLOBAL_STATS_MSG_COUNT_TAB = "globalServerStatsMsgCountTab" ;
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.GLOBAL_STATS_MSG_COUNT_TAB, label: ZaMsg.UI_Comp_globalStatsMsgCountTab });

ZaSettings.GLOBAL_STATS_MSG_VOL_TAB = "globalServerStatsMsgVolTab" ;
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.GLOBAL_STATS_MSG_VOL_TAB, label: ZaMsg.UI_Comp_globalStatsMsgVolTab });

ZaSettings.GLOBAL_STATS_MSG_ASAV_TAB = "globalServerStatsASAVTab" ;
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.GLOBAL_STATS_MSG_ASAV_TAB, label: ZaMsg.UI_Comp_globalStatsMsgASAVTab });

ZaSettings.GLOBAL_ADVANCED_STATS_TAB = "globalAdvancedStatsTab" ;
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.GLOBAL_ADVANCED_STATS_TAB, label: ZaMsg.UI_Comp_globalAdvancedStatsTab });

//Individual Server Statistics View
ZaSettings.SERVER_STATS_MSG_COUNT_TAB = "perServerStatsMsgCountTab" ;
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.SERVER_STATS_MSG_COUNT_TAB, label: ZaMsg.UI_Comp_serverStatsMsgCountTab });

ZaSettings.SERVER_STATS_MSG_VOL_TAB = "perServerStatsMsgVolTab" ;
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.SERVER_STATS_MSG_VOL_TAB, label: ZaMsg.UI_Comp_serverStatsMsgVolTab });

ZaSettings.SERVER_STATS_MSG_ASAV_TAB = "perServerStatsASAVTab" ;
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.SERVER_STATS_MSG_ASAV_TAB, label: ZaMsg.UI_Comp_serverStatsMsgASAVTab });

ZaSettings.SERVER_STATS_DISK_TAB = "perServerStatsDiskTab" ;
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.SERVER_STATS_DISK_TAB, label: ZaMsg.UI_Comp_serverStatsDiskTab });

ZaSettings.SERVER_STATS_SESSION_TAB = "perServerSessionTab" ;
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.SERVER_STATS_SESSION_TAB, label: ZaMsg.UI_Comp_serverStatsSessTab });

ZaSettings.SERVER_STATS_QUOTA_TAB = "perServerStatsQuotaTab" ;
ZaSettings.ALL_UI_COMPONENTS.push({ value: ZaSettings.SERVER_STATS_QUOTA_TAB, label: ZaMsg.UI_Comp_serverStatsQuotaTab });
*/
//Distribution list operations
//ZaSettings.DL_CREATE_RIGHT = "createDL";

//Alias operations
//ZaSettings.ALIAS_CREATE_RIGHT = "createAlias";

//Resources operations
//ZaSettings.RESOURCES_CREATE_RIGHT = "createResource";
                                            
ZaSettings.VIEW_RIGHTS = {} ;
ZaSettings.VIEW_RIGHTS [ZaSettings.ACCOUNT_LIST_VIEW] = "adminConsoleAccountRights" ;
ZaSettings.VIEW_RIGHTS [ZaSettings.DL_LIST_VIEW] = "adminConsoleDLRights" ;
ZaSettings.VIEW_RIGHTS [ZaSettings.ALIAS_LIST_VIEW] = "adminConsoleAliasRights" ;
ZaSettings.VIEW_RIGHTS [ZaSettings.RESOURCE_LIST_VIEW] = "adminConsoleResourceRights" ;

ZaSettings.VIEW_RIGHTS [ZaSettings.COS_LIST_VIEW] = "adminConsoleCOSRights" ;
ZaSettings.VIEW_RIGHTS [ZaSettings.DOMAIN_LIST_VIEW] = "adminConsoleDomainRights" ;
ZaSettings.VIEW_RIGHTS [ZaSettings.SERVER_LIST_VIEW] = "adminConsoleServerRights" ;
ZaSettings.VIEW_RIGHTS [ZaSettings.ZIMLET_LIST_VIEW] = "adminConsoleZimletRights" ;

ZaSettings.VIEW_RIGHTS [ZaSettings.GLOBAL_STATUS_VIEW] = "adminConsoleServerStatusRights" ;
ZaSettings.VIEW_RIGHTS [ZaSettings.ADMIN_ZIMLET_LIST_VIEW] = "adminConsoleExtensionRights" ;
ZaSettings.VIEW_RIGHTS [ZaSettings.GLOBAL_CONFIG_VIEW] = "adminConsoleGlobalRights" ;
ZaSettings.VIEW_RIGHTS [ZaSettings.MAILQ_VIEW] = "adminConsoleMailQueueRights" ;

ZaSettings.VIEW_RIGHTS [ZaSettings.SAVE_SEARCH] = "adminConsoleSavedSearchRights" ;

ZaSettings.VIEW_RIGHTS [ZaSettings.SERVER_STATS_VIEW] = "adminConsoleServerStatisticRights";

ZaSettings.LICENSE_ENABLED = true;
ZaSettings.ADMIN_ZIMLETS_ENABLED = true;
ZaSettings.SAVE_SEARCH_ENABLED = true ;
ZaSettings.TREE_ENABLED = true;
ZaSettings.CURRENT_APP_ENABLED = true;
ZaSettings.BANNER_ENABLED = true;
ZaSettings.STATUS_ENABLED = true;
ZaSettings.SEARCH_PANEL_ENABLED = true;


ZaSettings.SKIN_IDX = 1;
// IDs FOR HTML COMPONENTS IN THE SKIN
ZaSettings.SKIN_APP_BOTTOM_TOOLBAR_ID	= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_APP_MAIN_ID				= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_APP_TOP_TOOLBAR_ID		= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_CURRENT_APP_ID			= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_LOGO_ID					= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_SASH_ID					= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_SEARCH_BUILDER_ID		= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_SEARCH_BUILDER_TOOLBAR_ID= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_SEARCH_BUILDER_SASH_ID = ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_SEARCH_ID				= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_SHELL_ID				= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_STATUS_ID				= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_TREE_ID					= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_USER_INFO_ID			= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_APP_TABS_ID				= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_HELP_ID					= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_DW_ID					= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_LOGIN_MSG_ID            = ZaSettings.SKIN_IDX++;

ZaSettings.SKIN_LOGOFF_DOM_ID = "skin_container_logoff" ;
ZaSettings.SKIN_HELP_DOM_ID = "skin_container_help" ;
ZaSettings.SKIN_DW_DOM_ID = "skin_container_dw" ;
ZaSettings.SKIN_USER_NAME_ID = "skin_container_username";
ZaSettings.SKIN_LOGO_DOM_ID = "skin_container_logo";
ZaSettings.SKIN_TREE_ID = "skin_container_tree";
ZaSettings.SKIN_SEARCH_BUILDER_ID = "skin_container_search_builder";
ZaSettings.SKIN_SEARCH_BUILDER_TB_ID = "skin_container_search_builder_toolbar";
ZaSettings.SKIN_SEARCH_BUILDER_APP_SASH_ID = "skin_container_sb_app_sash";
ZaSettings.SKIN_APP_SASH_ID = "skin_container_tree_app_sash";
ZaSettings.SKIN_CURRENT_APP_ID = "skin_container_current_app";
ZaSettings.SKIN_STATUS_ID = "skin_container_status";
ZaSettings.SKIN_SEARCH_PANEL_ID = "skin_container_search";

// initialization for settings: [name, type, data type, default value]
ZaSettings.INIT = new Object();
// IDs FOR HTML COMPONENTS IN THE SKIN
ZaSettings.INIT[ZaSettings.SKIN_APP_MAIN_ID]				= [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, "skin_container_app_main"];
ZaSettings.INIT[ZaSettings.SKIN_APP_TOP_TOOLBAR_ID]		= [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, "skin_container_top_toolbar"];
ZaSettings.INIT[ZaSettings.SKIN_CURRENT_APP_ID]			= [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_CURRENT_APP_ID];
ZaSettings.INIT[ZaSettings.SKIN_LOGO_ID]					= [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_LOGO_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_SASH_ID]					= [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_APP_SASH_ID];
ZaSettings.INIT[ZaSettings.SKIN_SEARCH_BUILDER_ID]		= [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_SEARCH_BUILDER_ID];
ZaSettings.INIT[ZaSettings.SKIN_SEARCH_BUILDER_TOOLBAR_ID]= [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_SEARCH_BUILDER_TB_ID];
ZaSettings.INIT[ZaSettings.SKIN_SEARCH_BUILDER_SASH_ID] = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_SEARCH_BUILDER_APP_SASH_ID];
ZaSettings.INIT[ZaSettings.SKIN_SEARCH_ID]				= [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_SEARCH_PANEL_ID];
ZaSettings.INIT[ZaSettings.SKIN_SHELL_ID]					= [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, "skin_outer"];
ZaSettings.INIT[ZaSettings.SKIN_STATUS_ID]				= [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_STATUS_ID];
ZaSettings.INIT[ZaSettings.SKIN_TREE_ID]					= [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_TREE_ID];
//ZaSettings.INIT[ZaSettings.SKIN_TREE_FOOTER_ID]			= [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, "skin_container_tree_footer"];
ZaSettings.INIT[ZaSettings.SKIN_LOGIN_MSG_ID]           = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, "skin_container_login_msg"];
ZaSettings.INIT[ZaSettings.SKIN_APP_TABS_ID]            = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, "skin_container_app_tabs"];

// here new skin start.....
ZaSettings.LICENSE_ENABLED = true;
ZaSettings.ADMIN_ZIMLETS_ENABLED = true;
ZaSettings.SAVE_SEARCH_ENABLED = true ;
ZaSettings.TREE_ENABLED = true;
ZaSettings.CURRENT_APP_ENABLED = false;
ZaSettings.BANNER_ENABLED = true;
ZaSettings.STATUS_ENABLED = false;
ZaSettings.SEARCH_PANEL_ENABLED = false;

ZaSettings.SKIN_IDX = 1;
ZaSettings.SKIN_SHELL_ID				= ZaSettings.SKIN_IDX++;
// IDs FOR HTML COMPONENTS IN THE SKIN
ZaSettings.SKIN_LOGO_ID             	= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_SEARCH_ID				= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_REFRESH_ID		        = ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_PREVIOUS_ID			    = ZaSettings.SKIN_IDX
ZaSettings.SKIN_NEXT_ID			    = ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_USERNAME_ID				= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_HELP_ID					= ZaSettings.SKIN_IDX++;

ZaSettings.SKIN_TREE_TOP_ID		        = ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_TREE_ID                 = ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_TREE_FOOTER_ID          = ZaSettings.SKIN_IDX++;

ZaSettings.SKIN_APP_HEADER_ID		    = ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_APP_MAIN_ID             = ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_APP_MAIN_FOOTER_ID      = ZaSettings.SKIN_IDX++;

ZaSettings.SKIN_TOOL_HEADER_ID			= ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_TOOL_ID                 = ZaSettings.SKIN_IDX++;
ZaSettings.SKIN_TOOL_FOOTER_ID          = ZaSettings.SKIN_IDX++;
// Dom Items
ZaSettings.SKIN_SHELL_DOM_ID            = "skin_outer";

ZaSettings.SKIN_LOGO_DOM_ID             = "skin_container_logo" ;
ZaSettings.SKIN_TOASTER_DOM_ID          = "skin_container_toaster";
ZaSettings.SKIN_SEARCH_DOM_ID           = "skin_container_search" ;
ZaSettings.SKIN_REFRESH_DOM_ID          = "skin_container_refresh" ;
ZaSettings.SKIN_PREVIOUS_DOM_ID         = "skin_container_previous";
ZaSettings.SKIN_NEXT_DOM_ID             = "skin_container_next";
ZaSettings.SKIN_USERNAME_DOM_ID         = "skin_container_username";
ZaSettings.SKIN_HELP_DOM_ID             = "skin_container_help";

ZaSettings.SKIN_TREE_TOP_DOM_ID         = "skin_container_tree_top";
ZaSettings.SKIN_TREE_DOM_ID             = "skin_container_tree";
ZaSettings.SKIN_TREE_FOOTER_DOM_ID      = "skin_container_tree_footer";

ZaSettings.SKIN_APP_HEADER_DOM_ID          = "skin_container_app_tabs";
ZaSettings.SKIN_APP_MAIN_DOM_ID          = "skin_container_app_main";
ZaSettings.SKIN_APP_MAIN_FOOTER_DOM_ID   = "skin_container_main_footer";

ZaSettings.SKIN_TOOL_HEADER_DOM_ID       = "skin_container_tool_header";
ZaSettings.SKIN_TOOL_DOM_ID              = "skin_container_tool";
ZaSettings.SKIN_TOOL_FOOTER_DOM_ID       = "skin_container_tool_footer";

// initialization for settings: [name, type, data type, default value]
// IDs FOR HTML COMPONENTS IN THE SKIN
ZaSettings.INIT[ZaSettings.SKIN_SHELL_ID]		    = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_SHELL_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_LOGO_ID]		    = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_LOGO_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_SEARCH_ID]		    = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_SEARCH_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_REFRESH_ID]		    = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_REFRESH_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_PREVIOUS_ID ]	    = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_PREVIOUS_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_NEXT_ID ]	        = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_NEXT_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_USERNAME_ID]	    = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_USERNAME_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_HELP_ID]            = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_HELP_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_TREE_TOP_ID	]       = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_TREE_TOP_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_TREE_ID]		    = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_TREE_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_TREE_FOOTER_ID ]    = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_TREE_FOOTER_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_APP_HEADER_ID]	    = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_APP_HEADER_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_APP_MAIN_ID ]		= [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_APP_MAIN_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_APP_MAIN_FOOTER_ID]	= [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_APP_MAIN_FOOTER_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_TOOL_HEADER_ID]     = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_TOOL_HEADER_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_TOOL_ID]            = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_TOOL_DOM_ID];
ZaSettings.INIT[ZaSettings.SKIN_TOOL_FOOTER_ID]     = [null, ZaSettings.T_CONFIG, ZaSettings.D_STRING, ZaSettings.SKIN_TOOL_FOOTER_DOM_ID];
//ZaSettings.timeZoneChoices = new XFormChoices(AjxTimezoneData.TIMEZONE_RULES, XFormChoices.OBJECT_LIST, "serverId", "serverId");
//in order to add the "Not Set" label to the timezone choices, we need to normalize it to label value pair
ZaSettings.getTimeZoneChoices = function () {
    if (!ZaSettings._timeZoneChoices) {
        ZaSettings._timeZoneChoices = [{ label: ZaMsg.VALUE_NOT_SET, value: "" }]  ;
        var tz_options_values =  AjxTimezone.getZonePreferencesOptions () ;
        var tz_options_labels = AjxTimezone.getZonePreferences () ;

        for (var i=0; i < tz_options_values.length ; i ++) {
            ZaSettings._timeZoneChoices.push({label: tz_options_labels[i],  value: tz_options_values[i]});
        }
    }
    return ZaSettings._timeZoneChoices;
}

ZaSettings.timeZoneChoices = ZaSettings.getTimeZoneChoices  ;



//ZaSettings.SKIN_TABS_DOM_ID = "skin_container_app_tabs" ;
//ZaSettings.SKIN_LOGIN_MSG_ID = "skin_td_login_msg" ;

ZaSettings.mailCharsetChoices = [
	{ value: "Big5" , label: "Big5" } ,
	{ value: "Big5-HKSCS" , label: "Big5-HKSCS" } ,
	{ value: "EUC-JP" , label: "EUC-JP" } ,
	{ value: "EUC-KR" , label: "EUC-KR" } ,
	{ value: "GB18030" , label: "GB18030" } ,
	{ value: "GB2312" , label: "GB2312" } ,
	{ value: "GBK" , label: "GBK" } ,
	{ value: "IBM-Thai" , label: "IBM-Thai" } ,
	{ value: "IBM00858" , label: "IBM00858" } ,
	{ value: "IBM01140" , label: "IBM01140" } ,
	{ value: "IBM01141" , label: "IBM01141" } ,
	{ value: "IBM01142" , label: "IBM01142" } ,
	{ value: "IBM01143" , label: "IBM01143" } ,
	{ value: "IBM01144" , label: "IBM01144" } ,
	{ value: "IBM01145" , label: "IBM01145" } ,
	{ value: "IBM01146" , label: "IBM01146" } ,
	{ value: "IBM01147" , label: "IBM01147" } ,
	{ value: "IBM01148" , label: "IBM01148" } ,
	{ value: "IBM01149" , label: "IBM01149" } ,
	{ value: "IBM037" , label: "IBM037" } ,
	{ value: "IBM1026" , label: "IBM1026" } ,
	{ value: "IBM1047" , label: "IBM1047" } ,
	{ value: "IBM273" , label: "IBM273" } ,
	{ value: "IBM277" , label: "IBM277" } ,
	{ value: "IBM278" , label: "IBM278" } ,
	{ value: "IBM280" , label: "IBM280" } ,
	{ value: "IBM284" , label: "IBM284" } ,
	{ value: "IBM285" , label: "IBM285" } ,
	{ value: "IBM297" , label: "IBM297" } ,
	{ value: "IBM420" , label: "IBM420" } ,
	{ value: "IBM424" , label: "IBM424" } ,
	{ value: "IBM437" , label: "IBM437" } ,
	{ value: "IBM500" , label: "IBM500" } ,
	{ value: "IBM775" , label: "IBM775" } ,
	{ value: "IBM850" , label: "IBM850" } ,
	{ value: "IBM852" , label: "IBM852" } ,
	{ value: "IBM855" , label: "IBM855" } ,
	{ value: "IBM857" , label: "IBM857" } ,
	{ value: "IBM860" , label: "IBM860" } ,
	{ value: "IBM861" , label: "IBM861" } ,
	{ value: "IBM862" , label: "IBM862" } ,
	{ value: "IBM863" , label: "IBM863" } ,
	{ value: "IBM864" , label: "IBM864" } ,
	{ value: "IBM865" , label: "IBM865" } ,
	{ value: "IBM866" , label: "IBM866" } ,
	{ value: "IBM868" , label: "IBM868" } ,
	{ value: "IBM869" , label: "IBM869" } ,
	{ value: "IBM870" , label: "IBM870" } ,
	{ value: "IBM871" , label: "IBM871" } ,
	{ value: "IBM918" , label: "IBM918" } ,
	{ value: "imap-utf-7" , label: "imap-utf-7" } ,
	{ value: "ISO-2022-CN" , label: "ISO-2022-CN" } ,
	{ value: "ISO-2022-JP" , label: "ISO-2022-JP" } ,
	{ value: "ISO-2022-KR" , label: "ISO-2022-KR" } ,
	{ value: "ISO-8859-1" , label: "ISO-8859-1" } ,
	{ value: "ISO-8859-13" , label: "ISO-8859-13" } ,
	{ value: "ISO-8859-15" , label: "ISO-8859-15" } ,
	{ value: "ISO-8859-2" , label: "ISO-8859-2" } ,
	{ value: "ISO-8859-3" , label: "ISO-8859-3" } ,
	{ value: "ISO-8859-4" , label: "ISO-8859-4" } ,
	{ value: "ISO-8859-5" , label: "ISO-8859-5" } ,
	{ value: "ISO-8859-6" , label: "ISO-8859-6" } ,
	{ value: "ISO-8859-7" , label: "ISO-8859-7" } ,
	{ value: "ISO-8859-8" , label: "ISO-8859-8" } ,
	{ value: "ISO-8859-9" , label: "ISO-8859-9" } ,
	{ value: "JIS_X0201" , label: "JIS_X0201" } ,
	{ value: "JIS_X0212-1990" , label: "JIS_X0212-1990" } ,
	{ value: "KOI8-R" , label: "KOI8-R" } ,
	{ value: "macintosh" , label: "macintosh" } ,
	{ value: "macintosh_ce" , label: "macintosh_ce" } ,
	{ value: "Shift_JIS" , label: "Shift_JIS" } ,
	{ value: "TIS-620" , label: "TIS-620" } ,
	{ value: "US-ASCII" , label: "US-ASCII" } ,
	{ value: "UTF-16" , label: "UTF-16" } ,
	{ value: "UTF-16BE" , label: "UTF-16BE" } ,
	{ value: "UTF-16LE" , label: "UTF-16LE" } ,
	{ value: "utf-7" , label: "utf-7" } ,
	{ value: "UTF-8" , label: "UTF-8" } ,
	{ value: "windows-1250" , label: "windows-1250" } ,
	{ value: "windows-1251" , label: "windows-1251" } ,
	{ value: "windows-1252" , label: "windows-1252" } ,
	{ value: "windows-1253" , label: "windows-1253" } ,
	{ value: "windows-1254" , label: "windows-1254" } ,
	{ value: "windows-1255" , label: "windows-1255" } ,
	{ value: "windows-1256" , label: "windows-1256" } ,
	{ value: "windows-1257" , label: "windows-1257" } ,
	{ value: "windows-1258" , label: "windows-1258" } ,
	{ value: "windows-31j" , label: "windows-31j" }/* ,
	{ value: "x-Big5-Solaris" , label: "x-Big5-Solaris" } ,
	{ value: "x-euc-jp-linux" , label: "x-euc-jp-linux" } ,
	{ value: "x-EUC-TW" , label: "x-EUC-TW" } ,
	{ value: "x-eucJP-Open" , label: "x-eucJP-Open" } ,
	{ value: "x-IBM1006" , label: "x-IBM1006" } ,
	{ value: "x-IBM1025" , label: "x-IBM1025" } ,
	{ value: "x-IBM1046" , label: "x-IBM1046" } ,
	{ value: "x-IBM1097" , label: "x-IBM1097" } ,
	{ value: "x-IBM1098" , label: "x-IBM1098" } ,
	{ value: "x-IBM1112" , label: "x-IBM1112" } ,
	{ value: "x-IBM1122" , label: "x-IBM1122" } ,
	{ value: "x-IBM1123" , label: "x-IBM1123" } ,
	{ value: "x-IBM1124" , label: "x-IBM1124" } ,
	{ value: "x-IBM1381" , label: "x-IBM1381" } ,
	{ value: "x-IBM1383" , label: "x-IBM1383" } ,
	{ value: "x-IBM33722" , label: "x-IBM33722" } ,
	{ value: "x-IBM737" , label: "x-IBM737" } ,
	{ value: "x-IBM834" , label: "x-IBM834" } ,
	{ value: "x-IBM856" , label: "x-IBM856" } ,
	{ value: "x-IBM874" , label: "x-IBM874" } ,
	{ value: "x-IBM875" , label: "x-IBM875" } ,
	{ value: "x-IBM921" , label: "x-IBM921" } ,
	{ value: "x-IBM922" , label: "x-IBM922" } ,
	{ value: "x-IBM930" , label: "x-IBM930" } ,
	{ value: "x-IBM933" , label: "x-IBM933" } ,
	{ value: "x-IBM935" , label: "x-IBM935" } ,
	{ value: "x-IBM937" , label: "x-IBM937" } ,
	{ value: "x-IBM939" , label: "x-IBM939" } ,
	{ value: "x-IBM942" , label: "x-IBM942" } ,
	{ value: "x-IBM942C" , label: "x-IBM942C" } ,
	{ value: "x-IBM943" , label: "x-IBM943" } ,
	{ value: "x-IBM943C" , label: "x-IBM943C" } ,
	{ value: "x-IBM948" , label: "x-IBM948" } ,
	{ value: "x-IBM949" , label: "x-IBM949" } ,
	{ value: "x-IBM949C" , label: "x-IBM949C" } ,
	{ value: "x-IBM950" , label: "x-IBM950" } ,
	{ value: "x-IBM964" , label: "x-IBM964" } ,
	{ value: "x-IBM970" , label: "x-IBM970" } ,
	{ value: "x-ISCII91" , label: "x-ISCII91" } ,
	{ value: "x-ISO-2022-CN-CNS" , label: "x-ISO-2022-CN-CNS" } ,
	{ value: "x-ISO-2022-CN-GB" , label: "x-ISO-2022-CN-GB" } ,
	{ value: "x-iso-8859-11" , label: "x-iso-8859-11" } ,
	{ value: "x-JIS0208" , label: "x-JIS0208" } ,
	{ value: "x-JISAutoDetect" , label: "x-JISAutoDetect" } ,
	{ value: "x-Johab" , label: "x-Johab" } ,
	{ value: "x-MacArabic" , label: "x-MacArabic" } ,
	{ value: "x-MacCentralEurope" , label: "x-MacCentralEurope" } ,
	{ value: "x-MacCroatian" , label: "x-MacCroatian" } ,
	{ value: "x-MacCyrillic" , label: "x-MacCyrillic" } ,
	{ value: "x-MacDingbat" , label: "x-MacDingbat" } ,
	{ value: "x-MacGreek" , label: "x-MacGreek" } ,
	{ value: "x-MacHebrew" , label: "x-MacHebrew" } ,
	{ value: "x-MacIceland" , label: "x-MacIceland" } ,
	{ value: "x-MacRoman" , label: "x-MacRoman" } ,
	{ value: "x-MacRomania" , label: "x-MacRomania" } ,
	{ value: "x-MacSymbol" , label: "x-MacSymbol" } ,
	{ value: "x-MacThai" , label: "x-MacThai" } ,
	{ value: "x-MacTurkish" , label: "x-MacTurkish" } ,
	{ value: "x-MacUkraine" , label: "x-MacUkraine" } ,
	{ value: "x-MS950-HKSCS" , label: "x-MS950-HKSCS" } ,
	{ value: "x-mswin-936" , label: "x-mswin-936" } ,
	{ value: "x-PCK" , label: "x-PCK" } ,
	{ value: "x-windows-50220" , label: "x-windows-50220" } ,
	{ value: "x-windows-50221" , label: "x-windows-50221" } ,
	{ value: "x-windows-874" , label: "x-windows-874" } ,
	{ value: "x-windows-949" , label: "x-windows-949" } ,
	{ value: "x-windows-950" , label: "x-windows-950" } ,                                   
	{ value: "x-windows-iso2022jp" , label: "x-windows-iso2022jp" }*/
] ;

ZaSettings.getLocaleChoices = function () {

    if (!ZaSettings.localeChoices) {
        var soapDoc = AjxSoapDoc.create("GetAvailableLocalesRequest", "urn:zimbraAccount", null);
        var params = {};
        params.soapDoc = soapDoc;

        var reqMgrParams = {
            controller: (ZaApp.getInstance() ? ZaApp.getInstance().getCurrentController() : null),
            busyMsg: ZaMsg.BUSY_GET_LOCALE
        }

        var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.GetAvailableLocalesResponse;
        var locales = resp.locale;

        ZaSettings.localeChoices = [];

        for (var i = 0; i < locales.length; i++) {
            var displayLabel = locales[i].localName;

            if (locales[i].name != locales[i].localName) {
                displayLabel += " - " + locales[i].name;
            }

            // bug: 38038
            var localeId = locales[i].id.replace(/^in/,"id");

            ZaSettings.localeChoices.push({
                value: localeId,
                label: displayLabel
            });
        }
    }

    return ZaSettings.localeChoices ;
}

ZaSettings.isNetworkVersion = function () {
    return (ZaSettings.IS_ZCS_NETWORK_VERSION || false );
}

ZaSettings.isOctopus = function () {
    return (ZaSettings.IS_OCTOPUS || false);
}

ZaSettings.getSmtpDnsSupportLevel = function(){
	return [
		{value : "enabled", label : ZaMsg.NAD_MTA_SMTP_Dns_Enabled},
		{value : "disabled", label : ZaMsg.NAD_MTA_SMTP_Dns_Disabled},
		{value : "dnssec", label : ZaMsg.NAD_MTA_SMTP_Dns_Dnssec}
	];
};

ZaSettings.smtpDnsSupportLevel = ZaSettings.getSmtpDnsSupportLevel;
}
if (AjxPackage.define("zimbraAdmin.common.ZaAppCtxt")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor ZaAppCtxt
* @class ZaAppCtxt
*/
ZaAppCtxt = function() {
}

ZaAppCtxt.LABEL = "appCtxt";

ZaAppCtxt.prototype.toString = 
function() {
	return "ZaAppCtxt";
}

/**
* Gets the app context from the given shell.
*
* @param shell		the shell
* @return			the app context
*/
ZaAppCtxt.getFromShell =
function(shell) {
	return shell.getData(ZaAppCtxt.LABEL);
}



ZaAppCtxt.prototype.setAppController =
function(appController) {
	this._appController = appController;
}

ZaAppCtxt.prototype.getAppController =
function() {
	return this._appController;
}


ZaAppCtxt.prototype.getApp =
function() {
	return this._appController.getApp();
}

ZaAppCtxt.prototype.getAppViewMgr =
function() {
	return this._appController.getAppViewMgr();
}

ZaAppCtxt.prototype.setClientCmdHdlr =
function(clientCmdHdlr) {
	this._clientCmdHdlr = clientCmdHdlr;
}

ZaAppCtxt.prototype.getClientCmdHdlr =
function() {
	return this._clientCmdHdlr;
}

ZaAppCtxt.prototype.getSearchController =
function() {
	return this._appController.getSearchController();
}

ZaAppCtxt.prototype.getLoginDialog =
function() {
	if (!this._loginDialog)
		this._loginDialog = new ZaLoginDialog(this.getShell(), null, null, this);
	return this._loginDialog;
}

ZaAppCtxt.prototype.getMsgDialog =
function(refresh) {
	if (!this._msgDialog || refresh)
		this._msgDialog = new ZaMsgDialog(this.getShell());
	return this._msgDialog;
}

ZaAppCtxt.prototype.getConfirmMsgDialog = function (refresh) {
	if(!this._confirmMsgDialog || refresh) {
		this._confirmMsgDialog = new ZaMsgDialog(this.getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON, DwtDialog.CANCEL_BUTTON], null, ZaId.CTR_GLOBAL + "_confirm3btn");
	}
	return this._confirmMsgDialog;
}
 
ZaAppCtxt.prototype.getConfirmMsgDialog2 = function (refresh) {
	if(!this._confirmMessageDialog2 || refresh) {
		this._confirmMessageDialog2 = new ZaMsgDialog(this.getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON], null, ZaId.CTR_GLOBAL + "_confirm2btn");
	}
	return this._confirmMessageDialog2;
}


ZaAppCtxt.prototype.getErrorDialog = 
function(refresh) {
	if (!this._errorDialog || refresh)
		this._errorDialog = new ZaErrorDialog(this.getShell());
	return this._errorDialog;
}

ZaAppCtxt.prototype.getShell =
function() {
	return this._shell;
}

ZaAppCtxt.prototype.setShell =
function(shell) {
	this._shell = shell;
	shell.setData(ZaAppCtxt.LABEL, this);
}


ZaAppCtxt.prototype.getFolderTree =
function() {
	return this._folderTree;
}

ZaAppCtxt.prototype.setFolderTree =
function(folderTree) {
	this._folderTree = folderTree;
}

ZaAppCtxt.prototype.getUsername = 
function() { 
	return this._username;
}

ZaAppCtxt.prototype.setUsername = 
function(username) {
	this._username = username;
}

ZaAppCtxt.prototype.getCurrentSearch =
function() { 
	return this._currentSearch;
}

ZaAppCtxt.prototype.setCurrentSearch =
function(search) {
	this._currentSearch = search;
}

ZaAppCtxt.prototype.getSettings =
function() {
	if (!this._settings)
		this._settings = new ZaSettings(this);
	return this._settings;
}

// NOTE: this is only to be used by any child windows!
ZaAppCtxt.prototype.setSettings = 
function(settings) {
	this._settings = settings;
}

ZaAppCtxt.prototype.getRootTabGroup =
function() {
	if (!this._rootTabGrp)
		this._rootTabGrp = new DwtTabGroup("ROOT");
	return this._rootTabGrp;
}

ZaAppCtxt.getLogoURI =
function () {
    if (skin && skin.hints && skin.hints.banner) {
        return skin.hints.banner.url ;
    } else {
        return ZaSettings.LOGO_URI ;
    }
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaAuthenticate")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

ZaAuthenticate = function(appCtxt) {
    if (arguments.length == 0) return;
    this._appCtxt = appCtxt;
    this.uname = "";
}


ZaAuthenticate.processResponseMethods = new Array();

ZaAuthenticate.prototype.toString = 
function() {
    return "ZaAuthenticate";
}

ZaAuthenticate.prototype.changePassword = 
function (uname,oldPass,newPass,callback) {
    var soapDoc = AjxSoapDoc.create("ChangePasswordRequest", "urn:zimbraAccount");
    var el = soapDoc.set("account", uname);
    el.setAttribute("by", "name");
    soapDoc.set("oldPassword", oldPass);
    soapDoc.set("password", newPass);

    var command = new ZmCsfeCommand();
    var params = new Object();
    params.soapDoc = soapDoc;    
    params.asyncMode = true;
    params.noAuthToken=true;
    params.callback = callback;
    command.invoke(params);    
}

ZaAuthenticate.prototype.execute =
function (uname, pword, callback, twoFactorCode, trustedDevice) {
    var soapDoc = AjxSoapDoc.create("AuthRequest", ZaZimbraAdmin.URN, null);
    this.uname = uname;
    var params = new Object();
    params.noAuthToken=true;
    params.ignoreAuthToken = true;
    if(uname && pword) {
        soapDoc.set("name", uname);
        soapDoc.set("password", pword);
    } else {
        soapDoc.getMethod().setAttribute("refresh", "1");
    }
    if(twoFactorCode) {
        soapDoc.set("twoFactorCode", twoFactorCode);
    }
    if(trustedDevice) {
        soapDoc.set("trustedDevice", trustedDevice);
    }
    soapDoc.set("virtualHost", location.hostname);
    soapDoc.set("csrfTokenSecured", 1);
    var command = new ZmCsfeCommand();
    params.soapDoc = soapDoc;
    params.asyncMode = true;
    params.skipExpiredToken = true;
    params.callback = callback;
    command.invoke(params);
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaPopupMenu")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaPopupMenu
* @constructor
* @param parent
* @param className
* @param dialog
* @param opList
*
* This widget class extends DwtMenu. Similar to ZaToolBar, this class creates
* buttons form an array of ZaOperation objects
**/
ZaPopupMenu = function(parent, className, dialog, opList, contextId, menuType, btnOrder) {
	if (arguments.length == 0) return;
	className = className || "ActionMenu";
        this._contextId = contextId;
	this._menuType = menuType;
	DwtMenu.call(this, parent, DwtMenu.POPUP_STYLE, className, null, dialog, ZaId.getMenuId(this._contextId,this._menuType));
	this._menuItems = new Object();	
	if(opList) {
		//var cnt = opList.length;

        var ix = 0;
        for(ix = 0; btnOrder && ix < btnOrder.length; ix++) {
            if(opList[btnOrder[ix]] instanceof ZaOperation) {
                if(opList[btnOrder[ix]].id == ZaOperation.NONE  || opList[btnOrder[ix]].id == ZaOperation.HELP)
                    continue;

                var style = (opList[btnOrder[ix]].id == ZaOperation.SEP) ? DwtMenuItem.SEPARATOR_STYLE : DwtMenuItem.NO_STYLE;
                this.createMenuItem(opList[btnOrder[ix]].id, opList[btnOrder[ix]].imageId, opList[btnOrder[ix]].caption, null, opList[btnOrder[ix]].enabled,style,null);
                this.addSelectionListener(opList[btnOrder[ix]].id, opList[btnOrder[ix]].listener);
            }
        }
        // add the remained buttons
        for(ix in opList) {
            if(!btnOrder || AjxUtil.indexOf(btnOrder,ix) < 0) {
                if(opList[ix] instanceof ZaOperation) {
                    if(opList[ix].id == ZaOperation.NONE  || opList[ix].id == ZaOperation.HELP)
                        continue;

                    var style = (opList[ix].id == ZaOperation.SEP) ? DwtMenuItem.SEPARATOR_STYLE : DwtMenuItem.NO_STYLE;
                    this.createMenuItem(opList[ix].id, opList[ix].imageId, opList[ix].caption, null, opList[ix].enabled,style,null);
                    this.addSelectionListener(opList[ix].id, opList[ix].listener);
                }
            }
        }
	}
}

ZaPopupMenu.prototype = new DwtMenu;
ZaPopupMenu.prototype.constructor = ZaPopupMenu;

ZaPopupMenu.prototype.toString = 
function() {
	return "ZaPopupMenu";
}

ZaPopupMenu.prototype.addSelectionListener =
function(menuItemId, listener) {
	this._menuItems[menuItemId].addSelectionListener(listener);
}

ZaPopupMenu.prototype.removeSelectionListener =
function(menuItemId, listener) {
	this._menuItems[menuItemId].removeSelectionListener(listener);
}

ZaPopupMenu.prototype.popup =
function(delay, x, y, kbGenerated) {
	if (delay == null)
		delay = 0;
	if (x == null) 
		x = Dwt.DEFAULT;
	if (y == null)
		y = Dwt.DEFAULT;
	DwtMenu.prototype.popup.call(this, delay, x, y, kbGenerated);
}

ZaPopupMenu.prototype.getMenuItem = 
function (menuItemId) {
	return this._menuItems[menuItemId];
}
/**
* Enables/disables menu items.
*
* @param ids		a list of menu item IDs
* @param enabled	whether to enable the menu items
*/
ZaPopupMenu.prototype.enable =
function(ids, enabled) {
	if (!(ids instanceof Array))
		ids = [ids];
	for (var i = 0; i < ids.length; i++)
		if (this._menuItems[ids[i]])
			this._menuItems[ids[i]].setEnabled(enabled);
}

ZaPopupMenu.prototype.enableAll =
function(enabled) {
	for (var i in this._menuItems)
		this._menuItems[i].setEnabled(enabled);
}

ZaPopupMenu.prototype.addMenuItem =
function(menuItemId, menuItem) {
	this._menuItems[menuItemId] = menuItem;
}

ZaPopupMenu.prototype.createMenuItem =
function(menuItemId, imageId, text, disImageId, enabled, style, radioGroupId) {
	var mi = this._menuItems[menuItemId] = new DwtMenuItem({
		parent:		this, 
		style:		style, 
		radioGroupId: 	radioGroupId, 
		id: 		ZaId.getMenuItemId(this._contextId, ZaOperation.getStringName(menuItemId))
	});
	if (imageId)
		mi.setImage(imageId);
	if (text)
		mi.setText(text);
	mi.setEnabled(enabled !== false);
	return mi;
}

ZaPopupMenu.prototype.createSeparator =
function() {
	new DwtMenuItem(this, DwtMenuItem.SEPARATOR_STYLE);
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaAppViewMgr")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* Creates a layout manager from the given components.
* @constructor
* @class
* This class manages layout. The layout is divided into the following parts:
* <p><ul>
*  <li>banner: static; has a few account-related buttons</li>
*  <li>search bar: static; has buttons for various ways to search, including browse</li>
*  <li>overview panel: tree view of folders, tags, app links</li>
*  <li>sash: a thin moveable vertical bar for resizing the surrounding elements
*  <li>app container: the most dynamic area; displays app-specific toolbar and content</li>
* </ul></p>
* <p>
* Visibility is managed through Z indexes, which have constants in the following order:</p>
* <p>
* Z_HIDDEN, Z_CURTAIN, Z_VIEW, Z_TOOLTIP, Z_MENU, Z_VEIL, Z_DIALOG, Z_BUSY</p>
* <p>
* Since z-index matters only among peer elements, anything that we manage via z-index has to
* hang off the shell. To manage an app view, we create an app container that hangs off the shell
* and put the app view in there.</p>
* <p>
* The app container lays out the app elements in the desired style, for example, in a vertical
* layout. Different layout styles can be added here, and then specified when the app view is
* created.</p>
* <p>
* Some views are "volatile", which means they trigger browser bugs when we try to hide them. It happens
* with views that contain forms. In IE, SELECT fields don't obey z-index, and in Firefox, the cursor
* bleeds through.
*
* @author Conrad Damon
* @author Ross Dargahi
* @param shell			the outermost containing element
* @param banner			the banner
* @param controller		the app controller
*/
ZaAppViewMgr = function(shell, controller, hasSkin) {

	this._shell = shell;
	this._controller = controller;
	this._appCtxt = controller._appCtxt;
    this._shellSz = this._shell.getSize();
	this._shell.addControlListener(new AjxListener(this, this._shellControlListener));
	this._needBannerLayout = false;
	this._sashSupported = (window.skin && typeof window.skin.setTreeWidth == "function");
        this._sbSashSupported = (window.skin && typeof window.skin.setSBHeight == "function");
/*	this._sash = new DwtSash(this._shell, DwtSash.HORIZONTAL_STYLE, "AppSash-horiz", 5);
	this._sash.registerCallback(this._sashCallback, this);
*/	
	this._currentView = null;			// name of currently visible view
	this._views = new Object();			// hash that gives names to app views
	this._hidden = new Array();			// stack of views that aren't visible
	
	this._layoutStyle = new Object();	// hash matching view to layout style
	this._staleCallback = new Object(); // when topmost view is popped, allow underlying view to cleanup

	this._compList = new Array();		// list of component IDs
	this._components = new Object();	// component objects (widgets)
	this._htmlEl = new Object();		// their HTML elements
	this._containers = new Object();	// containers within the skin
	this._contBounds = new Object();	// bounds for the containers
	
	// view preemption
	this._pushCallback = new AjxCallback(this, this.pushView);
//	this._popCallback = new AjxCallback(this, this.popView);
	
/*	// hash matching layout style to their methods	
	this._layoutMethod = new Object();
	this._layoutMethod[ZaAppViewMgr.LAYOUT_VERTICAL] = this._appLayoutVertical;
*/	
}

ZaAppViewMgr.DEFAULT = -1;

// reasons the layout changes
ZaAppViewMgr.RESIZE = 1;
ZaAppViewMgr.BROWSE = 2;
ZaAppViewMgr.OVERVIEW = 3;

// visible margins (will be shell background color)
ZaAppViewMgr.TOOLBAR_SEPARATION = 0;	// below search bar
ZaAppViewMgr.COMPONENT_SEPARATION = 2;	// in app container

// layout styles
ZaAppViewMgr.LAYOUT_VERTICAL = 1;	// top to bottom, full width, last element gets remaining space

// used when coming back from pop shield callbacks
ZaAppViewMgr.PENDING_VIEW = "ZaAppViewMgr.PENDgING_VIEW";


// components
ZaAppViewMgr.C_BANNER					= "BANNER";
ZaAppViewMgr.C_SEARCH					= "SEARCH";
ZaAppViewMgr.C_SEARCH_BUILDER			= "SEARCH BUILDER";
ZaAppViewMgr.C_SEARCH_BUILDER_TOOLBAR	= "SEARCH BUILDER TOOLBAR";
ZaAppViewMgr.C_SEARCH_BUILDER_SASH     = "SEARCH BUILDER SASH";
ZaAppViewMgr.C_CURRENT_APP				= "CURRENT APP";
ZaAppViewMgr.C_APP_TABS					= "APP TABS" ;
ZaAppViewMgr.C_TREE						= "TREE";
//ZaAppViewMgr.C_TREE_FOOTER				= "TREE FOOTER";
ZaAppViewMgr.C_TOOLBAR_TOP				= "TOP TOOLBAR";
ZaAppViewMgr.C_APP_CONTENT				= "APP CONTENT";
ZaAppViewMgr.C_STATUS					= "STATUS";
ZaAppViewMgr.C_SASH						= "SASH";
ZaAppViewMgr.C_LOGIN_MESSAGE            = "LOGIN_MESSAGE" ;

// keys for getting container IDs
ZaAppViewMgr.CONT_ID_KEY = new Object();
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_BANNER]					= ZaSettings.SKIN_LOGO_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_SEARCH]					= ZaSettings.SKIN_SEARCH_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_SEARCH_BUILDER]			= ZaSettings.SKIN_SEARCH_BUILDER_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_SEARCH_BUILDER_TOOLBAR]	= ZaSettings.SKIN_SEARCH_BUILDER_TOOLBAR_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_SEARCH_BUILDER_SASH] = ZaSettings.SKIN_SEARCH_BUILDER_SASH_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_CURRENT_APP]			= ZaSettings.SKIN_CURRENT_APP_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_TREE]					= ZaSettings.SKIN_TREE_ID;
//ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_TREE_FOOTER]			= ZaSettings.SKIN_TREE_FOOTER_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_TOOLBAR_TOP]			= ZaSettings.SKIN_APP_TOP_TOOLBAR_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_APP_CONTENT]			= ZaSettings.SKIN_APP_MAIN_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_STATUS]					= ZaSettings.SKIN_STATUS_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_SASH]					= ZaSettings.SKIN_SASH_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_APP_TABS]				= ZaSettings.SKIN_APP_TABS_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_LOGIN_MESSAGE]	        = ZaSettings.SKIN_LOGIN_MSG_ID;

// components
ZaAppViewMgr.C_BANNER					= "BANNER";
ZaAppViewMgr.C_SEARCH					= "SEARCH";

ZaAppViewMgr.C_TREE_TOP				    = "TREE TOP";
ZaAppViewMgr.C_TREE						= "TREE";
ZaAppViewMgr.C_TREE_FOOTER				= "TREE FOOTER";

ZaAppViewMgr.C_APP_HEADER				= "APP HEADER";
ZaAppViewMgr.C_APP_CONTENT			    = "APP CONTENT";
ZaAppViewMgr.C_APP_FOOTER				= "APP FOOTER";

ZaAppViewMgr.C_TOOL_HEADER				= "TOOL HEADER";
ZaAppViewMgr.C_TOOL				        = "TOOL";
ZaAppViewMgr.C_TOOL_FOOTER				= "TOOL FOOTER";

// keys for getting container IDs
ZaAppViewMgr.CONT_ID_KEY = new Object();
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_BANNER]					= ZaSettings.SKIN_LOGO_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_SEARCH]					= ZaSettings.SKIN_SEARCH_ID;

ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_TREE_TOP]			    = ZaSettings.SKIN_TREE_TOP_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_TREE]					= ZaSettings.SKIN_TREE_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_TREE_FOOTER]			= ZaSettings.SKIN_TREE_FOOTER_ID;

ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_APP_HEADER]			    = ZaSettings.SKIN_APP_HEADER_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_APP_CONTENT]			= ZaSettings.SKIN_APP_MAIN_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_APP_FOOTER]			    = ZaSettings.SKIN_APP_MAIN_FOOTER_ID;

ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_TOOL_HEADER]			= ZaSettings.SKIN_TOOL_HEADER_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_TOOL]				    = ZaSettings.SKIN_TOOL_ID;
ZaAppViewMgr.CONT_ID_KEY[ZaAppViewMgr.C_TOOL_FOOTER]	        = ZaSettings.SKIN_TOOL_FOOTER_ID;

// Public methods
ZaAppViewMgr.prototype.toString = 
function() {
	return "ZaAppViewMgr";
}

ZaAppViewMgr.prototype.getShell = 
function() {
	return this._shell;
}

/**
* Returns the name of the app view currently being displayed.
*/
ZaAppViewMgr.prototype.getCurrentView =
function() {
	return this._currentView;
}

ZaAppViewMgr.prototype.getCurrentViewContent =
function() {
    var elements = this._views[this._currentView];
	var content = elements[ZaAppViewMgr.C_APP_CONTENT];
	return content;
}

ZaAppViewMgr.prototype.getViewContentById =
function(id) {
    var elements = this._views[id];
    if (!elements)
        return "";
	var content = elements[ZaAppViewMgr.C_APP_CONTENT];
	return content;
}
/**
* Creates an app view from the given components and puts it in an app container.
*
* @param viewName		the name of the view
* @param appName		the name of the owning app
* @param elements		an array of elements to display
* @return				the app view
*/
ZaAppViewMgr.prototype.createView =
function(viewId, elements) {
	this._views[viewId] = elements;
	this.addComponents(elements, false, true);
}

/**
* Makes the given view visible, pushing the previously visible one to the top of the
* hidden stack.
*
* @param viewId	the name of the app view to push
* @return			the id of the view that is displayed
*/
ZaAppViewMgr.prototype.pushView =
function(viewId) {
	// if same view, no need to go through hide/show
	if (viewId == this._currentView) {
		this._setTitle(viewId);
		return viewId;
	}

	this._setViewVisible(this._currentView, false);
	if (this._currentView && (this._currentView != viewId))
		this._hidden.push(this._currentView);

	this._removeFromHidden(viewId);
	var temp = this._lastView;
	this._lastView = this._currentView;
	this._currentView = viewId;

	this._setViewVisible(viewId, true);

	return viewId;
}

/**
* Hides the currently visible view, and makes the view on top of the hidden stack visible.
*
* @return		the id of the view that is displayed
*/
ZaAppViewMgr.prototype.popView =
function() {
	if (!this._currentView)
		throw new AjxException("no view to pop");

	this._setViewVisible(this._currentView,false);

	this._lastView = this._currentView;
	this._currentView = this._hidden.pop();

	if (!this._currentView)
		throw new AjxException("no view to show");
		
	this._removeFromHidden(this._currentView);

	this._setViewVisible(this._currentView, true);
	return this._currentView;
}

ZaAppViewMgr.prototype.removeHiddenView = 
function(viewId) {
	var cnt = this._hidden.length;
	for(var ix =0; ix< cnt;ix++) {
		if(this._hidden[ix] == viewId) {
			this._hidden.splice(ix,1);
		}
	}
}
/**
* Makes the given view visible, and clears the hidden stack.
*
* @param viewName	the name of a view
* @return			true if the view was set
*/
ZaAppViewMgr.prototype.setView =
function(viewName) {
//	DBG.println(AjxDebug.DBG1, "setView: " + viewName);
	var result = this.pushView(viewName);
    if (result)
		this._hidden = new Array();
	return result;
}

ZaAppViewMgr.prototype.addComponents =
function(components, doFit, noSetZ) {
	var list = new Array();
	for (var cid in components) {
		this._compList.push(cid);
		var comp = components[cid];
		this._components[cid] = comp;
		var htmlEl = comp.getHtmlElement();
		this._htmlEl[cid] = htmlEl;
		var contId = ZaSettings.get(ZaAppViewMgr.CONT_ID_KEY[cid]);
		var contEl = document.getElementById(contId);
		if(!contEl) {
			continue;
		}
		this._containers[cid] = contEl;
		if (Dwt.contains(contEl, htmlEl))
			throw new AjxException("element already added to container: " + cid);		
		Dwt.removeChildren(contEl);
		
		list.push(cid);
		
		if (!noSetZ)
			comp.zShow(true);

		if (cid == ZaAppViewMgr.C_SEARCH_BUILDER  || cid == ZaAppViewMgr.C_SEARCH_BUILDER_TOOLBAR ) {
			//this._components[ZaAppViewMgr.C_SEARCH_BUILDER_TOOLBAR].setLocation(Dwt.LOC_NOWHERE, Dwt.LOC_NOWHERE);
			DBG.println(AjxDebug.DBG1, "Enforce Z-index to hidden " + cid) ;
			comp.zShow(false);
		}
                
        if (cid == ZaAppViewMgr.C_SEARCH_BUILDER_SASH){
                comp.zShow(false);
                if(this._sbSashSupported){
                     comp.registerCallback(this._sbAppSashCallback, this);
                }
                comp.setCursor("default");
        }
                
		if (cid == ZaAppViewMgr.C_SASH) {
			if (this._sashSupported){
				comp.registerCallback(this._appTreeSashCallback, this);
			}
			comp.setCursor("default");
		}
	}
	if (doFit)
		this._stickToGrid(list);
}
ZaAppViewMgr.prototype.showSearchBuilder =
function(visible) {
	DBG.println(AjxDebug.DBG1, "show search builder: " + visible);
	skin.showSearchBuilder(visible);
	this._components[ZaAppViewMgr.C_SEARCH_BUILDER_TOOLBAR].zShow(visible);
	this._components[ZaAppViewMgr.C_SEARCH_BUILDER].zShow(visible);
        this._components[ZaAppViewMgr.C_SEARCH_BUILDER_SASH].zShow(visible);

    if (visible) this._isAdvancedSearchBuilderDisplayed = true ;
   /* var list = [ZaAppViewMgr.C_SEARCH_BUILDER, ZaAppViewMgr.C_SEARCH_BUILDER_TOOLBAR,
                ZaAppViewMgr.C_LOGIN_MESSAGE,
                ZaAppViewMgr.C_CURRENT_APP, ZaAppViewMgr.C_APP_CHOOSER, ZaAppViewMgr.C_APP_TABS,
				ZaAppViewMgr.C_TREE,
				ZaAppViewMgr.C_TREE_FOOTER, ZaAppViewMgr.C_TOOLBAR_TOP, ZaAppViewMgr.C_APP_CONTENT];
	this._stickToGrid(list);*/
	this.fitAll();
	// search builder contains forms, and browsers have quirks around form fields and z-index
	if (!visible) {
		this._components[ZaAppViewMgr.C_SEARCH_BUILDER].setLocation(Dwt.LOC_NOWHERE, Dwt.LOC_NOWHERE);
	}
};
ZaAppViewMgr.prototype.fitAll = function () {
    var list = [ZaAppViewMgr.C_SEARCH_BUILDER, ZaAppViewMgr.C_SEARCH_BUILDER_TOOLBAR, ZaAppViewMgr.C_SEARCH_BUILDER_SASH,
                ZaAppViewMgr.C_LOGIN_MESSAGE,
                ZaAppViewMgr.C_CURRENT_APP, /*ZaAppViewMgr.C_APP_CHOOSER,*/ ZaAppViewMgr.C_APP_TABS,
                ZaAppViewMgr.C_BANNER,
				ZaAppViewMgr.C_TREE,ZaAppViewMgr.C_SASH,
				/*ZaAppViewMgr.C_TREE_FOOTER,*/ ZaAppViewMgr.C_TOOLBAR_TOP, ZaAppViewMgr.C_APP_CONTENT];

    list = [
	        ZaAppViewMgr.C_BANNER,
	        ZaAppViewMgr.C_SEARCH,
	
	        ZaAppViewMgr.C_TREE_TOP	,
	        ZaAppViewMgr.C_TREE	,
	        ZaAppViewMgr.C_TREE_FOOTER ,
	
	        ZaAppViewMgr.C_APP_HEADER,
	        ZaAppViewMgr.C_APP_CONTENT,
	        ZaAppViewMgr.C_APP_FOOTER,
	
	        ZaAppViewMgr.C_TOOL_HEADER ,
	        ZaAppViewMgr.C_TOOL ,
	        ZaAppViewMgr.C_TOOL_FOOTER
	];
	this._stickToGrid(list);
}
ZaAppViewMgr.prototype._stickToGrid = 
function(components) {
	this._shell.relayout();
	for (var i = 0; i < components.length; i++) {
		var cid = components[i];
		// don't resize logo image (it will tile) or reposition it (centered via style)
		//if (cid == ZaAppViewMgr.C_BANNER) continue;
		//DBG.println(AjxDebug.DBG3, "fitting to container: " + cid);
		var cont = this._containers[cid];
		if (cont) {
			var contBds = ZaAppViewMgr._getBounds(cont, cid);
			var comp = this._components[cid];
			if (
				cid == ZaAppViewMgr.C_APP_CONTENT || 
				cid == ZaAppViewMgr.C_TOOLBAR_TOP  ) {
				// make sure we fit the component that's current
				var elements = this._views[this._currentView];
				comp = elements[cid];
			}
			if (comp && (comp.getZIndex() != Dwt.Z_HIDDEN)) {
                /*
                var y =  contBds.y ;
                var h =  contBds.height ;
                if (AjxEnv.isIE && (!this._isAdvancedSearchBuilderDisplayed)) {
                    //bug  22173: IE hacking. Seems that the banner image size screw the height in IE. Maybe a small banner image on IE is the final solution?
                    //Also the advanced Search Builder expand/collapse will also affect the display behavior. WEIRD! 
                    if ( cid == ZaAppViewMgr.C_TREE )  {
                        y += 8 ;
                        h -= 5 ;
                    }else if ( cid == ZaAppViewMgr.C_CURRENT_APP ) {
                        y += 5 ;
                    }
                }*/
				try {
                	comp.setBounds(contBds.x, contBds.y, contBds.width, contBds.height);
				} catch (ex) {
					ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaAppViewMgr.prototype._stickToGrid", nul, false);
				}
                this._contBounds[cid] = contBds;

				//call the components resizeListener to rearrange the component layout
				if (comp._resizeListener) {
					comp._resizeListener();
				}
			}
		}
	}
	//this._debugShowMetrics(components);
}

ZaAppViewMgr._getBounds =
function (contEl, cid) {
    var bounds = Dwt.getBounds(contEl);
    if (cid == ZaAppViewMgr.C_TREE ||
        cid == ZaAppViewMgr.C_APP_CONTENT ||
        cid == ZaAppViewMgr.C_TOOL
        ) {
        // consider the border issues
        // TODO get border value by js
        bounds.x = bounds.x + 1;
        bounds.width = bounds.width > 2 ? (bounds.width - 2) : bounds.width;
    }
    return bounds;
}

// Removes a view from the hidden stack.
ZaAppViewMgr.prototype._removeFromHidden =
function(view) {
	var newHidden = new Array();
	for (var i = 0; i < this._hidden.length; i++)
		if (this._hidden[i] != view)
			newHidden.push(this._hidden[i]);
	this._hidden = newHidden;
}

// Listeners

// Handles shell resizing event.
ZaAppViewMgr.prototype._shellControlListener =
function(ev) {
	if (ev.oldWidth != ev.newWidth || ev.oldHeight != ev.newHeight) {
		this._shellSz.x = ev.newWidth;
		this._shellSz.y = ev.newHeight;
		var deltaWidth = ev.newWidth - ev.oldWidth;
		var deltaHeight = ev.newHeight - ev.oldHeight;
		DBG.println(AjxDebug.DBG1, "shell control event: dW = " + deltaWidth + ", dH = " + deltaHeight);
		if (this._isNewWindow) {
			
			//reset the tab group's tab size
			var tabs = this._views[this._currentView][ZaAppViewMgr.C_APP_TABS] ;
			if (tabs) 
				tabs.setSize(ev.newWidth, Dwt.DEFAULT);
				
			// reset width of top toolbar
			var topToolbar = this._views[this._currentView][ZaAppViewMgr.C_TOOLBAR_TOP];
			if (topToolbar)
				topToolbar.setSize(ev.newWidth, Dwt.DEFAULT);
				
				
			// make sure to remove height of top toolbar for height of app content
			var appContent = this._views[this._currentView][ZaAppViewMgr.C_APP_CONTENT];
			if (appContent)
				appContent.setSize(ev.newWidth, ev.newHeight - topToolbar.getH());
			
		} else {
			if (deltaHeight) {
				var list = [ZaAppViewMgr.C_APP_CHOOSER, ZaAppViewMgr.C_SASH, ZaAppViewMgr.C_APP_CONTENT,ZaAppViewMgr.C_TREE/*, ZaAppViewMgr.C_STATUS*/];
				list = [
		            ZaAppViewMgr.C_TREE_TOP	,
		            ZaAppViewMgr.C_TREE	,
		            ZaAppViewMgr.C_TREE_FOOTER ,
		
		            ZaAppViewMgr.C_APP_HEADER,
		            ZaAppViewMgr.C_APP_CONTENT,
		            ZaAppViewMgr.C_APP_FOOTER,
		
		            ZaAppViewMgr.C_TOOL_HEADER ,
		            ZaAppViewMgr.C_TOOL ,
		            ZaAppViewMgr.C_TOOL_FOOTER
		            ];
				this._stickToGrid(list);
			}
			if (deltaWidth) {
				var list = [ZaAppViewMgr.C_BANNER, ZaAppViewMgr.C_APP_TABS, ZaAppViewMgr.C_LOGIN_MESSAGE,
							ZaAppViewMgr.C_TOOLBAR_TOP, ZaAppViewMgr.C_APP_CONTENT, 
							ZaAppViewMgr.C_SEARCH,
							ZaAppViewMgr.C_SEARCH_BUILDER, ZaAppViewMgr.C_SEARCH_BUILDER_TOOLBAR, ZaAppViewMgr.C_SEARCH_BUILDER_SASH];
				list = [
				        ZaAppViewMgr.C_BANNER,
				        ZaAppViewMgr.C_SEARCH,
	
				        ZaAppViewMgr.C_APP_HEADER,
				        ZaAppViewMgr.C_APP_CONTENT,
				        ZaAppViewMgr.C_APP_FOOTER,
	
				        ZaAppViewMgr.C_TOOL_HEADER ,
				        ZaAppViewMgr.C_TOOL ,
				        ZaAppViewMgr.C_TOOL_FOOTER
				        ];
				this._stickToGrid(list);
			}
		}
	}
}


// Makes elements visible/hidden by locating them off- or onscreen and setting
// their z-index.
ZaAppViewMgr.prototype._setViewVisible =
function(viewId, show) {
	var elements = this._views[viewId];
	if (show) {
		var list = new Array();
		for (var cid in elements) {
			list.push(cid);
			elements[cid].zShow(true);
		}
		this._stickToGrid(list);
        this._setCurrentBar(viewId);
	} else {
		for (var cid in elements) {
			elements[cid].setLocation(Dwt.LOC_NOWHERE, Dwt.LOC_NOWHERE);
			elements[cid].zShow(false);
		}
	}
}

ZaAppViewMgr.prototype._setTitle =
function(viewId) {
	var elements = this._views[viewId];
	var content = elements[ZaAppViewMgr.C_APP_CONTENT];
	var title = "" ;
	if (content && content.getTitle) {
		title = content.getTitle();
		if(this._components[ZaAppViewMgr.C_CURRENT_APP] && this._components[ZaAppViewMgr.C_CURRENT_APP].setCurrentAppLabel ) {
			this._components[ZaAppViewMgr.C_CURRENT_APP].setCurrentAppLabel (title);		
		}
		Dwt.setTitle(title ? ZabMsg.zimbraTitle + ": " + title : ZabMsg.zimbraTitle);
	}
}

ZaAppViewMgr.prototype._setCurrentBar =
function(viewId) {
    var view = this.getViewContentById(viewId);
    var viewController = ZaApp.getInstance().getControllerById(viewId);
	var popUpOperations = "" ;

    var typeImg = "";
	if (viewController && viewController.getPopUpOperation) {
        popUpOperations = viewController.getPopUpOperation();
	}

    if (view && view.getBarImage) {
        typeImg = view.getBarImage();
    }
    if(this._components[ZaAppViewMgr.C_APP_HEADER]) {
        if (this._components[ZaAppViewMgr.C_APP_HEADER].updateMenu)
		    this._components[ZaAppViewMgr.C_APP_HEADER].updateMenu (popUpOperations, viewController._popupOrder);
        if (this._components[ZaAppViewMgr.C_APP_HEADER].setTypeImg && typeImg)
            this._components[ZaAppViewMgr.C_APP_HEADER].setTypeImg(typeImg);

        var appBarOperations = [];
        if (viewController && viewController.getAppBarAction) {
           appBarOperations = viewController.getAppBarAction();
        }

        var appBarOrder = [];

        if (viewController && viewController.getAppBarOrder)
            appBarOrder = viewController.getAppBarOrder();

        if (this._components[ZaAppViewMgr.C_APP_HEADER].setActionButton)
            this._components[ZaAppViewMgr.C_APP_HEADER].setActionButton(appBarOperations, appBarOrder);
	}
}

// Handles app/tree movement. If you move the sash beyond the max or min width,
// pins to the respective width.
ZaAppViewMgr.prototype._appTreeSashCallback =
function(delta) {
	if (!window.skin) { return; }

	// ask skin for width of tree, rather than hard-coding name of tree div here
	var currentWidth = skin.getTreeWidth();
	if (!currentWidth) { return 0; }

	//DBG.println(AjxDebug.DBG3, "************ sash callback **************");
	//DBG.println(AjxDebug.DBG3, "delta = " + delta);
	//DBG.println(AjxDebug.DBG3, "shell width = " + this._shellSz.x);
	//DBG.println(AjxDebug.DBG3, "current width = " + currentWidth);

	// MOW: get the min/max sizes from the skin.hints
	if (!this.treeMinSize) {
		this.treeMinSize = window.skin.hints.tree.minWidth || 150;
		this.treeMaxSize = window.skin.hints.tree.maxWidth || 300;
	}

	// pin the resize to the minimum and maximum allowable
	if (currentWidth + delta > this.treeMaxSize) {
		delta = Math.max(0, this.treeMaxSize - currentWidth);
	}
	if (currentWidth + delta < this.treeMinSize) {
		delta = Math.min(0, this.treeMinSize - currentWidth);
	}

	// tell skin to resize the tree to keep the separation of tree/skin clean
	var newTreeWidth = currentWidth + delta;

	skin.setTreeWidth(newTreeWidth);

	// call fitAll() on timeout, so we dont get into a problem w/ sash movement code
	var me = this;
	setTimeout(function(){me.fitAll(true)},0);
	return delta;
};


ZaAppViewMgr.prototype._sbAppSashCallback = function(delta) {
	if (!window.skin) {
           return;
        }
 
        var currentHeight = skin.getSBHeight();
        if (!currentHeight){
           return 0;
        }
        
        if (!this.sbMinSize){
           this.sbMinSize = window.skin.hints.searchBuilder.minHeight || 50;
           this.sbMoveSize = currentHeight; //record the orginal height, the search builder is not allowed to big than its original height; 
        }
        
        if (currentHeight + delta > this.sbMoveSize){
            return 0;
        }

        if (currentHeight + delta < this.sbMinSize){
            delta = Math.min (0, this.sbMinSize - currentHeight);
        }

        var newSBHeight = currentHeight + delta; 
        skin.setSBHeight(newSBHeight);
        var me = this;
        setTimeout(function(){me.fitAll(true)}, 0);
        return delta;
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaLoginDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

ZaLoginDialog = function(parent, zIndex, className, appCtxt) {
    className = className || "LoginScreen";
    DwtComposite.call(this, {parent:parent, className:className, posStyle:DwtControl.ABSOLUTE_STYLE});

    this._zimbraAdminLoginURL = ZaZimbraAdmin.zimbraAdminLoginURL;

    this._origClassName = className;
    this._xparentClassName = className + "-Transparent";
    this.setBounds(0, 0, "100%", "100%");
    var htmlElement = this.getHtmlElement();
    htmlElement.style.zIndex = Dwt.Z_DIALOG + 1; //login screen covers all dialogs and error messages
    htmlElement.className = className;
    this.setVisible(false);
    
    //license expiration warning won't show before login.
	//var licenseStatus = ZaZimbraAdmin.getLicenseStatus();
	var params = ZLoginFactory.copyDefaultParams(ZaMsg);
	params.showPanelBorder = true;
	params.showForm = true;
	params.showUserField = true;
	params.showPasswordField = true;
	//params.showLicenseMsg = licenseStatus.licenseExists;
	//params.licenseMsg = licenseStatus.message;
	params.showRememberMeCheckbox = false;
	params.showLogOff = true;
	params.logOffAction = "ZaLoginDialog._loginDiffListener()";
	params.loginAction = "ZaLoginDialog._loginListener(this)";
	params.showButton = true;
    params.companyURL = ZaAppCtxt.getLogoURI () ;
    params.copyrightText = ZaItem.getSplashScreenCopyright();
    params.clientLevelNotice = ZabMsg.clientLevelNotice ? ZabMsg.clientLevelNotice :"";
    var html = ZLoginFactory.getLoginDialogHTML(params);
	this.setContent(html);
}

ZaLoginDialog.prototype = new DwtComposite;
ZaLoginDialog.prototype.constructor = ZaLoginDialog;
ZaLoginDialog.prototype.toString = 
function() {
	return "ZaLoginDialog";
}

ZaLoginDialog.prototype.getLoginURL = function () {
    var soapDoc = AjxSoapDoc.create("GetDomainInfoRequest", ZaZimbraAdmin.URN, null);
	var elBy = soapDoc.set("domain", location.hostname);
	elBy.setAttribute("by", "virtualHostname");

	var params = new Object();
	params.soapDoc = soapDoc;
    params.noAuthToken = true ;
    var reqMgrParams = {
		//controller: ZaApp.getInstance().getCurrentController()
	}
	var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.GetDomainInfoResponse;
    var obj = {};
    ZaItem.prototype.initFromJS.call(obj, resp.domain[0]);
    return obj.attrs["zimbraAdminConsoleLoginURL"] ;
}

ZaLoginDialog.prototype.registerCallback =
function(func, obj) {
	this._callback = new AjxCallback(obj, func);
}

ZaLoginDialog.prototype.clearPassword =
function() {
	ZLoginFactory.get(ZLoginFactory.PASSWORD_ID).value = "";
}

ZaLoginDialog.prototype.showNewPasswordFields = function () {
	ZLoginFactory.showNewPasswordFields();
}

ZaLoginDialog.prototype.hideNewPasswordFields = function () {
	ZLoginFactory.hideNewPasswordFields();
}

ZaLoginDialog.prototype.enableUnameField = function () {
    ZLoginFactory.get(ZLoginFactory.USER_ID).disabled = false;
}

ZaLoginDialog.prototype.disableUnameField = function () {
	ZLoginFactory.get(ZLoginFactory.USER_ID).disabled = true;
}

ZaLoginDialog.prototype.enablePasswordField = function () {
    ZLoginFactory.get(ZLoginFactory.PASSWORD_ID).disabled = false;
}

ZaLoginDialog.prototype.disablePasswordField = function () {
	ZLoginFactory.get(ZLoginFactory.PASSWORD_ID).disabled = true;
}

ZaLoginDialog.prototype.setError =
function(errorStr) {
	if(errorStr)
		ZLoginFactory.showErrorMsg(errorStr);
}

ZaLoginDialog.prototype.clearError = 
function () {
	ZLoginFactory.hideErrorMsg();
}

ZaLoginDialog.prototype.setFocus =
function(username) {
	ZLoginFactory.showUserField(username);
 }

ZaLoginDialog.prototype.setVisible = 
function(visible, transparentBg) {
	DwtComposite.prototype.setVisible.call(this, visible);
    //redirect to zimbraAdminConsoleLoginURL
    if (visible && this._zimbraAdminLoginURL != null && this._zimbraAdminLoginURL.length > 0) {
        if (window.onbeforeunload != null) {
            ZaZimbraAdmin.setOnbeforeunload(ZaZimbraAdmin._confirmAuthInvalidExitMethod);
        }
        
        location.replace(this._zimbraAdminLoginURL);
        return ;
    }

	for (var i = 0; i < ZLoginFactory.TAB_ORDER.length; i++) {
		var element = document.getElementById(ZLoginFactory.TAB_ORDER[i]);
		if (visible && element) {
			Dwt.associateElementWithObject(element, this);
		} else if(element) {
			Dwt.disassociateElementFromObject(null, this);
		}
	}

	if(visible) {
		if (AjxEnv.isIE) {
			var el = ZLoginFactory.getLoginPanel();
			/*
 			 *Bug fix 54362
			 * There are two named "loginForm" one is LoginDialog,
			 * the other one is "Splash Screen" for they shared the same 
			 * Html generation function 			
			 */
			var loginEl = this.getHtmlElement();
			for(var i = 0; i < el.length; i++){
				if(Dwt.contains(loginEl, el[i]))
					el[i]["onkeydown"] = ZLoginFactory.handleKeyPress;
			}
		} else {
			window["onkeypress"] = ZLoginFactory.handleKeyPress;
		}
		//set the focus on the user name field
		var userIdEl = ZLoginFactory.get(ZLoginFactory.USER_ID);
		if(!userIdEl.disabled)
			userIdEl.focus();		
	}
}

ZaLoginDialog.prototype.addChild =
function(child, childHtmlElement) {
    this._children.add(child);
}

ZaLoginDialog.prototype._loginSelListener =
function() {
	var username = AjxStringUtil.htmlEncode(ZLoginFactory.get(ZLoginFactory.USER_ID).value);
	if (!(username && username.length)) {
		this.setError(ZaMsg.enterUsername);
		return;
	}
	if (this._callback) {
		var password = ZLoginFactory.get(ZLoginFactory.PASSWORD_ID).value;
		var newPassword = "";
		var confPassword = "";
		var twoFactorCode = "";
		var trustedDevice = false;
		if(ZLoginFactory.isShown(ZLoginFactory.NEW_PASSWORD_ID) && ZLoginFactory.isShown(ZLoginFactory.PASSWORD_CONFIRM_ID)) {
			newPassword = ZLoginFactory.get(ZLoginFactory.NEW_PASSWORD_ID).value;
			confPassword = ZLoginFactory.get(ZLoginFactory.PASSWORD_CONFIRM_ID).value; 
		}
		if(ZLoginFactory.isShown(ZLoginFactory.TWO_FACTOR_CODE_FORM)) {
			twoFactorCode = ZLoginFactory.get(ZLoginFactory.TWO_FACTOR_CODE).value;
		}
		if(ZLoginFactory.isShown(ZLoginFactory.TRUST_DEVICE)) {
			trustedDevice = ZLoginFactory.get(ZLoginFactory.TRUST_DEVICE).value;
		}
		
		this._callback.run(username, password, newPassword, confPassword, twoFactorCode, trustedDevice);		
	}
}

ZaLoginDialog._loginListener =
function(target) {
	var element = target;
	while (element) {
		var object = Dwt.getObjectFromElement(element);
		if (object instanceof ZaLoginDialog) {
			object._loginSelListener();
			break;
		}
		element = element.parentNode;
	}
};

ZaLoginDialog._loginDiffListener =
function(ev) {
	ZmZimbraMail.logOff();
};

ZaLoginDialog.prototype.showTwoFactorCode = 
function() {
	ZLoginFactory.showTwoFactorCode();
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class Base class for all Controller classes in ZimbraAdmin UI
* @author Greg Solovyev
* @constructor 
* @see ZaAccountListController
* @see ZaCosListController
* @see ZaDomainListController
* @see ZaXFormViewController
*/
ZaController = function(appCtxt, container,iKeyName) {

    if (arguments.length == 0) return;
    this._evtMgr = new AjxEventMgr();
    /**
    * The name of the current controller. This name is used as a key in {@link #initToolbarMethods}, {@link #setViewMethods} and {@link #initPopupMenuMethods} maps 
    **/    
    this._iKeyName = iKeyName;
    this._appCtxt = appCtxt;
    this._container = container;
    
    this._shell = appCtxt.getShell();
    this._appViews = new Object();   
    this._currentView = null;   
    this._contentView = null; //the view object associated with the current controller instance                         
    
    this._authenticating = false;

    this.initDialogs ();
    
    this.objType = ZaEvent.S_ACCOUNT;
    this._helpURL = ZaController.helpURL;
    this._helpButtonText = ZabMsg.homePage;
       this._popupOperations = new Array();
    this._popupOrder = new Array();
    this._appbarOperation = new Array();
    this._appbarOrder = new Array();
}
ZaController.CLICK_DELAY = 150;
ZaController.prototype.initDialogs = function (refresh) {
    if(ZaApp.getInstance()) {
        this._msgDialog = ZaApp.getInstance().dialogs["msgDialog"];
        this._errorDialog = ZaApp.getInstance().dialogs["errorDialog"];
        this._errorDialog.registerCallback(DwtDialog.OK_BUTTON, this._errorDialogCallback, this);
        this._msgDialog.registerCallback(DwtDialog.OK_BUTTON, this._msgDialogCallback, this);
    }
    this._loginDialog = this._appCtxt.getLoginDialog();
    this._loginDialog.registerCallback(this.loginCallback, this);
}

/**
* A map of funciton references. Functions in this map are called one after another from 
* {@link #_initToolbar} method.
* The functions are called on the current instance of the controller. 
* member of  ZaController
* @see #_initToolbar
**/
ZaController.initToolbarMethods = new Object();
/**
* A map of funciton references. Functions in this map are called one after another from 
* {@link #_initPopupMenu} method.
* The functions are called on the current instance of the controller. 
* member of ZaController
* @see #_initPopupMenu
**/
ZaController.initPopupMenuMethods = new Object();
/**
* A map of funciton references. Functions in this map are called one after another from 
* {@link #_setView} method.
* The functions are called on the current instance of the controller. 
* member of ZaController
* @see #_setView
**/
ZaController.setViewMethods = new Object();

ZaController.changeActionsStateMethods = new Object();

ZaController.saveChangeCheckMethods = new Object();

ZaController.postChangeMethods = new Object();

ZaController.helpURL = ZaUtil.HELP_URL;

// Public methods
ZaController.prototype.toString =
function() {
    return "ZaController";
}


ZaController.prototype.getProgressDialog =
function() {
    if (!ZaApp.getInstance().dialogs["progressDialog"])
        ZaApp.getInstance().dialogs["progressDialog"] = new ZaXProgressDialog(this._appCtxt.getShell(),  "300px", "300px");
    return ZaApp.getInstance().dialogs["progressDialog"];
}

ZaController.prototype.setDirty = 
function (isD) {
    //overwrite this method to disable toolbar buttons, for example, Save button
}

ZaController.prototype.setCurrentView =
function(view) {
    this._currentView = view;
}

ZaController.prototype.getContentViewId =
function () {
    return this._contentView.__internalId ;
}

ZaController.prototype.setEnabled = 
function(enable) {
    //abstract
//    throw new AjxException("This method is abstract", AjxException.UNIMPLEMENTED_METHOD, "ZaController.prototype.setEnabled");    
}

ZaController.prototype.popupErrorDialog = 
function(msg, ex, style)  {
    style = style ? style : DwtMessageDialog.CRITICAL_STYLE;
    this._execFrame = {func: null, args: null, restartOnError: false};
    
    var detailStr = "";
    if(ex != null) {
        if(ex.msg) {
            detailStr += ZaMsg.ERROR_MESSAGE + "  ";
            detailStr += AjxStringUtil.htmlEncode(ex.msg);
            detailStr += "\n";
        }
        if(ex.code) {
            detailStr += ZaMsg.ERROR_CODE + "  ";
            detailStr += ex.code;
            detailStr += "\n";                
        }
        if(ex.method) {
            detailStr += "Method:  ";
            detailStr += ex.method;
            detailStr += "\n";                
        }
        if(ex.detail) {
            detailStr += ZaMsg.ERROR_DETAILS;
            detailStr += ex.detail;
            detailStr += "\n";                
        }
        
        if(!detailStr || detailStr == "") {
            for (var ix in ex) {
                detailStr += ix;
                detailStr += ": ";
                try {
                    detailStr += ex[ix].toString();
                } catch (ex) {
                    //ignore
                }
                detailStr += "\n";
            }
        }
    }
    // popup alert

    if (!this._errorDialog) {
        this._errorDialog = ZaApp.getInstance().dialogs["errorDialog"];
    }

    if (this._errorDialog) {
        this._errorDialog.setMessage(msg, detailStr, style, ZabMsg.zimbraAdminTitle);

        if (!this._errorDialog.isPoppedUp()) {
            this._errorDialog.popup();
        }
    }

}

ZaController.prototype.popupMsgDialog = 
function(msg, noExecReset)  {
    if (!noExecReset)
        this._execFrame = {func: null, args: null, restartOnError: false};
    
    // popup alert
    this._msgDialog.setMessage(msg, DwtMessageDialog.INFO_STYLE, ZabMsg.zimbraAdminTitle);
    if (!this._msgDialog.isPoppedUp()) {
        this._msgDialog.popup();
    }
}


ZaController.prototype.popupWarningDialog = 
function(msg, noExecReset)  {
    if (!noExecReset)
        this._execFrame = {func: null, args: null, restartOnError: false};
    
    // popup alert
    this._msgDialog.setMessage(msg, DwtMessageDialog.WARNING_STYLE, ZabMsg.zimbraAdminTitle);
    if (!this._msgDialog.isPoppedUp()) {
        this._msgDialog.popup();
    }
}
ZaController.prototype.getControllerForView =
function(view) {
//    DBG.println(AjxDebug.DBG1, "*** controller not found for view " + view);
    return this._appCtxt.getAppController();
}

/**
* @param nextViewCtrlr - the controller of the next view
* @param func           - the method to call on the nextViewCtrlr in order to navigate to the next view
* @param params           - arguments to pass to the method specified in func parameter
* Ovewrite this method in order to check if it is OK to leave the current view or 
* perform any actions before a user navigates away from the view.
**/
ZaController.prototype.switchToNextView = 
function (nextViewCtrlr, func, params) {
    var callback = new AjxCallback (nextViewCtrlr, func, params) ;
    callback.run ();
    //func.call(nextViewCtrlr, params);
}

//Private/protected methods

/**
* This method finds an array of function references in {@link ZaController#setViewMethods} map and calls all the functions for the array.
* {@link #_iKeyName} is used to lookup the array of function references in the map.
* @private
**/
ZaController.prototype._setView =
function(entry, openInNewTab, skipRefresh) {
    if (openInNewTab) { //check whether the tab limit exceeds
        var cSize = ZaAppTabGroup._TABS.size () ;
        if (cSize >= ZaAppTabGroup.TAB_LIMIT) {
            this.popupMsgDialog(ZaMsg.too_many_tabs);
            return ;
        }
    }
    //Instrumentation code start
    if(ZaController.setViewMethods[this._iKeyName]) {
        var methods = ZaController.setViewMethods[this._iKeyName];
        var cnt = methods.length;
        for(var i = 0; i < cnt; i++) {
            if(typeof(methods[i]) == "function") {
                try {
                    methods[i].call(this,entry,openInNewTab, skipRefresh);
                } catch (ex) {
                    this._handleException(ex, "ZaController.prototype._setView");
                    break;
                }
            }
        }
    }
    this.changeActionsState();    
    //Instrumentation code end    
}

ZaController.prototype.getMainTab =
function () {
    return ZaApp.getInstance().getTabGroup().getMainTab () ;
}

ZaController.prototype.getSearchTab =
function () {
    return ZaApp.getInstance().getTabGroup().getSearchTab () ;
}

//Listeners for default toolbar buttons (close, save, delete)
/**
* member of ZaController
* @param     ev event object
* handles the Close button click. Returns to the previous view.
**/ 
ZaController.prototype.closeButtonListener =
function(ev, noPopView, func, obj, params) {
    //prompt if the user wants to save the changes
    if (noPopView){
        func.call(obj, params) ;
    }else{
        ZaApp.getInstance().popView();
        //ZaApp.getInstance().getTabGroup().removeCurrentTab(true) ;
    }
}

ZaController.prototype._helpButtonListener =
function() {
    window.open(this._helpURL);
}
/**
* We do the whole schedule/execute thing to give the shell the opportunity to popup its "busy" 
* overlay so that user input is blocked. For example, if a search takes a while to complete, 
* we don't want the user's clicking on the search button to cause it to re-execute repeatedly 
* when the events arrive from the UI. Since the action is executed via win.setTimeout(), it
* must be a leaf action (scheduled actions are executed after the calling code returns to the
* UI loop). You can't schedule something, and then have subsequent code that depends on the 
* scheduled action. 
* @private
**/
ZaController.prototype._showLoginDialog =
function() {
    ZaZimbraAdmin._killSplash();
    this._authenticating = true;
    this._loginDialog.setVisible(true, false);
    try {
        var uname = null; // don't change current display username
        this._loginDialog.setFocus(uname);
    } catch (ex) {
        // something is out of whack... just make the user relogin
        ZaZimbraAdmin.logOff();
    }
}

ZaController.prototype._handleException =
function(ex, method, params, restartOnError, obj) {
    DBG.dumpObj(ex);
    if (ex.code && 
            (ex.code == ZmCsfeException.SVC_AUTH_EXPIRED || 
                ex.code == ZmCsfeException.SVC_AUTH_REQUIRED || 
                ex.code == ZmCsfeException.NO_AUTH_TOKEN ||
                ex.code == ZmCsfeException.AUTH_TOKEN_CHANGED
             )
        ) {
        try {
            ZmCsfeCommand.noAuth = true;
            if (ZaApp.getInstance() != null) 
            {
                var dlgs = ZaApp.getInstance().dialogs;
                for (var dlg in dlgs) {
                    dlgs[dlg].popdown();
                }
            }

            this._execFrame = {obj: obj, func: method, args: params, restartOnError: restartOnError};
            this._loginDialog.registerCallback(this.loginCallback, this);
                /*
                  * Sometimes, users will clear cookie manually, that will cause security issue. see: bug 67427
                  * But in the process of login, we use this exception to popup login dialog if user doesn't 
                  * login. We shouldn't disable the username field in the first soap request if an exception is thrown.
                  */
            if ((!ZaZimbraAdmin.isFirstRequest &&  
                  (ex.code == ZmCsfeException.NO_AUTH_TOKEN ||
                   ex.code == ZmCsfeException.SVC_AUTH_REQUIRED ||
                   ex.code == ZmCsfeException.SVC_AUTH_EXPIRED
                 ))
               ) {
                this._loginDialog.setError(ZaMsg.ERROR_SESSION_EXPIRED);
            }
            this._loginDialog.clearPassword();
            this._showLoginDialog();
        } catch (ex2) {
            if(window.console && window.console.log)
                window.console.log(ex2.code);
        }
    } 
    else 
    {
        this._execFrame = {obj: obj, func: method, args: params, restartOnError: restartOnError};
        if (!this._errorDialog) {
            this._errorDialog = ZaApp.getInstance().dialogs["errorDialog"] ; 
        }
        if (this._errorDialog)
            this._errorDialog.registerCallback(DwtDialog.OK_BUTTON, this._errorDialogCallback, this);
        if(!ex.code) {
            this.popupErrorDialog(ZaMsg.JAVASCRIPT_ERROR + " in method " + method, ex);
        
        } else if(ex.code == ZmCsfeException.EMPTY_RESPONSE) {
            this.popupErrorDialog(ZabMsg.ERROR_ZCS_NOT_RUNNING, ex);
        } else if (ex.code == ZmCsfeException.SOAP_ERROR) {
            this.popupErrorDialog(ZaMsg.SOAP_ERROR, ex);
        } else if (ex.code == ZmCsfeException.NETWORK_ERROR ||
                   ex.code == AjxException.NETWORK_ERROR) {
            this.popupErrorDialog(ZaMsg.NETWORK_ERROR, ex);
        } else if (ex.code ==  ZmCsfeException.SVC_PARSE_ERROR) {
            this.popupErrorDialog(ZaMsg.PARSE_ERROR, ex);
        } else if (ex.code ==  ZmCsfeException.SVC_PERM_DENIED) {
            this.popupErrorDialog(ZaMsg.PERMISSION_DENIED, ex);
        } else if (ex.code == ZmCsfeException.ACCT_NO_SUCH_ACCOUNT) {
            this.popupErrorDialog(ZaMsg.ERROR_NO_SUCH_ACCOUNT, ex);
        } else if (ex.code == ZmCsfeException.NO_SUCH_DISTRIBUTION_LIST) {
            this.popupErrorDialog(ZaMsg.NO_SUCH_DISTRIBUTION_LIST, ex);
        } else if(ex.code == ZmCsfeException.ACCT_EXISTS) {
            this.popupErrorDialog(ZaMsg.ERROR_ACCOUNT_EXISTS, ex);
        } else if(ex.code == ZmCsfeException.ACCT_TOO_MANY_ACCOUNTS) {
            this.popupErrorDialog(ZaMsg.ERROR_TOO_MANY_ACCOUNTS,
                    ex, true);
        } else if(ex.code == ZmCsfeException.VOLUME_NO_SUCH_PATH) {
            this.popupErrorDialog(ZaMsg.ERROR_INVALID_VOLUME_PATH, ex);
        } else if(ex.code == ZmCsfeException.NO_SUCH_VOLUME) {
            this.popupErrorDialog(ZaMsg.ERROR_NO_SUCH_VOLUME, ex);
        } else if (ex.code == ZmCsfeException.CANNOT_CHANGE_VOLUME) {
            this.popupErrorDialog(ZaMsg.ERROR_CANNOT_CHANGE_VOLUME, ex);
        } else if (ex.code == ZmCsfeException.CANNOT_DELETE_VOLUME_IN_USE) {
            this.popupErrorDialog(ZaMsg.CANNOT_DELETE_VOLUME_IN_USE, ex);
        } else if(ex.code == ZmCsfeException.ALREADY_EXISTS) {
            this.popupErrorDialog(ZaMsg.ERROR_VOLUME_ALREADY_EXISTS, ex);
        } else if(ex.code == ZmCsfeException.LICENSE_ERROR) {
            this.popupErrorDialog(ZaMsg.ERROR_LICENSE, ex);
        } else if (ex.code == ZmCsfeException.SVC_INVALID_REQUEST) {
            this.popupErrorDialog(ZaMsg.ERROR_INVALID_REQUEST, ex);
        } else if (ex.code == ZmCsfeException.TOO_MANY_SEARCH_RESULTS) {
            this.popupErrorDialog(ZaMsg.ERROR_TOO_MANY_SEARCH_RESULTS, ex);
        } else if (ex.code == ZmCsfeException.NO_SUCH_DOMAIN) {
            this.popupErrorDialog(ZaMsg.ERROR_NO_SUCH_DOMAIN, ex);
        } else if (ex.code == ZmCsfeException.CSFE_SVC_ERROR || 
                    ex.code == ZmCsfeException.SVC_FAILURE || 
                        (typeof(ex.code) == 'string' && ex.code && ex.code.match(/^(service|account|mail)\./))

                   ) {
            this.popupErrorDialog(ZaMsg.SERVER_ERROR, ex);
        } else if (ex.code == AjxException.INVALID_PARAM){
            this.popupErrorDialog(ZaMsg.ERROR_INVALID_VALUE, ex);
            this._errorDialog._showDetail();
        } else {
            //search for error code
            var gotit = false;
            for(var ix in ZmCsfeException) {
                if(ZmCsfeException[ix] == ex.code) {
                    this.popupErrorDialog(ZaMsg.SERVER_ERROR, ex);
                    gotit = true;
                    break;
                }
            }
            if(!gotit)
                this.popupErrorDialog(ZaMsg.ERROR_UNKNOWN, ex);
        }
    }
}

ZaController.prototype._doAuth =
function(username, password, twoFactorCode, trustedDevice) {
    ZmCsfeCommand.noAuth = true;
    try {
        //hide login dialog
        this._hideLoginDialog();
        //show splash screen
        ZaZimbraAdmin.showSplash(this._shell);
        var callback = new AjxCallback(this, this.authCallback);
        this.auth = new ZaAuthenticate(this._appCtxt);
        this.auth.execute(username, password, callback, twoFactorCode, trustedDevice);
    } catch (ex) {
        if(ex.code == ZmCsfeException.NO_AUTH_TOKEN) {
            throw (ex);
        } else if (ex.code == ZmCsfeException.ACCT_AUTH_FAILED || ex.code == ZmCsfeException.SVC_PERM_DENIED || ex.code == ZmCsfeException.SVC_FAILURE) {
            this._showLoginDialog(false);
            this._loginDialog.setError(ZaMsg.ERROR_AUTH_FAILED);
            return;
        } else if (ex.code == ZmCsfeException.ACCT_CHANGE_PASSWORD) {
            this._showLoginDialog(true);
            this._loginDialog.disablePasswordField(true);
            this._loginDialog.disableUnameField(true);
            this._loginDialog.showNewPasswordFields();
            this._loginDialog.registerCallback(this.changePwdCallback, this);
        } else {
            this._showLoginDialog(false);
            this.popupMsgDialog(ZaMsg.SERVER_ERROR, ex); 
        }
    }
}

ZaController.prototype._hideLoginDialog =
function(clear) {
    this._loginDialog.setVisible(false);
    if(clear) {
        this._loginDialog.setError(null);
        this._loginDialog.clearPassword();
    }
}


/**
* This method is called when we receive AuthResponse
**/
ZaController.prototype.authCallback =
function (resp) {
    //auth request came back
     ZaController.changePwdCommand = null;
    //if login failed - hide splash screen, show login dialog
    if(resp.isException && resp.isException()) {
        var ex = resp.getException();
        if (ex.code == ZmCsfeException.ACCT_AUTH_FAILED || ex.code == ZmCsfeException.SVC_PERM_DENIED || ex.code == ZmCsfeException.SVC_FAILURE)
        {
            this._showLoginDialog(false);
            this._loginDialog.setError(ZaMsg.ERROR_AUTH_FAILED);
            this._loginDialog.clearPassword();
            return;
        } else if (ex.code == ZmCsfeException.ACCT_CHANGE_PASSWORD) {
            this._showLoginDialog(true);
            this._loginDialog.setError(ZaMsg.errorPassChange);
            this._loginDialog.disablePasswordField(true);
            this._loginDialog.disableUnameField(true);
            this._loginDialog.showNewPasswordFields();
            this._loginDialog.registerCallback(this.changePwdCallback, this);
        } else if (ex.code == ZmCsfeException.PASSWORD_RECENTLY_USED ||
            ex.code == ZmCsfeException.PASSWORD_CHANGE_TOO_SOON) {
            this._showLoginDialog(true);
            var msg = ex.code == ZmCsfeException.ACCT_PASS_RECENTLY_USED ? ZaMsg.errorPassRecentlyUsed : (ZaMsg.errorPassChangeTooSoon);
            this._loginDialog.setError(msg);
            this._loginDialog.clearPassword();
            this._loginDialog.setFocus(null);
        } else if (ex.code == ZmCsfeException.PASSWORD_LOCKED) {
            this._showLoginDialog(true);
            // re-enable username and password fields
            this._loginDialog.disablePasswordField(false);
            this._loginDialog.disableUnameField(false);
            this._loginDialog.setError(ZaMsg.errorPassLocked);
        } else if(ex.code == ZmCsfeException.MAINTENANCE_MODE) {
            this._showLoginDialog(false);
            this._loginDialog.setError(ZaMsg.ERROR_ACC_IN_MAINTENANCE_MODE);
            this._loginDialog.clearPassword();
        } else if(ex.code == ZmCsfeException.SVC_AUTH_EXPIRED) {
            this._showLoginDialog(true);
            this._loginDialog.setError(ZaMsg.ERROR_SESSION_EXPIRED);
            this._loginDialog.disableUnameField(true);
            this._loginDialog.clearPassword();
        } else {
            if(this._msgDialog) {
                this.popupMsgDialog(ZaMsg.SERVER_ERROR, ex);
            } else {
                this._showLoginDialog(true);
                //check for a more informative message
                if(ex && this._refreshing && ex.code == ZmCsfeException.SVC_AUTH_REQUIRED) {
                    //do not show error message, we are coming back to admin UI with an expired cookie
                } else if(ex && ex.msg) {
                    this._loginDialog.setError(ZaMsg.SERVER_ERROR + " (" + ex.msg + ")");
                } else {
                    this._loginDialog.setError(ZaMsg.SERVER_ERROR);
                }
            }
        }
    } else {
        //if login succesful hide splash screen, start application
        try {
            var response = resp.getResponse();
            var body = response.Body;
            if (body.AuthResponse && body.AuthResponse.twoFactorAuthRequired && body.AuthResponse.twoFactorAuthRequired._content) {
                this._showLoginDialog(true);
                this._loginDialog.registerCallback(this.loginCallback, this);
                this._loginDialog.clearError();
                this._loginDialog.showTwoFactorCode();
            } else {
                if(body.AuthResponse && body.AuthResponse.csrfToken && 
                    body.AuthResponse.csrfToken._content) {
                    window.csrfToken = body.AuthResponse.csrfToken._content;
                }
                var isAuthTokenPresent = true;
                ZmCsfeCommand.noAuth = false;

                var soapDoc = AjxSoapDoc.create("GetInfoRequest", "urn:zimbraAccount", null);
                var command = new ZmCsfeCommand();
                var params = new Object();
                params.soapDoc = soapDoc;
                params.noSession = true;
                params.noAuthToken = true;
                ZaZimbraAdmin.isFirstRequest = true;
                var resp = command.invoke(params);
                ZaZimbraAdmin.isFirstRequest = false;

                //initialize my rights
                ZaZimbraAdmin.initInfo (resp);

                ZaServerVersionInfo.load();

                //check the user locale settings and reload the message is needed.
                ZaZimbraAdmin.LOCALE_QS = "" ;
                if (ZaZimbraAdmin.LOCALE && (ZaZimbraAdmin.LOCALE != AjxEnv.DEFAULT_LOCALE)) {
                    if (ZaZimbraAdmin.LOCALE != null) {
                        var index = ZaZimbraAdmin.LOCALE.indexOf("_");
                        if (index == -1) {
                            ZaZimbraAdmin.LOCALE_QS = "&language=" + ZaZimbraAdmin.LOCALE;
                        } else {
                            ZaZimbraAdmin.LOCALE_QS = "&language=" + ZaZimbraAdmin.LOCALE.substring(0, index) +
                                    "&country=" + ZaZimbraAdmin.LOCALE.substring(ZaZimbraAdmin.LOCALE.length - 2);
                        }
                    }

                    ZaZimbraAdmin.reload_msg ();
                    this.initDialogs(true) ;  //make sure all the precreated dialogs are also recreated.
                }

                if(ZaZimbraAdmin.isLanguage("ja")){
                    if(ZaAccountXFormView.CONTACT_TAB_ATTRS)
                            ZaAccountXFormView.CONTACT_TAB_ATTRS.push(ZaAccount.A_zimbraPhoneticCompany);

                    if(ZaAccountXFormView.ACCOUNT_NAME_GROUP_ATTRS)
                            ZaAccountXFormView.ACCOUNT_NAME_GROUP_ATTRS.push(ZaAccount.A_zimbraPhoneticFirstName,
                            ZaAccount.A_zimbraPhoneticLastName);
                }

                if(!ZaSettings.initialized) {
                    ZaSettings.init();
                } else {
                    ZaZimbraAdmin._killSplash();
                }

                //Instrumentation code start
                if(ZaAuthenticate.processResponseMethods) {
                    var cnt = ZaAuthenticate.processResponseMethods.length;
                    for(var i = 0; i < cnt; i++) {
                        if(typeof(ZaAuthenticate.processResponseMethods[i]) == "function") {
                            ZaAuthenticate.processResponseMethods[i].call(this,resp);
                        }
                    }
                }
                //Instrumentation code end
                this._hideLoginDialog(true);
                this._appCtxt.getAppController().startup(isAuthTokenPresent);
            }
            
        } catch (ex) {
            this._handleException(ex, "ZaController.prototype.authCallback");
        }
    }
    this._refreshing = false;
}
/*********** Login dialog Callbacks */

ZaController.prototype.loginCallback =
function(uname, password, newPassword, confPassword, twoFactorCode, trustedDevice) {
    //this._schedule(this._doAuth, {username: uname, password: password});
    this._doAuth(uname,password, twoFactorCode, trustedDevice);
}

ZaController.prototype.changePwdCallback =
function(uname, oldPass, newPass, conPass) {
    if (newPass == null || newPass == "" || conPass == null || conPass == "") {
        this._loginDialog.setError(ZaMsg.enterNewPassword);
        return;
    }
    
    if (newPass != conPass) {
        this._loginDialog.setError(ZaMsg.bothNewPasswordsMustMatch);
        return;
    }

    var soapDoc = AjxSoapDoc.create("ChangePasswordRequest", "urn:zimbraAccount");
    var el = soapDoc.set("account", uname);
    el.setAttribute("by", "name");
    soapDoc.set("oldPassword", oldPass);
    soapDoc.set("password", newPass);
    var resp = null;
    try {
        if(ZaController.changePwdCommand)
            return;

        ZaController.changePwdCommand = new ZmCsfeCommand();
        resp = ZaController.changePwdCommand.invoke({soapDoc: soapDoc, noAuthToken: true, ignoreAuthToken: true,  noSession: true}).Body.ChangePasswordResponse;

        if (resp) {
            this._loginDialog.clearError();
             this._loginDialog.enableUnameField();
            this._loginDialog.enablePasswordField();
            this._loginDialog.hideNewPasswordFields();
            ZaZimbraAdmin.showSplash(this._shell);
            var callback = new AjxCallback(this, this.authCallback);
            this.auth = new ZaAuthenticate(this._appCtxt);
            this.auth.execute(uname, newPass, callback);
        }
    } catch (ex) {
        ZaController.changePwdCommand = null;
        //DBG.dumpObj(ex);
        // XXX: for some reason, ZmCsfeException consts are fubar
        if (ex.code == ZmCsfeException.ACCT_PASS_RECENTLY_USED ||
            ex.code == ZmCsfeException.ACCT_PASS_CHANGE_TOO_SOON) {
            var msg = ex.code == ZmCsfeException.ACCT_PASS_RECENTLY_USED
                ? ZaMsg.errorPassRecentlyUsed
                : (ZaMsg.errorPassChangeTooSoon);
            this._loginDialog.setError(msg);
            this._loginDialog.setFocus(null);
        } else if (ex.code == ZmCsfeException.ACCT_PASS_LOCKED)    {
            // re-enable username and password fields
            this._loginDialog.disablePasswordField(false);
            this._loginDialog.disableUnameField(false);
            this._loginDialog.setError(ZaMsg.errorPassLocked);
        } else {
            this._handleException(ex, "ZaController.prototype.changePwdCallback");    
        }
    }
}

/*********** Msg dialog Callbacks */

ZaController.prototype._errorDialogCallback =
function() {
    ZaApp.getInstance().dialogs["errorDialog"].popdown();
    if (this._execFrame) {
        if (this._execFrame.restartOnError && !this._authenticating && this._execFrame.method)
            this._execFrame.method.apply(this, this._execFrame.args);
        this._execFrame = null;
    }
}

ZaController.prototype._msgDialogCallback =
function() {
    this._msgDialog.popdown();
    if (this._execFrame) {
        if (this._execFrame.restartOnError && !this._authenticating)
            this._execFrame.method.apply(this, this._execFrame.args);
        this._execFrame = null;
    }    
}

/**
* This method finds an array of function references in {@link ZaController#initToolbarMethods} map and calls all the functions for the array.
* {@link #_iKeyName} is used to lookup the array of function references in the map.
* @private
**/
ZaController.prototype._initToolbar = function () {
}

/**
* This method finds an array of function references in {@link ZaController#initPopupMenuMethods} map and calls all the functions for the array.
* {@link #_iKeyName} is used to lookup the array of function references in the map.
* @private
**/
ZaController.prototype._initPopupMenu = function () {
    //Instrumentation code start
    if(ZaController.initPopupMenuMethods[this._iKeyName]) {
        var methods = ZaController.initPopupMenuMethods[this._iKeyName];
        var cnt = methods.length;
        for(var i = 0; i < cnt; i++) {
            if(typeof(methods[i]) == "function") {
                try {
                    methods[i].call(this);
                } catch (ex) {
                    this._handleException(ex, "ZaController.prototype._initPopupMenu");
                }
            }
        }
    }    
    //Instrumentation code end
}

ZaController.prototype.closeCnfrmDlg = 
function () {
    if(ZaApp.getInstance().dialogs["confirmMessageDialog"])
        ZaApp.getInstance().dialogs["confirmMessageDialog"].popdown();    
}


ZaController.prototype.closeCnfrmDelDlg = 
function () {
    if(ZaApp.getInstance().dialogs["confirmMessageDialog2"])
        ZaApp.getInstance().dialogs["confirmMessageDialog2"].popdown();    
}
/**
* public getToolBar
* @return reference to the toolbar
**/
ZaController.prototype.getToolBar = 
function () {
    return null;
}

/**
* Adds listener to creation of an ZaAccount 
* @param listener
**/
ZaController.prototype.addCreationListener = 
function(listener) {
    this._evtMgr.addListener(ZaEvent.E_CREATE, listener);
}

/**
* Removes listener to creation of an ZaAccount 
* @param listener
**/
ZaController.prototype.removeCreationListener = 
function(listener) {
    this._evtMgr.removeListener(ZaEvent.E_CREATE, listener);        
}

/**
* Adds listener to removal of an ZaAccount 
* @param listener
**/
ZaController.prototype.addRemovalListener = 
function(listener) {
    this._evtMgr.addListener(ZaEvent.E_REMOVE, listener);
}

/**
* Removes listener to removal of an ZaAccount 
* @param listener
**/
ZaController.prototype.removeRemovalListener = 
function(listener) {
    this._evtMgr.removeListener(ZaEvent.E_REMOVE, listener);        
}

/**
* member of ZaXFormViewController
* Adds listener to modifications in the contained ZaAccount 
* @param listener
**/
ZaController.prototype.addChangeListener = 
function(listener) {
    this._evtMgr.addListener(ZaEvent.E_MODIFY, listener);
}

/**
* member of ZaXFormViewController
* Removes listener to modifications in the controlled ZaAccount 
* @param listener
**/
ZaController.prototype.removeChangeListener = 
function(listener) {
    this._evtMgr.removeListener(ZaEvent.E_MODIFY, listener);        
}

/**
 * Adds listener for search finished event.
 * @param listener
 **/
ZaController.prototype.addSearchListener =
function(listener) {
    this._evtMgr.addListener(ZaEvent.E_SEARCH, listener);
}

/**
 * Removes listeners for search finished event.
 * @param listener
 **/
ZaController.prototype.removeSearchListener =
function(listener) {
    this._evtMgr.removeListener(ZaEvent.E_SEARCH, listener);
}

/**
* member of ZaXFormViewController
*    Private method that notifies listeners that a new object is created
*     @param details
*/
ZaController.prototype.fireCreationEvent =
function(details) {
    try {
        if (this._evtMgr.isListenerRegistered(ZaEvent.E_CREATE)) {
            var evt = new ZaEvent(this.objType);
            evt.set(ZaEvent.E_CREATE, this);
            if(details)
                evt.setDetails(details);
                
            this._evtMgr.notifyListeners(ZaEvent.E_CREATE, evt);
        }
    } catch (ex) {
        this._handleException(ex, "ZaXFormViewController.prototype.fireCreationEvent", details, false);    
    }

}
/**
*    Private method that notifies listeners to that the controlled ZaAccount is (are) removed
*     @param details
*/
ZaController.prototype.fireRemovalEvent =
function(details) {
    try {
        if (this._evtMgr.isListenerRegistered(ZaEvent.E_REMOVE)) {
            var evt = new ZaEvent(this.objType);
            evt.set(ZaEvent.E_REMOVE, this);
            evt.setDetails(details);
            this._evtMgr.notifyListeners(ZaEvent.E_REMOVE, evt);
        }
    } catch (ex) {
        this._handleException(ex, "ZaController.prototype.fireRemovalEvent", details, false);    
    }
}

/**
* member of ZaXFormViewController
*    Method that notifies listeners to that the controlled object is changed
*     @param details {String}
*/
ZaController.prototype.fireChangeEvent =
function(details) {
    try {
        if (this._evtMgr.isListenerRegistered(ZaEvent.E_MODIFY)) {
            var evt = new ZaEvent(this.objType);
            evt.set(ZaEvent.E_MODIFY, this);
            if(details)
                evt.setDetails(details);            
            this._evtMgr.notifyListeners(ZaEvent.E_MODIFY, evt);
        }
    } catch (ex) {
        this._handleException(ex, "ZaXFormViewController.prototype.fireChangeEvent", null, false);    
    }
}

/**
 *    Method that notifies listeners that search is done
 *     @param details
 */
ZaController.prototype.fireSearchEvent =
function(details) {
    try {
        if (this._evtMgr.isListenerRegistered(ZaEvent.E_SEARCH)) {
            var evt = new ZaEvent(this.objType);
            evt.set(ZaEvent.E_SEARCH, this);
            evt.setDetails(details);
            this._evtMgr.notifyListeners(ZaEvent.E_SEARCH, evt);
        }
    } catch (ex) {
        this._handleException(ex, "ZaController.prototype.fireSearchEvent", details, false);
    }
}

//item should be an xform item
ZaController.showTooltip =
function (event, item) {
    var dwtEv = new DwtUiEvent(true);
    dwtEv.setFromDhtmlEvent(event)
    var shell = DwtShell.getShell(window);
    var tooltip = shell.getToolTip();
    tooltip.setContent(item.getInheritedProperty("toolTipContent"));
    tooltip.popup(dwtEv.docX, dwtEv.docY);
}

ZaController.hideTooltip =
function (event) {
    var shell = DwtShell.getShell(window);
    var tooltip = shell.getToolTip();
    tooltip.popdown();
}

ZaController.prototype.selectExistingTabByItemId =
function (itemId, tabConstructor) {
    return false;
}

ZaController.prototype.changeActionsState =
function () {

    if(this.changeAcStateAcId)
        this.changeAcStateAcId = null;
        
    if(this._popupOperations) {
        for(var i in  this._popupOperations) {
            if(this._popupOperations[i] instanceof ZaOperation) {
                this._popupOperations[i].enabled = true;
            }
        }
    }
    
    if(ZaController.changeActionsStateMethods[this._iKeyName]) {
        var methods = ZaController.changeActionsStateMethods[this._iKeyName];
        var cnt = methods.length;
        for(var i = 0; i < cnt; i++) {
            if(typeof(methods[i]) == "function") {
                try {
                    methods[i].call(this);
                } catch (ex) {
                    this._handleException(ex, "ZaController.prototype.changeActionsState");
                }
            }
        }
    }    
    
    if(this._actionMenu && this._popupOperations) {
        for(var i in this._popupOperations) {
            if(this._popupOperations[i] instanceof ZaOperation && !AjxUtil.isEmpty(this._actionMenu.getMenuItem(this._popupOperations[i].id))) {
                this._actionMenu.getMenuItem(this._popupOperations[i].id).setEnabled(this._popupOperations[i].enabled);
            }
        }                                      
    }
    //enable More Actions Buttons

    // For New UI
    var isCurrentController;
    var currentController = ZaApp.getInstance().getCurrentController();
    if ( currentController && this != currentController) {
        isCurrentController = false;
    } else {
        isCurrentController = true;
    }
    var settingMenu = ZaZimbraAdmin.getInstance().getSettingMenu();
    if (isCurrentController && this._popupOperations && settingMenu) {
        for(var i in this._popupOperations) {
            if(this._popupOperations[i] instanceof ZaOperation && !AjxUtil.isEmpty(settingMenu.getMenuItem(this._popupOperations[i].id))) {
                settingMenu.getMenuItem(this._popupOperations[i].id).setEnabled(this._popupOperations[i].enabled);
            }
        }
    }
}

ZaController.prototype.closeTabsInRemoveList =
function (){
    var tabGroup = ZaApp.getInstance().getTabGroup();
    for (var i=0; i< this._itemsInTabList.length ; i ++) {
        var item = this._itemsInTabList[i];
        tabGroup.removeTab (tabGroup.getTabByItemId(item.id)) ;
        //add the item to the _removeList
        this._removeList.push(item);
    }
    tabGroup.resetTabSizes(true);
}


ZaController.prototype._showAccountsView = function (defaultType, ev, filterQuery) {

    var viewId = null;  
    if(defaultType == ZaItem.DL) {
        viewId=ZaZimbraAdmin._DISTRIBUTION_LISTS_LIST_VIEW;
    } else if (defaultType == ZaItem.RESOURCE){
        viewId=ZaZimbraAdmin._RESOURCE_LIST_VIEW;
    } else if(defaultType == ZaItem.ALIAS) {
        viewId=ZaZimbraAdmin._ALIASES_LIST_VIEW;
    } else {
        viewId=ZaZimbraAdmin._ACCOUNTS_LIST_VIEW;
    }    
    var acctListController = ZaApp.getInstance().getAccountListController(viewId);
    
    var query = "";

    if (defaultType != ZaItem.ALIAS)  { //alias uid has no domain name, we shouldn't add a domain name filter. See bug 46626, 44799 & 4704 
        if(!ZaSettings.HAVE_MORE_DOMAINS && ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] != 'TRUE') {
        var queryChunks = [];
        var params = {
            asyncMode : true,
            callback : this._showAccountsView.bind(this, defaultType, ev, filterQuery)
        };
        var domainList = ZaApp.getInstance().getDomainList(false, params);
        if (!domainList) {
            return;
        }
        domainList = domainList.getArray();
        //var domainList = [];
        var cnt = domainList.length;
        if(cnt>0) {
            queryChunks.push("(|");
        }
        
        for(var i = 0; i < cnt; i++) {
            queryChunks.push("(zimbraMailDeliveryAddress=*@");
            queryChunks.push(domainList[i].name);
            queryChunks.push(")");
            queryChunks.push("(zimbraMailAlias=*@");
            queryChunks.push(domainList[i].name);
            queryChunks.push(")");
        }
        if(cnt>0) {
            queryChunks.push(")");
            query=queryChunks.join("");
        }
    }
    }

    if(filterQuery) {
        query = query + filterQuery;
    }

    acctListController.setPageNum(1);    
    acctListController.setQuery(query);
    acctListController.setSortOrder("1");
    acctListController.setSortField(ZaAccount.A_name);
    acctListController.setSearchTypes([ZaSearch.TYPES[defaultType]]);
    acctListController.setDefaultType(defaultType);
    if(defaultType == ZaItem.DL) {
        acctListController.setFetchAttrs(ZaDistributionList.searchAttributes);
    } else if (defaultType == ZaItem.RESOURCE){
        acctListController.setFetchAttrs(ZaResource.searchAttributes);
    } else if(defaultType == ZaItem.ALIAS) {
        acctListController.setFetchAttrs(ZaAlias.searchAttributes);
    } else {
        acctListController.setFetchAttrs(ZaSearch.standardAttributes);
    }    
    
    if(ZaApp.getInstance().getCurrentController()) {
        ZaApp.getInstance().getCurrentController().switchToNextView(acctListController, ZaAccountListController.prototype.show, [true, ev.refresh]);
    } else {                    
        acctListController.show(true);
    }
};

ZaController.prototype.cancelBusyOverlay =
function (params) {
    if (this._currentRequest) {
        this._currentRequest.cancel() ;
    }
    ZaApp.getInstance().getAppCtxt().getShell().setBusy(false, params.busyId);    
}

ZaController.prototype.getPopUpOperation =
function() {
    if (this._popupOperations && this._popupOperations.length > 0)
        return  this._popupOperations;
    else
        return "";
}

ZaController.prototype.getPopUpMenu = 
function () {
    if (this._actionMenu != null)
        return this._actionMenu;
    else
        return null;
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaXFormViewController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaXFormViewController base class for all Za***ViewControllers (for XForm views only)
* @extends ZaController
* @contructor 
* @param appCtxt
* @param container
* @param app
* @param iKeyName
* @author Greg Solovyev
* @see ZaAccountViewController
* @see ZaCosController
* @see ZaDomainController
* @see ZaGlobalConfigViewController
**/

ZaXFormViewController = function(appCtxt, container,iKeyName) {
	if (arguments.length == 0) return;
	this._currentObject = null;
	ZaController.call(this, appCtxt, container,iKeyName);
	this.deleteMsg = ZaMsg.Q_DELETE_ACCOUNT;
	this._toolbarOrder = new Array();
}

ZaXFormViewController.prototype = new ZaController();
ZaXFormViewController.prototype.constructor = ZaXFormViewController;

/**
* A stack of validation methods. These methods are called before calling @link ZaXFormViewController.prototype._saveChanges method.
**/
ZaXFormViewController.preSaveValidationMethods = new Object();

ZaXFormViewController.prototype.show = 
function(entry) {
	if (! this.selectExistingTabByItemId(entry.id)){
		this._setView(entry, true);
	}
}

ZaXFormViewController.prototype.handleXFormChange = function (ev) {
	if(ev && ev.form.hasErrors() && this._toolbar) { 
        ZaZimbraAdmin.getInstance().getCurrentAppBar().enableButton(ZaOperation.SAVE, false);
	}
}
/**
* Method that notifies listeners to that the controlled ZaAccount is removed
* @param details {String}
*/
ZaXFormViewController.prototype.fireRemovalEvent =
function(details) {
	try {
		if (this._evtMgr.isListenerRegistered(ZaEvent.E_REMOVE)) {
			var evt = new ZaEvent(this.objType);
			evt.set(ZaEvent.E_REMOVE, this);
			evt.setDetails(details);
			this._evtMgr.notifyListeners(ZaEvent.E_REMOVE, evt);
		}
	} catch (ex) {
		this._handleException(ex, "ZaXFormViewController.prototype.fireRemovalEvent", details, false);	
	}
}

//Listeners for default toolbar buttons (close, save, delete)
/**
* member of ZaXFormViewController
* @param 	ev event object
* 			noPopView - It should be set to true when close a hidden tab
* handles the Close button click. Returns to the list view.
**/ 
ZaXFormViewController.prototype.closeButtonListener =
function(ev, noPopView, func, obj, params, newPath) {
    //prompt if the user wants to save the changes
    if(this._view && this._view.isDirty && this._view.isDirty()) {
        //parameters for the confirmation dialog's callback 
        var args = new Object();
        if (noPopView) {
            args["obj"] = obj ;
            args["params"] = [params, this];
            args["func"] = function(paramList){
                var realParams = paramList[0];
                func.call(this, realParams);
                //use closure to pass 'func', and this == obj, when being called in saveAndGoAway() or discardAndGoAway()
                var xFormViewController = paramList[1];
                //paramList[1] is ZaXFormViewController or its sub class
            };

        }else{
            args["obj"] = ZaApp.getInstance();
            args["params"] = [null, this];
            args["func"] = function(paramList){
                var realParams = paramList[0];
                //TODO have a new framework to handle memory issues
                //ZaApp.prototype.popView.call(this, realParams);
                //this == ZaApp.getInstance(), when being called in saveAndGoAway() or discardAndGoAway()
                var xFormViewController = paramList[1];
                //paramList[1] is ZaXFormViewController or its sub class
                xFormViewController._setSelectionAfterCloseView(newPath);
            };

        }
        //ask if the user wants to save changes
        ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(ZaMsg.Q_SAVE_CHANGES, DwtMessageDialog.INFO_STYLE);
        ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, this.saveAndGoAway, this, args);        
        ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.NO_BUTTON, this.discardAndGoAway, this, args);        
        ZaApp.getInstance().dialogs["confirmMessageDialog"].popup();

    } else if (noPopView){
        func.call(obj, params) ;

    }else{
        if(this._view && this._view._localXForm && this._view.formDirtyLsnr) {
            this._view._localXForm.removeListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE,this._view.formDirtyLsnr);
            this._view._localXForm.removeListener(DwtEvent.XFORMS_VALUE_ERROR,this._view.formDirtyLsnr);
        }
        //this._app.getTabGroup().removeCurrentTab(true) ;
        //ZaApp.getInstance().popView();
        //ZaApp.getInstance().getTabGroup().removeCurrentTab(true) ;

        this._setSelectionAfterCloseView(newPath);
    }
}

ZaXFormViewController.prototype._setSelectionAfterCloseView =
function(newPath) {
    var tree = ZaZimbraAdmin.getInstance().getOverviewPanelController().getOverviewPanel().getFolderTree();
    if (!newPath) {
        var rootItem = tree.getCurrentRootItem();
        var rootPath = tree.getABPath(rootItem.getData("dataItem"));
        var topPath = "";
        var lastLoc = rootPath.lastIndexOf(ZaTree.SEPERATOR);
        if(lastLoc > 0) {
            topPath = rootPath.substring(0,lastLoc);
        }
        newPath = topPath;
    }
	tree.setSelectionByPath(newPath, undefined, undefined, undefined, undefined, undefined, true);
}

/**
* This listener is called when the Delete button is clicked. 
* member of ZaXFormViewController
* @param 	ev event object
**/
ZaXFormViewController.prototype.deleteButtonListener =
function(ev) {
	if(this._currentObject.id) {
		ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(this.deleteMsg, DwtMessageDialog.INFO_STYLE);
		ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, this.deleteAndGoAway, this, null);		
		ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.NO_BUTTON, this.closeCnfrmDlg, this, null);				
		ZaApp.getInstance().dialogs["confirmMessageDialog"].popup();
	} else {
		ZaApp.getInstance().popView();
	}
}

/**
* This method handles "save" button click
* member of ZaXFormViewController
* @param 	ev event object
**/
ZaXFormViewController.prototype.saveButtonListener =
function(ev) {
	try {
		this.validateChanges();
	} catch (ex) {
		this._handleException(ex, "ZaXFormViewController.prototype.saveButtonListener", null, false);
	}
	return;
}

ZaXFormViewController.prototype._saveChanges = function() {
	return true;
}
/**
* member of ZaXFormViewController
* @param params
* This method saves the object in the form and calls method specified in params["func"]
**/
ZaXFormViewController.prototype.saveAndGoAway =
function (params) {
	try {
		this.closeCnfrmDlg();		
		if(this._saveChanges()) {
			this.fireChangeEvent(this._currentObject);			
			params["func"].call(params["obj"], params["params"]);	
			//ZaApp.getInstance().getTabGroup().removeCurrentTab(true) ;
		}
	} catch (ex) {
		this._handleException(ex, ZaXFormViewController.prototype.saveAndGoAway, null, false);
	}
}

/**
* member of ZaXFormViewController
* @param params
* This method deletes the object in the form and closes the form
**/
ZaXFormViewController.prototype.deleteAndGoAway = 
function () {
	try {
		if(this._currentObject.id) {
			this._currentObject.remove();
			this.fireRemovalEvent(this._currentObject);
            var msgName = "";
            switch(this._currentObject.type){
		        case ZaItem.ACCOUNT: msgName = ZaMsg.AccountDeleted ; break ;
                case ZaItem.DOMAIN: msgName = ZaMsg.DomainDeleted ; break ;
		        case ZaItem.RESOURCE: msgName = ZaMsg.ResourceDeleted ; break ;
		        case ZaItem.DL: msgName= ZaMsg.DLDeleted ; break ;
                case ZaItem.COS: msgName = ZaMsg.CosDeleted ; break ;
		        default: msgName = ""; break ;
	        }

            if(msgName) {
                ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(msgName,[this._currentObject.name]));
            }

		}
		this.closeCnfrmDlg();	
		ZaApp.getInstance().popView();		
        var tree = ZaZimbraAdmin.getInstance().getOverviewPanelController().getOverviewPanel().getFolderTree();
        var rootItem = tree.getCurrentRootItem();
        var rootPath = tree.getABPath(rootItem.getData("dataItem"));
        var topPath = "";
        var lastLoc = rootPath.lastIndexOf(ZaTree.SEPERATOR);
        if(lastLoc > 0) {
            topPath = rootPath.substring(0,lastLoc);
        }
        tree.setSelectionByPath(topPath);
	} catch (ex) {
		this.closeCnfrmDlg();	
		this._handleException(ex, "ZaXFormViewController.prototype.deleteAndGoAway", null, false);				
	}
}

/**
* member of ZaXFormViewController
* Leaves current view without saving any changes
**/
ZaXFormViewController.prototype.discardAndGoAway = 
function (params) {
	this.closeCnfrmDlg();
	params["func"].call(params["obj"], params["params"]);		
}


ZaXFormViewController.prototype.runValidationStack = 
function(params) {
	try {
		var cnt = this.validationStack.length;
		if(cnt>0) {
			var method = this.validationStack[cnt-1];
			this.validationStack.pop();
			method.call(this,params);
		} else {
			this._saveChangesCallback(params);
		}
	} catch (ex) {
		this._handleException(ex, "ZaXFormViewController.prototype.runValidationStack", null, false);
	}
}

/**
* @param params - optional, params that contain a callback function 
* that will be called if the user answers "Yes",
* an argument for the callback function,
* and an object on which this function will be called
**/
ZaXFormViewController.prototype.validateChanges =
function (params) {
	//check if we are removing volumes
	this.validationStack = [];
	if(ZaXFormViewController.preSaveValidationMethods[this._iKeyName]) {
		var cnt=ZaXFormViewController.preSaveValidationMethods[this._iKeyName].length;
		if(cnt>0) {
			for(var i=0;i<cnt;i++) {
				this.validationStack.push(ZaXFormViewController.preSaveValidationMethods[this._iKeyName][i]);
			}
		}
	}
	this.runValidationStack(params);
}

/**
* @param params - optional, contains parameters for the next call
**/
ZaXFormViewController.prototype._saveChangesCallback = 
function (params) {
	try {
		if(this._saveChanges()) {
			this._view.setDirty(false);
            ZaZimbraAdmin.getInstance().getCurrentAppBar().enableButton(ZaOperation.SAVE, false);
		
			this.closeCnfrmDlg();

            if (typeof (this.changeActionsState) == "function") { //update the toolbar buttons
                this.changeActionsState ();
            }

			this._currentObject.refresh(false,true);	
			this.fireChangeEvent(this._currentObject);		
			if(params) {
				params["func"].call(params["obj"], params["params"]);
			} else {
				this._view.setObject(this._currentObject);			
			}
		}
	} catch (ex) {
		//if exception thrown - don't go away
		this._handleException(ex, "ZaXFormViewController.prototype._saveChangesCallback", null, false);
	}	
}


/**
* member of ZaXFormViewController
* enables/disables "Save" button on this Form's toolbar
* if there is no Save button, the method just returns
* @param isD {Boolean}
**/
ZaXFormViewController.prototype.setDirty = 
function (isD) {
    var settingMenu = ZaZimbraAdmin.getInstance().getSettingMenu();
    if (!settingMenu ||
        !this._popupOperations ||
        !this._popupOperations[ZaOperation.SAVE] ||
        !this._popupOperations[ZaOperation.SAVE].id)
        return;

    if (!this._popupOperations)
        return;

    if (!this._popupOperations[ZaOperation.SAVE])
        return;

    var saveItem = settingMenu.getMenuItem(this._popupOperations[ZaOperation.SAVE].id)
    if (AjxUtil.isEmpty(saveItem))
        return;

    if(isD)
        saveItem.setEnabled(true);
    else
        saveItem.setEnabled(false);

    if(isD)
        ZaZimbraAdmin.getInstance().getCurrentAppBar().enableButton(ZaOperation.SAVE, true);
    else
        ZaZimbraAdmin.getInstance().getCurrentAppBar().enableButton(ZaOperation.SAVE, false);
}

/**
*	@method setViewMethod 
*	@param entry - data object
*/
ZaXFormViewController.setViewMethod =
function(entry) {
	if(entry.load)
		entry.load();
		
	if(!this._UICreated) {
		this._createUI();
	} 
	ZaApp.getInstance().pushView(this.getContentViewId());
	this._view.setObject(entry); 	//setObject is delayed to be called after pushView in order to avoid jumping of the view	
	this._currentObject = entry;
}

/**
* @method _createUI
**/
ZaXFormViewController.prototype._createUI =
function () {
	this._contentView = this._view = new this.tabConstructor(this._container);

	var elements = new Object();
	elements[ZaAppViewMgr.C_APP_CONTENT] = this._view;

    ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);

	this._UICreated = true;
	ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
}


ZaXFormViewController.prototype._findAlias = function (alias) {
    var types = [ZaSearch.ALIASES,ZaSearch.DLS,ZaSearch.ACCOUNTS, ZaSearch.RESOURCES] ; 
    var searchQuery = new ZaSearchQuery(ZaSearch.searchAliasByNameQuery(alias, types), types, null, false);
	// this search should only return one result
	var results = ZaSearch.searchByQueryHolder(searchQuery, 1, null, null);
	return results.list.getArray()[0];
};

ZaXFormViewController.prototype.getAppBarAction =
function () {
    if (AjxUtil.isEmpty(this._appbarOperation)) {
    	this._appbarOperation[ZaOperation.HELP]=new ZaOperation(ZaOperation.HELP,ZaMsg.TBB_Help, ZaMsg.TBB_Help_tt, "Help", "Help", new AjxListener(this, this._helpButtonListener));
        this._appbarOperation[ZaOperation.SAVE]= new ZaOperation(ZaOperation.SAVE, ZaMsg.TBB_Save, ZaMsg.ALTBB_Save_tt, "", "", new AjxListener(this, this.saveButtonListener));
        this._appbarOperation[ZaOperation.CLOSE] = new ZaOperation(ZaOperation.CLOSE, ZaMsg.TBB_Close, ZaMsg.ALTBB_Close_tt, "", "", new AjxListener(this, this.closeButtonListener));
    }

    return this._appbarOperation;
}

ZaXFormViewController.prototype.getAppBarOrder =
function () {
    if (AjxUtil.isEmpty(this._appbarOrder)) {
    	this._appbarOrder.push(ZaOperation.HELP);
        this._appbarOrder.push(ZaOperation.SAVE);
        this._appbarOrder.push(ZaOperation.CLOSE);
    }

    return this._appbarOrder;
}

ZaXFormViewController.prototype._helpButtonListener =
function() {
	var helpUrl = this._helpURL; 
	if(this._contentView && this._contentView.helpMap && this._contentView.getCurrentTab() && this._contentView.helpMap[this._contentView.getCurrentTab()]) {
		helpUrl = this._contentView.helpMap[this._contentView.getCurrentTab()];
	}
	window.open(helpUrl);
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaListViewController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
 * @class ZaListViewController base class for all Za***ListControllers (for list
 *        views)
 * @extends ZaController
 * @contructor
 * @param appCtxt
 * @param container
 * @param app
 * @param iKeyName
 * @author Greg Solovyev
 * @see ZaAccountListController
 * @see ZDomainListController
 */
ZaListViewController = function(appCtxt, container, iKeyName) {
    if (arguments.length == 0)
        return;
    this._currentPageNum = 1;
    // this.pages = new Object();
    this._currentSortOrder = "1";
    ZaController.call(this, appCtxt, container, iKeyName);
    this.RESULTSPERPAGE = ZaSettings.RESULTSPERPAGE;
    this.MAXSEARCHRESULTS = ZaSettings.MAXSEARCHRESULTS;
}

ZaListViewController.prototype = new ZaController();
ZaListViewController.prototype.constructor = ZaListViewController;

ZaListViewController.prototype._nextPageListener = function(ev) {
    if (this._currentPageNum < this.numPages) {
        this._currentPageNum++;
        this.show();
    }
}

ZaListViewController.prototype._prevPageListener = function(ev) {
    if (this._currentPageNum > 1) {
        this._currentPageNum--;
        /*
         * if(this.pages[this._currentPageNum]) {
         * this.show(this.pages[this._currentPageNum]) } else {
         */
        this.show();
        // }
    }
}

/**
 * @return ZaItemList - the list currently displaid in the list view
 */
ZaListViewController.prototype.getList = function() {
    return this._list;
}

ZaListViewController.prototype._updateUI = function(list, openInNewTab, openInSearchTab, hasMore) {
    if (!this._UICreated) {
        this._createUI(openInNewTab, openInSearchTab);
    }
    if (list) {
        var tmpArr = new Array();
        var cnt = list.getArray().length;
        for (var ix = 0; ix < cnt; ix++) {
            tmpArr.push(list.getArray()[ix]);
        }
        if (cnt < 1) {
            // if the list is empty - go to the previous page
        }
        // add the default column sortable
        this._contentView._bSortAsc = (this._currentSortOrder == "1");
        this._contentView.set(AjxVector.fromArray(tmpArr), this._contentView._defaultColumnSortable);
        this._contentView.setScrollSearchParams(this.scrollSearchParams);
        this._contentView.setScrollHasMore(hasMore);
    }
    this._removeList = new Array();
    this.changeActionsState();

}

ZaListViewController.prototype.closeButtonListener = function(ev, noPopView, func, obj, params) {
    if (noPopView) {
        func.call(obj, params);
    } else {
        ZaApp.getInstance().popView();
    }
    this._UICreated = false;
    if (this._contentView) {
        this._contentView.dispose();
        this._contentView = null;
    }

    if (this._actionMenu) {
        this._actionMenu.dispose();
        this._actionMenu = null;
    }
    this._popupOperations = [];
}

ZaListViewController.prototype.multipleSearchCallback = function(preParams, paramsArr) {
    var sortBy, limit, offset, sortAscending, soapDoc, cnt;
    var paramList = null;
    if (!paramsArr)
        return;
    if (paramsArr instanceof Array && paramsArr.length > 0)
        paramList = paramsArr;
    else {
        paramList = new Array();
        paramList.push(paramsArr);
    }

    cnt = paramList.length;
    soapDoc = AjxSoapDoc.create("BatchRequest", "urn:zimbra");
    soapDoc.setMethodAttribute("onerror", "continue");

    for (var i = 0; i < cnt; i++) {
        var getSearchDirDoc = soapDoc.set("SearchDirectoryRequest", null, null, ZaZimbraAdmin.URN);
        var squery = soapDoc.set("query", paramList[i].query, getSearchDirDoc);

        sortBy = (paramList[i].sortBy != undefined) ? paramList[i].sortBy : ZaAccount.A_name;
        limit = (paramList[i].limit != undefined) ? paramList[i].limit : ZaAccount.RESULTSPERPAGE;
        offset = (paramList[i].offset != undefined) ? paramList[i].offset : "0";
        sortAscending = (paramList[i].sortAscending != null) ? paramList[i].sortAscending : "1";

        getSearchDirDoc.setAttribute("offset", offset);
        getSearchDirDoc.setAttribute("limit", limit);
        getSearchDirDoc.setAttribute("sortBy", sortBy);
        getSearchDirDoc.setAttribute("sortAscending", sortAscending);

        if (paramList[i].applyCos)
            getSearchDirDoc.setAttribute("applyCos", paramList[i].applyCos);
        else
            getSearchDirDoc.setAttribute("applyCos", false);

        if (paramList[i].applyConfig)
            getSearchDirDoc.setAttribute("applyConfig", paramList[i].applyConfig);
        else
            getSearchDirDoc.setAttribute("applyConfig", "false");

        if (paramList[i].domain) {
            getSearchDirDoc.setAttribute("domain", paramList[i].domain);

        }
        if (paramList[i].attrs && paramList[i].attrs.length > 0)
            getSearchDirDoc.setAttribute("attrs", paramList[i].attrs.toString());

        if (paramList[i].types && paramList[i].types.length > 0)
            getSearchDirDoc.setAttribute("types", paramList[i].types.toString());

        if (paramList[i].maxResults) {
            getSearchDirDoc.setAttribute("maxResults", paramList[i].maxResults.toString());
        }

    }

    var params = new Object();
    params.soapDoc = soapDoc;
    var reqMgrParams = {
        controller : this,
        busyMsg : ZaMsg.BUSY_REQUESTING_ACCESS_RIGHTS
    }

    var respObj = ZaRequestMgr.invoke(params, reqMgrParams);
    // Count statistics that will show in search tree
    var resultStats;
    if (respObj.isException && respObj.isException()) {
        ZaApp.getInstance().getCurrentController()._handleException(respObj.getException(),
                "ZaListViewController.prototype.multipleSearchCallback", null, false);
    } else if (respObj.Body.BatchResponse.Fault) {
        var fault = respObj.Body.BatchResponse.Fault;
        if (fault instanceof Array)
            fault = fault[0];

        if (fault) {
            var ex = ZmCsfeCommand.faultToEx(fault);
            ZaApp.getInstance().getCurrentController()._handleException(ex,
                    "ZaListViewController.prototype.multipleSearchCallback", null, false);
        }
    } else {
        var batchResp = respObj.Body.BatchResponse;
        if (batchResp.SearchDirectoryResponse && batchResp.SearchDirectoryResponse instanceof Array) {
            var cnt2 = batchResp.SearchDirectoryResponse.length;
            ZaSearch.TOO_MANY_RESULTS_FLAG = false;
            this._searchTotal = 0;
            this._list = null;
            var hasmore = false;
            for (var i = 0; i < cnt2; i++) {
                resp = batchResp.SearchDirectoryResponse[i];
                var subList = new ZaItemList(preParams.CONS);

                subList.loadFromJS(resp);
                // combine the search results
                if (!this._list)
                    this._list = subList;
                else {
                    if (this._list instanceof ZaItemList && subList.size() > 0) {
                        var listVec = subList.getVector();
                        for (var j = 0; j < listVec.size(); j++) {
                            var item = listVec.get(j);
                            if (!this._list.getVector().contains(item))
                                this._list.add(item);
                        }
                    }
                }
                hasmore = resp.more | hasmore;
                this._searchTotal += resp.searchTotal;
                resultStats = this.getSearchResultStats(resp, resultStats);
            }

            var limit = preParams.limit ? preParams.limit : this.RESULTSPERPAGE;
            this.numPages = Math.ceil(this._searchTotal / preParams.limit);

            if (preParams.show)
                this._show(this._list, preParams.openInNewTab, preParams.openInSearchTab, hasmore,
                        preParams.isShowBubble);
            else
                this._updateUI(this._list, preParams.openInNewTab, preParams.openInSearchTab, hasmore);

        }
    }
    ZaZimbraAdmin.getInstance().getOverviewPanelController().fireSearchEvent(resultStats);
}

ZaListViewController.prototype.getAppBarAction = function() {
    if (AjxUtil.isEmpty(this._appbarOperation)) {
        this._appbarOperation[ZaOperation.HELP] = new ZaOperation(ZaOperation.HELP, ZaMsg.TBB_Help, ZaMsg.TBB_Help_tt,
                "Help", "Help", new AjxListener(this, this._helpButtonListener));
    }

    return this._appbarOperation;
}

ZaListViewController.prototype.getAppBarOrder = function() {
    if (AjxUtil.isEmpty(this._appbarOrder)) {
        this._appbarOrder.push(ZaOperation.HELP);
    }

    return this._appbarOrder;
}

ZaListViewController.prototype.searchCallback = function(params, resp) {
    try {
        if (params.busyId)
            ZaApp.getInstance().getAppCtxt().getShell().setBusy(false, params.busyId);

        if (!resp && !this._currentRequest.cancelled) {
            throw (new AjxException(ZaMsg.ERROR_EMPTY_RESPONSE_ARG, AjxException.UNKNOWN,
                    "ZaListViewController.prototype.searchCallback"));
        }

        var resultStats;
        if (resp && resp.isException() && !this._currentRequest.cancelled) {
            ZaSearch
                    .handleTooManyResultsException(resp.getException(), "ZaListViewController.prototype.searchCallback");
            this._list = new ZaItemList(params.CONS);

            this._searchTotal = 0;
            this.numPages = 0;
            if (params.show)
                this._show(this._list);
            else
                this._updateUI(this._list);
        } else {
            ZaSearch.TOO_MANY_RESULTS_FLAG = false;
            this._list = null;
            var tempList = new ZaItemList(params.CONS);
            this._searchTotal = 0;
            if (resp && !resp.isException()) {
                var response = resp.getResponse().Body.SearchDirectoryResponse;

                this._list = new ZaItemList(params.CONS);

                tempList.loadFromJS(response);
                // filter the search result
                if (params.resultFilter && tempList.size() > 0) {
                    var listVec = tempList.getVector();
                    for (var i = 0; i < listVec.size(); i++) {
                        var item = listVec.get(i);
                        var target = null;
                        if (item.type == ZaItem.ALIAS)
                            target = item.getAliasTargetObj();
                        else
                            target = item;
                        for ( var f in params.resultFilter) {
                            if (target.attrs[f].indexOf(params.resultFilter[f]) >= 0) {
                                this._list.add(item);
                                break;
                            }
                        }

                    }
                } else
                    this._list = tempList;

                this._searchTotal = response.searchTotal;
                var limit = params.limit ? params.limit : this.RESULTSPERPAGE;
                this.numPages = Math.ceil(this._searchTotal / params.limit);
                resultStats = this.getSearchResultStats(response);
            }
            if (params.show)
                this._show(this._list, params.openInNewTab, params.openInSearchTab, response.more, params.isShowBubble);
            else
                this._updateUI(this._list, params.openInNewTab, params.openInSearchTab, response.more);
        }
        ZaZimbraAdmin.getInstance().getOverviewPanelController().fireSearchEvent(resultStats);
    } catch (ex) {
        if (ex.code != ZmCsfeException.MAIL_QUERY_PARSE_ERROR) {
            this._handleException(ex, "ZaListViewController.prototype.searchCallback");
        } else {
            this.popupErrorDialog(ZaMsg.queryParseError, ex);
            if (this._searchField)
                this._searchField.setEnabled(true);
        }
    }
}

/**
 * Get the count statistics of the search result.
 * 
 * @param resp
 *                response
 * @param orig
 *                Optional. The count statics will be added to <code>orig</code>
 *                if it is provided. It is used for batch request.
 */
ZaListViewController.prototype.getSearchResultStats = function(resp, orig) {
    var result = {};
    if (orig) {
        result = orig;
    }

    if (!resp || !resp.searchTotal) {
        return result;
    }

    if (result.searchTotal) {
        result.searchTotal += resp.searchTotal;
    } else {
        result.searchTotal = resp.searchTotal;
    }
    return result;
}

/**
 * @param ev
 *                This listener is invoked by any other controller that can
 *                change an object in this controller
 */
ZaListViewController.prototype.handleChange = function(ev) {
    if (ev && this.objType && ev.type == this.objType) {
        if (ev.getDetails() && this._UICreated) {
            this.show(false);
        }
    }
    ZaZimbraAdmin.getInstance().getOverviewPanelController().refreshRelatedTreeByEdit(ev.getDetails())
}

/**
 * @param ev
 *                This listener is invoked by any other controller that can
 *                create an object in the view controlled by this controller
 */
ZaListViewController.prototype.handleCreation = function(ev) {
    if (ev && this.objType && ev.type == this.objType) {
        if (ev.getDetails() && this._UICreated) {
            this.show(false);
        }
    }
    ZaZimbraAdmin.getInstance().getOverviewPanelController().refreshRelatedTree(ev.getDetails());
}

/**
 * @param ev
 * This listener is invoked by any other controller that can remove an object form the view controlled by this controller
 **/
ZaListViewController.prototype.handleRemoval = function(ev) {
    if (ev && this.objType && ev.type == this.objType) {
        if (ev.getDetails() && this._UICreated) {
            this._currentPageNum = 1; //due to bug 12091, always go back to the first page after the deleting of items.
            this.show(false);
        }
        ZaZimbraAdmin.getInstance().refreshHistoryTreeByDelete(ev.getDetails());
    }
}

ZaListViewController.prototype.setPageNum = function(pgnum) {
    this._currentPageNum = Number(pgnum);
}

ZaListViewController.prototype.getPageNum = function() {
    return this._currentPageNum;
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaItemVector")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class This is a Vector that contains ZaItems. Unlike in AjxVector {AjxVector#contains} and
* {AjxVector#remove} methods compare object ids (@link ZaItem.id) instead of comparing the whole objects.
* {AjxVector#add} method is overwriten to accept only instances of ZaItem class.
* @constructor
**/

ZaItemVector = function() {
	AjxVector.call(this, null);
}

ZaItemVector.prototype = new AjxVector;
ZaItemVector.prototype.constructor = ZaItemVector;

ZaItemVector.prototype.contains = 
function(obj) {
	if(! (obj instanceof ZaItem) ) {
		throw new DwtException("Invalid parameter", DwtException.INTERNAL_ERROR, "ZaItemVector.prototype.add", "ZaItemVector can contain only objects of ZaItem class and classes that extend ZaItem.");
	}
	for (var i = 0; i < this._array.length; i++) {
		if (this._array[i].id == obj.id)
			return true;
	}
	return false;
}

ZaItemVector.prototype.remove = 
function(obj) {
	if(! (obj instanceof ZaItem) ) {
		throw new DwtException("Invalid parameter", DwtException.INTERNAL_ERROR, "ZaItemVector.prototype.add", "ZaItemVector can contain only objects of ZaItem class and classes that extend ZaItem.");
	}
	for (var i = 0; i < this._array.length; i++) {
		if (this._array[i].id == obj.id) {
			this._array.splice(i,1);
			return true;
		}
	}
	return false;
}

ZaItemVector.prototype.replace =
function (obj, index) {
	if(! (obj instanceof ZaItem) ) {
		throw new DwtException("Invalid parameter", DwtException.INTERNAL_ERROR, "ZaItemVector.prototype.replace", "ZaItemVector can contain only objects of ZaItem class and classes that extend ZaItem.");
	}
	
	if (index == null || index < 0 || index >= this._array.length) {
		for (var i = 0; i < this._array.length; i++) {
			if (this._array[i].id == obj.id) {
				this._array.splice(i,1, obj);
				return true;
			}
		}
	}else {
		this._array.splice(index, 1, obj);
	}
	
	//can't find the original item. Do a fresh add
	return this.add (obj);	
}

ZaItemVector.prototype.add =
function(obj, index) {
	// if index is out of bounds, 
	if(! (obj instanceof ZaItem) ) {
		throw new DwtException("Invalid parameter", DwtException.INTERNAL_ERROR, "ZaItemVector.prototype.add", "ZaItemVector can contain only objects of ZaItem class and classes that extend ZaItem.");
	}
	if (index == null || index < 0 || index >= this._array.length) {
		// append object to the end
		this._array.push(obj);
	} else {
		// otherwise, insert object
		this._array.splice(index, 0, obj);
	}
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaItemList")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
 
/**
* @class ZaItemList a list of ZaItem {@link ZaItem} objects.
* @constructor
* @param constructor {Function) a reference to a constructor function which is called to create a single instance of an object contained in the list.
* @param app {ZaApp} {@link ZaApp} a reference to an instance of ZaApp. This reference is passed to constructor when a ZaItem object is constructed.
**/
ZaItemList = function(constructor) {

	//if (arguments.length == 0) return;
	ZaModel.call(this, true);
	if(constructor)
		this._constructor = constructor;

	this.loadedRights = false;
	this._vector = new ZaItemVector();
	this._idHash = new Object();
	this._targetIdHash = new Object();
}

ZaItemList.prototype = new ZaModel;
ZaItemList.prototype.constructor = ZaItemList;

ZaItemList.prototype.toString = 
function() {
	return "ZaItemList";
}

ZaItemList.prototype.replace =
function (item, index) {
	this._vector.replace(item, index);
	if (item.id) {
		this._idHash[item.id] = item;
	}
	if(item.attrs && item.attrs[ZaAlias.A_AliasTargetId]) {
		this._targetIdHash[item.attrs[ZaAlias.A_AliasTargetId]] = item;
	}
		
}

ZaItemList.prototype.replaceItem =
function (item) {
	if (item.id) {
		this._idHash[item.id] = item;
	}
	if(item.attrs && item.attrs[ZaAlias.A_AliasTargetId]) {
		this._targetIdHash[item.attrs[ZaAlias.A_AliasTargetId]] = item;
	}
	
}


/**
* Adds an item to the list.
*
* @param item	the item to add
* @param index	the index at which to add the item (defaults to end of list)
*/
ZaItemList.prototype.add = 
function(item, index) {
	this._vector.add(item, index);
	if (item.id) {
		this._idHash[item.id] = item;
	}
	if(item.attrs && item.attrs[ZaAlias.A_AliasTargetId]) {
		this._targetIdHash[item.attrs[ZaAlias.A_AliasTargetId]] = item;
	}
}

/**
* Removes an item from the list.
*
* @param item	the item to remove
*/
ZaItemList.prototype.remove = 
function(item) {
	this._vector.remove(item);
	if (item.id)
		delete this._idHash[item.id];
		
	if(item.attrs && item.attrs[ZaAlias.A_AliasTargetId] && this._targetIdHash[item.attrs[ZaAlias.A_AliasTargetId]]) {
		 delete this._targetIdHash[item.attrs[ZaAlias.A_AliasTargetId]];
	}
		
}

/**
* Returns the number of items in the list.
*/
ZaItemList.prototype.size = 
function() {
	return this._vector.size();
}

/**
* Returns the list as an array.
*/
ZaItemList.prototype.getArray =
function() {
	return this._vector.getArray();
}

/**
* Returns the list as a ZaItemVector.
*/
ZaItemList.prototype.getVector =
function() {
	return this._vector;
}

/**
* Returns the hash matching IDs to items.
*/
ZaItemList.prototype.getIdHash =
function() {
	return this._idHash;
}

/**
* Returns the item with the given ID.
*
* @param id		an item ID
*/
ZaItemList.prototype.getItemById =
function(id) {
	return this._idHash[id] ? this._idHash[id] : 
		this._targetIdHash[id] ? this._targetIdHash[id] : null;
}

/**
* Clears the list, including its ID hash.
*/
ZaItemList.prototype.clear =
function() {
	this._vector.removeAll();
	for (var id in this._idHash)
		this._idHash[id] = null;
	this._idHash = new Object();

	for (var id in this._targetIdHash)
		this._targetIdHash[id] = null;
	
	this._targetIdHash = null;
}

/**
* Populates the list with elements created from the response to a SOAP command. Each
* node in the response should represent an item of the list's type.
*
* @param respNode	an XML node whose children are item nodes
*/
ZaItemList.prototype.loadFromDom = 
function(respNode) {
	this.clear();
	var nodes = respNode.childNodes;
	for (var i = 0; i < nodes.length; i++) {
		var item;
		if(this._constructor) {
			item = new this._constructor();
		} else {
			item = ZaItem.getFromType(nodes[i].nodeName);
		}
		item.type = nodes[i].nodeName;
		item.initFromDom(nodes[i]);
		//add the list as change listener to the item
		this.add(item);
	}
}

/**
* Populates the list with elements created from the response to a SOAP command. 
* Each property of the resp parameter should contain properties of an item of the list' type.
* @param resp {Object} 
*/
ZaItemList.prototype.loadFromJS =
function(resp) {
	if(!resp)
		return;
	for(var ix in resp) {
		if(resp[ix] instanceof Array) {
			var arr = resp[ix];
			var len = arr.length;
			for(var i = 0; i < len; i++) {
				var item;
				if(this._constructor) {
					item = new this._constructor();
				} else {
					item = ZaItem.getFromType(ix);
				}
				item.type = ix;	
				item.initFromJS(arr[i]);
				
				//special cases
                /*
				if (item instanceof ZaDomain && item.attrs[ZaDomain.A_domainType] == "alias"){
					continue ;
				} */
				if (item instanceof ZaAlias) {
					item.attrs[ZaAlias.A_targetType] = arr[i][ZaAlias.A_targetType] ;
					item.attrs[ZaAlias.A_targetAccount] = arr[i][ZaAlias.A_targetAccount] ;
				}
				
				if(this._idHash[item.id]) {
					this._idHash[item.id].initFromJS(arr[i]);
				} else {
					this.add(item);								
				}
			}
		}  
	}
}

/**
* Grab the IDs out of a list of items, and return them as both a string and a hash.
**/
ZaItemList.prototype._getIds =
function(list) {
	var idHash = new Object();
	if (!(list && list.length))
		return idHash;
	var ids = new Array();
	for (var i = 0; i < list.length; i++) {
		var id = list[i].id;
		if (id) {
			ids.push(id);
			idHash[id] = list[i];
		}
	}
	idHash.string = ids.join(",");
	return idHash;
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaListView
* @constructor ZaListView
* @param parent
* @ className
* @ posStyle
* @ headerList
* Abstract class list views. All the List views in the Admin panel extend this class.
* @author Greg Solovyev
**/

ZaListView = function(params) {
	if (arguments.length == 0) return;
	params = Dwt.getParams(arguments, ZaListView.PARAMS);
	var id = (params.view) ? DwtId.getListViewId(params.view,params.id) : DwtId.getListViewId(params.id);
	params.id = id;
	DwtListView.call(this, params);

	//bug: 18787
	//Set the ListView Div DwtControl.SCROLL(overflow: auto) And the Rows Dwt.VISIBLE
    //In this way, the view of lists can be controlled by the scroll of the li st view
    // At the same time, no list row content will be hidden
    if (params.scrollLoading) {
		Dwt.setHandler(this._getScrollDiv(), DwtEvent.ONSCROLL, ZaListView.handleScroll);
	}

    this.setScrollStyle(DwtControl.SCROLL);
	if (this._listDiv) this._listDiv.style.overflow = "visible";

    this.scrollSearchParams=null;
    this.scrollHasMore=false;
}

ZaListView.PARAMS = ["parent", "className", "posStyle", "headerList", "view", "id", "scrollLoading"];

ZaListView.prototype = new DwtListView;
ZaListView.prototype.constructor = ZaListView;

ZaListView.prototype.toString = 
function() {
	return "ZaListView";
}

ZaListView.ITEM_FLAG_CLICKED = DwtListView._LAST_REASON + 1;

// default implementation
ZaListView.prototype._createItemHtml = function(item) {
	DwtListView.prototype._createItemHtml.call(this,item);
}

ZaListView.prototype.createHeaderHtml = function (defaultColumnSort) {
    DwtListView.prototype.createHeaderHtml.call(this, defaultColumnSort, true);
}

ZaListView.prototype.getTitle =
function () {
	return	"";
}

ZaListView.prototype.getTabToolTip =
function () {
	return	this.getTitle ();
}

ZaListView.prototype.getTabIcon = 
function () {
	return "" ;
}

ZaListView.prototype.getTabTitle =
function () {
	return this.getTitle() ;
}

ZaListView.prototype._mouseOverAction =
function(ev, div) {
	var _type = this._getItemData(div,"type");
	if (_type == DwtListView.TYPE_HEADER_ITEM) {
		if(this._headerList[this._getItemData(div,"index")]._sortable) {
			div.className = "DwtListView-Column DwtListView-ColumnHover";		
			this.setToolTipContent(AjxMessageFormat.format(ZaMsg.LST_ClickToSort_tt, [this._headerList[this._getItemData(div,"index")].getLabel()]));	
		} else {
			this.setToolTipContent(null);
		}
	} else if (_type == DwtListView.TYPE_HEADER_SASH) {
		div.style.cursor = AjxEnv.isIE ? "col-resize" : "e-resize";
    } else if (_type == DwtListView.TYPE_LIST_ITEM){
		var item = this.getItemFromElement(div);
		if (item && item.getToolTip) {
			var tt_content = "" ;
			try {	
				 //if(window.console && window.console.log) console.log("Item: " + item.name) ;
				 tt_content = item.getToolTip() ;
			}catch (e) {
				 tt_content = e.msg ;
			}
			this.setToolTipContent(tt_content);
        }
    }
	return true;
}


ZaListView.prototype._mouseOutAction = 
function(mouseEv, div) {
	var _type = this._getItemData(div,"type");
	if (_type == DwtListView.TYPE_HEADER_ITEM) {
		if(this._headerList[this._getItemData(div,"index")]._sortable) {
			div.className = (div.id != this._currentColId) ? "DwtListView-Column" : "DwtListView-Column DwtListView-ColumnActive"
		}
	}else if (_type == DwtListView.TYPE_HEADER_SASH) {
		div.style.cursor = "auto";
	}
	return true;
}

// Tooltip will be based on cursor
ZaListView.prototype.getTooltipBase =
function (hoverEv) {
    return null;
}

ZaListView.prototype._setListEvent =
function (ev, listEv, clickedEl) {
	DwtListView.prototype._setListEvent.call(this, ev, listEv, clickedEl);
	var parts = ev.target.id.split(DwtId.SEP);
	listEv.field = parts && parts[2];
	return true;
}

ZaListView.prototype._sortColumn = 
function(columnItem, bSortAsc) {
	if (bSortAsc) {
		this._list.sort(ZaItem.compareNamesAsc);
	} else {
    	this._list.sort(ZaItem.compareNamesDesc);
	}
	this.setUI();
}

ZaListView.prototype._setNoResultsHtml =
function () {
	if (ZaSearch.TOO_MANY_RESULTS_FLAG ){
		var htmlArr = new Array(3);
		var idx = 0;
	
		htmlArr[idx++] = "<table width='100%' cellspacing='0' cellpadding='1'><tr><td class='NoResults'><br>";
		htmlArr[idx++] = ZaMsg.TooManyResults;
		htmlArr[idx++] = "</td></tr></table>";
	
		var	div = document.createElement("div");
		div.innerHTML = htmlArr.join("");
		this._addRow(div);
	}else{
		DwtListView.prototype._setNoResultsHtml.call (this) ;
	}
}

ZaListView.prototype._getScrollDiv =
function() {
	return this.getHtmlElement();
};


ZaListView.prototype.setScrollSearchParams=
function(searchParams) {
    this.scrollSearchParams=searchParams;
}

ZaListView.prototype.setScrollHasMore=
function(hasMore) {
    this.scrollHasMore=hasMore;
}

ZaListView._getSearchKeyWord =
function(query) {
	var keyword = "";
	var sw = "zimbraDomainName=*";
        var domflag = "@";
	var ew = "*";
	if(!query) return keyword;
	var start = query.indexOf(sw);
	if(start < 0 || start > query.length-1)
	    return [];
	var end = query.indexOf(ew,start+sw.length);
	if(end > query.length-1)
	    return [];
	keyword = query.substr(start+sw.length,end-start-sw.length);
        // handle the case of "str@str"
        start = keyword.indexOf(domflag);
	if(start < 0 || start > query.length-1)
	    return [keyword];
	return [keyword.substr(start+1,keyword.length),keyword.substr(0,start)];
}

ZaListView.prototype.searchAliasDomain =
function (value, searchCtl,searchQueryList, offset, limit) {
        var busyId = Dwt.getNextId();
        var controller = searchCtl;

        var query = "(" + ZaDomain.A_domainName;
        if(value.length > 0) query += "=" + value[0] + "*)";
        else query = "";

        var callback = new AjxCallback(this, this.searchAliasDomainCallback,
            {busyId:busyId, searchQueryList:searchQueryList, childQueries:value, offset:offset, limit:limit});
        var searchParams = {
                        query: query,
                        types: [ZaSearch.DOMAINS],
                        sortBy: ZaDomain.A_domainName,
                        attrs: [ZaDomain.A_domainName],
                        callback:callback,
                        controller: controller,
                        showBusy:true,
                        busyId:busyId,
                        busyMsg:ZaMsg.BUSY_SEARCHING_DOMAINS,
			skipCallbackIfCancelled:false
        }
        ZaSearch.searchDirectory(searchParams);

}

ZaListView.prototype.searchAliasDomainCallback =
function(params,resp) {

        if(params.busyId)
                   ZaApp.getInstance().getAppCtxt().getShell().setBusy(false, params.busyId);
        try {
                if(!resp) {
                        throw(new AjxException(ZaMsg.ERROR_EMPTY_RESPONSE_ARG, AjxException.UNKNOWN, "ZaListView.searchAliasDomainCallback"));
                }
                if(resp.isException()) {
                        throw(resp.getException());
                } else {
                        var response = resp.getResponse().Body.SearchDirectoryResponse;
			var domainArr = new Array();
                        if (response.domain && response.domain.length > 0) {
                                for (var i =0; i < response.domain.length; i ++) {
                                       var domain = response.domain[i].name ;
						domainArr.push(domain);
                                }

                        }
			this._batchSearchforDomain(domainArr,params.searchQueryList, params.childQueries, params.offset, params.limit);
                }
        } catch (ex) {
		this._handleException(ex, "ZaListView.searchAliasDomainCallback", null, false);
	}

}

ZaListView.prototype._batchSearchforDomain =
function (domainArr, searchQueryList, childQueries, offset, limit) {
	var paramsArr;
    var searchTypes = ZaSearch.ALIASES;
    var searchQuery = "(uid=*";
    if(!childQueries) searchQuery += ")";
    else if(childQueries && !(childQueries instanceof Array)) searchQuery += childQueries + "*)";
    else if(childQueries instanceof Array && childQueries.length == 1) searchQuery += childQueries[0] + "*)";
    else if(childQueries instanceof Array && childQueries.length > 1)  searchQuery += childQueries[1] + ")";

    var controller = ZaApp.getInstance().getSearchListController();

	if(searchQueryList && searchQueryList instanceof Array)
		paramsArr = searchQueryList;
	else paramsArr = new Array();
        var busyId = Dwt.getNextId();
	var inParams = {limit:controller.RESULTSPERPAGE,show:true, openInSearchTab: true,busyId:busyId};
        var callback = new AjxCallback(this, this.searchCallback, inParams);
	for(var i =0; i < domainArr.length; i++) {
	        var searchParams = {
                            offset:offset,
                            limit :limit,
        	                query:searchQuery,
                	        types:searchTypes,
	                        showBusy:true,
        	                busyId:busyId,
	                        busyMsg:ZaMsg.BUSY_SEARCHING,
        	                skipCallbackIfCancelled:false,
	                        sortBy:controller._currentSortField,
        	                attrs:ZaSearch.standardAttributes,
                	        callback:callback,
	                        controller: controller,
        	                domain: domainArr[i]
	        }
		paramsArr.push(searchParams);
	}
	this.multipleSearchCallback(inParams, paramsArr);

}


ZaListView.prototype.multipleSearchCallback =
function(preParams, paramsArr) {
	var sortBy, limit, offset, sortAscending, soapDoc, cnt;
	var paramList = null;
	if(!paramsArr) return;
	if(paramsArr instanceof Array && paramsArr.length > 0)
		paramList = paramsArr;
	else {
		paramList = new Array();
		paramList.push(paramsArr);
	}

	cnt = paramList.length;
	soapDoc = AjxSoapDoc.create("BatchRequest", "urn:zimbra");
	soapDoc.setMethodAttribute("onerror", "continue");

	for(var i = 0; i < cnt; i++) {
		var getSearchDirDoc = soapDoc.set("SearchDirectoryRequest", null, null, ZaZimbraAdmin.URN);
		var squery = soapDoc.set("query", paramList[i].query, getSearchDirDoc);

                sortBy = (paramList[i].sortBy != undefined)? paramList[i].sortBy: ZaAccount.A_name;
                limit = (paramList[i].limit != undefined)? paramList[i].limit: ZaAccount.RESULTSPERPAGE;
                offset = (paramList[i].offset != undefined) ? paramList[i].offset : "0";
                sortAscending = (paramList[i].sortAscending != null)? paramList[i].sortAscending : "1";


                getSearchDirDoc.setAttribute("offset", offset);
                getSearchDirDoc.setAttribute("limit", limit);
                getSearchDirDoc.setAttribute("sortBy", sortBy);
                getSearchDirDoc.setAttribute("sortAscending", sortAscending);

                if(paramList[i].applyCos)
                        getSearchDirDoc.setAttribute("applyCos", paramList[i].applyCos);
                else
                        getSearchDirDoc.setAttribute("applyCos", false);


                if(paramList[i].applyConfig)
                        getSearchDirDoc.setAttribute("applyConfig", paramList[i].applyConfig);
                else
                        getSearchDirDoc.setAttribute("applyConfig", "false");

                if(paramList[i].domain)  {
                        getSearchDirDoc.setAttribute("domain", paramList[i].domain);

                }
                if(paramList[i].attrs && paramList[i].attrs.length>0)
                        getSearchDirDoc.setAttribute("attrs", paramList[i].attrs.toString());

                if(paramList[i].types && paramList[i].types.length>0)
                        getSearchDirDoc.setAttribute("types", paramList[i].types.toString());

                if(paramList[i].maxResults) {
                        getSearchDirDoc.setAttribute("maxResults", paramList[i].maxResults.toString());
                }


	}

	var params = new Object();
	params.soapDoc = soapDoc;
	var reqMgrParams ={
		//controller:this,
		busyMsg:ZaMsg.BUSY_REQUESTING_ACCESS_RIGHTS
	}

	var respObj = ZaRequestMgr.invoke(params, reqMgrParams);
	if(respObj.isException && respObj.isException()) {
		ZaApp.getInstance().getCurrentController()._handleException(respObj.getException(), "ZaListViewController.prototype.multipleSearchCallback", null, false);
	} else if(respObj.Body.BatchResponse.Fault) {
		var fault = respObj.Body.BatchResponse.Fault;
		if(fault instanceof Array)
			fault = fault[0];

		if (fault) {
			var ex = ZmCsfeCommand.faultToEx(fault);
			ZaApp.getInstance().getCurrentController()._handleException(ex,"ZaListViewController.prototype.multipleSearchCallback", null, false);
		}
	} else {
		var batchResp = respObj.Body.BatchResponse;
		if(batchResp.SearchDirectoryResponse && batchResp.SearchDirectoryResponse instanceof Array) {
			var cnt2 = batchResp.SearchDirectoryResponse.length;
			ZaSearch.TOO_MANY_RESULTS_FLAG = false;

            var tempResultList = null;
            var hasmore=false;
            var searchTotal = 0;
			for(var i = 0; i < cnt2; i++) {
				var resp = batchResp.SearchDirectoryResponse[i];
				var subList = new ZaItemList(preParams.CONS);

		        subList.loadFromJS(resp);
				//combine the search results
				if(!tempResultList) tempResultList = subList;
				else {
					if(tempResultList instanceof ZaItemList && subList.size() > 0) {
						var listVec = subList.getVector();
						for(var j = 0; j < listVec.size(); j++) {
							var item = listVec.get(j);
							if(!tempResultList.getVector().contains(item))
								tempResultList.add(item);
						}
					}
				}

				searchTotal +=  (resp.searchTotal ? resp.searchTotal : 0);
                hasmore= resp.more|hasmore;
			}

            if(tempResultList){
                var tmpArr = new Array();
		        var cnt = tempResultList.getArray().length;
		        for(var ix = 0; ix < cnt; ix++) {
                    var flag=false;
                    for (var i = 0; i < this._list.size(); i++) {
		                if (this._list.get(i).id == tempResultList.getArray()[ix].id)
                        {
                            flag=true;
                            break;
                        }
	                }
                    if(!flag)
			        tmpArr.push(tempResultList.getArray()[ix]);
		        }
            }
            this.replenish(AjxVector.fromArray(tmpArr));
            this.setScrollHasMore(hasmore);

            if (this.scrollSearchParams && this.scrollSearchParams.postCallback) {
                this.scrollSearchParams.postCallback.run(searchTotal, hasmore, this.getList());
            }

		}
	}
}



ZaListView.prototype._loadMsg =
function (params) {
		//this.show(null,params);
        var busyId = Dwt.getNextId();
	    var callback = new AjxCallback(this, this.searchCallback, {CONS:null,busyId:busyId});
        var searchParams=this.scrollSearchParams;
        searchParams.offset=params.offset;
        searchParams.limit=params.limit;
        searchParams.callback=callback;
        searchParams.busyId=busyId;

    if(searchParams&&searchParams.scrollType=="isAliasSearch"){
        var searchQueryList = new Array();
        searchQueryList.push(searchParams);
		var keyword = ZaListView._getSearchKeyWord(searchParams.query);
		this.searchAliasDomain(keyword,searchParams.controller,searchQueryList,params.offset,params.limit);
    }
    else{

	    ZaSearch.searchDirectory(searchParams);
    }
}

ZaListView.prototype.searchCallback =
function(params, resp) {
	try {
		if(params.busyId)
			ZaApp.getInstance().getAppCtxt().getShell().setBusy(false, params.busyId);

		if(!resp && !this._currentRequest.cancelled) {
			throw(new AjxException(ZaMsg.ERROR_EMPTY_RESPONSE_ARG, AjxException.UNKNOWN, "ZaListView.prototype.searchCallback"));
		}
		if(resp && resp.isException() && !this._currentRequest.cancelled) {
			ZaSearch.handleTooManyResultsException(resp.getException(), "ZaListView.prototype.searchCallback");
		} else {
			ZaSearch.TOO_MANY_RESULTS_FLAG = false;

            var tempList = new ZaItemList(params.CONS);
            var tempResultList = new ZaItemList(params.CONS);
			var hasmore=false;

			if(resp && !resp.isException()) {
				var response = resp.getResponse().Body.SearchDirectoryResponse;

                tempList.loadFromJS(response);
                // filter the search result
                if(params.resultFilter && tempList.size() > 0) {
                    var listVec = tempList.getVector();
                    for(var i = 0; i < listVec.size(); i++) {
                        var item = listVec.get(i);
                        var target = null;
                        if(item.type == ZaItem.ALIAS)
                            target = item.getAliasTargetObj();
                        else target = item;
                        for (var f in params.resultFilter) {
                            if(target.attrs[f].indexOf(params.resultFilter[f]) >= 0) {
                                tempResultList.add(item);
                                break;
                            }
                        }

                    }
                } else {
                    tempResultList = tempList;
                }
                 hasmore= response.more;

			}
             if(tempResultList){
                var tmpArr = new Array();
		        var cnt = tempResultList.getArray().length;
		        for(var ix = 0; ix < cnt; ix++) {
			        tmpArr.push(tempResultList.getArray()[ix]);
		        }
                this.replenish(AjxVector.fromArray(tmpArr));
                this.setScrollHasMore(hasmore);
                if (this.scrollSearchParams && this.scrollSearchParams.postCallback) {
                    this.scrollSearchParams.postCallback.run(response.searchTotal, response.more, this.getList());
                }
             }

		}
	} catch (ex) {
		if (ex.code != ZmCsfeException.MAIL_QUERY_PARSE_ERROR) {
			this._handleException(ex, "ZaListView.prototype.searchCallback");
		} else {
			this.popupErrorDialog(ZaMsg.queryParseError, ex);
			if(this._searchField)
				this._searchField.setEnabled(true);
		}
	}
}

ZaListView.handleScroll =
function(ev) {

	var target = DwtUiEvent.getTarget(ev);
	var lv = DwtControl.findControl(target);
	if (lv) {
		lv._checkItemCount();
	}

};


ZaListView.prototype._checkItemCount =
function() {
	var itemsNeeded =  this._getItemsNeeded();
	if (itemsNeeded) {
        this.setScrollHasMore(false);
        var params = {
                    offset:this._list.size(),
                    limit:itemsNeeded
				  };;
        this. _loadMsg(params);
	}
};


ZaListView.prototype._getItemsNeeded =
function(skipMoreCheck) {

	if (!skipMoreCheck) {
		if (!this.scrollHasMore || !this._list) { return 0; }
	}

    this._setRowHeight();
    //if (!this._rendered || !this._rowHeight) { return 0; }
     if ( !this._rowHeight) { return 0; }
	DBG.println(AjxDebug.DBG2, "List view: checking item count");

	var sbCallback = new AjxCallback(null, AjxTimedAction.scheduleAction, [new AjxTimedAction(this, this._resetColWidth), 10]);
	var params = {scrollDiv:	this._getScrollDiv(),
				  rowHeight:	this._rowHeight,
				  threshold:	this.getPagelessThreshold(),
				  limit:		this.getLimit(1),
				  listSize:		this._list.size(),
				  sbCallback:	sbCallback};
	return ZaListView.getRowsNeeded(params);
};


ZaListView.getRowsNeeded =
function(params) {
     var div = params.scrollDiv;
	var sh = div.scrollHeight, st = div.scrollTop, rh = params.rowHeight;

	// view (porthole) height - everything measured relative to its top
	// prefer clientHeight since (like scrollHeight) it doesn't include borders
	var h = div.clientHeight || Dwt.getSize(div).y;

	// where we'd like bottom of list view to be (with extra hidden items at bottom)
	var target = h + (params.threshold * rh);

	// where bottom of list view is (including hidden items)
	var bottom = sh - st;

	if (bottom == h) {
		// handle cases where there's no scrollbar, but we have more items (eg tall browser, or replenishment)
		bottom = (params.listSize * rh) - st;
		if (st == 0 && params.sbCallback) {
			// give list view a chance to fix width since it may be getting a scrollbar
			params.sbCallback.run();
		}
	}

	var rowsNeeded = 0;
	if (bottom < target) {
		// buffer below visible bottom of list view is not full
		rowsNeeded = Math.max(Math.floor((target - bottom) / rh), params.limit);
	}
	return rowsNeeded;
};

ZaListView.prototype.getLimit =
function(offset) {
	var limit = ZaSettings.RESULTSPERPAGE;
	return offset ? limit : 2 * limit;

};

ZaListView.prototype.getPagelessThreshold =
function() {
	return Math.ceil(this.getLimit() / 5);
};


ZaListView.prototype.setHeaderList = function(headerList) {
	this._headerList = headerList;
	this.headerColCreated = false;
}

ZaListHeaderItem = function(idPrefix, text, iconInfo, width, sortable, sortField, resizeable, visible) {
	DwtListHeaderItem.call(this, {field:idPrefix, text:text, icon:iconInfo, width:width, sortable:sortable,
								  resizeable:resizeable, visible:visible});
	this._sortField = sortField;	
	this._initialized = false;
}

ZaListHeaderItem.prototype = new DwtListHeaderItem;
ZaListHeaderItem.prototype.constructor = ZaListHeaderItem;


ZaListHeaderItem.prototype.getSortField = 
function() {
	return this._sortField;
}

ZaListHeaderItem.prototype.getLabel = 
function () {
	return this._label;
}


//ZaListView's subclasses can use it to override orginally DwtListView.prototype._handleColHeaderResize(),
//due to in the latter, the header sash will not work well in some cases
ZaListView._handleColHeaderResize =
function(ev) {
	if (!this._headerSash) {
		this._headerSash = document.createElement("div");

		var headerHeight = Dwt.getSize(this._listColDiv).y;
		var thislistViewHeight = this.getSize().y;
		var sashHeight = thislistViewHeight - 4; //make its height shorten a little

		Dwt.setSize(this._headerSash, Dwt.DEFAULT, sashHeight);
		Dwt.setPosition(this._headerSash, Dwt.ABSOLUTE_STYLE);
		Dwt.setZIndex(this._headerSash, Dwt.Z_DND);

		//as this._listDiv's sub node, headerSash will use 'absolute position',
		//setting this._listDiv's position style to relative
		//will make headerSash's position based on it.
		Dwt.setPosition(this._listDiv, Dwt.RELATIVE_STYLE);
		Dwt.setLocation(this._listDiv, 0, 0);
		this._headerSash.className = "DwtListView-ColumnSash";
		this._listDiv.appendChild(this._headerSash);

		//always set the y-position to -headerHeight(based on _listDiv) to align to the header(_listColDiv) not _listColDiv
		var sashY = -headerHeight;
		Dwt.setLocation(this._headerSash, Dwt.DEFAULT, sashY);

		//always remember initial mouse x-position
		this._headerSashX = ev.docX;
	}

	//always update the sash's x-position
	var thislistViewX = Dwt.getLocation(this._listDiv).x;
	var sashX = ev.docX - thislistViewX;

	Dwt.setLocation(this._headerSash, sashX);
};
}
if (AjxPackage.define("zimbraAdmin.common.ZaToolBar")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaToolBar
* @contructor
* generic class that serves the purpose of creating any toolbar in the admin UI
* @param parent parent object
* @param opList array of ZaOperation objects
**/
ZaToolBar = function(parent, opList,btnOrder,posStyle,className, contextId) { 
	if (arguments.length == 0) return;
	className = className || "ZaToolBar";
	posStyle = posStyle || DwtControl.ABSOLUTE_STYLE;

	this._barViewId = contextId;
	DwtToolBar.call(this, {parent:parent, className:className, posStyle:posStyle, id: ZaId.getToolbarId(this._barViewId)});
	this._opList = opList ;
    	this._btnOrder = btnOrder ;
    	this._buttons = new Object(); //all the buttons on the toolbar
    	this.addMoreActions() ;
	this._btnList = new Array();
    	this.init () ;
}

ZaToolBar.VIEW_DATA = "ZaToolBar.VIEW";

ZaToolBar.prototype = new DwtToolBar;
ZaToolBar.prototype.constructor = ZaToolBar;

ZaToolBar.prototype.toString = 
function() {
	return "ZaToolBar";
}

ZaToolBar.prototype.init = function () {
    var opList = this._opList ;
    var btnOrder = this._btnOrder ;
    if(!AjxUtil.isEmpty(btnOrder) && opList) {
		var cnt = btnOrder.length;
		for(var ix = 0; ix < cnt; ix++) {
			if(opList[btnOrder[ix]] && opList[btnOrder[ix]] instanceof ZaOperation) {
				if(opList[btnOrder[ix]].id == ZaOperation.SEP) {
					this._createSeparator();
                } else if (opList[btnOrder[ix]].id == ZaOperation.LEFT_BRACKET) {
                    this._createLeftBracket();
                } else if (opList[btnOrder[ix]].id == ZaOperation.RIGHT_BRACKET) {
                    this._createRightBracket();
				} else if (opList[btnOrder[ix]].id == ZaOperation.NONE) {
					this.addFiller();
				} else if (opList[btnOrder[ix]].id == ZaOperation.LABEL) {
					this._createLabel(opList[btnOrder[ix]].labelId, opList[btnOrder[ix]].imageId, opList[btnOrder[ix]].caption, opList[btnOrder[ix]].disImageId, opList[btnOrder[ix]].tt, true, opList[btnOrder[ix]].className);
				} else {
					this._createButton(opList[btnOrder[ix]].id, opList[btnOrder[ix]].imageId, opList[btnOrder[ix]].caption, opList[btnOrder[ix]].disImageId, opList[btnOrder[ix]].tt, true, opList[btnOrder[ix]].className, opList[btnOrder[ix]].type, opList[btnOrder[ix]].menuOpList);
					
					if(opList[btnOrder[ix]].listener) {
						this.addSelectionListener(opList[btnOrder[ix]].id, opList[btnOrder[ix]].listener);
					}
				}
			}
		}
	} else if(opList) {
		for(var ix in opList) {
			if(opList[ix] instanceof ZaOperation) {
				if(opList[ix].id == ZaOperation.SEP) {
					this._createSeparator();
                } else if (opList[ix].id == ZaOperation.LEFT_BRACKET) {
                    this._createLeftBracket();
                } else if (opList[ix].id == ZaOperation.RIGHT_BRACKET) {
                    this._createRightBracket();
				} else if (opList[ix].id == ZaOperation.NONE) {
					this.addFiller();
				} else if (opList[ix].id == ZaOperation.LABEL) {
					this._createLabel(opList[ix].labelId, opList[ix].imageId, opList[ix].caption, opList[ix].disImageId, opList[ix].tt, true, opList[ix].className);
				} else {
					this._createButton(opList[ix].id, opList[ix].imageId, opList[ix].caption, opList[ix].disImageId, opList[ix].tt, true, opList[ix].className, opList[ix].type, opList[ix].menuOpList);

					this.addSelectionListener(opList[ix].id, opList[ix].listener);
				}
			}
		}
	}
}

ZaToolBar.prototype.addSelectionListener =
function(buttonId, listener) {
	this._buttons[buttonId].addSelectionListener(listener);
}

ZaToolBar.prototype.removeSelectionListener =
function(buttonId, listener) {
	this._buttons[buttonId].removeSelectionListener(listener);
}

ZaToolBar.prototype.getButton =
function(buttonId) {
	return this._buttons[buttonId];
}

ZaToolBar.prototype.setData = 
function(buttonId, key, data) {
	this._buttons[buttonId].setData(key, data);
}

/**
* Enables/disables buttons.
*
* @param ids		a list of button IDs
* @param enabled	whether to enable the buttons
*/
ZaToolBar.prototype.enable =
function(ids, enabled) {
	if (!(ids instanceof Array))
		ids = [ids];
	for (var i = 0; i < ids.length; i++)
		if (this._buttons[ids[i]])
			this._buttons[ids[i]].setEnabled(enabled);
}

ZaToolBar.prototype.enableAll =
function(enabled) {
	for (var i in this._buttons) {
		this._buttons[i].setEnabled(enabled);
	}
}

ZaToolBar.prototype.computeHeight =
function(enabled) {
	var h = 0;
	for (var i in this._buttons) {
		h = Math.max(h, this._buttons[i].getSize().y);
	}
	return h;
}

ZaToolBar.prototype.setSize =
function(width, height) {
	var sz = this.getSize();
	if (width != sz.x || height != sz.y) {
		DwtToolBar.prototype.setSize.apply(this, arguments);
		this._checkSize(width,height);
	}
};

ZaToolBar.prototype._checkSize = function(width, height, hideText, showMoreActions) {
    var hideText = hideText || false ; //default false
    var showMoreActions = showMoreActions || true ; // default true ;
    var moreActionsButton = this._buttons [ZaOperation.MORE_ACTIONS] ;
	var el = this.getHtmlElement();
	if(!el) {
		return;
	}
	
	for (var i in this._buttons) {
		var b = this._buttons[i];
		if (!b) { continue; }		
		//reset text
        if(b._toggleText) {
			b.setText(b._toggleText);
			b._toggleText = null;
		}
        //reset visibility
        if (b == moreActionsButton) {
            b.setVisible(false) ;
        }else{
            b.setVisible (true) ;
        }
	}
    
	var offset = el.firstChild.offsetWidth;
	if(offset > width) {
	        var totalVisibleButtonWidth = this.getAlwaysVisibleButtonWidths () ;
		if (showMoreActions) {
        	    moreActionsButton.setVisible(true) ;
	            totalVisibleButtonWidth += moreActionsButton.getW () ; //more actions button size
        	}

		var btnList = null;
		if(!AjxUtil.isEmpty(this._btnOrder))
			btnList = this._btnOrder;
		else btnList = this._btnList;

		var cnt = btnList.length;
		for(var ix = 0; ix < cnt; ix++) {
                        var b = this._buttons[btnList[ix]];
                        if (!b || !b.getVisible()) { continue; }
                        var text = b.getText();
                        if(text && hideText) {
                                b._toggleText = text;
                                b.setText("");
                        }

                        if (showMoreActions) {
                                var w = b.getW() ;
                                totalVisibleButtonWidth += w ;

                                if (totalVisibleButtonWidth >= width) { //width overflow
                                        if (b != moreActionsButton) {
                                                b.setVisible(false) ; // hide the overflow button
                                        } else {  //more actions button is visible now, we can break
                                                break ;
                                        }
                                }
                        }

                        offset = el.firstChild.offsetWidth;
                        if(offset <= width) {
                                break;
                        }

		}
	}

    //set visiblity and enable the more actions popup menu items
    this.enableMoreActionsMenuItems()  ;
}

ZaToolBar.prototype._createButton =
function(buttonId, imageId, text, disImageId, toolTip, enabled, className, type, menuOpList) {
	if (!className)
		className = "DwtToolbarButton"
	var b = this._buttons[buttonId] = new ZaToolBarButton({
			parent:this, 
			className:className, 
			id:ZaId.getButtonId(this._barViewId,ZaOperation.getStringName(buttonId))
	});
	if (imageId)
		b.setImage(imageId);
	if (text)
		b.setText(text);
	if (toolTip)
		b.setToolTipContent(toolTip);
	b.setEnabled((enabled) ? true : false);
	b.setData("_buttonId", buttonId);

	if (type == ZaOperation.TYPE_MENU) {
		var menu = new ZaPopupMenu(b, null,null, menuOpList, this._barViewId, ZaId.MENU_DROP);
		b.setMenu(menu,true);
	}
	this._btnList.push(buttonId);
	return b;
}


ZaToolBar.prototype._createLabel =
function(buttonId, imageId, text, disImageId, toolTip, enabled, className, style) {

	var b = this._buttons[buttonId] = new ZaToolBarLabel(this, null, className);
	if (imageId)
		b.setImage(imageId);
	if (text)
		b.setText(text);
	if (toolTip)
		b.setToolTipContent(toolTip);
	b.setEnabled((enabled) ? true : false);
	b.setData("_buttonId", buttonId);

	return b;
}
ZaToolBar.prototype._createSeparator =
function() {
	var ctrl = new DwtControl(this);
	var html = ZaToolBar.getSeparatorHtml ();
	ctrl.setContent(html);
}

ZaToolBar.getSeparatorHtml =
function () {
	//return "<table><tr><td class=\"ImgAppToolbarSectionSep\" height=20px width=3px> </td></tr></table>";
	return "<div class=\"vertSep\"/>";
}

ZaToolBar.prototype._createLeftBracket =
function() {
	var ctrl = new DwtControl(this);
	var html = ZaToolBar.getLeftBracketHtml ();
	ctrl.setContent(html);
}

ZaToolBar.getLeftBracketHtml =
function () {
	return "<div class=\"ZaLeftBracket\"/>";
}


ZaToolBar.prototype._createRightBracket =
function() {
	var ctrl = new DwtControl(this);
	var html = ZaToolBar.getRightBracketHtml ();
	ctrl.setContent(html);
}

ZaToolBar.getRightBracketHtml =
function () {
	return "<div class=\"ZaRightBracket\"/>";
}

ZaToolBar.prototype._buttonId =
function(button) {
	return button.getData("_buttonId");
}

/**
 * Insert the "More Operations" button in the toolbar due to the limited size of the toolbar
 * @param index: the position the "More Operations" button should be
 */
ZaToolBar.prototype.addMoreActions =
function () {
    if (AjxUtil.isEmpty (this._btnOrder) || AjxUtil.isEmpty (this._opList)) {
        return ; //no need to add the more actions since there is no action.
    }
    this._moreActionsMenuList = [] ; //the menu list for the More Actions button.
    var index = -1 ;    
    //insert the moreActions button before the ZaOperation.NONE
    for (var i =0; i < this._btnOrder.length; i ++)  {
        if (this._btnOrder [i] == ZaOperation.NONE ) {
            index = i ;
            break ;
        } else if (this._btnOrder[i] == ZaOperation.SEP ||
                   this._btnOrder[i] == ZaOperation.LEFT_BRACKET  ||
                   this._btnOrder[i] == ZaOperation.RIGHT_BRACKET) {//There is no need to show SEP in popup menu
		    continue;
	    } else { //duplicate the operation.
            var op =  this._opList [this._btnOrder [i]] ;
            if (op != null ) {
                this._moreActionsMenuList.push (ZaOperation.duplicate(op)) ;
            }
        }
    }
    this._opList[ZaOperation.MORE_ACTIONS] =
        new ZaOperation(ZaOperation.MORE_ACTIONS, ZaMsg.TBB_MoreActions, ZaMsg.TBB_MoreActions_tt,
                "", "",
                //null, //Need to have popup listener
                new AjxListener(this, this._moreActionsButtonListener),
                ZaOperation.TYPE_MENU,this._moreActionsMenuList );
    this._opList[ZaOperation.MORE_ACTIONS].enabled = false ;
    this._opList[ZaOperation.MORE_ACTIONS].visible = false ;

    if (index == -1) { //there is no ZaOperation.NONE, append at the end of the array
        index =  this._btnOrder.length ;
    }

    this._btnOrder.splice (index, 0, ZaOperation.MORE_ACTIONS) ;
}

/*
 The buttons after ZaOperation.NONE are always visible
 */
ZaToolBar.prototype.getAlwaysVisibleButtonWidths = function () {
    var w = 0 ;
    var isAfterNoneOp = false ;
    for (var i =0; i < this._btnOrder.length; i ++)  {
        var b = this._buttons [this._btnOrder [i]] ;
        if (this._btnOrder [i] == ZaOperation.NONE ) {
            isAfterNoneOp = true ;
        }
        
        /*
         Handle for LABEL, label uses labelid to index, but button uses id.
         */ 
        if (this._btnOrder [i] == ZaOperation.LABEL) { 
            b = this._buttons[ZaOperation.SEARCH_RESULT_COUNT]; 
        }
  
        if (isAfterNoneOp) {
            if (this._btnOrder [i] == ZaOperation.SEP){
               w += 5; // for seperator, we give it a fixed value.
            }

            if (this._btnOrder [i] == ZaOperation.LEFT_BRACKET){
               w += 7; // for seperator, we give it a fixed value.
            }

            if (this._btnOrder [i] == ZaOperation.RIGHT_BRACKET){
               w += 7; // for seperator, we give it a fixed value.
            }

            if (b && b.getVisible()) {
                w += b.getW () ;
            }
        }
     }

    return w ;
}
                    
ZaToolBar.prototype.enableMoreActionsMenuItems = function () {
    var moreActionsButton = this._buttons [ZaOperation.MORE_ACTIONS] ;
    var moreActionMenu ;
    if (moreActionsButton) {
        moreActionMenu = moreActionsButton.getMenu () ;
        moreActionMenu.popdown () ;
    }
    
    if (moreActionsButton && moreActionsButton.getVisible()) {
        for (var i =0; i < this._btnOrder.length; i ++)  {
            var opId = this._btnOrder [i] ;
            if (this._btnOrder [i] == ZaOperation.MORE_ACTIONS) {
                break ;
            }

            var toolbarButton = this._buttons[opId] ;
            if (!toolbarButton) { continue ;} ;
            var visiblity = toolbarButton.getVisible() ;
            var menuItem = moreActionMenu.getMenuItem (opId) ; //menu item operation id is the same as the toolbar button id
            if (menuItem !=null && menuItem != undefined) {
		menuItem.setVisible(!visiblity) ;
            	menuItem.setEnabled (toolbarButton.getEnabled()) ;
        	}
	}
    }
}

ZaToolBar.prototype._moreActionsButtonListener = function (ev) {
    var moreActionsButton = this._buttons [ZaOperation.MORE_ACTIONS] ;
    var moreActionMenu ;
    if (moreActionsButton) {
        moreActionMenu = moreActionsButton.getMenu () ;
        if (moreActionMenu.isPoppedUp()) {
            moreActionMenu.popdown () ;
        } else {
            moreActionsButton.popup() ;
        }
    }
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaToolBarLabel")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Used to create an application tab and its operations, such as new a  tab, 
 * close a tab, edit the tab label.
 * 
 * It will also remember the state of the tab: hidden/shown and dirty/clean.
 * @param parent - the tab group containing all the tabs.
 * 
 * @param params :
 *  	closable - whether the close icon and action should be added
 * 		selected - whether the newly created tab should be selected 
 *		id - the tabId used to identify an unique tab.
 * 		toolTip - the tooltip of the tab
*/

ZaToolBarLabel = function(parent, style, className, posStyle, id, index) {
	if (arguments.length == 0) return ;
	DwtLabel.call(this,parent, style, className, posStyle, id, index);
}

ZaToolBarLabel.prototype = new DwtLabel;
ZaToolBarLabel.prototype.constructor = ZaToolBarLabel;


ZaToolBarLabel.prototype._createHtmlFromTemplate = function(templateId, data) {
    DwtLabel.prototype._createHtmlFromTemplate.call(this, "admin.Widgets#ZaToolBarLabel", data);
};
}
if (AjxPackage.define("zimbraAdmin.common.ZaToolBarButton")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Used to create an application tab and its operations, such as new a  tab, 
 * close a tab, edit the tab label.
 * 
 * It will also remember the state of the tab: hidden/shown and dirty/clean.
 * @param parent - the tab group containing all the tabs.
 * 
 * @param params :
 *  	closable - whether the close icon and action should be added
 * 		selected - whether the newly created tab should be selected 
 *		id - the tabId used to identify an unique tab.
 * 		toolTip - the tooltip of the tab
*/



ZaToolBarButton = function(params) {
        if (arguments.length == 0) return ;
        params = Dwt.getParams(arguments, ZaToolBarButton.PARAMS);
        params.className = params.className || "ZaToolBarButton";
        DwtButton.call(this, params);
}

ZaToolBarButton.PARAMS = ["parent", "style", "className", "posStyle", "actionTiming", "id", "index"];

ZaToolBarButton.prototype = new DwtButton;
ZaToolBarButton.prototype.constructor = DwtButton;


ZaToolBarButton.prototype._createHtml = function() {
    var templateId = "dwt.Widgets#ZToolbarButton";
    var data = { id: this._htmlElId };
    this._createHtmlFromTemplate(templateId, data);
};
}
if (AjxPackage.define("zimbraAdmin.common.ZaOverviewPanel")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only


ZaOverviewPanel = function(params) {
        if (arguments.length == 0) { return; }
	this.overviewId = params.id;
	params.id = ZaId.getOverviewId(ZaId.PANEL_APP);	
        params = Dwt.getParams(arguments, ZaOverviewPanel.PARAMS);
        params.className = params.className || "ZaOverviewPanel";
        DwtComposite.call(this, params);

	this.addControlListener(new AjxListener(this, this._panelControlListener));
	this._createFolderTree();
	this._layout();
}

ZaOverviewPanel.PARAMS = ["parent", "className", "posStyle", "id"];

ZaOverviewPanel.prototype = new DwtComposite();
ZaOverviewPanel.constructor = ZaOverviewPanel;

ZaOverviewPanel._MIN_FOLDERTREE_SIZE = 100;

ZaOverviewPanel.prototype.toString = 
function() {
	return "ZaOverviewPanel";
}

ZaOverviewPanel.prototype.getFolderTree =
function() {
	return this._tree;
}

ZaOverviewPanel.prototype._createFolderTree =
function() {
    this._treePanel = new DwtComposite({
		parent:		this, 
		className:	"OverviewTreePanel", 
		posStyle:	DwtControl.RELATIVE_STYLE,
		id:		ZaId.getTreeId(this.overviewId, this.type)
	});

    this._treePanel.setScrollStyle(Dwt.SCROLL_Y);


    this._tree = new ZaTree({
	parent:		this._treePanel,
	style:		DwtTree.SINGLE_STYLE,
	className:	"OverviewTree" ,
	posStyle:	DwtControl.ABSOLUTE_STYLE,
	id:		ZaId.getTreeId(this.overviewId, DwtTree.SINGLE_STYLE)
    });


}
	
ZaOverviewPanel.prototype._layout =
function() {
	var opSz = this.getSize();
//	opSz.x+=100;
	var h = opSz.y;
//	h = (h > ZaOverviewPanel._MIN_FOLDERTREE_SIZE) ? h : ZaOverviewPanel._MIN_FOLDERTREE_SIZE;
	var w = opSz.x;
	this._treePanel.setBounds(0, 0, w, h);
//	var tfBds = this._treePanel.getBounds();
}

ZaOverviewPanel.prototype._panelControlListener =
function(ev) {
	this._layout();
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaClientCmdHandler")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
* @param app {ZaApp}
**/
ZaClientCmdHandler = function() {
	this._settings = new Object();
}

ZaClientCmdHandler.prototype.execute =
function(argv) {
	if (argv[0] && argv[0].toLowerCase() == "debug") {
		if (!argv[1]) return;
		if (argv[1] == "t") {
			var on = DBG._showTiming;
			var newState = on ? "off" : "on";
			alert("Turning debug timing info " + newState);
			DBG.showTiming(!on);
		} else {
			//var arg = Number(argv[1]);
			var level =argv[1];
			if (level) {
				alert("Setting Debug to level:" + level);
				DBG.setDebugLevel(level);
			} else {
				alert("Invalid debug level");
			}
		}
	} else if (argv[0] && argv[0].toLowerCase() == "domainsrch") {
		ZaDomain.MAXSEARCHRESULTS = argv[1];
		alert("Setting domain search limit to:" + argv[1]);
        ZaApp.getInstance().searchDomains();
    } else if (argv[0] && argv[0].toLowerCase() == "pagesize") {
		ZaSettings.RESULTSPERPAGE = argv[1];
		alert("Setting page size to:" + argv[1]);
    }
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaApp")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaApp
* @constructor ZaApp
* @param appCtxt instance of ZaAppCtxt
* @param container
* @author Greg Solovyev
**/
ZaApp = function(appCtxt, container) {
	if (arguments.length == 0) return;
	this._name = ZaZimbraAdmin.ADMIN_APP;
	this._appCtxt = appCtxt;
	this._appViewMgr = appCtxt.getAppViewMgr();
	this._container = container;
	this._currentController = null;
	this._currentViewId = null;
	this._cosListChoices = null;//new XFormChoices([], XFormChoices.OBJECT_LIST, "id", "name");	
	this._domainListChoices = null;//new XFormChoices([], XFormChoices.OBJECT_LIST, "name", "name");	
	this._serverChoices = null; 
	this._serverIdChoices = null;
	this._serverMap = null;
	this._controllers = new Object();
	this.dialogs = {};
	this._tabGroup = null ;

}
ZaApp.instance = null;
ZaApp.getInstance = function (appCtxt, container) {
	if(!ZaApp.instance) {
	//	console.log("Trying to get ZaApp before it is instantiated") ;
		if(!AjxUtil.isEmpty(appCtxt) && !AjxUtil.isEmpty(container)) {
		//	console.log("Instantiating ZaApp ....") ; 
			ZaApp.instance = new ZaApp(appCtxt, container);
		}
	}
	return ZaApp.instance;
}
ZaApp.prototype.constructor = ZaApp;

ZaApp.prototype.toString = 
function() {
	return "ZaApp";
}

ZaApp.checkMyRight = function(targetType,targetBy,targetVal,right,attrs) {
	var soapDoc = AjxSoapDoc.create("CheckRightRequest", ZaZimbraAdmin.URN, null);
	var elGrantee = soapDoc.set("grantee", ZaZimbraAdmin.currentUserId);
	elGrantee.setAttribute("by","id");
	var elTarget = soapDoc.set("target", targetVal);
	elTarget.setAttribute("type", targetType);
	elTarget.setAttribute("by", targetBy);
	var elRight = soapDoc.set("right", right);
	var cnt = attrs.length;
	if(cnt>0) {
		var elAttrs = soapDoc.set("attrs","")
		for(var i=0;i<cnt;i++) {
			var elA = soapDoc.set("a",attrs[i].val,elAttrs);
			elA.setAttribute("n", attrs[i].n);
		}	
	}

	var csfeParams = new Object();
	csfeParams.soapDoc = soapDoc;	
	var reqMgrParams = {} ;
	reqMgrParams.controller = ZaApp.getInstance().getCurrentController();
	reqMgrParams.busyMsg = ZaMsg.BUSY_REQUESTING_ACCESS_RIGHTS ;
	try {
		var resp = ZaRequestMgr.invoke(csfeParams, reqMgrParams ).Body.CheckRightResponse;
		return resp;
	} catch (ex) {
		//not implemented yet
	}
	
}

ZaApp.prototype.initDialogs = function () {
	this.dialogs["errorDialog"] = this._appCtxt.getErrorDialog(true);
	this.dialogs["msgDialog"] = this._appCtxt.getMsgDialog(true);
	this.dialogs["confirmMessageDialog"] = this._appCtxt.getConfirmMsgDialog(true);
	this.dialogs["confirmMessageDialog2"] = this._appCtxt.getConfirmMsgDialog2(true);
}

ZaApp.prototype.getDomainAliasWizard = function (isEdit) {
    var dialog ;
    if (isEdit) {
        dialog = this.dialogs["editDomainAliasWizard"]
            = new ZaDomainAliasEditWizard(this._container, "400px", "80px", ZaMsg.Title_Edit_domain_alias);
    }else{
        dialog = this.dialogs["newDomainAliasWizard"]
            = new ZaDomainAliasWizard(this._container, "400px", "80px", ZaMsg.Title_Create_domain_alias);
    }
    return dialog;
}

ZaApp.prototype.launch =
function(appCtxt) {
	if(ZaSettings.DASHBOARD_VIEW && ZaApp.prototype.getDashBoardController) {
		var dashBoardController = ZaApp.getInstance().getDashBoardController(ZaSettings.DASHBOARD_VIEW);
		if(ZaApp.getInstance().getCurrentController()) {
			ZaApp.getInstance().getCurrentController().switchToNextView(dashBoardController, ZaDashBoardController.prototype.show,true);
		} else {					
			dashBoardController.show(true);
		}
	} else  {
        var ctl = this._appCtxt.getAppController().getOverviewPanelController();
        var homePath = ZaTree.getPathByArray([ZaMsg.OVP_home]);
		ctl.getOverviewPanel().getFolderTree().setSelectionByPath(homePath);
        var historyObject = new ZaHistory(homePath, ZaMsg.OVP_home);
        ZaZimbraAdmin.getInstance().updateHistory(historyObject, true);
    }
	// For delegated admin accounts pre fetch all the domains.
	if (ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsDelegatedAdminAccount] === "TRUE") {
		this.getDomainList(false, {limit : 25, asyncMode : true});
	}
};

ZaApp.prototype.getAppCtxt = 
function() {
	return this._appCtxt;
}

ZaApp.prototype.getCurrentController = 
function() {
    var currentViewId = this._appViewMgr.getCurrentView();
	return this._controllers[currentViewId];
}

ZaApp.prototype.getControllerById =
function (id) {
	return this._controllers[id] ;
}

/**
* View controllers
**/
ZaApp.prototype.getStatusViewController =
function(viewId) {
	if(!viewId)
		viewId = ZaZimbraAdmin._STATUS;
			
	if (viewId && this._controllers[viewId] != null) {
		return this._controllers[viewId];
	}else{
		var c  = this._controllers[viewId] = new ZaStatusViewController(this._appCtxt, this._container, this);
		return c ;
	}
}

ZaApp.prototype.getServerStatsController =
function(viewId) {

	if (viewId && this._controllers[viewId] != null) {
		return this._controllers[viewId];
	}else{
		var c  = this._controllers[viewId] = new ZaServerStatsController(this._appCtxt, this._container, this);
		return c ;
	}
}

ZaApp.prototype.getGlobalStatsController =
function(viewId) {
	if(!viewId)
		viewId = ZaZimbraAdmin._STATISTICS;
		
	if (viewId && this._controllers[viewId] != null) {
		return this._controllers[viewId];
	}else{
		var c = this._controllers[viewId] = new ZaGlobalStatsController(this._appCtxt, this._container, this);
		return c ;
	}
}

ZaApp.prototype.getServerStatsListController =
function(viewId) {
	if(!viewId)
		viewId = ZaZimbraAdmin._SERVER_LIST_FOR_STATISTICS_VIEW;

	if (viewId && this._controllers[viewId] != null) {
		return this._controllers[viewId];
	}else{
		var c = this._controllers[viewId] = new ZaServerStatsListController(this._appCtxt, this._container, this);
		return c ;
	}
}

ZaApp.prototype.getGlobalConfigViewController =
function(viewId) {
	if(!viewId)
		viewId = ZaZimbraAdmin._GLOBAL_SETTINGS;
	
	if (viewId && this._controllers[viewId] != null) {
		return this._controllers[viewId];
	}else{
		var c  = this._controllers[viewId] = new ZaGlobalConfigViewController(this._appCtxt, this._container, this);
		//c.addSettingsChangeListener(new AjxListener(this, ZaApp.prototype.handleSettingsChange));
		return c ;
	}
}

ZaApp.prototype.getSearchListController =
function() {
	if (this._controllers[ZaZimbraAdmin._SEARCH_LIST_VIEW] == null) {
		this._controllers[ZaZimbraAdmin._SEARCH_LIST_VIEW] = new ZaSearchListController(this._appCtxt, this._container);
		this._controllers[ZaZimbraAdmin._SEARCH_LIST_VIEW].addRemovalListener(new AjxListener(this.getSearchListController(), this.getSearchListController().handleRemoval));
	}
	return this._controllers[ZaZimbraAdmin._SEARCH_LIST_VIEW] ;
}

ZaApp.prototype.getSearchBuilderController =
function() {
	if (this._controllers[ZaZimbraAdmin._SEARCH_BUILDER_VIEW] == null) {
		this._controllers[ZaZimbraAdmin._SEARCH_BUILDER_VIEW] = new ZaSearchBuilderController(this._appCtxt, this._container);
		this._controllers[ZaZimbraAdmin._SEARCH_BUILDER_VIEW].addRemovalListener(new AjxListener(this.getSearchBuilderController(), this.getSearchBuilderController().handleRemoval));							
	}
	return this._controllers[ZaZimbraAdmin._SEARCH_BUILDER_VIEW] ;
}

ZaApp.prototype.getSearchBuilderToolbarController = ZaApp.prototype.getSearchBuilderController ;


ZaApp.prototype.getAccountListController =
function(viewId, newController) {
	if(!viewId)
		viewId = ZaZimbraAdmin._ACCOUNTS_LIST_VIEW;
			
	//this is used by SearchListController to associate its view with a new 
	//account list controller
	if (viewId && this._controllers[viewId] != null) {
		return this._controllers[viewId];
	}else if (viewId || newController) {
		var c = this._controllers[viewId] = new ZaAccountListController(this._appCtxt, this._container, this);
		c.addRemovalListener(new AjxListener(c, c.handleRemoval));							
		c.addCreationListener(new AjxListener(c, c.handleCreation));									
		return c ;
	}

}

ZaApp.prototype.getAccountViewController =
function(isAlias) {
	var c = new ZaAccountViewController(this._appCtxt, this._container, this);
	var viewId = ZaZimbraAdmin._ACCOUNTS_LIST_VIEW ;
	if (isAlias) {
		viewId = ZaZimbraAdmin._ALIASES_LIST_VIEW ;
	}
	c.addChangeListener(new AjxListener(this.getAccountListController(viewId), ZaAccountListController.prototype.handleChange));
	c.addCreationListener(new AjxListener(this.getAccountListController(viewId), ZaAccountListController.prototype.handleCreation));	
	c.addRemovalListener(new AjxListener(this.getAccountListController(viewId), ZaAccountListController.prototype.handleRemoval));			
	return c ;
}

ZaApp.prototype.getAdminExtListController = 
function() {
	if (this._controllers[ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW] == null) {
		this._controllers[ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW] = new ZaAdminExtListController(this._appCtxt, this._container, this);
		this._controllers[ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW].addRemovalListener(new AjxListener(this._controllers[ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW], this._controllers[ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW].handleRemoval));							
		this._controllers[ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW].addCreationListener(new AjxListener(this._controllers[ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW], this._controllers[ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW].handleCreation));			
		this._controllers[ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW].addChangeListener(new AjxListener(this._controllers[ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW], this._controllers[ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW].handleChange));
	}
	
	return this._controllers[ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW] ;
}

ZaApp.prototype.getZimletListController =
function() {
	if (this._controllers[ZaZimbraAdmin._ZIMLET_LIST_VIEW] == null) {
		this._controllers[ZaZimbraAdmin._ZIMLET_LIST_VIEW] = new ZaZimletListController(this._appCtxt, this._container, this);
		this._controllers[ZaZimbraAdmin._ZIMLET_LIST_VIEW].addRemovalListener(new AjxListener(this._controllers[ZaZimbraAdmin._ZIMLET_LIST_VIEW], this._controllers[ZaZimbraAdmin._ZIMLET_LIST_VIEW].handleRemoval));							
		this._controllers[ZaZimbraAdmin._ZIMLET_LIST_VIEW].addCreationListener(new AjxListener(this._controllers[ZaZimbraAdmin._ZIMLET_LIST_VIEW], this._controllers[ZaZimbraAdmin._ZIMLET_LIST_VIEW].handleCreation));			
		this._controllers[ZaZimbraAdmin._ZIMLET_LIST_VIEW].addChangeListener(new AjxListener(this._controllers[ZaZimbraAdmin._ZIMLET_LIST_VIEW], this._controllers[ZaZimbraAdmin._ZIMLET_LIST_VIEW].handleChange));
	}
	
	return this._controllers[ZaZimbraAdmin._ZIMLET_LIST_VIEW] ;
}

ZaApp.prototype.getZimletController =
function(viewId) {
	if (viewId && this._controllers[viewId] != null) {
		return this._controllers[viewId];
	}else{
		var c  = new ZaZimletViewController(this._appCtxt, this._container, this);
		return c ;
	}
}

ZaApp.prototype.getDistributionListController = 
function (viewId) {
		if (viewId && this._controllers[viewId] != null) {
		return this._controllers[viewId];
	}else{
		var c = new ZaDLController(this._appCtxt, this._container, this);
		c.addCreationListener(new AjxListener(this.getAccountListController(ZaZimbraAdmin._DISTRIBUTION_LISTS_LIST_VIEW), ZaAccountListController.prototype.handleCreation));			
		c.addRemovalListener(new AjxListener(this.getAccountListController(ZaZimbraAdmin._DISTRIBUTION_LISTS_LIST_VIEW), ZaAccountListController.prototype.handleRemoval));			
		c.addChangeListener(new AjxListener(this.getAccountListController(ZaZimbraAdmin._DISTRIBUTION_LISTS_LIST_VIEW), ZaAccountListController.prototype.handleChange));
		return c ;
	}
	
};

ZaApp.prototype.getResourceController = 
function (viewId) {
	if (viewId && this._controllers[viewId] != null) {
		return this._controllers[viewId];
	}else{
		var c = new ZaResourceController(this._appCtxt, this._container, this);
		c.addCreationListener(new AjxListener(this.getAccountListController(ZaZimbraAdmin._RESOURCE_LIST_VIEW), ZaAccountListController.prototype.handleCreation));			
		c.addRemovalListener(new AjxListener(this.getAccountListController(ZaZimbraAdmin._RESOURCE_LIST_VIEW), ZaAccountListController.prototype.handleRemoval));			
		c.addChangeListener(new AjxListener(this.getAccountListController(ZaZimbraAdmin._RESOURCE_LIST_VIEW), ZaAccountListController.prototype.handleChange));
		return c ;
	}
};

ZaApp.prototype.getDomainListController =
function(viewId, newController) {
	if(!viewId)
		viewId = ZaZimbraAdmin._DOMAINS_LIST_VIEW;
			
	//this is used by SearchListController to associate its view with a new 
	//domain list controller
	if (viewId && this._controllers[viewId] != null) {
		return this._controllers[viewId];
	}else if (viewId || newController) {
		var c = this._controllers[viewId] = new ZaDomainListController(this._appCtxt, this._container, this);
		c.addCreationListener(new AjxListener(this, ZaApp.prototype.handleDomainCreation));					
		c.addRemovalListener(new AjxListener(this, ZaApp.prototype.handleDomainRemoval));
        c.addChangeListener(new AjxListener(this.getDomainListController(), ZaDomainListController.prototype.handleDomainChange));
		c.addRemovalListener(new AjxListener(this.getDomainListController(), c.handleRemoval));
		return c ;
	}
}

ZaApp.prototype.getDomainController =
function(viewId) {
	
	if (viewId && this._controllers[viewId] != null) {
		return this._controllers[viewId];
	}else{
		var c = this._controllers[viewId] = new ZaDomainController(this._appCtxt, this._container, this);
		//since we are creating the account controller now - register all the interested listeners with it
		c.addChangeListener(new AjxListener(this.getDomainListController(), ZaDomainListController.prototype.handleDomainChange));
		c.addChangeListener(new AjxListener(c, ZaDomainController.prototype.handleDomainChange));
		c.addCreationListener(new AjxListener(this, ZaApp.prototype.handleDomainCreation));
		c.addCreationListener(new AjxListener(this.getDomainListController(), ZaDomainListController.prototype.handleCreation));
		c.addRemovalListener(new AjxListener(this.getDomainListController(), this.getDomainListController().handleRemoval));
		c.addRemovalListener(new AjxListener(this, ZaApp.prototype.handleDomainRemoval));

		return c ;
	}
}

ZaApp.prototype.getMTAListController =
function () {
	if (this._controllers[ZaZimbraAdmin._POSTQ_VIEW] == null) {
		this._controllers[ZaZimbraAdmin._POSTQ_VIEW] = new ZaMTAListController(this._appCtxt, this._container, this);
	}
	return this._controllers[ZaZimbraAdmin._POSTQ_VIEW];
}

ZaApp.prototype.getMTAController =
function (viewId) {

	if (viewId && this._controllers[viewId] != null) {
		return this._controllers[viewId];
	}else{
		var c = this._controllers[viewId] = new ZaMTAController(this._appCtxt, this._container, this);
		c.addChangeListener(new AjxListener(this.getMTAListController(), ZaMTAListController.prototype.handleMTAChange));		
		c.addChangeListener(new AjxListener(c, ZaMTAController.prototype.handleMTAChange));				
		return c ;
	}
}

ZaApp.prototype.getServerListController =
function() {
	if (this._controllers[ZaZimbraAdmin._SERVERS_LIST_VIEW] == null) {
		this._controllers[ZaZimbraAdmin._SERVERS_LIST_VIEW] = new ZaServerListController(this._appCtxt, this._container, this);								
	}
	return this._controllers[ZaZimbraAdmin._SERVERS_LIST_VIEW];
}

ZaApp.prototype.getServerController =
function(viewId) {

	if (viewId && this._controllers[viewId] != null) {
		return this._controllers[viewId];
	}else{
		var c = this._controllers[viewId] = new ZaServerController(this._appCtxt, this._container, this);
		c.addServerChangeListener(new AjxListener(this, ZaApp.prototype.handleServerChange));		
		c.addServerChangeListener(new AjxListener(this.getServerListController(), ZaServerListController.prototype.handleServerChange));		
		if(ZaSettings.TREE_ENABLED) {
			c.addServerChangeListener(new AjxListener(this._appCtxt.getAppController().getOverviewPanelController(), ZaOverviewPanelController.prototype.handleServerChange));									
		}
		return c ;
	}
	
}

ZaApp.prototype.getCosListController =
function() {
	if (this._controllers[ZaZimbraAdmin._COS_LIST_VIEW] == null) {
		this._controllers[ZaZimbraAdmin._COS_LIST_VIEW] = new ZaCosListController(this._appCtxt, this._container, this);
		this._controllers[ZaZimbraAdmin._COS_LIST_VIEW].addRemovalListener(new AjxListener(this, ZaApp.prototype.handleCosRemoval));
		if(ZaSettings.TREE_ENABLED) {
			this._controllers[ZaZimbraAdmin._COS_LIST_VIEW].addRemovalListener(new AjxListener(this._appCtxt.getAppController().getOverviewPanelController(), ZaOverviewPanelController.prototype.handleCosRemoval));
		}
	}
	return this._controllers[ZaZimbraAdmin._COS_LIST_VIEW];
}


ZaApp.prototype.getCosController =
function() {
	var c = new ZaCosController(this._appCtxt, this._container, this);
		
	c.addChangeListener(new AjxListener(this.getCosListController(), ZaCosListController.prototype.handleChange));
	if(ZaSettings.TREE_ENABLED) {
		c.addChangeListener(new AjxListener(this._appCtxt.getAppController().getOverviewPanelController(), ZaOverviewPanelController.prototype.handleCosChange));						
	}
	c.addCreationListener(new AjxListener(this.getCosListController(), ZaCosListController.prototype.handleCreation));	
	if(ZaSettings.TREE_ENABLED) {
		c.addCreationListener(new AjxListener(this._appCtxt.getAppController().getOverviewPanelController(), ZaOverviewPanelController.prototype.handleCosCreation));				
	}
	c.addRemovalListener(new AjxListener(this, ZaApp.prototype.handleCosRemoval));			
	c.addRemovalListener(new AjxListener(this.getCosListController(), ZaCosListController.prototype.handleRemoval));			
	if(ZaSettings.TREE_ENABLED) {
		c.addRemovalListener(new AjxListener(this._appCtxt.getAppController().getOverviewPanelController(), ZaOverviewPanelController.prototype.handleCosRemoval));						
	}
	return c ;

}

ZaApp.prototype.getHelpViewController =
function(viewId) {

	if (viewId && this._controllers[viewId] != null) {
		return this._controllers[viewId];
	}else{
		var c = this._controllers[viewId] = new ZaHelpViewController(this._appCtxt, this._container, this);
		return c ;
	}
}

ZaApp.prototype.getMigrationWizController = 
function(viewId) {
	
	if (viewId && this._controllers[viewId] != null) {
		return this._controllers[viewId];
	}else{
		var c = this._controllers[viewId] = new ZaMigrationWizController(this._appCtxt, this._container, this);
		return c ;
	}
}

ZaApp.prototype.searchDomains = function(query) {
	var busyId = Dwt.getNextId () ;
	var callback = new AjxCallback(this, this.domainSearchCallback, {busyId:busyId});
	var searchParams = {
			query:query, 
			types:[ZaSearch.DOMAINS],
			sortBy:ZaDomain.A_domainName,
			offset:"0",
			sortAscending:"1",
			limit:ZaDomain.MAXSEARCHRESULTS,
			callback:callback,
			controller: this.getCurrentController(),
			showBusy:true,
			busyId:busyId,
			busyMsg:ZaMsg.BUSY_SEARCHING_DOMAINS,
			skipCallbackIfCancelled:false,
			attrs:[ZaDomain.A_description, ZaDomain.A_domainName,ZaDomain.A_zimbraDomainStatus,ZaItem.A_zimbraId, ZaDomain.A_domainType]			
	}
	ZaSearch.searchDirectory(searchParams);
}

ZaApp.prototype.scheduledSearchDomains = function(domainItem) {
	var busyId = Dwt.getNextId () ;
	var callback = new AjxCallback(this, this.domainSearchCallback, {domainItem:domainItem, busyId:busyId});
	var searchParams = {
			query: this._domainQuery, 
			types:[ZaSearch.DOMAINS],
			sortBy:ZaDomain.A_domainName,
			offset:"0",
			sortAscending:"1",
			limit:ZaDomain.MAXSEARCHRESULTS,
			callback:callback,
			controller: this.getCurrentController(),
			showBusy:true,
			busyId:busyId,
			busyMsg:ZaMsg.BUSY_SEARCHING_DOMAINS,
			skipCallbackIfCancelled:false,
			attrs:[ZaDomain.A_domainName, ZaItem.A_zimbraId]			
	}
	ZaSearch.searchDirectory(searchParams);
//	DBG.println(AjxDebug.DBG1, "Searching for domains "+ ev.keyCode +" char code " + (new Date()).getTime());
}

ZaApp.prototype.domainSearchCallback = 
function (params, resp) {
	var domainItem = params.domainItem ? params.domainItem : null; 
		
	try {
		if(params.busyId)
			this._appCtxt.getShell().setBusy(false, params.busyId);
			
		if(!resp) {
			throw(new AjxException(ZaMsg.ERROR_EMPTY_RESPONSE_ARG, AjxException.UNKNOWN, "ZaListViewController.prototype.searchCallback"));
		}
		if(resp.isException()) {
			//throw(resp.getException());
			ZaSearch.handleTooManyResultsException(resp.getException(), "ZaApp.prototype.domainSearchCallback");
		} else {
			ZaSearch.TOO_MANY_RESULTS_FLAG = false ;
			var response = resp.getResponse().Body.SearchDirectoryResponse;
			var domainList = new ZaItemList(ZaDomain);	
			domainList.loadFromJS(response);
			if(ZaSettings.TREE_ENABLED) {
				this._appCtxt.getAppController().getOverviewPanelController().updateDomainList(domainList);
			}
			if (domainItem != null && domainItem instanceof XFormItem && this._domainList.size() <= 0) {
				domainItem.setError(ZaMsg.ERROR_NO_SUCH_DOMAIN) ;
				var event = new DwtXFormsEvent(this, domainItem, domainItem.getInstanceValue());
				domainItem.getForm().notifyListeners(DwtEvent.XFORMS_VALUE_ERROR, event);
			}
		}
	} catch (ex) {
		if (ex.code != ZmCsfeException.MAIL_QUERY_PARSE_ERROR) {
			this.getCurrentController()._handleException(ex, "ZaApp.prototype.domainSearchCallback");	
		} else {
			this.getCurrentController().popupErrorDialog(ZaMsg.queryParseError, ex);
		}		
	}
}

/**
 * Get all the domains from the server.
 * @param {Boolean}		refresh				bypass the cache
 * @param {Boolean}		params.asyncMode	if <code>true</code>, request will be made asynchronously
 * @param {AjxCallback}	params.callback		the next callback in chain for async request
 */
ZaApp.prototype.getDomainList =
function(refresh, params) {
	if (refresh || this._domainList == null) {
		if (params && params.asyncMode) {
			var getDomainListCallbackArray = this._getDomainListCallbackArray;
			if (!getDomainListCallbackArray) {
				getDomainListCallbackArray = this._getDomainListCallbackArray = [];
			}
			getDomainListCallbackArray.push(params.callback);
			// Send a request to the server only once. All other callbacks will be added to _getDomainListCallbackArray and executed once the response comes back from the server.
			if (getDomainListCallbackArray.length === 1) {
				params.callback = this._getDomainListCallback.bind(this);
				ZaDomain.getAll(false, params);
			}
		}
		else {
			this._domainList = ZaDomain.getAll();
		}
	}
	return this._domainList;
};

ZaApp.prototype._getDomainListCallback =
function(list) {
	this._domainList = list;
	for (var i = 0; i < this._getDomainListCallbackArray.length; i++) {
		if (this._getDomainListCallbackArray[i]) {
			this._getDomainListCallbackArray[i](list);
		}
	}
	this._getDomainListCallbackArray = [];
};

ZaApp.prototype.getSavedSearchList =
function (refresh) {
	if (refresh || ZaSearch.SAVED_SEARCHES.length <=0) {
        if (ZaSearchField.canViewSavedSearch) {
		    ZaSearch.updateSavedSearch (ZaSearch.getSavedSearches()) ;
        }
	}
	
	return ZaSearch.SAVED_SEARCHES ;
}

ZaApp.prototype.getServerByName =
function(serverName) {
	if (this._serverList == null) {
//		DBG.println(AjxDebug.DBG1, "ZaApp.prototype.getServerByName :: this._serverList is null ");
		this._serverList = ZaServer.getAll();
	}
	var cnt = this._serverList.getArray().length;
	var myServer = new ZaServer(this);
	for(var i = 0; i < cnt; i++) {
		if(this._serverList.getArray()[i].attrs[ZaServer.A_ServiceHostname] == serverName)
			return this._serverList.getArray()[i];
	}
	if(i == cnt) {
		myServer.load("name", serverName);
	}
	return myServer;	
}

ZaApp.prototype.getServerList =
function(refresh) {
	if (refresh || this._serverList == null) {
		this._serverList = ZaServer.getAll();
		
		if(this._serverList) {
			var tmpArray = this._serverList.getArray();
			this._mbsList = ZaItemList(ZaServer);
			if(tmpArray) {
				var resArray = new Array();
				var cnt = tmpArray.length;
				for(var i=0;i>cnt;i++) {
					if(tmpArray[i].attrs[ZaServer.A_zimbraMailboxServiceInstalled]) {
						this._mbsList.add(tmpArray[i]);
					}
				}
			}
		}
	}
	return this._serverList;	
}

ZaApp.prototype.getMbsList =
function(refresh) {
	if (refresh || this._mbsList == null) {
		this._mbsList = ZaServer.getAllMBSs();
	}
	return this._mbsList;	
}

ZaApp.prototype.getPostQList = 
	function (refresh, callback) {
		if (refresh || this._postqList == null || callback) {
			this._postqList = ZaMTA.getAll(callback);
		}
		return this._postqList;	
	}

ZaApp.prototype.getMailServers =
function(refresh, callback) {
	if (refresh || this._mbsList == null || callback) {
		this._mbsList = ZaServer.getAllMBSs([ZaServer.A_ServiceHostname, ZaServer.A_description, ZaServer.A_zimbraServiceEnabled, ZaServer.A_zimbraServiceInstalled, ZaItem.A_zimbraId], callback);
	}
	if(!callback) {
		var resArray = new Array();
		var tmpArray = this._mbsList.getArray();
		var cnt = tmpArray.length;
		for(var i = 0; i < cnt; i++) {
			if(tmpArray[i].attrs[ZaServer.A_zimbraMailClientServiceEnabled]) {
				resArray.push(tmpArray[i]);
			}
		}
		return resArray;
	}
}

ZaApp.prototype.getServerListChoices =
function(refresh) {
	if (refresh || this._serverList == null) {
		this._serverList = ZaServer.getAll();
	}
	if(refresh || this._serverChoices == null) {
		var hashMap = this._serverList.getIdHash();
		var mailServerArr = [];
		for (var i in hashMap) {
			if (hashMap[i].attrs[ZaServer.A_zimbraMailClientServiceEnabled]){
				mailServerArr.push(hashMap[i]);
			}
		}
		if(this._serverChoices == null) {
			this._serverChoices = new XFormChoices(mailServerArr, XFormChoices.OBJECT_LIST, ZaServer.A_ServiceHostname, ZaServer.A_ServiceHostname);
		} else {	
			this._serverChoices.setChoices(mailServerArr);
			this._serverChoices.dirtyChoices();
		}
	}
	return this._serverChoices;	
}

ZaApp.prototype.getServerIdListChoices =
function(refresh) {
	if (refresh || this._serverList == null) {
		this._serverList = ZaServer.getAll();
	}
	if(refresh || this._serverIdChoices == null) {
		var hashMap = this._serverList.getIdHash();
		var mailServerArr = [];
		for (var i in hashMap) {
			if (hashMap[i].attrs[ZaServer.A_zimbraMailClientServiceEnabled]){
				var obj = new Object();
				obj[ZaServer.A_ServiceHostname] = hashMap[i].attrs[ZaServer.A_ServiceHostname];
				obj.id = hashMap[i].id;
				mailServerArr.push(obj);
			}
		}
		if(this._serverIdChoices == null) {
			this._serverIdChoices = new XFormChoices(mailServerArr, XFormChoices.OBJECT_LIST, "id", ZaServer.A_ServiceHostname);
		} else {	
			this._serverIdChoices.setChoices(mailServerArr);
			this._serverIdChoices.dirtyChoices();
		}
	}
	return this._serverIdChoices;	
}

ZaApp.prototype.getServerMap =
function(refresh) {
	if(refresh || this._serverList == null) {
//		DBG.println(AjxDebug.DBG1, "ZaApp.prototype.getServerMap :: this._serverList is null ");						
		this._serverList = ZaServer.getAll();
	}
	if(refresh || this._serverMap == null) {
		this._serverMap = new Object();
		var cnt = this._serverList.getArray().length;
		for (var i = 0; i < cnt; i ++) {
			this._serverMap[this._serverList.getArray()[i].id] = this._serverList.getArray()[i];
		}
	}
	return this._serverMap;
}

ZaApp.prototype.getCosList =
function(refresh, callback) {
	if (refresh || !this._cosList) {
		var query = "";
		if(!ZaZimbraAdmin.hasGlobalCOSSListAccess()) {
			var cosNameList = ZaApp.getInstance()._cosNameList;
			if(AjxUtil.isEmpty(cosNameList)) {
				ZaApp.getInstance()._cosNameList = cosNameList = ZaCos.getEffectiveCosList(ZaZimbraAdmin.currentAdminAccount.id);
			}
			if(cosNameList.length == 0) {
				this._cosList = new ZaItemList(ZaCos);
				return this._cosList;
			} 
			for(var i = 0; i < cosNameList.length; i++)
				query += "(" + ZaCos.A_name + "=" + cosNameList[i] + ")";
			if(cosNameList.length > 1)
				query = "(|" + query + ")"; 
		}

		var searchParams = {
			query: query ,
			types:[ZaSearch.COSES],
			sortBy:"id",
			offset:0,
			sortAscending:"1",
			limit:ZaDomain.RESULTSPERPAGE,
			attrs:[ZaCos.A_name,ZaCos.A_description].join(),
			controller: this.getCurrentController()
		};
		this._cosList = new ZaItemList(ZaCos);
		if (callback) {
			searchParams.callback = this._getCosListCallback.bind(this, callback);
			ZaSearch.searchDirectory(searchParams);
		}
		else {
			var response = ZaSearch.searchDirectory(searchParams).Body.SearchDirectoryResponse;
			this._cosList.loadFromJS(response);
		}
	}
	return this._cosList;	
};

ZaApp.prototype._getCosListCallback =
function(callback, result) {
	var response = result.getResponse().Body;
	if (!response) {
		return;
	}
	var searchDirectoryResponse = response.SearchDirectoryResponse;
	if (!searchDirectoryResponse) {
		return;
	}
	this._cosList.loadFromJS(searchDirectoryResponse);
	if (callback) {
		callback(this._cosList);
	}
};

ZaApp.prototype.getCosListChoices =
function(refresh) {
	if (refresh || this._cosList == null) {
		
		//this._cosList = ZaCos.getAll(this);
	}
	if(refresh || this._cosListChoices == null) {
		if(this._cosListChoices == null)
			this._cosListChoices = new XFormChoices([], XFormChoices.OBJECT_LIST, "id", "name");	

		this._cosListChoices.setChoices(this._cosList.getArray());
		this._cosListChoices.dirtyChoices();

	}
	return this._cosListChoices;	
}

ZaApp.prototype.getCosListName =
function() {
	if (!this._cosListName) {
		var cosList = this.getCosList();
		this._cosListName = AjxUtil.map(cosList ? cosList.getArray() : [], function(cos) {
			return cos.name;
		});
	}
	return this._cosListName;
};

/**
 * Returns an array of domain names for the specified domainType
 *
 * @param {domainType}  string  "local" or "alias"
 *
 * @returns {Array} array of domain names for the domainType
 */
ZaApp.prototype.getDomainNameListByType =
function(domainType) {
	this._domainNameList = this._domainNameList || {};
	if (!this._domainNameList[domainType]) {
		this._domainNameList[domainType] = [];
		var domainList = this.getDomainList();
		if (domainList) {
			var domainListArray = domainList.getArray();
			for (var i = 0; i < domainListArray.length; i++) {
				var domain = domainListArray[i];
				if (domain && domain.attrs[ZaDomain.A_domainType] === domainType) {
					this._domainNameList[domainType].push(domain.name);
				}
			}
		}
	}
	return this._domainNameList[domainType];
};

ZaApp.prototype.getGlobalConfig =
function(refresh) {
	if (refresh || this._globalConfig == null) {
		this._globalConfig = new ZaGlobalConfig();
	}
	return this._globalConfig;	
}

ZaApp.prototype.getInstalledSkins = 
function(refresh) {
    try {
        if (refresh || this._installedSkins == null) {
            var soapDoc = AjxSoapDoc.create("GetAllSkinsRequest", ZaZimbraAdmin.URN, null);

	        var csfeParams = new Object();
	        csfeParams.soapDoc = soapDoc;
	        var reqMgrParams = {} ;
	        reqMgrParams.controller = ZaApp.getInstance().getCurrentController();
            try {
                this._installedSkins = [];
                var resp = ZaRequestMgr.invoke(csfeParams, reqMgrParams ).Body.GetAllSkinsResponse;
                if (resp && resp.skin) {
                    for(var i = 0; i < resp.skin.length;i++) {
                        this._installedSkins.push(resp.skin[i].name);
                    }
                }
            } catch (ex) {
                //not implemented yet
            }
        }
    	return this._installedSkins;
    }catch (e) {
        return null ;
    }
}

ZaApp.prototype.getSkinChoices =
function (skins) {
    var skinChoices = [];
    for (var i = 0; i < skins.length; i++) {
        var skin = skins[i];
        skinChoices.push({
            label: AjxStringUtil.htmlEncode(ZaMsg['theme-' + skin] || skin.substr(0, 1).toUpperCase() + skin.substr(1)),
            value: skin
        });
    }
    return skinChoices;
}
/**
* @param ev
* This listener is invoked by any controller that can create an ZaDomain object
**/
ZaApp.prototype.handleDomainCreation = 
function (ev) {
	if(ev) {
        if (!ZaZimbraAdmin.hasGlobalDomainListAccess()) {
            ZaApp.getInstance()._domainNameList = ZaDomain.getEffectiveDomainList(ZaZimbraAdmin.currentAdminAccount.id);
        }
		//update the overpanel
        this.searchDomains();
        //update the domain list. We separate two search domains because domain list view only need the first page
        // result, but the overpanel will show more results. It could potentially be combined into one search.
        this.getDomainListController().show ();

        ZaZimbraAdmin.getInstance().getOverviewPanelController().refreshRelatedTree (ev.getDetails());
	}
}

/**
* @param ev
* This listener is invoked by ZaCosController or any other controller that can remove an ZaCos object
**/
ZaApp.prototype.handleCosRemoval = 
function (ev) {
	if(ev) {
		if(!this._cosList) {
			this._cosList=ZaCos.getAll();
		} else {
			//remove the ZaCos from the controlled list
			var detls = ev.getDetails();
			if(detls && (detls instanceof Array)) {
				for (var key in detls) {
					this._cosList.remove(detls[key]);
				}
			} else if(detls && (detls instanceof ZaCos)) {
				this._cosList.remove(ev.getDetails());
			}

            ZaZimbraAdmin.getInstance().refreshHistoryTreeByDelete(ev.getDetails());
		}
		if(this._cosListChoices == null) {
			this._cosListChoices = new XFormChoices(this._cosList.getArray(), XFormChoices.OBJECT_LIST, "id", "name");	
		} else {
			this._cosListChoices.setChoices(this._cosList.getArray());
			this._cosListChoices.dirtyChoices();			
		}
	}
}

ZaApp.prototype.handleServerChange = 
function (ev) {
	if(ev) {
		if(this._serverList) {
			this._serverList=ZaServer.getAll();
			if(this._serverChoices == null) {
				this._serverChoices = new XFormChoices(this._serverList.getArray(), XFormChoices.OBJECT_LIST, ZaServer.A_ServiceHostname, ZaServer.A_ServiceHostname);
			} else {	
				this._serverChoices.setChoices(this._serverList.getArray());
				this._serverChoices.dirtyChoices();
			}

			this._serverMap = new Object();
			var cnt = this._serverList.getArray().length;
			for (var i = 0; i < cnt; i ++) {
				this._serverMap[this._serverList.getArray()[i].id] = this._serverList.getArray()[i];
			}						
		} 
	}
}

/**
* @param ev
* This listener is invoked by ZaDomainController or any other controller that can remove an ZaDomain object
**/
ZaApp.prototype.handleDomainRemoval = 
function (ev) {
	if(ev) {
		this.searchDomains();
	}
}

/**
* @param ev
* This listener is invoked by ZaDomainController or any other controller that can remove an ZaDomain object
**/
ZaApp.prototype.handleDomainChange = 
function (ev) {
	if(ev) {
		this.searchDomains();
	}
}

ZaApp.prototype.handleSettingsChange = 
function(ev) {
	if(ev) {
		this._globalConfig = new ZaGlobalConfig(this);
	}
}

/**
* Returns the app's name.
*/
ZaApp.prototype.getName =
function() {
	return this._name;
}

/**
* Returns the app view manager.
*/
ZaApp.prototype.getAppViewMgr = 
function() {
	return this._appViewMgr;
}

ZaApp.prototype.createView =
function(viewName, elements, tabParams) {
	this._appViewMgr.createView(viewName, elements);
	
	//create new tabs or modify tab
	/* tabParams {
	 * 	openInNewTab: true/false,
	 *  tabId: The tabId which will be either set for new Tab or the updating tab
	 *  tab: the tab to be updated
	 *  view: 
	 * }
	 */
	
	if (tabParams.openInNewTab) {
		this.createTab (tabParams);
	}else{
		this.updateTab (tabParams.tab, tabParams.tabId);
	}
	
}

ZaApp.prototype.createTab =
function () {
	if (arguments.length == 0) return;
	var tabId;
	var closable = true;
	var selected = true;
	var onOpen = null;
	if (typeof arguments[0] == "object") {
		tabId = arguments[0]["tabId"];
		closable = AjxUtil.isEmpty(arguments[0]["closable"]) ? true : false;
		selected = AjxUtil.isEmpty(arguments[0]["selected"]) ? true : false;
		onOpen = AjxUtil.isEmpty(arguments[0]["onOpen"]) ? null : arguments[0]["onOpen"];
	} else {
		tabId = arguments[0]; 
	}
	var tabGroup = this.getTabGroup() ;
	var appView = this.getViewById(tabId) [ZaAppViewMgr.C_APP_CONTENT] ;
	var params = {
		id: tabId ,
		icon: appView.getTabIcon (),
		label: appView.getTabTitle () ,
		toolTip: appView.getTabToolTip () || appView.getTabTitle () ,
		closable: closable,
		selected: selected,
		onOpen:onOpen
	}
	
	var tab = new ZaAppTab (tabGroup,params );
	/*
				entry.name, entry.getTabIcon() , null, null, 
				true, true, ZaApp.getInstance()._currentViewId) ;
	tab.setToolTipContent( entry.getTabToolTip()) ; */
}

/**
 * tab: the tab to be updated
 * tabId: the new id associated with the tab
 */
ZaApp.prototype.updateTab =
function ( tab, tabId ) {
	
	var tabGroup = this.getTabGroup() ;
	if (tabGroup._searchTab && tabGroup._searchTab == tab) {
		this.updateSearchTab() ;
	}else{	
		var appView = this.getViewById(tabId)[ZaAppViewMgr.C_APP_CONTENT];
		var icon = appView.getTabIcon (); //the view class should implement the getTabIcon () function
		var titleLabel = appView.getTabTitle () ; //the view class should implement the getTabTitle () function
	
		tab.setToolTipContent (appView.getTabToolTip() || appView.getTabTitle ()) ;
		tab.resetLabel (titleLabel) ;
		tab.setImage (icon) ;
	}
	
	tab.setTabId (tabId) ; //set the new tabId to the existing tab
	
	if (! tab.isSelected()) {
		tabGroup.selectTab(tab);
	}
}

ZaApp.prototype.updateSearchTab =
function () {
	var searchTab = this.getTabGroup().getSearchTab() ;
	searchTab.setImage (ZaSearchListView.prototype.getTabIcon()) ;
	searchTab.resetLabel (ZaSearchListView.prototype.getTabTitle()) ;
	searchTab.setToolTipContent (
		ZaSearchListView.prototype.getTabToolTip.call(this._controllers[searchTab.getTabId()])) ;
}

ZaApp.prototype.pushView =
function(name, openInNewTab, openInSearchTab) {
	this._currentViewId = this._appViewMgr.pushView(name);
}

ZaApp.prototype.popView =
function() {
	var oldCurrentViewId = this._currentViewId ;
	this._currentViewId = this._appViewMgr.popView();
	//dispose the view and remove the controller
	this.disposeView (oldCurrentViewId);
	
}

ZaApp.prototype.disposeView =
function (viewId, closeHidden) {
	var view = this.getViewById (viewId) ;
	if(closeHidden) {
		this._appViewMgr.removeHiddenView(viewId);
	}
	for (var n in view) {
		if (view[n] instanceof DwtComposite) {
			view[n].dispose () ;
		}else{
			view[n] = null ;
		}
	} 
	
	//destroy the controller also
	if (this._controllers[viewId] != null) {
		this._controllers[viewId] = null ;
	} 
}

ZaApp.prototype.setView =
function(name, force) {
	return this._appViewMgr.setView(name, force);
}

ZaApp.prototype.getViewById =
function (id) {
	return	this.getAppViewMgr()._views[id] ;
}
// Abstract methods


/**
* Clears an app's state.
*/
ZaApp.prototype.reset =
function(active) {
}

ZaApp.prototype.setTabGroup =
function (tabGroup) {
	this._tabGroup = tabGroup ;	
}

ZaApp.prototype.getTabGroup =
function () {
	return this._tabGroup ;	
	
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaAboutDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 4/1/12
 * Time: 2:11 AM
 * To change this template use File | Settings | File Templates.
 */


ZaAboutDialog = function(parent, className, w, h) {
    if (arguments.length == 0) return;
    var clsName = className || "DwtBaseDialog AboutScreen";
    DwtBaseDialog.call(this, parent, clsName,  "");
    w = w || "579px";
    h = h || "264px";
    this.setSize(w, h);
    this.addCloseListener();
    this.addFocusBlurListener();
}

ZaAboutDialog.prototype = new DwtBaseDialog;
ZaAboutDialog.prototype.constructor = ZaAboutDialog;
ZaAboutDialog.prototype.TEMPLATE = "admin.Widgets#ZaAboutDialog";
ZaAboutDialog.prototype.closeIcon = "ImgAboutClose";
ZaAboutDialog.prototype.closeHoverIcon = "ImgAboutCloseHover";

ZaAboutDialog.prototype._createHtmlFromTemplate = function (templateId, data) {
    data.dragId = this._dragHandleId;
    data.closeIcon = this.closeIcon ? this.closeIcon : "ImgAboutClose";
    var date = AjxDateFormat.getDateInstance().format(ZaServerVersionInfo.buildDate);
    data.version = AjxBuffer.concat(ZaMsg.splashScreenVersion, " ", ZaServerVersionInfo.version , " " , date);
    data.copyright = ZaItem.getAboutScreenCopyright();
    data.aboutBanner = "ImgAboutBanner";
    data.logoURL = ZaAppCtxt.getLogoURI();
    DwtComposite.prototype._createHtmlFromTemplate.call(this, templateId, data);
    this._contentEl = document.getElementById(data.id+"_content");
    this._closeIconEl = document.getElementById(data.id+"_close");
}

ZaAboutDialog.prototype.addCloseListener = function () {
    if (this._closeIconEl) {
        Dwt.setHandler(this._closeIconEl, DwtEvent.ONCLICK, AjxCallback.simpleClosure(this.popdown, this));
    }
}

ZaAboutDialog.prototype.addFocusBlurListener = function () {
    if (this._closeIconEl && this._closeIconEl.firstChild) {
        var enterEvent = AjxEnv.isIE? DwtEvent.ONMOUSEENTER: DwtEvent.ONMOUSEOVER;
        var leaveEvent = AjxEnv.isIE? DwtEvent.ONMOUSELEAVE: DwtEvent.ONMOUSEOUT;
        Dwt.setHandler(this._closeIconEl.firstChild, enterEvent, AjxCallback.simpleClosure(this.changeCloseIcon, this, true));
        Dwt.setHandler(this._closeIconEl.firstChild, leaveEvent, AjxCallback.simpleClosure(this.changeCloseIcon, this, false));
    }
}

ZaAboutDialog.prototype.changeCloseIcon = function (isHover) {
    if (this._closeIconEl && this._closeIconEl.firstChild) {
        if (isHover) {
            Dwt.delClass(this._closeIconEl.firstChild, this.closeIcon, this.closeHoverIcon);
        } else {
            Dwt.delClass(this._closeIconEl.firstChild, this.closeHoverIcon, this.closeIcon);
        }
    }
}

}
if (AjxPackage.define("zimbraAdmin.common.ZaMsgDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* Creates a new message dialog.
* @constructor
* @class
* This class represents a reusable message dialog box. Messages can be informational, warning, or
* critical.
*/
ZaMsgDialog = function(parent, className, buttons, extraButtons, contextId) {
	this._app = ZaApp.getInstance();
    	var id = contextId? ZaId.getDialogId(ZaId.DLG_MSG, contextId):ZaId.getDialogId(ZaId.DLG_MSG);
 	DwtMessageDialog.call(this, parent, className, buttons, extraButtons, id);
}


ZaMsgDialog.prototype = new DwtMessageDialog;
ZaMsgDialog.prototype.constructor = ZaMsgDialog;

ZaMsgDialog.CLOSE_TAB_DELETE_BUTTON = "close tab and delete";
ZaMsgDialog.CLOSE_TAB_DELETE_BUTTON_DESC = 
	new DwtDialog_ButtonDescriptor (ZaMsgDialog.CLOSE_TAB_DELETE_BUTTON, ZaMsg.bt_close_tab_delete, DwtDialog.ALIGN_RIGHT);
ZaMsgDialog.NO_DELETE_BUTTON = "no delete" ;
ZaMsgDialog.NO_DELETE_BUTTON_DESC = 
	new DwtDialog_ButtonDescriptor (ZaMsgDialog.NO_DELETE_BUTTON, ZaMsg.bt_no_delete, DwtDialog.ALIGN_RIGHT);
}
if (AjxPackage.define("zimbraAdmin.common.ZaErrorDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
* Creates an error dialog which basically means it will have a "Report" button
* @constructor
* @class
* A normal DwtMessageDialog w/ a "Report" button that will post user info to the 
* server when clicked.
*/
ZaErrorDialog = function(parent, contextId) {
	//if (arguments.length === 0) {return;}
	if(!parent) return;

	var detailButton = new DwtDialog_ButtonDescriptor(ZaErrorDialog.DETAIL_BUTTON, AjxMsg.detail, DwtDialog.ALIGN_LEFT);
	var id = contextId? ZaId.getDialogId(ZaId.DLG_ERR,contextId):ZaId.getDialogId(ZaId.DLG_ERR); 
	DwtMessageDialog.call(this, parent, null, null, [detailButton],id);

	// setup the detail button
	this._detailCell = document.getElementById(this._detailCellId);
	var detailBtn = this._button[ZaErrorDialog.DETAIL_BUTTON];
	detailBtn.setImage("SelectPullDownArrow");
	this.registerCallback(ZaErrorDialog.DETAIL_BUTTON, this._showDetail, this);
    this._setAllowSelection();
}

ZaErrorDialog.prototype = new DwtMessageDialog;
ZaErrorDialog.prototype.constructor = ZaErrorDialog;

ZaErrorDialog.prototype.toString = function() {
	return "ZaErrorDialog";
};

//
// Constants
//

ZaErrorDialog.DETAIL_BUTTON = ++DwtDialog.LAST_BUTTON;

//
// Data
//

ZaErrorDialog.prototype._detailsVisible = false;

ZaErrorDialog.prototype.CONTROLS_TEMPLATE = "zimbra.Widgets#ZmErrorDialogControls";

//
// Public methods
//

ZaErrorDialog.prototype.reset =
function() {
	this.setDetailString();
	DwtMessageDialog.prototype.reset.call(this);
};

ZaErrorDialog.prototype.setMessage =
function(msgStr, detailStr, style, title) {
	msgStr = AjxStringUtil.htmlEncode(msgStr);

	// If we have a <br> tag in string then we need to maintain decode it, so it will be considered as html tag
	msgStr = msgStr.replace(/&lt;br\s?(\/)?&gt;/gi, '<br />');

	this._msgStr = msgStr;
	this._msgStyle = style;
	this._msgTitle = title;

    // clear the 'detailsVisible' flag and reset the 'showDetails' button icon
    this._detailsVisible = false;
    this._button[ZaErrorDialog.DETAIL_BUTTON].setImage("SelectPullDownArrow");

    DwtMessageDialog.prototype.setMessage.call(this, msgStr, style, title);
	this.setDetailString(detailStr);
};

/**
* Sets the text that shows up when the Detail button is pressed.
*
* @param text	detail text
*/
ZaErrorDialog.prototype.setDetailString = 
function(text) {
	if (!(this._buttonElementId[ZaErrorDialog.DETAIL_BUTTON])) {return;}

    this._detailStr = text;

    this._button[ZaErrorDialog.DETAIL_BUTTON].setVisible(text != null);
    if (this._detailsEl) {
        this._detailsEl.value = text || "";
	}
};



//
// Protected methods
//

ZaErrorDialog.prototype._createHtmlFromTemplate = function(templateId, data) {
    DwtMessageDialog.prototype._createHtmlFromTemplate.call(this, templateId, data);
    this._detailsContainerEl = document.getElementById(data.id+"_details_container");
    this._detailsEl = document.getElementById(data.id+"_details");
};

ZaErrorDialog.prototype._getContentHtml =
function() {
	this._detailCellId = Dwt.getNextId();
	var html = new Array();
	var idx = 0;

	html[idx++] = DwtMessageDialog.prototype._getContentHtml.call(this);
	html[idx++] = "<div id='" + this._detailCellId + "'></div>";
	
	return html.join("");
};


// Displays the detail text
ZaErrorDialog.prototype._showDetail = function() {
    this._detailsVisible = !this._detailsVisible;

    var msg = this._msgStr;
    if (this._detailsVisible) {
    	msg += "<div style='overflow:auto;height:100px'>";
        msg += "<hr> " + this._detailStr;
        msg += "</div>";
    }
    DwtMessageDialog.prototype.setMessage.call(this, msg, this._msgStyle, this._msgTitle);
    this._button[ZaErrorDialog.DETAIL_BUTTON].setImage(this._detailsVisible ? "SelectPullUpArrow" : "SelectPullDownArrow");
};
}
if (AjxPackage.define("zimbraAdmin.common.ZaTabView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaTabView is an abstract class for creating views that present data in tabs.
* All the tabbed views in the Admin UI should extend ZaTabView.
* call initForm after calling the constructor
* @contructor
* @param parent
* @param app
* @extends DwtComposite
* @author Greg Solovyev
**/

ZaTabView = function(params) {
	if (arguments.length == 0) return;
	params = Dwt.getParams(arguments, ZaTabView.PARAMS);
	var className = params.cssClassName ? params.cssClassName : "DwtTabView";
	this._contextId = params.contextId? params.contextId:ZaId.TAB_UNDEF;
	DwtComposite.call(this, {
		parent:params.parent, 
		className:className, 
		posStyle:Dwt.ABSOLUTE_STYLE,
		id: ZaId.getTabId(this._contextId)
	});	
	this._iKeyName = params.iKeyName;
	this._drawn = false;	
	this._appCtxt = this.shell.getData(ZaAppCtxt.LABEL);
	this._containedObject = null;
	this.setScrollStyle(Dwt.SCROLL_Y);
	this._currentSubTab = [];
}

ZaTabView.PARAMS = ["parent","iKeyName", "cssClassName", "contextId"];

ZaTabView.prototype = new DwtComposite();
ZaTabView.prototype.constructor = ZaTabView;

/**
* A map of funciton references. Functions in this map are called one after another from 
* {@link #getMyXForm} method.
* The functions are called on the current instance of the dialog. 
* One parameter is passed to each function: a reference to the XForms object defenition.
* Keys in the map are names of the view classes: ZaAccountXFormView, ZaCosXFormView, ZaDomainXFormView, etc
* Values in the map are arrays of function references
* If you have defined your function for modifying a view's XForm definition, you can add it to this map like this:
* ZaTabView.XFormModifiers["ZaAccountXFormView"].push(ZaAccountXFormView.myXFormModifier);
* This example adds funciton ZaAccountXFormView.myXFormModifier to the array of functions that will be called to construct UI for ZaAccountXFormView
*
* Examples of using this map can be found in {@link ZaAccountXFormView}, {@link ZaCosXFormView}, {@link ZaServerXFormView}
* @see #getMyXForm
* @see ZaAccountXFormView#myXFormModifier
* @see ZaCosXFormView#myXFormModifier
* @see ZaCosXFormView#ZaServerXFormView
**/
ZaTabView.XFormModifiers = new Object();
ZaTabView.XFormSetObjectMethods = new Object();

ZaTabView.DEFAULT_TAB = 1;

/**
* @param xModelMetaData - XModel metadata that describes data model
* @param xFormMetaData - XForm metadata that describes the form
**/
ZaTabView.prototype.initForm = 
function (xModelMetaData, xFormMetaData, entry) {
	if(xModelMetaData == null || xFormMetaData == null)
		throw new AjxException(ZaMsg.ERROR_METADATA_NOT_DEFINED, AjxException.INVALID_PARAM, "ZaTabView.prototype._initForm");

	this._localXModel = new XModel(xModelMetaData);
	this._localXForm = new XForm(xFormMetaData, this._localXModel, entry, this, ZaId.getTabViewId(this._contextId));
	this._localXForm.setController(ZaApp.getInstance());
	this._localXForm.draw();
	this.formChangeListener = new AjxListener(this, ZaTabView.prototype.setDirty,[true]) ;
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_CHANGED,this.formChangeListener);
	this._drawn = true;
}

ZaTabView.prototype.setBounds = function (x, y, width, height) {	
	DwtControl.prototype.setBounds.call(this,x, y, width, height);

	if (this.isListenerRegistered(DwtEvent.CONTROL)) {
	 	var evt = DwtShell.controlEvent;
	 	evt.reset();
	 	this.notifyListeners(DwtEvent.CONTROL, evt);
	} 
}

/**
* @return XForm definition for this view's XForm
**/
ZaTabView.prototype.getMyXForm = function (entry) {
	var xFormObject = new Object();
	//Instrumentation code start
	if(ZaTabView.XFormModifiers[this._iKeyName]) {
		var methods = ZaTabView.XFormModifiers[this._iKeyName];
		var cnt = methods.length;
		for(var i = 0; i < cnt; i++) {
			if(typeof(methods[i]) == "function") {
				methods[i].call(this,xFormObject,entry);
			}
		}
	}	
	//Instrumentation code end	
	return xFormObject;
}

/**
* @return XForm instance displayed on the view
**/
ZaTabView.prototype.getMyForm = function () {
	return this._localXForm;
}

/**
* @return XModel instance controlled by the XForm on the view
**/
ZaTabView.prototype.getMyModel = function () {
	return this._localXModel;
}


/**
* @method getObject returns the object contained in the view
* before returning the object this updates the object attributes with 
* tha values from the form fields 
**/
ZaTabView.prototype.getObject =
function() {
	return this._containedObject;
}

/**
* @method setObject sets the object contained in the view
* @param entry - ZaItem object to display
**/
ZaTabView.prototype.setObject =
function(entry) {
	this._containedObject = new Object();
	this._containedObject.attrs = new Object();
	this._containedObject.type = entry.type;
	this._containedObject.name = entry.name;
	
	if(entry.id)
		this._containedObject.id = entry.id;
	
	if(entry.rights)
		this._containedObject.rights = entry.rights;
	
	if(entry.setAttrs)
		this._containedObject.setAttrs = entry.setAttrs;
	
	if(entry.getAttrs)
		this._containedObject.getAttrs = entry.getAttrs;
		
	if(entry._defaultValues)
		this._containedObject._defaultValues = entry._defaultValues;
		
	for (var a in entry.attrs) {
		if(entry.attrs[a] instanceof Array) {
			this._containedObject.attrs[a] = [].concat(entry.attrs[a]);
		} else {
			this._containedObject.attrs[a] = entry.attrs[a];
		}
	}
	
	
	if(!entry[ZaModel.currentTab])
		this._containedObject[ZaModel.currentTab] = "1";
	else
		this._containedObject[ZaModel.currentTab] = entry[ZaModel.currentTab];
		
	this._localXForm.setInstance(this._containedObject);
	
	this.formDirtyLsnr = new AjxListener(ZaApp.getInstance().getCurrentController(), ZaXFormViewController.prototype.handleXFormChange);
	this._localXForm.addListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, this.formDirtyLsnr);
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, this.formDirtyLsnr);	
}

ZaTabView.ObjectModifiers = {} ;
ZaTabView.prototype.modifyContainedObject = function () {
     if(ZaTabView.ObjectModifiers[this._iKeyName]) {
		var methods = ZaTabView.ObjectModifiers[this._iKeyName];
		var cnt = methods.length;
		for(var i = 0; i < cnt; i++) {
			if(typeof(methods[i]) == "function") {
				methods[i].call(this);
			}
		}
	}
}

ZaTabView.prototype.setEnabled = 
function(enable) {
	//abstract. This method may be depriicated in near future
}

/**
* @param isD Boolean - flag indicates whether data on the form ahs been modified by user
**/
ZaTabView.prototype.setDirty = 
function (isD) {
	ZaApp.getInstance().getCurrentController().setDirty(isD);
	this._isDirty = isD;
	//reset the domain lists
	EmailAddr_XFormItem.resetDomainLists.call (this);
}

ZaTabView.prototype.getCurrentTab = 
function() {
	return this._containedObject[ZaModel.currentTab];
}

ZaTabView.prototype.getCurrentSubTab = 
function() {
	var subtab = this._currentSubTab[this._containedObject[ZaModel.currentTab]];
	if (subtab == null) {
		subtab = this._currentSubTab[this._containedObject[ZaModel.currentTab]] = ZaTabView.DEFAULT_TAB;
	}
	return subtab;
}

ZaTabView.prototype.swithTab = 
function (value) {
	this._containedObject[ZaModel.currentTab] = value;
	this._localXForm.refresh();
}

ZaTabView.prototype.switchSubTab =
function(value) {
	this._currentSubTab[this._containedObject[ZaModel.currentTab]] = value;
}

ZaTabView.prototype.isDirty = 
function () {
	return this._isDirty;
}

ZaTabView.prototype.getTabToolTip =
function () {
	if (this._containedObject && this._containedObject.name && this._containedObject.type) {
		return	ZaMsg.TBB_Edit + " " +  this._containedObject.type + " " + this._containedObject.name ;
	}else{
		return "" ;
	}
}

ZaTabView.prototype.getTabIcon = 
function () {
	if (this._containedObject && this._containedObject.type) {
		return this._containedObject.type ;
	}else{
		return "" ;
	}
}

ZaTabView.prototype.getTabTitle =
function () {
	if (this._containedObject && this._containedObject.name) {
		return this._containedObject.name ;
	}else{
		return ZaMsg.TBB_New;
	}
}

//this method will be called whenever the item object of the view is updated
//it should be called in the setObject function of the view class
ZaTabView.prototype.updateTab =
function () {
	var tab = this.getAppTab ();
	if (tab) {
		tab.resetLabel (this.getTabTitle()) ;
		tab.setImage (this.getTabIcon());
		tab.setToolTipContent (this.getTabToolTip()) ;
	}
}

ZaTabView.prototype.getAppTab =
function () {
	return ZaApp.getInstance().getTabGroup().getTabById(this.__internalId) ;
}

/**
 * This method checks if a tab or a view should be enabled based on given list of attributes and rights.
 * If current admin has read permission on any of the attribues, or has any of the provided rights the method returns TRUE
 */
ZaTabView.isTAB_ENABLED = function (entry, attrsArray, rightsArray) {
	if(!entry)
		return true;
		
	if(AjxUtil.isEmpty(attrsArray) && AjxUtil.isEmpty(rightsArray))
		return true;
		
	if(!AjxUtil.isEmpty(attrsArray)) {
		var cntAttrs = attrsArray.length;
		for(var i=0; i< cntAttrs; i++) {
			if(ZaItem.hasReadPermission(attrsArray[i],entry)) {
				return true;
			}
		}
	} 
	
	if(!AjxUtil.isEmpty(rightsArray)) {
		var cntRights = rightsArray.length;
		for(var i=0; i< cntRights; i++) {
			if(ZaItem.hasRight(rightsArray[i],entry)) {
				return true;
			}
		}
	}
	
	return false; 
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaXDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class 
* @contructor 
* @extends DwtDialog
* @author Greg Solovyev
* @param parent
* @param w (width)
* @param h (height)
**/

ZaXDialog = function(parent,className, title, w, h,iKeyName, contextId) {
	if (arguments.length == 0) return;
	this._iKeyName = iKeyName;	
	var clsName = className || "DwtDialog";
	if(!this._standardButtons)
		this._standardButtons = [DwtDialog.OK_BUTTON];
	if(!this._extraButtons) {
		var helpButton = new DwtDialog_ButtonDescriptor(ZaXDialog.HELP_BUTTON, ZaMsg.TBB_Help, DwtDialog.ALIGN_LEFT, new AjxCallback(this, this._helpButtonListener));
		this._extraButtons = [helpButton];
	}
	
	this._contextId = contextId || Dwt.getNextId(ZaId.DLG_UNDEF);
	if (this.supportMinimize) {
        this._supportMinimize = true;
    }
	DwtDialog.call(this, {
		parent:parent, 
		className:clsName, 
		title:title, 
		standardButtons:this._standardButtons,
		extraButtons:this._extraButtons,
		id:ZaId.getDialogId(this._contextId)
	});
    if (this._supportMinimize) {
        this.addMiniIcon();
        this.addPopdownListener(new AjxListener(this, this.popdownHookListner));
    }
	this._app = ZaApp.getInstance();
	this._localXForm = null;
	this._localXModel = null;
	this._drawn = false;
	this._containedObject = null;	

	if (!w) {
		this._contentW = "500px";
	} else {
		this._contentW = w;
	}
	
	if(!h) {
		this._contentH = "350px";
	} else {
		this._contentH = h;
	}		
	
	this._pageDiv = document.createElement("div");
	this._pageDiv.className = "ZaXWizardDialogPageDiv";
	this._pageDiv.style.width = this._contentW;
	this._pageDiv.style.height = this._contentH;
	this._pageDiv.style.overflow = "auto";
	this._pageDiv.style["overflow-y"] = "auto";
	this._pageDiv.style["overflow-x"] = "auto";	

	this._createContentHtml();
	this._helpURL = ZaXDialog.helpURL;	
}
ZaXDialog.helpURL = ZaUtil.HELP_URL;
ZaXDialog.prototype = new DwtDialog;
ZaXDialog.prototype.constructor = ZaXDialog;

ZaXDialog.TEMPLATE = "admin.Widgets#ZaBaseDialog";
ZaXDialog.prototype.supportMinimize = false;
ZaXDialog.prototype.registerFinishMethod = false;
ZaXDialog.prototype.miniType = 1; // default is working in process
ZaXDialog.prototype.cacheDialog = true;
ZaXDialog.prototype._createHtmlFromTemplate =
function(templateId, data) {
    if (this._supportMinimize) {
        templateId = ZaXDialog.TEMPLATE;
    }
	DwtDialog.prototype._createHtmlFromTemplate.call(this, templateId, data);
    this._minEl =  document.getElementById(data.id+"_minimize");
};

ZaXDialog.prototype.addMiniIcon =
function () {
    if (this._minEl) {
        this._minEl.innerHTML = AjxImg.getImageHtml("CollapseRight");
	    this._minEl.onclick = AjxCallback.simpleClosure(ZaXDialog.prototype.__handleMinClick, this);
    }
}
ZaXDialog.prototype.setTitleWidthForIE =
function () {
    var titleWidth = (this._contentW || "500px" ).replace("px","");
    titleWidth -= (24+5*2);    //24px is width for mini icon, 5*2px for two padding

    if (titleWidth > 0) {
    //TODO: can extract this part as a function named setTitleWidth(), if we need to set FF/Chrome 's width in the future.
        titleWidth = Dwt.__checkPxVal(titleWidth);
        var titleId = this._htmlElId + "_title";
        var titleElement = document.getElementById(titleId);
        if (titleElement) {
            titleElement.style.width = titleWidth;
        }
    }
}

ZaXDialog.prototype.getTaskItem = function() {
    var cacheName = this.getCacheName? this.getCacheName() : "";
    if (!cacheName) {
        cacheName = this._iKeyName ? this._iKeyName : this.toString();
    }

    var title = this.getTitle();
    if (!title) {
        title = this.toString();
    }

    var viewForPopup;
    if (this.miniType == 1) {
        viewForPopup = this.constructor;
    } else {
        viewForPopup = this;
    }
    var taskItem = new ZaTaskItem(viewForPopup, cacheName, title, this.getObject(), this.getBounds(), this.miniType, undefined, this.getFinishBtnCallback(),this.cacheDialog);
    return taskItem;
}

ZaXDialog.prototype.getFinishBtnCallback = function (finishBtnId) {
    if (!this.registerFinishMethod)
        return;

    if (!finishBtnId)
        finishBtnId = DwtWizardDialog.FINISH_BUTTON;

    var button;
    button = this._buttonDesc[finishBtnId];
    if (!button) {
        finishBtnId = DwtDialog.OK_BUTTON;
        button = this._buttonDesc[finishBtnId];
    }

    if (!button)
        return;

    if (!button.callback)
        return;

    return {id: finishBtnId, callback: button.callback};
}
ZaXDialog.prototype.popdownHookListner =
function() {
    if (!this._inMin) {
	    var task = this.getTaskItem();
        ZaZimbraAdmin.getInstance().getTaskController().removeTask(task);
    }
}

ZaXDialog.prototype.__handleMinClick =
function () {
    var task = this.getTaskItem();
    ZaZimbraAdmin.getInstance().getTaskController().addTask(task);
    this._inMin = true;
    this.popdown();
    this._inMin = false;
}

ZaXDialog.prototype.getTitle =
function () {
    return this._title;
}


/**
* A map of funciton references. Functions in this map are called one after another from 
* {@link #getMyXForm} method.
* The functions are called on the current instance of the dialog. 
* One parameter is passed to each function: a reference to the XForms object defenition
*  ZaXDialog
* @see #getMyXForm
**/
ZaXDialog.XFormModifiers = new Object();

/**
* 
**/
ZaXDialog.HELP_BUTTON = ++DwtDialog.LAST_BUTTON;


ZaXDialog.prototype.popup = 
function (loc) {
	DwtDialog.prototype.popup.call(this, loc);

    if(AjxEnv.isIE && this._supportMinimize) {
        //reset title width in IE, when the dialog has the minimize icon
        this.setTitleWidthForIE();
    }

	if (this._localXForm) {
		var el = this._localXForm.focusFirst();
        var kbMgr = this._shell.getKeyboardMgr();
        if (kbMgr && kbMgr.isEnabled()) {
            kbMgr.grabFocus(el);
        }
	}
};

/**
* public method _initForm
* @param xModelMetaData
* @param xFormMetaData
**/
ZaXDialog.prototype.initForm = 
function (xModelMetaData, xFormMetaData, defaultInstance) {
	if(xModelMetaData == null || xFormMetaData == null)
		throw new AjxException("Metadata for XForm and/or XModel are not defined", AjxException.INVALID_PARAM, "ZaXWizardDialog.prototype.initForm");
		
	this._localXModel = new XModel(xModelMetaData);
	this._localXForm = new XForm(xFormMetaData, this._localXModel, defaultInstance, this, ZaId.getDialogViewId(this._contextId));
	this._localXForm.setController(ZaApp.getInstance());
	this._localXForm.draw(this._pageDiv);	
	this._drawn = true;
}

ZaXDialog.prototype.getObject = 
function () {
	return this._containedObject;
}

/**
* sets the object contained in the view
**/
ZaXDialog.prototype.setObject =
function(entry) {
	this._containedObject = entry;
	this._localXForm.setInstance(this._containedObject);
}

/**
* This method walks the map {@link #XFormModifiers} and calls each function in the map.
* The functions are called on the current instance of the dialog. 
* One parameter is passed to each function: a reference to the XForms object defenition
*  ZaXDialog
**/
ZaXDialog.prototype.getMyXForm = 
function(entry) {	
	var xFormObject = new Object();
	//Instrumentation code start
	if(ZaXDialog.XFormModifiers[this._iKeyName]) {
		var methods = ZaXDialog.XFormModifiers[this._iKeyName];
		var cnt = methods.length;
		for(var i = 0; i < cnt; i++) {
			if(typeof(methods[i]) == "function") {
				methods[i].call(this,xFormObject,entry);
			}
		}
	}	
	//Instrumentation code end	
	return xFormObject;
}

ZaXDialog.prototype.setDirty = function () {
	//override
}
/**
*  ZaXDialog
* @private
**/
ZaXDialog.prototype._createContentHtml =
function () {

	this._table = document.createElement("table");
	this._table.border = 0;
    if (this._contentW)
	    this._table.width=this._contentW;
	this._table.cellPadding = 0;
	this._table.cellSpacing = 0;
	Dwt.associateElementWithObject(this._table, this);
	this._table.backgroundColor = DwtCssStyle.getProperty(this.parent.getHtmlElement(), "background-color");
	
	var row2; //page
	var col2;
	row2 = this._table.insertRow(0);
	row2.align = "left";
	row2.vAlign = "middle";
	
	col2 = row2.insertCell(row2.cells.length);
	col2.align = "left";
	col2.vAlign = "middle";
    if (this._contentW)
	    col2.width = this._contentW;
	col2.appendChild(this._pageDiv);

	this._getContentDiv().appendChild(this._table);
}

/**
*  ZaXDialog
* @private
**/
ZaXDialog.prototype._helpButtonListener =
function() {
	window.open(this._helpURL);
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaXWizardDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* Creates a new wizard dialog.
* @class
* @constructor
* @extends ZaXDialog
* @param parent - parent control {shell} 
* @param className {String} CSS class name
* @param title {String} dialog title
* @param w {Number} content area width
* @param h {Number} content area height
* @param contextId (String) prefix id
* This class represents a reusable wizard dialog. 
* After calling the constructor, define metadata for and call initForm to draw the contents of the dialog
*/
ZaXWizardDialog = function(parent,className, title, w, h,iKeyName, extraButtons, contextId) {
	if (arguments.length == 0) return;

	this._standardButtons = [DwtDialog.CANCEL_BUTTON];

	if(extraButtons) {
		this._extraButtons = extraButtons;
	} else {
		var helpButton = new DwtDialog_ButtonDescriptor(ZaXWizardDialog.HELP_BUTTON, ZaMsg.TBB_Help, DwtDialog.ALIGN_LEFT, new AjxCallback(this, this._helpButtonListener));
		var nextButton = new DwtDialog_ButtonDescriptor(ZaXWizardDialog.NEXT_BUTTON, AjxMsg._next, DwtDialog.ALIGN_RIGHT, new AjxCallback(this, this.goNext));
		var prevButton = new DwtDialog_ButtonDescriptor(ZaXWizardDialog.PREV_BUTTON, AjxMsg._prev, DwtDialog.ALIGN_RIGHT, new AjxCallback(this, this.goPrev));
		var finishButton = new DwtDialog_ButtonDescriptor(ZaXWizardDialog.FINISH_BUTTON, AjxMsg._finish, DwtDialog.ALIGN_RIGHT, new AjxCallback(this, this.finishWizard));
		this._extraButtons = [helpButton,prevButton,nextButton,finishButton];
	}
	this._contextId = contextId? contextId:ZaId.DLG_UNDEF;
    if (w)
        w= this._correntWidth(w);
	ZaXDialog.call(this, parent,className,title, w, h,iKeyName, this._contextId);
	this._pageIx = 1;
	this._currentPage = 1;
}

ZaXWizardDialog.prototype = new ZaXDialog;
ZaXWizardDialog.prototype.constructor = ZaXWizardDialog;

//Z-index contants for the tabbed view contents are based on Dwt z-index constants
ZaXWizardDialog.Z_ACTIVE_PAGE = Dwt.Z_VIEW+10;
ZaXWizardDialog.Z_HIDDEN_PAGE = Dwt.Z_HIDDEN;
ZaXWizardDialog.Z_TAB_PANEL = Dwt.Z_VIEW+20;
ZaXWizardDialog.Z_CURTAIN = Dwt.Z_CURTAIN;

ZaXWizardDialog.NEXT_BUTTON = DwtWizardDialog.NEXT_BUTTON;
ZaXWizardDialog.PREV_BUTTON = DwtWizardDialog.PREV_BUTTON
ZaXWizardDialog.FINISH_BUTTON = DwtWizardDialog.FINISH_BUTTON;
ZaXWizardDialog.HELP_BUTTON = ++DwtDialog.LAST_BUTTON;

//public methods
ZaXWizardDialog.prototype.toString = 
function () {
	return "ZaXWizardDialog";
}
/**
* member of  ZaXWizardDialog
* closes the wizard dialog
**/
ZaXWizardDialog.prototype.popdown = 
function () {
	DwtDialog.prototype.popdown.call(this);
	//clear the newAccountWizard._domains obj
	if (this._domains) {
		this._domains = {} ;
	}
}

ZaXWizardDialog.prototype._correntWidth = function (w) {
    if (this.supportMinimize) {
        if (typeof(w) == "number") {
            return w + 100;
        } else if (typeof(w) == "string") {
            var number = parseInt(w);
            if (!isNaN(number)) {
                number = number + 155;
                w = number + "px";
                return w;
            }
            return w;
        } else {
            return w;
        }
    } else {
        return w;
    }
}

/**
* pageKey is the value returned from {@link ZaXWizardDialog#addPage} method
* This method is called by DwtWizardPage#switchToNextPage
* and DwtWizardPage#switchToPrevPage
* @param pageKey - key to the page to be shown. 
**/
ZaXWizardDialog.prototype.goPage = 
function(pageKey) {
	//reset the domain lists
	EmailAddr_XFormItem.resetDomainLists.call (this);
	//release the focus to make the cursor visible
	this._localXForm.releaseFocus();
	this._localXModel.setInstanceValue(this._containedObject,ZaModel.currentStep, pageKey);
	if(this._localXForm.tabGroupIDs[pageKey])
		this._localXForm.focusFirst(this._localXForm.tabGroupIDs[pageKey]);
	else
		this._localXForm.focusFirst();
    this._localXForm.refresh () ; //some wizard value is not refreshed. See bug28704 comment #11
}

/**
* member of  ZaXWizardDialog
* switches to the next page in the wizard
**/
ZaXWizardDialog.prototype.goNext = 
function() {
	this.goPage(this._containedObject[ZaModel.currentStep]+1);
}

/**
* member of  ZaXWizardDialog
* switches to the previous page in the wizard
**/
ZaXWizardDialog.prototype.goPrev = 
function() {
	this.goPage(this._containedObject[ZaModel.currentStep]-1);
}

/**
* member of  ZaXWizardDialog
* called when "Finish" button is clicked. Calls @see #popdown
**/
ZaXWizardDialog.prototype.finishWizard = 
function() {
	this.popdown();	
}
/**
* member of  ZaXWizardDialog
* @return current step number
**/
ZaXWizardDialog.prototype.getCurrentStep = 
function() {
	return this._containedObject[ZaModel.currentStep];	
}

/**
* member of  ZaXWizardDialog
* @param wizPage - instance of DwtPropertyPage 
* @return the key for the added page. This key can be used to retreive the tab using @link getPage.
**/
ZaXWizardDialog.prototype.addPage =
function (stepTitle) {
	var pageKey = this._pageIx++;	
	return pageKey;
}

/**
* member of  ZaXWizardDialog
* @param xModelMetaData
* @param xFormMetaData
**/
ZaXWizardDialog.prototype.initForm = 
function (xModelMetaData, xFormMetaData,entry) {
	if(xModelMetaData == null || xFormMetaData == null)
		throw new AjxException(ZaMsg.ERROR_METADATA_NOT_DEFINED, AjxException.INVALID_PARAM, "ZaXWizardDialog.prototype.initForm");
		
	this._localXModel = new XModel(xModelMetaData);
	this._localXForm = new XForm(xFormMetaData, this._localXModel, entry, this, ZaId.getDialogViewId(this._contextId)); 
	this._localXForm.setController(ZaApp.getInstance());
	this._localXForm.draw(this._pageDiv);
	this._drawn = true;
}

ZaXWizardDialog.prototype.initForm =
function (xModelMetaData, xFormMetaData,entry) {
	if(xModelMetaData == null || xFormMetaData == null)
		throw new AjxException(ZaMsg.ERROR_METADATA_NOT_DEFINED, AjxException.INVALID_PARAM, "ZaXWizardDialog.prototype.initForm");
	// Hook here. Replace the _OUTPUT_ items
    var newXFormMetaData = {items:[]};
    var stepChoices = xFormMetaData.items[0];
    stepChoices.type = _STEPCHOICE_;
    stepChoices.containerCssClass = "step_container";
    stepChoices.colSpan = 1;
    var content = xFormMetaData.items[3];
    var contentContainerCssClass = content.containerCssClass;
    if (contentContainerCssClass)
        contentContainerCssClass += " step_body_container";
    else
        contentContainerCssClass = "step_body_container";
    content.containerCssClass = contentContainerCssClass;
    newXFormMetaData.tableCssStyle = "width:100%;height:100%";
    newXFormMetaData.numCols = 2;
    newXFormMetaData.colSizes = ["150px", "*"];
    newXFormMetaData.items =[
                stepChoices,
                content
            ];
	this._localXModel = new XModel(xModelMetaData);
	this._localXForm = new XForm(newXFormMetaData, this._localXModel, entry, this, ZaId.getDialogViewId(this._contextId));
	this._localXForm.setController(ZaApp.getInstance());
	this._localXForm.draw(this._pageDiv);
	this._drawn = true;
}
ZaXWizardDialog.prototype.supportMinimize = true;
/**
* member of  ZaXWizardDialog
* @return the object contained in the view
* before returning the object this updates the object attributes with 
* tha values from the form fields 
**/
ZaXWizardDialog.prototype.getObject =
function() {
	return this._containedObject;
}

/**
* member of  ZaXWizardDialog
* sets the object contained in the view
* @param entry - ZaDomain object to display
**/
ZaXWizardDialog.prototype.setObject =
function(entry) {
	this._containedObject = new Object();
	this._containedObject.attrs = new Object();

	for (var a in entry.attrs) {
		this._containedObject.attrs[a] = entry.attrs[a];
	}
	
	this._localXForm.setInstance(this._containedObject.attrs);
}
}
if (AjxPackage.define("zimbraAdmin.common.LDAPURL_XFormItem")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* XFormItem class: LDAP URL
* this item is used in the Admin UI to display LDAP URL fields like LDAP URL for GAL Search and LDAP URL  for Authentication
* @class LDAPURL_XFormItem
* @constructor LDAPURL_XFormItem
* @author Greg Solovyev
**/
LDAPURL_XFormItem = function() {}
XFormItemFactory.createItemType("_LDAPURL_", "ldapurl", LDAPURL_XFormItem, Composite_XFormItem);
LDAPURL_XFormItem.prototype.numCols = 5;
LDAPURL_XFormItem.prototype.nowrap = true;
LDAPURL_XFormItem.prototype._protocolPart = "ldap://";
LDAPURL_XFormItem.prototype._serverPart = "";
LDAPURL_XFormItem.prototype._portPart = "389";
LDAPURL_XFormItem.prototype.defSSLPort = "636";
LDAPURL_XFormItem.prototype.defPort = "389";
LDAPURL_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];
LDAPURL_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
LDAPURL_XFormItem.prototype.initializeItems = function () {
	var ldapPort = this.getInheritedProperty("ldapPort");
	var ldapSSLPort = this.getInheritedProperty("ldapSSLPort");
	this.defSSLPort = ldapSSLPort ? ldapSSLPort : "636";
    this.defPort = ldapPort ? ldapPort : "389";


    var instance = this.getForm().getInstance () ;
    if (instance && instance [ZaDomain.A2_allowClearTextLDAPAuth] == "FALSE" )  {
        //force SSL  by default
        this._protocolPart = "ldaps://";
	    this._portPart = this.defSSLPort;
    } else {
        this._protocolPart = "ldap://";
        this._portPart = this.defPort ;
    }

	Composite_XFormItem.prototype.initializeItems.call(this);
	
    this.items[0].valueChangeEventSources = [this.getRefPath()];
    this.items[1].valueChangeEventSources = [this.getRefPath()];
    this.items[3].valueChangeEventSources = [this.getRefPath()];
}

LDAPURL_XFormItem.prototype.items = [
	{type:_OUTPUT_, width:"40px", ref:".", labelLocation:_NONE_, label:null,
		getDisplayValue:function(itemVal) {
             var val ;

            if(itemVal!=null && itemVal.length>0) {
                var URLChunks = itemVal.split(/(:\/\/)/);
                if(AjxEnv.isIE) {
                    if(URLChunks[0] == "ldap" || URLChunks[0] == "ldaps")
                        val = URLChunks[0] + "://";
                } else {
                    if(URLChunks.length==3) {
                        val = URLChunks[0] + URLChunks[1];
                    }
                }
                this.getParentItem()._protocolPart = val;
            } else if (this.getParentItem()._protocolPart != null) {
                val =  this.getParentItem()._protocolPart ;
            } else {
                val = "ldap://";
            }
            
            return val;
		}
	},
	{type:_TEXTFIELD_, width:"200px", forceUpdate:true, ref:".", labelLocation:_NONE_, label:null,
		required:true,
	 	visibilityChecks:[],
	 	enableDisableChecks:[],		
		getDisplayValue:function (itemVal) {
			var val = "";
			if(itemVal) {
				var URLChunks = itemVal.split(/[:\/]/);
				if(AjxEnv.isIE) {
				    // bug 68747, IE's split's result length is not fixed, don't use it
				    var urlPortPair = itemVal.substring(7); //trim the prefix "ldap://"
				    var chunks = urlPortPair.split(":");
				    val = chunks[0];
				} else {
					if(URLChunks.length >= 4) {
						val = URLChunks[3];
					} 
				}
				this.getParentItem()._serverPart = val;
			} 
			return val;	
		},
		elementChanged:function(serverPart, instanceValue, event) {
			this.getParentItem()._serverPart = serverPart;
			var val = this.getParentItem()._protocolPart + serverPart+ ":" + this.getParentItem()._portPart;
			this.getForm().itemChanged(this.getParentItem(), val, event);
		}
	},
	{type:_OUTPUT_, width:"5px", labelLocation:_NONE_, label:null,value:":", ref:null},
	{type:_TEXTFIELD_,width:"40px",forceUpdate:true, ref:".", labelLocation:_NONE_, label:null, 
	 	visibilityChecks:[],
	 	enableDisableChecks:[],		
		getDisplayValue:function (itemVal) {
			var val ;
           
            if(itemVal) {
				var URLChunks = itemVal.split(/[:\/]/);
				
				if(AjxEnv.isIE) {
				    // bug 68747, IE's split's result length is not fixed, don't use it
				    var urlPortPair = itemVal.substring(7); //trim the prefix "ldap://"
				    var chunks = urlPortPair.split(":");
				    val = chunks[1];
				} else {
					if(URLChunks.length >= 5) {
						val = URLChunks[4];
					}  
				}
				this.getParentItem()._portPart = val;
			} else if (this.getParentItem()._portPart) {
                val = this.getParentItem()._portPart ;
            } else {
                val = this.getParentItem().defPort;
            }
			return val;	
		},
		elementChanged:function(portPart, instanceValue, event) {
			this.getParentItem()._portPart = portPart;
			var val = this.getParentItem()._protocolPart + this.getParentItem()._serverPart+ ":" + portPart;
			this.getForm().itemChanged(this.getParentItem(), val, event);
		}
	},
	{type:_CHECKBOX_,width:"40px",containerCssStyle:"width:40px", forceUpdate:true, ref:".", labelLocation:_NONE_, label:null, 
		visibilityChecks:[], subLabel:"", align:_RIGHT_,
	 	enableDisableChecks:[],
		getDisplayValue:function (itemVal) {
            var instance = this.getForm().getInstance () ;
            if ((itemVal==null || itemVal.length<=0) //make sure it is a new URL input
                    && (instance [ZaDomain.A2_allowClearTextLDAPAuth] && instance [ZaDomain.A2_allowClearTextLDAPAuth] == "FALSE" )) {
                //check the SSL and define the default SSL URL value
                this.getParentItem()._protocolPart = "ldaps://";
				this.getParentItem()._portPart = this.getParentItem().defSSLPort;
                return true ; //force SSL
            }                                   

            var val = false;
			var protocol = "ldap://";
			if(itemVal!=null && itemVal.length>0) {
				var URLChunks = itemVal.split(/[:\/]/);
				protocol = URLChunks[0] + "://";				
			}
			this.getParentItem()._protocolPart = protocol;
			if(protocol.length==8) {
				val = true;                           
			}
			return val;			
		},
		elementChanged:function(isChecked, instanceValue, event) {
			if(isChecked) {
				this.getParentItem()._protocolPart = "ldaps://";
				this.getParentItem()._portPart = this.getParentItem().defSSLPort;
			} else {
				this.getParentItem()._protocolPart = "ldap://";
				this.getParentItem()._portPart = this.getParentItem().defPort;
			}
			var val = this.getParentItem()._protocolPart + this.getParentItem()._serverPart+ ":" + this.getParentItem()._portPart;
			this.getForm().itemChanged(this.getParentItem(), val, event);
		}
	}
];

}
if (AjxPackage.define("zimbraAdmin.common.HostPort_XFormItem")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* XFormItem class: HOST PORT
* this item is used in the Admin UI to display Host name fields like Relay MTA host
* @class HostPort_XFormItem
* @constructor HostPort_XFormItem
* @author Greg Solovyev
**/
HostPort_XFormItem = function() {}
XFormItemFactory.createItemType("_HOSTPORT_", "hostport", HostPort_XFormItem, Composite_XFormItem);
HostPort_XFormItem.prototype.numCols = 3;
HostPort_XFormItem.prototype.nowrap = true;
HostPort_XFormItem.prototype._serverPart = "";
HostPort_XFormItem.prototype._portPart = "";

HostPort_XFormItem.prototype.items = [
	{type:_TEXTFIELD_, width:"200px", forceUpdate:true, ref:".", labelLocation:_NONE_, label:null,
		visibilityChecks:[],enableDisableChecks:[],
		required:true,
		getDisplayValue:function (itemVal) {
			var val = "";
			if(itemVal) {
				var URLChunks = itemVal.split(":");
				if(URLChunks.length >= 2) {
					val = URLChunks[0];
				} else {
					val = itemVal;
				}
				this.getParentItem()._serverPart = val;
			} 
			return val;	
		},
		elementChanged:function(serverPart, instanceValue, event) {
			this.getParentItem()._serverPart = serverPart;
			var val = "";
			if(serverPart) {
				val = serverPart;
			}
			if(this.getParentItem()._portPart) {
				val += ":";
				val += this.getParentItem()._portPart;				
			}
			this.getForm().itemChanged(this.getParentItem(), val, event);
		},
		onClick: "Super_HostPort_XFormItem.handleClick",
		onMouseout: "Super_HostPort_XFormItem.handleMouseout"
	},
	{type:_OUTPUT_, width:"5px", labelLocation:_NONE_, label:null,value:":"},
	{type:_TEXTFIELD_,width:"40px",forceUpdate:true, ref:".", labelLocation:_NONE_, label:null,
		visibilityChecks:[],enableDisableChecks:[],
		getDisplayValue:function (itemVal) {
			var val = "";
			if(itemVal) {
				var URLChunks = itemVal.split(":");
				if(URLChunks.length == 2) {
					val = URLChunks[1];
				} else {
					val = "";
				}
				this.getParentItem()._portPart = val;
			} 
			return val;	
		},
		elementChanged:function(portPart, instanceValue, event) {
			this.getParentItem()._portPart = portPart;
			var val = "";
			if(this.getParentItem()._serverPart) {
				val = this.getParentItem()._serverPart;
			}
			if(portPart) {
				val +=":";
				val+=portPart;
			}
			this.getForm().itemChanged(this.getParentItem(), val, event);
		}
	}
];
}
if (AjxPackage.define("zimbraAdmin.common.MailQuota_XModelItem")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* XModelItem class
*
* @class MailQuota_XModelItem
* @constructor MailQuota_XModelItem
* @author Greg Solovyev
**/
MailQuota_XModelItem = function (){}
XModelItemFactory.createItemType("_MAILQUOTA_", "mailquota", MailQuota_XModelItem);
MailQuota_XModelItem.prototype.validateType = XModelItem.prototype.validateNumber;
MailQuota_XModelItem.prototype.getterScope = _MODELITEM_;
MailQuota_XModelItem.prototype.setterScope = _MODELITEM_;
MailQuota_XModelItem.prototype.getter = "getValue";
MailQuota_XModelItem.prototype.setter = "setValue";
MailQuota_XModelItem.prototype.maxInclusive = 8796093022207;
MailQuota_XModelItem.prototype.minInclusive = 0;

MailQuota_XModelItem.prototype.getValue =  function(ins, current, ref) {
	var value = null;
	if(eval("ins." + ref) != null) {
	  value = eval("ins." + ref) / 1048576;
	  if(value != Math.round(value)) {
		 value = Number(value).toFixed(2);
	  }
	}
	if(typeof value == "number" && value == 0)
		value = "0";	
	return value;
}

MailQuota_XModelItem.prototype.setValue = function(value, instance, current, ref) {
	var pathParts = new Array();
	var val = Math.round(value * 1048576);
	if(ref.indexOf(".") >= 0) {
		pathParts = ref.split(".");
	} else if (ref.indexOf("/") >=0) {
		pathParts = ref.split("/");
	} else {
		instance[ref] = val
		return val;
	}
	var cnt = pathParts.length-1;
	var obj = instance[pathParts[0]];
	for(var ix=1; ix<cnt; ix++) {
		obj = obj[pathParts[ix]];
	}
	obj[pathParts[cnt]] = val;
	return val;
}

/**
* _MAILQUOTA_2_ XModel item type
**/
MailQuota2_XModelItem = function (){}
XModelItemFactory.createItemType("_MAILQUOTA_2_", "mailquota_2", MailQuota2_XModelItem);
MailQuota2_XModelItem.prototype.getterScope = _MODELITEM_;
MailQuota2_XModelItem.prototype.getter = "getValue";

MailQuota2_XModelItem.prototype.getValue = function(instance, current, ref) {
	var value = this.getLocalValue(instance, current, ref);
	if (value == null) value = this.getSuperValue(instance, current, ref);
	if(value <=0) 
		value = ZaMsg.Unlimited;
	return value;
}

MailQuota2_XModelItem.prototype.getSuperValue = function(ins, current, ref) {
	if (!ins) { return null; }
	var _ref  = ref  ? ref.replace("/", ".") : this.ref.replace("/", ".");
//	var _ref = this.ref.replace("/", ".");
	var value = (eval("ins._defaultValues." + _ref) != null) ? Number(eval("ins._defaultValues." + _ref) / 1048576).toFixed(0) : 0;
	return value;
}
MailQuota2_XModelItem.prototype.getLocalValue = function(ins, current, ref) {
	if (!ins) { return null; }
	var _ref  = ref  ? ref.replace("/", ".") : this.ref.replace("/", ".");
//	var _ref = this.ref.replace("/", ".");
	var value = (eval("ins." + _ref) != null) ? Number(eval("ins." + _ref) / 1048576).toFixed(0) : null;
	return value;
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaSelectRadioXFormItem")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
*	_ZASELECT_RADIO_ form item type
**/
ZaSelectRadio_XFormItem = function () {}
XFormItemFactory.createItemType("_ZASELECT_RADIO_", "zaselect_radio", ZaSelectRadio_XFormItem, Composite_XFormItem);
ZaSelectRadio_XFormItem.prototype.numCols=2;
ZaSelectRadio_XFormItem.prototype.colSizes=["275px","275px"];
ZaSelectRadio_XFormItem.prototype.nowrap = false;
ZaSelectRadio_XFormItem.prototype.labelWrap = true;
ZaSelectRadio_XFormItem.prototype.items = [];
ZaSelectRadio_XFormItem.prototype.labelWidth = "275px";

ZaSelectRadio_XFormItem.prototype.initializeItems = function() {
	var selectRef = this.getInheritedProperty("selectRef");
	var radioBoxLabel1 = this.getInheritedProperty("radioBoxLabel1");
	var radioBoxLabel2 = this.getInheritedProperty("radioBoxLabel2");
	var choices = this.getInheritedProperty("choices");	

	var radioBox1 = {type:_RADIO_, groupname:this.id+"zimlet_select_check_grp"+selectRef,ref:".",
		label:radioBoxLabel1, labelLocation:_RIGHT_,
		elementChanged:function(elementValue,instanceValue, event) {
			if(elementValue==true) {
				this.getForm().itemChanged(this.getParentItem(), null, event);	
			}
		},
		updateElement:function(value) {
			this.getElement().checked = !value;
		}
		
	};
	
	var radioBox2 = {type:_RADIO_, groupname:this.id+"zimlet_select_check_grp"+selectRef,ref:".",
		label:radioBoxLabel2, labelLocation:_RIGHT_ ,
		updateElement:function(value) {
			this.getElement().checked = value;
		},
		elementChanged:function(elementValue,instanceValue, event) {

		}
	};
		
	var selectChck = {
		type:_OSELECT_CHECK_,
		choices:choices,
		colSpan:3,
		ref:selectRef,
		width:"275px",
		onChange:function (value, event, form) {
			if (this.getParentItem() && this.getParentItem().getParentItem() && this.getParentItem().getParentItem().getOnChangeMethod()) {
				return this.getParentItem().getParentItem().getOnChangeMethod().call(this, value, event, form);
			} else {
				return this.setInstanceValue(value);
			}
		},
		forceUpdate:true,
		updateElement:function(value) {
			OSelect_XFormItem.prototype.updateElement.call(this, value);
		},
		cssStyle:"margin-bottom:5px;margin-top:5px;border:2px inset gray;"				
	};
	
	var selectChckGrp = {
		type:_GROUP_,
		numCols:3,
		colSizes:["130px","15px","130px"],
		items:[
			selectChck,
			{type:_DWT_BUTTON_,label:ZaMsg.SelectAll,width:"120px",
				onActivate:function (ev) {
					var lstElement = this.getParentItem().items[0];
					if(lstElement) {
						lstElement.selectAll(ev);
					}
				}
			},
			{type:_CELLSPACER_,width:"15px"},
			{type:_DWT_BUTTON_,label:ZaMsg.DeselectAll,width:"120px",
				onActivate:function (ev) {
					var lstElement = this.getParentItem().items[0];
					if(lstElement) {
						lstElement.deselectAll(ev);
					}
				}
			}
		]
		
	}
		
	this.items = [radioBox1,radioBox2,{type:_CELLSPACER_,width:this.labelWidth},selectChckGrp];
	
	
	Composite_XFormItem.prototype.initializeItems.call(this);
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaZimletSelectXFormItem")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
*	_ZA_ZIMLET_SELECT_ form item type
**/
ZaZimletSelect_XFormItem = function() {}
XFormItemFactory.createItemType("_ZA_ZIMLET_SELECT_", "za_zimlet_select", ZaZimletSelect_XFormItem, OSelect_Check_XFormItem)
ZaZimletSelect_XFormItem.prototype.initializeItems = function() {
    ZaZimletSelect_XFormItem.prototype.choicePrefixes=[
	{value:"!",label:ZaMsg.mandatory},
	{value:"-",label:ZaMsg.disabled},
	{value:"+",label:ZaMsg.enabled}
    ];
    OSelect_Check_XFormItem.prototype.initializeItems.call(this);     
}

ZaZimletSelect_XFormItem.prototype.onSubChoiceClick = function (itemNum, event, prefix) {
	event = event || window.event;
	this.subChoiceSelected(itemNum, event, prefix);
};

ZaZimletSelect_XFormItem.prototype.onSubChoiceDoubleClick = function (itemNum, event, prefix) {
	this.subChoiceSelected(itemNum, true, event, prefix);
}

ZaZimletSelect_XFormItem.prototype.subChoiceSelected = function (itemNum, event, prefix) {
	var value = this.getNormalizedValues()[itemNum];
	this.setPrefix(value, event, prefix);
}


ZaZimletSelect_XFormItem.prototype.getPrefixIndex = function (prefixValue) {
	if(!this._prefixIndexes) {
		this._prefixIndexes = {};
		var prefixes = this.getInheritedProperty("choicePrefixes");
		var cnt=prefixes.length;
		for(var i=0; i<cnt; i++) {
			this._prefixIndexes[prefixes[i].value] = i;
		} 
	}
	return this._prefixIndexes[prefixValue];	
}

ZaZimletSelect_XFormItem.prototype.getNormalizedInstanceValue = function () {
	var value = this.getInstanceValue();
	var normalizedValue = new Array();
	//make sure the returned value is a copy of the actual value
	if(typeof value == "string") {
		normalizedValue = new String(value);
	} else if(typeof value =="object" || value instanceof Array) {
		for(var a in value) {
			normalizedValue[a] = value[a];
		}
	}
	//make sure the returned value is an array
	if(normalizedValue) {
		if (normalizedValue instanceof String) {
			if (normalizedValue == "") 	
				normalizedValue = [];
			else
				normalizedValue = normalizedValue.split(",");
		}
	} 	
	
	//remove prefixes	
	var prefixes = this.getInheritedProperty("choicePrefixes");
	var numPrefixes = prefixes.length;
	var numValues = normalizedValue.length;
	for(var i=0;i<numValues;i++) {
		var hasPrefix=false;
		for(var j=0; j<numPrefixes;j++) {
			if(normalizedValue[i].substr(0,1)==prefixes[j].value) {
				normalizedValue[i] = {value:normalizedValue[i].substr(1),prefix:normalizedValue[i].substr(0,1)};
				hasPrefix=true;
				break;
			}
		}
		if(!hasPrefix) {
			normalizedValue[i] = {value:normalizedValue[i],prefix:""};
		}
	}
	return normalizedValue;	
}

ZaZimletSelect_XFormItem.prototype.setPrefix = function (newValue, event, prefix) {
	var normalizedValues = this.getNormalizedInstanceValue();
	var newValues = [];		
	var found = false;
	for (var i = 0; i < normalizedValues.length; i++) {
		if (normalizedValues[i].value == newValue) {
			normalizedValues[i].prefix = prefix;		
		}
		newValues.push([normalizedValues[i].prefix,normalizedValues[i].value].join(""));
	}
			
	if(!newValues || (newValues.length == 1 && newValues[0] == "")) {
		newValues = [];
	} 
	
	
	// if we have a modelItem which is a LIST type
	//	convert the output to the propert outputType
	var modelItem = this.getModelItem();
	if (modelItem && modelItem.getOutputType) {
		if (modelItem.getOutputType() == _STRING_) {
			newValues = newValues.join(modelItem.getItemDelimiter());
		}
	} else {
		// otherwise assume we should convert it to a comma-separated string
		newValues = newValues.join(",");
	}

	this.getForm().itemChanged(this, newValues, event);
}

ZaZimletSelect_XFormItem.prototype.setValue = function (newValue, clearOldValues, includeIntermediates, event) {
	var normalizedValues = this.getNormalizedInstanceValue();
	var newValues = [];		
	var found = false;
	var i;
	if(newValue instanceof Array || typeof newValue == "object") {
		for(a in newValue) {
			if(typeof newValue[a] == "string" && newValue[a].substr(0,1) != "+" && newValue[a].substr(0,1) != "-") {
				var prefix = "+";
				for (i = 0; i < normalizedValues.length; i++) {
					if (normalizedValues[i].value == newValue[a] && normalizedValues[i].prefix) {
						prefix = normalizedValues[i].prefix;
						normalizedValues.splice(i,1);
						break;					
					}
				}
				newValue[a] = prefix+newValue[a];
			}
			newValues.push(newValue[a]);
		}
	} else {
		for (i = 0; i < normalizedValues.length; i++) {
			if (normalizedValues[i].value == newValue) {
				found = true;
				break;					
			}
		}		
	
		if (found) {
			normalizedValues.splice(i, 1);
		} else {
			normalizedValues.push({value:newValue,prefix:"+"});
		}
	
		for (i = 0; i < normalizedValues.length; i++) {
			newValues.push(normalizedValues[i].prefix+normalizedValues[i].value);
		}
	}
		
	if(!newValues || (newValues.length == 1 && newValues[0] == "")) {
		newValues = []
	} 
	// if we have a modelItem which is a LIST type
	//	convert the output to the propert outputType
	var modelItem = this.getModelItem();
	if (modelItem && modelItem.getOutputType) {
		if (modelItem.getOutputType() == _STRING_) {
			newValues = newValues.join(modelItem.getItemDelimiter());
		}
	} else {
		// otherwise assume we should convert it to a comma-separated string
		newValues = newValues.join(",");
	}

	this.getForm().itemChanged(this, newValues, event);
}

ZaZimletSelect_XFormItem.prototype.getChoiceHTML = function (itemNum, value, label, cssClass) {
	var prefixes = this.getInheritedProperty("choicePrefixes");
	
	var ref = this.getFormGlobalRef() + ".getItemById('"+ this.getId()+ "')";
	var id = this.getId();
	var retVal = ["<tr><td class=", cssClass," onmouseover=\"", ref, ".showToolTip('", value, "',event||window.event)\",",
			      " onmouseout=\"",ref, ".hideToolTip(event||window.event)\">", label, "</td><td class=", cssClass, 
			      " onclick=\"",ref, ".onChoiceClick(", itemNum,", event||window.event)\"",
			      " ondblclick=\"",ref, ".onChoiceDoubleClick(", itemNum,", event||window.event)\" id='",id,"_choice_",itemNum,"'>",
				"<table cellspacing=0 cellpadding=0><tr><td><input type=checkbox id='",id,"_choiceitem_",itemNum,"'></td><td>",
				ZaMsg.Available,
				"</td></tr></table></td>"];
	for(var i=0; i<prefixes.length; i++) {
		retVal.push("<td class=",cssClass,
				" onclick=\"",ref, ".onSubChoiceClick(", itemNum, ", event||window.event, '",prefixes[i].value,"')\"",
				" ondblclick=\"",ref, ".onSubChoiceDoubleClick(", itemNum, ", event||window.event, '",prefixes[i].value,"')\" id='",id,"_choice_",itemNum,"_prefix_",i,"'>",
					"<table cellspacing=0 cellpadding=0><tr><td><input type=radio autocomplete='off' id='",id,"_radiochoiceitem_",itemNum,"_prefix_",i,"' name='zazimletselect_",id,"_radiogrp_",itemNum,"'></td><td>",
				prefixes[i].label,
				"</td></tr></table></td>");
	}
	retVal.push("</tr>");
	return retVal.join("");
}

ZaZimletSelect_XFormItem.prototype.showToolTip = function(zimletName, event) {
	var zimlet = ZaZimlet.zimlets[zimletName];
	var desc;
	if (!zimlet) {
		desc = "Unknown Zimlet";
	} else {
		// convert description variable to the readable text
		desc = ZaZimletListView.__processMessage(zimletName, zimlet.attrs[ZaZimlet.A_zimbraZimletDescription ]);
		if (desc.slice(0, 2) == "${") { // the zimlet main js is not yet loaded
			desc = ZaMsg.Zimlet_Description_Loading;
		}
	}
	var dwtEv = new DwtUiEvent(true);
	dwtEv.setFromDhtmlEvent(event);
	var shell = DwtShell.getShell(window);
	var tooltip = shell.getToolTip();
	var html = new Array(20);
	var idx = 0;
	html[idx++] = "<table cellpadding='0' cellspacing='0' border='0'>";
	html[idx++] = "<tr valign='center'><td colspan='2' align='left'>";
	html[idx++] = "<div style='white-space:nowrap; overflow:hidden;width:350'>";
	html[idx++] = "<table cellpadding='0' cellspacing='0' border='0' style='width:100%;'>";
	html[idx++] = "<tr valign='center' >";
	html[idx++] = "<td><b>" + AjxStringUtil.htmlEncode(zimletName) + "</b></td>";
	html[idx++] = "<td align='right'></td></tr>";
	html[idx++] = "<tr><td><hr style='border:none;border-top:1px solid black;height:0'></td><tr>";
	html[idx++] = "<tr><td>" + AjxStringUtil.htmlEncode(desc) + "</td></tr>";
	html[idx++] = "</table>"
	html[idx++] = "</div></td></tr>";
	html[idx++] = "</table>";
	tooltip.setContent(html.join(""));
	tooltip.popup(dwtEv.docX, dwtEv.docY, null, true);
}

ZaZimletSelect_XFormItem.prototype.hideToolTip = function(event) {
	var shell = DwtShell.getShell(window);
	var tooltip = shell.getToolTip();
	tooltip.popdown();
}

ZaZimletSelect_XFormItem.prototype.hiliteChoice = function (itemNum) {
	var chEl = this.getChoiceElements(itemNum);
	if(chEl) {
		var el = chEl[1]; // now the checkbox table is in the 2nd <td>
		el.className = this.getChoiceSelectedCssClass();
	
		var checks = el.getElementsByTagName("input");
		if (checks) {
			checks[0].checked = true;
			this.enableSubChoice(itemNum);
		}
	}
}

ZaZimletSelect_XFormItem.prototype.dehiliteChoice = function(itemNum) {
	var chEl = this.getChoiceElements(itemNum);
	if(chEl) {
		var el = chEl[1]; // now the checkbox table is in the 2nd <td>
		el.className = this.getChoiceCssClass();

		var checks = el.getElementsByTagName("input");
		if (checks) {
			checks[0].checked = false;
			this.disableSubChoice(itemNum);
		}
	}
}

ZaZimletSelect_XFormItem.prototype.hiliteSubChoice = function (itemNum, prefixIndex) {
	var id = [this.getId(),"_choice_",itemNum,"_prefix_",prefixIndex].join("");
	var chEl = this.getElement(id);
	if(chEl) {
		chEl.className = this.getChoiceSelectedCssClass();

		var checks = chEl.getElementsByTagName("input");
		if (checks) {
			checks[0].checked = true;
		}
	}
}

ZaZimletSelect_XFormItem.prototype.dehiliteSubChoice = function(itemNum, prefixIndex) {
	var id = [this.getId(),"_choice_",itemNum,"_prefix_",prefixIndex].join("");
	var chEl = this.getElement(id);
	if(chEl) {
		chEl.className = this.getChoiceCssClass();

		var checks = chEl.getElementsByTagName("input");
		if (checks) {
			checks[0].checked = false;
		}
	}
}

ZaZimletSelect_XFormItem.prototype.disableSubChoice = function (itemNum) {
	var prefixes = this.getInheritedProperty("choicePrefixes");
	for(var i=0; i<prefixes.length; i++) {
		var id = [this.getId(),"_choice_",itemNum,"_prefix_",i].join("");
		var chEl = this.getElement(id);
		if(chEl) {
			chEl.className = this.getChoiceCssClass() + "_disabled";

			var radios = chEl.getElementsByTagName("input");
			if (radios) {
				radios[0].disabled = true;
			}
		}
	}	
}

ZaZimletSelect_XFormItem.prototype.enableSubChoice = function (itemNum) {
	var prefixes = this.getInheritedProperty("choicePrefixes");
	for(var i=0; i<prefixes.length; i++) {
		var id = [this.getId(),"_choice_",itemNum,"_prefix_",i].join("");
		var chEl = this.getElement(id);
		if(chEl) {
			chEl.className = this.getChoiceCssClass();

			var radios = chEl.getElementsByTagName("input");
			if (radios) {
				radios[0].disabled = false;
			}
		}
	}
}


ZaZimletSelect_XFormItem.prototype.updateElement = function () {
	var element = this.getElement();
	
	element.innerHTML = this.getChoicesHTML();
	var normalizedValues = this.getNormalizedInstanceValue();
	this.clearAllHilites();
	if (normalizedValues) {	
		for (var i = 0; i < normalizedValues.length; i++) {
			var itemNum = this.getChoiceNum(normalizedValues[i].value);
			if (itemNum != -1) { 
				this.hiliteChoice(itemNum);
				if(normalizedValues[i].prefix != "") {
					this.hiliteSubChoice(itemNum,this.getPrefixIndex(normalizedValues[i].prefix));
				}
			} 
		}
	}
    this.updateEnabledDisabled();
}


ZaZimletSelect_XFormItem.prototype.setElementEnabled = function (enabled) {
	var choices = this.getNormalizedChoices();
	if(!choices)
		return;
	
	var values = choices.values;
	if(!values)
		return;
		
	var cnt = values.length;
	var prefixes = this.getInheritedProperty("choicePrefixes");
	var numPrefixes = prefixes.length;
			
	for(var i=0; i < cnt; i ++) {
		var chkbx = this.getElement([this.getId(),"_choiceitem_",i].join(""));
		var chkBoxTD = this.getElement([this.getId(),"_choice_",i].join(""));
		if(chkbx) {
			if(enabled) {
				chkBoxTD.className = this.getChoiceCssClass();
				chkbx.className = this.getChoiceCssClass();
				chkbx.disabled = false;
			} else {
				chkBoxTD.className = this.getChoiceCssClass() + "_disabled";
				chkbx.className = this.getChoiceCssClass() + "_disabled";
				chkbx.disabled = true;
				for(var j=0; j<numPrefixes; j++) {
					var id = [this.getId(),"_radiochoiceitem_",i,"_prefix_",j].join("");
					var TDid = [this.getId(),"_choice_",i,"_prefix_",j].join("");
					var radio = this.getElement(id);
					var tdEl = this.getElement(TDid);
					tdEl.className = this.getChoiceCssClass() + "_disabled";
					chkbx.className = this.getChoiceCssClass() + "_disabled";
					chkbx.disabled = true;					
				}				
			}
		} 
	}
};


/**
*	_ZA_ZIMLET_SELECT_COMBO_ form item type
**/
ZaZimletSelectCombo_XFormItem = function () {}
XFormItemFactory.createItemType("_ZA_ZIMLET_SELECT_COMBO_", "za_zimlet_select_combo", ZaZimletSelectCombo_XFormItem, Composite_XFormItem);
ZaZimletSelectCombo_XFormItem.prototype.numCols=1;
ZaZimletSelectCombo_XFormItem.prototype.colSizes=["*"];
ZaZimletSelectCombo_XFormItem.prototype.nowrap = false;
ZaZimletSelectCombo_XFormItem.prototype.labelWrap = true;
ZaZimletSelectCombo_XFormItem.prototype.items = [];

ZaZimletSelectCombo_XFormItem.prototype.initializeItems = function() {
	var selectRef = this.getInheritedProperty("selectRef");
	var choices = this.getInheritedProperty("choices");	
	var selectLabel = this.getInheritedProperty("selectLabel");
	var selectLabelLocation = this.getInheritedProperty("selectLabelLocation");
    var choicesWidth = this.getInheritedProperty ("choicesWidth") || "500px" ;
    
    var selectChck = {
		type:_ZA_ZIMLET_SELECT_,
		choices:choices,
		colSpan:4,
		ref:selectRef,
		label:selectLabel,
		labelLocation:selectLabelLocation,
		width:choicesWidth,
		bmolsnr:true,
		cssStyle:"margin-bottom:5px;margin-top:5px;border:2px inset gray;"				
	};
	
	var selectChckGrp = {
		type:_GROUP_,
		numCols:4,
		colSizes:["130px","5px","130px","*"],
		items:[
			selectChck,
			{type:_DWT_BUTTON_,label:ZaMsg.SelectAll,width:"120px",
				onActivate:function (ev) {
					var lstElement = this.getParentItem().items[0];
					if(lstElement) {
						lstElement.selectAll(ev);
					}
				}
			},
			{type:_CELLSPACER_,width:"5px"},
			{type:_DWT_BUTTON_,label:ZaMsg.DeselectAll,width:"120px",
				onActivate:function (ev) {
					var lstElement = this.getParentItem().items[0];
					if(lstElement) {
						lstElement.deselectAll(ev);
					}
				}
			},
			{type:_CELLSPACER_,width:"235px"}
		]
		
	}
		
	this.items = [selectChckGrp];
	
	
	Composite_XFormItem.prototype.initializeItems.call(this);
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaCheckBoxListXFormItem")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
*	_ZA_CHECKBOX_LIST_ form item type
**/
ZaCheckBox_List_XFormItem = function () {}
XFormItemFactory.createItemType("_ZA_CHECKBOX_LIST_", "za_checkbox_list", ZaCheckBox_List_XFormItem, Composite_XFormItem);
ZaCheckBox_List_XFormItem.prototype.numCols=2;
ZaCheckBox_List_XFormItem.prototype.colSizes=["275px","275px"];
ZaCheckBox_List_XFormItem.prototype.nowrap = false;
ZaCheckBox_List_XFormItem.prototype.labelWrap = true;
ZaCheckBox_List_XFormItem.prototype.items = [];
ZaCheckBox_List_XFormItem.prototype.labelWidth = "275px";
ZaCheckBox_List_XFormItem.prototype.choicesWidth = "275px";

ZaCheckBox_List_XFormItem.prototype.initializeItems = function() {
	var selectRef = this.getInheritedProperty("selectRef");
	var choices = this.getInheritedProperty("choices");	
	var selectLabel = this.getInheritedProperty("selectLabel");
    var choicesWidth = AjxEnv.isIE? "275px": (this.getInheritedProperty ("choicesWidth") || "275px") ;
    
    var selectChck = {
		type:_OSELECT_CHECK_,
		choices:choices,
		colSpan:3,
		ref:selectRef,
		label:selectLabel,
		labelLocation:_TOP_,
		width:choicesWidth,
		bmolsnr:true,
		cssStyle:"margin-bottom:5px;margin-top:5px;border:2px inset gray;"				
	};
	
	var selectChckGrp = {
		type:_GROUP_,
		numCols:3,
		colSizes:["130px","15px","130px"],
		items:[
			selectChck,
			{type:_DWT_BUTTON_,label:ZaMsg.SelectAll,width:"120px",
				onActivate:function (ev) {
					var lstElement = this.getParentItem().items[0];
					if(lstElement) {
						lstElement.selectAll(ev);
					}
				}
			},
			{type:_CELLSPACER_,width:"15px"},
			{type:_DWT_BUTTON_,label:ZaMsg.DeselectAll,width:"120px",
				onActivate:function (ev) {
					var lstElement = this.getParentItem().items[0];
					if(lstElement) {
						lstElement.deselectAll(ev);
					}
				}
			}
		]
		
	}
		
	this.items = [{type:_CELLSPACER_,width:this.labelWidth},selectChckGrp];
	
	
	Composite_XFormItem.prototype.initializeItems.call(this);
}
}
if (AjxPackage.define("zimbraAdmin.common.Signature_XFormItem")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 5/30/11
 * Time: 12:07 AM
 * To change this template use File | Settings | File Templates.
 */
Signature_XFormItem = function() {}
XFormItemFactory.createItemType("_SIGNATURE_", "signature", Signature_XFormItem, Composite_XFormItem);
Signature_XFormItem.prototype.numCols = 1;
Signature_XFormItem.prototype.nowrap = true;

Signature_XFormItem.A_zimbraSigatureName = "name";
Signature_XFormItem.A_zimbraSigatureContent = "content";
Signature_XFormItem.A_zimbraSigatureType = "type";

Signature_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];
Signature_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
Signature_XFormItem.prototype.initializeItems = function () {
    Composite_XFormItem.prototype.initializeItems.call(this);
}

Signature_XFormItem.typeChoice = [
    {value:"", label: ZaMsg.VALUE_NOT_SET},
    {value:"text/plain", label:ZaMsg.resSignaturePlainType},
    {value:"text/html", label:ZaMsg.resSignatureHTMLType}
];

Signature_XFormItem.prototype.items = [
	{type:_TEXTFIELD_, ref:".", width:"300px", labelLocation:_LEFT_, forceUpdate:true,label:ZaMsg.Dlg_SignatureName,
		visibilityChecks: [],
		enableDisableChecks: [],
		//enableDisableChecks:false,
		labelCssStyle:"width:194px",
		getDisplayValue:function(itemVal) {

			if(itemVal && itemVal["name"])
				val = itemVal["name"];
			else {
				val = "";
			}
            return val;
		},

        elementChanged:function(nameVal, curVal, event) {
            var newVal = {};
            if(curVal == "" || !curVal)
                      curVal = {};
            newVal = ZaUtil.deepCloneObject(curVal);
			newVal["name"] = nameVal;

            this.getForm().itemChanged(this.getParentItem(), newVal, event);
        }

	},
	{type:_TEXTAREA_, width: "300px",  forceUpdate:true, ref:".", labelLocation:_LEFT_, label:ZaMsg.Dlg_SignatureContent,
		visibilityChecks: [],
		enableDisableChecks: [],
		 labelCssStyle:"width:194px",
		getDisplayValue:function (itemVal) {
			var val;
			if(itemVal && itemVal["content"])
				val = itemVal["content"];
			else val = "";
			return val;
		},
		elementChanged:function(contentVal, curVal, event) {
            var newVal = {};
            if(curVal == "" || !curVal)
                    curVal = {};

            newVal = ZaUtil.deepCloneObject(curVal);
			newVal["content"] = contentVal;
			this.getForm().itemChanged(this.getParentItem(), newVal, event);
		}
	}/*,  Comment it but not delete for it might be used in future
    {ref:".", type:_OSELECT1_, label:ZaMsg.Dlg_SignatureType,
        msgName:ZaMsg.Dlg_SignatureType, labelLocation:_LEFT_,labelCssStyle:"width:194px",
        choices:Signature_XFormItem.typeChoice,
        getDisplayValue:function (itemVal) {
            var val;
            if(itemVal && itemVal["type"])
                val = itemVal["type"];
            else val = "";
            return val;
        },
        elementChanged:function(typeVal, curVal, event) {
            var newVal = {};
            if(curVal == "" || !curVal)
                    curVal = {};

            newVal = ZaUtil.deepCloneObject(curVal);
            newVal["type"] = typeVal;
            this.getForm().itemChanged(this.getParentItem(), newVal, event);
        }
    }*/
];
}
if (AjxPackage.define("zimbraAdmin.common.Super_XFormItems")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only


/**
*	_COS_STRING_ model item type
**/

Cos_String_XModelItem = function () {}
XModelItemFactory.createItemType("_COS_STRING_", "cos_string", Cos_String_XModelItem);


Cos_String_XModelItem.prototype.dataType = _STRING_;

Cos_String_XModelItem.prototype.getter = "getValue";
Cos_String_XModelItem.prototype.getterScope = _MODELITEM_;
Cos_String_XModelItem.prototype.setter = "setLocalValue";
Cos_String_XModelItem.prototype.setterScope = _MODELITEM_;

Cos_String_XModelItem.prototype.setValueAt = function (instance, val, ref) {
	var pathParts = new Array();
	if(ref.indexOf(".") >= 0) {
		pathParts = ref.split(".");
	} else if (ref.indexOf("/") >=0) {
		pathParts = ref.split("/");
	} else {
		instance[ref] = val
		return val;
	}
	var cnt = pathParts.length-1;
	var obj = instance[pathParts[0]];
	for(var ix=1; ix<cnt; ix++) {
		obj = obj[pathParts[ix]];
	}
	obj[pathParts[cnt]] = val;
}

Cos_String_XModelItem.prototype.getValue = function(instance, current, ref) {
	var value = this.getLocalValue(instance);
	if (value == null) value = this.getSuperValue(instance);
	return value;
}
Cos_String_XModelItem.prototype.getSuperValue = function(ins) {
	if(!ins || !ins._defaultValues)
		return null;
	var _ref = this.ref.replace("/", ".");
	return eval("ins._defaultValues." + _ref);
}
Cos_String_XModelItem.prototype.getLocalValue = function(ins, refPath) {
	if(!ins)
		return null;
	var _ref = this.ref.replace("/", ".");
	return eval("ins." + _ref);
}

Cos_String_XModelItem.prototype.setLocalValue = function(value, instance, current, ref) {
	this.setValueAt(instance, value, ref);
}

Cos_String_XModelItem.prototype.validateType = XModelItem.prototype.validateString;



/**
*	_COS_NUMBER_ model item type
**/
Cos_Number_XModelItem = function (){}
XModelItemFactory.createItemType("_COS_NUMBER_", "cos_number", Cos_Number_XModelItem, Cos_String_XModelItem);
Cos_Number_XModelItem.prototype.validateType = XModelItem.prototype.validateNumber;

Cos_Int_XModelItem = function (){}
XModelItemFactory.createItemType("_COS_INT_", "cos_int", Cos_Int_XModelItem, Cos_String_XModelItem);
Cos_Int_XModelItem.prototype.validateType = XModelItem.prototype.validateInt;

Cos_Enum_XModelItem = function (){}
XModelItemFactory.createItemType("_COS_ENUM_", "cos_enum", Cos_Enum_XModelItem, Cos_String_XModelItem);
Cos_Enum_XModelItem.prototype.getDefaultValue = function () {	return this.getChoices()[0]; };

Cos_Enum_XModelItem.prototype.getChoices = function()		 {
    if (typeof this.choices == "function") {  //due to the i18n complexity, we have to define the choices use the function
        this.choices = this.choices.call (this) ;
    }
    return this.choices;
}
Cos_Enum_XModelItem.prototype.getSelection = function() 	{		return this.selection;		}

Cos_Enum_XModelItem.prototype.validateType = function (value) {
	// if the selection is open, they can enter any value they want
	var selectionIsOpen = this.getSelection() == _OPEN_;
	if (selectionIsOpen) return value;
	
	// selection is not open: it must be one of the supplied choices
	var choices = this.getChoices();
	for (var i = 0; i < choices.length; i++) {
		var choice = choices[i];
		if (AjxUtil.isInstance(choice, Object)) {
			if (choice.value == value) return value;
		} else {
			if (choice == value) return value;
		}
	}
	
	// if we get here, we didn't match any of the choices
	throw this.getModel().getErrorMessage("didNotMatchChoice", value);
}

Cos_Enum_Polling_XModelItem = function () {}
XModelItemFactory.createItemType("_COS_ENUM_POLLING_", "cos_enum_polling", Cos_Enum_Polling_XModelItem, Cos_Enum_XModelItem);

Cos_Enum_Polling_XModelItem.prototype.getValue = function (instance, current, ref) {

    var value = this.getLocalValue(instance);
    if (value == null) {
        value = this.getSuperValue(instance);
    }

    var POLLING_REGEX = /^([0-9])+([dhms]|ms)$/;

    // IF the units are not part of the value, then default is seconds
    if (!POLLING_REGEX.test(value)) {
        value += "s";
    }

    return value;
}

Cos_List_XModelItem = function (){}
XModelItemFactory.createItemType("_COS_LIST_", "list_enum", Cos_List_XModelItem, Cos_String_XModelItem);
Cos_List_XModelItem.prototype.outputType = _LIST_;
Cos_List_XModelItem.prototype.itemDelimiter = List_XModelItem.prototype.itemDelimiter;
Cos_List_XModelItem.prototype.inputDelimiter = List_XModelItem.prototype.inputDelimiter;
Cos_List_XModelItem.prototype.listItem = List_XModelItem.prototype.listItem;
Cos_List_XModelItem.prototype.getOutputType  = List_XModelItem.prototype.getOutputType;
Cos_List_XModelItem.prototype.getItemDelimiter = List_XModelItem.prototype.getItemDelimiter;
Cos_List_XModelItem.prototype.getInputDelimiter = List_XModelItem.prototype.getInputDelimiter;
Cos_List_XModelItem.prototype.getListItem  = List_XModelItem.prototype.getListItem;
Cos_List_XModelItem.prototype.initializeItems = List_XModelItem.prototype.initializeItems;
Cos_List_XModelItem.prototype.validateType = List_XModelItem.prototype.validateType;
Cos_List_XModelItem.prototype.getDefaultValue = List_XModelItem.prototype.getDefaultValue;


Cos_List_XModelItem.prototype.getSuperValue = function(ins) {
	if(!ins || !ins._defaultValues)
		return null;
	var _ref = this.ref.replace("/", ".");
	var lst = eval("ins._defaultValues." + _ref);
	
	if(lst) {
		if(this.getOutputType() == _STRING_) {
			if(lst instanceof Array) {
				return lst.join(this.getItemDelimiter());
			}
		} else {
			var retval = [];
			if(!(lst instanceof Array))
				lst = [lst];
	
			var cnt = lst.length
			for(var i=0;i<cnt;i++) {
				retval.push(lst[i]);
			}
			return retval;		
		}
	}
	
}

Cos_List_XModelItem.prototype.setLocalValue = function(val, ins, current, ref) {
	if(val && this.getOutputType() == _STRING_ && !(val instanceof Array)) {
		var value = val.split(this.getInputDelimiter());
		eval("ins."+ref+" = value");
		this.setValueAt(ins, value, ref);
	} else {
        var value = eval("ins."+ref+" = val");
        this.setValueAt(ins, value, ref);
	}
	
}

Cos_List_XModelItem.prototype.getLocalValue = function(ins, refPath) {
	if(!ins)
		return null;
	
	var _ref = this.ref.replace("/", ".");	
	var value =  eval("ins." + _ref);
	if(value && this.getOutputType() ==_STRING_ && value instanceof Array) {
		return value.join(this.getItemDelimiter());
	} else {
		return value;
	}
}
//	methods

Cos_List_XModelItem.prototype.initializeItems = function () {
	var listItem = this.listItem;
	listItem.ref = listItem.id = "#";	
	this.listItem = XModelItemFactory.createItem(listItem, this, this.getModel());
	this.listItem.initializeItems();
}


Cos_List_XModelItem.prototype.validateType = function (value) {
	return value;
}


/**
* _COS_MAILQUOTA_ XModel item type
**/
Cos_MailQuota_XModelItem = function (){}
XModelItemFactory.createItemType("_COS_MAILQUOTA_", "cos_mailquota", Cos_MailQuota_XModelItem, Cos_Number_XModelItem);
Cos_MailQuota_XModelItem.prototype.getterScope = _MODELITEM_;
Cos_MailQuota_XModelItem.prototype.setterScope = _MODELITEM_;
Cos_MailQuota_XModelItem.prototype.getter = "getValue";
Cos_MailQuota_XModelItem.prototype.setter = "setLocalValue";
Cos_MailQuota_XModelItem.prototype.maxInclusive = 8796093022207;
Cos_MailQuota_XModelItem.prototype.minInclusive = 0;

Cos_MailQuota_XModelItem.prototype.getValue = function(instance, current, ref) {
	var value = this.getLocalValue(instance, current, ref);
	if (value == null ) value = this.getSuperValue(instance, current, ref);
	if(typeof value == "number" && value == 0)
		value = "0";
		
	return value;
}

Cos_MailQuota_XModelItem.prototype.getSuperValue = function(ins) {
	if(!ins)
		return null;
	var _ref = this.ref.replace("/", ".");
	//var value = 0;
	var value = null;
	if((eval("ins._defaultValues." + _ref) != null) && (eval("ins._defaultValues." + _ref) != "")) {
		value = (eval("ins._defaultValues." + _ref) / 1048576);
		if(value != Math.round(value)) {
			value = Number(value).toFixed(2);
	  	}
	} 	
//	var value = (eval("ins._defaultValues." + _ref) != null) ? Number(eval("ins._defaultValues." + _ref) / 1048576).toFixed(0) : 0;
	return value;
}
Cos_MailQuota_XModelItem.prototype.getLocalValue = function(ins, refPath) {
	if(!ins)
		return null;	
	var _ref = this.ref.replace("/", ".");
	var value =null;
	if(eval("ins." + _ref) != null && eval("ins." + _ref) != "") {
		value = (eval("ins." + _ref) / 1048576);
		if(value != Math.round(value)) {
			value = Number(value).toFixed(2);
	  	}
	} 
	return value || eval("ins." + _ref) ;
}

Cos_MailQuota_XModelItem.prototype.setLocalValue = function(value, instance, current, ref) {
	if (value != null && value != "") {
		 value = Math.round(value * 1048576);
	}
	this.setValueAt(instance, value, ref);	
}

/**
* COS_MLIFETIME XModelItem
**/

Cos_MLifetime_XModelItem = function () {}
XModelItemFactory.createItemType("_COS_MLIFETIME_", "cos_mlifetime", Cos_MLifetime_XModelItem, Cos_String_XModelItem);
Cos_MLifetime_XModelItem.prototype.validateType = function (value) {
	var val = "0";
	var lastChar = "d";
	if(value == this.zeroValue) {
		val = "0";
	} else if(value != null && value.length >0) {
		var lastChar = (value.toLowerCase()).charAt(value.length-1);
		lastChar = (lastChar == "d" || lastChar == "h" || lastChar== "m" || lastChar == "s") ? lastChar : "s"
		val = parseInt(value);
	}
	
	val =  [XModelItem.prototype.validateNumber.call(this, val),lastChar].join("");
	return val;
}

Cos_MInterval_XModelItem = function () {}
XModelItemFactory.createItemType("_COS_MINTERVAL_", "cos_minterval", Cos_MInterval_XModelItem, Cos_MLifetime_XModelItem);
Cos_MInterval_XModelItem.prototype.zeroValue = ZaMsg.never.toLowerCase();

/**
* _COS_HOSTNAME_OR_IP_
**/
Cos_HostNameOrIp_XModelItem = function (){}
XModelItemFactory.createItemType("_COS_HOSTNAME_OR_IP_", "cos_hostname_or_ip", Cos_HostNameOrIp_XModelItem, Cos_String_XModelItem);
Cos_HostNameOrIp_XModelItem.prototype.validateType = XModelItem.prototype.validateString;
Cos_HostNameOrIp_XModelItem.prototype.maxLength = 256;
//Cos_HostNameOrIp_XModelItem.prototype.pattern = [ AjxUtil.HOST_NAME_RE, AjxUtil.IPv4_ADDRESS_RE ];
Cos_HostNameOrIp_XModelItem.prototype.pattern =  [AjxUtil.HOST_NAME_RE, AjxUtil.IPv4_ADDRESS_RE, AjxUtil.HOST_NAME_WITH_PORT_RE];

/**
* _COS_PORT_
**/
Cos_Port_XModelItem = function (){}
XModelItemFactory.createItemType("_COS_PORT_", "cos_port", Cos_Port_XModelItem, Cos_Number_XModelItem);
Cos_Port_XModelItem.prototype.validateType = XModelItem.prototype.validateNumber;
Cos_Port_XModelItem.prototype.minInclusive = 0;
Cos_Port_XModelItem.prototype.maxInclusive = 65535;

/**
* _COS_SUBNET_
**/
Cos_Subnet_XModelItem = function (){}
XModelItemFactory.createItemType("_COS_SUBNET_", "cos_subnet", Cos_Subnet_XModelItem, Cos_String_XModelItem);
Cos_Subnet_XModelItem.prototype.validateType = XModelItem.prototype.validateString;
Cos_Subnet_XModelItem.prototype.maxLength = 256;
Cos_Subnet_XModelItem.prototype.pattern =  [AjxUtil.IPv4_ADDRESS_RE, AjxUtil.SUBNET_RE];

/**
*	XForm Items that have overwritable super values
**/

/**
* Super_XFormItem - prototype for all other XForm items with overwritable super values
**/
Super_XFormItem = function () { }
XFormItemFactory.createItemType("_SUPER_FIELD_", "cos_field", Super_XFormItem, Composite_XFormItem);
Super_XFormItem.prototype.bmolsnr = true;
Super_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];
Super_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
Super_XFormItem.checkIfOverWriten = function() {
	if(!ZaItem.hasWritePermission.call(this))
		return false;
		
	if(this.getModelItem() && this.getModelItem().getLocalValue(this.getInstance(), this.refPath)==null)
		return false;
	else if (this.getModelItem() &&  (this.getModelItem().getLocalValue(this.getInstance(), this.refPath) instanceof AjxVector) && 
	(this.getModelItem().getLocalValue(this.getInstance(), this.refPath).size==0) )	
		return false;
	else 
		return true;
}

Super_XFormItem.updateCss = function(levels) {
	var container = this.getContainer();
	if(this.getParentItem().getInheritedProperty("useParentTable"))
		levels = levels-4;
	
	for(var ix=0; ix < levels; ix++) {
		container = container.parentNode;
	}
	if(Super_XFormItem.checkIfOverWriten.call(this)) {
		if(container.className != null && container.className != "ZaOverride")
			this._originalClassName = container.className;
		else 
			this._originalClassName	= "xform_field_container";
			
		container.className="ZaOverride";
	} else {
		if(this._originalClassName != null)
			container.className=this._originalClassName;
		else
			container.className="xform_field_container";
	}
}



/**
* SUPER_ANCHOR_HELPER
* "Reset to *** value" link
**/
Super_AnchorHelper_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPER_ANCHOR_HELPER_","super_anchor_helper", Super_AnchorHelper_XFormItem, Dwt_Button_XFormItem);
Super_AnchorHelper_XFormItem.prototype.containerCssClass = "xform_container xform_override_btn_contaier";
// implement the following to actually construct the instance of your widget
Super_AnchorHelper_XFormItem.prototype.constructWidget = function () {
	var widget = this.widget = new DwtButton(this.getForm(), this.getCssClass());
	var height = this.getHeight();
	var width = this.getWidth();
	//if(!width) width = "100%";
	var el = null;
	if (width != null || height != null){
		el = widget.getHtmlElement();
		if (width != null) el.style.width = width;
		if (height != null) el.style.height = height;
	} 

	var label = this.getLabel();
	
	if(!label)
		label = this.getParentItem().getInheritedProperty("resetToSuperLabel");		
		
	widget.setText(label);

	var ls = new AjxListener(this, Super_AnchorHelper_XFormItem.prototype.resetToSuperValue);
	widget.addSelectionListener(ls);

	return widget;
}

Super_AnchorHelper_XFormItem.prototype.resetToSuperValue = function(event) {
	this.getForm().itemChanged(this.getParentItem(), null, event);
}
Super_AnchorHelper_XFormItem.prototype.isBlockElement = true;

/**
*	_SUPER_TEXTFIELD_ form item type
**/
Super_Textfield_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPER_TEXTFIELD_", "super_textfield", Super_Textfield_XFormItem, Super_XFormItem);

Super_Textfield_XFormItem.prototype.useParentTable = false;
Super_Textfield_XFormItem.prototype.txtBoxLabel = null;
Super_Textfield_XFormItem.prototype.numCols = 3;
Super_Textfield_XFormItem.prototype.colSizes = ["275px","275px","150px"];
Super_Textfield_XFormItem.prototype.colSpan = 3;
Super_Textfield_XFormItem.prototype.nowrap = false;
Super_Textfield_XFormItem.prototype.labelWrap = true;
Super_Textfield_XFormItem.prototype.colSizes = ["275px","225px","150px"];
Super_Textfield_XFormItem.prototype.labelCssStyle = "border-right: 1px solid black;";
Super_Textfield_XFormItem.prototype.tableCssClass = "grid_composite_table";

SuperWiz_Textfield_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPERWIZ_TEXTFIELD_", "superwiz_textfield", SuperWiz_Textfield_XFormItem, Super_Textfield_XFormItem);
SuperWiz_Textfield_XFormItem.prototype.colSizes=["200px", "250px","150px"];
SuperWiz_Textfield_XFormItem.prototype.visibilityChecks = [ZaItem.hasWritePermission];
SuperWiz_Textfield_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
SuperWiz_Textfield_XFormItem.prototype.labelCssStyle = "";

Super_Textfield_XFormItem.prototype.initializeItems = function() {
	var txtBoxLabel = this.getInheritedProperty("txtBoxLabel");
    var labelCssStyle = this.getInheritedProperty("labelCssStyle");
    var labelCssClass = this.getInheritedProperty("labelCssClass");
	var textFieldCssClass = this.getInheritedProperty("textFieldCssClass");
	var textFieldCssStyle = this.getInheritedProperty("textFieldCssStyle");
	var textFieldWidth = this.getInheritedProperty("textFieldWidth");
	var toolTip = this.getInheritedProperty("toolTipContent");

	var getDisplayValue = this.getInheritedProperty("getDisplayValue");
	
	var txtField =	{	
		type:_TEXTFIELD_, ref:".",align:_LEFT_,
		elementChanged: function(elementValue,instanceValue, event) {
			this.getForm().itemChanged(this, elementValue, event);
		},		
		onChange:Composite_XFormItem.onFieldChange,
		toolTipContent: toolTip,
		updateElement:function(value) {
			Super_XFormItem.updateCss.call(this,5);
			Textfield_XFormItem.prototype.updateElement.call(this, value);
		},
		label:txtBoxLabel,
        labelCssStyle:labelCssStyle,
        labelCssClass: labelCssClass,
		labelLocation:(txtBoxLabel ? _LEFT_ : _NONE_),
		cssClass:textFieldCssClass,
		cssStyle:textFieldCssStyle,
		width:textFieldWidth,
		forceUpdate:true,
		nowrap:this.getInheritedProperty("nowrap"),
		labelWrap:this.getInheritedProperty("labelWrap")		
	};
	
	if(getDisplayValue) {
		txtField.getDisplayValue = getDisplayValue;
	}
	
	var anchorCssStyle = this.getInheritedProperty("anchorCssStyle");
	
	var anchorHlpr = {	
		type:_SUPER_ANCHOR_HELPER_, ref:".",
		visibilityChecks:[Super_XFormItem.checkIfOverWriten],
		visibilityChangeEventSources:[this.getRefPath()],
		onChange:Composite_XFormItem.onFieldChange,
		cssStyle: (anchorCssStyle ? anchorCssStyle : "width:150px")
	};
	this.items = [txtField,anchorHlpr];
	Composite_XFormItem.prototype.initializeItems.call(this);
	

}	

Super_Textfield_XFormItem.prototype.items = [];

/**
*	_SUPER_TEXTAREA_ form item type
**/
Super_Textarea_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPER_TEXTAREA_", "super_textarea", Super_Textarea_XFormItem, Super_XFormItem);

Super_Textarea_XFormItem.prototype.useParentTable = false;
Super_Textarea_XFormItem.prototype.txtBoxLabel = null;
Super_Textarea_XFormItem.prototype.numCols = 3;
Super_Textarea_XFormItem.prototype.colSizes = ["275px","275px","150px"];
Super_Textarea_XFormItem.prototype.colSpan = 3;
Super_Textarea_XFormItem.prototype.nowrap = false;
Super_Textarea_XFormItem.prototype.labelWrap = true;
Super_Textarea_XFormItem.prototype.colSizes = ["275px","225px","150px"];
Super_Textarea_XFormItem.prototype.tableCssClass = "grid_composite_table";

SuperWiz_Textarea_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPERWIZ_TEXTAREA_", "superwiz_textarea", SuperWiz_Textarea_XFormItem, Super_Textarea_XFormItem);
SuperWiz_Textarea_XFormItem.prototype.colSizes=["200px", "250px","150px"];
SuperWiz_Textarea_XFormItem.prototype.visibilityChecks = [ZaItem.hasWritePermission];
SuperWiz_Textarea_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];


Super_Textarea_XFormItem.prototype.initializeItems = function() {
	var txtBoxLabel = this.getInheritedProperty("txtBoxLabel");
    var txtBoxLabelCssStyle = this.getInheritedProperty("txtBoxLabelCssStyle");
	var textAreaCssClass = this.getInheritedProperty("textAreaCssClass");
	var textAreaCssStyle = this.getInheritedProperty("textAreaCssStyle");
	var textAreaWidth = this.getInheritedProperty("textAreaWidth");
	var toolTip = this.getInheritedProperty("toolTipContent");
	var labelCssStyle = this.getInheritedProperty("labelCssStyle");
    var labelCssClass = this.getInheritedProperty("labelCssClass");
	
	var txtArea =	{	
		type:_TEXTAREA_, ref:".",align:_LEFT_,
		elementChanged: function(elementValue,instanceValue, event) {
			this.getForm().itemChanged(this, elementValue, event);
		},		
		onChange:Composite_XFormItem.onFieldChange,
		toolTipContent: toolTip,
		updateElement:function(value) {
			Super_XFormItem.updateCss.call(this,5);
			Textarea_XFormItem.prototype.updateElement.call(this, value);
		},
		label:txtBoxLabel,
		labelLocation:(txtBoxLabel ? _LEFT_ : _NONE_),
		labelCssStyle: labelCssStyle,
        labelCssClass: labelCssClass,
		cssClass:textAreaCssClass,
		cssStyle:textAreaCssStyle,
		width:textAreaWidth,
		forceUpdate:true,
		nowrap:this.getInheritedProperty("nowrap"),
		labelWrap:this.getInheritedProperty("labelWrap")		
	};
	
	var anchorCssStyle = this.getInheritedProperty("anchorCssStyle");
	
	var anchorHlpr = {	
		type:_SUPER_ANCHOR_HELPER_, ref:".",
		visibilityChecks:[Super_XFormItem.checkIfOverWriten],
		visibilityChangeEventSources:[this.getRefPath()],
		onChange:Composite_XFormItem.onFieldChange,
		cssStyle: (anchorCssStyle ? anchorCssStyle : "width:150px")
	};
	this.items = [txtArea,anchorHlpr];
	Composite_XFormItem.prototype.initializeItems.call(this);
}	

Super_Textarea_XFormItem.prototype.items = [];

/**
*	_SUPER_CHECKBOX_ form item type
**/
Super_Checkbox_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPER_CHECKBOX_", "super_checkbox", Super_Checkbox_XFormItem, Super_XFormItem);

SuperWiz_Checkbox_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPER_WIZ_CHECKBOX_", "super_wiz_checkbox", SuperWiz_Checkbox_XFormItem, Super_Checkbox_XFormItem);
SuperWiz_Checkbox_XFormItem.prototype.colSizes = ["200px","300px","150px"];
SuperWiz_Checkbox_XFormItem.prototype.visibilityChecks = [ZaItem.hasWritePermission];
SuperWiz_Checkbox_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
SuperWiz_Checkbox_XFormItem.prototype.labelCssStyle = "";
SuperWiz_Checkbox_XFormItem.prototype.labelCssClass = "";
SuperWiz_Checkbox_XFormItem.prototype.checkBoxLabelLocation = _RIGHT_;
SuperWiz_Checkbox_XFormItem.prototype.checkboxSubLabel = "";
SuperWiz_Checkbox_XFormItem.prototype.checkboxAlign = _RIGHT_;

Super_Checkbox_XFormItem.prototype.useParentTable = false;
Super_Checkbox_XFormItem.prototype.numCols = 3;
Super_Checkbox_XFormItem.prototype.colSizes = ["275px","275px","*"];
Super_Checkbox_XFormItem.prototype.nowrap = false;
Super_Checkbox_XFormItem.prototype.labelWrap = true;
Super_Checkbox_XFormItem.prototype.checkboxSubLabel = null;
Super_Checkbox_XFormItem.prototype.labelCssStyle = "border-right: 1px solid black;";
Super_Checkbox_XFormItem.prototype.labelCssClass = "gridGroupBodyLabel";
Super_Checkbox_XFormItem.prototype.tableCssClass = "grid_composite_table";
Super_Checkbox_XFormItem.prototype.colSizes = ["275px","225px","*"];

Super_Checkbox_XFormItem.prototype.initializeItems = function() {
	var anchorCssStyle = this.getInheritedProperty("anchorCssStyle");
	var checkboxSubLabel = this.getInheritedProperty("checkboxSubLabel");
	var checkLabelCssClass = this.getInheritedProperty("labelCssClass");
	var clearChildComponentChecks = this.getInheritedProperty("clearChildComponentChecks");

	var chkBox = {
		type:_CHECKBOX_, ref:".",  labelCssClass:checkLabelCssClass, subLabel:checkboxSubLabel,
		onChange:Composite_XFormItem.onFieldChange,
		updateElement:function(value) {
			Super_XFormItem.updateCss.call(this,5);
			Checkbox_XFormItem.prototype.updateElement.call(this, value);
		},
		trueValue:this.getInheritedProperty("trueValue"),
		falseValue:this.getInheritedProperty("falseValue"),
		forceUpdate:true
	};
	var chkBoxElementChanged = this.getInheritedProperty("checkBoxElementChanged");
	if(chkBoxElementChanged) {
		chkBox.elementChanged = chkBoxElementChanged;
	}
	var anchorHlpr = {	
		type:_SUPER_ANCHOR_HELPER_, ref:".",
		visibilityChecks:[Super_XFormItem.checkIfOverWriten],
		visibilityChangeEventSources:[this.getRefPath()],
		onChange:Composite_XFormItem.onFieldChange,
		cssStyle:"width:150px"
	};
	
	var customOvewriteChecks = this.getInheritedProperty("customOvewriteChecks");
	if(customOvewriteChecks) {
		anchorHlpr.visibilityChecks = customOvewriteChecks; 
	}
	
	if(anchorCssStyle) {
		anchorHlpr.cssStyle = anchorCssStyle;
	} 
	
	
	var checkBoxLabel = this.getInheritedProperty("checkBoxLabel");
	if(checkBoxLabel) {
		chkBox.label = checkBoxLabel;
		chkBox.labelWrap = this.getInheritedProperty("labelWrap");
        chkBox.labelCssStyle = this.getInheritedProperty("labelCssStyle");
		this.numCols = 3;
		this.colSpan= this.getInheritedProperty("conSpan") || 3;
	}
	
	var checkBoxLabelLocation = this.getInheritedProperty("checkBoxLabelLocation");
	if(checkBoxLabelLocation) {
		chkBox.labelLocation = checkBoxLabelLocation;
	}

    var checkBoxAlign = this.getInheritedProperty("checkboxAlign");
	if(checkBoxLabelLocation) {
		chkBox.align = checkBoxAlign;
	}
	
	this.items = [chkBox,anchorHlpr];

	Composite_XFormItem.prototype.initializeItems.call(this);

	if(clearChildComponentChecks) {
		this.items.forEach(function(item) {
			item.visibilityChecks = [];
			item.enableDisableChecks = [];
		});
	}
}

Super_Checkbox_XFormItem.prototype.items = []; 



/**
*	SUPER__HOSTPORT_ form item type
**/
Super_HostPort_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPER_HOSTPORT_", "super_hostport", Super_HostPort_XFormItem, Super_XFormItem);
Super_HostPort_XFormItem.prototype.colSizes = ["275px","275px","150px"];
Super_HostPort_XFormItem.prototype.useParentTable = false;
Super_HostPort_XFormItem.prototype.numCols = 3;
Super_HostPort_XFormItem.prototype.colSpan = 3;
Super_HostPort_XFormItem.prototype.initializeItems = function() {
	
	var txtField = {	type:_HOSTPORT_, ref:".",
		onChange:Composite_XFormItem.onFieldChange,
		onClick: "Super_HostPort_XFormItem.handleClick",
		onMouseout: "Super_HostPort_XFormItem.handleMouseout",
		updateElement:function(value) {
			Super_XFormItem.updateCss.call(this,5);
			XFormItem.prototype.updateElement.call(this, value);
		}
	};
	var anchorHlpr = {	
		type:_SUPER_ANCHOR_HELPER_, ref:".",
		visibilityChecks:[Super_XFormItem.checkIfOverWriten],
		visibilityChangeEventSources:[this.getRefPath()],
		onChange:Composite_XFormItem.onFieldChange,cssStyle:"width:150px"
	}
	
	var anchorCssStyle = this.getInheritedProperty("anchorCssStyle");
	if(anchorCssStyle) {
		anchorHlpr.cssStyle = anchorCssStyle;
	} 
	
	var textBoxLabel = this.getInheritedProperty("textBoxLabel");
	if(textBoxLabel) {
		txtField.label = textBoxLabel;
	}
	this.items = [txtField,anchorHlpr];
	Composite_XFormItem.prototype.initializeItems.call(this);
}	
Super_HostPort_XFormItem.prototype.items = [];

Super_HostPort_XFormItem.handleClick =
function (event, _parent) {
	//DBG.println(AjxDebug.DBG1, "Handle Click from Super Items ...");
	var p = _parent || this ; //used for the call from the HostPort_XFormItem
	p = p.getParentItem () ; 
	var focusFunc = p.getInheritedProperty("onClick") ;
	if (focusFunc != null && focusFunc != "") {
		var func = new Function ("event", "item", "return " + focusFunc + "( event, item);") ;
		func (event, p) ;
	}
}

Super_HostPort_XFormItem.handleMouseout =
function (event, _parent) {
	//DBG.println(AjxDebug.DBG1, "Handle onmouseout event ...");
	var p = _parent || this ;
	p = p.getParentItem () ; //get the super_textfield item from the _textfield_
	var focusFunc = p.getInheritedProperty("onMouseout") ;
	if (focusFunc != null && focusFunc != "") {
		var func = new Function ("event",  "item", "return " + focusFunc + "(event, item);") ;
		func (event, p) ;
	}
}


/**
*	SUPER_DWT_CHOOSER form item type
**/
Super_DwtChooser_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPER_DWT_CHOOSER_", "super_dwt_chooser", Super_DwtChooser_XFormItem, Super_XFormItem);
Super_DwtChooser_XFormItem.prototype.numCols = 1;

Super_DwtChooser_XFormItem.prototype.sorted = true;
Super_DwtChooser_XFormItem.prototype.layoutStyle = DwtChooser.HORIZ_STYLE;
Super_DwtChooser_XFormItem.prototype.sourceRef = ".";
Super_DwtChooser_XFormItem.prototype.widgetClass = DwtChooser;
Super_DwtChooser_XFormItem.prototype.align = _CENTER_;

Super_DwtChooser_XFormItem.prototype.initializeItems = function() {
	var anchorCssStyle = this.getInheritedProperty("anchorCssStyle");
	var sorted = this.getInheritedProperty("sorted");
	var layoutStyle = this.getInheritedProperty("layoutStyle");	
	var sourceRef = this.getInheritedProperty("sourceRef");	
	var widgetClass = this.getInheritedProperty("widgetClass");	
	var tableWidth = this.getInheritedProperty("tableWidth");
	var labelWidth = this.getInheritedProperty("labelWidth");
	var splitButtons = this.getInheritedProperty("splitButtons");
	var resetToSuperLabel = this.getInheritedProperty("resetToSuperLabel");
	var listWidth = this.getInheritedProperty("listWidth");
	var listHeight = this.getInheritedProperty("listHeight");

	var anchorItem = {	
			type:_SUPER_ANCHOR_HELPER_, ref:".",
			visibilityChecks:[Super_XFormItem.checkIfOverWriten],
			visibilityChangeEventSources:[this.getRefPath()],
			cssSyle:(anchorCssStyle ? anchorCssStyle : "width:150px;"),
			onChange:Composite_XFormItem.onFieldChange,
			label:resetToSuperLabel,align:_CENTER_,
			containerCssStyle:"width:90%;float:center;align:center;text-align:center;"
		};
	var chooserItem = {	type:_DWT_CHOOSER_, ref:".",onChange:Composite_XFormItem.onFieldChange,
			updateElement:function(value) {
				Super_XFormItem.updateCss.call(this,5);
				this.updateWidget(value, true, Super_DwtChooser_XFormItem.getElemValue);
			},
			listSize:"90%",
			sorted:sorted, layoutStyle:layoutStyle,sourceRef:sourceRef,widgetClass:widgetClass,
			tableWidth:(tableWidth ? tableWidth : null), 
			labelWidth : (labelWidth ? labelWidth : null), 
			listWidth : (listWidth ? listWidth : null), 
			listHeight : (listHeight ? listHeight : null), 
			splitButtons : (splitButtons ? splitButtons : null) 			
		};
	this.items = [
		{type:_GROUP_, align:_CENTER_, ref:".",width:"100%", numCols:3, colSizes:["*","200px","*" ],
			items:[
				{type:_CELLSPACER_},
				anchorItem,
				{type:_CELLSPACER_}
			],onChange:this.getInheritedProperty("onChange")
		},
		chooserItem];
	Composite_XFormItem.prototype.initializeItems.call(this);
}	
Super_DwtChooser_XFormItem.getElemValue = function () {
	return this.toString();
}
Super_DwtChooser_XFormItem.prototype.items = [];





/**
*	_ZIMLET_SELECT_CHECK_ form item type
**/
Zimlet_SelectCheck_XFormItem = function () {}
XFormItemFactory.createItemType("_ZIMLET_SELECT_CHECK_", "zimlet_select_check", Zimlet_SelectCheck_XFormItem, Super_XFormItem);
Zimlet_SelectCheck_XFormItem.prototype.numCols=2;
Zimlet_SelectCheck_XFormItem.prototype.colSizes=["275px","275px"];
Zimlet_SelectCheck_XFormItem.prototype.nowrap = false;
Zimlet_SelectCheck_XFormItem.prototype.labelWrap = true;
Zimlet_SelectCheck_XFormItem.prototype.items = [];
Zimlet_SelectCheck_XFormItem.prototype.labelWidth = "275px";

Zimlet_SelectCheck_XFormItem.prototype.initializeItems = function() {
	var selectRef = this.getInheritedProperty("selectRef");
	var checkBoxLabel = this.getInheritedProperty("checkBoxLabel");
	var choices = this.getInheritedProperty("choices");	
	var checkBox = {type:_CHECKBOX_, ref:".",
		label:checkBoxLabel, labelLocation:_RIGHT_,
		elementChanged:function(elementValue,instanceValue, event) {
			if(!elementValue) {
				this.getForm().itemChanged(this.getParentItem(), null, event);	
			}
		},
		updateElement:function(value) {
			this.getElement().checked = value;
		}
	};
	
	var selectChck = {
		type:_OSELECT_CHECK_,
		choices:choices,
		colSpan:3,
		ref:selectRef,
		width:"275px",
		onChange:function (value, event, form) {
			if (this.getParentItem() && this.getParentItem().getParentItem() && this.getParentItem().getParentItem().getOnChangeMethod()) {
				return this.getParentItem().getParentItem().getOnChangeMethod().call(this, value, event, form);
			} else {
				return this.setInstanceValue(value);
			}
		},
		forceUpdate:true,
		updateElement:function(value) {
			OSelect_XFormItem.prototype.updateElement.call(this, value);
		},
		cssStyle:"margin-bottom:5px;margin-top:5px;border:2px inset gray;"				
	};
	
	var selectChckGrp = {
		type:_GROUP_,
		numCols:3,
		colSizes:["130px","15px","130px"],
		items:[
			selectChck,
			{type:_DWT_BUTTON_,label:ZaMsg.SelectAll,width:"120px",
				onActivate:function (ev) {
					var lstElement = this.getParentItem().items[0];
					if(lstElement) {
						lstElement.selectAll(ev);
					}
				}
			},
			{type:_CELLSPACER_,width:"15px"},
			{type:_DWT_BUTTON_,label:ZaMsg.DeselectAll,width:"120px",
				onActivate:function (ev) {
					var lstElement = this.getParentItem().items[0];
					if(lstElement) {
						lstElement.deselectAll(ev);
					}
				}
			}
		]
		
	}
		
	this.items = [checkBox,{type:_CELLSPACER_,width:this.labelWidth},selectChckGrp];
	
	
	Composite_XFormItem.prototype.initializeItems.call(this);
}

/**
*	_SUPER_SELECT_CHECK_ form item type
**/
SuperSelect_Check_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPER_SELECT_CHECK_", "super_select_check", SuperSelect_Check_XFormItem, Super_XFormItem);
SuperSelect_Check_XFormItem.prototype.numCols=2;
SuperSelect_Check_XFormItem.prototype.colSizes=["275px","275px"];
SuperSelect_Check_XFormItem.prototype.nowrap = false;
SuperSelect_Check_XFormItem.prototype.labelWrap = true;
SuperSelect_Check_XFormItem.prototype.items = [];
SuperSelect_Check_XFormItem.prototype.labelWidth = "275px";

SuperSelect_Check_XFormItem.prototype.initializeItems = function() {
	var selectRef = this.getInheritedProperty("selectRef");
	var limitLabel = this.getInheritedProperty("limitLabel");
	var choices = this.getInheritedProperty("choices");	
	var radioBox1 = {type:_RADIO_, groupname:this.id+"zimlet_select_check_grp"+selectRef,ref:".",
		label:ZaMsg.NAD_UseCosSettings, labelLocation:_RIGHT_,
		elementChanged:function(elementValue,instanceValue, event) {
			if(elementValue==true) {
				this.getForm().itemChanged(this.getParentItem(), null, event);	
			}
		},
		updateElement:function() {
			this.getElement().checked = !this.getModelItem().getLocalValue(this.getInstance(), this.refPath);
		}
		
	};
	
	var radioBox2 = {type:_RADIO_, groupname:this.id+"zimlet_select_check_grp"+selectRef,ref:".",
		label:limitLabel, labelLocation:_RIGHT_ ,
		updateElement:function() {
			this.getElement().checked = this.getModelItem().getLocalValue(this.getInstance(), this.refPath);
		},		
		elementChanged:function(elementValue,instanceValue, event) {
			var arr = this.getModelItem().getSuperValue(this.getInstance());
			var arr2 = [];
			if(arr) {
				var cnt = arr.length;
				for(var i=0;i<cnt;i++) {
					arr2.push(arr[i]);
				}
			}
			this.getForm().itemChanged(this.getParentItem(), arr2, event);	
		}
	};	
	
	var selectChck = {
		type:_OSELECT_CHECK_,
		choices:choices,
		colSpan:3,
		ref:selectRef,
		width:"275px",
		onChange:function (value, event, form) {
			if (this.getParentItem() && this.getParentItem().getParentItem() && this.getParentItem().getParentItem().getOnChangeMethod()) {
				return this.getParentItem().getParentItem().getOnChangeMethod().call(this, value, event, form);
			} else {
				return this.setInstanceValue(value);
			}
		},
		forceUpdate:true,
		updateElement:function(value) {
			if (!(value instanceof Array))
				value = [value];
				
			var cnt = value.length;
			for(var i=cnt-1;i>=0;i--) {
				if(value[i]==ZaZimlet.NULL_ZIMLET) {
					value.splice(i,1);
					break;
				}
			}
			OSelect_XFormItem.prototype.updateElement.call(this, value);
		},
		cssStyle:"margin-bottom:5px;margin-top:5px;border:2px inset gray;"				
	};
	
	var selectChckGrp = {
		type:_GROUP_,
		numCols:3,
		colSizes:["130px","15px","130px"],
		items:[
			selectChck,
			{type:_DWT_BUTTON_,label:ZaMsg.SelectAll,width:"120px",
				onActivate:function (ev) {
					var lstElement = this.getParentItem().items[0];
					if(lstElement) {
						lstElement.selectAll(ev);
					}
				}
			},
			{type:_CELLSPACER_,width:"15px"},
			{type:_DWT_BUTTON_,label:ZaMsg.DeselectAll,width:"120px",
				onActivate:function (ev) {
					var lstElement = this.getParentItem().items[0];
					if(lstElement) {
						lstElement.deselectAll(ev);
					}
				}
			}
		]
		
	}
		
	this.items = [radioBox1,radioBox2,{type:_CELLSPACER_,width:this.labelWidth},selectChckGrp/*,{type:_CELLSPACER_,width:"15px"},anchorHlpr*/];
	
	
	Composite_XFormItem.prototype.initializeItems.call(this);
}

/**
*	_SUPER_WIZ_SELECT_CHECK_ form item type
**/
SuperWiz_Select_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPER_WIZ_SELECT_CHECK_", "super_wiz_select_check", SuperWiz_Select_XFormItem, SuperSelect_Check_XFormItem);
SuperWiz_Select_XFormItem.prototype.numCols=2;
SuperWiz_Select_XFormItem.prototype.colSizes=["200px","275px"];
SuperWiz_Select_XFormItem.prototype.labelWidth = "200px";

/**
*	_SUPER_ZIMLET_SELECT_ form item type
**/
SuperZimlet_Select_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPER_ZIMLET_SELECT_", "super_zimlet_select", SuperZimlet_Select_XFormItem, Super_XFormItem);
SuperZimlet_Select_XFormItem.prototype.numCols=2;
SuperZimlet_Select_XFormItem.prototype.colSizes=["275px","*"];
SuperZimlet_Select_XFormItem.prototype.nowrap = false;
SuperZimlet_Select_XFormItem.prototype.labelWrap = true;
SuperZimlet_Select_XFormItem.prototype.items = [];
SuperZimlet_Select_XFormItem.prototype.labelWidth = "275px";
SuperZimlet_Select_XFormItem.prototype.colSizes=["100px","*"];
SuperZimlet_Select_XFormItem.prototype.labelWidth = "100px";

SuperZimlet_Select_XFormItem.prototype.initializeItems = function() {
	var selectRef = this.getInheritedProperty("selectRef");
	var limitLabel = this.getInheritedProperty("limitLabel");
	var choices = this.getInheritedProperty("choices");	
	var radioBox1 = {type:_RADIO_, groupname:this.id+"zimlet_select_check_grp"+selectRef,ref:".",
		label:ZaMsg.NAD_UseCosSettings, labelLocation:_RIGHT_,
		elementChanged:function(elementValue,instanceValue, event) {
			if(elementValue==true) {
				this.getForm().itemChanged(this.getParentItem(), null, event);	
			}
		},
		updateElement:function() {
			this.getElement().checked = !this.getModelItem().getLocalValue(this.getInstance(), this.refPath);
		}
		
	};
	
	var radioBox2 = {type:_RADIO_, groupname:this.id+"zimlet_select_check_grp"+selectRef,ref:".",
		label:limitLabel, labelLocation:_RIGHT_ ,
		updateElement:function() {
			this.getElement().checked = this.getModelItem().getLocalValue(this.getInstance(), this.refPath);
		},		
		elementChanged:function(elementValue,instanceValue, event) {
			var arr = this.getModelItem().getSuperValue(this.getInstance());
			var arr2 = [];
			if(arr) {
				var cnt = arr.length;
				for(var i=0;i<cnt;i++) {
					arr2.push(arr[i]);
				}
			}
			this.getForm().itemChanged(this.getParentItem(), arr2, event);	
		}
	};	
	
	var selectChck = {
		type:_ZA_ZIMLET_SELECT_,
		choices:choices,
		colSpan:4,
		ref:selectRef,
		label:"",
		labelLocation:_NONE_,
		width:"500px",
		cssStyle:"margin-bottom:5px;margin-top:5px;border:2px inset gray;"				
	};
	
	var selectChckGrp = {
		type:_GROUP_,
		numCols:4,
		colSizes:["130px","15px","130px"],
		items:[
			selectChck,
			{type:_DWT_BUTTON_,label:ZaMsg.SelectAll,width:"120px",
				onActivate:function (ev) {
					var lstElement = this.getParentItem().items[0];
					if(lstElement) {
						lstElement.selectAll(ev);
					}
				}
			},
			{type:_CELLSPACER_,width:"5px"},
			{type:_DWT_BUTTON_,label:ZaMsg.DeselectAll,width:"120px",
				onActivate:function (ev) {
					var lstElement = this.getParentItem().items[0];
					if(lstElement) {
						lstElement.deselectAll(ev);
					}
				}
			},
			{type:_CELLSPACER_,width:"235px"}
		]
		
	}
		
	this.items = [radioBox1,radioBox2,{type:_CELLSPACER_,width:this.labelWidth},selectChckGrp];
	
	
	Composite_XFormItem.prototype.initializeItems.call(this);
}

/**
*	_SUPER_WIZ_ZIMLET_SELECT_ form item type
**/
SuperWiz_Zimlet_Select_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPER_WIZ_ZIMLET_SELECT_", "super_wiz_zimlet_select", SuperWiz_Zimlet_Select_XFormItem, SuperZimlet_Select_XFormItem);
SuperWiz_Zimlet_Select_XFormItem.prototype.numCols=2;
SuperWiz_Zimlet_Select_XFormItem.prototype.colSizes=["50px","*"];
SuperWiz_Zimlet_Select_XFormItem.prototype.labelWidth = "50px";

/**
*	SUPER_SELECT1 form item type
**/
Super_Select1_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPER_SELECT1_", "super_select1", Super_Select1_XFormItem, Super_XFormItem);
Super_Select1_XFormItem.prototype.labelCssClass = "xform_label_left";
Super_Select1_XFormItem.prototype.labelCssStyle = "width:269px" ; // 6px for padding
Super_Select1_XFormItem.prototype.colSizes=["275px","150px"];
Super_Select1_XFormItem.prototype.nowrap = false;
Super_Select1_XFormItem.prototype.labelWrap = true;
Super_Select1_XFormItem.prototype.trueValue = "TRUE";
Super_Select1_XFormItem.prototype.falseValue = "FALSE";
Super_Select1_XFormItem.prototype.colSizes=["225px","150px"];
Super_Select1_XFormItem.prototype.initializeItems = function() {
	var slct = {	type:_OSELECT1_, ref:".",
		onChange:Composite_XFormItem.onFieldChange,
		forceUpdate:true,
		updateElement:function(value) {
			Super_XFormItem.updateCss.call(this,5);
			OSelect1_XFormItem.prototype.updateElement.call(this, value);
		}
	};
	var anchorHlpr = {	
		type:_SUPER_ANCHOR_HELPER_, ref:".",
		visibilityChecks:[Super_XFormItem.checkIfOverWriten],
		visibilityChangeEventSources:[this.getRefPath()],
		onChange:Composite_XFormItem.onFieldChange
	};
	
	var anchorCssStyle = this.getInheritedProperty("anchorCssStyle");
	if(anchorCssStyle) {
		anchorHlpr.cssStyle = anchorCssStyle;
	} else {
		anchorHlpr.cssStyle = "width:150px";
	}	

	var choices = this.getInheritedProperty("choices");	
	
	if(choices)
		slct.choices = choices;	
	
	var editable = this.getInheritedProperty("editable");
	if(editable)
		slct.editable = editable;
		
	var inputSize = this.getInheritedProperty("inputSize");
	if(inputSize)
		slct.inputSize = inputSize;
    var valueWidth = this.getInheritedProperty("valueWidth");
    if(valueWidth)
        slct.width =  valueWidth;
	this.items = [slct,anchorHlpr];
	Composite_XFormItem.prototype.initializeItems.call(this);
	
		

}	


Super_Select1_XFormItem.prototype.useParentTable = false;
Super_Select1_XFormItem.prototype.numCols = 2;

Super_Select1_XFormItem.prototype.items = [];

/**
*	_SUPERWIZ_SELECT1_ form item type
**/
SuperWiz_Select1_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPERWIZ_SELECT1_", "superwiz_select1", SuperWiz_Select1_XFormItem, Super_Select1_XFormItem);
SuperWiz_Select1_XFormItem.prototype.labelCssClass = "xform_label_left ZaWizLabel";
SuperWiz_Select1_XFormItem.prototype.labelCssStyle = "width:194px" ; // for it has 6px padding
SuperWiz_Select1_XFormItem.prototype.colSizes=["250px","*"];
SuperWiz_Select1_XFormItem.prototype.valueWidth = "auto";
SuperWiz_Select1_XFormItem.prototype.nowrap = false;
SuperWiz_Select1_XFormItem.prototype.labelWrap = true;
SuperWiz_Select1_XFormItem.prototype.visibilityChecks = [ZaItem.hasWritePermission];
SuperWiz_Select1_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];

/**
*	SUPER_DWT_COLORPICKER form item type
**/
Super_Dwt_ColorPicker_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPER_DWT_COLORPICKER_", "super_dwt_colorpicker", Super_Dwt_ColorPicker_XFormItem, Super_XFormItem);
Super_Dwt_ColorPicker_XFormItem.prototype.labelCssClass = "xform_label_left";
Super_Dwt_ColorPicker_XFormItem.prototype.labelCssStyle = "width:275px" ;
Super_Dwt_ColorPicker_XFormItem.prototype.colSizes=["275px","150px"];
Super_Dwt_ColorPicker_XFormItem.prototype.nowrap = false;
Super_Dwt_ColorPicker_XFormItem.prototype.labelWrap = true;
Super_Dwt_ColorPicker_XFormItem.prototype.useParentTable = false;
Super_Dwt_ColorPicker_XFormItem.prototype.numCols = 2;
Super_Dwt_ColorPicker_XFormItem.prototype.colSizes=["225px","150px"];
Super_Dwt_ColorPicker_XFormItem.prototype.initializeItems = function() {
    var buttonImage = this.getInheritedProperty("buttonImage") ;
    var width = this.getInheritedProperty("width") ;
    this.items = [
		{	type:_DWT_COLORPICKER_, ref:".", 
			onChange:Composite_XFormItem.onFieldChange,
			forceUpdate:true,
            buttonImage: buttonImage, width: width,
            //this method is requied to show the "reset to cos" upon the element update
			elementChanged:function(elementValue, instanceValue, event) {
				this.getForm().itemChanged(this, elementValue, event);
			},
			updateElement:function(value) {
				Super_XFormItem.updateCss.call(this,5);
				Dwt_ColorPicker_XFormItem.prototype.updateWidget.call(this, value);
			}
		},
		{	
			type:_SUPER_ANCHOR_HELPER_, ref:".",
			visibilityChecks:[Super_XFormItem.checkIfOverWriten],
			visibilityChangeEventSources:[this.getRefPath()],
			onChange:Composite_XFormItem.onFieldChange
		}
	];
	
	var anchorCssStyle = this.getInheritedProperty("anchorCssStyle");
	if(anchorCssStyle) {
		this.getItems()[1].cssStyle = anchorCssStyle;
	} else {
		this.getItems()[1].cssStyle = "width:150px";
	}	
	Composite_XFormItem.prototype.initializeItems.call(this);
}	



/**
*	_SUPERWIZ_DWT_COLORPICKER_ form item type
**/

SuperWiz_Dwt_ColorPicker_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPERWIZ_DWT_COLORPICKER_", "superwiz_dwt_colorpicker", SuperWiz_Dwt_ColorPicker_XFormItem, Super_Dwt_ColorPicker_XFormItem);
SuperWiz_Dwt_ColorPicker_XFormItem.prototype.labelCssClass = "xform_label_left ZaWizLabel";
SuperWiz_Dwt_ColorPicker_XFormItem.prototype.labelCssStyle = "width:200px" ;
SuperWiz_Dwt_ColorPicker_XFormItem.prototype.colSizes=["250px","150px"];
SuperWiz_Dwt_ColorPicker_XFormItem.prototype.nowrap = false;
SuperWiz_Dwt_ColorPicker_XFormItem.prototype.labelWrap = true;


/**
* _SUPER_LIFETIME_ XForm item type
**/

Super_Lifetime_XFormItem = function() {}
XFormItemFactory.createItemType("_SUPER_LIFETIME_", "super_lifetime", Super_Lifetime_XFormItem, Super_XFormItem);
Super_Lifetime_XFormItem.prototype.nowrap = false;
Super_Lifetime_XFormItem.prototype.labelWrap = true;
Super_Lifetime_XFormItem.prototype.numCols = 4;
Super_Lifetime_XFormItem.prototype.colSpan = 4;
Super_Lifetime_XFormItem.prototype.colSizes =["275px","70px","205px","*"];
Super_Lifetime_XFormItem.prototype.useParenttable = false;
Super_Lifetime_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];
Super_Lifetime_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
Super_Lifetime_XFormItem.prototype.colSizes =["275px","70px","155px","*"];
Super_Lifetime_XFormItem.prototype.labelCssStyle = "border-right: 1px solid black;";
Super_Lifetime_XFormItem.prototype.tableCssClass = "grid_composite_table";
Super_Lifetime_XFormItem.prototype.initializeItems = function() {
	var txtBoxLabel = this.getInheritedProperty("txtBoxLabel");
    var labelCssClass = this.getInheritedProperty("labelCssClass");
	var toolTip = this.getInheritedProperty("toolTipContent");
	
	var txtField =	{
		type:_TEXTFIELD_, ref:".", 
		label:txtBoxLabel,	
		toolTipContent: toolTip,
		//nowrap:false,
		//labelWrap:true,
		nowrap:this.getInheritedProperty("nowrap"),
		labelWrap:this.getInheritedProperty("labelWrap"),		
		labelCssStyle:this.getLabelCssStyle(),
        labelCssClass: labelCssClass,
		labelLocation:(txtBoxLabel ? _LEFT_ : _NONE_),
		cssClass:"admin_xform_number_input", 
		getDisplayValue:function (itemVal) {
			var val = "";
			if(itemVal != null && itemVal.length >0) {
				if(itemVal.length > 1) {
					val = parseInt(itemVal);
				} else {
					if(itemVal == "0") {
						val = "0";
					} else {
						val = "";
					}
				}
			}
			this.getParentItem()._numericPart = val;
			return ((typeof itemVal === "undefined" || val=="0") ? this.getModelItem().zeroValue : val);
		},
		elementChanged:function(numericPart, instanceValue, event) {
			if (numericPart  == this.getModelItem().zeroValue) {
				numericPart = 0;
			}
			var val = numericPart;
			if (AjxUtil.isNumeric(numericPart)) {
				val = numericPart + this.getParentItem()._stringPart;
			}
			this.getForm().itemChanged(this, val, event);
		},onChange:Composite_XFormItem.onFieldChange,
		updateElement:function(value) {
			Super_XFormItem.updateCss.call(this,5);
			Textfield_XFormItem.prototype.updateElement.call(this, value);
		}
	};
	
	var selectField = 	{
		type:_OSELECT1_, ref:".",  
		choices:ZaModel.getTimeChoices(),
		getDisplayValue:function (itemVal){
			var val = "d";
			if(itemVal != null && itemVal.length >0) {
				if(itemVal.length > 1) {
					var lastChar = (itemVal.toLowerCase()).charAt(itemVal.length-1);
					val = (lastChar == "d" || lastChar == "h" || lastChar== "m" || lastChar == "s") ? lastChar : "s";
				} else {
					if(itemVal == "0") {
						val = "d";
					} else {
						val = "s"
					}
				}
			}			
			this.getParentItem()._stringPart = val;
			return val;
		},
		elementChanged:function(stringPart,instanceValue, event) {
			var val = this.getParentItem()._numericPart + stringPart;
			this.getForm().itemChanged(this.getParentItem(), val, event);
		},
		updateElement:function(value) {
			Super_XFormItem.updateCss.call(this,5);
			OSelect1_XFormItem.prototype.updateElement.call(this, value);
		},
		label:null,
		labelLocation:_NONE_,
		forceUpdate:true		
	};
	var anchorCssStyle = this.getInheritedProperty("anchorCssStyle");
	
	var anchorHlpr = {	
		type:_SUPER_ANCHOR_HELPER_, ref:".",
		visibilityChecks:[Super_XFormItem.checkIfOverWriten],
		visibilityChangeEventSources:[this.getRefPath()],
		onChange:Composite_XFormItem.onFieldChange,
		cssStyle: (anchorCssStyle ? anchorCssStyle : "width:150px")
	};
	this.items = [txtField,selectField,anchorHlpr];
	Composite_XFormItem.prototype.initializeItems.call(this);	
}

Super_Lifetime_XFormItem.prototype.items = [ ];

/**
* _SUPERWIZ_LIFETIME_ XForm item type
**/
SuperWiz_Lifetime_XFormItem = function() {}
XFormItemFactory.createItemType("_SUPERWIZ_LIFETIME_", "superwiz_lifetime", SuperWiz_Lifetime_XFormItem, Super_Lifetime_XFormItem);
SuperWiz_Lifetime_XFormItem.prototype.colSizes =["200px","80px","120px","150px"];
SuperWiz_Lifetime_XFormItem.prototype.visibilityChecks = [ZaItem.hasWritePermission];
SuperWiz_Lifetime_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
SuperWiz_Lifetime_XFormItem.prototype.labelCssStyle = "";
/**
* _SUPER_LIFETIME1_ XForm item type for displaying trash message retention and spam message retention settings
**/
Super_Lifetime1_XFormItem = function() {}
XFormItemFactory.createItemType("_SUPER_LIFETIME1_", "super_lifetime1", Super_Lifetime1_XFormItem, Super_XFormItem);
Super_Lifetime1_XFormItem.prototype.nowrap = false;
Super_Lifetime1_XFormItem.prototype.labelWrap = true;
Super_Lifetime1_XFormItem.prototype.numCols = 4;
Super_Lifetime1_XFormItem.prototype.colSpan = 4;
Super_Lifetime1_XFormItem.prototype.colSizes = ["275px", "65px'", "210px", "*"];
Super_Lifetime1_XFormItem.prototype.useParenttable = false;
Super_Lifetime1_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];
Super_Lifetime1_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
Super_Lifetime1_XFormItem.prototype.colSizes = ["275px", "65px'", "160px", "*"];

SuperWiz_Lifetime1_XFormItem = function() {}
SuperWiz_Lifetime1_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];
SuperWiz_Lifetime1_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];

XFormItemFactory.createItemType("_SUPERWIZ_LIFETIME1_", "superwiz_lifetime1", SuperWiz_Lifetime1_XFormItem, Super_Lifetime1_XFormItem);
SuperWiz_Lifetime1_XFormItem.prototype.colSizes =["200px","80px","120px","150px"];

Super_Lifetime1_XFormItem.prototype.initializeItems = function() {
	var txtBoxLabel = this.getInheritedProperty("txtBoxLabel");
    var labelCssStyle = this.getInheritedProperty("labelCssStyle");
	var toolTip = this.getInheritedProperty("toolTipContent");
	
	var txtField =	{
		type:_TEXTFIELD_, ref:".", 
		label:txtBoxLabel,	
		toolTipContent: toolTip,
		nowrap:this.getInheritedProperty("nowrap"),
		labelWrap:this.getInheritedProperty("labelWrap"),		
		labelCssStyle:labelCssStyle || this.getLabelCssStyle(),
		labelLocation:(txtBoxLabel ? _LEFT_ : _NONE_),
		cssClass:"admin_xform_number_input", 
		getDisplayValue:function (itemVal) {
			var val = "1";
			if(itemVal != null && itemVal.length >0) {
				if(itemVal.length > 1) {
					val = itemVal.substr(0, itemVal.length-1);				
				} else {
					if(itemVal == "0") {
						val = "0";
					} else {
						val = "1";
					}
				}
			}
			this.getParentItem()._numericPart = val;
			return val;	
		},
		elementChanged:function(numericPart, instanceValue, event) {
			var val = numericPart + this.getParentItem()._stringPart;
			this.getForm().itemChanged(this, val, event);
		},onChange:Composite_XFormItem.onFieldChange,
		updateElement:function(value) {
			Super_XFormItem.updateCss.call(this,5);
			Textfield_XFormItem.prototype.updateElement.call(this, value);
		}
	};
	
	var selectField = 	{
		type:_OSELECT1_, ref:".", 
		choices:ZaModel.getTimeChoices1(),
		getDisplayValue:function (itemVal){
			var val = "d";
			if(itemVal != null && itemVal.length >0) {
				if(itemVal.length > 1) {
					val = itemVal.substr(itemVal.length-1, 1);
				} else if (itemVal != "0") {
					val = (itemVal == "d" || itemVal == "h" || itemVal== "m" || itemVal == "s") ? itemVal : "d";
				}
			}
			this.getParentItem()._stringPart = val;
			return val;
		},
		elementChanged:function(stringPart,instanceValue, event) {
			var val = this.getParentItem()._numericPart + stringPart;
			this.getForm().itemChanged(this.getParentItem(), val, event);
		},
		updateElement:function(value) {
			Super_XFormItem.updateCss.call(this,5);
			OSelect1_XFormItem.prototype.updateElement.call(this, value);
		},
		label:null,
		labelLocation:_NONE_,
		forceUpdate:true		
	};
	var anchorCssStyle = this.getInheritedProperty("anchorCssStyle");
	
	var anchorHlpr = {	
		type:_SUPER_ANCHOR_HELPER_, ref:".",
		visibilityChecks:[Super_XFormItem.checkIfOverWriten],
		visibilityChangeEventSources:[this.getRefPath()],
		onChange:Composite_XFormItem.onFieldChange,
		cssStyle: (anchorCssStyle ? anchorCssStyle : "width:150px")
	};
	this.items = [txtField,selectField,anchorHlpr];
	Composite_XFormItem.prototype.initializeItems.call(this);	
}

Super_Lifetime1_XFormItem.prototype.items = [ ];

/**
* _SUPER_LIFETIME2_ XForm item type allows time interval to be expressed only in days
**/

Super_Lifetime2_XFormItem = function() {}
XFormItemFactory.createItemType("_SUPER_LIFETIME2_", "super_lifetime2", Super_Lifetime2_XFormItem, Super_Lifetime1_XFormItem);
Super_Lifetime2_XFormItem.prototype.nowrap = false;
Super_Lifetime2_XFormItem.prototype.labelWrap = true;
Super_Lifetime2_XFormItem.prototype.numCols = 4;
Super_Lifetime2_XFormItem.prototype.colSpan = 4;
Super_Lifetime2_XFormItem.prototype.colSizes =["275px", "65px'", "210px", "*"];
Super_Lifetime2_XFormItem.prototype.useParenttable = false;
Super_Lifetime2_XFormItem.prototype._stringPart = "d";
Super_Lifetime2_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];
Super_Lifetime2_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
Super_Lifetime2_XFormItem.prototype.colSizes =["275px", "65px'", "160px", "*"];

SuperWiz_Lifetime2_XFormItem = function() {}
XFormItemFactory.createItemType("_SUPERWIZ_LIFETIME2_", "superwiz_lifetime2", SuperWiz_Lifetime2_XFormItem, Super_Lifetime2_XFormItem);
SuperWiz_Lifetime2_XFormItem.prototype.colSizes =["200px","80px","120px","150px"];
SuperWiz_Lifetime2_XFormItem.prototype.visibilityChecks = [ZaItem.hasWritePermission];
SuperWiz_Lifetime2_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];

Super_Lifetime2_XFormItem.prototype.initializeItems = function() {
	var txtBoxLabel = this.getInheritedProperty("txtBoxLabel");
    var labelCssClass = this.getInheritedProperty("labelCssClass");
	var toolTip = this.getInheritedProperty("toolTipContent");
	
	var txtField =	{
		type:_TEXTFIELD_, ref:".", 
		label:txtBoxLabel,	
		toolTipContent: toolTip,
		nowrap:this.getInheritedProperty("nowrap"),
		labelWrap:this.getInheritedProperty("labelWrap"),		
		labelCssStyle:this.getLabelCssStyle(),
        labelCssClass:labelCssClass,
		labelLocation:(txtBoxLabel ? _LEFT_ : _NONE_),
		cssClass:"admin_xform_number_input", 
		getDisplayValue:function (itemVal) {
			var val = "1";
			if(itemVal != null && itemVal.length >0) {
				if(itemVal.length > 1) {
					val = itemVal.substr(0, itemVal.length-1);				
				} else {
					if(itemVal == "0") {
						val = "0";
					} else {
						val = "1";
					}
				}
			}
			this.getParentItem()._numericPart = val;
			this.getParentItem()._stringPart="d";
			return val;	
		},
		elementChanged:function(numericPart, instanceValue, event) {
			var val = numericPart + "d";
			this.getForm().itemChanged(this, val, event);
		},onChange:Composite_XFormItem.onFieldChange,
		updateElement:function(value) {
			Super_XFormItem.updateCss.call(this,5);
			Textfield_XFormItem.prototype.updateElement.call(this, value);
		}
	};
	
	var selectField = 	{
		type:_OUTPUT_,
		ref:null,
		label:null,
		labelLocation:_NONE_,
		value:"d",
		getDisplayValue:function (itemVal){ return AjxMsg.days; }	
	};
	var anchorCssStyle = this.getInheritedProperty("anchorCssStyle");
	
	var anchorHlpr = {	
		type:_SUPER_ANCHOR_HELPER_, ref:".",
		visibilityChecks:[Super_XFormItem.checkIfOverWriten],
		visibilityChangeEventSources:[this.getRefPath()],
		onChange:Composite_XFormItem.onFieldChange,
		cssStyle: (anchorCssStyle ? anchorCssStyle : "width:150px")
	};
	this.items = [txtField,selectField,anchorHlpr];
	Composite_XFormItem.prototype.initializeItems.call(this);	
}

Super_Lifetime2_XFormItem.prototype.items = [ ];

/**
* _SUPER_LIFETIME_MINUTES_ XForm item type allows time interval to be expressed only in minutes
**/
Super_LifetimeMinutes_XFormItem = function() {}
XFormItemFactory.createItemType("_SUPER_LIFETIME_MINUTES_", "super_lifetime_minutes", Super_LifetimeMinutes_XFormItem, Super_Lifetime1_XFormItem);
Super_LifetimeMinutes_XFormItem.prototype.nowrap = false;
Super_LifetimeMinutes_XFormItem.prototype.labelWrap = true;
Super_LifetimeMinutes_XFormItem.prototype.numCols = 4;
Super_LifetimeMinutes_XFormItem.prototype.colSpan = 4;
Super_LifetimeMinutes_XFormItem.prototype.colSizes =["275px","80px","120px","150px"];
Super_LifetimeMinutes_XFormItem.prototype.useParenttable = false;
Super_LifetimeMinutes_XFormItem.prototype._stringPart = "d";
Super_LifetimeMinutes_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];
Super_LifetimeMinutes_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];

/**
* _SUPERWIZ_LIFETIME_MINUTES_ customization or _SUPER_LIFETIME_MINUTES_ for wizard dialogs
**/
SuperWiz_LifetimeMinutes_XFormItem = function() {}
XFormItemFactory.createItemType("_SUPERWIZ_LIFETIME_MINUTES_", "superwiz_lifetime2", SuperWiz_LifetimeMinutes_XFormItem, Super_LifetimeMinutes_XFormItem);
SuperWiz_LifetimeMinutes_XFormItem.prototype.colSizes =["200px","80px","120px","150px"];
SuperWiz_LifetimeMinutes_XFormItem.prototype.visibilityChecks = [ZaItem.hasWritePermission];
SuperWiz_LifetimeMinutes_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];

Super_LifetimeMinutes_XFormItem.prototype.initializeItems = function() {
	var txtBoxLabel = this.getInheritedProperty("txtBoxLabel");
    var labelCssClass = this.getInheritedProperty("labelCssClass");
	var toolTip = this.getInheritedProperty("toolTipContent");
	
	var txtField =	{
		type:_TEXTFIELD_, ref:".", 
		label:txtBoxLabel,	
		toolTipContent: toolTip,
		nowrap:this.getInheritedProperty("nowrap"),
		labelWrap:this.getInheritedProperty("labelWrap"),		
		labelCssStyle:this.getLabelCssStyle(),
        labelCssClass:labelCssClass,
		labelLocation:(txtBoxLabel ? _LEFT_ : _NONE_),
		cssClass:"admin_xform_number_input", 
		getDisplayValue:function (itemVal) {
			var val = "1";
			if(itemVal != null && itemVal.length >0) {
				if(itemVal.length > 1) {
					val = itemVal.substr(0, itemVal.length-1);				
				} else {
					if(itemVal == "0") {
						val = "0";
					} else {
						val = "1";
					}
				}
			}
			this.getParentItem()._numericPart = val;
			this.getParentItem()._stringPart="m";
			return val;	
		},
		elementChanged:function(numericPart, instanceValue, event) {
			var val = numericPart + "m";
			this.getForm().itemChanged(this, val, event);
		},onChange:Composite_XFormItem.onFieldChange,
		updateElement:function(value) {
			Super_XFormItem.updateCss.call(this,5);
			Textfield_XFormItem.prototype.updateElement.call(this, value);
		}
	};
	
	var selectField = 	{
		type:_OUTPUT_,
		ref:null,
		label:null,
		labelLocation:_NONE_,
		value:"m",
		getDisplayValue:function (itemVal){ return AjxMsg.minutes; }	
	};
	var anchorCssStyle = this.getInheritedProperty("anchorCssStyle");
	
	var anchorHlpr = {	
		type:_SUPER_ANCHOR_HELPER_, ref:".",
		visibilityChecks:[Super_XFormItem.checkIfOverWriten],
		visibilityChangeEventSources:[this.getRefPath()],
		onChange:Composite_XFormItem.onFieldChange,
		cssStyle: (anchorCssStyle ? anchorCssStyle : "width:150px")
	};
	this.items = [txtField,selectField,anchorHlpr];
	Composite_XFormItem.prototype.initializeItems.call(this);	
}

Super_LifetimeMinutes_XFormItem.prototype.items = [ ];

/**
 * Groupers
 */
TopGrouper_XFormItem.prototype.colSizes = ["275px","275px"];
TopGrouper_XFormItem.prototype.numCols = 2;

ZACheckbox_XFormItem = function() {}
XFormItemFactory.createItemType("_ZA_CHECKBOX_", "za_checkbox", ZACheckbox_XFormItem, Checkbox_XFormItem);
//ZACheckbox_XFormItem.prototype.labelLocation = _RIGHT_;
//ZACheckbox_XFormItem.prototype.align = _RIGHT_;

ZATopGrouper_XFormItem = function() {}
XFormItemFactory.createItemType("_ZA_TOP_GROUPER_", "za_top_grouper", ZATopGrouper_XFormItem, TopGrouper_XFormItem);
ZATopGrouper_XFormItem.prototype.numCols = 2;
ZATopGrouper_XFormItem.prototype.colSizes = ["275px","auto"];
ZATopGrouper_XFormItem.isGroupVisible = function(attrsArray, rightsArray,entry) {
	if(ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE')
		return true;

	if(!entry)
		entry = this.getInstance();
	
	if(!entry)
		return false;

	if (!entry.getAttrs)
		return false;
			
	if(!attrsArray && !rightsArray)
		return true;
		
	if(attrsArray) {
		var cntAttrs = attrsArray.length;
		for(var i=0; i< cntAttrs; i++) {
			if(ZaItem.hasReadPermission(attrsArray[i],entry)) {
				return true;
			}
		}
	} 
	
	if(rightsArray) {
		var cntRights = rightsArray.length;
		for(var i=0; i< cntRights; i++) {
			if(ZaItem.hasRight(rightsArray[i],entry)) {
				return true;
			}
		}
	}
	
	return false; 
}
ZAPlainGrouper_XFormItem = function() {}
XFormItemFactory.createItemType("_ZA_PLAIN_GROUPER_", "za_plain_grouper", ZAPlainGrouper_XFormItem, Group_XFormItem);

ZAPlainGrouper_XFormItem.prototype.colSizes = ["100%"];
ZAPlainGrouper_XFormItem.prototype.numCols = 1;
ZAPlainGrouper_XFormItem.prototype.width = "100%";
ZAPlainGrouper_XFormItem.prototype.gridLabelCss = "gridGroupBodyLabel";
ZAPlainGrouper_XFormItem.prototype.initializeItems = function () {
    var gridLabelCss = this.getInheritedProperty("gridLabelCss");
    var oldItems = this.getItems();
    var subitems;
    if(oldItems.length == 1 && oldItems[0].type == "group")  {
        oldItems[0].border = 1;
        if(oldItems[0].colSizes.length > 1)
           oldItems[0].colSizes[oldItems[0].colSizes.length -1] = "100%";
        //oldItems[0].colSizes = ["275px","100%"];
        subitems = oldItems[0].items;
    } else  subitems = oldItems;
    for(var i = 0; i < subitems.length; i++) {
        if(subitems[i].label || subitems[i].txtBoxLabel)
            //subitems[i].labelCssStyle = "text-align:left;background-color:#BBB;";
            subitems[i].labelCssClass = gridLabelCss;
    }
    Group_XFormItem.prototype.initializeItems.call(this);
}

ZAWizTopGrouper_XFormItem = function() {}
XFormItemFactory.createItemType("_ZAWIZ_TOP_GROUPER_", "zawiz_top_grouper", ZAWizTopGrouper_XFormItem, BaseTopGrouper_XFormItem);

ZAWizTopGrouper_XFormItem.prototype.numCols = 2;
ZAWizTopGrouper_XFormItem.prototype.colSizes = ["200px","auto"];
ZAWizTopGrouper_XFormItem.isGroupVisible = function(entry, attrsArray, rightsArray) {
	if(!entry)
		return true;
		
	if(!attrsArray && !rightsArray)
		return true;
		
	if(attrsArray) {
		var cntAttrs = attrsArray.length;
		for(var i=0; i< cntAttrs; i++) {
			if(ZaItem.hasWritePermission(attrsArray[i],entry)) {
				return true;
			}
		}
	} 
	
	if(rightsArray) {
		var cntRights = rightsArray.length;
		for(var i=0; i< cntRights; i++) {
			if(ZaItem.hasRight(rightsArray[i],entry)) {
				return true;
			}
		}
	}
	
	return false; 
}

ZAGroup_XFormItem = function() {}
XFormItemFactory.createItemType("_ZAGROUP_", "zagroup", ZAGroup_XFormItem, Group_XFormItem);
ZAGroup_XFormItem.prototype.numCols = 2;
ZAGroup_XFormItem.prototype.colSizes = ["275px","275px"];
ZAGroup_XFormItem.prototype.border = 1;
ZAGroup_XFormItem.prototype.width = "100%";
ZAGroup_XFormItem.prototype.cssStyle = "margin-top:20px;margin-bottom:0px;padding-bottom:0px;";
ZAGroup_XFormItem.isGroupVisible = function(entry, attrsArray, rightsArray) {
	if(!entry)
		entry = this.getInstance();

	if(!entry)
		return true;
		
	if(!attrsArray && !rightsArray)
		return true;
		
	if(attrsArray) {
		var cntAttrs = attrsArray.length;
		for(var i=0; i< cntAttrs; i++) {
			if(ZaItem.hasReadPermission(attrsArray[i],entry) || ZaItem.hasWritePermission(attrsArray[i],entry)) {
				return true;
			}
		}
	} 
	
	if(rightsArray) {
		var cntRights = rightsArray.length;
		for(var i=0; i< cntRights; i++) {
			if(ZaItem.hasRight(rightsArray[i],entry)) {
				return true;
			}
		}
	}
	
	return false; 
}

ZAGroup_XFormItem.prototype.initializeItems = function () {
    var gridLabelCss = this.getInheritedProperty("gridLabelCss") || "gridGroupBodyLabel";
    var oldItems = this.getItems();
    if(oldItems) {
        for(var i = 0; i < oldItems.length; i++) {
            if(oldItems[i].type == "radio")
                continue;  // don't deal with _RADIO_
            if(oldItems[i].label || oldItems[i].txtBoxLabel)
                //oldItems[i].labelCssStyle = "text-align:left; background-color:#BBB;";
                oldItems[i].labelCssClass = gridLabelCss;
        }
    }

    Group_XFormItem.prototype.initializeItems.call(this);
}

ZAWizGroup_XFormItem = function() {}
XFormItemFactory.createItemType("_ZAWIZGROUP_", "zawizgroup", ZAWizGroup_XFormItem, Group_XFormItem);
ZAWizGroup_XFormItem.prototype.numCols = 2;
ZAWizGroup_XFormItem.prototype.colSizes = ["125px","450px"];
ZAWizGroup_XFormItem.prototype.cssStyle = "margin-top:20px;margin-bottom:0px;padding-bottom:0px;";

ZARightGrouper_XFormItem = function() {}
XFormItemFactory.createItemType("_ZARIGHT_GROUPER_", "zaright_grouper", ZARightGrouper_XFormItem, Grouper_XFormItem);
ZARightGrouper_XFormItem.prototype.borderCssClass = "RightGrouperBorder";

ZALeftGrouper_XFormItem = function() {}
XFormItemFactory.createItemType("_ZALEFT_GROUPER_", "zaleft_grouper", ZALeftGrouper_XFormItem, Grouper_XFormItem);
ZALeftGrouper_XFormItem.prototype.borderCssClass = "LeftGrouperBorder";

ZACenterGrouper_XFormItem = function() {}
XFormItemFactory.createItemType("_ZACENTER_GROUPER_", "zacenter_grouper", ZACenterGrouper_XFormItem, Grouper_XFormItem);
ZACenterGrouper_XFormItem.prototype.borderCssClass = "CenterGrouperBorder";

ZAAllScreenGrouper_XFormItem = function() {}
XFormItemFactory.createItemType("_ZAALLSCREEN_GROUPER_", "zaallscreen_grouper", ZAAllScreenGrouper_XFormItem, Grouper_XFormItem);
ZAAllScreenGrouper_XFormItem.prototype.borderCssClass = "AllScreenGrouperBorder";

ZASmallCenterGrouper_XFormItem = function() {}
XFormItemFactory.createItemType("_ZASMALL_CENTER_GROUPER_", "zasmall_center_grouper", ZASmallCenterGrouper_XFormItem, Grouper_XFormItem);
ZASmallCenterGrouper_XFormItem.prototype.borderCssClass = "CenterGrouperBorder";
ZASmallCenterGrouper_XFormItem.prototype.labelCssClass = "SmallRadioGrouperLabel";

ZATabCase_XFormItem = function() {
	Case_XFormItem.call(this);
}
XFormItemFactory.createItemType("_ZATABCASE_", "zatabcase",ZATabCase_XFormItem, Case_XFormItem);
ZATabCase_XFormItem.prototype.caseVarRef = ZaModel.currentTab;
ZATabCase_XFormItem.prototype.visibilityChangeEventSources = [ZaModel.currentTab];
ZATabCase_XFormItem.prototype.align = _LEFT_;
ZATabCase_XFormItem.prototype.valign = _TOP_;
ZATabCase_XFormItem.prototype.paddingStyle = "padding-left:15px;";
ZATabCase_XFormItem.prototype.width = "98%";


ZATabCase_XFormItem.prototype.getTabLevel = function () {
	return this.getInheritedProperty("tabLevel") || 1;
}

ZATabCase_XFormItem.prototype.getHeaderLevel = function () {
    return this.getInheritedProperty("headerLevel") || 1;
}

ZATabCase_XFormItem.prototype.getHMargin = function () {
    return this.getInheritedProperty("hMargin") || 0;
}

ZATabCase_XFormItem.prototype.getCustomPaddingStyle = function () {
    return this.getInheritedProperty("paddingStyle");
}

ZATabCase_XFormItem.prototype.getCustomHeight = function () {
	try {
		var form = this.getForm();
        var tabLevel = this.getTabLevel () ;
        var headerLevel = this.getHeaderLevel () ;
		var formParentElement = this.getForm().parent.getHtmlElement();
		var totalHeight = parseInt(formParentElement.style.height);
		if(isNaN(totalHeight)) {
			totalHeight = formParentElement.clientHeight ? formParentElement.clientHeight : formParentElement.offsetHeight;
		}
		var formHeaders = form.getItemsById("xform_header");
		var headerHeight = 0;
		if(formHeaders) {
			var formHeader = formHeaders[0];		
			if(formHeader) {
				if(formHeader.getContainer()) {
					formHeader = formHeader.getContainer();
				}
				else {
					formHeader = formHeader.getElement();
				}

				headerHeight = formHeader.clientHeight ? formHeader.clientHeight : formHeader.offsetHeight;				
			}
		}
		var formTabBars = form.getItemsById("xform_tabbar");
		var tabBarHeight = 0;
		if(formTabBars) {
			var formTabBar = formTabBars[0];		
			if(formTabBar) {
				if(formTabBar.getContainer()) {
                                        formTabBar = formTabBar.getContainer();
                                }
				else {
					formTabBar =  formTabBar.getElement();
				}

				tabBarHeight = formTabBar.clientHeight ? formTabBar.clientHeight : formTabBar.offsetHeight;				
			}
		}
        var totalHeaderHeight = headerHeight * headerLevel ;
        var totalTabBarHeight = tabBarHeight * tabLevel ;
		if(totalHeight<=0 || totalHeight < (totalHeaderHeight + totalTabBarHeight + 2))
			return "100%";
		else
			return totalHeight - totalHeaderHeight - totalTabBarHeight - 2;
	} catch (ex) {
        
	}
	return "100%";  					
};

ZATabCase_XFormItem.prototype.getCustomWidth = function () {
	try {

		var form = this.getForm();
		var formParentElement = this.getForm().parent.getHtmlElement();
		var totalWidth = parseInt(formParentElement.style.width);
		if(isNaN(totalWidth)) {
			totalWidth = formParentElement.clientWidth ? formParentElement.clientWidth : formParentElement.offsetWidth;
		}
		if(totalWidth<=0)
			return "100%";
		else {
            var res = totalWidth - this.getHMargin();
            if(this.cacheInheritedMethod("getCustomPaddingStyle", "$getCustomPaddingStyle")) {
                var paddingStyle = this.cacheInheritedMethod("getCustomPaddingStyle", "$getCustomPaddingStyle").call(this);
                if(paddingStyle&&!AjxEnv.isIE)
                    res = res - 15;
            }
			return res;
		}
	} catch (ex) {
        
	}
	return "100%";  					
};

ZATabCase_XFormItem.prototype.resizeHdlr = 
function() {
	try {
		var element = this.getElement();
		var height = this.cacheInheritedMethod("getCustomHeight", "$getCustomHeight").call(this);
		var width = this.cacheInheritedMethod("getCustomWidth", "$getCustomWidth").call(this);
		Dwt.setSize(element, width, height);
	} catch (ex) {
		alert(ex);
	}
};

/**
 * _SUPER_TABCASE_
 * 
 * on-demand loading tab data
*/

SuperTabCase_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPER_TABCASE_", "super_tabcase", SuperTabCase_XFormItem, ZATabCase_XFormItem);
SuperTabCase_XFormItem.prototype.loadDataMethods = [];

SuperTabCase_XFormItem.prototype.show = function(isBlock) {
        var loadMethods = this.getInheritedProperty("loadDataMethods");

        if(loadMethods && loadMethods instanceof Array) {
                var cnt = loadMethods.length;
                for(var i = 0; i < cnt; i++) {
                        if(loadMethods[i] == null) continue;
                        if(typeof(loadMethods[i]) == "function") {
                                loadMethods[i].call(this);
                        } else if(loadMethods[i] instanceof Array) {
                                var func = loadMethods[i].shift();
                                if(!func || !func.apply) continue;
                                func.apply(this, loadMethods[i]);
                                loadMethods[i].unshift(func);
                        }
                }
        }
        Case_XFormItem.prototype.show.call(this, isBlock);
}

/**
*	_SUPER_REPEAT_ form item type
**/
SuperRepeat_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPER_REPEAT_", "super_repeat", SuperRepeat_XFormItem, Super_XFormItem);
SuperRepeat_XFormItem.prototype.numCols=2;
SuperRepeat_XFormItem.prototype.colSizes=["275px","275px"];
SuperRepeat_XFormItem.prototype.nowrap = false;
SuperRepeat_XFormItem.prototype.labelWrap = true;
SuperRepeat_XFormItem.prototype.items = [];
SuperRepeat_XFormItem.prototype.labelWidth = "275px";

SuperRepeat_XFormItem.prototype.initializeItems = function() {

	var items = this.getInheritedProperty("repeatItems");
		
	var repeatItem = {
		type:_REPEAT_,
		items:items,
		ref:".",
		label:null, labelLocation:_NONE_,
		repeatInstance:this.getRepeatInstance(),
		showAddButton:this.getShowAddButton(),
		showRemoveButton:this.getShowRemoveButton(),
		addButtonLabel:this.getInheritedProperty("addButtonLabel"),
		removeButtonLabel:this.getInheritedProperty("removeButtonLabel"),
		removeButtonCSSStyle:this.getInheritedProperty("removeButtonCSSStyle"),
		addButtonWidth:this.getInheritedProperty("addButtonWidth"),
		removeButtonWidth:this.getInheritedProperty("removeButtonWidth"),
		showAddOnNextRow:AjxUtil.isEmpty(this.getInheritedProperty("showAddOnNextRow")) ? true : this.getInheritedProperty("showAddOnNextRow"),
		alwaysShowAddButton:false,
		updateElement:function(value) {
			Super_XFormItem.updateCss.call(this,5);
			Repeat_XFormItem.prototype.updateElement.call(this, value);
		},		
		bmolsnr:true
	}
	
	var anchorCssStyle = this.getInheritedProperty("anchorCssStyle");	
	var anchorHlpr = {	
		type:_SUPER_ANCHOR_HELPER_, ref:".",
		visibilityChecks:[Super_XFormItem.checkIfOverWriten],
		visibilityChangeEventSources:[this.getRefPath()],
		onChange:Composite_XFormItem.onFieldChange,
		cssStyle: (anchorCssStyle ? anchorCssStyle : "width:150px")
	};
		
	this.items = [repeatItem,anchorHlpr];
	
	
	Composite_XFormItem.prototype.initializeItems.call(this);
}

/**
*	SUPER_DYNSELECT form item type
**/
Super_DynSelect_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPER_DYNSELECT_", "super_dynselect", Super_DynSelect_XFormItem, Super_XFormItem);
Super_DynSelect_XFormItem.prototype.labelCssClass = "xform_label_left";
Super_DynSelect_XFormItem.prototype.labelCssStyle = "width:275px" ;
Super_DynSelect_XFormItem.prototype.colSizes=["275px","150px"];
Super_DynSelect_XFormItem.prototype.nowrap = false;
Super_DynSelect_XFormItem.prototype.labelWrap = true;
Super_DynSelect_XFormItem.prototype.trueValue = "TRUE";
Super_DynSelect_XFormItem.prototype.falseValue = "FALSE";
Super_DynSelect_XFormItem.prototype.initializeItems = function() {
	
	
	var slct = {	type:_DYNSELECT_, ref:".",
		onChange:Composite_XFormItem.onFieldChange,
		forceUpdate:true,
	 	errorLocation:_PARENT_,
		updateElement:function(value) {
			Super_XFormItem.updateCss.call(this,5);
			DynSelect_XFormItem.prototype.updateElement.call(this, value);
		}
	};
	var anchorHlpr = {	
		type:_SUPER_ANCHOR_HELPER_, ref:".",
		visibilityChecks:[Super_XFormItem.checkIfOverWriten],
		visibilityChangeEventSources:[this.getRefPath()],
		onChange:Composite_XFormItem.onFieldChange
	};
	
	var anchorCssStyle = this.getInheritedProperty("anchorCssStyle");
	if(anchorCssStyle) {
		anchorHlpr.cssStyle = anchorCssStyle;
	} else {
		anchorHlpr.cssStyle = "width:150px";
	}	

	var choices = this.getInheritedProperty("choices");	
	
	if(choices)
		slct.choices = choices;
		
	var toolTipContent = this.getInheritedProperty("slctToolTipContent");
	if(toolTipContent) {
	 slct.toolTipContent = toolTipContent;
	}
	var dataFetcherClass = this.getInheritedProperty("dataFetcherClass");
	if(dataFetcherClass) {
	 slct.dataFetcherClass = dataFetcherClass;
	}

	var dataFetcherMethod = this.getInheritedProperty("dataFetcherMethod");
	if(dataFetcherMethod) {
	 slct.dataFetcherMethod = dataFetcherMethod;
	}
	
	this.items = [slct,anchorHlpr];
	Composite_XFormItem.prototype.initializeItems.call(this);
}	


Super_DynSelect_XFormItem.prototype.useParentTable = false;
Super_DynSelect_XFormItem.prototype.numCols = 2;

Super_DynSelect_XFormItem.prototype.items = [];

/**
*	_SUPERWIZ_DYNSELECT_ form item type
**/
SuperWiz_DynSelect_XFormItem = function () {}
XFormItemFactory.createItemType("_SUPERWIZ_DYNSELECT_", "superwiz_dynselect", SuperWiz_DynSelect_XFormItem, Super_DynSelect_XFormItem);
SuperWiz_DynSelect_XFormItem.prototype.labelCssClass = "xform_label_left ZaWizLabel";
SuperWiz_DynSelect_XFormItem.prototype.labelCssStyle = "width:200px" ;
SuperWiz_DynSelect_XFormItem.prototype.colSizes=["250px","150px"];
SuperWiz_DynSelect_XFormItem.prototype.nowrap = false;
SuperWiz_DynSelect_XFormItem.prototype.labelWrap = true;
SuperWiz_DynSelect_XFormItem.prototype.visibilityChecks = [ZaItem.hasWritePermission];
SuperWiz_DynSelect_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];

/**
 *	_Categorized_DYNSELECT_ form item type
 **/
Categorized_DynSelect_XFormItem = function () {}
XFormItemFactory.createItemType("_CATEGORIZED_DYNSELECT_", "categorized_dynselect", Categorized_DynSelect_XFormItem, DynSelect_XFormItem);
// Extra css for clickable item
Categorized_DynSelect_XFormItem.prototype.itemCSS = "ZaCategorizedSearchItem " + DynSelect_XFormItem.prototype.cssClass;
Categorized_DynSelect_XFormItem.TYPE_LABEL = "label";
Categorized_DynSelect_XFormItem.TYPE_SEARCH = "search";

Categorized_DynSelect_XFormItem.prototype.changeChoicesCallback = function(data, more, total) {
    DynSelect_XFormItem.prototype.changeChoicesCallback.call(this, this._enrichChoices(data), more, total);
}

Categorized_DynSelect_XFormItem.prototype.getChoicesHTML = function() {
    var choices = this.choices.getChoiceObject();
    if (!choices) return "";	//throw an error?

    var html = new AjxBuffer();
    this.outputChoicesHTMLStart(html);
    var choiceCssClass = this.getChoiceCssClass();
    for (var i = 0; i < choices.length; i++) {
        html.append("", this.getChoiceHTML(i, choiceCssClass));
    }

    this.outputChoicesHTMLEnd(html);
    return html.toString();
}

Categorized_DynSelect_XFormItem.prototype.getChoiceHTML = function (itemNum, cssClass) {
    var item = this.choices.getChoiceObject()[itemNum];
    if (item.type == Categorized_DynSelect_XFormItem.TYPE_LABEL) {
        return this._getLabelHTML(item.name);
    }

    var hdlr = "onSearchClick";
    var label = item.name;
    if (item.type != Categorized_DynSelect_XFormItem.TYPE_SEARCH) {
        hdlr = "onChoiceClick";
        if (item.attrs["displayName"]) {
            label = item.attrs["displayName"] + " " + label;
        }
    }

    var ref = this.getFormGlobalRef() + ".getItemById('"+ this.getId()+ "')";
    //try DIVs
    return AjxBuffer.concat("<tr><td><div id=\"", this.getId(), "_choice_", itemNum, "\" ","class=\"", cssClass, "\"",
        " onmouseover=\"",ref, ".onChoiceOver(", itemNum,", event||window.event)\"",
        " onmouseout=\"",ref, ".onChoiceOut(", itemNum,", event||window.event)\"",
        " onclick=\"",ref, ".", hdlr, "(", itemNum,")\"",
        " itemnum = '", itemNum, "'",">",this._tailorLabel(label),	"</div></td></tr>");
}

Categorized_DynSelect_XFormItem.prototype.onChoiceClick = function(num, event) {
    var item = this.choices.getChoiceObject()[num];
    if (!item) {
        return;
    }

    if (item.type == ZaItem.ACCOUNT || item.type == ZaItem.DL
        || item.type == ZaItem.RESOURCE || item.type == ZaItem.ALIAS) {
        ZaApp.getInstance().getAccountListController()._editItem(item);
        this.hideMenu();
        return;
    }

    if (item.type == ZaItem.DOMAIN) {
        ZaApp.getInstance().getDomainListController()._editItem(item);
        this.hideMenu();
        return;
    }
    if (item.type == ZaItem.COS) {
        ZaApp.getInstance().getCosListController()._editItem(item);
        this.hideMenu();
        return;
    }

}

/**
 * Handler for shortcut search menu clicked
 * @param itemNum
 * @param evt
 */
Categorized_DynSelect_XFormItem.prototype.onSearchClick = function(itemNum, evt) {
    var item = this.choices.getChoiceObject()[itemNum];
    if (item.target || item.target == "") {
        var slController =  ZaApp.getInstance().getSearchListController();
        var searchField =   slController._searchField;
        searchField.searchSelectedType = item.target;
        searchField.restoreSearchFilter();
        ZaSearchField.srchButtonHndlr.call(this, item.target);
        return;
    }
}

Categorized_DynSelect_XFormItem.prototype.getChoiceCssClass = function () {
    return this.itemCSS + "_choice";
}

Categorized_DynSelect_XFormItem.prototype.getChoiceSelectedCssClass = function () {
    return this.itemCSS + "_choice_selected";
}

Categorized_DynSelect_XFormItem.prototype.processEntryKey = function () {
    if (this.isSelecting || this.menuUp) {
        if (this.__currentHiliteItem > 0) {
            var item = this.choices.getChoiceObject()[this.__currentHiliteItem]
            if (item.type == Categorized_DynSelect_XFormItem.TYPE_SEARCH) {
                this.onSearchClick(this.__currentHiliteItem);
                return;
            } else if (item.type != Categorized_DynSelect_XFormItem.TYPE_LABEL) {
                this.onChoiceClick(this.__currentHiliteItem);
                this._searchFieldValue("");
                return;
            }

        }

    }
    var value = this.getInstanceValue();
    var processEntryKey = this.getInheritedProperty("entryKeyMethod");
    if (processEntryKey instanceof AjxCallback) {
        processEntryKey.run(this, value);
    }
}

Categorized_DynSelect_XFormItem.prototype.hiliteNextChoice = function() {
    do {
        DynSelect_XFormItem.prototype.hiliteNextChoice.call(this);
        var item = this.choices.getChoiceObject()[this.__currentHiliteItem];
    } while (item.type == Categorized_DynSelect_XFormItem.TYPE_LABEL);
}

Categorized_DynSelect_XFormItem.prototype.hilitePreviousChoice = function() {
    do {
        DynSelect_XFormItem.prototype.hilitePreviousChoice.call(this);
        var item = this.choices.getChoiceObject()[this.__currentHiliteItem];
    } while (item.type == Categorized_DynSelect_XFormItem.TYPE_LABEL);
}

//Add data to categorize the dynamic drop down.
Categorized_DynSelect_XFormItem.prototype._enrichChoices = function(data) {
    if (data.length <= 0) {
        return data;
    }

    var stats = {};
    for (var i = 0; i < data.length; i++) {
        stats[data[i].type] = 1;
        data[i].value = "";
    }

    var realQuery = this._searchFieldValue();
    var displayQuery = "\"" + realQuery + "\"";
    data.splice(0, 0, {type : Categorized_DynSelect_XFormItem.TYPE_LABEL, name: ZaMsg.SearchBestMatches, value: realQuery});
    data.push({type : Categorized_DynSelect_XFormItem.TYPE_LABEL, name: "&nbsp;", value: realQuery});
    data.push({type : Categorized_DynSelect_XFormItem.TYPE_LABEL, name: ZaMsg.SearchFullResultsFor, value: realQuery});

    data.push({type : Categorized_DynSelect_XFormItem.TYPE_SEARCH, name: displayQuery, value:realQuery, target:""});

    for (var prop in stats) {
        if (stats.hasOwnProperty(prop)) {
            var searchAttr = ZaSearch.TYPES[prop];
            data.push({type : Categorized_DynSelect_XFormItem.TYPE_SEARCH, name: AjxMessageFormat.format(ZaMsg["SearchAll_" + searchAttr],[displayQuery]), value: realQuery, target:searchAttr});

        }
    }

    return data;
}

//Generate HTML for label
Categorized_DynSelect_XFormItem.prototype._getLabelHTML = function (label) {
    return AjxBuffer.concat("<tr><td><div class='ZaCategorizedSearchLabel'>", label, "</div></td></tr>");
}

//Tail the label if it is too long
Categorized_DynSelect_XFormItem.prototype._tailorLabel = function (label) {
    var itemW = Dwt.getBounds(this.getContainer()).width - 20;

    //assume 5.5px per letter
    var maxNumberOfLetters = Math.floor((itemW - 30)/5.5);
    if (maxNumberOfLetters < label.length){
        label = label.substring(0, (maxNumberOfLetters - 3)) + "...";
    }
    return label;
}

// Get query from search field
Categorized_DynSelect_XFormItem.prototype._searchFieldValue = function (val) {
    var slController =  ZaApp.getInstance().getSearchListController();
    var searchField =   slController._searchField;
    if (arguments.length == 0) {
        return searchField.getSearchFieldElement().value;
    }
    searchField.getSearchFieldElement().value = val;

}


/**
* _IP_
**/
// this is only for ip address
Ip_XModelItem = function (){}
XModelItemFactory.createItemType("_IP_", "ip", Ip_XModelItem, String_XModelItem);
Ip_XModelItem.EXACT_IP_ADDRESS_RE = /^((25[0-5]|2[0-4]\d|(1\d|[1-9])?\d)\.){3}(25[0-5]|2[0-4]\d|(1\d|[1-9])\d|[1-9])$/;
Ip_XModelItem.prototype.validateType = function (value) {
	if (value){
		if (!AjxUtil.isString(value)) {
			throw this.getModel().getErrorMessage("notAString", value);
		}

		if(Ip_XModelItem.EXACT_IP_ADDRESS_RE.test(value)) {
			return value;
		} else {
			throw ZaMsg.ERROR_INVALID_IP_ADDR;
		}
	}
};
Ip_XModelItem.prototype.maxLength = 64;

/**
 *  <code>Collaborated_Select_XFormItem</code> is a subclass of <code>Repeat_XFormItem</code>, it might be used under the
 *  following condition:
 *  <ul>
 *      <li>You need a repeat item;
 *      <li>In the repeat, the values of a select must be different. E.g. Choices of the select is [ItemA, ItemB], if
 *      in one instance, ItemA is selected. In the second one, only ItemB is available in the options.
 *      <li>If the select is required, the add button will be invisible if the the instance number is greater or equal
 *      than the choices number of the select.
 *  </ul>
 *
 *  Usage:
 *  <ul>
 *      <li>Set <code>colSelect:true</code> for the select;
 *      <li>Set <code>filterMethod</code> if you want to exclude some choices;
 *  </ul>
 */
Collaborated_Select_XFormItem = function() {}
XFormItemFactory.createItemType("_COLLAB_SELECT_", "collaborated_select", Collaborated_Select_XFormItem, Repeat_XFormItem);

Collaborated_Select_XFormItem.prototype.initializeItems = function () {
    //Find a select that needs to be collaborated
    this.colSelect = this._findColSelect(this.getItems());
    if (!this.colSelect) {
        return;
    }

    //Add ancestorId so that it can be easily locate its ancestor
    this.colSelect.ancestorId = this.id;
    //Add a select listener to update other selecters' choices
    this.colSelect.onChange = Collaborated_Select_XFormItem.selectChanged;
    var origChoices = this.colSelect.choices;
    //Create a new choices object, to avoid the future changes on the choices will bring side effect on the original one.
    var newChoices = new XFormChoices(origChoices.getChoiceObject(), origChoices._type, origChoices._valueProperty, origChoices._labelProperty);
    this.colSelect.choices = newChoices;

    this.choiceItems = origChoices.getChoiceObject();
    this.__ownChoices = newChoices;
    this.__valueProperty = origChoices._valueProperty;
    this.__availNum = this.choiceItems.length;
    this.__selected = [];
    this.__excluded = [];

    if (this.colSelect.required == true) {
        this.getAddButton().visibilityChecks.push(Collaborated_Select_XFormItem.isAddButtonVisible);
    }

    Repeat_XFormItem.prototype.initializeItems.call(this);
}

Collaborated_Select_XFormItem.prototype.getFilterMethod = function() {
    return this.cacheInheritedMethod("filterMethod","$filterMethod");
}

Collaborated_Select_XFormItem.prototype.updateElement = function (value) {
    if (this.__origInstance != this.getForm().getInstance()) {
        this.__origInstance = this.getForm().getInstance();

        if (this.getFilterMethod() && AjxUtil.isFunction(this.getFilterMethod())){
            var excluded = this.getFilterMethod().call(this, this.getForm().getInstance());
            this.filterOrigItems(excluded);
            this.resetChoices();
        } else {
            this.resetChoices(true);
        }

    }
    Repeat_XFormItem.prototype.updateElement.call(this, value);
}

Collaborated_Select_XFormItem.prototype.resetChoices = function (resetAll) {
    if (!this.colSelect) {
        return;
    }

    this.__selected = [];

    if (resetAll) {
        this.__excluded = [];
        this.__availNum = this.choiceItems.length;
    }
    this._updateChoices();
}

Collaborated_Select_XFormItem.selectChanged = function (newVal, event, form) {
    var ancestor = form.getItemById(this.__attributes.ancestorId);
    var current = this.getInstanceValue();
    this.setInstanceValue(newVal);
    ancestor._markSelected(newVal, current);

    //Update the choices after the menu is collapsed.
    var act = new AjxTimedAction(ancestor,Collaborated_Select_XFormItem.prototype._updateChoices,[]);
    AjxTimedAction.scheduleAction(act,ZaController.CLICK_DELAY);
}

Collaborated_Select_XFormItem.isAddButtonVisible = function () {
    if (!this.getParentItem().getParentItem().colSelect) {
        return true;
    }
    return (this.getParentItem().getInstanceCount() < this.getParentItem().getParentItem().__availNum);
}

Collaborated_Select_XFormItem.prototype.filterOrigItems = function(vals) {
    if (!this.choiceItems || !(this.choiceItems instanceof Array) || !vals) {
        return;
    }
    if (!(vals instanceof Array)) {
        vals = [vals];
    }
    var num = 0;
    for (var j = 0; j < this.choiceItems.length; j++) {
        this.__excluded[j] = false;
        for (var i = 0; i < vals.length; i++) {
            if (this.choiceItems[j][this.__valueProperty] == vals[i]) {
                this.__excluded[j] = true;
                num++;
                break;
            }
        }
    }
    this.__availNum -= num;
}

Collaborated_Select_XFormItem.prototype.addRowButtonClicked = function (instanceNum) {
    Repeat_XFormItem.prototype.addRowButtonClicked.call(this, instanceNum);
    this._updateChoices();
}

Collaborated_Select_XFormItem.prototype.removeRowButtonClicked = function (instanceNum) {
    var removedItem = this.getInstanceValue()[instanceNum];
    var removed = removedItem[this.colSelect.ref];
    this._markSelected(null, removed);
    this._updateChoices();

    Repeat_XFormItem.prototype.removeRowButtonClicked.call(this, instanceNum);
}

Collaborated_Select_XFormItem.prototype._updateChoices = function () {
    this.__ownChoices.setChoices(this._getSelectable());
    this.__ownChoices.dirtyChoices();
}

Collaborated_Select_XFormItem.prototype._findColSelect = function(obj) {
    if (!obj) {
        return;
    }

    if (obj.type == "oselect1") {
        if (obj.colSelect) {
            return obj;
        }
        return;
    }

    var items;
    if (obj.items && obj.items instanceof Array) {
        items = obj.items;
    } else if (obj instanceof Array) {
        items = obj;
    }

    if (items) {
        for (var i = 0; i < items.length; i++) {
            var result = this._findColSelect(items[i]);
            if (result ) {
                return result;
            }
        }
    }
}

Collaborated_Select_XFormItem.prototype._markSelected = function(newVal, oldVal) {
    for (var i = 0; i < this.choiceItems.length; i++) {
        if (this.choiceItems[i][this.__valueProperty] == oldVal) {
            this.__selected[i] = false;
        }
    }
    for (var i = 0; i < this.choiceItems.length; i++) {
        if (this.choiceItems[i][this.__valueProperty] == newVal) {
            this.__selected[i] = true;
        }
    }
}

Collaborated_Select_XFormItem.prototype._getSelectable = function() {
    var result = [];
    for (var i = 0; i < this.choiceItems.length; i++) {
        if (this.__excluded[i]) {
            continue;
        }
        if (this.__selected[i]) {
            continue;
        }
        result.push(this.choiceItems[i]);
    }
    return result;
}

}
if (AjxPackage.define("zimbraAdmin.common.ZaSplashScreen")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

ZaSplashScreen =function(parent) {
    var className = "LoginScreen";
    DwtComposite.call(this, {parent:parent, className:className, posStyle:DwtControl.ABSOLUTE_STYLE});
    this._origClassName = className;
    this._xparentClassName = className + "-Transparent";
    this.setBounds(0, 0, "100%", "100%");
    var htmlElement = this.getHtmlElement();
    htmlElement.style.zIndex = Dwt.Z_SPLASH;
    htmlElement.className = className;
    this.setVisible(false);
    
	var params = ZLoginFactory.copyDefaultParams(ZaMsg);
	params.showPanelBorder = true;
	params.showForm = true;
	params.showUserField =false ;
	params.showPasswordField = false;
	params.showRememberMeCheckbox = false;
	params.showLogOff = false;
	params.showButton = false;
    params.showLoading = true ;
    params.companyURL = ZaAppCtxt.getLogoURI () ;
    params.copyrightText = ZaItem.getSplashScreenCopyright();
    params.clientLevelNotice = ZabMsg.clientLevelNotice ? ZabMsg.clientLevelNotice :"";
    var html = ZLoginFactory.getLoginDialogHTML(params);
	this.setContent(html);
}

ZaSplashScreen.prototype = new DwtComposite;
ZaSplashScreen.prototype.constructor = ZaSplashScreen;
ZaSplashScreen.prototype.toString = 
function() {
	return "ZaSplashScreen";
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaCurrentAppToolBar")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* This toolbar sits above the overview and represents the current app. It has a label
* that tells the user what the current app is, and an optional View button/menu for
* switching views within the current app.
* @class
*/
ZaCurrentAppToolBar = function(parent, className, buttons) {

	DwtToolBar.call(this, parent, className, Dwt.ABSOLUTE_STYLE);

	this._currentAppLabel = new ZaToolBarLabel(this, DwtLabel.IMAGE_LEFT | DwtLabel.ALIGN_LEFT, "currentAppLabel");
	this._currentTitle = null;
	this._lastWidth = null;
	this._currentWidth = null;
	this.addFiller();
}

ZaCurrentAppToolBar.prototype = new DwtToolBar;
ZaCurrentAppToolBar.prototype.constructor = ZaCurrentAppToolBar;

ZaCurrentAppToolBar.prototype.toString = 
function() {
	return "ZaCurrentAppToolBar";
}

ZaCurrentAppToolBar.prototype._resizeListener = 
function() {
	if(!this._currentTitle)
		return;
	
	if(!this._currentWidth && !this._lastWidth){
		this._lastWidth = this._currentWidth = this.getBounds().width;
		this.setCurrentAppLabel(this._currentTitle);
	} else {
		this._currentWidth = this.getBounds().width;
		if(this._lastWidth != this._currentWidth ){
	         	this._lastWidth = this._currentWidth;
			this.setCurrentAppLabel(this._currentTitle);
		}
	}
}

ZaCurrentAppToolBar.prototype.setCurrentAppLabel = 
function(title) {
	this._currentTitle = title;
	if(!this._currentWidth && !this._lastWidth){
        	this._lastWidth = this._currentWidth = this.getBounds().width;
	}
	
	var totalCharWidth = ZaCurrentAppToolBar.getWidth(title);

	if(totalCharWidth > (this._currentWidth - 10) ){ //reserver 10 px
		var textLength = this._currentWidth -  ZaCurrentAppToolBar.getWidth("...") - 10;
		var maxNumberOfLetters=  Math.floor(textLength * (title.length) / totalCharWidth);
		title = title.substring(0, (maxNumberOfLetters - 3)) + "...";
	}
	
	this._currentAppLabel.setText(title);
	//this._currentAppLabel.setImage(ZaZimbraAdmin.APP_ICON[appName]);
}

ZaCurrentAppToolBar.WIDTH = {};
ZaCurrentAppToolBar._cacheSize = 0;
ZaCurrentAppToolBar.MAX_CACHE_SIZE = 10;
ZaCurrentAppToolBar.getWidth = 
function(str){
	if(!ZaCurrentAppToolBar._testSpan){
		var span= ZaCurrentAppToolBar._testSpan = document.createElement("SPAN");
		span.style.position = Dwt.ABSOLUTE_STYLE;
		var shellEl =  DwtShell.getShell(window).getHtmlElement();
		shellEl.appendChild(span);
		Dwt.setLocation(span, Dwt.LOC_NOWHERE, Dwt.LOC_NOWHERE);
		span.style.fontWeight = "bold";
		span.style.fontSize = "13px";
	}

	var cache = ZaCurrentAppToolBar.WIDTH;
	if(cache[str])
		return cache[str];
	
	if(ZaCurrentAppToolBar._cacheSize >= ZaCurrentAppToolBar.MAX_CACHE_SIZE){
		ZaCurrentAppToolBar.WIDTH = {};
		ZaCurrentAppToolBar._cacheSize = 0;
	}
	
	var span = ZaCurrentAppToolBar._testSpan;
	span.innerHTML = str;
	var w = cache[str] = Dwt.getSize(span).x;
	ZaCurrentAppToolBar._cacheSize++;

	return w;
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaCrtAppTreeHeader")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 8/17/11
 * Time: 12:12 AM
 * To change this template use File | Settings | File Templates.
 */

ZaCrtAppTreeHeader = function(parent, className, buttons) {
    var cssClass = className || "ZaCtrAppTreeHeader";
	DwtButton.call(this, parent, "", cssClass, Dwt.ABSOLUTE_STYLE);
    this.preObj = null;
	this._historyMgr = ZaZimbraAdmin.getInstance().getHistoryMgr();
    this._historyMgr.addChangeListener(new AjxListener(this, this.updateMenu));
    this.menu = new ZaPopupMenu(this);
    this.menu.setWidth(150);
    this.setMenu(this.menu);
    //this.setRightImg();
}

ZaCrtAppTreeHeader.prototype = new DwtButton;
ZaCrtAppTreeHeader.prototype.constructor = ZaCrtAppTreeHeader ;
ZaCrtAppTreeHeader.prototype._dropDownImg = "";
ZaCrtAppTreeHeader.prototype._dropDownDepImg = "";
ZaCrtAppTreeHeader.prototype._dropDownHovImg = "";
ZaCrtAppTreeHeader.defaultImg = "CollapseLeft";
ZaCrtAppTreeHeader.normalBgImg = "ImgArrowShapeNormal";
ZaCrtAppTreeHeader.hoverBgImg = "ImgArrowShapeHover";

ZaCrtAppTreeHeader.prototype.toString =
function() {
	return "ZaCrtAppTreeHeader";
}

ZaCrtAppTreeHeader.prototype.TEMPLATE = "admin.Widgets#ZaTreeHeaderButton";

ZaCrtAppTreeHeader.prototype._createHtmlFromTemplate = function(templateId, data) {
    data.bgImg = ZaCrtAppTreeHeader.normalBgImg;
    DwtButton.prototype._createHtmlFromTemplate.call(this, templateId, data);
    this._tabelEl = document.getElementById(data.id+"_table");
    this._arrowEl = document.getElementById(data.id+"_doubleArrow");
    this._imgEl = document.getElementById(data.id+"_img");
};

ZaCrtAppTreeHeader.prototype.setRightImg = function (imgName) {
    if (!this._imgEl)
        return;

    var localImg = imgName || ZaCrtAppTreeHeader.defaultImg;
    this._imgEl.innerHTML = AjxImg.getImageHtml(localImg);
}

ZaCrtAppTreeHeader.prototype._handleClick =
function(ev) {
    if (this._isArrowEvent(ev)) {
        var tree = ZaZimbraAdmin.getInstance().getOverviewPanelController().getOverviewPanel().getFolderTree();
        tree.setSelectionByPath(this.preObj.path, false);
    }
    // Nothing doing here
}

ZaCrtAppTreeHeader.prototype._getPreviousObject = function(path) {

    var tree = ZaZimbraAdmin.getInstance().getOverviewPanelController().getOverviewPanel().getFolderTree();
    var currentRoot = tree.getCurrentRootItem();
    var dataItem = currentRoot.getData("dataItem");
    var path = tree.getABPath(dataItem);
    var pathItems = ZaTree.getPathItems(path);
    if (pathItems.length > 1) {
        // Special case for search. We use a special path to specify a view
        if (pathItems[1] == ZaMsg.OVP_search) {
            pathItems = [pathItems[0]];
        } else {
            pathItems.pop();
        }
    }

    var displayName = pathItems[pathItems.length - 1];
    var resultPath = ZaTree.getPathByArray(pathItems);
    return new ZaHistory(resultPath, displayName);
}

ZaCrtAppTreeHeader.prototype._showHoverImage =
function(show) {
    if (this._tabelEl) {
        if (show) {
            Dwt.delClass(this._tabelEl, ZaCrtAppTreeHeader.normalBgImg, ZaCrtAppTreeHeader.hoverBgImg);
        } else {
            Dwt.delClass(this._tabelEl, ZaCrtAppTreeHeader.hoverBgImg, ZaCrtAppTreeHeader.normalBgImg);
        }
    }

}

ZaCrtAppTreeHeader.prototype._isDropDownEvent =
function(ev) {
	if (this._dropDownEventsEnabled && this._dropDownEl) {
		var mouseX = ev.docX;
		var dropDownX = Dwt.toWindow(this._dropDownEl, 0, 0, window).x;
        var isAfterDropDown = true;
		if (mouseX < dropDownX) {
			isAfterDropDown = false;
		}
        var isBeforeCollapse =  true;
        if (this._imgEl) {
            var imgX =  Dwt.toWindow(this._imgEl, 0, 0, window).x;
            if (mouseX >= imgX)
                isBeforeCollapse = false;
        }
        return isAfterDropDown && isBeforeCollapse;
	}
	return false;
};

ZaCrtAppTreeHeader.prototype._isArrowEvent =
function(ev) {
    if (this._arrowEl && this._textEl) {
        var arrowBounds = Dwt.getBounds(this._arrowEl);
        var textBounds = Dwt.getBounds(this._textEl);
        var start = arrowBounds.x;
        var end = textBounds.x + textBounds.width;
        var mouseX = ev.docX;
        if (mouseX < start)
            return false;
        if (mouseX >= end)
            return false;
        return true;
    }
    return false;
}

ZaCrtAppTreeHeader.prototype.setText = function (historyObject) {
    this.preObj = this._getPreviousObject();
    var displayText = this.getDisplayContent(this.preObj.displayName);
	DwtLabel.prototype.setText.call(this, displayText);
}

ZaCrtAppTreeHeader.prototype.getDisplayContent= function (text) {
    var displayText = text;
    if (text) {
        var titleWidth = Dwt.getSize(this._textEl);
        var totalTextWidth = AjxStringUtil.getWidth(text);
        if (totalTextWidth > titleWidth.x) {
            var totalNumber = text.length;
            var textLength = titleWidth.x - AjxStringUtil.getWidth("...");
            var maxNumberOfLetters = Math.floor(textLength*totalNumber/totalTextWidth);
            displayText = text.substring(0, maxNumberOfLetters) + "...";
        }
    }
    return displayText;
}

ZaCrtAppTreeHeader.prototype.popup =
function(menu) {
	menu = menu || this.getMenu();

    if (!menu) { return; }

    var parent = menu.parent;
	var parentBounds = parent.getBounds();
	var windowSize = menu.shell.getSize();
	var menuSize = menu.getSize();
	var parentElement = parent.getHtmlElement();
	// since buttons are often absolutely positioned, and menus aren't, we need x,y relative to window
	var parentLocation = Dwt.toWindow(parentElement, 0, 0);
	var leftBorder = (parentElement.style.borderLeftWidth == "") ? 0 : parseInt(parentElement.style.borderLeftWidth);

	var x;
    var dropDownEl = parent._dropDownEl;
    if (!dropDownEl) {
	    x = parentLocation.x + leftBorder;
    } else {
        var dropDownLocation = Dwt.toWindow(dropDownEl, 0, 0);
        x = dropDownLocation.x;
    }
	x = ((x + menuSize.x) >= windowSize.x) ? windowSize.x - menuSize.x : x;

	var y;

    var horizontalBorder = (parentElement.style.borderTopWidth == "") ? 0 : parseInt(parentElement.style.borderTopWidth);
    horizontalBorder += (parentElement.style.borderBottomWidth == "") ? 0 : parseInt(parentElement.style.borderBottomWidth);
    y = parentLocation.y + parentBounds.height + horizontalBorder;

	menu.popup(0, x, y);
};

ZaCrtAppTreeHeader.searchHistoryCache = {};
ZaCrtAppTreeHeader.isFound = function (path) {
    if(!ZaCrtAppTreeHeader.searchHistoryCache[path]) {
        ZaCrtAppTreeHeader.searchHistoryCache[path] = true;
        return  false;
    }
    return true;
}

ZaCrtAppTreeHeader.prototype.createMenu = function
() {
    var i = 0;
    var mi;
    var listener = new AjxListener(this, this.goToTreeItemListener);
    var allHistory = this._historyMgr.getAllHistory();

    ZaCrtAppTreeHeader.searchHistoryCache = {};
    if(allHistory.size() > 20) {
        var j = allHistory.size()-1;
        var findNum = 0;
        for (j = allHistory.size() - 1; j >= 0; j--) {
            var currentHistory = allHistory.get(j);
            if(!currentHistory.isShowInHistory)
                continue;

            if (ZaCrtAppTreeHeader.isFound(currentHistory.path))
                continue;

            findNum++;
            if (findNum == 20)
                break;
        }

        if (j > 0)
            i = j;
    }
    // Always add home here.
    var currentHistory;
    if (i > 0) {
        currentHistory = allHistory.get(0);
        mi = new DwtMenuItem({
		                parent: this.menu,
		                style:		DwtMenuItem.NO_STYLE,
		                id:     ZaId.getMenuItemId(this._contextId, i + currentHistory.path)
	    });
        mi.setText(currentHistory.displayName);
        mi.setData("history", currentHistory);
        mi.addSelectionListener(listener);
        i = i + 1;
    }

    ZaCrtAppTreeHeader.searchHistoryCache = {};
    var minIndex = i;
    for (i =  allHistory.size() - 1; i >= minIndex; i--) {
        currentHistory = allHistory.get(i);
        if (!currentHistory.isShowInHistory)
            continue;

        if (ZaCrtAppTreeHeader.isFound(currentHistory.path))
            continue;

        mi = new DwtMenuItem({
		                parent: this.menu,
		                style:		DwtMenuItem.NO_STYLE,
		                id:     ZaId.getMenuItemId(this._contextId, i + currentHistory.path)
	    });
        mi.setText(currentHistory.displayName);
        mi.setEnabled(currentHistory.enabled);
        mi.setData("history", currentHistory);
        mi.addSelectionListener(listener);
    }

    this.menu.createSeparator();

    mi = new DwtMenuItem({
                    parent: this.menu,
                    style:		DwtMenuItem.NO_STYLE,
                    id:     ZaId.getMenuItemId(this._contextId, "clearHistory")
    });
    mi.setText(ZaMsg.LBL_Treeheader_clearHistory);
    mi.setData("history", currentHistory);
    mi.addSelectionListener(new AjxListener(this, this.clearHistory));
}

ZaCrtAppTreeHeader.prototype.updateMenu =
function() {
    this.menu.removeChildren();
    this.createMenu();
}

ZaCrtAppTreeHeader.prototype.goToTreeItemListener = function (ev) {
    var historyObject =  ev.item.getData("history");
    historyObject.goToView();
}

ZaCrtAppTreeHeader.prototype.clearHistory = function (ev) {
    this._historyMgr.removeHistory();
}

}
if (AjxPackage.define("zimbraAdmin.common.ZaServerVersionInfo")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only


ZaServerVersionInfo = function() {}

ZaServerVersionInfo.load = function () {
	if (!ZaServerVersionInfo._loaded){
		var soapDoc = AjxSoapDoc.create("BatchRequest", "urn:zimbra");
		soapDoc.setMethodAttribute("onerror", "continue");
		var versionInfoReq = soapDoc.set("GetVersionInfoRequest", null, null, ZaZimbraAdmin.URN);
		
		
		//var licenseInfoReq = soapDoc.set("GetLicenseInfoRequest");
		//licenseInfoReq.setAttribute("xmlns", ZaZimbraAdmin.URN);
		var command = new ZmCsfeCommand();
		var params = new Object();
		params.soapDoc = soapDoc;	
		params.noAuthToken = true;
		var resp = command.invoke(params).Body.BatchResponse;		
		var versionResponse = resp.GetVersionInfoResponse[0];

		ZaServerVersionInfo.buildDate = this._parseDateTime(versionResponse.info[0].buildDate);
		ZaServerVersionInfo.host = versionResponse.info[0].host;
		ZaServerVersionInfo.release = versionResponse.info[0].release;
		ZaServerVersionInfo.version = versionResponse.info[0].version;
		//license expiration information is handled in com_zimbra_license.js
	}
};

ZaServerVersionInfo._parseDate = function (dateTimeStr) {
	var d = new Date();
	d.setHours(0, 0, 0, 0);
	var yyyy = parseInt(dateTimeStr.substr(0,4), 10);
	var MM = parseInt(dateTimeStr.substr(4,2), 10);
	var dd = parseInt(dateTimeStr.substr(6,2), 10);
	d.setFullYear(yyyy);
	// EMC 8/31/05 - fix for bug 3839. It looks like firefox needs to call setMonth twice for 
	// dates starting sept 1. No good reason at this point, but I noticed that
	// setting it twice seems to do the trick. Very odd.
	d.setMonth(MM - 1);
	d.setMonth(MM - 1);
	d.setDate(dd);
	return d;
};
ZaServerVersionInfo._parseDateTime = function (dateTimeStr) {
	var d = ZaServerVersionInfo._parseDate(dateTimeStr);
	var hh = parseInt(dateTimeStr.substr(9,2), 10);
	var mm = parseInt(dateTimeStr.substr(11,2), 10);
	d.setHours(hh, mm, 0, 0);
	return d;
};
}
if (AjxPackage.define("zimbraAdmin.common.MenuButton_XFormItem")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
 
/**
* @class defines XFormItem type  _MENU_BUTTON_
* Adapts a DwtButton with a drop-down menu of choices to work with the XForm
* @constructor
* @author Greg Solovyev
**/
MenuButton_XFormItem = function() {}
XFormItemFactory.createItemType("_MENU_BUTTON_", "menu_button", MenuButton_XFormItem, Dwt_Button_XFormItem);
MenuButton_XFormItem.prototype.constructWidget = function () {
	var widget = Dwt_Button_XFormItem.prototype.constructWidget.call(this);
	var opList = this.getNormalizedValues();
	if (opList && opList.length) {
		var menu = new ZaPopupMenu(widget, null,null, opList);
		widget.setMenu(menu);
	}
	return widget;
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaAutoCompleteListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* Creates a new autocomplete list. The list isn't populated or displayed until some
* autocompletion happens. Takes a data class and loader, so that when data is needed (it's
* loaded lazily), the loader can be called on the data class.
* @constructor
* @class
* This class implements autocomplete functionality. It has two main parts: matching data based
* on keystroke events, and displaying/managing the list of matches. This class is theoretically
* neutral concerning the data that gets matched (as long as its class has an autocompleteMatch()
* method), and the field that it's being called from.
* <p>
* The data class's autocompleteMatch() method should returns a list of matches, where each match is
* an object with the following properties:</p>
* <table border="1">
* <tr><td>data</td><td>the object being matched</td></tr>
* <tr><td>text</td><td>the text to display for this object in the list</td></tr>
* <tr><td>[key1]</td><td>a string that may be used to replace the typed text<td></tr>
* <tr><td>[keyN]</td><td>a string that may be used to replace the typed text<td></tr>
* </table>
* </p><p>
* The data class will also need a method isUniqueValue(str), which returns true if the given string
* maps to a single match.
* </p><p>
* The calling client also specifies the key in the match result for the string that will be used
* to replace the typed text (also called the "completion string"). For example, the completion 
* string for matching contacts could be a full address, or just the email.
* </p>
* 
* @author Conrad Damon
* @param parent				the element that created this list
* @param className			CSS class
* @param dataLoaderClass			the class that has the data loader
* @param dataLoaderMethod	a method of dataLoaderClass that returns data to match against
* @param matchValue			name of field in match result to use for completion
* @param inputFieldElement	(HTMLTextAreaElement) the input field element which autocomplete is used for
* @param locCallback		callback into client to get desired location of autocomplete list
* @param compCallback		callback into client to notify it that completion happened
* @param separator			separator (gets added to the end of a match)
*/
var i = 1 ;
//ZaSettings.AC_TIMER_INTERVAL = i ++;

ZaAutoCompleteListView = function(params) {

	var className = params.className ? params.className : "autoCompleteList";
	DwtComposite.call(this, params.parent, className, DwtControl.ABSOLUTE_STYLE);
	
//	this._appCtxt = this.shell.getData(ZaAppCtxt.LABEL);
	var app = null;
	try {
		this.shell.getData(ZaAppCtxt.LABEL).getApp();
	}catch (e){
		DBG.println(e.message);
	}
	var _dataLoaderClass = params.dataLoaderClass;
	this._dataLoaderObject = new _dataLoaderClass();
	this._dataLoaderMethod = params.dataLoaderMethod;
	this._dataLoading = false;
	this._data = null ;
	this._matchValue = params.matchValue ? params.matchValue : "inputFieldCompleteValue";
	this._matchText = params.matchText ? params.matchText : "matchListFieldText" ;
	this._inputFieldXFormItem = params.inputFieldXFormItem ;
	this._inputFieldXForm = this._inputFieldXFormItem.getForm() ;
	this._inputFieldElement = this._inputFieldXFormItem.getElement() ;
	this._locCallback = params.locCallback;
	this._compCallback = params.compCallback;
	this._separator = (params.separator != null) ? params.separator : ";";
	
	// mouse event handling
	this._setMouseEventHdlrs();
	this.addListener(DwtEvent.ONMOUSEDOWN, new AjxListener(this, this._mouseDownListener));
	this.addListener(DwtEvent.ONMOUSEOVER, new AjxListener(this, this._mouseOverListener));
	this._addSelectionListener(new AjxListener(this, this._listSelectionListener));
	this._outsideListener = new AjxListener(this, this._outsideMouseDownListener);

	// only trigger matching after a sufficient pause
	this._acInterval = 300 ;
	this._acAction = new AjxTimedAction(null, this._autocompleteAction);
	this._acActionId = -1;

	// for managing focus on Tab in Firefox
	if (AjxEnv.isFirefox) {
		this._focusAction = new AjxTimedAction(null, this._focus);
	}

	this._internalId = AjxCore.assignId(this);
	this._numChars = 0;
	this._matches = new AjxVector();
	this._done = new Object();
	this.setVisible(false);
	
	//set the handler to the input field element
	this.handle(this._inputFieldElement);
}

ZaAutoCompleteListView.prototype = new DwtComposite;

// map of characters that are completion characters
ZaAutoCompleteListView.DELIMS = [',', ';', '\n', '\r', '\t'];
ZaAutoCompleteListView.IS_DELIM = new Object();
for (var i = 0; i < ZaAutoCompleteListView.DELIMS.length; i++)
	ZaAutoCompleteListView.IS_DELIM[ZaAutoCompleteListView.DELIMS[i]] = true;

// Public static methods

/**
* "onkeydown" handler for catching Tab and Esc keys. We don't want to let the browser
* handle this event for those (which it will do before we get the keyup event).
*
* @param ev		the key event
*/
ZaAutoCompleteListView.onKeyDown =
function(ev) {
	DBG.println(AjxDebug.DBG3, "onKeyDown");
	var element = DwtUiEvent.getTargetWithProp(ev, "id");
	var aclv = element && AjxCore.objectWithId(element._acListViewId);
	if (aclv) {
		aclv._inputLength = element.value.length;
	}
	var key = DwtKeyEvent.getCharCode(ev);
	return (key == DwtKeyEvent.KEY_TAB || key == DwtKeyEvent.KEY_ESCAPE) ? ZaAutoCompleteListView.onKeyUp(ev) : true;
}

/**
* "onkeyup" handler for performing autocompletion. The reason it's an "onkeyup" handler is that neither 
* "onkeydown" nor "onkeypress" arrives after the form field has been updated.
*
* @param ev		the key event
*/
ZaAutoCompleteListView.onKeyUp =
function(ev) {
	ev = DwtUiEvent.getEvent(ev);
	if (ev.type == "keyup")
		DBG.println(AjxDebug.DBG3, "onKeyUp");
	var element = DwtUiEvent.getTargetWithProp(ev, "id");
	var aclv = AjxCore.objectWithId(element._acListViewId);
	
	var id = element.id;
	var key = DwtKeyEvent.getCharCode(ev);
	// Tab/Esc handled in keydown for IE
	if (AjxEnv.isIE && ev.type == "keyup" && (key == 9 || key == 27))
		return true;
	var value = element.value;
	DBG.println(AjxDebug.DBG3, ev.type + " event, key = " + key + ", value = " + value);
	ev.inputLengthChanged = (value.length != aclv._inputLength);

	var inputFieldOldValue;
	if (aclv._inputFieldXFormItem) {
		DBG.println(AjxDebug.DBG1, "Set the inputField " + aclv._inputFieldXFormItem["refPath"] + " value: " + value) ;
		inputFieldOldValue = aclv._inputFieldXFormItem.getInstanceValue();
		var onChangeMethod = aclv._inputFieldXFormItem.getOnChangeMethod();
		if(onChangeMethod != null && typeof(onChangeMethod) == "function") {
			onChangeMethod.call(aclv._inputFieldXFormItem,value,ev,aclv._inputFieldXForm);
		} else {
			aclv._inputFieldXFormItem.setInstanceValue(value);
		}
	}

	// reset timer on any address field key activity
	if (aclv._acActionId != -1) {
		AjxTimedAction.cancelAction(aclv._acActionId);
		aclv._acActionId = -1;
	}
	
	// Figure out what this handler should return. If it returns true, the browser will
	// handle the key event. That usually means it just echoes the typed character, but
	// it could do something like change focus (eg tab). We let the browser handle input
	// characters, and anything weird that we don't want to deal with. The only keys we
	// don't let the browser handle are ones that control the features of the autocomplete
	// list.

	if (key == 16 || key == 17 || key == 18) // SHIFT, ALT, or CTRL
		return true;
	if (ev.altKey || ev.ctrlKey) // ALT and CTRL combos
		return true;
	// if the field is empty, clear the list
	if (!value) {
		aclv.reset();
		return true;
	}
	if (key == 37 || key == 39) // left/right arrow key
		return true;
	// Pass tab through if there's no list (will transfer focus)
	if ((key == 9) && !aclv.size())
		return true;

	if (ev.inputLengthChanged || (key == 3 || key == 9 || key == 13))
		aclv._numChars++;

	// if the user types a single delimiting character with the list showing, do completion
	var isDelim = (aclv.getVisible() && (aclv._numChars == 1) && 
				   ((key == 3 || key == 9 || key == 13) || (!ev.shiftKey && (key == 59 || key == 186 || key == 188))));

	DBG.println(AjxDebug.DBG3, "numChars = " + aclv._numChars + ", key = " + key + ", isDelim: " + isDelim);
	if (isDelim || (key == 27 || key == 38 || key == 40)) {
		aclv.handleAction(key, isDelim);
		// In Firefox, focus shifts on Tab even if we return false (and stop propagation and prevent default),
		// so make sure the focus stays in this element.
		if (AjxEnv.isFirefox && key == 9) {
			aclv._focusAction.args = [ element ];
			AjxTimedAction.scheduleAction(aclv._focusAction, 0);
		}
		DwtUiEvent.setBehaviour(ev, true, false);
		return false;
	}

	// skip if it's some weird character
	if (!ev.inputLengthChanged && 
		(key != 3 && key != 13 && key != 9 && key != 8 && key != 46))
		return true;

	// regular input, schedule autocomplete
	var ev1 = new DwtKeyEvent();
	DwtKeyEvent.copy(ev1, ev);
	ev1.aclv = aclv;
	ev1.element = element;
	aclv._acAction.obj = aclv;
	aclv._acAction.args = [ ev1 ];
	DBG.println(AjxDebug.DBG2, "scheduling autocomplete");
	aclv._acActionId = AjxTimedAction.scheduleAction(aclv._acAction, aclv._acInterval);
	//fire the xform changed event
	var inputFieldNewValue = inputFieldOldValue;
	if (aclv._inputFieldXFormItem){
		inputFieldNewValue = aclv._inputFieldXFormItem.getInstanceValue();
	}
	
	if (aclv._inputFieldXForm){
		aclv._inputFieldXForm.setIsDirty(true, aclv._inputFieldXFormItem ) ;
		aclv._inputFieldXForm.notifyListeners(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, new DwtXFormsEvent(aclv._inputFieldXForm, aclv._inputFieldXFormItem,true));
		if(inputFieldNewValue != inputFieldOldValue){
			aclv._inputFieldXForm.notifyListeners(DwtEvent.XFORMS_VALUE_CHANGED, new DwtXFormsEvent(aclv._inputFieldXForm, aclv._inputFieldXFormItem,true));
		}
	}
	
	return true;
}

// Public methods

ZaAutoCompleteListView.prototype.toString = 
function () {
	return "ZaAutoCompleteListView";
}

/**
* Adds autocompletion to the given field by setting key event handlers.
*
* @param element		an HTML element
*/
ZaAutoCompleteListView.prototype.handle =
function(element) {
	element._acListViewId = this._internalId;
	Dwt.setHandler(element, DwtEvent.ONKEYDOWN, ZaAutoCompleteListView.onKeyDown);
	Dwt.setHandler(element, DwtEvent.ONKEYUP, ZaAutoCompleteListView.onKeyUp);
}

/**
* Autocompletion of addresses. Should be called by a handler for a keyboard event.
*
* @param element	the element (some sort of text field) doing autocomplete
* @param loc		where to popup the list, if appropriate
*/
ZaAutoCompleteListView.prototype.autocomplete =
function(element, loc) {

	this.reset(); // start fresh
	this._element = element; // for updating element later
	this._loc = loc;
	var text = element.value;

	this._autocomplete(text);
}

/**
* Resets the state of the autocomplete list.
*/
ZaAutoCompleteListView.prototype.reset =
function() {
	this._matches.removeAll();
	this.show(false);
}

/**
* Checks the given key to see if it's used to control the autocomplete list in some way.
* If it does, the action is taken and the key won't be echoed into the input area.
*
* The following keys are action keys:
*	38 40		up/down arrows (list selection)
*	27			escape (hide list)
*
* The following keys are delimiters (trigger completion):
*	3 13		return
*	9			tab
*	59 186		semicolon
*	188			comma
*
* @param key		a numeric key code
* @param isDelim	true if a single delimiter key was typed
*/
ZaAutoCompleteListView.prototype.handleAction =
function(key, isDelim) {
	DBG.println(AjxDebug.DBG2, "autocomplete handleAction for key " + key + " / " + isDelim);

	if (isDelim) {
		this._update();
	} else if (key == 38 || key == 40) {
		// handle up and down arrow keys
		var idx = this._getSelectedIndex();
		var size = this.size();
		if (size <= 1) return;
		var newIdx;
		if (key == 40 && (idx < size - 1)) {
			newIdx = idx + 1;
			this._setSelected(newIdx);
		} else if (key == 38 && (idx > 0)) {
			newIdx = idx - 1;
			this._setSelected(newIdx);
		}
	} else if (key == 27) {
		this.reset(); // ESC hides the list
	}
}

// Private methods

// Called as a timed action, after a sufficient pause in typing within an address field.
ZaAutoCompleteListView.prototype._autocompleteAction =
function(ev) {
	try {
		DBG.println(AjxDebug.DBG2, "performing autocomplete");
		var element = ev.element;
		var aclv = ev.aclv;
		aclv._acActionId = -1; // so we don't try to cancel
		aclv._numChars = 0;

		if (this._locCallback) {	
			var loc = this._locCallback.run(ev);
			aclv.autocomplete(element, loc);
		}
	} catch (ex) {
		DBG.println("Session expired? No controller to handle exception. Cannot autocomplete w/o contact list.");
	}
}

/**
* Displays the current matches in a popup list, selecting the first.
*
* @param show	whether to display the list
* @param loc	where to display the list
*/
ZaAutoCompleteListView.prototype.show =
function(show, loc) {
	DBG.println(AjxDebug.DBG3, "autocomplete show: " + show);
	if (show) {
		this._popup(loc);
	} else {
		this._popdown();
	}
}

// Private methods

// Finds the next chunk of text in a string that we should try to autocomplete, by reading
// until it hits some sort of address delimiter (or runs out of text)
ZaAutoCompleteListView.prototype._nextChunk =
function(text, start) {
	while (text.charAt(start) == ' ')	// ignore leading space
		start++;
	for (var i = start; i < text.length; i++) {
		var c = text.charAt(i);
		if (ZaAutoCompleteListView.IS_DELIM[c])
			return {text: text, str: text.substring(start, i), start: start, end: i, delim: true};
	}
	return {text: text, str: text.substring(start, i), start: start, end: i, delim: false};
}

// Looks for matches for a string and either displays them in a list, or does the completion
// immediately (if the string was followed by a delimiter). The chunk object that we get has
// information that allows us to do the replacement if we are performing completion.
ZaAutoCompleteListView.prototype._autocomplete =
function(str) {
	// if string is empty or already a delimited address, no reason to look for matches
	if (!(str && str.length) || (this._done[str]))
		return;

	// do matching
	this._removeAll();
	if (!this._dataLoading) {
		var callback = new AjxCallback(this, this.dataLoadedCallback);
		this._dataLoading = true;
		this._dataLoaderMethod.call (this._dataLoaderObject, str, callback);
	}	
}

// Replaces a string within some text from the selected address match.
ZaAutoCompleteListView.prototype._complete =
function(text) {
	DBG.println(AjxDebug.DBG3, "complete: selected is " + this._selected);
	var match = this._getSelected();
	if (!match)	return;

	var start = this._start;
	var end = hasDelim ? this._end + 1 : this._end;
	DBG.println(AjxDebug.DBG2, "update replace range: " + start + " - " + end);
	var value = match[this._matchValue];
//	var newText = [text.substring(0, start), value, this._separator, text.substring(end, text.length)].join("");
	this._done[value] = true;
	DBG.display(AjxDebug.DBG2, newText);
	return {text: newText, start: start + value.length + this._separator.length, match: match};
}

// Resets the value of an element to the given text.
ZaAutoCompleteListView.prototype._updateField =
function(match) {
	var el = this._element;
	el.value = match[this._matchValue];
	el.focus();
	this.reset();
	this._inputFieldXFormItem.setInstanceValue(match[this._matchValue]);
	if(this._inputFieldXForm){	
		this._inputFieldXForm.setIsDirty(true, this._inputFieldXFormItem) ;
        	this._inputFieldXForm.notifyListeners(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, new DwtXFormsEvent(this._inputFieldXForm, this._inputFieldXFormItem,true));
		this._inputFieldXForm.notifyListeners(DwtEvent.XFORMS_VALUE_CHANGED, new DwtXFormsEvent(this._inputFieldXForm, this._inputFieldXFormItem,true));
	}
	if (this._compCallback)
		this._compCallback.run(match, this._inputFieldXFormItem);
}

// Updates the element with the currently selected match.
ZaAutoCompleteListView.prototype._update =
function() {
	var match = this._getSelected();
	if (!match)	return;	
	this._updateField(match);
}

// Listeners

// MOUSE_DOWN selects a match and performs an update. Note that we don't wait for
// a corresponding MOUSE_UP event.
ZaAutoCompleteListView.prototype._mouseDownListener = 
function(ev) {
	ev = DwtUiEvent.getEvent(ev);
	var div = DwtUiEvent.getTarget(ev);
	if (!div || div._pos == null)
		return;
	if (ev.button == DwtMouseEvent.LEFT) {
		this._setSelected(div._pos);
		if (this.isListenerRegistered(DwtEvent.SELECTION)) {
	    	var selEv = DwtShell.selectionEvent;
	    	DwtUiEvent.copy(selEv, ev);
	    	selEv.match = div._match;
	    	selEv.detail = 0;
	    	this.notifyListeners(DwtEvent.SELECTION, selEv);
	    	return true;
	    }		
	}
}

// Mouse over selects a match
ZaAutoCompleteListView.prototype._mouseOverListener = 
function(ev) {
	ev = DwtUiEvent.getEvent(ev);
	var div = DwtUiEvent.getTarget(ev);
	if (!div || div._pos == null)
		return;
	this._setSelected(div._pos);
}

// Seems like DwtComposite should define this method
ZaAutoCompleteListView.prototype._addSelectionListener = 
function(listener) {
	this._eventMgr.addListener(DwtEvent.SELECTION, listener);
}

ZaAutoCompleteListView.prototype._listSelectionListener = 
function(ev) {
	this._update();
};

// Layout

// Creates the list and its member elements based on the matches we have. Each match becomes a 
// DIV. The first match is automatically selected.
ZaAutoCompleteListView.prototype._set =
function(sel) {
	var thisHtmlElement = this.getHtmlElement();
	thisHtmlElement.innerHTML = "";
	var len = this._matches.size();
	for (var i = 0; i < len; i++) {
		var match = this._matches.get(i);
		if (match){
			var div = document.createElement("div");		
			div._pos = i;
			div[DwtListView._STYLE_CLASS] = "Row";
			div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
                        div[DwtListView._STYLE_CLASS] = "ZaAutoCompleteListRow";
			div.className = div[DwtListView._STYLE_CLASS];
			div.innerHTML = AjxStringUtil.htmlEncode (match[this._matchText]);
			thisHtmlElement.appendChild(div);
		}
	}
	this._selected = sel || 0;
	this._setSelected(this._selected);
}

// Displays the list
ZaAutoCompleteListView.prototype._popup = 
function(loc) {
	this.setLocation(loc.x, loc.y);
	this.setSize (Dwt.getSize(this._inputFieldElement).x - 2) ; //set width only, 2 is the border-width
	this.setVisible(true);
	this.setZIndex(Dwt.Z_DIALOG_MENU);
	ZaAutoCompleteListView._activeAcList = this;
	DwtEventManager.addListener(DwtEvent.ONMOUSEDOWN, ZaAutoCompleteListView._outsideMouseDownListener);
	this.shell._setEventHdlrs([DwtEvent.ONMOUSEDOWN]);
	this.shell.addListener(DwtEvent.ONMOUSEDOWN, this._outsideListener);
}

// Hides the list
ZaAutoCompleteListView.prototype._popdown = 
function() {
	this.setZIndex(Dwt.Z_HIDDEN);
	this.setVisible(false);
	ZaAutoCompleteListView._activeAcList = null;
	DwtEventManager.removeListener(DwtEvent.ONMOUSEDOWN, ZaAutoCompleteListView._outsideMouseDownListener);
	this.shell._setEventHdlrs([DwtEvent.ONMOUSEDOWN], true);
	this.shell.removeListener(DwtEvent.ONMOUSEDOWN, this._outsideListener);
}

// Selects a match by changing its CSS class
ZaAutoCompleteListView.prototype._setSelected =
function(sel) {
	DBG.println(AjxDebug.DBG3, "setting selected index to " + sel);
	var children = this.getHtmlElement().childNodes;
	if (!children) return;

	var len = children.length;
	for (var i = 0; i < len; i++) {
		var div = children[i];
		var curStyle = div.className;
		if (i == sel && curStyle != div[DwtListView._SELECTED_STYLE_CLASS]) {
			div.className = div[DwtListView._SELECTED_STYLE_CLASS];
		} else if (curStyle != div[DwtListView._STYLE_CLASS]) {
			div.className = div[DwtListView._STYLE_CLASS];
		}
	}
	this._selected = sel;
}

// Miscellaneous

// Adds a match to the internal list of matches
ZaAutoCompleteListView.prototype._append =
function(match) {
	this._matches.add(match);
}

// Clears the internal list of matches
ZaAutoCompleteListView.prototype._removeAll =
function() {
	this._matches.removeAll();
	var htmlElement = this.getHtmlElement();
	while (htmlElement.hasChildNodes())
		htmlElement.removeChild(htmlElement.firstChild);
}

// Returns the number of matches
ZaAutoCompleteListView.prototype.size =
function() {
	return this._matches.size();
}

// Returns the index of the currently selected match
ZaAutoCompleteListView.prototype._getSelectedIndex =
function() {
	return this._selected;
}

// Returns the currently selected match
ZaAutoCompleteListView.prototype._getSelected =
function() {
	return this._matches.get(this._selected);
}

/**
 * This method is called by this._dataLoaderObject when the data arrives
 * @param list - parsed array of data 
 */
ZaAutoCompleteListView.prototype.dataLoadedCallback = function (list) {
	if (list && list.length > 0) {
		var len = list.length;
		DBG.println(AjxDebug.DBG2, "found " + len + " match" + len > 1 ? "es" : "");
		for (var i = 0; i < len; i++) {
			var match = list[i];
			this._append(match);
		}
	} else {
		this._dataLoading = false;
		return;
	}
	
	this._set(); // populate the list view

	// show the list (unless we're doing completion)
	this.show(true, this._loc);
	this._dataLoading = false;
}
// Force the focus to the element
ZaAutoCompleteListView.prototype._focus =
function(htmlEl) {
	htmlEl.focus();
}

ZaAutoCompleteListView._outsideMouseDownListener =
function(ev) {
	var curList = ZaAutoCompleteListView._activeAcList;
    if (curList.getVisible()) {
		var obj = DwtControl.getTargetControl(ev);
		if (obj != curList) {
			curList.show(false);
			ev._stopPropagation = false;
			ev._returnValue = true;
		}
	}
};
}
if (AjxPackage.define("zimbraAdmin.common.AutoComplete_XFormItem")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
 
/**	
* @class defines XFormItem type _AUTO_COMPLETE_LIST_
* @contructor
* @author Charles Cao
**/

AutoCompleteList_XFormItem = function() {}
XFormItemFactory.createItemType("_AUTO_COMPLETE_LIST_", "auto_complete_list", 
										AutoCompleteList_XFormItem, WidgetAdaptor_XFormItem);

AutoCompleteList_XFormItem.prototype.widgetClass = ZaAutoCompleteListView;


AutoCompleteList_XFormItem.prototype.constructWidget = function () {
	
	var autoCompleteListViewClass = this.getInheritedProperty("widgetClass");
//	var locCallback = new AjxCallback (this, AutoCompleteList_XFormItem.prototype._getAcListLoc);
	var locCallback = new AjxCallback (this, this._getAcListLoc);
	var compCallback = new AjxCallback(this, this.getInheritedProperty("compCallback"));
	//var dataLoadCallback = new AjxCallback (this, dataLoaderClass.prototype._getDataCallback);
	
	var params = { 	//parent: this.getForm() ,
					parent: this.getForm().shell,					
					className: this.getCssClass(),
					dataLoaderClass: this.getInheritedProperty("dataLoaderClass"),
					dataLoaderMethod: this.getInheritedProperty("dataLoaderMethod"), //method that searches for matches (e.g. sends search request to server)
					matchValue: this.getInheritedProperty("matchValue"), //the name of the property in the match list to be used to do the comparison
					matchText: this.getInheritedProperty("matchText"),//the name of the property in the match list to be displayed in the field
					//inputFieldElement: this.getForm().getItemsById (this.getInheritedProperty("inputFieldElementId"))[0].getElement(),
					inputFieldXFormItem: this.getForm().getItemsById (this.getInheritedProperty("inputFieldElementId"))[0],
					//dataLoadCallback: dataLoadCallback,
					locCallback: locCallback, 
					compCallback: compCallback,//called when a value is selected from the list of suggestions
					separator: ""  					
				  };
								
	var widget = new autoCompleteListViewClass(params);
		
	return widget;
};

AutoCompleteList_XFormItem.prototype.insertWidget = function (form, widget, parentElement) {
	//the autocomplete list always belong to the shell
	//so we actually don't need to reparent the element
	return ;
}

AutoCompleteList_XFormItem.prototype.updateWidget = function (newValue) {}

AutoCompleteList_XFormItem.prototype._getAcListLoc =
function(ev) {
	var element = ev.element;
	var loc = Dwt.getLocation(element);
	var height = Dwt.getSize(element).y;
	return (new DwtPoint(loc.x, loc.y + height));
};





}
if (AjxPackage.define("zimbraAdmin.common.ZaKeyMap")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* Creates a key mapping.
* @constructor
* @class
* 
* @author Ross Dargahi
*/
ZaKeyMap = function() {
	DwtKeyMap.call(this);
	// Note that FF on the mac has an issue reporting the ALT+<keycode> it
	// always ends up reporting undefined for the <keycode>. For this reason I
	// have added Ctrl analogs below	
	this._map["ZaGlobal"] = {

			"Alt+Shift+D,0": ZaKeyMap.DBG_NONE,
			"Ctrl+Shift+D,0": ZaKeyMap.DBG_NONE, // Mac issue with Alt+Key

			"Alt+Shift+D,1": ZaKeyMap.DBG_1,
			"Ctrl+Shift+D,1": ZaKeyMap.DBG_1,

			"Alt+Shift+D,2": ZaKeyMap.DBG_2,
			"Ctrl+Shift+D,2": ZaKeyMap.DBG_2,

			"Alt+Shift+D,3": ZaKeyMap.DBG_3,
			"Ctrl+Shift+D,3": ZaKeyMap.DBG_3,

			"Alt+S":   ZaKeyMap.SAVE,
			"Ctrl+S": ZaKeyMap.SAVE,

			"Del":        ZaKeyMap.DEL,
			"Backspace":  ZaKeyMap.DEL, // MacBook keyboard
			"Esc":        ZaKeyMap.CANCEL,
			"ArrowRight": ZaKeyMap.NEXT_PAGE,
			"ArrowLeft":  ZaKeyMap.PREV_PAGE
	};
		
}

ZaKeyMap.prototype = new DwtKeyMap(true);
ZaKeyMap.prototype.constructor = ZaKeyMap;

// Key map action code contants
var i = 0;

ZaKeyMap.CANCEL = i++;
ZaKeyMap.DBG_NONE = i++;
ZaKeyMap.DBG_1 = i++;
ZaKeyMap.DBG_2 = i++;
ZaKeyMap.DBG_3 = i++;
ZaKeyMap.DEL = i++;
ZaKeyMap.NEXT_CONV = i++;
ZaKeyMap.NEXT_PAGE = i++;
ZaKeyMap.PREV_CONV = i++;
ZaKeyMap.PREV_PAGE = i++;
ZaKeyMap.SAVE = i++;


delete i;
}
if (AjxPackage.define("zimbraAdmin.common.ACLXFormItem")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* XFormItem class: "acl (composite item)
* this item is used in the Admin UI to display ACL fields like Notebook folder access rights
* @class ACLXFormItem
* @constructor ACLXFormItem
* @author Greg Solovyev
**/
ACLXFormItem = function() {}
XFormItemFactory.createItemType("_ACL_", "acl", ACLXFormItem, Composite_XFormItem);
ACLXFormItem.prototype.numCols = 6;
ACLXFormItem.prototype.nowrap = true;
ACLXFormItem.prototype.visibleBoxes = {r:true,w:true,a:true,i:true,d:true,x:true};
ACLXFormItem.prototype.initializeItems = 
function () {
	var visibleBoxes = this.getInheritedProperty("visibleBoxes");
	this.items = [];
	if(visibleBoxes.r)
		this.items.push(	
			{type:_CHECKBOX_,width:"40px",containerCssStyle:"width:40px", forceUpdate:true, ref:".", 
				labelLocation:_RIGHT_, label:ZaMsg.ACL_R, subLabel:"", align:_RIGHT_,
				visibilityChecks:[],enableDisableChecks:[],
				getDisplayValue:function (itemval) {
					return (itemval && itemval["r"]==1);
				},
				elementChanged:function(isChecked, instanceValue, event) {
					var newVal = Object();

					if(instanceValue) {
						newVal["w"] = instanceValue["w"];
						newVal["a"] = instanceValue["a"];
						newVal["i"] = instanceValue["i"];
						newVal["d"] = instanceValue["d"];			
						newVal["x"] = instanceValue["x"];			
					} else {
						newVal = {r:0,w:0,i:0,d:0,a:0,x:0};
					}
					newVal["r"] = isChecked ? 1 : 0;
					this.getForm().itemChanged(this.getParentItem(), newVal, event);
				}
			}
		);

	if(visibleBoxes.w)
		this.items.push(	
			{type:_CHECKBOX_,width:"40px",containerCssStyle:"width:40px", forceUpdate:true, ref:".", 
				labelLocation:_RIGHT_, label:ZaMsg.ACL_W, subLabel:"",  align:_RIGHT_,
				visibilityChecks:[],enableDisableChecks:[],
				getDisplayValue:function (itemval) {
					return (itemval && itemval["w"]==1);
				},
				elementChanged:function(isChecked, instanceValue, event) {
					var newVal = Object();
					if(instanceValue) {					
						newVal["r"] = instanceValue["r"];
						newVal["a"] = instanceValue["a"];
						newVal["i"] = instanceValue["i"];
						newVal["d"] = instanceValue["d"];			
						newVal["x"] = instanceValue["x"];			
					} else {
						newVal = {r:0,w:0,i:0,d:0,a:0,x:0};
					}
					newVal["w"] = isChecked ? 1 : 0;
					this.getForm().itemChanged(this.getParentItem(), newVal, event);
				}
			}
		);

	if(visibleBoxes.d)
		this.items.push(	
			{type:_CHECKBOX_,width:"40px",containerCssStyle:"width:40px", forceUpdate:true, ref:".", 
				labelLocation:_RIGHT_, label:ZaMsg.ACL_D, subLabel:"",  align:_RIGHT_,
				visibilityChecks:[],enableDisableChecks:[],
				getDisplayValue:function (itemval) {
					return (itemval && itemval["d"]==1);
				},
				elementChanged:function(isChecked, instanceValue, event) {
					var newVal = Object();

					if(instanceValue) {										
						newVal["w"] = instanceValue["w"];
						newVal["a"] = instanceValue["a"];
						newVal["i"] = instanceValue["i"];
						newVal["r"] = instanceValue["r"];			
						newVal["x"] = instanceValue["x"];			
					} else {
						newVal = {r:0,w:0,i:0,d:0,a:0,x:0};
					}
					newVal["d"] = isChecked ? 1 : 0;
					this.getForm().itemChanged(this.getParentItem(), newVal, event);
				}
			}
		);
		
	if(visibleBoxes.i)
		this.items.push(	
			{type:_CHECKBOX_,width:"40px",containerCssStyle:"width:40px", forceUpdate:true, ref:".", 
				labelLocation:_RIGHT_, label:ZaMsg.ACL_I, subLabel:"",  align:_RIGHT_,
				visibilityChecks:[],enableDisableChecks:[],
				getDisplayValue:function (itemval) {
					return (itemval && itemval["i"]==1);
				},
				elementChanged:function(isChecked, instanceValue, event) {
					var newVal = Object();

					if(instanceValue) {				
						newVal["w"] = instanceValue["w"];
						newVal["a"] = instanceValue["a"];
						newVal["r"] = instanceValue["r"];
						newVal["d"] = instanceValue["d"];			
						newVal["x"] = instanceValue["x"];			
					} else {
						newVal = {r:0,w:0,i:0,d:0,a:0,x:0};
					}
					newVal["i"] = isChecked ? 1 : 0;
					this.getForm().itemChanged(this.getParentItem(), newVal, event);
				}
			}
		);		
		
	if(visibleBoxes.x)
		this.items.push(	
			{type:_CHECKBOX_,width:"40px",containerCssStyle:"width:40px", forceUpdate:true, ref:".", 
				labelLocation:_RIGHT_, label:ZaMsg.ACL_X, subLabel:"",align:_RIGHT_,
				visibilityChecks:[],enableDisableChecks:[],
				getDisplayValue:function (itemval) {
					return (itemval && itemval["x"]==1);
				},
				elementChanged:function(isChecked, instanceValue, event) {
					var newVal = Object();
					if(instanceValue) {				
						newVal["w"] = instanceValue["w"];
						newVal["a"] = instanceValue["a"];
						newVal["i"] = instanceValue["i"];
						newVal["d"] = instanceValue["d"];			
						newVal["r"] = instanceValue["r"];			
					} else {
						newVal = {r:0,w:0,i:0,d:0,a:0,x:0};
					}
					newVal["x"] = isChecked ? 1 : 0;
					this.getForm().itemChanged(this.getParentItem(), newVal, event);
				}
			}
		);	
		
	if(visibleBoxes.a)
		this.items.push(	
			{type:_CHECKBOX_,width:"40px",containerCssStyle:"width:40px", forceUpdate:true, ref:".", 
				labelLocation:_RIGHT_, label:ZaMsg.ACL_A, subLabel:"", align:_RIGHT_,
				visibilityChecks:[],enableDisableChecks:[],
				getDisplayValue:function (itemval) {
					return (itemval && itemval["a"]==1);
				},
				elementChanged:function(isChecked, instanceValue, event) {
					var newVal = Object();
					if(instanceValue) {				
						newVal["w"] = instanceValue["w"];
						newVal["r"] = instanceValue["r"];
						newVal["i"] = instanceValue["i"];
						newVal["d"] = instanceValue["d"];			
						newVal["x"] = instanceValue["x"];			
					} else {
						newVal = {r:0,w:0,i:0,d:0,a:0,x:0};
					}
					newVal["a"] = isChecked ? 1 : 0;
					this.getForm().itemChanged(this.getParentItem(), newVal, event);
				}
			}
		);				
	Composite_XFormItem.prototype.initializeItems.call(this);
};

ACLXFormItem.prototype.items = [];

}
if (AjxPackage.define("zimbraAdmin.common.ZaSkinPoolChooser")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

ZaSkinPoolChooser = function(params) {
 	if (arguments.length == 0) return;
/*
 	this.splitButtons = params.splitButtons;
 	
 	if(params.labelWidth)
 		this.labelWidth = params.labelWidth;
 	else
 		this.labelWidth = "300px"
 	
 	if(params.tableWidth)
 		this.tableWidth = params.tableWidth;
 	else
 		this.tableWidth = "300px";*/
 		
 	DwtChooser.call(this, params);
}
 
ZaSkinPoolChooser.prototype = new DwtChooser;
ZaSkinPoolChooser.prototype.constructor = ZaSkinPoolChooser;

ZaSkinPoolChooser.prototype._createHtml = 
function() {

	this._sourceListViewDivId	= Dwt.getNextId();
	this._targetListViewDivId	= Dwt.getNextId();
	this._buttonsDivId			= Dwt.getNextId();
	this._removeButtonDivId		= Dwt.getNextId();
	if (this._allButtons) {
		this._addAllButtonDivId		= Dwt.getNextId();
		this._removeAllButtonDivId	= Dwt.getNextId();
	}

	var html = [];
	var idx = 0;
	/*
	// start new table for list views
	html[idx++] = "<table cellspacing=0 cellpadding=0 border=0>";
	html[idx++] = "<colgroup><col width='";
	html[idx++] = this.labelWidth;
	html[idx++] = "'/><col width='";
	html[idx++] = this.tableWidth;
	html[idx++] = "'/></colgroup>";
	html[idx++] = "<tbody>";
	html[idx++] = "<tr><td style='text-align:right;width:";
	html[idx++] = this.labelWidth;
	html[idx++] = "' class='xform_label'";
	html[idx++] = ">" + ZaMsg.NAD_zimbraInstalledSkin + "</td>";
	// source list
	html[idx++] = "<td class='xform_field_container' width='";
	html[idx++] = this.tableWidth;
	html[idx++] = "'><div id='";
	html[idx++] = this._sourceListViewDivId;
	html[idx++] = "'></div></td>";
	html[idx++] = "</tr>";

	// transfer buttons
	html[idx++] = "<tr><td style='text-align:right;width:";
	html[idx++] = this.labelWidth;	
	html[idx++] = "' class='xform_label'";
	html[idx++] = "'>&nbsp;</td>";
	html[idx++] = "<td valign='middle' style='text-align:center;width:";
	html[idx++] = this.tableWidth;	
	html[idx++] = "'><div id='";
	html[idx++] = this._buttonsDivId;
	html[idx++] = "'>";
	html[idx++] = "<table cellspacing=2 cellpadding=0 border=0><tr>";
	if(this.splitButtons) {
		for (var i = 0; i < this._buttonInfo.length; i++) {
			var id = this._buttonInfo[i].id;
			html[idx++] = "<td><div id='";
			html[idx++] = this._buttonDivId[id];
			html[idx++] = "'></div></td>";
		}
		if (this._allButtons) {
			html[idx++] = "<td><div id='";
			html[idx++] = this._addAllButtonDivId;
			html[idx++] = "'></div></td>";
		}
	
		html[idx++] = "</tr><tr>";
		// remove button
		html[idx++] = "<td><div id='";
		html[idx++] = this._removeButtonDivId;
		html[idx++] = "'></div></td>";
		if (this._allButtons) {
			html[idx++] = "<td><div id='";
			html[idx++] = this._removeAllButtonDivId;
			html[idx++] = "'></div></td>";
		}
	} else {
		if (this._allButtons) {
			html[idx++] = "<td><div id='";
			html[idx++] = this._addAllButtonDivId;
			html[idx++] = "'></div></td>";
		}
		for (var i = 0; i < this._buttonInfo.length; i++) {
			var id = this._buttonInfo[i].id;
			html[idx++] = "<td><div id='";
			html[idx++] = this._buttonDivId[id];
			html[idx++] = "'></div></td>";
		}
	

		// remove button
		html[idx++] = "<td><div id='";
		html[idx++] = this._removeButtonDivId;
		html[idx++] = "'></div></td>";
		if (this._allButtons) {
			html[idx++] = "<td><div id='";
			html[idx++] = this._removeAllButtonDivId;
			html[idx++] = "'></div></td>";
		}
	}
	html[idx++] = "</tr></table>";
	html[idx++] = "</div></td></tr>";


	html[idx++] = "<tr><td style='text-align:right' class='xform_label'>" + ZaMsg.NAD_zimbraAvailableSkin + "</td>";
	// target list
	html[idx++] = "<td class='xform_field_container' width='";
	html[idx++] = this.tableWidth;
	html[idx++] = "'><div id='";
	html[idx++] = this._targetListViewDivId;
	html[idx++] = "'></div></td>";
	html[idx++] = "</tr></tbody></table>";

	*/
	
	// start new table for list views
	html[idx++] = "<table cellspacing=0 cellpadding=0 border=0 width=100%>";
	html[idx++] = "<colgroup><col width='40%'/><col width='20%'/><col width='40%'/> </colgroup>";
	html[idx++] = "<tbody>";
	html[idx++] = "<tr><td style='text-align:center' class='xform_label'>" + ZaMsg.NAD_zimbraInstalledSkin + "</td><td>&nbsp;</td><td style='text-align:center'  class='xform_label'>" + ZaMsg.NAD_zimbraAvailableSkin + "</td</tr>"
	html[idx++] = "<tr>";

	// source list
	html[idx++] = "<td align='center' style='text-align:center' id='";
	html[idx++] = this._sourceListViewDivId;
	html[idx++] = "'></td>";

	// transfer buttons
	html[idx++] = "<td valign='middle' style='text-align:center' id='";
	html[idx++] = this._buttonsDivId;
	html[idx++] = "'>";
	if (this._allButtons) {
		html[idx++] = "<div id='";
		html[idx++] = this._addAllButtonDivId;
		html[idx++] = "'></div><br>";
	}
	for (var i = 0; i < this._buttonInfo.length; i++) {
		var id = this._buttonInfo[i].id;
		html[idx++] = "<div id='";
		html[idx++] = this._buttonDivId[id];
		html[idx++] = "'></div><br>";
	}
	// remove button
	html[idx++] = "<br><div id='";
	html[idx++] = this._removeButtonDivId;
	html[idx++] = "'></div>";
	if (this._allButtons) {
		html[idx++] = "<br><div id='";
		html[idx++] = this._removeAllButtonDivId;
		html[idx++] = "'></div><br>";
	}
	html[idx++] = "</td>";

	// target list
	html[idx++] = "<td align='center' style='text-align:center' id='";
	html[idx++] = this._targetListViewDivId;
	html[idx++] = "'></td>";	

	html[idx++] = "</tr></tbody></table>";	
	this.getHtmlElement().innerHTML = html.join("");
};
}
if (AjxPackage.define("zimbraAdmin.common.ZaZimletPoolChooser")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

ZaZimletPoolChooser = function(params) {
 	if (arguments.length == 0) return;
		
 	DwtChooser.call(this, params);
}
 
ZaZimletPoolChooser.prototype = new DwtChooser;
ZaZimletPoolChooser.prototype.constructor = ZaZimletPoolChooser;

ZaZimletPoolChooser.prototype._createHtml = 
function() {

	this._sourceListViewDivId	= Dwt.getNextId();
	this._targetListViewDivId	= Dwt.getNextId();
	this._buttonsDivId			= Dwt.getNextId();
	this._removeButtonDivId		= Dwt.getNextId();
	if (this._allButtons) {
		this._addAllButtonDivId		= Dwt.getNextId();
		this._removeAllButtonDivId	= Dwt.getNextId();
	}

	var html = [];
	var idx = 0;

	// start new table for list views
	html[idx++] = "<table cellspacing=0 cellpadding=0 border=0 width=100%>";
	html[idx++] = "<colgroup><col width='40%'/><col width='20%'/><col width='40%'/> </colgroup>";
	html[idx++] = "<tbody>";
	html[idx++] = "<tr><td style='text-align:center' class='xform_label'>" + ZaMsg.NAD_zimbraInstalledZimlets + "</td><td>&nbsp;</td><td style='text-align:center'  class='xform_label'>" + ZaMsg.NAD_zimbraAvailableZimlets + "</td</tr>"
	html[idx++] = "<tr>";

	// source list
	html[idx++] = "<td align='center' style='text-align:center' id='";
	html[idx++] = this._sourceListViewDivId;
	html[idx++] = "'></td>";

	// transfer buttons
	html[idx++] = "<td valign='middle' style='text-align:center' id='";
	html[idx++] = this._buttonsDivId;
	html[idx++] = "'>";
	if (this._allButtons) {
		html[idx++] = "<div id='";
		html[idx++] = this._addAllButtonDivId;
		html[idx++] = "'></div><br>";
	}
	for (var i = 0; i < this._buttonInfo.length; i++) {
		var id = this._buttonInfo[i].id;
		html[idx++] = "<div id='";
		html[idx++] = this._buttonDivId[id];
		html[idx++] = "'></div><br>";
	}
	// remove button
	html[idx++] = "<br><div id='";
	html[idx++] = this._removeButtonDivId;
	html[idx++] = "'></div>";
	if (this._allButtons) {
		html[idx++] = "<br><div id='";
		html[idx++] = this._removeAllButtonDivId;
		html[idx++] = "'></div><br>";
	}
	html[idx++] = "</td>";

	// target list
	html[idx++] = "<td align='center' style='text-align:center' id='";
	html[idx++] = this._targetListViewDivId;
	html[idx++] = "'></td>";	

	html[idx++] = "</tr></tbody></table>";	
	this.getHtmlElement().innerHTML = html.join("");
};
}
if (AjxPackage.define("zimbraAdmin.common.ZaXProgressDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaXProgressDialog
* @contructor ZaXProgressDialog
* @author Greg Solovyev
* @param parent
* param w (width)
* param h (height)
**/
ZaXProgressDialog = function(parent, w, h) {
	if (arguments.length == 0) return;
	ZaXDialog.call(this, parent,null, ZaMsg.Progress_Title, w, h, "ZaXProgressDialog");
	this.initForm(ZaXProgressDialog.myXModel,this.getMyXForm());
	this._containedObject = {numTotal:100,numDone:0,progressMsg:""};
}

ZaXProgressDialog.prototype = new ZaXDialog;
ZaXProgressDialog.prototype.constructor = ZaXProgressDialog;

ZaXProgressDialog.prototype.popup = 
function () {
	DwtDialog.prototype.popup.call(this);
}

ZaXProgressDialog.prototype.popdown = 
function () {
	DwtDialog.prototype.popdown.call(this);
}

ZaXProgressDialog.prototype.enableOk = 
function (enable) {
	this._button[DwtDialog.OK_BUTTON].setEnabled(enable);
}

ZaXProgressDialog.prototype.setProgress = 
function (obj) {
	this._localXForm.setInstance(obj);
	this._localXForm.refresh();	
}

ZaXProgressDialog.prototype.getMyXForm = 
function() {	
	var xFormObject = {
		numCols:2, align:_CENTER_,cssStyle:"text-align:center",
		items:[
			{type:_DWT_ALERT_, ref:"progressMsg",content: null,
				colSpan:"*",
 				iconVisible: true,
				align:_CENTER_,				
				style: DwtAlert.INFORMATION
			},
			{type:_DWT_PROGRESS_BAR_, label:ZaMsg.NAD_Progress,
				maxValue:null,
				maxValueRef:"numTotal", 
				ref:"numDone",
				valign:_CENTER_,
				align:_CENTER_,	
				wholeCssClass:"progressbar",
				progressCssClass:"progressused"
			}
		]		
	}
	return xFormObject;
}

ZaXProgressDialog.myXModel =  {
	items: [
		{id:"numTotal", ref:"numTotal", type:_NUMBER_},			
		{id:"numDone", ref:"numDone", type:_NUMBER_},					
		{id:"progressMsg", ref:"progressMsg", type:_STRING_}
	]
};
}
if (AjxPackage.define("zimbraAdmin.common.ZaAppTabGroup")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * The container for all the Application tabs. It will include all the operations at the
 * tab group level, including add a tab, remove a tab, switch tab, move tab position, 
 * resize tabs, 
 * 
 * 
*/

ZaAppTabGroup = function(parent,parentElId) {
	if (arguments.length == 0) return;
	DwtComposite.call(this,{
		parent:parent, 
		className:"ZaAppTabGroup", 
		posStyle:Dwt.ABSOLUTE_STYLE, 
		id:ZaId.getTabId(ZaId.TAB_GROUP,parentElId)
	});
	this._created = false ;

	this._mainTab = null;
	this._currentTab = null ;
	this._currentTabWidth = 0;
	
	this._createUI(parentElId) ;
		
	this._visibleStartTab = 0;
	this._numberOfVisibleTabs = 0 ;
}

ZaAppTabGroup.prototype = new DwtComposite();
ZaAppTabGroup.prototype.constructor = ZaAppTabGroup;

//Global Varible to keep all the tab instances
ZaAppTabGroup._TABS = new AjxVector() ;
ZaAppTabGroup.TAB_LIMIT  = 10;

ZaAppTabGroup.prototype.getTabs =
function () {
	return ZaAppTabGroup._TABS ;
}

ZaAppTabGroup.prototype._createUI =
function (parentElId) {
	if (this._created) {
		return ;
	}else {
		if (parentElId) {
			this.reparentHtmlElement ( parentElId );
		}
		//create the shift arrows
		
		this._leftArrow = new DwtComposite(this, null, DwtControl.ABSOLUTE_STYLE) ;
		AjxImg.setImage(this._leftArrow.getHtmlElement(), "LeftArrow");
		this._leftArrow.setDisplay("none");
		this._rightArrow = new DwtComposite(this, null, DwtControl.ABSOLUTE_STYLE) ;
		AjxImg.setImage (this._rightArrow.getHtmlElement(), "RightArrow");
		this._rightArrow.setDisplay("none");
		this.setArrowHandler ();
		
		/*
		this._leftArrow = new DwtButton (this, null, null, DwtControl.ABSOLUTE_STYLE) ;
		this._rightArrow = new DwtButton (this, null, null, DwtControl.ABSOLUTE_STYLE) ;
		this._leftArrow.setImage ("LeftArrow") ;
		this._rightArrow.setImage("RightArrow") ;
		var selListener = new AjxListener(this, ZaAppTabGroup.prototype._arrowSelListener);
		this._leftArrow.addSelectionListener(selListener) ;
		this._rightArrow.addSelectionListener(selListener) ;
		*/
		//create the main tab
		var tabParams = {
			closable: false,
			mainId: ZaId.TAB_MAIN,
			selected: true
		}
		//this._mainTab = new ZaAppTab (this,  null, null,	null, null, false, true);
		this._mainTab = new ZaAppTab (this,  tabParams);
		this._currentTab = this._mainTab ;
		/*
		if (mainTab) {
			this.addTab(mainTab, false);
		}*/
			
		this._created = true ;
		ZaApp.getInstance().setTabGroup (this) ;
	}
}

ZaAppTabGroup.prototype.setCurrentTabWidth =
function (w) {
	this._currentTabWidth = w ;
}

ZaAppTabGroup.prototype.getCurrentTabWidth =
function () {
	return this._currentTabWidth ;
}

ZaAppTabGroup.prototype.getArrowY =
function () {
	return -4;
}

//this method is called when the browser is resized.
ZaAppTabGroup.prototype._resizeListener =
function () {
	this.resetTabSizes(true);
}


//Need to handle the tab size properly. And  may need to change the label accordingly
ZaAppTabGroup.prototype.resetTabSizes =
function (shouldShift){
	var nextX = 0;
	var tabW = this.getTabWidth();
	//7 is left-margin (3) + left-border (2) + right-border (2)
	var w = tabW - 7;
	this.setCurrentTabWidth(w) ;
	
	var tabH = this.getTabHeight() ;
	var groupWidth = this.getW () ;
	//var groupWidth = this.getW () - 40 ; //40 is the size the left/right arrow
	
	if (this._leftArrow.getVisible()) {
		groupWidth -= 16;
		//groupWidth -= 3 ; //not exactly sure where this 3 from. But it should be deducted to show the tab properly
		nextX += 16 ;
	}
	
	if (this._rightArrow.getVisible()) {
		groupWidth -= 16;
	}
	var isShiftNeeded = false ;
	var indexOfHiddenSelectedTab ;	

    var y ;
 /*   if (AjxEnv.isIE) {
		if (ZaApp.getInstance()._appViewMgr._isAdvancedSearchBuilderDisplayed)  { //once the advancedSearchBuilder is displayed, the skin height got changed. (weird). Hack to make it displayed properly
            y = -11 ;
        }else{
            y = -4 ;
        }
    }*//*else{
		y = 0 ;
	}  */                                                                          
	for (var i=0; i < ZaAppTabGroup._TABS.size(); i++) {
		var cTab = ZaAppTabGroup._TABS.get(i) ;
				
		/*
		if (! cTab._closable) {
			w -= 20 ;
		}  */
				
		cTab.setBounds (nextX, y, w, tabH) ; 
		cTab.resetLabel (cTab.getTitle());
		
		if (nextX && groupWidth && ((nextX + w) > groupWidth)) {
			cTab.setVisible(false);
			if (cTab.isSelected() && shouldShift) { //if the selected tab is hidden, the shift action will be needed.
				isShiftNeeded = true ;
				indexOfHiddenSelectedTab = i ;
			}
		}else{
			cTab.setVisible (true) ;
			//this._numberOfVisibleTabs = i + 1 ; //record how many tabs are visible
		}
		//7 is left-margin (3) + left-border (2) + right-border (2)
		nextX = nextX + w + 7;
	}
	
	/*
	if (this._numberOfVisibleTabs 
			&& this._numberOfVisibleTabs < ZaAppTabGroup._TABS.size()
			&& (this._leftArrow.getVisible() == false
				|| this._rightArrow.getVisible() == false )
			) {
		this._leftArrow.setVisible (true);
		this._rightArrow.setVisible (true);
		this.resetTabSizes();
	}
	
	if (this._numberOfVisibleTabs 
			&& this._numberOfVisibleTabs >= ZaAppTabGroup._TABS.size()
			&& (this._leftArrow.getVisible()
				&& this._rightArrow.getVisible())) {
		this._leftArrow.setVisible (false);
		//this._leftArrow.setLocation(0);
		this._rightArrow.setVisible (false);
		//this._rightArrow.setLocation(groupWidth - 20);
		this.resetTabSizes();
	}*/
	
	if (this._leftArrow.getVisible()) {
		this._leftArrow.setLocation(0, this.getArrowY());
	}else{
		this._leftArrow.setLocation(Dwt.LOC_NOWHERE, Dwt.LOC_NOWHERE);
	}
	
	if (this._rightArrow.getVisible()) {
		this._rightArrow.setLocation(this.getW () - 16, this.getArrowY());
	}else{
		this._rightArrow.setLocation(Dwt.LOC_NOWHERE, Dwt.LOC_NOWHERE);
	}
	
	if (isShiftNeeded && shouldShift) { //expecially useful at the window resize
		var n ;
		if (indexOfHiddenSelectedTab < this._visibleStartTab) { //hidden on the left
			n = indexOfHiddenSelectedTab - this._visibleStartTab ;
		}else { //hidden on the right
		 	n = indexOfHiddenSelectedTab - (this._visibleStartTab + this._numberOfVisibleTabs - 1);
		}
		this.shift(n) ;
	}
}

/**
 * Shift the tab by n (move range of the tab index)
 * n > 0 ; shift right (click the right arrow)
 * n < 0 ; shift left (click the left arrow)
 * 
 */
ZaAppTabGroup.prototype.shift =
function (n) {
	if (! this._numberOfVisibleTabs) return ;
	var totalNoTabs = ZaAppTabGroup._TABS.size() ;
	//
	if (this._numberOfVisibleTabs + this._visibleStartTab + n > totalNoTabs) {
		n = totalNoTabs - this._numberOfVisibleTabs - this._visibleStartTab ;
	}
	
	if (!n) {
		return ;
	}else if (n >0) {
		this._leftArrow.setEnabled(true);
		AjxImg.setImage(this._leftArrow.getHtmlElement(), "LeftArrow");
	}else if (n < 0) {
		this._rightArrow.setEnabled (true) ;
		AjxImg.setImage(this._rightArrow.getHtmlElement(), "RightArrow");
	}
	var nextX = 0; 
	var groupWidth = this.getW () ;
	this._leftArrow.setLocation (nextX, this.getArrowY()) ;
	//20 is the width of the arrow image
	this._rightArrow.setLocation (groupWidth - 20, this.getArrowY()) ;
	nextX += 20 ;
	
	this._visibleStartTab += n ;
	for (var i=0; i < totalNoTabs; i++) {
	 	var cTab = ZaAppTabGroup._TABS.get(i) ;
	 	if ((i >= this._visibleStartTab) 
	 			&& (i <= (this._visibleStartTab + this._numberOfVisibleTabs -1))){
			cTab.setVisible (true) ;
			cTab.setLocation (nextX);
			if (i+1 == totalNoTabs) { //last tab is visible
				this._rightArrow.setEnabled(false) ;
				AjxImg.setImage(this._rightArrow.getHtmlElement(), "rightArrowDis");
			} 
			
			if ( i == 0){
				this._leftArrow.setEnabled (false) ;
				AjxImg.setImage(this._leftArrow.getHtmlElement(), "LeftArrowDis");
			}
			nextX += this.getCurrentTabWidth() + 7 ;
	 	}else{
	 		cTab.setVisible (false) ;
	 	} 
	}
	
	//this.resetTabSizes();
}

ZaAppTabGroup.prototype.setArrowHandler =
function () {
	/*
	this._leftArrow.addListener (DwtEvent.ONMOUSEOUT, new AjxListener(this._leftArrow, ZaAppTabGroup._arrowMouseOutHdlr));
	this._leftArrow.addListener (DwtEvent.ONMOUSEUP, new AjxListener(this._leftArrow, ZaAppTabGroup._arrowMouseUpHdlr));
	this._leftArrow.addListener (DwtEvent.ONMOUSEOVER, new AjxListener(this._leftArrow, ZaAppTabGroup._arrowMouseOverHdlr));
	this._leftArrow.addListener (DwtEvent.ONMOUSEDOWN, new AjxListener(this._leftArrow, ZaAppTabGroup._arrowMouseDownHdlr));
	
	
	this._rightArrow.addListener (DwtEvent.ONMOUSEOUT, new AjxListener(this, ZaAppTabGroup._arrowMouseOutHdlr));
	this._rightArrow.addListener (DwtEvent.ONMOUSEUP, new AjxListener(this, ZaAppTabGroup._arrowMouseUpHdlr));
	this._rightArrow.addListener (DwtEvent.ONMOUSEOVER, new AjxListener(this, ZaAppTabGroup._arrowMouseOverHdlr));
	this._rightArrow.addListener (DwtEvent.ONMOUSEDOWN, new AjxListener(this, ZaAppTabGroup._arrowMouseDownHdlr));
	*/
	//this._leftArrow.addSelectionListener(selListener) ;
	//this._rightArrow.addSelectionListener(selListener) ;
	
	
	Dwt.setHandler(this._leftArrow.getHtmlElement(), DwtEvent.ONMOUSEDOWN, ZaAppTabGroup._leftArrowMouseDownHdlr);
	Dwt.setHandler(this._leftArrow.getHtmlElement(), DwtEvent.ONMOUSEUP, ZaAppTabGroup._leftArrowMouseUpHdlr);
	Dwt.setHandler(this._leftArrow.getHtmlElement(), DwtEvent.ONMOUSEOVER, ZaAppTabGroup._arrowMouseOverHdlr);
	Dwt.setHandler(this._leftArrow.getHtmlElement(), DwtEvent.ONMOUSEOUT, ZaAppTabGroup._arrowMouseOutHdlr);
	
	Dwt.setHandler(this._rightArrow.getHtmlElement(), DwtEvent.ONMOUSEDOWN, ZaAppTabGroup._rightArrowMouseDownHdlr);
	Dwt.setHandler(this._rightArrow.getHtmlElement(), DwtEvent.ONMOUSEUP, ZaAppTabGroup._rightArrowMouseUpHdlr);
	Dwt.setHandler(this._rightArrow.getHtmlElement(), DwtEvent.ONMOUSEOVER, ZaAppTabGroup._arrowMouseOverHdlr);
	Dwt.setHandler(this._rightArrow.getHtmlElement(), DwtEvent.ONMOUSEOUT, ZaAppTabGroup._arrowMouseOutHdlr);
	
 }

/*
ZaAppTabGroup.prototype._arrowSelListener =
function (ev){
	DBG.println(AjxDebug.DBG1, "Arrow Selected ....") ;
}*/

ZaAppTabGroup._arrowMouseOverHdlr =
function (ev) {
	//DBG.println(AjxDebug.DBG1, "Mouse on arrow button is over ....") ;
	var obj = DwtControl.getTargetControl(ev);
	if (obj.getEnabled()) {
		obj.setCursor("pointer") ;
	}
}

ZaAppTabGroup._arrowMouseOutHdlr =
function (ev) {
	//DBG.println(AjxDebug.DBG1, "Mouse on arrow button is out ....") ;
	var obj = DwtControl.getTargetControl(ev);
	obj.setCursor("default") ;
}

ZaAppTabGroup._leftArrowMouseDownHdlr =
function (ev) {
	//DBG.println(AjxDebug.DBG1, "Mouse on arrow button is down ....") ;
	var obj = DwtControl.getTargetControl(ev); 
	AjxImg.setImage(this, "LeftArrowDis");
	if (obj.getEnabled()) {
		obj.parent.shift (-1);
	}
}

ZaAppTabGroup._rightArrowMouseDownHdlr =
function (ev) {
	//DBG.println(AjxDebug.DBG1, "Mouse on arrow button is down ....") ;
	var obj = DwtControl.getTargetControl(ev); 
	AjxImg.setImage(this, "rightArrowDis");
	if (obj.getEnabled()) {
		obj.parent.shift (1) ;
	}
}

ZaAppTabGroup._leftArrowMouseUpHdlr =
function (ev) {
	//DBG.println(AjxDebug.DBG1, "Mouse on arrow button is up ....") ;
	var obj = DwtControl.getTargetControl(ev); 
	
	if (obj.getEnabled()) {
		obj.setCursor("pointer");
		AjxImg.setImage(this, "LeftArrow");
	}
}

ZaAppTabGroup._rightArrowMouseUpHdlr =
function (ev) {
	//DBG.println(AjxDebug.DBG1, "Mouse on arrow button is up ....") ;
	var obj = DwtControl.getTargetControl(ev); 

	if (obj.getEnabled()) {
		obj.setCursor("pointer");
		AjxImg.setImage(this, "RightArrow");
	}
}

ZaAppTabGroup.prototype.getTabWidth =
function () {
	var tabWidth ;
	var tabMinWidth = ZaAppTab.DEFAULT_MIN_WIDTH;
	var tabMaxWidth = ZaAppTab.DEFAULT_MAX_WIDTH;
	var groupWidth = this.getW () ;
//	var groupWidth = this.getW () - 40; //40 is the size the left/right arrow
	
	
	if (this._leftArrow.getVisible()) {
		groupWidth -= 23; //the offset when the leftArrow is visible
	}
	
	if (this._rightArrow.getVisible()) {
		groupWidth -= 19; //16 length + 3 left-margin
	}
	
	if (groupWidth > 0) {
		if (groupWidth > tabMinWidth) {
			var numOfTabs = ZaAppTabGroup._TABS.size() ;
			this._numberOfVisibleTabs = numOfTabs ;
			var avgTabWidth = Math.floor(groupWidth / (numOfTabs <= 0 ? 1 : numOfTabs)) ;
			if (avgTabWidth >= tabMinWidth && avgTabWidth <= tabMaxWidth) {
				tabWidth = avgTabWidth ;
			}else if (avgTabWidth > tabMaxWidth) {
				tabWidth = tabMaxWidth ;
			}else if (avgTabWidth < tabMinWidth) {
				//too many tabs and can't be all visible
				//it should equal to the groupWidth/numberOfTabVisible.
				//tabWidth = tabMinWidth ;
								
				var numTabsVisible = this._numberOfVisibleTabs = Math.floor(groupWidth / tabMinWidth) ;
				
				tabWidth = Math.floor(groupWidth / numTabsVisible) ; 
				/*if(window.console && window.console.log) console.debug(   "groupWidth = " + groupWidth 
											+ " and number of tabs visible = " + numTabsVisible
											+ " tab width = " + tabWidth );*/
				//need to show the navigation arrows, so resize the tab width is required
				if ((!this._leftArrow.getVisible()) || (! this._rightArrow.getVisible())){
					this._leftArrow.setVisible (true);
					this._rightArrow.setVisible (true);
					tabWidth = this.getTabWidth();
				}
				
				return tabWidth ;
			}			
		}else {
			tabWidth = groupWidth ;
		}	
	}else{
		tabWidth = ZaAppTab.DEFAULT_MAX_WIDTH ;
	}
	
	//all the tabs are visible
	if (this._leftArrow.getVisible() ||  this._rightArrow.getVisible()) {
		this._leftArrow.setVisible (false);
		this._rightArrow.setVisible (false);
		tabWidth = this.getTabWidth();
	}
	
	return tabWidth ;
}

ZaAppTabGroup.prototype.addTab = 
function (tab, resize) {
	ZaAppTabGroup._TABS.add(tab);
	if (resize) {
		this.resetTabSizes();
	}
	return true;
	/*
	var cSize = ZaAppTabGroup._TABS.size () ;
	if (cSize >= ZaAppTabGroup.TAB_LIMIT) {
		ZaApp.getInstance().getCurrentController().popupMsgDialog(ZaMsg.too_many_tabs);
		ZaApp.getInstance().disposeView (tab.getTabId());
		tab.dispose();
		return false ;
	}else{
		ZaAppTabGroup._TABS.add(tab);
		if (resize) {
			this.resetTabSizes();
		}
		return true;
	}*/
}

ZaAppTabGroup.prototype.removeTab =
function (tab, resize) {
	if (tab == this._searchTab) {
		this._searchTab = null ;
		//need to reset the search list controller
		var slc = ZaApp.getInstance().getSearchListController();
		if(slc)
			slc.reset() ;
	}
	ZaAppTabGroup._TABS.remove (tab) ;
	
	tab.dispose () ;
	if (resize) {
		this.resetTabSizes ();
	}
}

ZaAppTabGroup.prototype.removeCurrentTab =
function (resize) {
	var cTab = this.getCurrentTab () ;
	this.removeTab(cTab, resize) ;
	//select the next active Tab
	this.selectTab (this.getTabById (ZaApp.getInstance()._currentViewId)) ; 
}
	
ZaAppTabGroup.prototype.selectTab =
function (tab) {
	if (this.getCurrentTab() == tab) return ;
	
	for (var i=0; i < ZaAppTabGroup._TABS.size(); i++) {
		var cTab = ZaAppTabGroup._TABS.get(i) ;
		if (cTab == tab) {
			cTab.setSelectState();
			this._currentTab = cTab ;
			
			//check weather the shift action is needed
			if ( i < this._visibleStartTab) { //show the hidden tab on the left
				this.shift (i - this._visibleStartTab ) ;
			}else if (i > (this._numberOfVisibleTabs + this._visibleStartTab - 1)) {
				this.shift (i - (this._numberOfVisibleTabs + this._visibleStartTab - 1));
			}
			
		}else if (cTab.isSelected()){
			cTab.setUnselectState ();
		}	
	}
}

ZaAppTabGroup.prototype.getTabById = 
function (id) {	
	for (var i=0; i < ZaAppTabGroup._TABS.size(); i++) {
		var cTab = ZaAppTabGroup._TABS.get(i) ;
		if (cTab.getTabId() == id) {
			return cTab ;
		}
	}
}
	
ZaAppTabGroup.prototype.getTabHeight =
function () {
	var h = this.getH ();	
	if (h > 0) {
		return h ;
	}else{
		return ZaAppTab.DEFAULT_HEIGHT ;
	}
} 

ZaAppTabGroup.prototype.getCurrentTab =
function () {
	return this._currentTab ;
}

ZaAppTabGroup.prototype.getMainTab =
function () {
	return this._mainTab ;
}

ZaAppTabGroup.prototype.getSearchTab =
function () {
	if (this._searchTab) {
		return this._searchTab ;
	}else{
		var tabParams = {
			closable: true,
			selected: true
		}
		
		this._searchTab = new ZaAppTab (this,  tabParams);
		return this._searchTab ;
	}
}

ZaAppTabGroup.prototype.size =
function () {
	return ZaAppTabGroup._TABS.size() ;
}

/*
 * Used to find the existing tab of an item, so we won't open duplicated tab for the same item
 */
ZaAppTabGroup.prototype.getTabByItemId =
function (itemId, tabConstructor) {
	for (var i=0; i < ZaAppTabGroup._TABS.size(); i++) {
		var tab = ZaAppTabGroup._TABS.get(i) ;
		var v = tab.getAppView() ;
		if (v && v._containedObject && v._containedObject.id && v.constructor) {
			if (itemId == v._containedObject.id && (v.constructor==tabConstructor || !tabConstructor)) {
				return tab ;
			}
		}
	}
}

ZaAppTabGroup.getDirtyTabTitles =
function () {
	var dirtyTabTitles = [] ;
	for (var i=0; i < ZaAppTabGroup._TABS.size(); i++) {
		var tab = ZaAppTabGroup._TABS.get(i) ;
		var v = tab.getAppView() ;
		if (v && v.isDirty && v.isDirty()) {
			dirtyTabTitles.push(tab.getTitle());
		}
	}
	return dirtyTabTitles ;
}


}
if (AjxPackage.define("zimbraAdmin.common.ZaAppTab")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Used to create an application tab and its operations, such as new a  tab, 
 * close a tab, edit the tab label.
 * 
 * It will also remember the state of the tab: hidden/shown and dirty/clean.
 * @param parent - the tab group containing all the tabs.
 * 
 * @param params :
 *  	closable - whether the close icon and action should be added
 * 		selected - whether the newly created tab should be selected 
 *		id - the tabId used to identify an unique tab.
 * 		toolTip - the tooltip of the tab
*/

ZaAppTab = function(parent, params) {
	if (arguments.length == 0) return ;
	
//	this._origClassName = "ImgAppTab" ;
	
	DwtButton.call(this,{
		parent:parent, 
		className:"ZaAppTabButton" , 
		posStyle:Dwt.ABSOLUTE_STYLE,
		id: params.mainId ? ZaId.getTabId(params.mainId,params.id):params.id
	});
	//clean the DwtButton event listeners
	this.removeListener(DwtEvent.ONMOUSEOVER, this._mouseOverListenerObj);
	
	//build the Tab UI
	this._tabId = params.id || ZaApp.getInstance()._currentViewId ;
	
	var w = params.width || parent.getTabWidth() ;
	var h = params.height || parent.getTabHeight() ;
	this.setSize(w, h) ;
		
	if (params.label) 	{
		this.setText (params.label);
		this._title = params.label ;
	}
	if (params.icon) this.setImage (params.icon);
	
	if (params.toolTip && params.toolTip.length > 0) {
		this.setToolTipContent (params.toolTip) ;
	}
		
	this._closable = false ;
	if (params.closable == true) {		
		this.addCloseCell() ;
	}
	
	//control the Tab behavior
	var selListener = new AjxListener(this, ZaAppTab.prototype._selListener);
	this.addSelectionListener(selListener) ;

	if (params.onOpen && params.onOpen instanceof AjxListener) {
		this.addSelectionListener(params.onOpen);
	}
	
	var mouseoutListener = new AjxListener(this, ZaAppTab.prototype._mouseoutListener) ;
	this.addListener (DwtEvent.ONMOUSEOUT, mouseoutListener);

	if (parent.addTab(this, true)){
		this._selected = params.selected;
		if (this._selected) {
			parent.selectTab(this) ;
		}
	}
	
	//add the popup menu
	this._addPopupMenu () ;
}

ZaAppTab.prototype = new DwtButton;
ZaAppTab.prototype.constructor = ZaAppTab;

ZaAppTab.DEFAULT_HEIGHT = 22 ;
ZaAppTab.DEFAULT_MAX_WIDTH = 200 ;
ZaAppTab.DEFAULT_MIN_WIDTH = 100 ;

ZaAppTab.prototype.getTitle =
function () {
	return this._title ;
}

ZaAppTab.prototype._addPopupMenu =
function () {
	this._popupOperations = [];
	
	//close the tab
	//if (this._closable) { //disable it instead of hiding it
	this._actionOpClose = new ZaOperation(ZaOperation.CLOSE_TAB, ZaMsg.tab_close, 
			null, null, null, new AjxListener(this, ZaAppTab.prototype.closeTab));
	this._popupOperations.push(this._actionOpClose);
	//}
	//close other tabs
	this._actionOpCloseOthers = new ZaOperation(ZaOperation.CLOSE_OTHER_TAB, ZaMsg.tab_close_others,
			null, null, null, new AjxListener(this, ZaAppTab.prototype.closeOtherTabs));
	this._popupOperations.push(this._actionOpCloseOthers) ;
	//close all tabs
	this._actionOpCloseAll = new ZaOperation(ZaOperation.CLOSE_ALL_TAB, ZaMsg.tab_close_all,
			null, null, null, new AjxListener(this, ZaAppTab.prototype.closeAllTabs));
	this._popupOperations.push(this._actionOpCloseAll) ;
	
	this._actionMenu =  new ZaPopupMenu(this, "ActionMenu", null, this._popupOperations);
	
	//add the popup menu related mouse listeners
	//right button click of the mouse
	var actionListener = new AjxListener (this, ZaAppTab.prototype._mouseRightClickListener) ;
	this.addListener(DwtEvent.ACTION, actionListener);
	
	this._tabMouseUpListener = new AjxListener (this, ZaAppTab.prototype._tabMouseupListener) ;
	this.addListener(DwtEvent.ONMOUSEUP, this._tabMouseUpListener);
}

ZaAppTab.prototype.getAppView =
function () {
	var view = ZaApp.getInstance().getViewById (this._tabId);
	if(view) {
		return view[ZaAppViewMgr.C_APP_CONTENT] ;
	} else {
		return null;
	}
	
}

ZaAppTab.prototype._selListener =
function (ev) {
	DBG.println(AjxDebug.DBG1, "ZaAppTab.prototype._selListenr") ;
	//this.setSelectState () ;
	this.parent.selectTab(this);
}

ZaAppTab.prototype._mouseoutListener =
function (ev) {
	//DBG.println(AjxDebug.DBG1, "ZaAppTab.prototype._mouseoutListenr") ;
	//console.debug("This is a mouse out action") ;
	this.restoreOrginState() ;
}

ZaAppTab.prototype._tabMouseupListener =
function (ev) {
	//if (window.console) console.debug("Tab Mouse Up") ;
	if (ev.button == DwtMouseEvent.RIGHT) {
		if (this.isListenerRegistered(DwtEvent.ACTION)) {				
				this.notifyListeners(DwtEvent.ACTION, ev);
		}
	}
}

ZaAppTab.prototype._mouseRightClickListener =
function (ev) {
	//if (window.console) console.debug("This is a right mouse action") ;
	var tabGroup = this.parent ;
	var tabs = tabGroup.getTabs() ;
	var n = tabs.size() ;
	if ( n <= 1) {
		this._actionMenu.enableAll(false) ;
	} else if ( n <= 2 && this != tabGroup.getMainTab()) {
		this._actionMenu.enable(ZaOperation.CLOSE_TAB, true) ;
		this._actionMenu.enable(ZaOperation.CLOSE_ALL_TAB, true) ;
		this._actionMenu.enable(ZaOperation.CLOSE_OTHER_TAB, false) ;
	}else{
		this._actionMenu.enableAll(true) ;
	}
	
	this._actionMenu.popup(0, ev.docX, ev.docY);
}

ZaAppTab.prototype.setSelectState =
function () {
	this._selected = true ;
    this.setDisplayState(DwtControl.SELECTED);
	//this.setCursor ("default") ;
	this.removeListener(DwtEvent.ONMOUSEUP, this._mouseUpListenerObj);
	
	var viewId = this.getTabId () ;
	if (viewId != ZaApp.getInstance()._currentViewId) {
		ZaApp.getInstance().pushView (viewId);
	}	
	if (this._closeCell) {
		AjxImg.setImage (this._closeCell, "Close") ;
	}
}

ZaAppTab.prototype.setUnselectState =
function () {
	this._selected = false ;
    this.setDisplayState(DwtControl.NORMAL);
	//this.setCursor ("pointer") ;
	this.addListener(DwtEvent.ONMOUSEUP, this._mouseUpListenerObj);
	
	if (this._closeCell) {
		AjxImg.setDisabledImage (this._closeCell, "Close");
	}
}

ZaAppTab.prototype.restoreOrginState =
function () {
	if (this._selected) {
        this.setDisplayState(DwtControl.SELECTED);
	}else {
        this.setDisplayState(DwtControl.NORMAL);
	}
}

ZaAppTab.prototype.setTabId =
function (id) {
	this._tabId = id ;
}

ZaAppTab.prototype.getTabId =
function () {
	return this._tabId ;
}

ZaAppTab.prototype.isSelected =
function () {
	return this._selected ;
}

//reset the label text
//l - new label text
ZaAppTab.prototype.resetLabel =
function(l){
	l = l || this.getText() ;
	
	if (! l) {
		return ;
	}else{
		this._title = l ;
	}
	
	//var tabW = this.getW (); //when the tab is hidden, getW () return 0
	var tabW = this.parent.getCurrentTabWidth (); //we need an internal variable to keep the width for the hidden tab
	if (this._closable) tabW -= 20 ;
	
	//assume 5.5px per letter	
	var maxNumberOfLetters = Math.floor((tabW - 30)/5.5) ;
	if (maxNumberOfLetters < l.length){ //set the new text
		this.setText(l.substring(0, (maxNumberOfLetters - 3)) + "...");
	}else {
		this.setText (l) ;
	}
}

ZaAppTab.prototype.addCloseCell =
function () {
	this._closable = true ;
	
	this._closeCell = this._row.insertCell (this._row.cells.length) ;
	this._closeCell.className = "Icon" ;
	AjxImg.setImage(this._closeCell, "Close") ;
	
	Dwt.setHandler(this._closeCell, DwtEvent.ONMOUSEDOWN, ZaAppTab._closeCellMouseDownHdlr);
	Dwt.setHandler(this._closeCell, DwtEvent.ONMOUSEUP, ZaAppTab._closeCellMouseUpHdlr);
	Dwt.setHandler(this._closeCell, DwtEvent.ONMOUSEOVER, ZaAppTab._closeCellMouseOverHdlr);
	Dwt.setHandler(this._closeCell, DwtEvent.ONMOUSEOUT, ZaAppTab._closeCellMouseOutHdlr);
}

ZaAppTab._closeCellMouseDownHdlr =
function (ev) {
	//DBG.println(AjxDebug.DBG1, "Close Button is clicked ....") ;
	var obj = DwtControl.getTargetControl(ev); //obj is ZaAppTab instance
}

ZaAppTab._closeCellMouseUpHdlr =
function (ev) {
	//close the tab and the view
	var obj = DwtControl.getTargetControl(ev); 
	obj.closeTab();
	/*

	var tabViewId = obj.getTabId () ;
	var cc = ZaApp.getInstance().getControllerById (tabViewId) ;
	
	//check whether the closing view is hidden or visible
	if (tabViewId == ZaApp.getInstance()._currentViewId) { //visible
		cc.closeButtonListener(ev); //Tab handling is in the view controller's close button listener
	}else{ //hidden 
		//TODO what if it is dirty?
		cc.closeButtonListener(ev, true, ZaAppTab.prototype.closeHiddenTab, obj ) ;
	}*/
}

ZaAppTab.prototype.closeTab =
function() {
	if (this._actionMenu && this._actionMenu.isPoppedUp()) {
		this._actionMenu.popdown();
	} 
	
	if (this._closable) {
		
		var tabViewId = this.getTabId () ;
		var cc = ZaApp.getInstance().getControllerById (tabViewId) ;
		
		//check whether the closing view is hidden or visible
		if (tabViewId == ZaApp.getInstance()._currentViewId) { //visible
			//if(window.console && window.console.log) console.debug("Close current tab " + this.getTitle() + " with ID " + tabViewId);
			cc.closeButtonListener(); //Tab handling is in the view controller's close button listener
		}else{ //hidden 
			//TODO what if it is dirty?
			//if(window.console && window.console.log) console.debug("Close hidden tab " + this.getTitle() + " with ID " + tabViewId );
			cc.closeButtonListener(null, true, ZaAppTab.prototype.closeHiddenTab, this ) ;
		}
	}
}

ZaAppTab.prototype.closeOtherTabs =
function () {
	
	if (this._actionMenu && this._actionMenu.isPoppedUp()) {
		this._actionMenu.popdown();
	}
	 
	var tabTitles = ZaAppTabGroup.getDirtyTabTitles() ;
	if ( tabTitles.length > 0 ){
		ZaApp.getInstance().getCurrentController().popupMsgDialog(
				AjxMessageFormat.format(ZaMsg.tab_close_warning, [tabTitles.join("<br />")]));
		return ;
	}else{
		if (ZaAppTabGroup.getDirtyTabTitles)
		var tabGroup = this.parent ;
		var tabs = tabGroup.getTabs() ;
		var closingTabs = [] ;
		for (var i=0; i < tabs.size(); i++) {
			var cTab = tabs.get(i) ;
			if ((cTab != this) && (cTab._closable)) {
				//close
				closingTabs.push (cTab) ;
			}
		}
		
		for (var j=0; j < closingTabs.length; j ++) {
			closingTabs[j].closeTab();
		}
		
		if (closingTabs.length > 0) {
			tabGroup.selectTab(this);
		}
	}
}

ZaAppTab.prototype.closeAllTabs =
function () {
	if (this._actionMenu && this._actionMenu.isPoppedUp()) {
		this._actionMenu.popdown();
	} 
	
	var tabTitles = ZaAppTabGroup.getDirtyTabTitles() ;
	if ( tabTitles.length > 0 ){
		ZaApp.getInstance().getCurrentController().popupMsgDialog(
				AjxMessageFormat.format(ZaMsg.tab_close_warning, [tabTitles.join("<br />")]));
		return ;
	}else{
		var tabGroup = this.parent ;
		var tabs = tabGroup.getTabs() ;
		var closingTabs = [] ;
		for (var i=0; i < tabs.size(); i++) {
			var cTab = tabs.get(i) ;
			if (cTab._closable) {
				//close
				closingTabs.push(cTab) ;
			}
		}
		
		for (var j=0; j < closingTabs.length; j ++) {
			//if(window.console && window.console.log) console.log("Closing tab " + closingTabs[j].getTabId()) ;
			closingTabs[j].closeTab();
		}
		
		if (closingTabs.length > 0 && tabs.size() > 0) {
			tabGroup.selectTab(tabs.get(0));
		}
	}
}

ZaAppTab.prototype.closeHiddenTab =
function () {

	var tabViewId = this.getTabId () ;
	
	//Make sure the nextTab is selected. 
	// It is useful when user close a dirty hidden tab and the select action is invoked.
	if (tabViewId == ZaApp.getInstance()._currentViewId) {
		ZaApp.getInstance().popView();
	}else{
		this.parent.removeTab (this, true) ;
		//dispose the view and remove the controller
		ZaApp.getInstance().disposeView (tabViewId,true) ;
	}
}

ZaAppTab._closeCellMouseOverHdlr =
function (ev) {
	//DBG.println(AjxDebug.DBG1, "Over the close button ....") ;
	var obj = DwtControl.getTargetControl(ev);
	AjxImg.setImage (obj._closeCell, "Close") ;
	//obj.setCursor("pointer");
	obj._mainToolTip = obj.getToolTipContent ();
	obj.setToolTipContent (ZaMsg.ALTBB_Close_tt) ;
}

ZaAppTab._closeCellMouseOutHdlr =
function (ev) {
	var obj = DwtControl.getTargetControl(ev);
	if (obj.isSelected()) {
		AjxImg.setImage (obj._closeCell, "Close") ;
	}else{
		AjxImg.setDisabledImage (obj._closeCell, "Close");
	}
	//obj.setCursor("default");
	obj.setToolTipContent (obj._mainToolTip) ;
}
ZaAppTab.prototype._createHtmlFromTemplate = function(templateId, data) {
    DwtButton.prototype._createHtmlFromTemplate.call(this, "admin.Widgets#ZaAppTab", data);
    this._row = document.getElementById(data.id+"_row");
};
}
if (AjxPackage.define("zimbraAdmin.common.ZaRequestMgr")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
 * @author Charles Cao
 * ZaRequestMgr: used to send the soap request to the server and handle the following events:
 * 		1) show the busy dialog when it is a synchronous call and takes long time
 */
ZaRequestMgr = function () {}
/**
 * 
 * @param csfeParams: the parameters used by ZmCsfeCommand to send the request to the server
 * @param params: other parameters used by the ZaRequestMgr. 
 * 			Typical parameters are 
 * 			1) controller
 * 			2) busyMsg	
 * 
 */
ZaRequestMgr.invoke = function (csfeParams, params) {
	var command = new ZmCsfeCommand();
	var controller = (params != null ? params.controller : null) ;
	var delay = !(params.delay === null || params.delay===undefined) ? params.delay : 500;
	var id = params.busyId ? params.busyId : Dwt.getNextId () ;
	//add the busy icon for the synchronous calls
	if (!csfeParams.asyncMode && controller || (params.showBusy && controller)) {
		controller._shell.setBusyDialogText(params.busyMsg != null ? params.busyMsg :ZaMsg.splashScreenLoading);
		controller._currentRequest = command ; //_currentRequest obj will be used in the cancel operation
		var cancelCallback = new AjxCallback(controller, controller.cancelBusyOverlay, params );
		//if(window.console && window.console.log) console.log("Set busy for dialog " + id) ;
		controller._shell.setBusy(true, id, true, delay, cancelCallback);
	}
	
	try {
		ZaZimbraAdmin.getInstance().cancelNoOp();
		csfeParams.noAuthToken = true;
		var response = command.invoke(csfeParams) ;
		if (!csfeParams.asyncMode && controller) {
			//if(window.console && window.console.log) console.log("Clear busy dialog " + id) ;
			controller._shell.setBusy(false, id, false); //remove the busy overlay
		}
		if (! csfeParams.asyncMode)	{
			ZaZimbraAdmin.getInstance().scheduleNoOp();
			return 	response;
		}	
	}catch (ex) {
		if(ex && ex.code && !(ex.code == ZmCsfeException.SVC_AUTH_EXPIRED || 
				ex.code == ZmCsfeException.SVC_AUTH_REQUIRED || 
				ex.code == ZmCsfeException.NO_AUTH_TOKEN ||
                                ex.code == ZmCsfeException.AUTH_TOKEN_CHANGED
			 )) {
			ZaZimbraAdmin.getInstance().scheduleNoOp();
		}
		if (!csfeParams.asyncMode && controller  || (params.showBusy && controller)) {
			controller._shell.setBusy(false, id); //remove the busy overlay
		}
		throw ex ;	
	}
}


}
if (AjxPackage.define("zimbraAdmin.common.ZaActionStatusView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
 * @overview
 */

/**
 * Creates the action status view.
 * @class
 * This class represents the action status view.
 *
 * @param    {DwtControl}    parent        the parent
 * @param    {String}        className     the class name
 * @param    {constant}      posStyle      the position style
 * @param    {String}        id            the id
 *
 * @extends		DwtControl
 */
ZaActionStatusView = function(parent, className, posStyle, id) {

    DwtControl.call(this, {parent:parent, className:(className || "ZaActionStatus"), posStyle:posStyle, id:id});

    this._toast = this._standardToast = new ZaToast(this, ZaId.TOAST);
    this._statusQueue = [];
};

ZaActionStatusView.prototype = new DwtControl;
ZaActionStatusView.prototype.constructor = ZaActionStatusView;


// Constants
/**
 * Defines the "informational" status level.
 */
ZaActionStatusView.LEVEL_INFO             = 1;    // informational
/**
 * Defines the "warning" status level.
 */
ZaActionStatusView.LEVEL_WARNING          = 2;    // warning
/**
 * Defines the "critical" status level.
 */
ZaActionStatusView.LEVEL_CRITICAL         = 3;    // critical

ZaActionStatusView.MSG_PARAMS = ["msg", "level", "detail", "transitions", "toast", "force", "dismissCallback", "finishCallback"];

// Public methods

ZaActionStatusView.prototype.toString =
function() {
    return "ZaActionStatusView";
};

/**
 * Displays a status message.
 *
 * @param {String}    msg the message
 * @param {constant}    [level]         the level (see {@link ZaActionStatusView}<code>.LEVEL_</code> constants)
 * @param {String}    [detail]         the details
 * @param {String}    [transitions] the transitions (see {@link ZaToast})
 * @param {String}    [toast]     the toast control
 * @param {boolean}    [force]        force any displayed toasts out of the way
 * @param {AjxCallback}    [dismissCallback]    callback to run when the toast is dismissed (by another message using [force], or explicitly calling ZaActionStatusView.prototype.dismiss())
 * @param {AjxCallback}    [finishCallback]     callback to run when the toast finishes its transitions by itself (not when dismissed)
 */
ZaActionStatusView.prototype.setStatusMsg =
function(params) {
    params = Dwt.getParams(arguments, ZaActionStatusView.MSG_PARAMS);
    if (typeof params == "string") {
        params = { msg: params };
    }
    var work = {
        msg: params.msg,
        level: params.level || ZaActionStatusView.LEVEL_INFO,
        detail: params.detail,
        date: new Date(),
        transitions: params.transitions,
        toast: params.toast || this._standardToast,
        dismissCallback: (params.dismissCallback instanceof AjxCallback) ? params.dismissCallback : null,
        finishCallback: (params.finishCallback instanceof AjxCallback) ? params.finishCallback : null,
		dismissed: false
    };

	if (params.force) { // We want to dismiss ALL messages in the queue and display the new message
		for (var i=0; i<this._statusQueue.length; i++) {
			this._statusQueue[i].dismissed = true; // Dismiss all messages in the queue in turn, calling their dismissCallbacks along the way
		}
	}
    // always push so we know one is active
    this._statusQueue.push(work);
    if (!this._toast.isPoppedUp()) {
        this._updateStatusMsg();
    } else if (params.force) {
        this.dismissStatusMsg();
    }
};

ZaActionStatusView.prototype.nextStatus =
function() {
    if (this._statusQueue.length > 0) {
        this._updateStatusMsg();
        return true;
    }
    return false;
};

ZaActionStatusView.prototype.dismissStatusMsg =
function(all) {
	if (all) {
		for (var i=0; i<this._statusQueue.length; i++) {
			this._statusQueue[i].dismissed = true; // Dismiss all messages in the queue in turn, calling their dismissCallbacks along the way
		}
	}
    this._toast.dismiss();
};

// Static functions

/**
 * Gets the style class name based on status level.
 *
 * @param     {ZaActionStatusView}        work        the view
 * @return    {String}                          the class
 */
ZaActionStatusView.getClass =
function(work) {
    switch (work.level) {
        case ZaActionStatusView.LEVEL_CRITICAL:    return "ZaToastCrit";
        case ZaActionStatusView.LEVEL_WARNING:     return "ZaToastWarn";
        default:                             return "ZaToastInfo";
    }
};

/**
 * Gets the image based on status level.
 *
 * @param     {ZaActionStatusView}        work        the view
 * @return    {String}                          the image
 */
ZaActionStatusView.getImageHtml =
function(work) {
    switch (work.level) {
        case ZaActionStatusView.LEVEL_CRITICAL:    return "Critical";
        case ZaActionStatusView.LEVEL_WARNING:     return "Warning";
        default:                             return "Success";
    }
};


// Protected methods

ZaActionStatusView.prototype._updateStatusMsg =
function() {
    var work = this._statusQueue.shift();
    if (!work) { return; }
	if (work.dismissed) { // If preemptively dismissed, just run the callback and proceed to the next msg
		if (work.dismissCallback)
			work.dismissCallback.run();
		this.nextStatus();
	} else {
		var level = ZaActionStatusView.getClass(work);
		var icon = ZaActionStatusView.getImageHtml(work);

		this._toast = work.toast;
		this._toast.popup(level, AjxStringUtil.htmlEncode(work.msg), icon, null, work.transitions, work.dismissCallback, work.finishCallback);
	}
};


//
// ZaToast
//

/**
 * Creates the "toaster".
 * @class
 * This class represents the "toaster".
 *
 * @extends	DwtComposite
 */
ZaToast = function(parent, id) {
    if (arguments.length == 0) { return; }

    DwtComposite.call(this, {parent:parent.shell, className:"ZaToast", posStyle:Dwt.ABSOLUTE_STYLE, id:id});
    this._statusView = parent;
    this._createHtml();

    this._funcs = {};

    this.popdown();

    this._funcs["position"] = AjxCallback.simpleClosure(this.__position, this);
    this._funcs["show"] = AjxCallback.simpleClosure(this.__show, this);
    this._funcs["hide"] = AjxCallback.simpleClosure(this.__hide, this);
    this._funcs["pause"] = AjxCallback.simpleClosure(this.__pause, this);
    this._funcs["hold"] = AjxCallback.simpleClosure(this.__hold, this);
    this._funcs["idle"] = AjxCallback.simpleClosure(this.__idle, this);
    this._funcs["fade"] = AjxCallback.simpleClosure(this.__fade, this);
    this._funcs["fade-in"] = this._funcs["fade"];
    this._funcs["fade-out"] = this._funcs["fade"];
    this._funcs["slide"] = AjxCallback.simpleClosure(this.__slide, this);
    this._funcs["slide-in"] = this._funcs["slide"];
    this._funcs["slide-out"] = this._funcs["slide"];
    this._funcs["next"] = AjxCallback.simpleClosure(this.transition, this);
}
ZaToast.prototype = new DwtComposite;
ZaToast.prototype.constructor = ZaToast;
ZaToast.prototype.toString =
function() {
    return "ZaToast";
};

// Constants
/**
 * Defines the "fade" transition.
 */
ZaToast.FADE = { type: "fade" };
/**
 * Defines the "fade-in" transition.
 */
ZaToast.FADE_IN = { type: "fade-in" };
/**
 * Defines the "fade-out" transition.
 */
ZaToast.FADE_OUT = { type: "fade-out" };
/**
 * Defines the "slide" transition.
 */
ZaToast.SLIDE = { type: "slide" };
/**
 * Defines the "slide-in" transition.
 */
ZaToast.SLIDE_IN = { type: "slide-in" };
/**
 * Defines the "slide-out" transition.
 */
ZaToast.SLIDE_OUT = { type: "slide-out" };
/**
 * Defines the "pause" transition.
 */
ZaToast.PAUSE = { type: "pause" };
/**
 * Defines the "hold" transition.
 */
ZaToast.HOLD = { type: "hold" };
/**
 * Defines the "idle" transition.
 */
ZaToast.IDLE = {type: "idle" };
/**
 * Defines the "show" transition.
 */
ZaToast.SHOW = {type: "show" };

ZaToast.DEFAULT_TRANSITIONS = [ZaToast.FADE_IN, ZaToast.PAUSE, ZaToast.FADE_OUT];

ZaToast.DEFAULT_STATE = {};
ZaToast.DEFAULT_STATE["position"] = { location: "C" }; // center
ZaToast.DEFAULT_STATE["pause"] = { duration: 3200 };
ZaToast.DEFAULT_STATE["hold"] = {};
ZaToast.DEFAULT_STATE["fade"] = { duration: 100, multiplier: 1 };
ZaToast.DEFAULT_STATE["fade-in"] = { start: 0, end: 99, step: 10, duration: 200, multiplier: 1 };
ZaToast.DEFAULT_STATE["fade-out"] = { start: 99, end: 0, step: -10, duration: 200, multiplier: 1 };
ZaToast.DEFAULT_STATE["slide"] = { duration: 100, multiplier: 1 };
ZaToast.DEFAULT_STATE["slide-in"] = { start: -40, end: 0, step: 1, duration: 100, multiplier: 1 };
ZaToast.DEFAULT_STATE["slide-out"] = { start: 0, end: -40, step: -1, duration: 100, multiplier: 1 };

ZaToast.LEVEL_RE = /\b(ZaToastCrit|ZaToastWarn|ZaToastInfo)\b/g;
ZaToast.DISMISSABLE_STATES = [ZaToast.HOLD];

// Data

ZaToast.prototype.TEMPLATE = "admin.Widgets#ZaToast";


// Public methods

ZaToast.prototype.dispose =
function() {
    this._textEl = null;
    this._iconEl = null;
    this._detailEl = null;
    DwtComposite.prototype.dispose.call(this);
};

ZaToast.prototype.popup =
function(level, text, icon, loc, customTransitions, dismissCallback, finishCallback) {
    this.__clear();
    this._poppedUp = true;
    this._dismissed = false;
    this._dismissCallback = dismissCallback;
    this._finishCallback = finishCallback;

    // setup display
    var el = this.getHtmlElement();
    Dwt.delClass(el, ZaToast.LEVEL_RE, level || "ZaToastInfo")

    if (this._textEl) {
        this._textEl.innerHTML = text || "";
    }

    if (this._iconEl) {
        AjxImg.setImage(this._iconEl, icon, false);
    }

    // get transitions
    var location =  loc || "C" ;
    var transitions = customTransitions || ZaToast.DEFAULT_TRANSITIONS;

    transitions = [].concat( {type:"position", location:location}, transitions, {type:"hide"} );

    // start animation
    this._transitions = transitions;
    this.transition();
};

ZaToast.prototype.popdown =
function() {
    this.__clear();
    Dwt.setLocation(this.getHtmlElement(), Dwt.LOC_NOWHERE, Dwt.LOC_NOWHERE);
    this._poppedUp = false;
    if (!this._dismissed) {
        if (this._finishCallback)
            this._finishCallback.run();
    }
    this._dismissed = false;
};

ZaToast.prototype.isPoppedUp =
function() {
    return this._poppedUp;
};

ZaToast.prototype.transition =
function() {

    if (this._pauseTimer) {
        clearTimeout(this._pauseTimer);
        this._pauseTimer = null;
    }
    if (this._held) {
        this._held = false;
    }

    var transition = this._transitions && this._transitions.shift();
    if (!transition) {
        this._poppedUp = false;
        if (!this._statusView.nextStatus()) {
            this.popdown();
        }
        return;
    }

    var state = this._state = this._createState(transition);

    var el = this.getHtmlElement();
    //Dwt.setOpacity(el, state.opacity);
    Dwt.setLocation(el, state.x, state.y);

    this._funcs[transition.type || "next"]();
};

// Protected methods

ZaToast.prototype._createHtml =
function(templateId) {
    var data = { id: this._htmlElId };
    this._createHtmlFromTemplate(templateId || this.TEMPLATE, data);
    Dwt.setZIndex(this.getHtmlElement(), Dwt.Z_TOAST);
};

ZaToast.prototype._createHtmlFromTemplate =
function(templateId, data) {
    DwtComposite.prototype._createHtmlFromTemplate.call(this, templateId, data);
    this._textEl = document.getElementById(data.id+"_text");
    this._iconEl = document.getElementById(data.id+"_icon");
    this._detailEl = document.getElementById(data.id+"_detail");
};

ZaToast.prototype._createState =
function(transition) {
    var state = AjxUtil.createProxy(transition);
    var defaults = ZaToast.DEFAULT_STATE[state.type];
    for (var name in defaults) {
        if (!state[name]) {
            state[name] = defaults[name];
        }
    }
    var el = this.getHtmlElement();

    switch (state.type) {
        case "fade-in":
            Dwt.setOpacity(el, 0);
            Dwt.setLocation(el, null, null);
            state.value = state.start;
            break;
        case "fade-out":
        case "fade":
            Dwt.setLocation(el, null, null);
            state.value = state.start;
            break;
        case "slide-in":
        case "slide-out":
        case "slide":{
            Dwt.setLocation(el, null, -36);
            Dwt.setOpacity(el, 100);
            state.value = state.start;
            break;
        }
    }
    return state;
};

// Private methods

ZaToast.prototype.__clear =
function() {
    clearTimeout(this._actionId);
    clearInterval(this._actionId);
    this._actionId = -1;
};

// transition handlers

ZaToast.prototype.__position =
function() {
    var location = this._state.location || "C";
    var containerId;
    containerId = "skin_container_toaster";
    var el = this.getHtmlElement();
    var container = Dwt.byId(containerId) || this.shell.getHtmlElement();

    var bsize = Dwt.getSize(container);
    var tsize = Dwt.getSize(el);

    var x = (bsize.x - tsize.x) / 2;
    var y = (bsize.y - tsize.y) / 2;

    switch (location.toUpperCase()) {
        case 'N': y = 0-tsize.y; break;
        case 'S': y = bsize.y - tsize.y; break;
        case 'E': x = bsize.x - tsize.x; break;
        case 'W': x = 0; break;
        case 'NE': x = bsize.x - tsize.x; y = 0; break;
        case 'NW': x = 0; y = 0; break;
        case 'SE': x = bsize.x - tsize.x; y = bsize.y - tsize.y; break;
        case 'SW': x = 0; y = bsize.y - tsize.y; break;
        case 'C': default: /* nothing to do */ break;
    }

    var offset = Dwt.toWindow(container);
    x += offset.x;
    y += offset.y;

    x = (x>0) ? x : 0;
    y = (y>0) ? y : 0;
    Dwt.setLocation(el, x, y);

    this._funcs["next"]();
};

ZaToast.prototype.__show =
function() {
    var el = this.getHtmlElement();
    Dwt.setVisible(el, true);
    Dwt.setVisibility(el, true);
    this._funcs["next"]();
};

ZaToast.prototype.__hide =
function() {
    var el = this.getHtmlElement();
    Dwt.setLocation(el, Dwt.LOC_NOWHERE, Dwt.LOC_NOWHERE);
    this._funcs["next"]();
};

ZaToast.prototype.__pause =
function() {
    if (this._dismissed && ZaToast.__mayDismiss(ZaToast.PAUSE)) {
        this._funcs["next"]();
    } else {
        this._pauseTimer = setTimeout(this._funcs["next"], this._state.duration);
    }
};


/**
 * Hold the toast in place until dismiss() is called. If dismiss() was already called before this function (ie. during fade/slide in), continue immediately
 */
ZaToast.prototype.__hold =
function() {
    if (this._dismissed && ZaToast.__mayDismiss(ZaToast.HOLD)!=-1) {
        this._funcs["next"]();
    } else {
        this._held = true;
    }
};

ZaToast.__mayDismiss =
function(state) {
    return AjxUtil.indexOf(ZaToast.DISMISSABLE_STATES, state)!=-1;
};

/**
 * Dismiss (continue) a held or paused toast (Given that ZaToast.DISMISSABLE_STATES agrees). If not yet held or paused, those states will be skipped when they occur
 */
ZaToast.prototype.dismiss =
function() {
    if (!this._dismissed && this._poppedUp) {
        var doDismiss = (this._pauseTimer && ZaToast.__mayDismiss(ZaToast.PAUSE)) ||
            (this._held && ZaToast.__mayDismiss(ZaToast.HOLD));
        if (doDismiss) {
            this._funcs["next"]();
        }
        this._dismissed = true;
        if (this._dismissCallback instanceof AjxCallback) {
            this._dismissCallback.run();
        }
    }
};

ZaToast.prototype.__idle =
function() {
    if (!this._idleTimer) {
        this._idleTimer = new DwtIdleTimer(0, new AjxCallback(this, this.__idleCallback));
    } else {
        this._idleTimer.resurrect(0);
    }
};

ZaToast.prototype.__idleCallback =
function(idle) {
    if (!idle) {
        this.transition();
        this._idleTimer.kill();
    }
};

ZaToast.prototype.__move =
function() {
    // TODO
    this._funcs["next"]();
};

ZaToast.prototype.__fade =
function() {
    var opacity = this._state.value;
    var step = this._state.step;

    var isOver = step > 0 ? opacity >= this._state.end : opacity <= this._state.end;
    if (isOver) {
        opacity = this._state.end;
    }

    var el = this.getHtmlElement();
    Dwt.setOpacity(el, opacity);

    if (isOver) {
        this.__clear();
        setTimeout(this._funcs["next"], 0);
        return;
    }

    if (this._actionId == -1) {
        var duration = this._state.duration;
        var delta = duration / Math.abs(step);
        this._actionId = setInterval(this._funcs["fade"], delta);
    }

    this._state.value += step;
    this._state.step *= this._state.multiplier;
};

ZaToast.prototype.__slide =
function() {
    var top = this._state.value;
    var step = this._state.step;

    var isOver = step > 0 ? top >= this._state.end : top <= this._state.end;
    if (isOver) {
        top = this._state.end;
    }

    var el = this.getHtmlElement();
    //Dwt.setOpacity(el, opacity);
    Dwt.setLocation(el, null, top);
    //el.style.top = top+'px';


    if (isOver) {
        this.__clear();
        setTimeout(this._funcs["next"], 0);
        return;
    }

    if (this._actionId == -1) {
        var duration = this._state.duration;
        var delta = duration / Math.abs(step);
        this._actionId = setInterval(this._funcs["slide"], delta);
    }

    this._state.value += step;
    this._state.step *= this._state.multiplier;
};

}
if (AjxPackage.define("zimbraAdmin.common.ZaTreeItem")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 8/19/11
 * Time: 2:59 AM
 * To change this template use File | Settings | File Templates.
 */

ZaTreeItem = function(params) {
    if (arguments.length == 0) { return; }

    params.expandNodeImage = params.expandNodeImage || "Blank_16";
    params.collapseNodeImage= params.collapseNodeImage || "AdminCollapse";
    params.arrowDisabled = true;
    params = Dwt.getParams(arguments, ZaTreeItem.PARAMS);
    this._parentInTree = params.parent;
    this._countParam = params.count;
    this.forceNode = (params.forceNode === undefined? false : params.forceNode) ;
    DwtTreeItem.call(this, params);
}

ZaTreeItem.PARAMS = ["parent", "index", "text", "imageInfo", "deferred", "className", "posStyle",
					  "forceNotifySelection", "forceNotifyAction", "count", "forceNode"];

ZaTreeItem.prototype = new DwtTreeItem;
ZaTreeItem.prototype.constructor = ZaTreeItem;

ZaTreeItem.prototype.TEMPLATE = "admin.Widgets#ZaTreeItem";

ZaTreeItem.prototype.dispose =
function() {
	this._countCell = null;
	DwtTreeItem.prototype.dispose.call(this);
};

ZaTreeItem.prototype.toString =
function() {
	return "ZaTreeItem";
};

ZaTreeItem.prototype._initialize =
function(index, realizeDeferred, forceNode) {
    forceNode = forceNode || this.forceNode;
    DwtTreeItem.prototype._initialize.call(this, index, realizeDeferred, forceNode);

	this._countCell = document.getElementById(this._htmlElId + "_countCell");
	// initialize count
	if (this._countCell && (this._countInfoParam !== undefined)) {
	    this._countCell.innerHTML = this._countInfoParam;
        // only make css take effect when it has value;
        this._countCell.className = "AdminTreeItem-Count";
		this._countInfo = this._countInfoParam;
	}

    if (this._nodeCell) {
        var imgEl = AjxImg.getImageElement(this._nodeCell);
        if (imgEl) {
            Dwt.clearHandler(imgEl, DwtEvent.ONMOUSEDOWN);
            Dwt.clearHandler(imgEl, DwtEvent.ONMOUSEUP);
        }
    }

    if (this._arrowDisabled){
        var tableNode = document.getElementById(this._htmlElId + "_table");
        tableNode.style.tableLayout = "fixed";
        tableNode.style.width = "100%";

        this._textCell.style.width = "100%";
    }

    this._adjustText();
}

ZaTreeItem.prototype._adjustText = function() {
    this.setToolTipContent(this._text);
}

/**
 * Sets the text.
 *
 * @param	{string}	text		the text
 */
ZaTreeItem.prototype.setText =
function(text) {
	if (this._initialized) {
		if (!text) text = "";
		this._text = this._textCell.innerHTML = AjxStringUtil.htmlEncode(text);
        this._adjustText();
	} else {
		this._textParam = AjxStringUtil.htmlEncode(text);
	}
};

ZaTreeItem.prototype.getCount =
function() {
	return this._countInfo;
};

/**
 * Sets the image.
 *
 * @param	{string}	imageInfo		the image
 */
ZaTreeItem.prototype.setCount =
function(countInfo) {
	if (this._initialized) {
		if (this._countCell) {
			this._countCell.innerHTML = countInfo;
            // only make css take effect when it has value;
            this._countCell.className = "AdminTreeItem-Count";
		}
		this._countInfo = countInfo;
	} else {
		this._countInfoParam = countInfo;
	}
};

ZaTreeItem.prototype.setExpanded =
function(expanded, recurse, skipNotify) {
	// Go up the chain, ensuring that parents are expanded/initialized
	if (expanded) {
		// Realize any deferred children
		this._realizeDeferredChildren();
	}

	// If we have children, then allow for expanding/collapsing
	if (this.getNumChildren()) {
        if (this._expanded != expanded) {
			this._expand(expanded, null, true);
		}
	}
};

ZaTreeItem.prototype.isClickOnItem =
function(ev) {
    var x = ev.docX;
    var y = ev.docY;
    var selfBound =  Dwt.getBounds(this._itemDiv);
    var ret = (selfBound.x <= ev.docX) &&
              (ev.docX <= selfBound.x + selfBound.width) &&
              (location.y <= ev.docY) &&
              (ev.docY <= selfBound.y + selfBound.height);
    return ret;


}

ZaTreeEvent = function (oldPath, newPath, details) {
    if (arguments.length == 0)
       return;
    this.oldPath = oldPath;
    this.newPath = newPath;
    this.details = details;
}

ZaTreeEvent.prototype = new DwtEvent();
ZaTreeEvent.prototype.consturctor = ZaTreeEvent;
ZaTreeEvent.prototype.toString = function () {
    return "ZaTreeEvent";
}

ZaTreeEvent.ONDRAW= "ondraw";
ZaTreeEvent.ONDESTROY = "ondestroy";

// type 0: local
// type 1: alias
ZaTreeItemData = function(params) {
    if (arguments.length == 0) { return; }

    params = Dwt.getParams(arguments, ZaTreeItemData.PARAMS);
    this.parent = params.parent;
    this.parentObject = params.parentObject || "";
    this.relatedObject = params.relatedObject || [];
    this.recentObject= params.recentObject || [];
    this.type = params.type || 0;
    if (this.type == 1) {
        this.path = params.path;
    }
    this.id = params.id;
    this.className = params.className || "AdminTreeItem";
    this.text = params.text;
    this.image = params.image;
    this.siblings = new AjxVector();
    this.forceNode = params.forceNode ;
    this.isShowHistory = (params.isShowHistory === undefined?  true: params.isShowHistory);
    this.index = params.index;
    this.defaultSelectedItem = params.defaultSelectedItem;
    this.count = params.count;
    this.canShowOnRoot = (params.canShowOnRoot === undefined? true : params.canShowOnRoot) ;
    this.mappingId = params.mappingId;
    this.callback = params.callback;
    this.buildPath = (params.buildPath ? params.buildPath : undefined);
    this._data = {};
    this.childrenData = new AjxVector();
    this._eventMgr = new AjxEventMgr();
}

ZaTreeItemData.PARAMS = ["parent", "id", "text", "image", "index", "count", "mappingId", "callback", "relatedObject", "recentObject", "type", "path", "canShowOnRoot", "forceNode", "isShowHistory", "buildPath", "className", "defaultSelectedItem"];

ZaTreeItemData.prototype.addChild =
function(child, index) {
	this.childrenData.add(child, index);
    child.parentObject = this;
};

ZaTreeItemData.prototype.addSilbings =
function(sibling, index) {
	this.siblings.add(sibling, index);
};

ZaTreeItemData.prototype.setData =
function(key, value) {
    this._data[key] = value;
};

ZaTreeItemData.prototype.getData =
function(key) {
    return this._data[key];
};

ZaTreeItemData.prototype.removeChild =
function(child, index) {
	this.childrenData.remove(child);
};

ZaTreeItemData.prototype.isLeaf =
function() {
    var isRealLeaf = this.childrenData.size() == 0;
    var isFakeLeaf = !this.canShowOnRoot;
   return (isRealLeaf || isFakeLeaf);
}

ZaTreeItemData.prototype.getChildrenNum =
function() {
   return this.childrenData.size();
}

ZaTreeItemData.prototype.isAlias =
function(child, index) {
	if (this.type == 1)
        return true;
    else
        return false;
};

ZaTreeItemData.prototype.getRealPath =
function(child, index) {
	return this.path;
};

ZaTreeItemData.prototype.addRelatedObject =
function(relatedObject) {
    this.relatedObject = relatedObject;
}

ZaTreeItemData.prototype.addRecentObject =
function(recentObject) {
    this.recentObject = recentObject;
}

ZaTreeItemData.prototype.addListener =
function (eventType, listener) {
    this._eventMgr.addListener(eventType, listener);
}

ZaTreeItemData.prototype.notifyListeners =
function (eventType, event) {
    return this._eventMgr.notifyListeners(eventType, event);
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaTree")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 8/19/11
 * Time: 10:38 PM
 * To change this template use File | Settings | File Templates.
 */
ZaTree = function(params) {
	if (arguments.length == 0) { return; }
	params = Dwt.getParams(arguments, ZaTree.PARAMS);
    // Alwyas single style in Admin Console;
    params.style = DwtTree.SINGLE_STYLE;
	DwtTree.call(this, params);
    this._rootData = new ZaTreeItemData();
    this.currentShowItem = null;
};

ZaTree.PARAMS = ["parent", "style", "className", "posStyle"];

ZaTree.prototype = new DwtTree;
ZaTree.prototype.constructor = ZaTree;

ZaTree.prototype.toString =
function() {
	return "ZaTree";
};

ZaTree.prototype._expandUp =
function(item) {
	// Nothing doing here
    //
    return;
};

ZaTree.prototype.getContainer =
function() {
    return this._container;
};

ZaTree.prototype.setRootData =
function(rootData) {
    this._rootData  = rootData;
}

ZaTree.prototype.getRootData =
function(rootData) {
    return this._rootData;
}

ZaTree.prototype.addTreeItemData =
function(treeItemData) {
    var pathItems = this.getPathItems( treeItemData.parent);
    var result;
    var parentItem = this.getTreeItemData(this._rootData, pathItems, 0);
    if (parentItem) {
        parentItem.addChild(treeItemData);
        result =  true;
    } else {
        result = false;
    }

    return result;
}

ZaTree.prototype.getTreeItemData =
function(startNode, pathItems, startIndex) {
    if (pathItems.length == startIndex)
        return "";

    var currentPathItem = pathItems[startIndex];
    if (startNode.text != currentPathItem)
        return "";

    var nextStartIndex = startIndex + 1;
    if (pathItems.length == nextStartIndex)
        return startNode;

    if (startNode.childrenData.size() == 0) {
        return "";
    }

    var ret = "";
    var i;

    for (i = 0; i < startNode.childrenData.size(); i++) {
        ret = this.getTreeItemData(startNode.childrenData.get(i), pathItems, nextStartIndex);
        if (ret)
            break;
    }

    return ret;
}

ZaTree.prototype.getTreeItemDataByPath =
function(path) {
    var pathItems = this.getPathItems(path);
    var ret = this.getTreeItemData(this._rootData, pathItems, 0);
    return ret;
}

ZaTree.SEPERATOR = "%";
ZaTree.prototype.getPathItems =
function(path) {
    var temp = path.split(ZaTree.SEPERATOR);
    var ret = [];
    for (var i = 0; i < temp.length; i++) {
        if (temp[i]) {
            ret.push(temp[i]);
        }
    }
    return ret;
}
ZaTree.getPathItems = ZaTree.prototype.getPathItems;

ZaTree.prototype.setSelection =
function(treeItem, skipNotify, kbNavEvent, noFocus) {
	if (!treeItem)
        return;

	// Remove currently selected items from the selection list. if <treeItem> is in that list, then note it and return
	// after we are done processing the selected list
	var a = this._selectedItems.getArray();
	var sz = this._selectedItems.size();
	var da;
	var j = 0;
	var alreadySelected = false;
	for (var i = 0; i < sz; i++) {
		if (a[i] == treeItem) {
			alreadySelected = true;
		} else {
			a[i]._setSelected(false);
			this._selectedItems.remove(a[i]);
			if (da == null) {
				da = new Array();
			}
            if(!AjxUtil.isEmpty(a[i]))
			    da[j++] = a[i];
		}
	}

	if (da && !skipNotify) { //da is a array
		this._notifyListeners(DwtEvent.SELECTION, da, DwtTree.ITEM_DESELECTED, null, this._selEv, kbNavEvent);
	}

	if (alreadySelected) { return; }

    this._selectedItems.add(treeItem);

	//this._expandUp(treeItem);
	if (treeItem._setSelected(true, noFocus) && !skipNotify) {
    	this._notifyListeners(DwtEvent.SELECTION, [treeItem], DwtTree.ITEM_SELECTED, null, this._selEv, kbNavEvent);
	}
};

/*
 * Remove isAddHistory Now(By ming@zimbra.com).
 * Currenty, we won't add history in this function.
 * For it won't easy for us to decide when we should add history.
 * We only add history automatically when user click the tree item
 */
ZaTree.prototype.setSelectionByPath =
function (path, isAddHistory, skipNotify, kbNavEvent, noFocus, refresh, skipDestroyNotify) {

    var dataItem = this.getTreeItemDataByPath(path);
    if (dataItem.isAlias()) {
        path = dataItem.getRealPath();
        isAddHistory = false;
    }

    var result = this._getBuildNode(dataItem);
    if (result.isNeed) {
        if (this.currentRoot && !skipDestroyNotify) {
            var treeEvent = new ZaTreeEvent(result.oldPath, result.newPath);
            var notifyRet = this.currentRoot.getData("dataItem").notifyListeners(ZaTreeEvent.ONDESTROY, treeEvent);
            if (notifyRet === false) {
                return;
            }
        }
        this.buildTree(result.resultItem);
    } else {
	    var a = this._selectedItems.getArray();
	    var numSelectedItems = this._selectedItems.size();
        if (numSelectedItems > 0) {
			for (var i = 0; i < numSelectedItems; i++) {
				a[i]._setSelected(false);
			}
		}
    }

    this._selectedItems.removeAll();

    var treeItem = this.getTreeItemByPath(path);

    var selectedItem = this._getSelectedItem (treeItem);

    this._selectedItems.add(selectedItem);

    if (selectedItem._setSelected(true, noFocus) && !skipNotify) {
    	this._notifyListeners(DwtEvent.SELECTION, [selectedItem], DwtTree.ITEM_SELECTED, null, this._selEv, kbNavEvent, refresh);
	}

    this._updateHistory(treeItem, isAddHistory);

    var buildDataItem = result.isNeed ? result.resultItem: dataItem;
    if (buildDataItem.callback && buildDataItem.callback instanceof AjxCallback) {
        buildDataItem.callback.run();
    }

}


ZaTree.prototype._getBuildNode = function (currentDataItem) {
    var result = {
        isNeed : true,
        resultItem : currentDataItem
    };

    if (!this.currentRoot)
        return result;

    var lastDataItem = this.currentRoot.getData("dataItem");
    var lastPath = this.getABPath(lastDataItem);

    if (currentDataItem.buildPath) {
        result.resultItem = this.getTreeItemDataByPath(currentDataItem.buildPath);
    } else {
        if (currentDataItem.isLeaf() && currentDataItem.parentObject) {
            result.resultItem = currentDataItem.parentObject;
        } else {
            result.resultItem = currentDataItem;
        }
    }

    var currentPath = this.getABPath(result.resultItem);
    result.newPath = currentPath;
    if (lastPath == currentPath) {
        result.isNeed = false;
    } else {
        result.oldPath = lastPath;
    }
    return result;
}

ZaTree.prototype._getSelectedItem = function (currentRootNode) {
    var defaultSelectedItem = currentRootNode.getData("dataItem").defaultSelectedItem;
    if (!defaultSelectedItem) {
        return currentRootNode;
    }

    var childRen = currentRootNode.getItems();
    if (childRen.length > 0) {
        return childRen[defaultSelectedItem - 1];
    }

    return currentRootNode;

}

ZaTree.prototype.getSelectedItem = function (currentRootNode) {
      return this._getSelectedItem(currentRootNode);
}

//TODO make it recursive
ZaTree.prototype.getTreeItemByPath =
function(path) {
    if (!path)
        return null;

    if (!this.currentRoot)
        return null;

    var firstLevelChildren = this.getChildren();
    for (var j = 0; j < firstLevelChildren.length; j++) {
        var currentTreeItem = firstLevelChildren[j];
        var rootDataPath = currentTreeItem.getData("dataItem");
        var rootPath = this.getABPath(rootDataPath);
        if (rootPath == path)
            return currentTreeItem;

        var children = currentTreeItem.getChildren();
        for (var i = 0; i < children.length; i++) {
            var childTreeItem = children[i];
            var text = childTreeItem.getText();
            var childPath =  rootPath + ZaTree.SEPERATOR + text;
            if (path == childPath)
                return  childTreeItem;
        }
    }
    return null;
}

ZaTree.prototype.buildTree =
function (showRootNode) {

    this.clearItems();
    this.curentRoot = null;
    this.currentRelated = null;
    this.currentRoot = this._buildNodeItem(showRootNode, true);
    this.currentRoot.setExpanded(true);
    if (showRootNode.relatedObject.length != 0) {
        this.currentRelated = this._buildNodeItem(this._getDefaultRelated(showRootNode));
        this.currentRelated.setExpanded(true);
    }

    if (showRootNode.recentObject.length != 0) {
        this.currentRecented = this._buildNodeItem(this._getDefaultRecentObjects(showRootNode), false, true);
        this.currentRecented.setExpanded(true);
    }

    for (var i = 0; i < showRootNode.siblings.size(); i++) {
        var currentAddNode =  showRootNode.siblings.get(i);
        var currentShowNode = this._buildNodeItem(currentAddNode);
        currentShowNode.setExpanded(true);
    }
    return this.currentRoot;
}

ZaTree.prototype.renameTreeItem =
function (path, newName) {
    var dataTreeItem  =  this.getTreeItemDataByPath(path);
    if (!dataTreeItem)
        return;

    // If this is shown now, then update the Tree Item.
    var treeItem = this.getTreeItemByPath(path);
    if (treeItem) {
        treeItem.setText (newName);
    }

    dataTreeItem.text = newName;
    var parentPath = this.getPathItems (dataTreeItem.parent);
    parentPath.push(newName);
    var newPath =  this.getPathByArray (parentPath);
    // TODO we should make it recursive in futher
    // TODO Currenty it works well for we has only need to rename object name and saved search;
    for (var i = 0; i < dataTreeItem.childrenData.size(); i++) {
        var currentNode = dataTreeItem.childrenData.get(i);
        currentNode.parent = newPath;
    }

    return newPath;
}

ZaTree.prototype.removeTreeItem = function (path) {
    var treeItemData = this.getTreeItemDataByPath(path);
    if (!treeItemData)
        return;

    var treeItem = this.getTreeItemByPath (path);
    if (treeItem)
        treeItem.parent.removeChildren(treeItem);

    treeItemData.parentObject.removeChildren (treeItemData);
}

ZaTree.prototype.removeAllChild = function (path) {
    var treeItemData = this.getTreeItemDataByPath(path);
    if (!treeItemData)
        return;

    var treeItem = this.getTreeItemByPath (path);
    if (treeItem) {
        var removeTi = [];
        removeTi = treeItem.getChildren();
        for (var i = 0; i < removeTi.length; i++) {
            treeItem.removeChild(removeTi[i]);
            removeTi[i] = null;
        }
        removeTi = [];
    }

    treeItemData.childrenData.removeAll();
}

ZaTree.prototype._getDefaultRelated =
function (treeDataItem) {
    var related = new ZaTreeItemData({
            parent: treeDataItem.parent,
            id: treeDataItem.id + "_related",
            text:ZaMsg.OVP_related
    });
    treeDataItem.addChild(related);
    for (var i = 0; i < treeDataItem.relatedObject.length; i++) {
        var currentObject =treeDataItem.relatedObject[i];
        currentObject.parent = treeDataItem.parent + ZaTree.SEPERATOR + ZaMsg.OVP_related;
        related.addChild(currentObject);
    }
    return related;
}

ZaTree.prototype._getDefaultRecentObjects =
function (treeDataItem) {
    var recent = new ZaTreeItemData({
            parent: treeDataItem.parent,
            id: treeDataItem.id + "_recent",
            text:ZaMsg.OVP_recent
    });
    treeDataItem.addChild(recent);
    for (var i = 0; i < treeDataItem.recentObject.length; i++) {
        var currentObject =treeDataItem.recentObject[i];
        currentObject.parent = treeDataItem.parent + ZaTree.SEPERATOR + ZaMsg.OVP_recent;
        recent.addChild(currentObject);
    }
    return recent;
}

ZaTree.prototype._buildNodeItem =
function(showRootNode, isRoot, isHightlightedWhenMouseUp ) {
    var ti, nextTi, key, currentRoot;
    var clsName;
    if (showRootNode.text == ZaMsg.OVP_home) {
        clsName = "homeRootOverviewHeader";
    } else if (isRoot) {
        clsName = "rootOverviewHeader";
    } else {
        clsName = "overviewHeader";
    }

    currentRoot =  new ZaTreeItem({parent:this,className:clsName,id:showRootNode.id, forceNotifySelection:true});
	currentRoot.enableSelection(false);
	currentRoot.setText(showRootNode.text);
    currentRoot.setImage(showRootNode.image);
	currentRoot.setData(ZaOverviewPanelController._TID, showRootNode.mappingId);
    currentRoot.setData("dataItem", showRootNode);
    for (key in showRootNode._data) {
        currentRoot.setData(key, showRootNode._data[key]);
    }

    var i, j, forceNode;
    for (i = 0; i < showRootNode.childrenData.size(); i++) {
        var currentAddNode =  showRootNode.childrenData.get(i);
        // TODO improved latter
        if (isRoot) {
            if (currentAddNode.text == ZaMsg.OVP_related)
                continue;
            if (currentAddNode.text == ZaMsg.OVP_recent)
                continue;
        }
        if( currentAddNode.forceNode !== undefined)
            forceNode = currentAddNode.forceNode;
        else
            forceNode = currentAddNode.childrenData.size() > 0 ? true: false;

        ti = new ZaTreeItem({parent: currentRoot,className: currentAddNode.className,id:currentAddNode.id, forceNode: forceNode});
        ti.setCount(currentAddNode.count);
        ti.setText(currentAddNode.text);
        ti.setImage(currentAddNode.image);
        ti.setData(ZaOverviewPanelController._TID, currentAddNode.mappingId);
        ti.setData("dataItem", currentAddNode);

        if ( isHightlightedWhenMouseUp ) {
            var mouseOutEv = (AjxEnv.isIE) ? DwtEvent.ONMOUSELEAVE : DwtEvent.ONMOUSEOUT;

            ti.addListener(DwtEvent.ONMOUSEDOWN, new AjxListener(ti, ZaTree._highlightItemOn));
            ti.addListener(DwtEvent.ONMOUSEUP, new AjxListener(ti, ZaTree._highlightItemOff));
            ti.addListener(mouseOutEv, new AjxListener(ti, ZaTree._highlightItemOff));
        }

        for (key in currentAddNode._data) {
            ti.setData(key, currentAddNode._data[key]);
        }
    }
    return currentRoot;
}

ZaTree._highlightItemOff =
function(ev) {
	var ti = this;
	ti._setSelected(false);
}

ZaTree._highlightItemOn =
function(ev) {
	var ti = this;
	ti._setSelected(true);
}

ZaTree.prototype._itemClicked =
function(item, ev) {
	var i;
	var a = this._selectedItems.getArray();
	var numSelectedItems = this._selectedItems.size();
    var currentDataItem =  item.getData("dataItem");
    var isShowInHistory = currentDataItem.isShowHistory;
    var isAlias = currentDataItem.isAlias();
    if (isAlias) {
        var aliasImage = currentDataItem.image;
        currentDataItem = this.getTreeItemDataByPath(currentDataItem.getRealPath());
        if(!currentDataItem.image)
            currentDataItem.image = aliasImage;
        this._updateHistoryObj(currentDataItem);
    }
	if (currentDataItem.isLeaf() && !isAlias) {
		if (numSelectedItems > 0) {
			for (i = 0; i < numSelectedItems; i++) {
				a[i]._setSelected(false);
			}
			// Notify listeners of deselection
			this._notifyListeners(DwtEvent.SELECTION, this._selectedItems.getArray(), DwtTree.ITEM_DESELECTED, ev, this._selEv);
			this._selectedItems.removeAll();
		}

        this._selectedItems.add(item);

		if (item._setSelected(true)) {
            this._updateHistory(item, true, isShowInHistory);
			this._notifyListeners(DwtEvent.SELECTION, [item], DwtTree.ITEM_SELECTED, ev, this._selEv);
		}
	} else {
        var buildDataItem;
        if (!currentDataItem.isLeaf())
            buildDataItem = currentDataItem;
        else
            buildDataItem = currentDataItem.parentObject;
        this.buildTree(buildDataItem);
        this._selectedItems.removeAll();

        var selectedItem;
        if (currentDataItem.isLeaf())
            selectedItem = this.getTreeItemByPath(this.getABPath(currentDataItem));
        else {
            selectedItem = this._getSelectedItem(this.getCurrentRootItem());
        }

        this._selectedItems.add(selectedItem);
		if (selectedItem._setSelected(true)) {
            if (!isAlias) {
                if (currentDataItem.isLeaf())
                    this._updateHistory(selectedItem, true, isShowInHistory);
                else
                    this._updateHistory(this.getCurrentRootItem(), true, isShowInHistory);
            } else
                this._updateHistory(item, true, isShowInHistory);
			this._notifyListeners(DwtEvent.SELECTION, [selectedItem], DwtTree.ITEM_SELECTED, ev, this._selEv);
		}

        if (buildDataItem.callback && buildDataItem.callback instanceof AjxCallback) {
            buildDataItem.callback.run();
        }
    }
};

ZaTree.prototype._notifyListeners =
function(listener, items, detail, srcEv, destEv, kbNavEvent, refresh) {
	if (this.isListenerRegistered(listener)) {
		if (srcEv) {
			DwtUiEvent.copy(destEv, srcEv);
		}
		destEv.items = items;
		if (items.length == 1) {
			destEv.item = items[0];
		}
		destEv.detail = detail;
		destEv.kbNavEvent = kbNavEvent;
        destEv.refresh = refresh;
		this.notifyListeners(listener, destEv);
		if (listener == DwtEvent.SELECTION) {
			this.shell.notifyGlobalSelection(destEv);
		}
	}
};

ZaTree.prototype._updateHistory =
function (treeItem, isAddHistory, isShowInHistory) {
    var text = treeItem.getText();
    var dataItem = treeItem.getData("dataItem");
    var path = this.getABPath(dataItem);
    var historyObject = new ZaHistory(path, text, undefined, isShowInHistory);
    ZaZimbraAdmin.getInstance().updateHistory(historyObject, isAddHistory);
}

ZaTree.prototype._updateHistoryObj =
function (dataItem) {
    var text = dataItem.text;
    var type = ZaItem.ACCOUNT;
    var path = this.getABPath(dataItem);

    switch (dataItem.image) {
		case "Account":
			type = ZaItem.ACCOUNT; break ;
		case "COS" :
			type = ZaItem.COS ; break ;
        case "Domain":
            type = ZaItem.DOMAIN; break;
		case "Resource":
			type = ZaItem.RESOURCE; break ;
        case "DistributionList":
            type = ZaItem.DL; break;
        case "AccountAlias":
            type = ZaItem.ALIAS; break;
        case "Server":
            type = ZaItem.SERVER; break;
        case "RightObject":
            type = ZaItem.RIGHT; break;
		default :
			type = null;
	}


    var historyObject = new ZaHistory(path, text, type);
    var historyMgr = ZaZimbraAdmin.getInstance().getHistoryMgr();
    historyMgr.addHistoryObj(historyObject);
    var objList = historyMgr.getAllHistoryObj().getArray();
    var ti = null;
    var image = null;
    var Tis = [];
    for(var i = objList.length - 1; i > -1; i --) {
        if(objList[i].type == ZaItem.ACCOUNT)
            image = "Account";
        else if(objList[i].type == ZaItem.COS)
            image = "COS";
        else if(objList[i].type == ZaItem.DOMAIN)
            image = "Domain";
        else if(objList[i].type == ZaItem.RESOURCE)
            image = "Resource";
        else if(objList[i].type == ZaItem.DL)
            image = "DistributionList";
        else if(objList[i].type == ZaItem.ALIAS)
            image = "AccountAlias";
        else if(objList[i].type == ZaItem.SERVER)
            image = "Server";
        else if(objList[i].type == ZaItem.RIGHT)
            image = "RightObject";

        ti = new ZaTreeItemData({
                text: objList[i].displayName,
                type:1,
                image:image,
                forceNode: (i+1 != objList.length),
                path: objList[i].path
                }
            );
        Tis.push(ti);
    }
    dataItem.recentObject = Tis;
}

ZaTree.prototype.getABPath =
function (dataItem) {
    var abPath = [];
    var currentObject = dataItem;
    while (currentObject) {
        abPath.unshift(currentObject.text);
        currentObject = currentObject.parentObject;
    }
    var ret = this.getPathByArray(abPath);
    return ret;
}

ZaTree.prototype.getPathByArray =
function (arr) {
    if (arr.length == 0)
        return "";
    return arr.join(ZaTree.SEPERATOR);
}

ZaTree.prototype.getCurrentRootItem = function() {
    return this.currentRoot;
}
ZaTree.prototype.getCurrentSelectedItems = function() {
    return this._selectedItems;
}

ZaTree.prototype.clearItems = function() {
    var items = this.getItems();
    var len= items.length;
    for (var i = 0; i < len; i++) {
        this.removeChild(items[0]);
    }
    this._getContainerElement().innerHTML = "";
};

ZaTree.getPathByArray = ZaTree.prototype.getPathByArray;



}
if (AjxPackage.define("zimbraAdmin.common.ZaCurrentAppBar")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 8/26/11
 * Time: 1:43 AM
 * To change this template use File | Settings | File Templates.
 */
ZaCurrentAppBar = function(parent, className, buttons) {

	DwtButton.call(this, parent, "", className, Dwt.ABSOLUTE_STYLE);
    this._removeUnwantedEvent();
    this._currentPathItems = new Array();
    this.menu = new ZaPopupMenu(this, "ActionMenu", null, [], ZaId.CURRENT_APP_BAR, ZaId.MENU_POP, []);
    this.menu.setWidth(Dwt.__checkPxVal(150,true));
    this.actionButtons = {};
    this.itemElArray = [];
    this.setMenu(this.menu);
    this.setSettingImg();
    this.clearTypeImg();
}

ZaCurrentAppBar.prototype = new DwtButton;
ZaCurrentAppBar.prototype.constructor = ZaCurrentAppBar ;
ZaCurrentAppBar.defaultImg = "Configure";

ZaCurrentAppBar.prototype.toString =
function() {
	return "ZaCurrentAppBar";
}


ZaCurrentAppBar.prototype.TEMPLATE = "admin.Widgets#ZaCurrentAppBar";
ZaCurrentAppBar.prototype.ACTION_ITEM_TEMPLATE = "dwt.Widgets#ZToolbarItem";

ZaCurrentAppBar.prototype._createHtmlFromTemplate = function(templateId, data) {
    DwtButton.prototype._createHtmlFromTemplate.call(this, templateId, data);
    this._typeImgEl = document.getElementById(data.id+"_typeimg");
    this._settingImgEl = document.getElementById(data.id+"_settingimg");
    this._actionEl = document.getElementById(data.id+"_action");
    this._actionItemsEl = document.getElementById(data.id+"_actionitems");
};

ZaCurrentAppBar.prototype.setSettingImg = function (imgName) {
    if (!this._settingImgEl)
        return;

    var localImg = imgName || ZaCurrentAppBar.defaultImg;
    this._settingImgEl.innerHTML = AjxImg.getImageHtml(localImg);
}

ZaCurrentAppBar.prototype.clearSettingImg = function () {
    if (!this._settingImgEl)
        return;

    this._settingImgEl.innerHTML = "";
}

ZaCurrentAppBar.prototype.setTypeImg = function (imgName) {
    if (!this._typeImgEl)
        return;
    if (!imgName)
        return;
    this._typeImgEl.innerHTML = AjxImg.getImageHtml(imgName);
    if (!Dwt.getVisible (this._typeImgEl))
        Dwt.setVisible (this._typeImgEl, true);
}

ZaCurrentAppBar.prototype.clearTypeImg = function () {
    if (!this._typeImgEl)
        return;

    this._typeImgEl.innerHTML = "";
    if (Dwt.getVisible (this._typeImgEl))
        Dwt.setVisible (this._typeImgEl, false);
}

ZaCurrentAppBar.prototype.setText =
function(path) {
    // Html encode path to make sure scripts are not executed when added in dom
    path = AjxStringUtil.htmlEncode(path);

    var text = "";
    var temp = path.split(ZaTree.SEPERATOR);
    this._currentPathItems = temp;
    for (var i = 0; i < temp.length; i++) {
        text +=this._getSinglePathItem(temp[i]);
        if (i != temp.length - 1)
            text += "-";
    }
    DwtButton.prototype.setText.call(this, text);
}

ZaCurrentAppBar.prototype.setActionButton =
function (opList, appBarOrder) {
    if (AjxUtil.isEmpty(opList)) {
        this._clearActionButton();
    } else {
        this._addActionButton(opList, appBarOrder);
    }
}

ZaCurrentAppBar.prototype._addActionButton =
function (opList, appBarOrder) {

    this._clearActionButton();
    var b;

    if (AjxUtil.isEmpty(appBarOrder)) {
        for(var ix in opList) {
            b = this._createActionButton(opList[ix].id, opList[ix].imageId, opList[ix].caption, opList[ix].disImageId, opList[ix].tt, true, opList[ix].className, opList[ix].type, opList[ix].menuOpList);

            b.addSelectionListener(opList[ix].listener);
        }
    } else {
        var ix;
        for(var i in appBarOrder) {
            ix = appBarOrder[i];
            if(opList[ix]) {
            	b = this._createActionButton(opList[ix].id, opList[ix].imageId, opList[ix].caption, opList[ix].disImageId, opList[ix].tt, true, opList[ix].className, opList[ix].type, opList[ix].menuOpList);
            	b.addSelectionListener(opList[ix].listener);
            }
            
        }
    }

    var width = Dwt.getBounds(this._actionItemsEl).width;
    this.setActionItemWidth(width);
}

ZaCurrentAppBar.prototype._createActionButton =
function(buttonId, imageId, text, disImageId, toolTip, enabled, className, type, menuOpList) {
	if (!className)
		className = "DwtToolbarButton"
	var b = this.actionButtons[buttonId] = new ZaToolBarButton({
			parent:this,
			className:className,
			id:ZaId.getButtonId("ZaCurrentAppBar",ZaOperation.getStringName(buttonId))
	});
	if (imageId)
		b.setImage(imageId);
	if (text)
		b.setText(text);
	if (toolTip)
		b.setToolTipContent(toolTip);
	b.setEnabled((enabled) ? true : false);
	b.setData("_buttonId", buttonId);

    var elContainer = this._createActionItemContainer();
    elContainer.appendChild(b.getHtmlElement());
    this._addActionItem(elContainer);

	return b;
}

ZaCurrentAppBar.prototype._createActionItemContainer =
function () {
    var itemCount = this.itemElArray.length + 1;
    var itemId = [this._htmlElId, "item", itemCount].join("_");

    var data = { id: this._htmlElId, itemId: itemId};
    var html = AjxTemplate.expand(this.ACTION_ITEM_TEMPLATE, data);

    var cont = AjxStringUtil.calcDIV();
    cont.innerHTML = html;
    return cont.firstChild.rows[0].cells[0];
}

ZaCurrentAppBar.prototype._addActionItem =
function(element) {
    // Always add the current action item to the last one
	var spliceIndex = this.itemElArray.length;
	this.itemElArray.splice(spliceIndex, 0, element);
    this._actionItemsEl.appendChild(element);
}

ZaCurrentAppBar.prototype._clearActionButton =
function() {
    for(var ix = 0; ix < this.itemElArray.length; ix++) {
        this.itemElArray[ix] = undefined;
    }
    this.itemElArray = [];
    //this._actionItemsEl.innerHTML = ""; //throw unkown runtime exception in ie
    while(this._actionItemsEl.firstChild){
        var tempNode = this._actionItemsEl.removeChild(this._actionItemsEl.firstChild);
            tempNode = null;
    }
    for (var actionIx in this.actionButtons) {
        this.actionButtons[actionIx] = undefined;
    }
    this.actionButtons = {};
    this.setActionItemWidth(0);
}

ZaCurrentAppBar.prototype.setActionItemWidth =
function(w) {
    this._actionEl.style.width = Dwt.__checkPxVal(w);
}

ZaCurrentAppBar.prototype.enableButton =
function (buttonId, enabled) {
    if (!this.actionButtons[buttonId])
        return;

    this.actionButtons[buttonId].setEnabled(enabled);
}

ZaCurrentAppBar.spanItemClass = "";//"overviewHeader";
ZaCurrentAppBar.prototype._getSinglePathItem =
function(path) {
    var text = new Array(10);
    var i = 0;
    text[i++] = "<span class=";
    text[i++] = ZaCurrentAppBar.spanItemClass;
    text[i++] = ">";
    text[i++] = path;
    text[i++] = "</span>";
    return text.join("");
}

ZaCurrentAppBar.prototype.popup =
function(menu) {
	menu = menu || this.getMenu();

    if (!menu) { return; }

    var parent = menu.parent;
	var parentBounds = parent.getBounds();
	var windowSize = menu.shell.getSize();
	var menuSize = menu.getSize();
	var parentElement = parent.getHtmlElement();
	// since buttons are often absolutely positioned, and menus aren't, we need x,y relative to window
	var parentLocation = Dwt.toWindow(parentElement, 0, 0);
	var leftBorder = (parentElement.style.borderLeftWidth == "") ? 0 : parseInt(parentElement.style.borderLeftWidth);

	var x;
    var dropDownEl = parent._dropDownEl;
    if (!dropDownEl) {
	    x = parentLocation.x + leftBorder;
    } else {
        var dropDownLocation = Dwt.toWindow(dropDownEl, 0, 0);
        x = dropDownLocation.x + 20;
    }
	x = ((x - menuSize.x) >= 0) ? x - menuSize.x : x;
    if (x > 13)
        x = x -13; //here is 13px is for extra padding.
	var y;

    var horizontalBorder = (parentElement.style.borderTopWidth == "") ? 0 : parseInt(parentElement.style.borderTopWidth);
    horizontalBorder += (parentElement.style.borderBottomWidth == "") ? 0 : parseInt(parentElement.style.borderBottomWidth);
    y = parentLocation.y + parentBounds.height + horizontalBorder;

	menu.popup(0, x, y);
};

ZaCurrentAppBar.prototype.setDisplayState =
function(state, force) {
    if (state == DwtControl.HOVER ||
        state == DwtControl.ACTIVE||
        state == DwtControl.FOCUSED)
        state = DwtControl.NORMAL;

    if (this._selected && state != DwtControl.SELECTED && !force) {
        state = [ DwtControl.SELECTED, state ].join(" ");
    }
    DwtLabel.prototype.setDisplayState.call(this, state);
};

ZaCurrentAppBar.prototype._isDropDownEvent =
function(ev) {
	if (this._dropDownEventsEnabled && this._dropDownEl) {
		var mouseX = ev.docX;
        if (this._settingImgEl) {
            var imgX =  Dwt.toWindow(this._settingImgEl, 0, 0, window).x;
            if (mouseX >= imgX)
                return true;
        }
	}
	return false;
};

ZaCurrentAppBar.prototype._handleClick =
function(ev) {
    //
    var mouseEv = DwtShell.mouseEvent;
	mouseEv.setFromDhtmlEvent(ev);

    mouseEv._stopPropagation = true;
	mouseEv._returnValue = true;
	mouseEv.setToDhtmlEvent(ev);
	return false;
}

ZaCurrentAppBar.prototype._removeUnwantedEvent =
function () {
    var events = [].concat(AjxEnv.isIE ? [DwtEvent.ONMOUSEENTER, DwtEvent.ONMOUSELEAVE] :
										 [DwtEvent.ONMOUSEOVER, DwtEvent.ONMOUSEOUT]);
	for (var i = 0; i < events.length; i++) {
		this.removeListener(events[i], this._listeners[events[i]]);
	}
}

ZaCurrentAppBar.prototype.updateMenu =
function(popupOperations, popupOrder) {
    var oldMenu = this.getMenu();
    var isPopup = false;
    if(oldMenu) {
        isPopup = oldMenu.isPoppedUp();
        this.setMenu();
        this.menu = null;
        try {
            oldMenu.dispose();
            delete oldMenu;
        }catch(ex){
            //nothing doing here to avoid delete exception;
        }
    }

    if (popupOperations) {
        this.menu = new ZaPopupMenu(this, "ActionMenu", null, popupOperations, ZaId.CURRENT_APP_BAR, ZaId.MENU_POP, popupOrder);
        this.menu.setWidth(Dwt.__checkPxVal(150,true));
        this.setSettingImg();
        this.setMenu(this.menu);
    } else {
        this.clearSettingImg();
    }

    if (isPopup) {
        this.popup();
    }
}

ZaCurrentAppBar.prototype.getMenu = function () {
    return this.menu;
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaHistoryMgr")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 9/19/11
 * Time: 11:27 PM
 * To change this template use File | Settings | File Templates.
 */
ZaHistoryMgr = function() {
    this._history = new AjxVector();
    this._historyObj = new AjxVector();
    this._evtMgr = new AjxEventMgr();
    this._currentLocation = 0;
}

ZaHistoryMgr.MAX_HISTROY_OBJ = 5;

ZaHistoryMgr.prototype.toString =
function() {
    return "ZaHistoryMgr";
}

ZaHistoryMgr.prototype.constructor = ZaHistoryMgr;

ZaHistoryMgr.prototype.addHistory =
function (historyObject) {
    var last = this._history.getLast();
    if (last && last.equal(historyObject))
        return;
    if (window.console && window.console.log)
        window.console.log("Add History " + historyObject.path);
    this._history.add(historyObject);
    // Here we always relocates the currentLocation to the current page.
    this._currentLocation = this._history.size() -1;
    this._evtMgr.notifyListeners(ZaEvent.L_MODIFY, this._history);
}

ZaHistoryMgr.prototype.findHistoryByName=
function(displayName){
    var obj = new AjxVector();
    var num = 0;
    for(var i = this._history.size()-1; i >= 0 && num < 20; i--) {
        if(!this._history.get(i).isShowInHistory)
                continue;

        if(this._history.get(i).displayName == displayName )
            obj.add(this._history.get(i));
        num++;
    }
    return obj;
}

ZaHistoryMgr.prototype.deleteHistoryObjByName =
function(displayName){
    for(var i = 0; i < this._historyObj.size(); i++) {
        if(this._historyObj.get(i).displayName == displayName )
            return this._historyObj.removeAt(i);
    }
}

ZaHistoryMgr.prototype.refreshHistory =
function () {
    this._evtMgr.notifyListeners(ZaEvent.L_MODIFY, this._history);
}

ZaHistoryMgr.prototype.addHistoryObj =
function (historyObject) {
    if (AjxUtil.isEmpty(historyObject.type))
        return;

    if (!ZaHistoryMgr.isAllowedRecentedObject(historyObject.path))
        return;

    var lastObj = this._historyObj.get(this._historyObj.size() - 1);
    if(lastObj && lastObj.path == historyObject.path)
        return;
    var loc =  this.findHistoryObj(historyObject);
    if(loc > -1) this._historyObj.removeAt(loc);

    if(this._historyObj.size()+1 > ZaHistoryMgr.MAX_HISTROY_OBJ) {
        this._historyObj.removeAt(0);
    }
    this._historyObj.add(historyObject);
}

ZaHistoryMgr.prototype.findHistoryObj =
function(historyObject) {
    if(!historyObject) return -1;
    for(var i = 0; i < this._historyObj._array.length; i++) {
        if(this._historyObj._array[i].displayName == historyObject.displayName)
            return i;
    }
    return -1;
}

ZaHistoryMgr.isAllowedRecentedObject =
function (srcPath) {
    var ret = false;
    var srcPathArr = ZaTree.getPathItems(srcPath);
    var destPathArr;
    var allowedObject= ZaHistoryMgr.getAllowedRecenctObject();
    for (var i = 0; i < allowedObject.length; i++ ) {
        destPathArr =  ZaTree.getPathItems( allowedObject[i]);
        for (var j = 0; j < destPathArr.length; j++) {
            if (srcPathArr[j] != destPathArr[j]) {
                break;
            }
        }

        if (j == destPathArr.length) {
            ret = true;
            break;
        }
    }
    return ret;
}

ZaHistoryMgr.getAllowedRecenctObject = function() {
    if (!ZaHistoryMgr._allowedRecentObject) {

        ZaHistoryMgr._allowedRecentObject = [
            [ZaMsg.OVP_home, ZaMsg.OVP_manageAccounts].join(ZaTree.SEPERATOR),
            [ZaMsg.OVP_home, ZaMsg.OVP_configure].join(ZaTree.SEPERATOR)
        ];
    }
    return ZaHistoryMgr._allowedRecentObject;
}
ZaHistoryMgr.prototype.removeHistory =
function() {
    var currentSize = this._history.size();
    if (currentSize == 1)
        return false;
    for (var i = 1; i < currentSize; i++)
		this._history._array[i] = null;
    this._history._array.length = 1;
    this._currentLocation = 0;
    this._evtMgr.notifyListeners(ZaEvent.L_MODIFY, this._history);
    return true;
}

ZaHistoryMgr.prototype.getAllHistory =
function() {
    return this._history;
}

ZaHistoryMgr.prototype.getAllHistoryObj =
function() {
    return this._historyObj;
}

ZaHistoryMgr.prototype.getPrevious =
function () {
    if (!this.isPrevious())
        return "";
    return this._history.get(--this._currentLocation);
}

ZaHistoryMgr.prototype.getNext =
function () {
    if (!this.isNext())
        return "";
    return this._history.get(++this._currentLocation);
}

ZaHistoryMgr.prototype.isPrevious =
function () {
    if (this._currentLocation == 0 )
        return false;
    else
        return true;
}

ZaHistoryMgr.prototype.isNext =
function () {
    if (this._currentLocation == this._history.size() - 1 )
        return false;
    else
        return true;
}

ZaHistoryMgr.prototype.getLatestHistory =
function () {
    return  this._history.getLast();
}

ZaHistoryMgr.prototype.getCurrentyHistory =
function () {
    return  this._history.get(this._currentLocation);
}

ZaHistoryMgr.prototype.addChangeListener =
function(listener) {
	return this._evtMgr.addListener(ZaEvent.L_MODIFY, listener);
}

ZaHistoryMgr.prototype.removeChangeListener =
function(listener) {
	return this._evtMgr.removeListener(ZaEvent.L_MODIFY, listener);
}

/*
 * Path: current path of item
 * dispalyName: name showed in Tree Header
 * type: This is attribute used for related object and recent object account/dl...etc
 * isShowInHistory: is show this history in Tree Header
 */
ZaHistory = function (path, displayName, type, isShowInHistory, viewMethod) {
    this.path = path;
    this.displayName = displayName;
    this.type = type;
    this.isShowInHistory = (isShowInHistory === undefined) ? true: isShowInHistory;
    this.viewMethod = (viewMethod instanceof AjxCallback) ? viewMethod : new AjxCallback(this, this.defaultGoToView);
    this.enabled = true;
}

ZaHistory.prototype.goToView =
function(refresh) {
    if (this.viewMethod) {
        this.viewMethod.run(refresh);
    }
}

ZaHistory.prototype.defaultGoToView = function(refresh) {
    var tree = ZaZimbraAdmin.getInstance().getOverviewPanelController().getOverviewPanel().getFolderTree();
    tree.setSelectionByPath(this.path, false, undefined, undefined, undefined, refresh);
}

ZaHistory.prototype.equal = function (newObj) {
    return this.path == newObj.path;
}

ZaHistory.prototype.setEnabled =
function(enabled){
    this.enabled = enabled;
}

ZaHistory.prototype.getEnabled =
function(){
    return this.enabled;
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaUploader")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * @overview
 * Utility functions to upload files using HTML5
 */
ZaUploader = function() {
};
ZaUploader.prototype.constructor = ZaUploader;
/**
 * Returns a string representation of the object.
 *
 * @return        {String}        a string representation of the object
 */
ZaUploader.prototype.toString =
function() {
    return "ZaUploader";
};
/**
 *
 * @param fileElementId
 * @param url
 * @param callback
 *
 */
ZaUploader.prototype._upload =
function(fileElementIds, url, callback) {
    var cnt = fileElementIds.length;
    for(var i = 0; i < cnt; i++) {
        var element = document.getElementById(fileElementIds[i]);
        if(element && element.files && element.files.length > 0) {
            var file = element.files[0];
            if(file) {
                var fileName = file.name || file.fileName;
                var req = new XMLHttpRequest(); // we do not call this function in IE
                req.open("POST", url, true);
                req.setRequestHeader("Cache-Control", "no-cache");
                req.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                req.setRequestHeader("Content-Type",  (file.type || "application/octet-stream") + ";");
                req.setRequestHeader("Content-Disposition", 'attachment; filename="'+ AjxUtil.convertToEntities(fileName) + '"');
                if (window.csrfToken) {
                    req.setRequestHeader("X-Zimbra-Csrf-Token", window.csrfToken);
                }
                var uploadResults = [];
                req.onreadystatechange = function(req, fileName, callback) {
                    if (req.readyState === 4) {
                        var response = null;
                        var aid = null;
                        var status = req.status;
                        if (status === 200) {
                            var resp = eval("["+req.responseText+"]");
                            response = resp.length && resp[2];
                            if (response) {
                                response = response[0];
                                if (response) {
                                    uploadResults.push({aid:response.aid, filename:fileName});
                                    if(i == cnt) {
                                        callback.run(status, uploadResults);
                                    }
                                }
                            }
                        } else {
                            callback.run(status, uploadResults);
                        }
                    }
                }.bind(this, req, fileName, callback);

                req.send(file);
                delete req;
            } else {
                throw(new AjxException(ZaMsg.ERROR_INVALID_FILE_NAME, AjxException.UNKNOWN, "ZaUploader.prototype.upload"));
            }
        }
    }
};

ZaUploader.upload = function(callback, fileElementIds, formId) {
    if(!AjxUtil.isArrayLike(fileElementIds)) {
        fileElementIds = [fileElementIds];
    }
    if(AjxEnv.supportsHTML5File) {
        var uploader = new ZaUploader();
        uploader._upload(fileElementIds, appContextPath + "/../service/upload?fmt=extended,raw",  callback);
    } else {
        DBG.println("Start uploading the file");
        this.setUploadManager(new AjxPost(this.getUploadFrameId()));
        var um = this.getUploadManager() ;
        window._uploadManager = um;
        um.execute(new AjxCallback(this, function(status, uploadResult) {
            var uploadResults = [];
            if(AjxUtil.isArrayLike(uploadResult)) {
                //uploaded multiple files
                uploadResults = uploadResult;
            } else {
                //uploaded single file
                var fileName = "";
                if(fileElementIds[0]) {
                    var element = document.getElementById(fileElementIds[0]);
                    var file = element.files[0];
                    if(file) {
                        fileName = file.name || file.fileName;
                    }
                }
                uploadResults.push({aid:uploadResult, filename:fileName});
            }
            callback.run(status, uploadResults);
        }), document.getElementById (formId));
        return; //allow the callback to handle the wizard buttons
    }
};
}

//
// Admin UI Specific components
//

// controllers
if (AjxPackage.define("zimbraAdmin.common.ZaOverviewPanelController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
 * @class ZaOverviewPanelController
 * @contructor ZaOverviewPanelController
 * Controls the navigation tree.
 * @author Roland Schemers
 * @author Greg Solovyev
 **/
ZaOverviewPanelController = function(appCtxt, container) {
    ZaController.call(this, appCtxt, container, "ZaOverviewPanelController");
    this._init(appCtxt, container);
    this._setView();
}

ZaOverviewPanelController.prototype = new ZaController;
ZaOverviewPanelController.prototype.constructor = ZaOverviewPanelController;
ZaOverviewPanelController.overviewTreeListeners = new Object();
ZaOverviewPanelController.treeModifiers = new Array();
ZaOverviewPanelController._TID = "TID";
ZaOverviewPanelController._OBJ_ID = "OBJ_ID";

ZaOverviewPanelController.prototype.toString = function() {
    return "ZaOverviewPanelController";
}

ZaOverviewPanelController.prototype.getOverviewPanel = function() {
    if (!this._overviewPanel) {
        this._setView();
    }
    return this._overviewPanel;
}

/**
 * @param ev
 * This listener is invoked by any controller that can create a ZaCos object
 **/
ZaOverviewPanelController.prototype.handleCosCreation = function(ev) {
    return;
}

/**
 * @param ev
 * This listener is invoked by  any controller that can change a ZaCos object
 * the purpose of this listener is to keep labels of COS sub tree nodes in sync with COSes
 **/
ZaOverviewPanelController.prototype.handleCosChange = function(ev) {
    return;
}

/**
 * @param ev
 * This listener is invoked by  any controller that can remove an ZaCos object
 **/
ZaOverviewPanelController.prototype.handleCosRemoval = function(ev) {
    return;
}

/**
 * This listener is invoked by any controller that do a search.
 * @param ev
 */
ZaOverviewPanelController.prototype.handleSearchFinished = function(ev) {
    this.refreshSearchTree(ev);
}

ZaOverviewPanelController.prototype.removeCosTreeItems = function(detls) {
    return;
}

ZaOverviewPanelController.prototype.searchDomains = function() {
    var busyId = Dwt.getNextId();
    //var callback = new AjxCallback(this, this.domainSearchCallback,{busyId:busyId});
    var domainListController = ZaApp.getInstance().getDomainListController();

    //	domainListController._currentQuery = ZaDomain.LOCAL_DOMAIN_QUERY;
    domainListController._currentQuery = "";
    if (!ZaZimbraAdmin.hasGlobalDomainListAccess()) {
        var domainNameList = ZaApp.getInstance()._domainNameList;
        if (!domainNameList || !(domainNameList instanceof Array) || domainNameList.length == 0) {
            ZaApp.getInstance()._domainList = new ZaItemList(ZaDomain);
            return;
        }
        if (domainNameList && domainNameList instanceof Array) {
            for (var i = 0; i < domainNameList.length; i++)
                domainListController._currentQuery += "(" + ZaDomain.A_domainName + "=" + domainNameList[i] + ")";
            if (domainNameList.length > 1)
                domainListController._currentQuery = "(|" + domainListController._currentQuery + ")";
        }
    }

    var searchParams = {
        query : domainListController._currentQuery,
        types : [ ZaSearch.DOMAINS ],
        sortBy : ZaDomain.A_domainName,
        offset : "0",
        sortAscending : "1",
        limit : ZaDomain.MAXSEARCHRESULTS,
        attrs : [ ZaDomain.A_description, ZaDomain.A_domainName, ZaDomain.A_zimbraDomainStatus, ZaItem.A_zimbraId,
                ZaDomain.A_domainType ]
    }
    var resp = ZaSearch.searchDirectory(searchParams);
    this.domainSearchCallback(searchParams, resp);
}

ZaOverviewPanelController.prototype.domainSearchCallback = function(params, resp) {
    try {

        if (!resp) {
            throw (new AjxException(ZaMsg.ERROR_EMPTY_RESPONSE_ARG, AjxException.UNKNOWN,
                    "ZaOverviewPanelController.prototype.domainSearchCallback"));
        }
        ZaSearch.TOO_MANY_RESULTS_FLAG = false;
        var response = resp.Body.SearchDirectoryResponse;
        var list = new ZaItemList(ZaDomain);
        list.loadFromJS(response);
        if (response.more) {
            ZaSettings.HAVE_MORE_DOMAINS = true;
        }
        this.updateDomainList(list);
    } catch (ex) {
        if (ex.code != ZmCsfeException.MAIL_QUERY_PARSE_ERROR) {
            ZaApp.getInstance().getCurrentController()._handleException(ex,
                    "ZaOverviewPanelController.prototype.searchCallback");
        } else {
            ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.queryParseError, ex);
        }
    }
}
ZaOverviewPanelController.prototype.updateSavedSearchTreeList = function() {
    var tree = this._overviewPanel.getFolderTree();
    var savedSearchPath = ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_search, ZaMsg.OVP_savedSearch ]);
    tree.removeAllChild(savedSearchPath);

    try {
        var savedSearchList = ZaApp.getInstance().getSavedSearchList();
        if (savedSearchList && savedSearchList.length) {
            var cnt = savedSearchList.length;
            for (var ix = 0; ix < cnt; ix++) {
                var ti1 = new ZaTreeItemData({
                    parent : savedSearchPath,
                    id : ZaId.getTreeItemId(ZaId.PANEL_APP, "currentSearch", null, ix + 1),
                    text : savedSearchList[ix].name,
                    buildPath : this.getSearchItemPath(),
                    mappingId : ZaZimbraAdmin._SEARCH_HOME_VIEW
                });
                ti1.setData("name", savedSearchList[ix].name);
                ti1.setData("query", savedSearchList[ix].query); //keep the query information here
                tree.addTreeItemData(ti1);
            }

            var searchRootNode = tree.getTreeItemByPath(savedSearchPath);
            if (searchRootNode) {
                // TODO Improve Later
                var showRootNode = tree.getTreeItemDataByPath(savedSearchPath);
                var ti, currentAddNode, forceNode, key;
                for (var i = 0; i < showRootNode.childrenData.size(); i++) {
                    currentAddNode = showRootNode.childrenData.get(i);
                    if (currentAddNode.forceNode !== undefined)
                        forceNode = currentAddNode.forceNode;
                    else
                        forceNode = currentAddNode.childrenData.size() > 0 ? true : false;
                    ti = new ZaTreeItem({
                        parent : searchRootNode,
                        className : "AdminTreeItem",
                        id : currentAddNode.id,
                        forceNode : forceNode
                    });
                    ti.setCount(currentAddNode.count);
                    ti.setText(currentAddNode.text);
                    ti.setImage(currentAddNode.image);
                    ti.setData(ZaOverviewPanelController._TID, currentAddNode.mappingId);
                    ti.setData("dataItem", currentAddNode);
                    for (key in currentAddNode._data) {
                        ti.setData(key, currentAddNode._data[key]);
                    }
                }
                searchRootNode.setExpanded(true);
            }
        }
    } catch (ex) {
        this._handleException(ex, "ZaOverviewPanelController.prototype._buildNewFolderTree", null, false);
    }
    return;
}

ZaOverviewPanelController.prototype.updateDomainList = function(list) {
    return; //new UI no need for this
}

ZaOverviewPanelController.prototype.setCurrentDomain = function(newDomain) {
    this._currentDomain = newDomain;
}

ZaOverviewPanelController.prototype.getCurrentDomain = function() {
    return this._currentDomain;
}

//protected and private methods
/**
 * @method init
 * this method creates and initializes any members of this class
 * This method is called by the contructor after the superconstructor and before the _setView
 **/
ZaOverviewPanelController.prototype._init = function(appCtxt, container) {
    this._overviewPanel = null;
    this._addressesTi = null;
    this._configTi = null;
    this._monitoringTi = null;
    this._cosTi = null;
    this._domainsTi = null;
    this._serversTi = null;
    this.statusTi = null;
    this._savedSearchTi = null;
    this._currentDomain = "";
    this._app = ZaApp.getInstance();

    //TODO:  ZaSettings.DOMAIN_AUTH_WIZ_ENABLED - LDAPAuthWizard enabled for the domain admin
    if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.DOMAIN_LIST_VIEW]
            || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI])
        this._domainsMap = new Object();

    if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.SERVER_LIST_VIEW]
            || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI])
        this._serversMap = new Object();

    if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.SERVER_STATS_VIEW]
            || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI])
        this._serversStatsMap = new Object();

    if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.COS_LIST_VIEW]
            || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI])
        this._cosMap = new Object();

    this._mailqMap = new Object();

    if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.SAVE_SEARCH]
            || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI])
        this._savedSearchMapArr = [];
}

ZaOverviewPanelController.prototype._setView = function() {

    this._overviewPanel = new ZaOverviewPanel({
        parent : this._container,
        className : "OverviewPanel",
        posStyle : DwtControl.ABSOLUTE_STYLE,
        id : ZaId.PANEL_APP
    //ZaId.getOverviewId(ZaId.PANEL_APP)
    });

    this._overviewPanel.setScrollStyle(DwtControl.SCROLL);
    ZaSearch.loadPredefinedSearch();
    this._buildNewFolderTree();
    this._overviewPanel.zShow(true);
}

ZaId.PANEL_HOME = "Home";

ZaOverviewPanelController.prototype._buildNewFolderTree = function() {
    var tree = this._overviewPanel.getFolderTree();
    var parentPath;
    var l = new AjxListener(this, this._overviewTreeListener);
    tree.addSelectionListener(l);
    var mtaList = ZaApp.getInstance().getPostQList().getArray();
    var showMonitor = ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI];
    var showManageAccount = ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI];
    var showAdministration = ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI];
    var showTool = false;//ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI];
    var showHelpCenter = ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI];

    if (!showMonitor) {
        for (var i = 0; i < ZaSettings.OVERVIEW_MONITORING_ITEMS.length; i++) {
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.OVERVIEW_MONITORING_ITEMS[i]]) {
                showMonitor = true;
                break;
            }
        }
    }

    if (!showManageAccount) {
        for (var i = 0; i < ZaSettings.OVERVIEW_MANAGER_ACCOUNT_ITEMS.length; i++) {
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.OVERVIEW_MANAGER_ACCOUNT_ITEMS[i]]) {
                showManageAccount = true;
                break;
            }
        }
    }

    if (!showAdministration) {
        for (var i = 0; i < ZaSettings.OVERVIEW_ADMIN_ITEMS.length; i++) {
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.OVERVIEW_ADMIN_ITEMS[i]]) {
                showAdministration = true;
                break;
            }
        }
    }

    if (!showTool) {
        for (var i = 0; i < ZaSettings.OVERVIEW_TOOLS_ITEMS.length; i++) {
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.OVERVIEW_TOOLS_ITEMS[i]]) {
                showTool = true;
                break;
            }
        }
    }

    if (!showHelpCenter) {
        for (var i = 0; i < ZaSettings.HELP_CENTER_ITEMS.length; i++) {
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.HELP_CENTER_ITEMS[i]]) {
                showHelpCenter = true;
                break;
            }
        }
    }

    //
    // There is no ACL for Download Page in the tool tree items. So tool will be shown here.
    //showTool = true;
    // Home is always added;
    var home = new ZaTreeItemData({
        parent : "",
        id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_HOME, true),
        text : ZaMsg.OVP_home,
        mappingId : ZaZimbraAdmin._HOME_VIEW,
        image : "Home"
    });

    ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._HOME_VIEW] = ZaOverviewPanelController.homeTreeListener;
    tree.setRootData(home);

    // Section Monitor Start
    if (showMonitor) {

        // Add Monitor Home Page
        var mi = new ZaTreeItemData({
            parent : ZaMsg.OVP_home,
            id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_HOME, null, "monHV"),
            text : ZaMsg.OVP_monitor,
            defaultSelectedItem : 1,
            className : "AdminHomeTreeItem",
            mappingId : ZaZimbraAdmin._MONITOR_HOME_VIEW,
            image : "Monitor"
        });
        tree.addTreeItemData(mi);

        // Add Monitor/Status
        if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.GLOBAL_STATUS_VIEW]
                || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
            var ti = new ZaTreeItemData({
                parent : ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_monitor ]),
                id : ZaId.getTreeItemId(ZaId.PANEL_APP, "monHV", null, "overviewStatusHV"),
                text : ZaMsg.OVP_status,
                mappingId : ZaZimbraAdmin._SERVER_STATUS_VIEW
            });
            tree.addTreeItemData(ti);
            ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._SERVER_STATUS_VIEW] = ZaOverviewPanelController.statusTreeListener;
        }
        // Add Monitor/Statistics
        //insert all the statistics view's subs to the /ZaMsg.OVP_home/ZaMsg.OVP_monitor/, and statistics view itself is the container of those subs
        if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.SERVER_STATS_VIEW]
                || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
            this.addSubTabsToParentTreeItem(mi, ZaGlobalStatsView.prototype.getTabChoices(),
                    ZaZimbraAdmin._SERVER_STATISTICS_VIEW, true);
            ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._SERVER_STATISTICS_VIEW] = ZaOverviewPanelController.statsTreeListener;

            ti = new ZaTreeItemData({
                parent : ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_monitor ]),
                id : ZaId.getTreeItemId(ZaId.PANEL_APP, "monHV", null, "serverListForStatisticsHV"),
                text : ZaMsg.OVP_statistics,
                canShowOnRoot : false,
                forceNode : false,
                mappingId : ZaZimbraAdmin._SERVER_LIST_FOR_STATISTICS_VIEW
            });
            tree.addTreeItemData(ti);
            ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._SERVER_LIST_FOR_STATISTICS_VIEW] = ZaOverviewPanelController.serverListForStatisticsTreeListener;
        }
        // Add Monitor/Mail Queue
        if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.MAILQ_VIEW]
                || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
            try {
                if (mtaList && mtaList.length) {
                    var cnt = mtaList.length;
                    var postTi;
                    if (cnt > 1) {
                        postTi = new ZaTreeItemData({
                            parent : ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_monitor ]),
                            id : ZaId.getTreeItemId(ZaId.PANEL_APP, "monHV", null, "postQueueHV"),
                            text : ZaMsg.OVP_postq,
                            mappingId : ZaZimbraAdmin._POSTQ_VIEW
                        });
                        tree.addTreeItemData(postTi);
                        for (var ix = 0; ix < cnt; ix++) {
                            var ti1 = new ZaTreeItemData({
                                parent : ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_monitor, ZaMsg.OVP_postq ]),
                                id : DwtId._makeId(postTi.id, ix + 1),
                                text : mtaList[ix].name,
                                mappingId : ZaZimbraAdmin._POSTQ_BY_SERVER_VIEW
                            });
                            ;
                            ti1.setData(ZaOverviewPanelController._OBJ_ID, mtaList[ix].id);
                            this._mailqMap[mtaList[ix].id] = ti1;
                            tree.addTreeItemData(ti1);
                        }
                        ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._POSTQ_VIEW] = ZaOverviewPanelController.postqTreeListener;
                    } else {
                        postTi = new ZaTreeItemData({
                            parent : ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_monitor ]),
                            id : ZaId.getTreeItemId(ZaId.PANEL_APP, "monHV", null, "postQueueHV"),
                            text : ZaMsg.OVP_postq,
                            mappingId : ZaZimbraAdmin._POSTQ_BY_SERVER_VIEW
                        });
                        postTi.setData(ZaOverviewPanelController._OBJ_ID, mtaList[0].id);
                        tree.addTreeItemData(postTi);
                    }
                    ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._POSTQ_BY_SERVER_VIEW] = ZaOverviewPanelController.postqByServerTreeListener;
                }
            } catch (ex) {
                this._handleException(ex, "ZaOverviewPanelController.prototype._buildFolderTree", null, false);
            }

        }
    }
    // Section Manager Account Start
    if (showManageAccount) {
        var accountMrgCallback = new AjxCallback(this, ZaOverviewPanelController.manageAccountTreeListener);
        var accountMgr = new ZaTreeItemData({
            parent : ZaMsg.OVP_home,
            id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_HOME, null, "manActHV"),
            text : ZaMsg.OVP_manageAccounts,
            className : "AdminHomeTreeItem",
            callback : accountMrgCallback,
            defaultSelectedItem : 1,
            //mappingId: ZaZimbraAdmin._MANAGE_ACCOUNT_HOME_VIEW,
            image : "ManageAccounts"
        });
        //ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._MANAGE_ACCOUNT_HOME_VIEW] = ZaOverviewPanelController.manageAccountTreeListener;
        tree.addTreeItemData(accountMgr);
        if (accountMgr) {
            var refpath = ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_manageAccounts ]);
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ACCOUNT_LIST_VIEW]
                    || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
                var acctitem = new ZaTreeItemData({
                    parent : refpath,
                    id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_HOME, null, "actLstHV"),
                    text : ZaMsg.OVP_accounts,
                    count : 0,
                    canShowOnRoot : false,
                    forceNode : false,
                    mappingId : ZaZimbraAdmin._ACCOUNTS_LIST_VIEW
                });
                acctitem.setData("TreeItemType", ZaItem.ACCOUNT);
                ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._ACCOUNTS_LIST_VIEW] = ZaOverviewPanelController.accountListTreeListener;
                tree.addTreeItemData(acctitem);
            }

            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ALIAS_LIST_VIEW]
                    || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
                var aliaitem = new ZaTreeItemData({
                    parent : refpath,
                    id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_HOME, null, "aliaLstHV"),
                    text : ZaMsg.OVP_aliases,
                    count : 0,
                    canShowOnRoot : false,
                    forceNode : false,
                    mappingId : ZaZimbraAdmin._ALIASES_LIST_VIEW
                });
                aliaitem.setData("TreeItemType", ZaItem.ALIAS);
                tree.addTreeItemData(aliaitem);
                ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._ALIASES_LIST_VIEW] = ZaOverviewPanelController.aliasListTreeListener;
            }

            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.DL_LIST_VIEW]
                    || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
                var dlitem = new ZaTreeItemData({
                    parent : refpath,
                    id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_HOME, null, "dlLstHV"),
                    text : ZaMsg.OVP_distributionLists,
                    count : 0,
                    canShowOnRoot : false,
                    forceNode : false,
                    mappingId : ZaZimbraAdmin._DISTRIBUTION_LISTS_LIST_VIEW
                });
                dlitem.setData("TreeItemType", ZaItem.DL);
                tree.addTreeItemData(dlitem);
                ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._DISTRIBUTION_LISTS_LIST_VIEW] = ZaOverviewPanelController.dlListTreeListener;
            }

            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.RESOURCE_LIST_VIEW]
                    || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
                var resourceitem = new ZaTreeItemData({
                    parent : refpath,
                    id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_HOME, null, "resLstHV"),
                    text : ZaMsg.OVP_resources,
                    count : 0,
                    canShowOnRoot : false,
                    forceNode : false,
                    mappingId : ZaZimbraAdmin._RESOURCE_VIEW
                });
                resourceitem.setData("TreeItemType", ZaItem.RESOURCE);
                tree.addTreeItemData(resourceitem);
                ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._RESOURCE_VIEW] = ZaOverviewPanelController.resourceListTreeListener;
            }
        }
    }

    // Section Configuration Start
    if (showAdministration) {
        ti = this._configure = new ZaTreeItemData({
            parent : ZaMsg.OVP_home,
            id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_HOME, null, "adminHV"),
            text : ZaMsg.OVP_configure,
            defaultSelectedItem : 1,
            className : "AdminHomeTreeItem",
            mappingId : ZaZimbraAdmin._ADMINISTRATION_HOME_VIEW,
            image : "Administration"
        });
        tree.addTreeItemData(ti);

        if (this._configure) {
            parentPath = ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_configure ]);
            if (!ZaZimbraAdmin.hasGlobalCOSSListAccess()) {
                if (!ZaApp.getInstance()._domainNameList) {
                    ZaApp.getInstance()._domainNameList = ZaDomain
                            .getEffectiveDomainList(ZaZimbraAdmin.currentAdminAccount.id);
                }
            }
            if (!ZaZimbraAdmin.hasGlobalDomainListAccess()) {
                if (!ZaApp.getInstance()._cosNameList) {
                    ZaApp.getInstance()._cosNameList = ZaCos.getEffectiveCosList(ZaZimbraAdmin.currentAdminAccount.id);
                }
            }
            // Add Configuration /Cos
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.COS_LIST_VIEW]
                    || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
                ti = new ZaTreeItemData({
                    parent : parentPath,
                    id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_CONFIGURATION, null, ZaId.TREEITEM_COS),
                    text : ZaMsg.OVP_cos,
                    canShowOnRoot : false,
                    forceNode : false,
                    mappingId : ZaZimbraAdmin._COS_LIST_VIEW
                });
                tree.addTreeItemData(ti);
                ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._COS_LIST_VIEW] = ZaOverviewPanelController.cosListTreeListener;
            }

            // Add Configuration /Domain
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.DOMAIN_LIST_VIEW]
                    || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
                ti = new ZaTreeItemData({
                    parent : parentPath,
                    id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_CONFIGURATION, null, ZaId.TREEITEM_DOMAINS),
                    text : ZaMsg.OVP_domains,
                    canShowOnRoot : false,
                    forceNode : false,
                    mappingId : ZaZimbraAdmin._DOMAINS_LIST_VIEW
                });
                tree.addTreeItemData(ti);
                ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._DOMAINS_LIST_VIEW] = ZaOverviewPanelController.domainListTreeListener;
            }

            // Add Configuration /Sever Setting
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.SERVER_LIST_VIEW]
                    || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
                try {
                    var serverList = ZaApp.getInstance().getServerList().getArray();
                    if (serverList && serverList.length) {
                        var cnt = serverList.length;
                        var serverTi;
                        if (cnt > 0) {
                            serverTi = new ZaTreeItemData({
                                parent : ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_configure ]),
                                id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_CONFIGURATION, null, "serverHV"),
                                text : ZaMsg.OVP_servers,
                                canShowOnRoot : false,
                                forceNode : false,
                                mappingId : ZaZimbraAdmin._SERVERS_LIST_VIEW
                            });
                            tree.addTreeItemData(serverTi);
                            ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._SERVERS_LIST_VIEW] = ZaOverviewPanelController.serverListTreeListener;
                        } else { //Keep it for future use. Change "cnt > 0" to "cnt > 1", if there is only one server, will directly goes to the edit view of this server.
                            serverTi = new ZaTreeItemData({
                                parent : ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_configure ]),
                                id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_CONFIGURATION, null, "serverHV"),
                                text : ZaMsg.OVP_serverSettings,
                                image : "Server",
                                mappingId : ZaZimbraAdmin._SERVER_VIEW
                            });
                            serverTi.setData(ZaOverviewPanelController._OBJ_ID, serverList[0].id);
                            tree.addTreeItemData(serverTi);
                            ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._SERVER_VIEW] = ZaOverviewPanelController.serverTreeListener;
                        }
                    }
                } catch (ex) {
                    this._handleException(ex, "ZaOverviewPanelController.prototype._buildNewFolderTree", null, false);
                }
            }

            // Add Configuration / Global Settings
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.GLOBAL_CONFIG_VIEW]
                    || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {

                ti = new ZaTreeItemData({
                    parent : parentPath,
                    id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_CONFIGURATION, null, ZaId.TREEITEM_GSET),
                    text : ZaMsg.OVP_global,
                    forceNode : true,
                    mappingId : ZaZimbraAdmin._GLOBAL_SETTINGS
                });

                ti.addListener(ZaTreeEvent.ONDESTROY, new AjxListener(this, this.saveBeforeExit));

                tree.addTreeItemData(ti);

                ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._GLOBAL_SETTINGS] = ZaOverviewPanelController.globalSettingsTreeListener;
            }

            // Add Configuration /Zimlets
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ZIMLET_LIST_VIEW]
                    || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
                ti = new ZaTreeItemData({
                    parent : parentPath,
                    id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_CONFIGURATION, null, ZaId.TREEITEM_ZIMLETS),
                    text : ZaMsg.OVP_zimlets,
                    canShowOnRoot : false,
                    forceNode : false,
                    mappingId : ZaZimbraAdmin._ZIMLET_LIST_VIEW
                });
                tree.addTreeItemData(ti);
                ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._ZIMLET_LIST_VIEW] = ZaOverviewPanelController.zimletListTreeListener;
            }

            // Add Configuration /Admin Ext
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ADMIN_ZIMLET_LIST_VIEW]
                    || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
                ti = new ZaTreeItemData({
                    parent : parentPath,
                    id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_CONFIGURATION, null, ZaId.TREEITEM_ADMINEXT),
                    text : ZaMsg.OVP_adminZimlets,
                    canShowOnRoot : false,
                    forceNode : false,
                    mappingId : ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW
                });
                tree.addTreeItemData(ti);
                ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW] = ZaOverviewPanelController.adminExtListTreeListener;
            }
        }
    }

    if (showTool) {
        // Section Tool and Migration Start
        ti = new ZaTreeItemData({
            parent : ZaMsg.OVP_home,
            id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_HOME, null, "magHV"),
            text : ZaMsg.OVP_toolMig,
            className : "AdminHomeTreeItem",
            defaultSelectedItem : 1,
            mappingId : ZaZimbraAdmin._MIGRATION_HOME_VIEW,
            image : "ToolsAndMigration"
        });

        tree.addTreeItemData(ti);
        if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.DOWNLOADS_VIEW]
                || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
            ti = new ZaTreeItemData({
                parent : ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_toolMig ]),
                id : ZaId.getTreeItemId(ZaId.PANEL_APP, "magHV", null, "download"),
                text : ZaMsg.goToMigrationWiz,
                mappingId : ZaZimbraAdmin._DOWNLOAD_VIEW
            });
            ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._DOWNLOAD_VIEW] = ZaOverviewPanelController.downloadTreeListener;
            tree.addTreeItemData(ti);
        }
    }

    // Section Search Start
    ti = new ZaTreeItemData({
        parent : ZaMsg.OVP_home,
        id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_HOME, null, "searchHV"),
        text : ZaMsg.OVP_search,
        className : "AdminHomeTreeItem",
        mappingId : ZaZimbraAdmin._SEARCH_HOME_VIEW,
        image : "SearchAll"
    });

    ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._SEARCH_HOME_VIEW] = ZaOverviewPanelController.newSearchListTreeListener;
    tree.addTreeItemData(ti);

    parentPath = ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_search ]);
    var currentSearchTi = new ZaTreeItemData({
        parent : parentPath,
        id : ZaId.getTreeItemId(ZaId.PANEL_APP, "searchHV", null, "currentSearch"),
        text : ZaMsg.OVP_search,
        defaultSelectedItem : 1,
        image : "SearchAll",
        mappingId : ZaZimbraAdmin._SEARCH_HOME_VIEW
    });
    ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._SEARCH_HOME_VIEW] = ZaOverviewPanelController.newSearchListTreeListener;
    tree.addTreeItemData(currentSearchTi);
    this.setSearchItemPath(ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_search, ZaMsg.OVP_search ]));

    ti = new ZaTreeItemData({
        parent : ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_search, ZaMsg.OVP_search ]),
        id : ZaId.getTreeItemId(ZaId.PANEL_APP, "currentSearch", null, "allResult"),
        text : ZaMsg.OVP_allSearchResult,
        mappingId : ZaZimbraAdmin._SEARCH_RESULT_VIEW
    });
    tree.addTreeItemData(ti);
    ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._SEARCH_RESULT_VIEW] = ZaOverviewPanelController.searchResultTreeListener;
    ti = new ZaTreeItemData({
        parent : ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_search, ZaMsg.OVP_search ]),
        id : ZaId.getTreeItemId(ZaId.PANEL_APP, "currentSearch", null, "accountResult"),
        text : ZaMsg.OVP_accountSearchResult,
        mappingId : ZaZimbraAdmin._SEARCH_RESULT_VIEW
    });
    ti.setData("TreeItemType", ZaItem.ACCOUNT);
    tree.addTreeItemData(ti);
    ti = new ZaTreeItemData({
        parent : ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_search, ZaMsg.OVP_search ]),
        id : ZaId.getTreeItemId(ZaId.PANEL_APP, "currentSearch", null, "aliasResult"),
        text : ZaMsg.OVP_aliasSearchResult,
        mappingId : ZaZimbraAdmin._SEARCH_RESULT_VIEW
    });
    ti.setData("TreeItemType", ZaItem.ALIAS);
    tree.addTreeItemData(ti);

    ti = new ZaTreeItemData({
        parent : ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_search, ZaMsg.OVP_search ]),
        id : ZaId.getTreeItemId(ZaId.PANEL_APP, "currentSearch", null, "domainResult"),
        text : ZaMsg.OVP_domainSearchResult,
        mappingId : ZaZimbraAdmin._SEARCH_RESULT_VIEW
    });
    ti.setData("TreeItemType", ZaItem.DOMAIN);
    tree.addTreeItemData(ti);

    ti = new ZaTreeItemData({
        parent : ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_search, ZaMsg.OVP_search ]),
        id : ZaId.getTreeItemId(ZaId.PANEL_APP, "currentSearch", null, "dlResult"),
        text : ZabMsg.OVP_dlSearchResult,
        mappingId : ZaZimbraAdmin._SEARCH_RESULT_VIEW
    });
    ti.setData("TreeItemType", ZaItem.DL);
    tree.addTreeItemData(ti);

    var searchOptionTi = new ZaTreeItemData({
        parent : parentPath,
        canShowOnRoot : false,
        id : ZaId.getTreeItemId(ZaId.PANEL_APP, "searchHV", null, "searchOption"),
        text : ZaMsg.OVP_searchOption
    });
    tree.addTreeItemData(searchOptionTi);
    currentSearchTi.addSilbings(searchOptionTi);
    // Add Option here.
    var optionBasePath = ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_search, ZaMsg.OVP_searchOption ]);
    var searchOptionTreeItem = ZaApp.getInstance().getSearchBuilderController().getFilterTreeItems();
    for (var i = 0; i < searchOptionTreeItem.length; i++) {
        ti = new ZaTreeItemData({
            parent : optionBasePath,
            canShowOnRoot : false,
            id : ZaId.getTreeItemId(ZaId.PANEL_APP, "searchOption", null, i + 1),
            mappingId : ZaZimbraAdmin._SEARCH_FILTER_VIEW,
            buildPath : this.getSearchItemPath(),
            text : searchOptionTreeItem[i].text
        });
        ti.setData("filterType", searchOptionTreeItem[i].filterType);
        tree.addTreeItemData(ti);
    }
    ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._SEARCH_FILTER_VIEW] = ZaSearchBuilderController.searchFilterTreeListener;

    if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.SAVE_SEARCH]
            || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
        var savedSearchTi = new ZaTreeItemData({
            parent : parentPath,
            id : ZaId.getTreeItemId(ZaId.PANEL_APP, "searchHV", null, "savedSearch"),
            canShowOnRoot : false,
            text : ZaMsg.OVP_savedSearch
        });
        tree.addTreeItemData(savedSearchTi);
        currentSearchTi.addSilbings(savedSearchTi);
        try {
            var savedSearchList = ZaApp.getInstance().getSavedSearchList();
            if (savedSearchList && savedSearchList.length) {
                var savedSearchPath = ZaTree
                        .getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_search, ZaMsg.OVP_savedSearch ]);
                this._savedSearchPath = savedSearchPath;
                var cnt = savedSearchList.length;
                for (var ix = 0; ix < cnt; ix++) {
                    var ti1 = new ZaTreeItemData({
                        parent : savedSearchPath,
                        id : ZaId.getTreeItemId(ZaId.PANEL_APP, "currentSearch", null, ix + 1),
                        text : savedSearchList[ix].name,
                        buildPath : this.getSearchItemPath(),
                        mappingId : ZaZimbraAdmin._SEARCH_HOME_VIEW
                    });
                    ti1.setData("name", savedSearchList[ix].name);
                    ti1.setData("query", savedSearchList[ix].query); //keep the query information here
                    tree.addTreeItemData(ti1);
                }
            }
        } catch (ex) {
            this._handleException(ex, "ZaOverviewPanelController.prototype._buildNewFolderTree", null, false);
        }
    }

    if (showHelpCenter) {
        ti = new ZaTreeItemData({
            parent : ZaMsg.OVP_home,
            id : ZaId.getTreeItemId(ZaId.PANEL_APP, ZaId.PANEL_HOME, null, "helpCenter"),
            text : ZaMsg.zimbraHelpCenter,
            className : "AdminHomeTreeItem",
            defaultSelectedItem : 1,
            mappingId : ZaZimbraAdmin._HELP_CENTER_HOME_VIEW,
            image : "Help"
        });
        tree.addTreeItemData(ti);

        ti = new ZaTreeItemData({
            parent : ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.zimbraHelpCenter ]),
            id : ZaId.getTreeItemId(ZaId.PANEL_APP, "helpCenter", null, "helpCenter"),
            text : ZaMsg.zimbraHelpCenter,
            mappingId : ZaZimbraAdmin._HELP_CENTER_VIEW
        });
        ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._HELP_CENTER_VIEW] = ZaZimbraAdmin.prototype._helpListener;
        tree.addTreeItemData(ti);
    }

    //Instrumentation code start
    if (ZaOverviewPanelController.treeModifiers) {
        var methods = ZaOverviewPanelController.treeModifiers;
        var cnt = methods.length;
        for (var i = 0; i < cnt; i++) {
            if (typeof (methods[i]) == "function") {
                methods[i].call(this, tree);
            }
        }
    }
}

ZaOverviewPanelController.prototype._overviewTreeListener = function(ev) {
    try {
        var eventHandler = null;

        var treeItemType = ev.item.getData(ZaOverviewPanelController._TID);
        if (treeItemType != null && ZaOverviewPanelController.overviewTreeListeners[treeItemType]
                && typeof (ZaOverviewPanelController.overviewTreeListeners[treeItemType]) == "function") {
            eventHandler = ZaOverviewPanelController.overviewTreeListeners[treeItemType];
        }
        if (eventHandler) {
            if (ev.detail == DwtTree.ITEM_SELECTED) {
                eventHandler.call(this, ev);

            } else if (ev.detail == DwtTree.ITEM_ACTIONED) {
                if (treeItemType == ZaZimbraAdmin._SEARCH_LIST_VIEW || treeItemType == ZaZimbraAdmin._SEARCH_HOME_VIEW) { //saved search item is actioned.
                    //if(window.console && window.console.log) console.debug("Saved Search tree Item is actioned.") ;
                    eventHandler.call(this, ev);
                }
            }
        }
    } catch (ex) {
        if (!ex) {
            ex = new ZmCsfeException("Unknown error", AjxException.UNKNOWN_ERROR,
                    "ZaOverviewPanelController.prototype._overviewTreeListener", "Unknown error")
        }
        this._handleException(ex, "ZaOverviewPanelController.prototype._overviewTreeListener", null, false);
    }
}

ZaOverviewPanelController.prototype.setSearchItemPath = function(path) {
    this._searchItemPath = path;
}

ZaOverviewPanelController.prototype.getSearchItemPath = function(path) {
    return this._searchItemPath;
}

/* default tree listeners */
ZaOverviewPanelController.homeTreeListener = function(ev) {
    if (ZaApp.getInstance().getCurrentController()) {
        ZaApp.getInstance().getCurrentController().switchToNextView(ZaApp.getInstance().getHomeViewController(),
                ZaHomeController.prototype.show, null);
    } else {
        ZaApp.getInstance().getHomeViewController().show();
    }

    this._modifySearchMenuButton();

}

ZaOverviewPanelController.cosTreeListener = function(ev) {
    var cos = ZaApp.getInstance().getCosList(true).getItemById(ev.item.getData(ZaOverviewPanelController._OBJ_ID));
    if (ZaApp.getInstance().getCurrentController()) {
        ZaApp.getInstance().getCurrentController().switchToNextView(ZaApp.getInstance().getCosController(),
                ZaCosController.prototype.show, cos);
    } else {
        ZaApp.getInstance().getCosController().show(cos);
    }
    var parentPath = ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_configure, ZaMsg.OVP_cos ]);
    var skipHistory = ev.item.getData("skipHistory");
    ZaZimbraAdmin.getInstance().getOverviewPanelController().addObjectItem(parentPath, cos.name, null,
            (skipHistory == "TRUE"), false, cos);
}

ZaOverviewPanelController.domainTreeListener = function(ev) {
    var domain = new ZaDomain();
    domain.id = ev.item.getData(ZaOverviewPanelController._OBJ_ID);
    domain.attrs[ZaItem.A_zimbraId] = ev.item.getData(ZaOverviewPanelController._OBJ_ID);
    domain.load("id", domain.id);

    var isLocal = (domain.attrs[ZaDomain.A_domainType] == ZaDomain.domainTypes.local);
    var isAlias = (domain.attrs[ZaDomain.A_domainType] == ZaDomain.domainTypes.alias);

    if (ZaApp.getInstance().getCurrentController()) {
        if (isLocal) {
            ZaApp.getInstance().getCurrentController().switchToNextView(ZaApp.getInstance().getDomainController(),
                    ZaDomainController.prototype.show, domain);
        } else if (isAlias) {
            ZaApp.getInstance().getDomainAliasWizard(true).editDomainAlias(domain, false);
        }
    } else {
        if (isLocal) {
            ZaApp.getInstance().getDomainController().show(domain);
        } else if (isAlias) {
            ZaApp.getInstance().getDomainAliasWizard(true).editDomainAlias(domain, false);
        }
    }

    var parentPath = ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_configure, ZaMsg.OVP_domains ]);
    var skipHistory = ev.item.getData("skipHistory");
    ZaZimbraAdmin.getInstance().getOverviewPanelController().addObjectItem(parentPath, domain.name, null,
            (skipHistory == "TRUE"), false, domain);
}

ZaOverviewPanelController.serverTreeListener = function(ev) {
    var server = new ZaServer();
    server.id = ev.item.getData(ZaOverviewPanelController._OBJ_ID);
    server.attrs[ZaItem.A_zimbraId] = ev.item.getData(ZaOverviewPanelController._OBJ_ID);
    //	DBG.println(AjxDebug.DBG1, "ZaOverviewPanelController.serverTreeListener called");
    if (ZaApp.getInstance().getCurrentController()) {
        ZaApp.getInstance().getCurrentController().switchToNextView(ZaApp.getInstance().getServerController(),
                ZaServerController.prototype.show, server);
    } else {
        ZaApp.getInstance().getServerController()
                .show(
                        ZaApp.getInstance().getServerList(true).getItemById(
                                ev.item.getData(ZaOverviewPanelController._OBJ_ID)));
    }
}

ZaOverviewPanelController.statsByServerTabTreeListener = function(ev) {
    //only apply to new UI

    var viewId = ev.item.parent.getData("viewId");
    var curController = ZaApp.getInstance().getServerStatsController(viewId);

    ZaOverviewPanelController.switchToSubTabForNonXFormView(curController, ev.item);
}

ZaOverviewPanelController.statsByServerTreeListener = function(ev) {
    var currentServer = new ZaServer();

    var viewId = ev.item.getData("viewId");
    ZaApp.getInstance().getAppViewMgr().pushView(viewId);
    var currentView = ZaApp.getInstance().getAppViewMgr().getViewContentById(viewId);
    var currentController = ZaApp.getInstance().getControllerById(viewId);
    var currentObject = currentView._containedObject;
    var serverId = currentObject.id;
    currentServer.id = currentServer.attrs[ZaItem.A_zimbraId] = serverId;
    currentServer.load("id", serverId, false, true);

    currentController.show(currentServer, true);

}

ZaOverviewPanelController.statusTreeListener = function(ev) {
    if (ZaApp.getInstance().getCurrentController()) {
        ZaApp.getInstance().getCurrentController().switchToNextView(ZaApp.getInstance().getStatusViewController(),
                ZaStatusViewController.prototype.show, null);
    } else {
        ZaApp.getInstance().getStatusViewController().show();
    }
}

ZaOverviewPanelController.statsTreeListener = function(ev) {
    var curController = ZaApp.getInstance().getCurrentController();
    var statsController = ZaApp.getInstance().getGlobalStatsController();
    if (curController) {
        curController.switchToNextView(statsController, ZaGlobalStatsController.prototype.show, null);
    } else {
        statsController.show();
    }
    ZaOverviewPanelController.switchToSubTabForNonXFormView(statsController, ev.item);
}

ZaOverviewPanelController.switchToSubTabForNonXFormView = function(controllerOfView, treeItem) {

    var stepValue = treeItem.getData("tabValue");
    var view = ZaApp.getInstance().getAppViewMgr().getViewContentById(controllerOfView.getContentViewId());
    view.switchToTab(stepValue);
    //controllerOfView._contentView.switchToTab();

}

ZaOverviewPanelController.serverListForStatisticsTreeListener = function(ev) {
    //this list only shows in new UI
    var curController = ZaApp.getInstance().getCurrentController();
    var serverStatsListController = ZaApp.getInstance().getServerStatsListController();
    var allServersList = ZaServer.getAll([ ZaServer.A_description, ZaServer.A_ServiceHostname, ZaItem.A_zimbraId ]);

    if (curController) {
        curController.switchToNextView(serverStatsListController, ZaServerStatsListController.prototype.show,
                allServersList);
    } else {
        serverStatsListController.show(allServersList);
    }
}

ZaOverviewPanelController.serverListTreeListener = function(ev) {
    if (ZaApp.getInstance().getCurrentController()) {
        ZaApp.getInstance().getCurrentController().switchToNextView(ZaApp.getInstance().getServerListController(),
                ZaServerListController.prototype.show,
                ZaServer.getAll([ ZaServer.A_description, ZaServer.A_ServiceHostname, ZaItem.A_zimbraId ]));
    } else {
        ZaApp.getInstance().getServerListController().show(
                ZaServer.getAll([ ZaServer.A_description, ZaServer.A_ServiceHostname, ZaItem.A_zimbraId ]));
    }
}

ZaOverviewPanelController.globalSettingsTreeListener = function(ev) {
    if (ZaApp.getInstance().getCurrentController()) {
        ZaApp.getInstance().getCurrentController().switchToNextView(
                ZaApp.getInstance().getGlobalConfigViewController(), ZaGlobalConfigViewController.prototype.show,
                ZaApp.getInstance().getGlobalConfig());
    } else {
        ZaApp.getInstance().getGlobalConfigViewController().show(ZaApp.getInstance().getGlobalConfig());
    }
    var parentPath = ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_configure ]);
    var name = ev.item.getText();
    this.addObjectItem(parentPath, name, undefined, true, true, ev.item, undefined, true);
}

ZaOverviewPanelController.domainListTreeListener = function(ev) {
    var domainListController = ZaApp.getInstance().getDomainListController();

    //if we do not have access to domains we will only get our own domain in response anyway, so no need to add a query
    domainListController._currentQuery = "";
    var extquery = null;
    var actionType = ev.item.getData(ZaOverviewPanelController._TID);
    if (actionType == ZaZimbraAdmin._COS_DOMAIN_LIST_VIEW) {
        var cos = ev.item.getData("cosItem");
        extquery = "(" + ZaDomain.A_domainDefaultCOSId + "=" + cos.id + ")";
        if (cos.name == "default") {
            extquery = "(|(!(" + ZaDomain.A_domainDefaultCOSId + "=*))" + extquery + ")";
        } else if (cos.name == "defaultExternal") {
            extquery = "(|(!(" + ZaDomain.A_domainDefaultExternalUserCOSId + "=*))" + extquery + ")";
        }
    } else if (actionType == ZaZimbraAdmin._DOMAIN_ALIAS_LIST_VIEW) {
        var domain = ev.item.getData("domainItem");
        extquery = "(" + ZaDomain.A_zimbraDomainAliasTargetId + "=" + domain.id + ")";
    }

    if (extquery)
        domainListController._currentQuery = extquery;

    if (!ZaZimbraAdmin.isGlobalAdmin()) {
        var domainNameList = ZaApp.getInstance()._domainNameList;
        if (domainNameList && domainNameList instanceof Array && domainNameList.length > 0) {
            for (var i = 0; i < domainNameList.length; i++)
                domainListController._currentQuery += "(" + ZaDomain.A_domainName + "=" + domainNameList[i] + ")";
            if (domainNameList.length > 1)
                domainListController._currentQuery = "(|" + domainListController._currentQuery + ")";
        }
    }

    if (ZaApp.getInstance().getCurrentController()) {
        ZaApp.getInstance().getCurrentController().switchToNextView(domainListController,
                ZaDomainListController.prototype.show, true);
    } else {
        domainListController.show(true);
    }

    this._modifySearchMenuButton(ZaItem.DOMAIN);
}

ZaOverviewPanelController.aliasListTreeListener = function(ev) {
    if ((ev.item.getData(ZaOverviewPanelController._TID) == ZaZimbraAdmin._ACCOUNT_ALIAS_LIST_VIEW)
            || ev.item.getData(ZaOverviewPanelController._TID) == ZaZimbraAdmin._DL_ALIAS_LIST_VIEW) {
        var targetId = ev.item.getData("aliasTargetId");
        var extquery = "(" + ZaAlias.A_AliasTargetId + "=" + targetId + ")";
        this._showAccountsView(ZaItem.ALIAS, ev, extquery);
    } else
        this._showAccountsView(ZaItem.ALIAS, ev);

    this._modifySearchMenuButton(ZaItem.ALIAS);
}

ZaOverviewPanelController.dlListTreeListener = function(ev) {
    var dls = ev.item.getData(ZaAccount.A2_memberOf);
    if (dls) {
        var direct_dls = dls[ZaAccount.A2_directMemberList];
        var indirect_dls = dls[ZaAccount.A2_indirectMemberList];

        var extquery = "";
        var id = "";
        for (var i = 0; i < (direct_dls.length + indirect_dls.length); i++) {
            if (i < direct_dls.length) {
                id = direct_dls[i].id;
            } else {
                id = indirect_dls[i - direct_dls.length].id;
            }
            extquery += "(" + ZaItem.A_zimbraId + "=" + id + ")";
        }
        extquery = "(|" + extquery + ")";
        this._showAccountsView(ZaItem.DL, ev, extquery);
    } else
        this._showAccountsView(ZaItem.DL, ev);
    this._modifySearchMenuButton(ZaItem.DL);
}

ZaOverviewPanelController.accountListTreeListener = function(ev) {
    if (ev.item.getData(ZaOverviewPanelController._TID) == ZaZimbraAdmin._COS_ACCOUNT_LIST_VIEW) {
        var cos = ev.item.getData("cosItem");
        var extquery = "(" + ZaAccount.A_COSId + "=" + cos.id + ")";
        if (cos.name == "default") {
            extquery = "(|(&(!(" + ZaAccount.A_COSId + "=*))(!(" + ZaAccount.A_zimbraIsExternalVirtualAccount
                    + "=TRUE)))" + extquery + ")";
        } else if (cos.name == "defaultExternal") {
            extquery = "(|(&(!(" + ZaAccount.A_COSId + "=*))(" + ZaAccount.A_zimbraIsExternalVirtualAccount + "=TRUE))"
                    + extquery + ")";
        }
        this._showAccountsView(ZaItem.ACCOUNT, ev, extquery);
    } else
        this._showAccountsView(ZaItem.ACCOUNT, ev);
    this._modifySearchMenuButton(ZaItem.ACCOUNT);
}

ZaOverviewPanelController.resourceListTreeListener = function(ev) {
    this._showAccountsView(ZaItem.RESOURCE, ev);
    this._modifySearchMenuButton(ZaItem.RESOURCE);
}

ZaOverviewPanelController.searchListTreeListener = function(ev) {
    var searchField = ZaApp.getInstance().getSearchListController()._searchField;
    var name = ev.item.getData("name");
    var query = ev.item.getData("query");
    if (ev.detail == DwtTree.ITEM_SELECTED) {
        //if(window.console && window.console.log) console.debug("Run the saved search ...") ;
        if (query)
            searchField.selectSavedSearch(name, query);
        else
            searchField.invokeCallback(); // Use the value in the current search fields;
    } else if (ev.detail == DwtTree.ITEM_ACTIONED) {
        searchField._currentSavedSearch = {
            name : name,
            query : query
        };
        searchField.getSavedSearchActionMenu().popup(0, ev.docX, ev.docY);
    }
}

ZaOverviewPanelController.newSearchListTreeListener = function(ev) {
    var tree = this.getOverviewPanel().getFolderTree();
    var currentPath = tree.getABPath(ev.item.getData("dataItem"));
    if (currentPath == ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_search ])) {
        var searchPath = this.getSearchItemPath();
        tree.setSelectionByPath(searchPath, true, true);
    }
    var slController = ZaApp.getInstance().getSearchListController();
    var searchField = slController._searchField;
    var name = ev.item.getData("name");
    var query = ev.item.getData("query");
    if (ev.detail == DwtTree.ITEM_SELECTED) {
        //if(window.console && window.console.log) console.debug("Run the saved search ...") ;
        if (query) {
            /*
            TODO:
            Improve it in D3
            var searchText = ZaMsg.OVP_search + " : " + name;
            var newPath = tree.renameTreeItem(this.getSearchItemPath(), searchText);
            this.setSearchItemPath(newPath);
             */
            searchField.setCurrentSavedSearch({
                name : name,
                query : query
            });
            searchField.selectSavedSearch(name, query);
        } else {
            searchField.setCurrentSavedSearch({});
            var searchParams = searchField.getCurrentSearchQuery();
            var displayName = searchField.getSearchFieldElement().value;
            if (searchField.searchSelectedType && searchField.searchSelectedType.length > 0) {
                displayName += " In " + searchField.searchSelectedType;
            }

            var params = {
                type : 1,
                unique : true,
                disableForSearch : false,
                query : searchParams.query,
                searchType : searchParams.types,
                displayName : displayName
            };
            if (!slController._uiContainer)
                slController._show();

            slController._uiContainer.removeAllBubbles(true);
            slController._uiContainer.addBubble(params);
        }
    }
    if (ev.detail == DwtTree.ITEM_ACTIONED && query) {
        searchField._currentSavedSearch = {
            name : name,
            query : query
        };
        searchField.getSavedSearchActionMenu().popup(0, ev.docX, ev.docY);
    }
}

ZaOverviewPanelController.searchResultTreeListener = function(ev) {
    if (ev.detail == DwtTree.ITEM_SELECTED) {
        var itemType = ev.item.getData("TreeItemType");
        var slController = ZaApp.getInstance().getSearchListController();
        slController.reset();
        var searchField = slController._searchField;
        var contentView = slController._contentView;
        var skipNotify = false;
        if (itemType == ZaItem.ACCOUNT) {
            if (searchField._containedObject[ZaSearch.A_fAccounts] == "FALSE") {
                contentView.set();
                skipNotify = true;
            } else
                searchField.accFilterSelectedFromResults();
        } else if (itemType == ZaItem.ALIAS) {
            if (searchField._containedObject[ZaSearch.A_fAliases] == "FALSE") {
                contentView.set();
                skipNotify = true;
            } else {
                searchField.aliasFilterSelectedFromResults();
            }
        } else if (itemType == ZaItem.DOMAIN) {
            if (searchField._containedObject[ZaSearch.A_fDomains] == "FALSE") {
                contentView.set();
                skipNotify = true;
            } else
                searchField.domainFilterSelectedFromResults();
        } else if (itemType == ZaItem.DL) {
            if (searchField._containedObject[ZaSearch.A_fdistributionlists] == "FALSE") {
                contentView.set();
                skipNotify = true;
            } else
                searchField.dlFilterSelectedFromResults();
        } else { //all results
            //searchField.allFilterSelected();
        }
        searchField.setCurrentSavedSearch({});
        //searchField.invokeCallback(); // Use the value in the current search fields;
        var searchParams = searchField.getCurrentSearchQuery();
        var displayName = searchField.getSearchFieldElement().value;
        if (searchField.searchSelectedType && searchField.searchSelectedType.length > 0) {
            displayName += " In " + searchField.searchSelectedType;
            if (itemType && itemType.length > 0)
                displayName += " & " + itemType;
        } else if (itemType && itemType.length > 0)
            displayName += " In " + itemType;

        var params = {
            type : 1,
            unique : true,
            disableForSearch : skipNotify,
            query : searchParams.query,
            searchType : searchParams.types,
            displayName : displayName
        };
        if (!slController._uiContainer)
            slController._show();

        slController._uiContainer.removeAllBubbles(true);
        slController._uiContainer.addBubble(params, skipNotify);

        searchField.restoreSearchFilter(); //restore containedObject
    }
}

ZaOverviewPanelController.downloadTreeListener = function(ev) {
    if (ZaApp.getInstance().getCurrentController()) {
        ZaApp.getInstance().getCurrentController().switchToNextView(ZaApp.getInstance().getMigrationWizController(),
                ZaMigrationWizController.prototype.show, null);
    } else {
        ZaApp.getInstance().getMigrationWizController().show();
    }
}

ZaOverviewPanelController.zimletListTreeListener = function(ev) {
    ZaZimlet.getAll(ZaZimlet.EXCLUDE_EXTENSIONS, new AjxCallback(ZaOverviewPanelController._zimletListTreeListener));
};

ZaOverviewPanelController._zimletListTreeListener = function(zimlets) {
    if (ZaApp.getInstance().getCurrentController()) {
        ZaApp.getInstance().getCurrentController().switchToNextView(ZaApp.getInstance().getZimletListController(),
                ZaZimletListController.prototype.show, zimlets);
    } else {
        ZaApp.getInstance().getZimletListController().show(zimlets);
    }
}

ZaOverviewPanelController.adminExtListTreeListener = function(ev) {
    ZaZimlet.getAll(ZaZimlet.EXCLUDE_MAIL, new AjxCallback(ZaOverviewPanelController._adminExtListTreeListener));
};

ZaOverviewPanelController._adminExtListTreeListener = function(zimlets) {
    if (ZaApp.getInstance().getCurrentController()) {
        ZaApp.getInstance().getCurrentController().switchToNextView(ZaApp.getInstance().getAdminExtListController(),
                ZaAdminExtListController.prototype.show, zimlets);
    } else {
        ZaApp.getInstance().getAdminExtListController().show(zimlets);
    }
}

ZaOverviewPanelController.cosListTreeListener = function(ev) {
    if (ZaApp.getInstance().getCurrentController()) {
        ZaApp.getInstance().getCurrentController().switchToNextView(ZaApp.getInstance().getCosListController(),
                ZaCosListController.prototype.show, true);
    } else {
        ZaApp.getInstance().getCosListController().show(true);
    }
    this._modifySearchMenuButton(ZaItem.COS);
}

ZaOverviewPanelController.postqTreeListener = function(ev) {
    if (ZaApp.getInstance().getCurrentController()) {
        ZaApp.getInstance().getCurrentController().switchToNextView(ZaApp.getInstance().getMTAListController(),
                ZaMTAListController.prototype.show, ZaMTA.getAll());
    } else {
        ZaApp.getInstance().getMTAListController().show(ZaServer.getAll());
    }
}

ZaOverviewPanelController.postqByServerTreeListener = function(ev) {
    var currentServer = ZaApp.getInstance().getPostQList().getItemById(
            ev.item.getData(ZaOverviewPanelController._OBJ_ID));
    if (ZaApp.getInstance().getCurrentController()) {
        ZaApp.getInstance().getCurrentController().switchToNextView(ZaApp.getInstance().getMTAController(),
                ZaMTAController.prototype.show, currentServer);
    } else {
        ZaApp.getInstance().getMTAController().show(currentServer);
    }
}

ZaOverviewPanelController.accountStatCallback = function(accountStat) {
    var childitems = this._overviewPanel.getFolderTree().getCurrentRootItem().getItems();

    for (var i = 0; i < childitems.length; i++) {
        var child = childitems[i];
        var attr = child.getData("TreeItemType");
        child.setCount(accountStat[attr]);
    }
}

ZaOverviewPanelController.manageAccountTreeListener = function(ev) {
    var types = [];
    var childitems = this._overviewPanel.getFolderTree().getCurrentRootItem().getItems();

    for (var i = 0; i < childitems.length; i++) {
        var child = childitems[i];
        if (child) {
            var type = child.getData("TreeItemType");
            if (!AjxUtil.isEmpty(type)) {
                types.push(type);
            }
        }
    }

    var callback = new AjxCallback(this, ZaOverviewPanelController.accountStatCallback);
    ZaSearch.getObjectCounts(types, callback);
}

ZaOverviewPanelController.accountListInDomainTreeListener = function(ev) {
    var domain = ev.item.getData("domainItem");
    ZaDomain.searchAccountsInDomain(domain.name);
}

ZaOverviewPanelController.memberListInDLTreeListener = function(ev) {
    var dl = ev.item.getData("dlItem");
    var members = dl[ZaDistributionList.A2_memberList];
    var query = "";
    if (members.length > 0) {
        for (var i = 0; i < members.length; i++) {
            query += "(" + ZaAccount.A_mail + "=" + members[i][ZaAccount.A_name] + ")";
        }
        if (members.length > 1)
            query = "(|" + query + ")";

        var types = [ ZaSearch.ACCOUNTS, ZaSearch.DLS, ZaSearch.ALIASES ];

        var controller = ZaApp.getInstance().getSearchListController();
        var busyId = Dwt.getNextId();
        var callback = new AjxCallback(controller, controller.searchCallback, {
            limit : controller.RESULTSPERPAGE,
            show : true,
            busyId : busyId
        });

        controller.fetchAttrs = ZaSearch.standardAttributes;

        var searchParams = {
            query : query,
            types : types,
            attrs : controller.fetchAttrs,
            callback : callback,
            controller : controller,
            showBusy : true,
            busyId : busyId,
            busyMsg : ZaMsg.BUSY_SEARCHING,
            skipCallbackIfCancelled : false
        }
        controller.setQuery(query);
        controller.setSearchTypes(types);
        ZaSearch.searchDirectory(searchParams);
    }

}

ZaOverviewPanelController.prototype.refreshAccountTree = function() {
    var targetPath = ZaMsg.OVP_home + ZaTree.SEPERATOR + ZaMsg.OVP_manageAccounts;
    var tree = this.getOverviewPanel().getFolderTree();
    var rootItem = tree.getCurrentRootItem();
    var rootPath = tree.getABPath(rootItem.getData("dataItem"));
    if (targetPath == rootPath) {
        ZaOverviewPanelController.manageAccountTreeListener.call(this);
    }
}

ZaOverviewPanelController.prototype.refreshSearchTree = function(ev) {
    var details = ev.getDetails();
    if (!details) {
        return;
    }

    var targetPath = ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_search, ZaMsg.OVP_search ]);
    var tree = this.getOverviewPanel().getFolderTree();
    var rootItem = tree.getCurrentRootItem();
    var rootPath = tree.getABPath(rootItem.getData("dataItem"));
    if (targetPath != rootPath) {
        return;
    }

    var childItems = rootItem.getItems();
    var currentSelected = tree.getCurrentSelectedItems().get(0);
    var count;
    var attr;

    if (currentSelected)
        attr = currentSelected.getData("TreeItemType");
    if (attr) {
        count = details.searchTotal;
        count = count || 0;
        currentSelected.setCount(count);
        return;
    }

    for (var i = 0; i < childItems.length; i++) {
        var child = childItems[i];
        attr = child.getData("TreeItemType");

        if (attr) {
            count = details[attr];
            count = count || 0;
            if (details.more)
                count = count + "+";
        } else {
            count = details.searchTotal || 0;
        }
        child.setCount(count);

    }
}

ZaOverviewPanelController.manageRelatedTreeListener = function(patharr, relatedZaItem) {
    var tree = this.getOverviewPanel().getFolderTree();
    if (patharr.length == 0)
        return "";
    var targetParentPath = patharr.join(ZaTree.SEPERATOR);
    var rootItem = tree.getCurrentRootItem();
    var rootPath = tree.getABPath(rootItem.getData("dataItem"));
    if (rootPath == targetParentPath) {
        var parentItemData = tree.getTreeItemDataByPath(targetParentPath);
        if (parentItemData) {
            parentItemData.addRelatedObject(this.getRelatedList(targetParentPath, relatedZaItem));
        }
        ZaOverviewPanelController.updateRelatedTreeListener.call(this, patharr);
    }
}

ZaOverviewPanelController.updateRelatedTreeListener = function(patharr) {
    var tree = this.getOverviewPanel().getFolderTree();
    if (patharr.length == 0)
        return "";
    var targetParentPath = patharr.join(ZaTree.SEPERATOR);
    var relatePath = ZaTree.SEPERATOR + ZaMsg.OVP_related;
    var showRootNode = tree.getTreeItemDataByPath(targetParentPath);
    tree.buildTree(showRootNode); //update menuitem

    var selectedItems = tree.getCurrentSelectedItems().getArray();
    var oldselectedItem = selectedItems ? selectedItems[0] : null;
    var selectedItemPath = oldselectedItem ? tree.getABPath(oldselectedItem.getData("dataItem")) : null;
    var newselectedItem = tree.getTreeItemByPath(selectedItemPath) || tree.getSelectedItem(showRootNode);
    var skipNotify = false;
    if (selectedItemPath.indexOf(targetParentPath + relatePath) == -1)
        skipNotify = true;
    tree.setSelection(newselectedItem, skipNotify);
}

ZaOverviewPanelController.prototype.refreshRelatedTree = function(items, skipCos, skipDomain, skipDL) {
    try {
        var itemArray = AjxUtil.toArray(items);
        var tempHashDomain = {};
        var tempHashCos = {};
        var tempHashDL = {};
        var tempHashAccount = {};
        var cosId, cosName, cos, domainName, domain, defaultCos, defaultCosName, dl, dlName, dlId;

        for (var i = 0; i < itemArray.length; i++) {
            var item = itemArray[i];

            if (AjxUtil.isEmpty(item))
                continue;

            if (item.type == ZaItem.ACCOUNT) {
                if (!skipCos) {
                    cos = ZaAccount.prototype.getCurrentCos.call(item);
                    cosName = cos[ZaAccount.A_name];
                    if (typeof (tempHashCos[cosName]) == "undefined") {
                        tempHashCos[cosName] = 1;
                        ZaOverviewPanelController.manageRelatedTreeListener.call(this, [ ZaMsg.OVP_home,
                                ZaMsg.OVP_configure, ZaMsg.OVP_cos, cosName ], cos);
                    }

                    if (typeof (tempHashCos["default"]) == "undefined") {
                        tempHashCos["default"] = 1;
                        defaultCos = ZaCos.getCosByName("default");
                        ZaOverviewPanelController.manageRelatedTreeListener.call(this, [ ZaMsg.OVP_home,
                                ZaMsg.OVP_configure, ZaMsg.OVP_cos, "default" ], defaultCos);
                    }

                    if (typeof (tempHashCos["defaultExternal"]) == "undefined") {
                        tempHashCos["defaultExternal"] = 1;
                        defaultCos = ZaCos.getCosByName("defaultExternal");
                        ZaOverviewPanelController.manageRelatedTreeListener.call(this, [ ZaMsg.OVP_home,
                                ZaMsg.OVP_configure, ZaMsg.OVP_cos, "defaultExternal" ], defaultCos);
                    }
                }//cos

            }

            if (item.type == ZaItem.ALIAS) {
                if (!skipDL) {
                    var targetObj = item.targetObj;
                    var targetName = targetObj[ZaAccount.A_name];
                    if (targetObj.type == ZaItem.ACCOUNT) {
                        if (typeof (tempHashAccount[targetName]) == "undefined") {
                            tempHashAccount[targetName] = 1;
                            targetObj.load();
                            ZaOverviewPanelController.manageRelatedTreeListener.call(this, [ ZaMsg.OVP_home,
                                    ZaMsg.OVP_manageAccounts, ZaMsg.OVP_accounts, targetName ], targetObj);
                        }
                    }
                    if (targetObj.type == ZaItem.DL) {
                        if (typeof (tempHashDL[targetName]) == "undefined") {
                            tempHashDL[targetName] = 1;
                            targetObj.load();
                            ZaOverviewPanelController.manageRelatedTreeListener.call(this, [ ZaMsg.OVP_home,
                                    ZaMsg.OVP_manageAccounts, ZaMsg.OVP_distributionLists, targetName ], targetObj);
                        }
                    }
                }
            }

            if (item.type == ZaItem.ACCOUNT) {
                if (!skipDL) {
                    if (!AjxUtil.isEmpty(item[ZaAccount.A2_memberOf])
                            && !AjxUtil.isEmpty(item[ZaAccount.A2_memberOf][ZaAccount.A2_directMemberList])) {
                        var member = item[ZaAccount.A2_memberOf][ZaAccount.A2_directMemberList];
                        for (var i = 0; i < member.length; i++) {
                            dlName = member[i][ZaAccount.A_name]
                            if (typeof (tempHashDL[dlName]) == "undefined") {
                                tempHashDL[dlName] = 1;
                                dl = new ZaDistributionList(member[i]["id"], dlName);
                                dl.load();
                                ZaOverviewPanelController.manageRelatedTreeListener.call(this, [ ZaMsg.OVP_home,
                                        ZaMsg.OVP_manageAccounts, ZaMsg.OVP_distributionLists, dlName ], dl);
                            }
                        }
                    }
                }
            }

            if (item.type == ZaItem.DL) {
                if (!skipDL) {
                    if (item[ZaDistributionList.A2_numMembers] > 0) {
                        ZaOverviewPanelController.manageRelatedTreeListener.call(this, [ ZaMsg.OVP_home,
                                ZaMsg.OVP_manageAccounts, ZaMsg.OVP_distributionLists, item.name ], item);
                    }
                }
            }

            if (!skipDomain
                    && (item.type == ZaItem.ACCOUNT || item.type == ZaItem.ALIAS || item.type == ZaItem.DL || item.type == ZaItem.RESOURCE)) { //domain
                domainName = ZaAccount.getDomain(item[ZaAccount.A_name]);
                if (typeof (tempHashDomain[domainName]) == "undefined") {
                    domain = ZaDomain.getDomainByName(domainName);
                    tempHashDomain[domainName] = 1;
                    ZaOverviewPanelController.manageRelatedTreeListener.call(this, [ ZaMsg.OVP_home,
                            ZaMsg.OVP_configure, ZaMsg.OVP_domains, domainName ], domain);
                }
            }

            if (item.type == ZaItem.DOMAIN) {
                if (!skipCos && item.attrs[ZaDomain.A_domainType] == ZaDomain.domainTypes.local) {
                    cosId = item.attrs[ZaDomain.A_domainDefaultCOSId];
                    cos = ZaCos.getCosById(cosId);
                    if (!cos) {
                        cos = ZaCos.getCosByName("default");
                    }
                    cosName = cos[ZaAccount.A_name];

                    if (typeof (tempHashCos[cosName]) == "undefined") {
                        tempHashCos[cosName] = 1;
                        ZaOverviewPanelController.manageRelatedTreeListener.call(this, [ ZaMsg.OVP_home,
                                ZaMsg.OVP_configure, ZaMsg.OVP_cos, cosName ], cos);
                    }

                    if (typeof (tempHashCos["default"]) == "undefined") {//because defaultCos search all domains
                        tempHashCos["default"] = 1;
                        defaultCos = ZaCos.getCosByName("default");
                        ZaOverviewPanelController.manageRelatedTreeListener.call(this, [ ZaMsg.OVP_home,
                                ZaMsg.OVP_configure, ZaMsg.OVP_cos, "default" ], defaultCos);
                    }
                } else if (!skipDomain && item.attrs[ZaDomain.A_domainType] == ZaDomain.domainTypes.alias) {
                    domainName = item.attrs[ZaDomain.A_zimbraMailCatchAllForwardingAddress];
                    domainName = domainName.replace("@", "");
                    if (typeof (tempHashDomain[domainName]) == "undefined") {
                        domain = ZaDomain.getDomainByName(domainName);
                        ZaOverviewPanelController.manageRelatedTreeListener.call(this, [ ZaMsg.OVP_home,
                                ZaMsg.OVP_configure, ZaMsg.OVP_domains, domainName ], domain);
                    }

                }
            }
        }
    } catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex,
                "ZaOverviewPanelController.prototype.refreshRelatedTree");
    }

}

ZaOverviewPanelController.prototype.refreshRelatedTreeByEdit = function(newItem) {
    try {

        if (AjxUtil.isEmpty(newItem))
            return;

        if (newItem.type == ZaItem.DL) {
            ZaOverviewPanelController.manageRelatedTreeListener.call(this, [ ZaMsg.OVP_home, ZaMsg.OVP_manageAccounts,
                    ZaMsg.OVP_distributionLists, newItem[ZaAccount.A_name] ], newItem);
        }

        if (newItem.type == ZaItem.DOMAIN && newItem.attrs[ZaDomain.A_domainType] == ZaDomain.domainTypes.local
                && newItem.createGalAccount) {
            ZaOverviewPanelController.manageRelatedTreeListener.call(this, [ ZaMsg.OVP_home, ZaMsg.OVP_configure,
                    ZaMsg.OVP_domains, newItem[ZaAccount.A_name] ], newItem);
        }

    } catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex,
                "ZaOverviewPanelController.prototype.refreshRelatedTreeByEdit");
    }
}

ZaOverviewPanelController.prototype._modifySearchMenuButton = function(itemType) {

    var searchListController = ZaApp.getInstance().getSearchListController();
    if (!searchListController || !searchListController._searchField) {
        return;
    }

    if (itemType) {
        switch (itemType) {
        case ZaItem.ACCOUNT:
            searchListController._searchField.accFilterSelected();
            break;
        case ZaItem.ALIAS:
            searchListController._searchField.aliasFilterSelected();
            break;
        case ZaItem.DL:
            searchListController._searchField.dlFilterSelected();
            break;
        case ZaItem.RESOURCE:
            searchListController._searchField.resFilterSelected();
            break;
        case ZaItem.DOMAIN:
            searchListController._searchField.domainFilterSelected();
            break;
        case ZaItem.COS:
            searchListController._searchField.cosFilterSelected();
            break;
        }
    } else {
        searchListController._searchField.allFilterSelected();
    }

}

ZaOverviewPanelController.prototype.addAccountItem = function(item, currentView) {
    var type = item.type;
    var relativePath = ZaMsg.OVP_accounts;
    if (type == ZaItem.ACCOUNT) {
        relativePath = ZaMsg.OVP_accounts;
    } else if (type == ZaItem.DL) {
        relativePath = ZaMsg.OVP_distributionLists;
    } else if (type == ZaItem.RESOURCE) {
        relativePath = ZaMsg.OVP_resources;
    } else if (type == ZaItem.ALIAS) {
        if (item.attrs[ZaAlias.A_targetType] == ZaAlias.TARGET_TYPE_ACCOUNT) {
            relativePath = ZaMsg.OVP_accounts;
        } else if (item.attrs[ZaAlias.A_targetType] == ZaAlias.TARGET_TYPE_DL) {
            relativePath = ZaMsg.OVP_distributionLists;
        } else if (item.attrs[ZaAlias.A_targetType] == ZaAlias.TARGET_TYPE_RESOURCE) {
            relativePath = ZaMsg.OVP_resources;
        }
    }

    var parentPath = ZaTree.getPathByArray([ ZaMsg.OVP_home, ZaMsg.OVP_manageAccounts, relativePath ]);
    var name = item.name;
    this.addObjectItem(parentPath, name, currentView, false, false, item, undefined, true);
}

ZaOverviewPanelController.prototype.saveBeforeExit = function(ev) {
    var currentController = ZaApp.getInstance().getCurrentController();
    if (currentController instanceof ZaXFormViewController) {
        currentController.closeButtonListener(undefined, undefined, undefined, undefined, undefined, ev.newPath);
        return false;
    }
}

ZaOverviewPanelController.prototype.addObjectItem = function(parentPath, name, currentView, skipHistory, skipNotify,
        relatedZaItem, mappingId2handlerMap, isSaveBeforeExit) {
    if (!currentView) {
        currentView = ZaApp.getInstance().getAppViewMgr().getCurrentViewContent();
        if (!currentView || !currentView.getTabChoices || !currentView.getTabChoices())
            return false;
    }

    var namePath = parentPath + ZaTree.SEPERATOR + name;
    var tree = this.getOverviewPanel().getFolderTree();
    var mappingId, handler, map;

    var needToAddNameNode = false;
    var needToAddTabNodes = false;
    var nameDataItem = tree.getTreeItemDataByPath(namePath);

    if (!nameDataItem) {
        needToAddNameNode = needToAddTabNodes = true;
    } else if (nameDataItem.getChildrenNum() <= 0) {
        needToAddTabNodes = true;
    }

    var historyObject = new ZaHistory(namePath, name, relatedZaItem ? relatedZaItem.type : null);
    ZaZimbraAdmin.getInstance().getHistoryMgr().addHistoryObj(historyObject);

    if (needToAddNameNode) {
        var parentDataItem = tree.getTreeItemDataByPath(parentPath);
        var index = parentDataItem.getChildrenNum();
        var parentId = parentDataItem.id;
        if (!mappingId2handlerMap || !(map = mappingId2handlerMap["mainNode"])) {
            //default main node(this name node) mapping relationship
            mappingId = ZaZimbraAdmin._XFORM_VIEW;
            handler = ZaOverviewPanelController.xformTreeListener;
        } else {
            mappingId = map["mappingId"];
            handler = map["handler"];
        }

        nameDataItem = new ZaTreeItemData({
            parent : parentPath,
            mappingId : mappingId,
            id : DwtId._makeId(parentId, index + 1),
            image : (relatedZaItem ? this.getIconByType(relatedZaItem.type) : null),
            defaultSelectedItem : 1,
            text : name
        });
        tree.addTreeItemData(nameDataItem);
        nameDataItem.addRelatedObject(this.getRelatedList(parentPath, relatedZaItem));
        nameDataItem.addRecentObject(this.getRecentList());
        if (isSaveBeforeExit) {
            nameDataItem.addListener(ZaTreeEvent.ONDESTROY, new AjxListener(this, this.saveBeforeExit));
        }
        ZaOverviewPanelController.overviewTreeListeners[mappingId] = handler;
    } else { //updaet relatedObject count
        nameDataItem.addRelatedObject(this.getRelatedList(parentPath, relatedZaItem));
        nameDataItem.addRecentObject(this.getRecentList());
    }

    // if (!nameDataItem.getData("viewId")) {  some view are not cached, so need to update viewId
    var currentViewId = ZaApp.getInstance().getAppViewMgr().getCurrentView();
    nameDataItem.setData("viewId", currentViewId);
    //}

    if (needToAddTabNodes) {
        if (!mappingId2handlerMap || !(map = mappingId2handlerMap["tabNodes"])) {
            //default sub tab nodes mapping relationship
            mappingId = ZaZimbraAdmin._XFORM_TAB_VIEW;
            handler = ZaOverviewPanelController.xformTabTreeListener;
        } else {
            mappingId = map["mappingId"];
            handler = map["handler"];
        }
        this.addSubTabsToParentTreeItem(nameDataItem, currentView.getTabChoices(), mappingId);
        ZaOverviewPanelController.overviewTreeListeners[mappingId] = handler;
    }

    tree.setSelectionByPath(namePath, !skipHistory, skipNotify);
    return true;
}

ZaOverviewPanelController.prototype.addSubTabsToParentTreeItem = function(parentItem, subTabs, mappingIdForAllSubTabs,
        isShowHistory) {
    var subTabItem, subTabInfo, subTabItemId;
    var tree = this.getOverviewPanel().getFolderTree();
    var parentPath = tree.getABPath(parentItem);
    var isShow = isShowHistory ? true : false;
    if (subTabs && subTabs.length > 0) {
        parentItem.setData("firstTab", subTabs[0].value);
        for (var i = 0; i < subTabs.length; i++) {
            subTabInfo = subTabs[i];
            subTabItemId = DwtId._makeId(parentItem.id, i + 1);
            subTabItem = new ZaTreeItemData({
                parent : parentPath,
                id : subTabItemId,
                isShowHistory : isShow,
                text : subTabInfo.label,
                mappingId : mappingIdForAllSubTabs
            });
            subTabItem.setData("tabValue", subTabInfo.value);
            tree.addTreeItemData(subTabItem);
        }
    }
}

ZaOverviewPanelController.xformTabTreeListener = function(ev) {
    var viewId = ev.item.parent.getData("viewId");
    var stepValue = ev.item.getData("tabValue");
    if (AjxUtil.isEmpty(viewId) || AjxUtil.isEmpty(stepValue)) {
        return;
    }

    ZaApp.getInstance().getAppViewMgr().pushView(viewId);
    var currentView = ZaApp.getInstance().getAppViewMgr().getViewContentById(viewId);
    if (AjxUtil.isEmpty(currentView)) {
        return;
    }

    if (ev.refresh && !AjxUtil.isEmpty(currentView._localXForm)) {
        var currentObject = currentView._localXForm.getInstance();
        if (currentObject && currentObject.refresh) {
            currentObject.refresh(false, true);
            currentView.setObject(currentObject);
        }
    }
    if (!AjxUtil.isEmpty(currentView._localXForm)) { //some views of zimlets are created by dwt
        currentView._localXForm.setInstanceValue(stepValue, ZaModel.currentTab);
    }

}

ZaOverviewPanelController.xformTreeListener = function(ev) {
    var viewId = ev.item.getData("viewId");
    var stepValue = ev.item.getData("firstTab");
    if (AjxUtil.isEmpty(viewId) || AjxUtil.isEmpty(stepValue)) {
        return;
    }

    ZaApp.getInstance().getAppViewMgr().pushView(viewId);
    var currentView = ZaApp.getInstance().getAppViewMgr().getViewContentById(viewId);
    if (AjxUtil.isEmpty(currentView)) {
        return;
    }

    if (ev.refresh && !AjxUtil.isEmpty(currentView._localXForm)) {
        var currentObject = currentView._localXForm.getInstance();
        if (currentObject && currentObject.refresh) {
            currentObject.refresh(false, true);
            currentView.setObject(currentObject);
        }
    }

    if (!AjxUtil.isEmpty(currentView._localXForm)) { //some views of zimlets are created by dwt
        currentView._localXForm.setInstanceValue(stepValue, ZaModel.currentTab);
    }
}

ZaOverviewPanelController.prototype.getRelatedList = function(parentPath, item) {
    if (!item || !item.getRelatedList)
        return [];

    return item.getRelatedList(parentPath);
}

ZaOverviewPanelController.prototype.getRecentList = function() {
    var historyMgr = ZaZimbraAdmin.getInstance().getHistoryMgr();
    var objList = historyMgr.getAllHistoryObj().getArray();
    var Tis = [];
    var ti = null;
    var image = null;
    for (var i = objList.length - 1; i > -1; i--) {

        image = this.getIconByType(objList[i].type);
        ti = new ZaTreeItemData({
            text : objList[i].displayName,
            type : 1,
            image : image,
            isShowHistory : false,
            forceNode : (i + 1 != objList.length),
            path : objList[i].path
        });
        Tis.push(ti);
    }
    return Tis;
}

ZaOverviewPanelController.prototype.getIconByType = function(type) {
    var image = null;
    if (type == ZaItem.ACCOUNT)
        image = "Account";
    else if (type == ZaItem.COS)
        image = "COS";
    else if (type == ZaItem.DOMAIN)
        image = "Domain";
    else if (type == ZaItem.RESOURCE)
        image = "Resource";
    else if (type == ZaItem.DL)
        image = "DistributionList";
    else if (type == ZaItem.ALIAS)
        image = "AccountAlias";
    else if (type == ZaItem.SERVER)
        image = "Server";
    else if (type == ZaItem.RIGHT)
        image = "RightObject";

    return image;
}
}
if (AjxPackage.define("zimbraAdmin.common.ZaOperation")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaOperation
* @contructor
* simplified version of ZmOperation
* This class encapsulates the properties of an action that can be taken on some item: image, caption, description, AjxListener
* @param caption string
* @param tt string
* @param img string path to image
* @param lsnr AjxListener
**/

ZaOperation = function(id, caption, tooltip, imgId, disImgId, lsnr, type, menuOpList, className, labelId) {
	this.id = id;
	this.caption = caption;
	this.tt = tooltip;
	this.listener = lsnr;
	this.imageId = imgId;
	this.disImageId = disImgId;
	this.type = (type == null)? ZaOperation.TYPE_BUTTON: type;
	this.menuOpList = menuOpList;
	this.className = className;	
	this.labelId = labelId;
	this.enabled = true;
	this.visible = true;
}

ZaOperation.prototype.toString = 
function() {
		return "ZaOperation";
}

ZaOperation.prototype.setEnabled = function (enabled) {
    this.enabled = enabled ;
}

ZaOperation.prototype.setVisible = function (visible) {
    this.visible = visible ;
}

ZaOperation.duplicate = function (oldInstance) {
    var id = oldInstance.id;
	var caption = oldInstance.caption;
	var tooltip = oldInstance.tt ;
	var lsnr = oldInstance.listener ;
	var imgId = oldInstance.imageId ;
	var disImgId = oldInstance.disImageId ;
	var type = oldInstance.type;
	var menuOpList = oldInstance.menuOpList;
	var className = oldInstance.className;
	var labelId = oldInstance.labelId;
    
    var newOp = new ZaOperation (id, caption, tooltip, imgId, disImgId, lsnr, type, menuOpList, className, labelId);

    return newOp ;
}

// types
ZaOperation.TYPE_BUTTON = 1;
ZaOperation.TYPE_MENU = 2;
ZA_OP_INDEX = 0;

// Operations
ZaOperation.NONE = ++ZA_OP_INDEX;		// no operations or menu items
ZaOperation.SEP = ++ZA_OP_INDEX;		// separator
ZaOperation.NEW = ++ZA_OP_INDEX;
ZaOperation.DELETE = ++ZA_OP_INDEX;
ZaOperation.REFRESH = ++ZA_OP_INDEX;
ZaOperation.EDIT = ++ZA_OP_INDEX;
ZaOperation.CHNG_PWD = ++ZA_OP_INDEX;
ZaOperation.CLOSE = ++ZA_OP_INDEX;
ZaOperation.SAVE = ++ZA_OP_INDEX;
ZaOperation.NEW_WIZARD = ++ZA_OP_INDEX;
ZaOperation.NEW_ALIAS = ++ZA_OP_INDEX;
ZaOperation.NEW_DL = ++ZA_OP_INDEX;
ZaOperation.NEW_RESOURCE = ++ZA_OP_INDEX;
ZaOperation.NEW_ADMIN = ++ZA_OP_INDEX;
ZaOperation.PAGE_FORWARD = ++ZA_OP_INDEX;
ZaOperation.PAGE_BACK = ++ZA_OP_INDEX;
ZaOperation.DUPLICATE = ++ZA_OP_INDEX;
ZaOperation.GAL_WIZARD = ++ZA_OP_INDEX;
ZaOperation.AUTH_WIZARD =++ZA_OP_INDEX;
ZaOperation.AUTOPROV_WIZARD =++ZA_OP_INDEX;
ZaOperation.VIEW_MAIL =++ZA_OP_INDEX;
ZaOperation.MOVE_ALIAS = ++ZA_OP_INDEX;
ZaOperation.NEW_MENU = ++ZA_OP_INDEX;
ZaOperation.HELP = ++ZA_OP_INDEX;
ZaOperation.REINDEX_MAILBOX = ++ZA_OP_INDEX;
ZaOperation.LABEL = ++ZA_OP_INDEX;
ZaOperation.VIEW = ++ZA_OP_INDEX;
ZaOperation.SEARCH_ACCOUNTS = ++ZA_OP_INDEX;
ZaOperation.SEARCH_ALIASES = ++ZA_OP_INDEX;
ZaOperation.SEARCH_DLS = ++ZA_OP_INDEX;
ZaOperation.SEARCH_DOMAINS = ++ZA_OP_INDEX;
ZaOperation.SEARCH_RESOURCES = ++ZA_OP_INDEX;
ZaOperation.SEARCH_COSES = ++ZA_OP_INDEX;
ZaOperation.SEARCH_ALL = ++ZA_OP_INDEX;
ZaOperation.FLUSH = ++ZA_OP_INDEX;
ZaOperation.HOLD = ++ZA_OP_INDEX;
ZaOperation.REQUEUE = ++ZA_OP_INDEX;
ZaOperation.RELEASE = ++ZA_OP_INDEX;
ZaOperation.INIT_NOTEBOOK = ++ZA_OP_INDEX;
ZaOperation.CHECK_MX_RECORD = ++ZA_OP_INDEX;
ZaOperation.SEARCH_RESULT_COUNT = ++ZA_OP_INDEX;
ZaOperation.SEARCH_BY_ADDESS_TYPE = ++ZA_OP_INDEX;
ZaOperation.SEARCH_BY_DOMAIN = ++ZA_OP_INDEX;
ZaOperation.SEARCH_BY_SERVER = ++ZA_OP_INDEX;
ZaOperation.SEARCH_BY_BASIC =  ++ZA_OP_INDEX;
ZaOperation.SEARCH_BY_REMOVE_ALL =  ++ZA_OP_INDEX;
ZaOperation.SEARCH_BY_ADVANCED = ++ZA_OP_INDEX;
ZaOperation.SEARCH_BY_COS = ++ZA_OP_INDEX;
ZaOperation.DEPLOY_ZIMLET =  ++ZA_OP_INDEX;
//ZaOperation.ENABLE_ZIMLET =  ++ZA_OP_INDEX;
//ZaOperation.DISABLE_ZIMLET =  ++ZA_OP_INDEX;
ZaOperation.CLOSE_TAB = ++ZA_OP_INDEX;
ZaOperation.CLOSE_OTHER_TAB = ++ZA_OP_INDEX;
ZaOperation.CLOSE_ALL_TAB = ++ZA_OP_INDEX;
ZaOperation.TOGGLE = ++ZA_OP_INDEX;
ZaOperation.DOWNLOAD_SERVER_CONFIG = ++ZA_OP_INDEX;
ZaOperation.DOWNLOAD_GLOBAL_CONFIG = ++ZA_OP_INDEX;
ZaOperation.VIEW_DOMAIN_ACCOUNTS = ++ZA_OP_INDEX;
ZaOperation.FLUSH_CACHE = ++ZA_OP_INDEX;
ZaOperation.MORE_ACTIONS = ++ZA_OP_INDEX;  
ZaOperation.EXPIRE_SESSION = ++ZA_OP_INDEX;
ZaOperation.ADD_DOMAIN_ALIAS = ++ZA_OP_INDEX;
ZaOperation.INSTALL_DOMAIN_CERT = ++ZA_OP_INDEX;
ZaOperation.LOGOFF = ++ZA_OP_INDEX;
// For Appliance
ZaOperation.LEFT_BRACKET = ++ZA_OP_INDEX;
ZaOperation.RIGHT_BRACKET = ++ZA_OP_INDEX;


var ZaOpList = [
	"UNKNOWN",
	"NONE",
	"SEP",
	"NEW",
	"DELETE",
	"REFRESH",
	"EDIT",
	"CHNG_PWD",
	"CLOSE",
	"SAVE",
	"NEW_ACCT",
	"NEW_ALIAS",
	"NEW_DL",
	"NEW_RESOURCE",
	"NEW_ADMIN",
	"PAGE_FORWARD",
	"PAGE_BACK",
	"DUPLICATE",
	"GAL_WIZARD",
	"AUTH_WIZARD",
    "AUTOPROV_WIZARD",
	"VIEW_MAIL",
	"MOVE_ALIAS",
	"NEW_MENU",
	"HELP",
	"REINDEX_MAILBOX",
	"LABEL",
	"VIEW",
	"SEARCH_ACCOUNTS",
	"SEARCH_ALIASES",
	"SEARCH_DLS",
	"SEARCH_DOMAINS",
	"SEARCH_RESOURCES",
	"SEARCH_COSES",
	"SEARCH_ALL",
	"FLUSH",
	"HOLD",
	"REQUEUE",
	"RELEASE",
	"INIT_NOTEBOOK",
	"CHECK_MX_RECORD",
	"SEARCH_RESULT_COUNT",
	"SEARCH_BY_ADDESS_TYPE",
	"SEARCH_BY_DOMAIN",
	"SEARCH_BY_SERVER",
	"SEARCH_BY_BASIC" ,
	"SEARCH_BY_REMOVE_ALL" ,
	"SEARCH_BY_ADVANCED",
	"SEARCH_BY_COS",
	"DEPLOY_ZIMLET" ,
	"CLOSE_TAB",
	"CLOSE_OTHER_TAB",
	"CLOSE_ALL_TAB",
	"TOGGLE",
	"DOWNLOAD_SERVER_CONFIG",
	"DOWNLOAD_GLOBAL_CONFIG",
	"VIEW_DOMAIN_ACCOUNTS",
	"FLUSH_CACHE",
	"MORE_ACTIONS",
	"EXPIRE_SESSION",
	"ADD_DOMAIN_ALIAS",
	"INSTALL_DOMAIN_CERT",
    "LOGOFF",
    "LEFT_BRACKET",
    "RIGHT_BRACKET"
	/* other operation name */
];


ZaOperation.getStringName =
function(index) {
	if(index < 0 || index >= ZaOpList.length) {
		return "UNKNOWN_" +index;
	}
	return ZaOpList[index];
}

}
if (AjxPackage.define("zimbraAdmin.home.controller.ZaHomeController")) {
/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 8/26/11
 * Time: 3:47 AM
 * To change this template use File | Settings | File Templates.
 */
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaHomeController
* @contructor ZaHomeController
* @param appCtxt
* @param container
* @author Ming Zhang
**/
ZaHomeController = function(appCtxt, container) {
	ZaXFormViewController.call(this, appCtxt, container,"ZaHomeController");
	this._UICreated = false;
	this.objType = ZaEvent.S_HOME;
	this.tabConstructor = ZaHomeXFormView;
}

ZaHomeController.prototype = new ZaXFormViewController();
ZaHomeController.prototype.constructor = ZaHomeController;

ZaHomeController.prototype.toString = function () {
	return "ZaHomeController";
};

ZaApp.prototype.getHomeViewController =
function(viewId) {
	if(!viewId)
		viewId = ZaZimbraAdmin._HOME_VIEW;

	if (viewId && this._controllers[viewId] != null) {
		return this._controllers[viewId];
	}else{
		var c  = this._controllers[viewId] = new ZaHomeController(this._appCtxt, this._container, this);
		return c ;
	}
}

ZaHomeController.prototype.show =
function(entry) {
    if (!this._UICreated)  {
        this._contentView = this._view = new this.tabConstructor(this._container, entry);
        var elements = new Object();
        elements[ZaAppViewMgr.C_APP_CONTENT] = this._view;

        ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements) ;
        ZaApp.getInstance()._controllers[this.getContentViewId()] = this ;
        this._UICreated = true;
    }

    entry = new ZaHome();
    entry.load("", "", true);
    entry[ZaModel.currentTab] = "1";
    entry[ZaModel.currentStep] = 1;
    this._currentObject = entry;
    this._view.setObject(entry);
    ZaApp.getInstance().pushView(this.getContentViewId()) ;
    entry.schedulePostLoading();
}

ZaHomeController.prototype.setInstanceValue =
function (value, ref) {
    var xformView = this._view._localXForm;
    xformView.setInstanceValue (value, ref);
}

ZaHomeController.prototype.showWarningPanel =
function() {
    var xformView = this._view._localXForm;
    if (xformView.getInstanceValue(ZaHome.A2_showWarningPanel) != true) {
        xformView.setInstanceValue(true, ZaHome.A2_showWarningPanel);
    }
}

ZaHomeController.prototype.getAppBarAction =
function () {
    if (AjxUtil.isEmpty(this._appbarOperation)) {
    	this._appbarOperation[ZaOperation.HELP]=new ZaOperation(ZaOperation.HELP,ZaMsg.TBB_Help, ZaMsg.TBB_Help_tt, "Help", "Help", new AjxListener(this, this._helpButtonListener));
    }

    return this._appbarOperation;
}

ZaHomeController.prototype.getAppBarOrder =
function () {
    if (AjxUtil.isEmpty(this._appbarOrder)) {
    	this._appbarOrder.push(ZaOperation.HELP);
    }

    return this._appbarOrder;
}
}
if (AjxPackage.define("zimbraAdmin.accounts.controller.ZaAccountListController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaAccountListController This is a singleton class that controls all the user interaction with the list of ZaAccount objects
* @param appCtxt
* @param container
* @param app
* @extends ZaController
* @author Roland Schemers
* @author Greg Solovyev
**/
ZaAccountListController = function(appCtxt, container) {
	ZaListViewController.call(this, appCtxt, container, "ZaAccountListController");
    //Account operations
   	this._popupOperations = new Object();			
   	
	this._currentPageNum = 1;
	this._currentQuery = null;
	this._currentSortField = ZaAccount.A_uid;
	this._currentSortOrder = "1";
	this.searchTypes = [ZaSearch.ALIASES,ZaSearch.DLS,ZaSearch.ACCOUNTS, ZaSearch.RESOURCES];
	this.pages = new Object();
	this._searchPanel = null;
	this._searchField = null;                                          
	this._defaultType = ZaItem.ACCOUNT;
	this._helpURL = ZaAccountListController.helpURL;
	this._helpButtonText = ZaMsg.helpManageAccounts;
	this.objType = ZaEvent.S_ACCOUNT;	
	this.fetchAttrs = ZaSearch.standardAttributes;
}

ZaAccountListController.prototype = new ZaListViewController();
ZaAccountListController.helpURL = ZaUtil.HELP_URL;
ZaController.initPopupMenuMethods["ZaAccountListController"] = new Array();
ZaController.changeActionsStateMethods["ZaAccountListController"] = new Array();


/**
* Shows the view
* @param {Boolean}		refresh				bypass the cache
*/
ZaAccountListController.prototype.show = function (doPush, refresh) {
	if (doPush && !refresh) {
		var list = this._contentView && this._contentView.getList();
		if (list) {
			return this._show(list, false, false, this._contentView.scrollHasMore);
		}
	}
	var busyId = Dwt.getNextId();
	var callback = new AjxCallback(this, this.searchCallback, {limit:this.RESULTSPERPAGE,CONS:null,show:doPush,busyId:busyId});

	// hide the system account
	this._currentQuery = "(&" + this._currentQuery + "(!("+ ZaAccount.A_zimbraIsSystemAccount +"=TRUE)))"	
	var searchParams = {
        query: this._currentQuery,
        types: this.searchTypes,
        sortBy: this._currentSortField,
        offset: this.RESULTSPERPAGE * (this._currentPageNum - 1),
        sortAscending: this._currentSortOrder,
        limit: this.RESULTSPERPAGE,
        maxResults: 0,
        attrs: [
            this.fetchAttrs,
            ZaAccount.A_zimbraIsDelegatedAdminAccount,
            ZaAccount.A_zimbraIsAdminAccount,
            ZaAccount.A_zimbraIsSystemResource,
            ZaAccount.A_zimbraIsSystemAccount,
            ZaAccount.A_zimbraIsExternalVirtualAccount
        ].join(),
        callback: callback,
        controller: this,
        showBusy: true,
        busyId: busyId,
        busyMsg: ZaMsg.BUSY_SEARCHING,
        skipCallbackIfCancelled: false
    };

	this.scrollSearchParams = {
        query: this._currentQuery,
        types: this.searchTypes,
        sortBy: this._currentSortField,
        sortAscending: this._currentSortOrder,
        attrs: [
            this.fetchAttrs,
            ZaAccount.A_zimbraIsDelegatedAdminAccount,
            ZaAccount.A_zimbraIsAdminAccount,
            ZaAccount.A_zimbraIsSystemResource,
            ZaAccount.A_zimbraIsSystemAccount,
            ZaAccount.A_zimbraIsExternalVirtualAccount
        ].join(),
        controller: this,
        showBusy: true,
        busyMsg: ZaMsg.BUSY_SEARCHING,
        skipCallbackIfCancelled: false
    };

    ZaSearch.searchDirectory(searchParams);
}

ZaAccountListController.prototype._show = 
function (list, openInNewTab, openInSearchTab, hasMore) {
	this._updateUI(list, openInNewTab, openInSearchTab, hasMore);
    this.updatePopupMenu();
	ZaApp.getInstance().pushView(this.getContentViewId (), openInNewTab, openInSearchTab);
    return;
}


ZaAccountListController.prototype.setDefaultType = function (type) {
	// set the default type,
	this._defaultType = type;
	if(type==ZaItem.ACCOUNT) {
		this._helpURL = ZaUtil.HELP_URL;
	} else if(type == ZaItem.ALIAS) {
        this._helpURL = ZaUtil.HELP_URL;
	} else if(type == ZaItem.DL) {
        this._helpURL = ZaUtil.HELP_URL;
	} else if(type == ZaItem.RESOURCE) {
        this._helpURL = ZaUtil.HELP_URL;
	}
	
};

ZaAccountListController.prototype.updatePopupMenu =
function () {

	var type = this._defaultType ;
    if (type == ZaItem.ACCOUNT && this.showNewAccount) {
        this._popupOperations[ZaOperation.NEW_MENU] = new ZaOperation(ZaOperation.NEW_MENU, ZaMsg.TBB_New, ZaMsg.ACTBB_New_tt, "NewAccount", "AccountDis",new AjxListener(this, ZaAccountListController.prototype._newAccountListener));
    } else if (type == ZaItem.ALIAS && this.showNewAlias) {
        this._popupOperations[ZaOperation.NEW_MENU] = new ZaOperation(ZaOperation.NEW_MENU, ZaMsg.TBB_New, ZaMsg.ALTBB_New_tt, "AccountAlias", "AccountDis",new AjxListener(this, ZaAccountListController.prototype._newAliasListener));
    } else if (type == ZaItem.DL && this.showNewDL) {
        this._popupOperations[ZaOperation.NEW_MENU] = new ZaOperation(ZaOperation.NEW_MENU, ZaMsg.TBB_New, ZaMsg.ALTBB_New_tt, "DistributionList", "DistributionListDis",new AjxListener(this, ZaAccountListController.prototype._newDistributionListListener));
    } else if (type == ZaItem.RESOURCE && this.showNewCalRes){
        this._popupOperations[ZaOperation.NEW_MENU] = new ZaOperation(ZaOperation.NEW_MENU, ZaMsg.TBB_New, ZaMsg.ALTBB_New_tt, "Resource", "ResourceDis",new AjxListener(this, ZaAccountListController.prototype._newResourceListener));
    }
}

ZaAccountListController.prototype.handleRemoval =
function(ev) {
    ZaZimbraAdmin.getInstance().getOverviewPanelController().refreshAccountTree();
    ZaListViewController.prototype.handleRemoval.call(this,ev);
}

ZaAccountListController.prototype.handleCreation =
function(ev) {
    ZaZimbraAdmin.getInstance().getOverviewPanelController().refreshAccountTree();
    ZaListViewController.prototype.handleCreation.call(this,ev);
}

ZaAccountListController.prototype.set = 
function(accountList) {
	this.show(accountList);
}

ZaAccountListController.prototype.setPageNum = 
function (pgnum) {
	this._currentPageNum = Number(pgnum);
}

ZaAccountListController.prototype.getPageNum = 
function () {
	return this._currentPageNum;
}

ZaAccountListController.prototype.getTotalPages = 
function () {
	return this.numPages;
}

ZaAccountListController.prototype.setFetchAttrs = 
function (fetchAttrs) {
	this.fetchAttrs = fetchAttrs;
}

ZaAccountListController.prototype.getFetchAttrs = 
function () {
	return this.fetchAttrs;
}

ZaAccountListController.prototype.setQuery = 
function (query) {
	this._currentQuery = query;
}

ZaAccountListController.prototype.getQuery = 
function () {
	return this._currentQuery;
}

ZaAccountListController.prototype.setSearchTypes = 
function (searchTypes) {
	this.searchTypes = searchTypes;
}

ZaAccountListController.prototype.getSearchTypes = 
function () {
	return this.searchTypes;
}

ZaAccountListController.prototype.setSortOrder = 
function (sortOrder) {
	if(sortOrder===true)
		this._currentSortOrder = "1";
	else if(sortOrder===false)
		this._currentSortOrder = "0";
	else
		this._currentSortOrder = sortOrder;
}

ZaAccountListController.prototype.getSortOrder = 
function () {
	return this._currentSortOrder;
}

ZaAccountListController.prototype.setSortField = 
function (sortField) {
	this._currentSortField = sortField;
}

ZaAccountListController.prototype.getSortField = 
function () {
	return this._currentSortField;
}



ZaAccountListController.initPopupMenuMethod =
function () {
	this.showNewAccount = false;
	this.showNewDL = false;
	this.showNewCalRes = false;
	this.showNewAlias = false;
	if(ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE') {
		this.showNewAccount = true;
		this.showNewDL = true;
		this.showNewCalRes = true;
		this.showNewAlias = true;
	} else {
		this.showNewAccount = ZaZimbraAdmin.canCreateAccount();   
				
		this.showNewCalRes = ZaZimbraAdmin.canCreateCalRes;
		
		this.showNewDL = ZaZimbraAdmin.canCreateDL();
		
		this.showNewAlias = ZaZimbraAdmin.canCreateAlias();
	}
	
    //push it firstly to make it as the first one
	if(this.showNewAccount && this._defaultType == ZaItem.ACCOUNT) {
		this._popupOperations[ZaOperation.NEW_MENU] = new ZaOperation(ZaOperation.NEW_MENU, ZaMsg.TBB_New, ZaMsg.ACTBB_New_tt, "NewAccount", "AccountDis",new AjxListener(this, ZaAccountListController.prototype._newAccountListener));;
	} else if(this.showNewCalRes && this._defaultType == ZaItem.RESOURCE) {
		this._popupOperations[ZaOperation.NEW_MENU] = new ZaOperation(ZaOperation.NEW_MENU, ZaMsg.TBB_New, ZaMsg.ALTBB_New_tt, "Resource", "ResourceDis",new AjxListener(this, ZaAccountListController.prototype._newResourceListener));
	} else if(this.showNewDL && this._defaultType == ZaItem.DL) {
		this._popupOperations[ZaOperation.NEW_MENU] = new ZaOperation(ZaOperation.NEW_MENU, ZaMsg.TBB_New, ZaMsg.ALTBB_New_tt, "DistributionList", "DistributionListDis",new AjxListener(this, ZaAccountListController.prototype._newDistributionListListener));
	} else if(this.showNewAlias && this._defaultType == ZaItem.ALIAS) {
		this._popupOperations[ZaOperation.NEW_MENU] = new ZaOperation(ZaOperation.NEW_MENU, ZaMsg.TBB_New, ZaMsg.ALTBB_New_tt, "AccountAlias", "AccountDis",new AjxListener(this, ZaAccountListController.prototype._newAliasListener));
	}
	if(this.showNewAccount || this.showNewCalRes || this.showNewDL || this.showNewAlias) {
		this._popupOrder.push(ZaOperation.NEW_MENU);
	}

    this._popupOperations[ZaOperation.EDIT] = new ZaOperation(ZaOperation.EDIT, ZaMsg.TBB_Edit, ZaMsg.ACTBB_Edit_tt, "Edit", "EditDis", new AjxListener(this, ZaAccountListController.prototype._editButtonListener));
    this._popupOrder.push(ZaOperation.EDIT);

	this._popupOperations[ZaOperation.DELETE] = new ZaOperation(ZaOperation.DELETE, ZaMsg.TBB_Delete, ZaMsg.ACTBB_Delete_tt, "Delete", "DeleteDis", new AjxListener(this, ZaAccountListController.prototype._deleteButtonListener));
    this._popupOrder.push(ZaOperation.DELETE);

	if(this._defaultType == ZaItem.ACCOUNT) {
		this._popupOperations[ZaOperation.CHNG_PWD] = new ZaOperation(ZaOperation.CHNG_PWD, ZaMsg.ACTBB_ChngPwd, ZaMsg.ACTBB_ChngPwd_tt, "Padlock", "PadlockDis", new AjxListener(this, ZaAccountListController.prototype._chngPwdListener));
		this._popupOperations[ZaOperation.EXPIRE_SESSION] = new ZaOperation(ZaOperation.EXPIRE_SESSION, ZaMsg.ACTBB_ExpireSessions, ZaMsg.ACTBB_ExpireSessions_tt, "ExpireSession", "ExpireSessionDis", new AjxListener(this, ZaAccountListController.prototype._expireSessionListener));
        this._popupOrder.push(ZaOperation.CHNG_PWD);
        this._popupOrder.push(ZaOperation.EXPIRE_SESSION);
	}

	if(this._defaultType == ZaItem.ALIAS) {	
		this._popupOperations[ZaOperation.MOVE_ALIAS] = new ZaOperation(ZaOperation.MOVE_ALIAS, ZaMsg.ACTBB_MoveAlias, ZaMsg.ACTBB_MoveAlias_tt, "MoveAlias", "MoveAlias", new AjxListener(this, ZaAccountListController.prototype._moveAliasListener));
		this._popupOperations[ZaOperation.EXPIRE_SESSION] = new ZaOperation(ZaOperation.EXPIRE_SESSION, ZaMsg.ACTBB_ExpireSessions, ZaMsg.ACTBB_ExpireSessions_tt, "ExpireSession", "ExpireSessionDis", new AjxListener(this, ZaAccountListController.prototype._expireSessionListener));
        this._popupOrder.push(ZaOperation.MOVE_ALIAS);
        this._popupOrder.push(ZaOperation.EXPIRE_SESSION);
	}
}
ZaController.initPopupMenuMethods["ZaAccountListController"].push(ZaAccountListController.initPopupMenuMethod);


//private and protected methods
ZaAccountListController.prototype._createUI = 
function (openInNewTab, openInSearchTab) {
	//create accounts list view
	// create the menu operations/listeners first	
	this._contentView = new ZaAccountListView(this._container, this._defaultType);
	ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
	
	this._newDLListener = new AjxListener(this, ZaAccountListController.prototype._newDistributionListListener);
	this._newAcctListener = new AjxListener(this, ZaAccountListController.prototype._newAccountListener);
	this._newResListener = new AjxListener(this, ZaAccountListController.prototype._newResourceListener);
	this._newALListener = new AjxListener(this, ZaAccountListController.prototype._newAliasListener);
   
	//always add Help and navigation buttons at the end of the toolbar    
	//add the acount number counts
	
	var elements = new Object();
	elements[ZaAppViewMgr.C_APP_CONTENT] = this._contentView;
    ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
	
	this._initPopupMenu();
	this._actionMenu =  new ZaPopupMenu(this._contentView, "ActionMenu", null, this._popupOperations, ZaId.VIEW_ACCTLIST, ZaId.MENU_POP);
	
	//set a selection listener on the account list view
	this._contentView.addSelectionListener(new AjxListener(this, this._listSelectionListener));
	this._contentView.addActionListener(new AjxListener(this, this._listActionListener));			
	if(!ZaApp.getInstance().dialogs["ConfirmMessageDialog"]) {
		ZaApp.getInstance().dialogs["ConfirmMessageDialog"] = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON], null, ZaId.CTR_PREFIX + ZaId.VIEW_ACCTLIST + "_ConfirmMessage");			
	}
	this._UICreated = true;
	
}

ZaAccountListController.prototype.closeButtonListener =
function(ev, noPopView, func, obj, params) {
	if (noPopView) {
		func.call(obj, params) ;
	}else{
		ZaApp.getInstance().popView () ;
	}
}

// new account button was pressed
ZaAccountListController.prototype._newAccountListener =
function(ev) {

	try {
		EmailAddr_XFormItem.resetDomainLists.call(this) ;
		var newAccount = new ZaAccount();
		newAccount.loadNewObjectDefaults("name", ZaSettings.myDomainName);
        newAccount.rights[ZaAccount.GET_ACCOUNT_MEMBERSHIP_RIGHT]= true;
		
		if(!ZaApp.getInstance().dialogs["newAccountWizard"]) {
			ZaApp.getInstance().dialogs["newAccountWizard"] = new ZaNewAccountXWizard(this._container,newAccount);	
		} else { //update the account type if needed
            ZaApp.getInstance().dialogs["newAccountWizard"].updateAccountType () ;    
        }

		ZaApp.getInstance().dialogs["newAccountWizard"].setObject(newAccount);
		ZaApp.getInstance().dialogs["newAccountWizard"].popup();
	} catch (ex) {
		this._handleException(ex, "ZaAccountListController.prototype._newAccountListener", null, false);
	}
}

// new alias button was pressed
ZaAccountListController.prototype._newAliasListener =
function(ev) {
	try {
		EmailAddr_XFormItem.resetDomainLists.call(this) ;
		var newAlias = new ZaAlias();
		newAlias.getAttrs = {all:true};
		newAlias.setAttrs = {all:true};		
		newAlias._defaultValues = {attrs:{}};
		newAlias.rights = {};
		//newAlias.loadNewObjectDefaults("name", ZaSettings.myDomainName);
		if(!ZaApp.getInstance().dialogs["newAliasDialog"]) {
			ZaApp.getInstance().dialogs["newAliasDialog"] = new ZaNewAliasXDialog(
				this._container, "550px", "100px",ZaMsg.New_Alias_Title );	
			ZaApp.getInstance().dialogs["newAliasDialog"].registerCallback(
					DwtDialog.OK_BUTTON, ZaAlias.prototype.addAlias, 
					newAlias, ZaApp.getInstance().dialogs["newAliasDialog"]._localXForm );
		}

		ZaApp.getInstance().dialogs["newAliasDialog"].setObject(newAlias);
		ZaApp.getInstance().dialogs["newAliasDialog"].popup();
	} catch (ex) {
		this._handleException(ex, "ZaAccountListController.prototype._newAliasListener", null, false);
	}
}


ZaAccountListController.prototype._newDistributionListListener =
function(ev) {
	try {
		EmailAddr_XFormItem.resetDomainLists.call (this);
		var newDL = new ZaDistributionList();
		//newDL.getAttrs = {all:true};
		//newDL.setAttrs = {all:true};
		newDL.rights = {};
		newDL._defaultValues = {attrs:{}};
		newDL.loadNewObjectDefaults("name", ZaSettings.myDomainName);	
		newDL.rights[ZaDistributionList.RENAME_DL_RIGHT]=true;
		newDL.rights[ZaDistributionList.REMOVE_DL_MEMBER_RIGHT]=true;
		newDL.rights[ZaDistributionList.ADD_DL_MEMBER_RIGHT]=true;
        newDL.rights[ZaDistributionList.GET_DL_MEMBERSHIP_RIGHT] = true;
        if(!ZaApp.getInstance().dialogs["newDLWizard"]) {
		    ZaApp.getInstance().dialogs["newDLWizard"] = new ZaNewDLXWizard(this._container,newDL);
        }
	    ZaApp.getInstance().dialogs["newDLWizard"].setObject(newDL);
	    ZaApp.getInstance().dialogs["newDLWizard"].popup();

	} catch (ex) {
		this._handleException(ex, "ZaAccountListController.prototype._newDistributionListListener", null, false);
	}

};

ZaAccountListController.prototype._newResourceListener =
function(ev) {
	try {
		EmailAddr_XFormItem.resetDomainLists.call (this);
		var newResource = new ZaResource();
		//newResource.getAttrs = {all:true};
		//newResource._defaultValues = {attrs:{}};	
		newResource.loadNewObjectDefaults("name", ZaSettings.myDomainName);	
		if(!ZaApp.getInstance().dialogs["newResourceWizard"])
			ZaApp.getInstance().dialogs["newResourceWizard"] = new ZaNewResourceXWizard(this._container);	

		ZaApp.getInstance().dialogs["newResourceWizard"].setObject(newResource);
		ZaApp.getInstance().dialogs["newResourceWizard"].popup();
	} catch (ex) {
		this._handleException(ex, "ZaAccountListController.prototype._newResourceListener", null, false);
	}
}


/**
* This listener is called when the item in the list is double clicked. It call ZaAccountViewController.show method
* in order to display the Account View
**/
ZaAccountListController.prototype._listSelectionListener =
function(ev) {
	if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		//console.log("double click");
		if(ev.item) {
			//console.log("edit item");
			this._editItem(ev.item);
		}
	} else {
		//console.log("single click");

        //Cancel previous scheduled action
        if(this.changeAcStateAcId) {
            AjxTimedAction.cancelAction(this.changeAcStateAcId);
            this.changeAcStateAcId = null;
        }

		var act = new AjxTimedAction(this,ZaController.prototype.changeActionsState,[ev]);
		this.changeAcStateAcId = AjxTimedAction.scheduleAction(act,ZaController.CLICK_DELAY);
		//this.changeActionsState();
	}
}

ZaAccountListController.prototype._listActionListener =
function (ev) {
	this.changeActionsState();
	this._actionMenu.popup(0, ev.docX, ev.docY);
}

/**
* This listener is called when the Edit button is clicked. 
* It call ZaAccountViewController.show method
* in order to display the Account View
**/
ZaAccountListController.prototype._editButtonListener =
function(ev) {
	EmailAddr_XFormItem.resetDomainLists.call (this) ;
	if(this._contentView.getSelectionCount() == 1) {
		var item = this._contentView.getSelection()[0];
		this._editItem(item);
	}
}


ZaAccountListController.prototype._editItem = function (item) {
	if(this.changeAcStateAcId) {
		AjxTimedAction.cancelAction(this.changeAcStateAcId);
		this.changeAcStateAcId = null;
	}	
	//check if the item already open in a tab
	var itemId = item.id ;
	if((item.type == ZaItem.ALIAS) && item.attrs && item.attrs[ZaAlias.A_AliasTargetId]) {
		itemId = item.attrs[ZaAlias.A_AliasTargetId];
	}
	var type = item.type;
	var viewContstructor = ZaAccountXFormView;
	if (type == ZaItem.ACCOUNT) {
		viewContstructor = ZaAccountXFormView;
	} else if (type == ZaItem.DL) {
		viewContstructor = ZaDLXFormView;
	} else if (type == ZaItem.RESOURCE ){
		viewContstructor = ZaResourceXFormView;
	} else if (type == ZaItem.ALIAS) {
		if (item.attrs[ZaAlias.A_targetType] == ZaAlias.TARGET_TYPE_ACCOUNT) {
			viewContstructor = ZaAccountXFormView;
		}else if (item.attrs[ZaAlias.A_targetType] == ZaAlias.TARGET_TYPE_DL){
		    viewContstructor = ZaDLXFormView;
		}else if (item.attrs[ZaAlias.A_targetType] == ZaAlias.TARGET_TYPE_RESOURCE) {
            viewContstructor = ZaResourceXFormView;
        }
	}
	
	try {	
	   if (! this.selectExistingTabByItemId(itemId,viewContstructor)){

//		DBG.println("TYPE == ", item.type);
		if (type == ZaItem.ACCOUNT) {
			//this._selectedItem = ev.item;
			ZaApp.getInstance().getAccountViewController().show(item, true);
		} else if (type == ZaItem.DL) {
			ZaApp.getInstance().getDistributionListController().show(item, true);
		} else if(type == ZaItem.ALIAS) {
			var targetObj = item.getAliasTargetObj() ;
			
			if (item.attrs[ZaAlias.A_targetType] == ZaAlias.TARGET_TYPE_ACCOUNT) {			
				ZaApp.getInstance().getAccountViewController().show(targetObj, true);
			}else if (item.attrs[ZaAlias.A_targetType] == ZaAlias.TARGET_TYPE_DL){
				ZaApp.getInstance().getDistributionListController().show(targetObj, true);
			}else if (item.attrs[ZaAlias.A_targetType] == ZaAlias.TARGET_TYPE_RESOURCE){
				ZaApp.getInstance().getResourceController(itemId).show(targetObj, true);
			} 
		} else if (type == ZaItem.RESOURCE ){
			ZaApp.getInstance().getResourceController(itemId).show(item, true);
		}

        ZaZimbraAdmin.getInstance().getOverviewPanelController().addAccountItem(item);
	   }
	} catch(ex) {
		if(ex.msg) {
			//output exception message
			ZaApp.getInstance().dialogs["errorMsgDlg"] = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.OK_BUTTON], null,ZaId.CTR_PREFIX + ZaId.VIEW_ACCTLIST + "_errorMsg"); 
                       	ZaApp.getInstance().dialogs["errorMsgDlg"].setMessage(ex.msg, null, DwtMessageDialog.TITLE[DwtMessageDialog.WARNING_STYLE]);
                       	ZaApp.getInstance().dialogs["errorMsgDlg"].popup();
		}
	}
};
/**
* This listener is called when the Change Password button is clicked. 
**/
ZaAccountListController.prototype._chngPwdListener =
function(ev) {
  try{
	if(this._contentView.getSelectionCount()==1) {
		this._chngPwdDlg = new ZaAccChangePwdXDlg(ZaApp.getInstance().getAppCtxt().getShell(), "400px","90px");
		var item = this._contentView.getSelection()[0];
		item.loadEffectiveRights("id", item.id, false);
		this._chngPwdDlg.registerCallback(DwtDialog.OK_BUTTON, ZaAccountListController._changePwdOKCallback, this, item);	
		if (item.name != undefined && item.name.length > 80) {
                        this._chngPwdDlg.setTitle(ZaMsg.CHNP_Title + " (" + AjxStringUtil.htmlEncode(item.name.substring(1,80)) + "..." + ")");
                } else {
                      if (item.name != undefined) {
                        this._chngPwdDlg.setTitle(ZaMsg.CHNP_Title + " (" + AjxStringUtil.htmlEncode(item.name) + ")");
                      } else {
                        this._chngPwdDlg.setTitle(ZaMsg.CHNP_Title);
                      }
                }
		var obj = new Object();
		obj[ZaAccount.A2_confirmPassword]="";
		obj.attrs = {};
		obj.attrs[ZaAccount.A_password]="";
		obj.attrs[ZaAccount.A_zimbraPasswordMustChange]=false;
		obj.getAttrs = item.getAttrs;
		obj.setAttrs = item.setAttrs;
		this._chngPwdDlg.setObject(obj)
		this._chngPwdDlg.popup();
	}
 } catch (ex) {
                 if (ex.code &&
                        (ex.code == ZmCsfeException.SVC_AUTH_EXPIRED ||
                                ex.code == ZmCsfeException.SVC_AUTH_REQUIRED ||
                                ex.code == ZmCsfeException.NO_AUTH_TOKEN ||
                                ex.code == ZmCsfeException.AUTH_TOKEN_CHANGED
                         )
                ){
                 try {
                        var bReloginMode = false;
                        if (ZaApp.getInstance() != null && (ex.code == ZmCsfeException.SVC_AUTH_EXPIRED ||
                                                            ex.code == ZmCsfeException.AUTH_TOKEN_CHANGED
                                                           ))
                        {
                                ZmCsfeCommand.noAuth = true;

                                var dlgs = ZaApp.getInstance().dialogs;
                                if (dlgs != undefined) {
                                for (var dlg in dlgs) {
                                        dlgs[dlg].popdown();
                                }}
                                this._loginDialog.registerCallback(this.loginCallback, this);
                                this._loginDialog.setError(ZaMsg.ERROR_SESSION_EXPIRED);
                                this._loginDialog.clearPassword();
                        } else {
                                this._loginDialog.setError(null);
                                bReloginMode = false;
                        }
                        this._loginDialog.setReloginMode(bReloginMode);
                        this._showLoginDialog(bReloginMode);
                } catch (ex2) {
			if(window.console && window.console.log)
                        	console.log(ex2.code);
                }
                } else {
                      this._handleException(ex, "ZaAccountListController._chngPwdListenerLauncher", null, false);
                }
    }   
}

ZaAccountListController.prototype._expireSessionListener = 
function(ev) {
	try {	
		if(this._contentView.getSelectionCount()==1) {
			var item = this._contentView.getSelection()[0];
			if((item.type == ZaItem.ALIAS) && (item.attrs[ZaAlias.A_targetType] == ZaItem.ACCOUNT)){
				if(!item.targetObj)
					item.targetObj = item.getAliasTargetObj();
				item = item.targetObj;
			}
			item.loadEffectiveRights("id", item.id, false);
			if(ZaItem.hasWritePermission(ZaAccount.A_zimbraAuthTokenValidityValue,item)) {
				ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(ZaMsg.WARN_EXPIRE_SESSIONS, DwtMessageDialog.WARNING_STYLE);
				ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, ZaAccountListController.prototype.expireSessions, this, [item]);		
				ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.NO_BUTTON, this.closeCnfrmDlg, this, null);				
				ZaApp.getInstance().dialogs["confirmMessageDialog"].popup();
			} else {
				this.popupMsgDialog(AjxMessageFormat.format(ZaMsg.ERROR_NO_PERMISSION_FOR_OPERATION_ON, [item.name ? item.name : item.attrs[ZaAccount.A_accountName]]), true);
			}	
		}	
 	}catch(ex){
		this._handleException(ex, "ZaAccountListController._expireSessionListener", null, false);
	}
}

ZaAccountListController.prototype.expireSessions = 
function(acct) {
	try {
		ZaApp.getInstance().dialogs["confirmMessageDialog"].popdown();
		mods = {};
		mods[ZaAccount.A_zimbraAuthTokenValidityValue] = (!acct.attrs[ZaAccount.A_zimbraAuthTokenValidityValue] ? 1 : ((parseInt(acct.attrs[ZaAccount.A_zimbraAuthTokenValidityValue])+1) % 9));
		acct.modify(mods,acct);
		//if we find we invalidate self account, we will throw an simulative exception of AUTH_EXPIRED 
		//this exception will be handled in _handleException to redirect admin to login page  
		if(ZaZimbraAdmin.currentAdminAccount.id == acct.id){
			var exParams = {
				msg: 	ZaMsg.EX_EXPIRE_OWN_SESSIONS,
				code:	ZmCsfeException.SVC_AUTH_EXPIRED ,
				method: null,
				detail: "",
				data:   "",
				trace:  ""
			};
			throw new ZmCsfeException(exParams);
		}

        ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.SessionInvalid,[acct.name]));
	}catch(ex){
		this._handleException(ex, "ZaAccountListController.expireSessions", null, false);
	}
}  

ZaAccountListController._viewMailListenerLauncher =
function (account) {
	try {
		var obj;
		var accId;
		if (account.type == ZaItem.ACCOUNT || account.type == ZaItem.RESOURCE) {
			obj = ZaAccount.getViewMailLink(account.id);
			accId = account.id;
		} else if (account.type == ZaItem.ALIAS
				&& account.attrs[ZaAlias.A_AliasTargetId]) {
			obj = ZaAccount.getViewMailLink(account.attrs[ZaAlias.A_AliasTargetId]);
			accId = account.attrs[ZaAlias.A_AliasTargetId];
			account = new ZaAccount();
		} else {
			return;
		}
		if (!account[ZaAccount.A2_publicMailURL]) {
			account.load("id", accId);
		}
		if (!account[ZaAccount.A2_publicMailURL]) {
			account[ZaAccount.A2_publicMailURL] = ["http://",
				ZaAccount.getDomain(account[ZaAccount.A_name]), ":7070"].join("");
		}

		var publicMailURL = account[ZaAccount.A2_publicMailURL];
		// Fix for bug: 88094. Ip_XModelItem is responsible for parsing/validating IP addresses
		if (Ip_XModelItem.EXACT_IP_ADDRESS_RE.test(location.hostname)
				&& publicMailURL) {
			// Here we guess user prefer to use IP, if possible, I will replace FQDN with IP
			try {
				var startIndex = publicMailURL.indexOf("//");
				if (startIndex != -1) {
					startIndex = startIndex + 2;
				} else {
					startIndex = 0;
				}
				//Search Port
				var endIndex = publicMailURL.indexOf(":", startIndex);
				if (endIndex == -1) {
					endIndex = publicMailURL.indexOf("/", startIndex);
				}
				var mailFQDN
				if (endIndex != -1) {
					mailFQDN = publicMailURL.substring(startIndex, endIndex);
				} else {
					mailFQDN = publicMailURL.substring(startIndex);
				}
				var servers = ZaServer.getAll().getArray();
				var mailBoxIP = "";
				if (servers.length > 1) {
					var found = false;
					// Try to find FQDN and IP mapping in server information.
					// If user set domain level attribute, it shouldn't be found here.
					for (var i = 0; i < servers.length; i++) {
						if (!servers[i].attrs[ZaServer.A_zimbraMailboxServiceEnabled])
							continue;

						if (servers[i].attrs[ZaServer.A_ServiceHostname] == mailFQDN) {
							found = true;
						}

						if (!found && servers[i].attrs[ZaServer.A_Pop3BindAddress]) {
							for (var j = 0;
									j < servers[i].attrs[ZaServer.A_Pop3BindAddress].length;
									j++) {
								if (servers[i].attrs[ZaServer.A_Pop3BindAddress][j]
										== mailFQDN) {
									found = true;
									break;
								}
							}
						}

						if (found) {
							// FQDN hit, start find IP information of this server
							// ignore local address
							servers[i].load();
							if (servers[i].nifs) {
								for (var j = 0; j < servers[i].nifs.length; j++) {
									if (servers[i].nifs[j].attrs.addr
											&& (servers[i].nifs[j].attrs.addr != "127.0.0.1")) {
										mailBoxIP = servers[i].nifs[j].attrs.addr;
									}
									break;
								}
							}
							break;
						}
					}
				} else {
					//Single Node installation, all components are in the same machine.
					mailBoxIP = location.hostname;
				}
				if (mailFQDN && mailBoxIP) {
					publicMailURL = publicMailURL.replace(mailFQDN, mailBoxIP);
				}
			} catch (ex1) {

			}
		}

		if (!obj.authToken || !obj.lifetime)
			throw new AjxException(ZaMsg.ERROR_FAILED_TO_GET_CREDENTIALS,
					AjxException.UNKNOWN,
					"ZaAccountListController.prototype._viewMailListener");

		var publicMailURLWithoutPort = publicMailURL.match(/(https?:\/\/[^\/:?#]+)/i)[0];
		var mServer = [publicMailURLWithoutPort.replace("http:", "https:"), "/service/preauth?authtoken=", obj.authToken,
			"&isredirect=1&adminPreAuth=1&redirectURL=/carbonio/"].join("");

		var hasLegacyUI = false;

		var req = new XMLHttpRequest();
		req.onload = function() {
			hasLegacyUI = req.status === 200;
		};
		req.open('GET', "/public/blank.html", false);
		req.send();

		var uiCookieVal = (document.cookie.match(
				'(?:^|;)\\s*' + 'UI'.trim() + '\\s*=\\s*([^;]*?)\\s*(?:;|$)') || [])[1];
		if (hasLegacyUI) {
			if (uiCookieVal !== undefined && uiCookieVal.toLowerCase()
					!== "iris".toLowerCase()) {
				mServer = [publicMailURL, "/service/preauth?authtoken=", obj.authToken,
					"&isredirect=1&adminPreAuth=1"].join("");
			}
		}

		mServer = AjxStringUtil.trim(mServer, true);
		var win = window.open(mServer, "_blank");
	} catch (ex) {
		this._handleException(ex,
				"ZaAccountListController._viewMailListenerLauncher", null, false);
	}
}
/**
* This listener is called when the Delete button is clicked. 
**/
ZaAccountListController.prototype._deleteButtonListener =
function(ev) {
	this._removeList = new Array();
	this._itemsInTabList = [] ;
	this._haveAliases = false;
	this._haveAccounts = false;
	this._haveDls = false;
	this._haveDomains = false;	
	this._haveCoses = false;
	if(this._contentView.getSelectionCount()>0) {
		var arrItems = this._contentView.getSelection();
		var cnt = arrItems.length;
		for(var key =0; key < cnt; key++) {
			var item = arrItems[key];
			if (item) {
				//detect whether the deleting item is open in a tab
				if (ZaApp.getInstance().getTabGroup() && ZaApp.getInstance().getTabGroup().getTabByItemId (item.id)) {
					this._itemsInTabList.push (item) ;
				}else{
					this._removeList.push(item);			
					if(!this._haveAliases && item.type == ZaItem.ALIAS) {
						this._haveAliases = true;
					} else if(!this._haveAccounts && item.type == ZaItem.ACCOUNT) {
						this._haveAccounts = true;
					} else if(!this._haveDls && item.type == ZaItem.DL) {
						this._haveDls = true;
					} else if(!this._haveDomains && item.type == ZaItem.DOMAIN) {
						this._haveDomains = true;
					} else if(!this._haveCoses && item.type == ZaItem.COS) {
                        this._haveCoses = true;
					}
				}
			}
		}
		//delegate to Domain list controller if we are only deleting domains
		if(this._haveDomains && !(this._haveAliases || this._haveAccounts || this._haveDls || this._haveCoses)) {
			var domainListController = ZaApp.getInstance().getDomainListController ();
			domainListController._deleteButtonListener(ev); 
			return;
		}
	}
	
	if (this._itemsInTabList.length > 0) {
		if(!ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"]) {
			ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"] = 
				new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.CANCEL_BUTTON], 
						[ZaMsgDialog.CLOSE_TAB_DELETE_BUTTON_DESC , ZaMsgDialog.NO_DELETE_BUTTON_DESC],
						ZaId.CTR_PREFIX + ZaId.VIEW_ACCTLIST + "_ConfirmDeleteItemsInTab");		
		}
		
		
		var msg = ZaMsg.dl_warning_delete_accounts_in_tab ; 
		msg += ZaAccountListController.getDlMsgFromList (this._itemsInTabList) ;
		
		ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].setMessage(msg, DwtMessageDialog.WARNING_STYLE);	
		ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].registerCallback(
				ZaMsgDialog.CLOSE_TAB_DELETE_BUTTON, ZaAccountListController.prototype._closeTabsBeforeRemove, this);
		ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].registerCallback(
				ZaMsgDialog.NO_DELETE_BUTTON, ZaAccountListController.prototype._deleteAccountsInRemoveList, this);		
		ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].popup();
		
	} else{
		this._deleteAccountsInRemoveList ();
	}
	
}

ZaAccountListController.prototype._closeTabsBeforeRemove =
function () {
	//DBG.println (AjxDebug.DBG1, "Close the tabs before Remove ...");
	/*var tabGroup = ZaApp.getInstance().getTabGroup();
	for (var i=0; i< this._itemsInTabList.length ; i ++) {
		var item = this._itemsInTabList[i];
		tabGroup.removeTab (tabGroup.getTabByItemId(item.id)) ;
		this._removeList.push(item);
	}*/
	this.closeTabsInRemoveList();
	//ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].popdown();
	this._deleteAccountsInRemoveList();
}

ZaAccountListController.prototype._deleteAccountsInRemoveList =
function () {
	if (ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"]) {
		ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].popdown();
	}
	if(this._removeList.length > 0) {
		var dlgMsg;
		if(this._haveDls && !(this._haveAccounts || this._haveAliases ||this._haveDomains || this._haveCoses)) {
			dlgMsg = ZaMsg.Q_DELETE_DLS;
		} else if(this._haveAccounts && !(this._haveDls || this._haveAliases || this._haveDomains || this._haveCoses)) {
			dlgMsg = ZaMsg.Q_DELETE_ACCOUNTS;
		} else if(this._haveAliases && !(this._haveDls || this._haveAccounts || this._haveDomains || this._haveCoses)) {
			dlgMsg = ZaMsg.Q_DELETE_ALIASES;
		} else if(this._haveDomains && !(this._haveAliases || this._haveAccounts || this._haveDls || this._haveCoses)) {
			dlgMsg = ZaMsg.Q_DELETE_DOMAINS;
                } else if(this._haveCoses && !(this._haveAliases || this._haveAccounts || this._haveDomains || this._haveDls)) {
                        dlgMsg = ZaMsg.Q_DELETE_COSES;
		} else {
			dlgMsg = ZaMsg.Q_DELETE_OBJECTS;
		}
		dlgMsg += ZaAccountListController.getDlMsgFromList (this._removeList);
		var cnt = this._removeList.length;
		var sysResources = [];
		for(var i=0; i< cnt; i++) {
			if(this._removeList[i].attrs[ZaAccount.A_zimbraIsSystemResource] && this._removeList[i].attrs[ZaAccount.A_zimbraIsSystemResource]=="TRUE") {
				dlgMsg += "<br/>";
				dlgMsg += ZaMsg.WARN_DELETING_SYSTEM_RESOURCES;
				break;
			}
		}
		ZaApp.getInstance().dialogs["confirmMessageDialog2"].setMessage(dlgMsg,  DwtMessageDialog.INFO_STYLE);
		ZaApp.getInstance().dialogs["confirmMessageDialog2"].registerCallback(DwtDialog.YES_BUTTON, ZaAccountListController.prototype._deleteAccountsCallback, this);
		ZaApp.getInstance().dialogs["confirmMessageDialog2"].registerCallback(DwtDialog.NO_BUTTON, ZaAccountListController.prototype._donotDeleteAccountsCallback, this);		
		ZaApp.getInstance().dialogs["confirmMessageDialog2"].popup();
	}
}

ZaAccountListController.getDlMsgFromList =
function (listArr) {
	var dlgMsg = "<br><ul>";
	var i=0;

	for(var key in listArr) {
		if(i > 19) {
			dlgMsg += "<li>...</li>";
			break;
		}

		dlgMsg += "<li>";
		var szAccName = listArr[key].attrs[ZaAccount.A_displayname] ? listArr[key].attrs[ZaAccount.A_displayname] : listArr[key].name;
		if(szAccName.length > 50) {
			var beginIx = 0;
			var endIx = 50;
			do {
				if (endIx >= szAccName.length) {
					dlgMsg += AjxStringUtil.htmlEncode(szAccName.slice(beginIx));
				} else {
					dlgMsg += AjxStringUtil.htmlEncode(szAccName.slice(beginIx, endIx));
				}
				beginIx = endIx;
				endIx += 50 ;

				dlgMsg +=  "<br />";	
			} while (beginIx < szAccName.length) ;
		} else {
			dlgMsg += AjxStringUtil.htmlEncode(szAccName);
		}

		dlgMsg += "</li>";
		i++;
	}

	dlgMsg += "</ul>";
	return dlgMsg;
}


ZaAccountListController.prototype._deleteAccountsCallback = 
function () {

	//if(!ZaApp.getInstance().dialogs["removeProgressDlg"]) {
		ZaApp.getInstance().dialogs["removeProgressDlg"] = new DeleteAcctsPgrsDlg(this._container, "500px","300px");
	//}
	ZaApp.getInstance().dialogs["confirmMessageDialog2"].popdown();
	ZaApp.getInstance().dialogs["removeProgressDlg"].popup();
	ZaApp.getInstance().dialogs["removeProgressDlg"].setObject(this._removeList);
	ZaApp.getInstance().dialogs["removeProgressDlg"].startDeletingAccounts();

	//update cos list tree
	if(this._haveCoses){
		var overviewPanelCtrl = ZaApp.getInstance()._appCtxt.getAppController().getOverviewPanelController();
		overviewPanelCtrl.removeCosTreeItems(this._removeList);
	}
}



ZaAccountListController.prototype._donotDeleteAccountsCallback = 
function () {
	this._removeList = new Array();
	ZaApp.getInstance().dialogs["confirmMessageDialog2"].popdown();
}


ZaAccountListController._changePwdOKCallback = 
function (item) {
	//check the passwords, if they are ok then save the password, else show error
	if(this._chngPwdDlg) {
		try {
			if(!this._chngPwdDlg.getPassword() || this._chngPwdDlg.getPassword().length < 1) {
				ZaApp.getInstance().dialogs["errorMsgDlg"] = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.OK_BUTTON],null,ZaId.CTR_PREFIX + ZaId.VIEW_ACCTLIST + "_errorMsg");							
				ZaApp.getInstance().dialogs["errorMsgDlg"].setMessage(ZaMsg.ERROR_PASSWORD_REQUIRED, null, DwtMessageDialog.TITLE[DwtMessageDialog.CRITICAL_STYLE]);
				ZaApp.getInstance().dialogs["errorMsgDlg"].popup();				
			} else if(this._chngPwdDlg.getPassword() != this._chngPwdDlg.getConfirmPassword()) {
				ZaApp.getInstance().dialogs["errorMsgDlg"] = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.OK_BUTTON], null, ZaId.CTR_PREFIX + ZaId.VIEW_ACCTLIST + "_errorMsg");							
				ZaApp.getInstance().dialogs["errorMsgDlg"].setMessage(ZaMsg.ERROR_PASSWORD_MISMATCH, null,DwtMessageDialog.TITLE[DwtMessageDialog.CRITICAL_STYLE]);
				ZaApp.getInstance().dialogs["errorMsgDlg"].popup();				
			} else {
				//check password
				var myCos = null;
				var maxPwdLen = null;
				var minPwdLen = null;	
				item.refresh(true,false);
				if(item.attrs[ZaAccount.A_zimbraMinPwdLength] != null) {
					minPwdLen = item.attrs[ZaAccount.A_zimbraMinPwdLength];
				} 
				
				if(item.attrs[ZaAccount.A_zimbraMaxPwdLength] != null) {
					maxPwdLen = item.attrs[ZaAccount.A_zimbraMaxPwdLength];
				} 
				
				if (minPwdLen == null) {
					minPwdLen = item._defaultValues[ZaAccount.A_zimbraMinPwdLength];
				}			
				
				if (maxPwdLen == null) {
					minPwdLen = item._defaultValues[ZaAccount.A_zimbraMaxPwdLength];
				}		
				
				if (maxPwdLen == null) {
					maxPwdLen = Number.POSITIVE_INFINITY;
				}
				
				if(minPwdLen == null) {
					minPwdLen = 1;
				}
				
				var szPwd = this._chngPwdDlg.getPassword();
				if(szPwd.length < minPwdLen || AjxStringUtil.trim(szPwd).length < minPwdLen) { 
					//show error msg
					//this._chngPwdDlg.popdown();
                    var minpassMsg;
                    if (minPwdLen > 1) {
                        minpassMsg =  String(ZaMsg.NAD_passMinLengthMsg_p).replace("{0}",minPwdLen);
                    } else {
                        minpassMsg =  String(ZaMsg.NAD_passMinLengthMsg_s).replace("{0}",minPwdLen);
                    }
					ZaApp.getInstance().dialogs["errorMsgDlg"] = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.OK_BUTTON],null,ZaId.CTR_PREFIX + ZaId.VIEW_ACCTLIST + "_errorMsg");									
					ZaApp.getInstance().dialogs["errorMsgDlg"].setMessage(ZaMsg.ERROR_PASSWORD_TOOSHORT + "<br>" + minpassMsg, null, DwtMessageDialog.CRITICAL_STYLE, null);
					ZaApp.getInstance().dialogs["errorMsgDlg"].popup();
				} else if(AjxStringUtil.trim(szPwd).length > maxPwdLen) { 
					//show error msg
					//this._chngPwdDlg.popdown();
					ZaApp.getInstance().dialogs["errorMsgDlg"] = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.OK_BUTTON], null, ZaId.CTR_PREFIX + ZaId.VIEW_ACCTLIST + "_errorMsg");
                    var maxpassMsg;
                    if (maxPwdLen > 1) {
                        maxpassMsg =  String(ZaMsg.NAD_passMinLengthMsg_p).replace("{0}",minPwdLen);
                    } else {
                        maxpassMsg =  String(ZaMsg.NAD_passMinLengthMsg_s).replace("{0}",minPwdLen);
                    }
					ZaApp.getInstance().dialogs["errorMsgDlg"].setMessage(ZaMsg.ERROR_PASSWORD_TOOLONG+ "<br>" + maxpassMsg, null, DwtMessageDialog.CRITICAL_STYLE, null);
					ZaApp.getInstance().dialogs["errorMsgDlg"].popup();
				} else {		
					item.changePassword(szPwd);
					this._chngPwdDlg.popdown();	//close the dialog
                    ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.PasswordModified,[item.name]));
				}

			}
			if (this._chngPwdDlg.getMustChangePassword()) {
				//item.attrs[ZaAccount.A_zimbraPasswordMustChange] = "TRUE";
				var mods = new Object();
				mods[ZaAccount.A_zimbraPasswordMustChange] = "TRUE";
				item.modify(mods);
			}

		} catch (ex) {
			if(ex.code == ZmCsfeException.ACCT_INVALID_PASSWORD ) {
				var szMsg = ZaMsg.ERROR_PASSWORD_INVALID;
				if(ex.detail) {
					szMsg +="<br>Details:<br>";
					szMsg += ex.detail;
				}
				ZaApp.getInstance().dialogs["errorDialog"].setMessage(szMsg, null, DwtMessageDialog.CRITICAL_STYLE, null);
				ZaApp.getInstance().dialogs["errorDialog"].popup();
			} else {
				this._handleException(ex, "ZaAccountListController._changePwdOKCallback", null, false);			
			}
			return;
		}
	}
}

ZaAccountListController.prototype.getPopUpOperation =
function() {
    return this._popupOperations;
}

ZaAccountListController.changeActionsStateMethod = 
function () {
	var cnt = this._contentView.getSelectionCount();
	if(cnt == 1) {
		var item = this._contentView.getSelection()[0];
		if(item) {
            if (item.type == ZaItem.ALIAS || item.type == ZaItem.DL) {
                if(this._popupOperations[ZaOperation.CHNG_PWD]) {
                    this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
                }
            }

            if (((item.type == ZaItem.ALIAS) && 
            		(item.attrs[ZaAlias.A_targetType] == ZaItem.DL)) 
            			|| (item.type == ZaItem.DL)) {

                if(this._popupOperations[ZaOperation.EXPIRE_SESSION]) {
                    this._popupOperations[ZaOperation.EXPIRE_SESSION].enabled = false;
                }
            }
		
	    if ((item.type == ZaItem.ALIAS) && (item.attrs[ZaAlias.A_targetType] == ZaItem.RESOURCE)){	    
                if(this._popupOperations[ZaOperation.EXPIRE_SESSION]) {
                    this._popupOperations[ZaOperation.EXPIRE_SESSION].enabled = false;
                }
            }

            if (item.type == ZaItem.DL) {
                if(this._popupOperations[ZaOperation.MOVE_ALIAS])	{
                    this._popupOperations[ZaOperation.MOVE_ALIAS].enabled = false;
                }

                if(!ZaItem.hasRight(ZaAccount.RIGHT_DELETE_DL,item)) {
                	if(this._popupOperations[ZaOperation.DELETE]) {
                        this._popupOperations[ZaOperation.DELETE].enabled = false;
                    }
                }
            }

            if(item.type == ZaItem.ALIAS && item.attrs[ZaAlias.A_targetType] == ZaItem.DL) {
                if(!ZaItem.hasRight(ZaDistributionList.REMOVE_DL_ALIAS_RIGHT,item.getAliasTargetObj())) {
                    if(this._popupOperations[ZaOperation.DELETE]) {
                        this._popupOperations[ZaOperation.DELETE].enabled = false;
                    }
                }
            }

			if (item.type == ZaItem.ACCOUNT) {
				var enable = false;
                var domainName = ZaAccount.getDomain(item.toString());
                var isAuthInternal = ZaAccountXFormView.isAuthfromInternal(domainName);

				if(ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE') {
					enable = true;
				} else if (AjxUtil.isEmpty(item.rights)) {
					//console.log("loading effective rights for a list item");
					item.loadEffectiveRights("id", item.id, false);
					//console.log("loaded rights for a list item");
				}
				if(!enable) {
					if(!ZaItem.hasRight(ZaAccount.DELETE_ACCOUNT_RIGHT,item)) {
						 if(this._popupOperations[ZaOperation.DELETE]) {
						 	this._popupOperations[ZaOperation.DELETE].enabled = false;
						 }
					}
					if(!ZaItem.hasAnyRight([ZaAccount.SET_PASSWORD_RIGHT, ZaAccount.CHANGE_PASSWORD_RIGHT], item) && isAuthInternal) {
						 if(this._popupOperations[ZaOperation.CHNG_PWD]) {
						 	this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
						 }
					}	
					if(!ZaItem.hasWritePermission(ZaAccount.A_zimbraAuthTokenValidityValue,item)) {    
					   	if(this._popupOperations[ZaOperation.EXPIRE_SESSION]) {	
							this._popupOperations[ZaOperation.EXPIRE_SESSION].enabled = false;
						}						
					}									
				} else {
					if(!isAuthInternal) {
                        if(this._popupOperations[ZaOperation.CHNG_PWD]) {
                            this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
                        }
					} 
				}
			} else if ((item.type == ZaItem.ALIAS) && (item.attrs[ZaAlias.A_targetType] == ZaItem.ACCOUNT))  {
				if(!item.targetObj) {
					item.targetObj = item.getAliasTargetObj() ;
				}
				var enable = false;
				if (ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE') {
					enable = true;
				} else if (AjxUtil.isEmpty(item.targetObj.rights)) {
					item.targetObj.loadEffectiveRights("id", item.id, false);
				}
				if(!enable) {
					if(!ZaItem.hasRight(ZaAccount.DELETE_ACCOUNT_RIGHT,item.targetObj)) {
						 if(this._popupOperations[ZaOperation.DELETE]) {
						 	this._popupOperations[ZaOperation.DELETE].enabled = false;
						 }
						 
					}
					if(!ZaItem.hasAnyRight([ZaAccount.SET_PASSWORD_RIGHT, ZaAccount.CHANGE_PASSWORD_RIGHT],item.targetObj)) {
						 if(this._popupOperations[ZaOperation.CHNG_PWD]) {
						 	this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
						 }
					}		
				}
			} else if ((item.type == ZaItem.ALIAS) && (item.attrs[ZaAlias.A_targetType] == ZaItem.RESOURCE))  {
				if(!item.targetObj)
					item.targetObj = item.getAliasTargetObj() ;
					
				var enable = false;
				if (ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE') {
					enable = true;
				} else if (AjxUtil.isEmpty(item.targetObj.rights)) {
					item.targetObj.loadEffectiveRights("id", item.id, false);
				}
				if(!enable) {
					if(!enable) {
						if(!ZaItem.hasRight(ZaResource.DELETE_CALRES_RIGHT,item.targetObj)) {
							 if(this._popupOperations[ZaOperation.DELETE]) {
							 	this._popupOperations[ZaOperation.DELETE].enabled = false;
							 }
						}	
						if(!ZaItem.hasRight(ZaResource.SET_CALRES_PASSWORD_RIGHT, item.targetObj)) {
							 if(this._popupOperations[ZaOperation.CHNG_PWD]) {
							 	this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
							 }
						}		
					}
				}
			} else if(item.type == ZaItem.RESOURCE) {
				var enable = false;
				if(ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE') {
					enable = true;
				} else if (AjxUtil.isEmpty(item.rights)) {
					item.loadEffectiveRights("id", item.id, false);
				}
				if(!enable) {
					if(!ZaItem.hasRight(ZaResource.DELETE_CALRES_RIGHT,item)) {
						 if(this._popupOperations[ZaOperation.DELETE]) {
						 	this._popupOperations[ZaOperation.DELETE].enabled = false;
						 }
					}	
					if(!ZaItem.hasRight(ZaResource.SET_CALRES_PASSWORD_RIGHT, item)) {
						 if(this._popupOperations[ZaOperation.CHNG_PWD]) {
						 	this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
						 }
					}		
				}				
			}
        } else {
			
			if(this._popupOperations[ZaOperation.EXPIRE_SESSION]) {	
				this._popupOperations[ZaOperation.EXPIRE_SESSION].enabled = false;
			}
			if(this._popupOperations[ZaOperation.EDIT]) {	
				this._popupOperations[ZaOperation.EDIT].enabled = false;
			}	
			if(this._popupOperations[ZaOperation.CHNG_PWD]) {
				this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
			}
			if(this._popupOperations[ZaOperation.MOVE_ALIAS]) {
				this._popupOperations[ZaOperation.MOVE_ALIAS].enabled = false;
			}	
			if(this._popupOperations[ZaOperation.DELETE]) {	
				this._popupOperations[ZaOperation.DELETE].enabled = false;
			}				
		}		
	} else if (cnt > 1){
		if(this._popupOperations[ZaOperation.EXPIRE_SESSION]) {	
			this._popupOperations[ZaOperation.EXPIRE_SESSION].enabled = false;
		}					
		if(this._popupOperations[ZaOperation.EDIT]) {	
			this._popupOperations[ZaOperation.EDIT].enabled = false;
		}		
		if(this._popupOperations[ZaOperation.CHNG_PWD]) {
			this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
		}
		if(this._popupOperations[ZaOperation.MOVE_ALIAS]) {
			this._popupOperations[ZaOperation.MOVE_ALIAS].enabled = false;		
		}
	} else {
		if(this._popupOperations[ZaOperation.EXPIRE_SESSION]) {	
			this._popupOperations[ZaOperation.EXPIRE_SESSION].enabled = false;
		}				
		if(this._popupOperations[ZaOperation.EDIT]) {	
			this._popupOperations[ZaOperation.EDIT].enabled = false;
		}	
		if(this._popupOperations[ZaOperation.DELETE]) {
			this._popupOperations[ZaOperation.DELETE].enabled = false;
		}		
		if(this._popupOperations[ZaOperation.CHNG_PWD]) {
			this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
		}
		if(this._popupOperations[ZaOperation.MOVE_ALIAS])	{
			this._popupOperations[ZaOperation.MOVE_ALIAS].enabled = false;
		}	
	}
 	for(var i=0;i<cnt;i++) {
        var itemObj = this._contentView.getSelection()[i];
        if(itemObj && itemObj.type==ZaItem.ACCOUNT){
		// Use zimbraIsSystemAccount to determine enabled/disabled status for delete button
        	if (itemObj.attrs[ZaAccount.A_zimbraIsSystemAccount] == "TRUE") {
        		this._popupOperations[ZaOperation.DELETE].enabled = false;
        	}
        }
 	}
}
ZaController.changeActionsStateMethods["ZaAccountListController"].push(ZaAccountListController.changeActionsStateMethod);

ZaAccountListController.prototype._moveAliasListener = 
function (ev) {
	try {
		var alias;
		var alias = this._contentView.getSelection()[0];
		//make sure this is an alias
		if(!alias || alias.type!=ZaItem.ALIAS) {
			return;			
		}
		if(!ZaApp.getInstance().dialogs["moveAliasDialog"]) {
			ZaApp.getInstance().dialogs["moveAliasDialog"] = new MoveAliasXDialog(this._container, "400px", "300px");
		}
		ZaApp.getInstance().dialogs["moveAliasDialog"].setAlias(alias);
		ZaApp.getInstance().dialogs["moveAliasDialog"].popup();
	} catch (ex) {
		this._handleException(ex, "ZaAccountListController.prototype._moveAliasListener", null, false);
	}
	return;
}
}
if (AjxPackage.define("zimbraAdmin.accounts.controller.ZaAccountViewController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaAccountViewController controls display of a single Account
* @contructor ZaAccountViewController
* @param appCtxt
* @param container
* @param abApp
* @author Roland Schemers
* @author Greg Solovyev
**/

ZaAccountViewController = function(appCtxt, container) {
	ZaXFormViewController.call(this, appCtxt, container, "ZaAccountViewController");
	this._UICreated = false;
	this.objType = ZaEvent.S_ACCOUNT;
	this._helpURL = ZaUtil.HELP_URL;
	this._helpButtonText = ZaMsg.helpEditAccounts;
    this.deleteMsg = ZaMsg.Q_DELETE_ACCOUNT;
	this.tabConstructor = ZaAccountXFormView;
}

ZaAccountViewController.prototype = new ZaXFormViewController();
ZaAccountViewController.prototype.constructor = ZaAccountViewController;
ZaAccountViewController.helpURL = "managing_accounts/editing_accounts.htm";
ZaController.changeActionsStateMethods["ZaAccountViewController"] = new Array();
ZaController.setViewMethods["ZaAccountViewController"] = new Array();
ZaController.initToolbarMethods["ZaAccountViewController"] = new Array();
ZaController.initPopupMenuMethods["ZaAccountViewController"] = new Array();
ZaXFormViewController.preSaveValidationMethods["ZaAccountViewController"] = new Array();
//public methods

/**
*	@method show
*	@param entry - isntance of ZaAccount class
*	@param skipRefresh - forces to skip entry.refresh() call. 
*		   When getting account from an alias the account is retreived from the server using ZaAccount.load() 
* 		   so there is no need to refresh it.
*/

ZaAccountViewController.prototype.show = 
function(entry, openInNewTab, skipRefresh) {
	this._setView(entry, openInNewTab, skipRefresh);
}

ZaAccountViewController.initPopupMenuMethod =
function () {
	var showNewAccount = false;
	if(ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE') {
		showNewAccount = true;
	} else {
		showNewAccount = ZaZimbraAdmin.canCreateAccount();
	}

    this._popupOperations[ZaOperation.SAVE]= new ZaOperation(ZaOperation.SAVE, ZaMsg.TBB_Save, ZaMsg.ALTBB_Save_tt, "Save", "SaveDis", new AjxListener(this, this.saveButtonListener));
    this._popupOperations[ZaOperation.CLOSE] = new ZaOperation(ZaOperation.CLOSE, ZaMsg.TBB_Close, ZaMsg.ALTBB_Close_tt, "Close", "CloseDis", new AjxListener(this, this.closeButtonListener));

	if(showNewAccount) {
        this._popupOperations[ZaOperation.NEW_MENU] = new ZaOperation(ZaOperation.NEW, ZaMsg.TBB_New, ZaMsg.ACTBB_New_tt, "Account", "AccountDis", new AjxListener(this, ZaAccountViewController.prototype._newButtonListener));
        this._popupOrder.push(ZaOperation.NEW_MENU);
	}
    this._popupOperations[ZaOperation.DELETE] = new ZaOperation(ZaOperation.DELETE, ZaMsg.TBB_Delete, ZaMsg.ACTBB_Delete_tt,"Delete", "DeleteDis", new AjxListener(this, this.deleteButtonListener));

    this._popupOrder.push(ZaOperation.SAVE);
    this._popupOrder.push(ZaOperation.CLOSE);
    this._popupOrder.push(ZaOperation.DELETE);

    this._popupOperations[ZaOperation.EXPIRE_SESSION] = new ZaOperation(ZaOperation.EXPIRE_SESSION, ZaMsg.ACTBB_ExpireSessions, ZaMsg.ACTBB_ExpireSessions_tt, "ExpireSession", "ExpireSessionDis", new AjxListener(this, ZaAccountViewController.prototype._expireSessionListener));
    this._popupOrder.push(ZaOperation.EXPIRE_SESSION);

    if(ZaItem.hasRight(ZaAccount.REINDEX_MBX_RIGHT,this._currentObject)) {
        this._popupOperations[ZaOperation.REINDEX_MAILBOX] = new ZaOperation(ZaOperation.REINDEX_MAILBOX, ZaMsg.ACTBB_ReindexMbx, ZaMsg.ACTBB_ReindexMbx_tt, "ReindexMailboxes", "ReindexMailboxes", new AjxListener(this, ZaAccountViewController.prototype._reindexMbxListener));
        this._popupOrder.push(ZaOperation.REINDEX_MAILBOX);
    }
}
ZaController.initPopupMenuMethods["ZaAccountViewController"].push(ZaAccountViewController.initPopupMenuMethod);
/*
ZaAccountViewController.prototype.getAppBarAction =
function () {
    if (AjxUtil.isEmpty(this._appbarOperation)) {
    	this._appbarOperation[ZaOperation.HELP]=new ZaOperation(ZaOperation.HELP,ZaMsg.TBB_Help, ZaMsg.TBB_Help_tt, "Help", "Help", new AjxListener(this, this._helpButtonListener));
        this._appbarOperation[ZaOperation.SAVE]= new ZaOperation(ZaOperation.SAVE, ZaMsg.TBB_Save, ZaMsg.ALTBB_Save_tt, "", "", new AjxListener(this, this.saveButtonListener));
        this._appbarOperation[ZaOperation.CLOSE] = new ZaOperation(ZaOperation.CLOSE, ZaMsg.TBB_Close, ZaMsg.ALTBB_Close_tt, "", "", new AjxListener(this, this.closeButtonListener));
    }

    return this._appbarOperation;
}

ZaAccountViewController.prototype.getAppBarOrder =
function () {
    if (AjxUtil.isEmpty(this._appbarOrder)) {
    	this._appbarOrder.push(ZaOperation.HELP);
        this._appbarOrder.push(ZaOperation.SAVE);
        this._appbarOrder.push(ZaOperation.CLOSE);
    }

    return this._appbarOrder;
}*/
/**
* This listener is called when the Delete button is clicked. 
* member of ZaXFormViewController
* @param 	ev event object
**/
ZaAccountViewController.prototype.deleteButtonListener =
function(ev) {
	if(this._currentObject.id) {
		if(this._currentObject[ZaAccount.A2_zimbra_ds] || this._currentObject[ZaAccount.A2_ldap_ds]) {
			ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(AjxMessageFormat.format(ZaMsg.WARN_DELETING_GAL_SYNC,[this._currentObject.name]), DwtMessageDialog.WARNING_STYLE);
		} else if (this._currentObject.attrs[ZaAccount.A_zimbraIsSystemResource] && this._currentObject.attrs[ZaAccount.A_zimbraIsSystemResource]=="TRUE") { 
			ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(AjxMessageFormat.format(ZaMsg.WARN_DELETING_SYSTEM_RESOURCE,[this._currentObject.name]), DwtMessageDialog.WARNING_STYLE);
		} else {
			ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(this.deleteMsg, DwtMessageDialog.INFO_STYLE);
		}
		
		ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, this.deleteAndGoAway, this, null);		
		ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.NO_BUTTON, this.closeCnfrmDlg, this, null);				
		ZaApp.getInstance().dialogs["confirmMessageDialog"].popup();
	} else {
		ZaApp.getInstance().popView();
	}
}

/**
*	@method setViewMethod 
*	@param entry - isntance of ZaAccount class
*/
ZaAccountViewController.setViewMethod =
function(entry) {
	try {
		this._currentObject = entry;

		//this._initToolbar();
        this._initPopupMenu();
		//make sure these are last

		if(!entry[ZaModel.currentTab])
			entry[ZaModel.currentTab] = "1";
	

		try {		  		
			if(!AjxUtil.isEmpty(entry.id)) {
				var isExternal = entry.isExternal;
				entry.refresh(false,true);
				entry.isExternal = isExternal;
			}
	  		this._contentView = this._view = new this.tabConstructor(this._container,entry);
			var elements = new Object();
			elements[ZaAppViewMgr.C_APP_CONTENT] = this._view;
            ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
	    	//associate the controller with the view by viewId
		    ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
			//ZaApp.getInstance().pushView(ZaZimbraAdmin._ACCOUNT_VIEW);
			ZaApp.getInstance().pushView(this.getContentViewId()) ;
		} catch (ex) {
				// Data corruption may cause anexception. We should catch it here in order to display the form anyway.
			this._handleException(ex, null, null, false);
			if (ex.code ==  ZmCsfeException.SVC_PERM_DENIED) {
                if (this._contentView && this.getContentViewId()) {
				    //only pop the view when the view is actually created.
                    ZaApp.getInstance().popView();
                }
				return ;

			}
		}

        ZaZimbraAdmin.getInstance().getCurrentAppBar().enableButton(ZaOperation.SAVE, false);

		this._view.setDirty(false);
		entry.attrs[ZaAccount.A_password] = null; //get rid of VALUE-BLOCKED
		entry[ZaModel.currentTab] = "1";
		this._view.setObject(entry);
	} catch (ex) {
		this._handleException(ex, "ZaAccountViewController.prototype._setView", null, false);
	}	
	this._cosChanged = false;
	this._domainsChanged = false;
}
ZaController.setViewMethods["ZaAccountViewController"].push(ZaAccountViewController.setViewMethod);

ZaAccountViewController.changeActionsStateMethod = function () {
	if(!this._currentObject)
		return;

    var isDeleteEnabled = true;
	if(!ZaItem.hasRight(ZaAccount.DELETE_ACCOUNT_RIGHT,this._currentObject))	{
		isDeleteEnabled = false;
	}
   	var tmpObj = this._view.getObject();
        if(tmpObj.attrs != null && tmpObj.attrs[ZaAccount.A_mail] != null ) {
                var myitem = tmpObj.attrs[ZaAccount.A_mail];
                var myaccount = tmpObj.name;
                var mydomain = ZaAccount.getDomain(myaccount);
                var domainObj =  ZaDomain.getDomainByName(mydomain);

                if (myitem == "admin@"+mydomain || myitem == "root@"+mydomain || myitem == "postmaster@"+mydomain || myitem == "domainadmin@"+mydomain) {
                    isDeleteEnabled = false;
                }
                if (domainObj.attrs[ZaDomain.A_zimbraGalAccountId]){
                 if (myitem == domainObj.attrs[ZaDomain.A_zimbraGalAccountId]){
                        isDeleteEnabled = false;}
                }
                if (ZaApp.getInstance().getGlobalConfig().attrs[ZaGlobalConfig.A_zimbraSpamAccount]){
                        if (myitem == ZaApp.getInstance().getGlobalConfig().attrs[ZaGlobalConfig.A_zimbraSpamAccount].toString()){
                                isDeleteEnabled = false;}
                }
                if (ZaApp.getInstance().getGlobalConfig().attrs[ZaGlobalConfig.A_zimbraHamAccount]){
                        if (myitem == ZaApp.getInstance().getGlobalConfig().attrs[ZaGlobalConfig.A_zimbraHamAccount].toString()){
                                isDeleteEnabled = false;}
                }
                if (ZaApp.getInstance().getGlobalConfig().attrs[ZaGlobalConfig.A_zimbraAmavisQAccount]){
                        if (myitem == ZaApp.getInstance().getGlobalConfig().attrs[ZaGlobalConfig.A_zimbraAmavisQAccount].toString()){
                               isDeleteEnabled = false;}
                }
                if (ZaApp.getInstance().getGlobalConfig().attrs[ZaGlobalConfig.A_zimbraWikiAccount]){
                        if (myitem == ZaApp.getInstance().getGlobalConfig().attrs[ZaGlobalConfig.A_zimbraWikiAccount].toString()){
                               isDeleteEnabled = false;}
                }
                if (tmpObj.attrs[ZaAccount.A_isCCAccount]){
                        isDeleteEnabled = false;
                }
        }

    if (tmpObj.attrs && tmpObj.attrs[ZaAccount.A_zimbraIsSystemAccount] == "TRUE"){
            isDeleteEnabled = false;
    }

    if (!isDeleteEnabled) {
        if(this._popupOperations[ZaOperation.DELETE])
            this._popupOperations[ZaOperation.DELETE].enabled = isDeleteEnabled;
    }

	if(!ZaItem.hasRight(ZaAccount.REINDEX_MBX_RIGHT,this._currentObject))	{
        if(this._popupOperations[ZaOperation.REINDEX_MAILBOX])
            this._popupOperations[ZaOperation.REINDEX_MAILBOX].enabled = isDeleteEnabled;
	}

    if(!ZaItem.hasWritePermission(ZaAccount.A_zimbraAuthTokenValidityValue,this._currentObject)) {
        if(this._popupOperations[ZaOperation.EXPIRE_SESSION]) {
            this._popupOperations[ZaOperation.EXPIRE_SESSION].enabled = false;
        }
    }

    var isToEnable = (this._view && this._view.isDirty());


    if(this._popupOperations[ZaOperation.SAVE]) {
        this._popupOperations[ZaOperation.SAVE].enabled = isToEnable;
    }

    ZaZimbraAdmin.getInstance().getCurrentAppBar().enableButton(ZaOperation.SAVE, false);
}
ZaController.changeActionsStateMethods["ZaAccountViewController"].push(ZaAccountViewController.changeActionsStateMethod);


//Private/protected methods
/**
* saves the changes in the fields, calls modify or create on the current ZaAccount
* @return Boolean - indicates if the changes were succesfully saved
**/
ZaAccountViewController.prototype._saveChanges =
function () {
	//check if the XForm has any errors
	if(this._view.getMyForm().hasErrors()) {
		var errItems = this._view.getMyForm().getItemsInErrorState();
		var dlgMsg = ZaMsg.CORRECT_ERRORS;
		dlgMsg +=  "<br><ul>";
		var i = 0;
		for(var key in errItems) {
			if(i > 19) {
				dlgMsg += "<li>...</li>";
				break;
			}
			if(key == "size") continue;
			var label = errItems[key].getInheritedProperty("msgName");
			if(!label && errItems[key].getParentItem()) { //this might be a part of a composite
				label = errItems[key].getParentItem().getInheritedProperty("msgName");
			}
			if(label) {
				if(label.substring(label.length-1,1)==":") {
					label = label.substring(0, label.length-1);
				}
			}			
			if(label) {
				dlgMsg += "<li>";
				dlgMsg +=label;			
				dlgMsg += "</li>";
			}
			i++;
		}
		dlgMsg += "</ul>";
		this.popupMsgDialog(dlgMsg, true);
		return false;
	}
	//check if the data is copmlete 
	var tmpObj = this._view.getObject();	
	
	//Check the data
	if(tmpObj.attrs == null ) {
		//show error msg
		this._errorDialog.setMessage(ZaMsg.ERROR_UNKNOWN, null, DwtMessageDialog.CRITICAL_STYLE, null);
		this._errorDialog.popup();		
		return false;	
	}
		
	var mods = new Object();
    
	if(!AjxUtil.isEmpty(tmpObj.attrs[ZaAccount.A_COSId]) && !ZaItem.ID_PATTERN.test(tmpObj.attrs[ZaAccount.A_COSId]))  {
    	var cos = ZaCos.getCosByName(tmpObj.attrs[ZaAccount.A_COSId]);
    	if(cos) {
    		tmpObj.attrs[ZaAccount.A_COSId] = cos.id;
    		tmpObj._defaultValues = cos;
    	} else {
    		this.popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_NO_SUCH_COS,[tmpObj.attrs[ZaAccount.A_COSId]]));
    		return false;
    	}
    } 
	
	if(!ZaAccount.checkValues(tmpObj))
		return false;
	
	//change password if new password is provided
	if(tmpObj.attrs[ZaAccount.A_password]!=null && tmpObj[ZaAccount.A2_confirmPassword]!=null && tmpObj.attrs[ZaAccount.A_password].length > 0) {
		try {
			this._currentObject.changePassword(tmpObj.attrs[ZaAccount.A_password]);
		} catch (ex) {
			this.popupErrorDialog(ZaMsg.FAILED_SAVE_ACCOUNT, ex);
			return false;	
		}
	}

	//set the cosId to "" if the autoCos is enabled.
	if (tmpObj[ZaAccount.A2_autoCos] == "TRUE") {
		tmpObj.attrs[ZaAccount.A_COSId] = "" ;
	}
	
	//transfer the fields from the tmpObj to the _currentObject
	for (var a in tmpObj.attrs) {
		if(a == ZaAccount.A_password || a==ZaAccount.A_zimbraMailAlias || a == ZaItem.A_objectClass
                || a==ZaAccount.A2_mbxsize || a==ZaAccount.A_mail || a == ZaItem.A_zimbraId
                || a == ZaAccount.A_zimbraAvailableSkin || a == ZaAccount.A_zimbraZimletAvailableZimlets
                || a == ZaItem.A_zimbraACE || a == ZaAccount.A_uid) {
			continue;
		}	
		if(!ZaItem.hasWritePermission(a,tmpObj)) {
			continue;
		}		
		//check if the value has been modified
		if ((this._currentObject.attrs[a] != tmpObj.attrs[a]) && !(this._currentObject.attrs[a] == undefined && tmpObj.attrs[a] === "")) {
			if(tmpObj.attrs[a] instanceof Array) {
                if (!this._currentObject.attrs[a]) this._currentObject.attrs[a] = [] ;
                if(!(this._currentObject.attrs[a] instanceof Array)) {
                	this._currentObject.attrs[a] = [this._currentObject.attrs[a]];
                }
                if( tmpObj.attrs[a].join(",").valueOf() !=  this._currentObject.attrs[a].join(",").valueOf()) {
					mods[a] = tmpObj.attrs[a];
				}
			} else {
				if(a === ZaAccount.A_manager) {
					mods[a] = this._getLDAPAttr(tmpObj.attrs[a]);				
				} else {
					mods[a] = tmpObj.attrs[a];
				}
			}				
		}
	}

	if(ZaTabView.isTAB_ENABLED(this._currentObject,ZaAccountXFormView.SKIN_TAB_ATTRS, ZaAccountXFormView.SKIN_TAB_RIGHTS)) {
		if(tmpObj.attrs[ZaAccount.A_zimbraAvailableSkin] != null) {
			if(!(tmpObj.attrs[ZaAccount.A_zimbraAvailableSkin] instanceof Array)) {
				mods[ZaAccount.A_zimbraAvailableSkin] = [tmpObj.attrs[ZaAccount.A_zimbraAvailableSkin]];
			} else {
				var cnt = tmpObj.attrs[ZaAccount.A_zimbraAvailableSkin].length;
				mods[ZaAccount.A_zimbraAvailableSkin] = [];
				for(var i = 0; i < cnt; i++) {
					mods[ZaAccount.A_zimbraAvailableSkin].push(tmpObj.attrs[ZaAccount.A_zimbraAvailableSkin][i]);
				}
			}
		} else if(this._currentObject.attrs[ZaAccount.A_zimbraAvailableSkin] != null) {
			mods[ZaAccount.A_zimbraAvailableSkin] = "";
		}
	}
		
	if(ZaTabView.isTAB_ENABLED(this._currentObject,ZaAccountXFormView.ZIMLET_TAB_ATTRS, ZaAccountXFormView.ZIMLET_TAB_RIGHTS)) {
		if(tmpObj.attrs[ZaAccount.A_zimbraZimletAvailableZimlets] != null) {
			if(!(tmpObj.attrs[ZaAccount.A_zimbraZimletAvailableZimlets] instanceof Array)) {
				mods[ZaAccount.A_zimbraZimletAvailableZimlets] = [tmpObj.attrs[ZaAccount.A_zimbraZimletAvailableZimlets]];
			} else {
				var cnt = tmpObj.attrs[ZaAccount.A_zimbraZimletAvailableZimlets].length;
				if(cnt==0) {
					//no zimlets
					if(this._currentObject.attrs[ZaAccount.A_zimbraZimletAvailableZimlets] == null || !(this._currentObject.attrs[ZaAccount.A_zimbraZimletAvailableZimlets].length==1 && this._currentObject.attrs[ZaAccount.A_zimbraZimletAvailableZimlets][0] == ZaZimlet.NULL_ZIMLET))
						mods[ZaAccount.A_zimbraZimletAvailableZimlets] = [ZaZimlet.NULL_ZIMLET];
				} else {
					mods[ZaAccount.A_zimbraZimletAvailableZimlets] = [];
					for(var i = 0; i < cnt; i++) {
						mods[ZaAccount.A_zimbraZimletAvailableZimlets].push(tmpObj.attrs[ZaAccount.A_zimbraZimletAvailableZimlets][i]);
					}
				}
			}
		} else if(this._currentObject.attrs[ZaAccount.A_zimbraZimletAvailableZimlets] != null) {
			mods[ZaAccount.A_zimbraZimletAvailableZimlets] = "";
		}
	}
     //  save and keep the current tab
    if (this._currentObject[ZaModel.currentTab]!= tmpObj[ZaModel.currentTab])
             this._currentObject[ZaModel.currentTab] = tmpObj[ZaModel.currentTab];
	//save changed fields
	try {	
		this._currentObject.modify(mods, tmpObj);
	} catch (ex) {
		if(ex.code == ZmCsfeException.ACCT_EXISTS) {
			this.popupErrorDialog(ZaMsg.FAILED_CREATE_ACCOUNT_1, ex);
		} else if(ex.code == ZmCsfeException.NO_SUCH_COS) {
			this.popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_NO_SUCH_COS,[tmpObj.attrs[ZaAccount.A_COSId]]), ex);
        } else {
			this._handleException(ex, "ZaAccountViewController.prototype._saveChanges", null, false);	
		}
		return false;
	}

	if(tmpObj.attrs[ZaAccount.A_zimbraMailTransport]) {
		var v = tmpObj.attrs[ZaAccount.A_zimbraMailTransport];
		if(!this.isLegalofMailTransport(v)) return false;
	}

	//add-remove aliases
	var tmpObjCnt = -1;
	var currentObjCnt = -1;
	if(ZaTabView.isTAB_ENABLED(this._currentObject,ZaAccountXFormView.ALIASES_TAB_ATTRS, ZaAccountXFormView.ALIASES_TAB_RIGHTS)) {
		if(tmpObj.attrs[ZaAccount.A_zimbraMailAlias]) {
			if(typeof tmpObj.attrs[ZaAccount.A_zimbraMailAlias] == "string") {
				var tmpStr = tmpObj.attrs[ZaAccount.A_zimbraMailAlias];
				tmpObj.attrs[ZaAccount.A_zimbraMailAlias] = new Array();
				tmpObj.attrs[ZaAccount.A_zimbraMailAlias].push(tmpStr);
			}
			tmpObjCnt = tmpObj.attrs[ZaAccount.A_zimbraMailAlias].length - 1;
		}
		
		if(this._currentObject.attrs[ZaAccount.A_zimbraMailAlias]) {
			if(typeof this._currentObject.attrs[ZaAccount.A_zimbraMailAlias] == "string") {
				var tmpStr = this._currentObject.attrs[ZaAccount.A_zimbraMailAlias];
				this._currentObject.attrs[ZaAccount.A_zimbraMailAlias] = new Array();
				this._currentObject.attrs[ZaAccount.A_zimbraMailAlias].push(tmpStr);
			}
			currentObjCnt = this._currentObject.attrs[ZaAccount.A_zimbraMailAlias].length - 1;
		}
	
		//diff two arrays
		for(var tmpIx=tmpObjCnt; tmpIx >= 0; tmpIx--) {
			for(var currIx=currentObjCnt; currIx >=0; currIx--) {
				if(tmpObj.attrs[ZaAccount.A_zimbraMailAlias][tmpIx] == this._currentObject.attrs[ZaAccount.A_zimbraMailAlias][currIx]) {
					//this alias already exists
					tmpObj.attrs[ZaAccount.A_zimbraMailAlias].splice(tmpIx,1);
					this._currentObject.attrs[ZaAccount.A_zimbraMailAlias].splice(currIx,1);
					break;
				}
			}
		}
		//remove the aliases 
		if(currentObjCnt != -1) {
			currentObjCnt = this._currentObject.attrs[ZaAccount.A_zimbraMailAlias].length;
		} 
		try {
			for(var ix=0; ix < currentObjCnt; ix++) {
				this._currentObject.removeAlias(this._currentObject.attrs[ZaAccount.A_zimbraMailAlias][ix]);
			}
		} catch (ex) {
			this._handleException(ex, "ZaAccountViewController.prototype._saveChanges", null, false);
			return false;
		}
		if(tmpObjCnt != -1) {
			tmpObjCnt = tmpObj.attrs[ZaAccount.A_zimbraMailAlias].length;
		}
		var failedAliases = "";
		var failedAliasesCnt = 0;
		try {
			for(var ix=0; ix < tmpObjCnt; ix++) {
				try {
					if(tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix]) {
						if(tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix].indexOf("@") != tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix].lastIndexOf("@")) {
							//show error msg
							this._errorDialog.setMessage(AjxMessageFormat.format(ZaMsg.ERROR_ALIAS_INVALID,[tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix]]), null, DwtMessageDialog.CRITICAL_STYLE, null);
							this._errorDialog.popup();		
							break;						
						}						
						this._currentObject.addAlias(tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix]);
					}
				} catch (ex) {
					if(ex.code == ZmCsfeException.ACCT_EXISTS) {
						//if failed because account exists just show a warning
						var account = this._findAlias(tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix]);
						switch(account.type) {
							case ZaItem.DL:
								if(account.name == tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix]) {
									failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS3,[account.name]);								
								} else {
									failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS4,[account.name, tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix]]);								
								}
							break;
							case ZaItem.ACCOUNT:
								if(account.name == tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix]) {
									failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS2,[account.name]);								
								} else {
									failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS1,[account.name, tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix]]);								
								}							
							break;	
							case ZaItem.RESOURCE:
								if(account.name == tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix]) {
									failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS5,[account.name]);								
								} else {
									failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS6,[account.name, tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix]]);								
								}							
							break;							
							default:
								failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS0,[tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix]]);							
							break;
						}
						failedAliasesCnt++;
					} else {
						//if failed for another reason - jump out
						throw (ex);
					}
				}
			}
	
			if(failedAliasesCnt == 1) {
				this._errorDialog.setMessage(AjxMessageFormat.format(ZaMsg.WARNING_ALIAS_EXISTS, [failedAliases]), "", DwtMessageDialog.WARNING_STYLE, ZabMsg.zimbraAdminTitle);
				this._errorDialog.popup();			
			} else if(failedAliasesCnt > 1) {
				this._errorDialog.setMessage(AjxMessageFormat.format(ZaMsg.WARNING_ALIASES_EXIST, [failedAliases]), "", DwtMessageDialog.WARNING_STYLE, ZabMsg.zimbraAdminTitle);
				this._errorDialog.popup();			
			}
		} catch (ex) {
			this.popupErrorDialog(ZaMsg.FAILED_ADD_ALIASES, ex);	
			return false;
		}
	}
	
	//check to see if the rename of account is needed.
	var newName=null;
	if(this._currentObject && tmpObj.name != this._currentObject.name) {
		//var emailRegEx = /^([a-zA-Z0-9_\-])+((\.)?([a-zA-Z0-9_\-])+)*@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
		/*if(!AjxUtil.EMAIL_SHORT_RE.test(tmpObj.name) ) {
			//show error msg
			this._errorDialog.setMessage(ZaMsg.ERROR_ACCOUNT_NAME_INVALID, null, DwtMessageDialog.CRITICAL_STYLE, null);
			this._errorDialog.popup();		
			return false;
		}*/
		newName = tmpObj.name;
	}
	
	if(newName) {
		try {
			this._currentObject.rename(newName);
		} catch (ex) {
			if(ex.code == ZmCsfeException.ACCT_EXISTS) {
				this.popupErrorDialog(ZaMsg.FAILED_RENAME_ACCOUNT_1, ex);
			} else {
				this._handleException(ex, "ZaAccountViewController.prototype._saveChanges", null, false);	
			}
			return false;
		}
	}

    ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.AccountModified,[this._currentObject.name]));
    //TODO: may need to check if the account type update is needed. update the domain account limits object
    return true;
}

ZaAccountViewController.prototype.getPopUpOperation =
function() {
    return this._popupOperations;
}

// new button was pressed
ZaAccountViewController.prototype._newButtonListener =
function(ev) {
	try {
		var newAccount = new ZaAccount();
		newAccount.loadNewObjectDefaults("name", ZaSettings.myDomainName);		
		if(!ZaApp.getInstance()._newAccountWizard)
			ZaApp.getInstance()._newAccountWizard = new ZaNewAccountXWizard(this._container,newAccount);
        else { //update the account type if needed
            ZaApp.getInstance()._newAccountWizard.updateAccountType () ;    
        }

        ZaApp.getInstance()._newAccountWizard.setObject(newAccount);
		ZaApp.getInstance()._newAccountWizard.popup();
	} catch (ex) {
		this._handleException(ex, "ZaAccountViewController.prototype._newButtonListener", null, false);
	}
}

ZaAccountViewController.prototype._expireSessionListener =
function(ev) {
	try {
		if(this._currentObject) {
			var item = this._currentObject;

			if(ZaItem.hasWritePermission(ZaAccount.A_zimbraAuthTokenValidityValue,item)) {
				ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(ZaMsg.WARN_EXPIRE_SESSIONS, DwtMessageDialog.WARNING_STYLE);
				ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, ZaAccountListController.prototype.expireSessions, this, [item]);
				ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.NO_BUTTON, this.closeCnfrmDlg, this, null);
				ZaApp.getInstance().dialogs["confirmMessageDialog"].popup();
			} else {
				this.popupMsgDialog(AjxMessageFormat.format(ZaMsg.ERROR_NO_PERMISSION_FOR_OPERATION_ON, [item.name ? item.name : item.attrs[ZaAccount.A_accountName]]), true);
			}
		}
 	}catch(ex){
		this._handleException(ex, "ZaAccountViewController.prototype._expireSessionListener", null, false);
	}
}

ZaAccountViewController.prototype._reindexMbxListener = 
function (ev) {
	try {

		if(!ZaApp.getInstance().dialogs["reindexWizard"])
			ZaApp.getInstance().dialogs["reindexWizard"] = new ReindexMailboxXDialog(this._container);	

		var obj = new ZaReindexMailbox();
		obj.mbxId = this._currentObject.id;
		ZaApp.getInstance().dialogs["reindexWizard"].setObject(obj);
		ZaApp.getInstance().dialogs["reindexWizard"].popup();
	} catch (ex) {
		this._handleException(ex, "ZaAccountViewController.prototype._reindexMbxListener", null, false);
	}

}

ZaAccountViewController.prototype._viewMailListener =
function(ev) {
	try {
		if(this._currentObject && this._currentObject.id) {
			ZaAccountListController._viewMailListenerLauncher.call(this, this._currentObject);
		}
	} catch (ex) {
		this._handleException(ex, "ZaAccountViewController.prototype._viewMailListener", null, false);			
	}
}

ZaAccountViewController.prototype._handleException = 
function (ex, method, params, restartOnError, obj) {
	if(ex.code == ZmCsfeException.SVC_WRONG_HOST) {
		var szMsg = ZaMsg.ERROR_WRONG_HOST;
		if(ex.detail) {
			szMsg +="<br>Details:<br>";
			szMsg += ex.detail;
		}
		this._errorDialog.setMessage(szMsg, null, DwtMessageDialog.CRITICAL_STYLE, null);
		this._errorDialog.popup();					
	} else if(ex.code == ZmCsfeException.ACCT_EXISTS) {
		this._errorDialog.setMessage(ZaMsg.ERROR_ACCOUNT_EXISTS, null, DwtMessageDialog.CRITICAL_STYLE, null);
		this._errorDialog.popup();
	} else {
		ZaController.prototype._handleException.call(this, ex, method, params, restartOnError, obj);				
	}	
}

ZaAccountViewController.prototype.isLegalofMailTransport =
function(elementValue) {
	if(!elementValue) return false;

	var regex = new RegExp("(lmtp|smtp|LMTP|SMTP)\\:[\\w\\.\\-]+\\:[0-9]+$");
	var match = regex.exec(elementValue);
	if(match != null) {
		return true;
	}
	else {
		this._errorDialog.setMessage(ZaMsg.ERROR_MAILTRANSPORT_INVALID, null, DwtMessageDialog.CRITICAL_STYLE, null);
		this._errorDialog.popup();
	}
	return false;	
}

ZaAccountViewController.prototype._getLDAPAttr = 
function(email) {
	if (email) {
		let attrString = 'uid=';
		let emailStringArray = email.split('@');
		attrString = attrString + emailStringArray[0] + ',ou=people';
		emailStringArray = emailStringArray.length > 1 && emailStringArray[1].split('.');
		const reducer = function(accumulator, currentValue) { return accumulator + ',dc=' + currentValue };
		attrString = emailStringArray.reduce(reducer, attrString);
		return attrString;
	}
}
}
//AjxPackage.require("zimbraAdmin.accounts.controller.ZaAccAliasesController");
if (AjxPackage.define("zimbraAdmin.cos.controller.ZaCosListController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

ZaCosListController = function(appCtxt, container) {
	ZaListViewController.call(this, appCtxt, container,"ZaCosListController");
	this.objType = ZaEvent.S_COS;
    this._defaultType = ZaItem.COS;
	this._currentSortField = ZaCos.A_name;
	this._currentPageNum = 1;
	this._currentSortOrder = "1";
	this._helpURL = ZaUtil.HELP_URL;
	this._helpButtonText = ZaMsg.helpManageCOS;
	this._currentQuery = "";
	this.fetchAttrs = [ZaCos.A_name,ZaCos.A_description].join();
	this.RESULTSPERPAGE = ZaDomain.RESULTSPERPAGE; 
	this.MAXSEARCHRESULTS = ZaDomain.MAXSEARCHRESULTS;	
}

ZaCosListController.prototype = new ZaListViewController();
ZaCosListController.prototype.constructor = ZaCosListController;
ZaController.initToolbarMethods["ZaCosListController"] = new Array();
ZaController.initPopupMenuMethods["ZaCosListController"] = new Array();
ZaController.changeActionsStateMethods["ZaCosListController"] = new Array(); 

//ZaCosListController.COS_VIEW = "ZaCosListController.COS_VIEW";

ZaCosListController.prototype.show = function (doPush,openInNewTab) {

    if(!ZaZimbraAdmin.hasGlobalCOSSListAccess() && this._currentQuery == "") {
        var cosNameList = ZaApp.getInstance()._cosNameList;
        if(!cosNameList || !(cosNameList instanceof Array) || cosNameList.length == 0) {
            this._list = new ZaItemList(ZaCos);
            this.numPages = 0;
            this._searchTotal = 0;
            if(doPush) this._show(this._list);
            else this._updateUI(this._list);
            return;
        }
        for(var i = 0; i < cosNameList.length; i++)
            this._currentQuery += "(" + ZaCos.A_name + "=" + cosNameList[i] + ")";
        if(cosNameList.length > 1)
            this._currentQuery = "(|" + this._currentQuery + ")";
    }

	var busyId = Dwt.getNextId () ;
	openInNewTab = openInNewTab ? openInNewTab : false;
	var callback = new AjxCallback(this, this.searchCallback, {openInNewTab:openInNewTab,limit:this.RESULTSPERPAGE,CONS:null,show:doPush,busyId:busyId});
	
	var searchParams = {
			query:this._currentQuery ,
			types:[ZaSearch.COSES],
			sortBy:this._currentSortField,
			offset:this.RESULTSPERPAGE*(this._currentPageNum-1),
			sortAscending:this._currentSortOrder,
			limit:this.RESULTSPERPAGE,
			callback:callback,
			attrs:this.fetchAttrs,
			controller: this,
			showBusy:true,
			busyId:busyId,
			busyMsg:ZaMsg.BUSY_SEARCHING_COSES,
			skipCallbackIfCancelled:false			
	}
    this.scrollSearchParams={
        query:this._currentQuery ,
			types:[ZaSearch.COSES],
			sortBy:this._currentSortField,
			sortAscending:this._currentSortOrder,
			attrs:this.fetchAttrs,
			controller: this,
			showBusy:true,
			busyMsg:ZaMsg.BUSY_SEARCHING_COSES,
			skipCallbackIfCancelled:false
    };
	ZaSearch.searchDirectory(searchParams);
}

ZaCosListController.prototype.searchCallback = function(params, resp) {
	ZaListViewController.prototype.searchCallback.call(this, params, resp);
	var app = ZaApp.getInstance();
	app._cosList = this._list;
	app._cosListName = undefined;
};

ZaCosListController.prototype._show = 
function (list, openInNewTab, openInSearchTab, hasMore) {
	this._updateUI(list, openInNewTab, openInSearchTab, hasMore);
	ZaApp.getInstance().pushView(this.getContentViewId (), openInNewTab, openInSearchTab);
    return;
}


ZaCosListController.initPopupMenuMethod =
function () {
	if(ZaZimbraAdmin.canCreateCos()) {
   		this._popupOperations[ZaOperation.NEW]=new ZaOperation(ZaOperation.NEW,ZaMsg.TBB_New, ZaMsg.COSTBB_New_tt, "NewCOS", "NewCOSDis", new AjxListener(this, ZaCosListController.prototype._newButtonListener));
   		this._popupOperations[ZaOperation.DUPLICATE]=new ZaOperation(ZaOperation.DUPLICATE,ZaMsg.TBB_Duplicate, ZaMsg.COSTBB_Duplicate_tt, "DuplicateCOS", "DuplicateCOSDis", new AjxListener(this, ZaCosListController.prototype._duplicateButtonListener));
	}
   	this._popupOperations[ZaOperation.EDIT]=new ZaOperation(ZaOperation.EDIT,ZaMsg.TBB_Edit, ZaMsg.COSTBB_Edit_tt, "Properties", "PropertiesDis", new AjxListener(this, ZaCosListController.prototype._editButtonListener));    	    	
	this._popupOperations[ZaOperation.DELETE]=new ZaOperation(ZaOperation.DELETE,ZaMsg.TBB_Delete, ZaMsg.COSTBB_Delete_tt, "Delete", "DeleteDis", new AjxListener(this, ZaCosListController.prototype._deleteButtonListener));   		
}
ZaController.initPopupMenuMethods["ZaCosListController"].push(ZaCosListController.initPopupMenuMethod);

/**
* This method is called from {@link ZaController#_initToolbar}
**/
ZaCosListController.initToolbarMethod =
function () {
		
}
ZaController.initToolbarMethods["ZaCosListController"].push(ZaCosListController.initToolbarMethod);

//private and protected methods
ZaCosListController.prototype._createUI = 
function (openInNewTab, openInSearchTab) {
	this._contentView = new ZaCosListView(this._container, this._defaultType);
	ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
	// create the menu operations/listeners first	
    //this._initToolbar();
	//always add Help and navigation buttons at the end of the toolbar    
	//this._toolbarOperations[ZaOperation.NONE] = new ZaOperation(ZaOperation.NONE);	
	//this._toolbarOperations[ZaOperation.PAGE_BACK]=new ZaOperation(ZaOperation.PAGE_BACK,ZaMsg.Previous, ZaMsg.PrevPage_tt, "LeftArrow", "LeftArrowDis",  new AjxListener(this, this._prevPageListener));
	
	//add the acount number counts
	
	//this._toolbarOperations[ZaOperation.PAGE_FORWARD]=new ZaOperation(ZaOperation.PAGE_FORWARD,ZaMsg.Next, ZaMsg.NextPage_tt, "RightArrow", "RightArrowDis", new AjxListener(this, this._nextPageListener));
	//this._toolbarOperations[ZaOperation.HELP]=new ZaOperation(ZaOperation.HELP,ZaMsg.TBB_Help, ZaMsg.TBB_Help_tt, "Help", "Help", new AjxListener(this, this._helpButtonListener));				

	//this._toolbar = new ZaToolBar(this._container, this._toolbarOperations,this._toolbarOrder, null, null, ZaId.VIEW_COSLIST);    
		
	var elements = new Object();
	elements[ZaAppViewMgr.C_APP_CONTENT] = this._contentView;
    ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);

	this._initPopupMenu();
	this._actionMenu =  new ZaPopupMenu(this._contentView, "ActionMenu", null, this._popupOperations, ZaId.VIEW_COSLIST, ZaId.MENU_POP);
	
	//set a selection listener on the account list view
	this._contentView.addSelectionListener(new AjxListener(this, this._listSelectionListener));
	this._contentView.addActionListener(new AjxListener(this, this._listActionListener));			
	this._removeConfirmMessageDialog = ZaApp.getInstance().dialogs["removeConfirmMessageDialog"] = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON], null, ZaId.CTR_PREFIX + ZaId.VIEW_COSLIST + "_removeConfirm");			
		
	this._UICreated = true;
}


// refresh button was pressed
ZaCosListController.prototype._refreshButtonListener =
function(ev) {
	this.refresh();
}


// duplicate button was pressed
ZaCosListController.prototype._duplicateButtonListener =
function(ev) {
	if(this._contentView && (this._contentView.getSelectionCount() == 1)) {
		var newCos = new ZaCos(); //new COS
		var item = this._contentView.getSelection()[0];
		if(item) { //copy the attributes from the selected COS to the new COS
            //need to get the cos first since rights, getAttrs and setAttrs are not in the cos list object
            if (item.id) {
                item.load ("id", item.id) ;
            }

            if ( item.attrs ) {
                for(var aname in item.attrs) {
                    if( (aname == ZaItem.A_objectClass) || (aname == ZaItem.A_zimbraId) || (aname == ZaCos.A_name) || (aname == ZaCos.A_description) || (aname == ZaCos.A_zimbraNotes) || (aname == ZaItem.A_zimbraCreateTimestamp) )
                        continue;

                    if ( (typeof item.attrs[aname] == "object") || (item.attrs[aname] instanceof Array)) {
                        newCos.attrs[aname] = AjxUtil.createProxy(item.attrs[aname],3);
                        /*for(var a in item.attrs[aname]) {
                            newCos.attrs[aname][a]=item.attrs[aname][a];
                        }*/
                    } else {
                        newCos.attrs[aname] = item.attrs[aname];
                    }
                }
            }


            newCos.attrs[ZaCos.A_zimbraNotes] = AjxMessageFormat.format(ZaMsg.COSTBB_DuplicatingFrom_tt, [item.attrs[ZaCos.A_name]]);
            //explicitly note the user this is duplicated from the one they select,
            //instead of showing nothing at the first page of ZaNewCosXWizard

            if (item.getAttrs)   {
                newCos.getAttrs = item.getAttrs ;
            }

            if (item.setAttrs) {
                newCos.setAttrs = item.setAttrs ;
            }

            if (item.rights) {
                newCos.rights = item.rights ;
            }
        }

        ZaCosListController.showMe.call(this, newCos);
	}
}

// new button was pressed
ZaCosListController.prototype._newButtonListener =
function(ev) {
	var newCos = new ZaCos();
	//load default COS
	var defCos = ZaCos.getCosByName("default");
	newCos.loadNewObjectDefaults();
	newCos.rights[ZaCos.RENAME_COS_RIGHT]=true;
	newCos.rights[ZaCos.CREATE_COS_RIGHT]=true;
	//copy values from default cos to the new cos
	for(var aname in defCos.attrs) {
		if( (aname == ZaItem.A_objectClass) || (aname == ZaItem.A_zimbraId) || (aname == ZaCos.A_name) || (aname == ZaCos.A_description) || (aname == ZaCos.A_notes) || (aname == ZaItem.A_zimbraCreateTimestamp))
			continue;			
		newCos.attrs[aname] = defCos.attrs[aname];
	}

    ZaCosListController.showMe.call(this, newCos);
}

/**
* This listener is called when the item in the list is double clicked. It call ZaCosController.show method
* in order to display the Cos View
**/
ZaCosListController.prototype._listSelectionListener =
function(ev) {
	if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		if(ev.item) {
			ZaApp.getInstance().getCosController().show(ev.item);
            var parentPath = ZaTree.getPathByArray([ZaMsg.OVP_home, ZaMsg.OVP_configure, ZaMsg.OVP_cos]);
            ZaZimbraAdmin.getInstance().getOverviewPanelController().addObjectItem(parentPath, ev.item.name, null, false, false, ev.item, undefined, true);
		}
	} else {
		this.changeActionsState();	
	}
}


ZaCosListController.prototype._listActionListener =
function (ev) {
	this.changeActionsState();
	this._actionMenu.popup(0, ev.docX, ev.docY);
}

/**
* This listener is called when the Edit button is clicked. 
* It call ZaCosListController.show method
* in order to display the COS View
**/
ZaCosListController.prototype._editButtonListener =
function(ev) {
	if(this._contentView.getSelectionCount() == 1) {
		var item = this._contentView.getSelection()[0];
        this._editItem(item);
	}
}

ZaCosListController.prototype._editItem =
function(item) {
    ZaApp.getInstance().getCosController().show(item);
    var parentPath = ZaTree.getPathByArray([ZaMsg.OVP_home, ZaMsg.OVP_configure, ZaMsg.OVP_cos]);
    ZaZimbraAdmin.getInstance().getOverviewPanelController().addObjectItem(parentPath, item.name, null, false, false, item);
}

/**
* This listener is called when the Delete button is clicked. 
**/
ZaCosListController.prototype._deleteButtonListener =
function(ev) {
	this._removeList = new Array();
	this._itemsInTabList = [] ;
	if(this._contentView.getSelectionCount() > 0) {
		var arrItems = this._contentView.getSelection();
		var cnt = arrItems.length;
		for(var key =0; key < cnt; key++) {
			var item = arrItems[key];
			if (item) {
				//detect whether the deleting item is open in a tab
				if (ZaApp.getInstance().getTabGroup() && ZaApp.getInstance().getTabGroup().getTabByItemId (item.id)) {
					this._itemsInTabList.push (item) ;
				}else{
					this._removeList.push(item);
				}
			}
		}
	}
	
	if (this._itemsInTabList.length > 0) {
		if(!ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"]) {
			ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"] = 
				new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.CANCEL_BUTTON], 
						[ZaMsgDialog.CLOSE_TAB_DELETE_BUTTON_DESC , ZaMsgDialog.NO_DELETE_BUTTON_DESC],
						ZaId.CTR_PREFIX + ZaId.VIEW_COSLIST + "_ConfirmDeleteItemsInTab");			
		}
		
		
		var msg = ZaMsg.dl_warning_delete_accounts_in_tab ; ;
		msg += ZaCosListController.getDlMsgFromList (this._itemsInTabList) ;
		
		ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].setMessage(msg, DwtMessageDialog.WARNING_STYLE);	
		ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].registerCallback(
				ZaMsgDialog.CLOSE_TAB_DELETE_BUTTON, ZaCosListController.prototype._closeTabsBeforeRemove, this);
		ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].registerCallback(
				ZaMsgDialog.NO_DELETE_BUTTON, ZaCosListController.prototype._deleteCosInRemoveList, this);		
		ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].popup();
		
	}else{
		this._deleteCosInRemoveList ();
	}
}

ZaCosListController.prototype._closeTabsBeforeRemove =
function () {
	//DBG.println (AjxDebug.DBG1, "Close the tabs before Remove ...");
	this.closeTabsInRemoveList() ;
	/*
	var tabGroup = ZaApp.getInstance().getTabGroup();
	for (var i=0; i< this._itemsInTabList.length ; i ++) {
		var item = this._itemsInTabList[i];
		tabGroup.removeTab (tabGroup.getTabByItemId(item.id)) ;
		this._removeList.push(item);
	}*/
	//ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].popdown();
	this._deleteCosInRemoveList();
}

ZaCosListController.prototype._deleteCosInRemoveList =
function () {
	if (ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"]) {
		ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].popdown();
	}
	if(this._removeList.length) {
		var dlgMsg = ZaMsg.Q_DELETE_COSES;
		dlgMsg += ZaCosListController.getDlMsgFromList (this._removeList) ;
		this._removeConfirmMessageDialog.setMessage(dlgMsg, DwtMessageDialog.INFO_STYLE);
		this._removeConfirmMessageDialog.registerCallback(DwtDialog.YES_BUTTON, ZaCosListController.prototype._deleteCosCallback, this);
		this._removeConfirmMessageDialog.registerCallback(DwtDialog.NO_BUTTON, ZaCosListController.prototype._donotDeleteCosCallback, this);		
		this._removeConfirmMessageDialog.popup();
	}
	
} 

ZaCosListController.getDlMsgFromList =
function (listArr) {
	dlgMsg =  "<br><ul>";
	var i=0, name;

	for(var key in listArr) {
		if(i > 19) {
			dlgMsg += "<li>...</li>";
			break;
		}
		dlgMsg += "<li>";

		name = listArr[key].name;
		if(name.length > 50) {
			//split it
			var endIx = 49;
			var beginIx = 0; //
			while(endIx < name.length) { //
				dlgMsg +=  AjxStringUtil.htmlEncode(name.slice(beginIx, endIx)); //
				beginIx = endIx + 1; //
				if(beginIx >= (name.length) ) //
					break;
				
				endIx = ( name.length <= (endIx + 50) ) ? name.length-1 : (endIx + 50);
				dlgMsg +=  "<br>";	
			}
		} else {
			dlgMsg += AjxStringUtil.htmlEncode(name);
		}
		dlgMsg += "</li>";
		i++;
	}
	dlgMsg += "</ul>";
	
	return dlgMsg ;
}


ZaCosListController.prototype._deleteCosCallback = 
function () {
	var successRemList=new Array();
	for(var key in this._removeList) {
		if(this._removeList[key]) {
			try {
				this._removeList[key].remove();
				successRemList.push(this._removeList[key]);				
			} catch (ex) {
				this._removeConfirmMessageDialog.popdown();
				this._handleException(ex, ZaCosListController.prototype._deleteCosCallback, null, false);
				return;
			}
		}
		if (this._list) this._list.remove(this._removeList[key]); //remove from the list
	}
	this.fireRemovalEvent(successRemList); 	
	this._removeConfirmMessageDialog.popdown();
	if (this._contentView) this._contentView.setUI();
	this.show();
}

ZaCosListController.prototype._donotDeleteCosCallback = 
function () {
	this._removeList = new Array();
	this._removeConfirmMessageDialog.popdown();
}

ZaCosListController.changeActionsStateMethod = 
function (enableArray,disableArray) {
	if(!this._contentView)
		return;
	
	var cnt = this._contentView.getSelectionCount();
	var hasDefault = false;
	if(cnt >= 1) {
		var arrDivs = this._contentView.getSelectedItems().getArray();
		for(var key in arrDivs) {
			var item = this._contentView.getItemFromElement(arrDivs[key]);
			if(item) {
				if(item.name == "default") {
					hasDefault = true;
					break;
				}		
			}
		}
	}
	if(cnt == 1) {
		var item = this._contentView.getSelection()[0];
		if(item) {
			if(hasDefault) {
				if(this._popupOperations[ZaOperation.DELETE]) {
					this._popupOperations[ZaOperation.DELETE].enabled=false;
				}
			} else {
				if (AjxUtil.isEmpty(item.rights)) {
					item.loadEffectiveRights("id", item.id, false);
				}
				if(!ZaItem.hasRight(ZaCos.DELETE_COS_RIGHT, item)) {
					if(this._popupOperations[ZaOperation.DELETE]) {
						this._popupOperations[ZaOperation.DELETE].enabled=false;
					}
				}
			}
		}
	} else if (cnt > 1){
		if(hasDefault) {
			if(this._popupOperations[ZaOperation.DELETE]) {
				this._popupOperations[ZaOperation.DELETE].enabled=false;
			}					
		}
		
		if(this._popupOperations[ZaOperation.DUPLICATE] && this._popupOperations[ZaOperation.DUPLICATE].enabled) {
			this._popupOperations[ZaOperation.DUPLICATE].enabled=false;
		}		
		if(this._popupOperations[ZaOperation.EDIT]) {
			this._popupOperations[ZaOperation.EDIT].enabled=false;
		}					
	} else {
		if(this._popupOperations[ZaOperation.EDIT]) {
			this._popupOperations[ZaOperation.EDIT].enabled=false;
		}	
		if(this._popupOperations[ZaOperation.DELETE]) {
			this._popupOperations[ZaOperation.DELETE].enabled=false;
		}	
		if(this._popupOperations[ZaOperation.DUPLICATE] && this._popupOperations[ZaOperation.DUPLICATE].enabled) {
			this._popupOperations[ZaOperation.DUPLICATE].enabled=false;
		}		
	}
}
ZaController.changeActionsStateMethods["ZaCosListController"].push(ZaCosListController.changeActionsStateMethod);

ZaCosListController.showMe = function(newCos)
{
    if(!ZaApp.getInstance().dialogs["newCosXWizard"]){
        ZaApp.getInstance().dialogs["newCosXWizard"] = new ZaNewCosXWizard(this._container,newCos);
    }
    ZaApp.getInstance().dialogs["newCosXWizard"].setObject(newCos);
    ZaApp.getInstance().dialogs["newCosXWizard"].popup();
}
}
if (AjxPackage.define("zimbraAdmin.cos.controller.ZaCosController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaCosController controls display of a single COS
* @contructor ZaCosController
* @param appCtxt
* @param container
* @param abApp
**/

ZaCosController = function(appCtxt, container) {
	ZaXFormViewController.call(this, appCtxt, container, "ZaCosController");
	this._UICreated = false;	
	this._helpURL = ZaCosController.helpURL;
	this._helpButtonText = ZaMsg.helpEditCOS;
	this.deleteMsg = ZaMsg.Q_DELETE_COS;
	this.objType = ZaEvent.S_COS;
	this.tabConstructor = ZaCosXFormView;
}
ZaCosController.helpURL = "cos/creating_classes_of_service.htm";
ZaCosController.prototype = new ZaXFormViewController();
ZaCosController.prototype.constructor = ZaCosController;
ZaController.initPopupMenuMethods["ZaCosController"] = new Array();
ZaController.setViewMethods["ZaCosController"] = new Array();
ZaController.changeActionsStateMethods["ZaCosController"] = new Array();
/**
*	@method show
*	@param entry - isntance of ZaCos class
*/

ZaCosController.prototype.show = 
function(entry) {
	//check if the tab with the same cos ei
	if (! this.selectExistingTabByItemId(entry.id)){
		this._setView(entry, true);
	}
}

ZaCosController.changeActionsStateMethod = function () {
	if(this._currentObject.name == "default") {
        this._popupOperations[ZaOperation.DELETE].enabled = false;
	} else if(!ZaItem.hasRight(ZaCos.DELETE_COS_RIGHT,this._currentObject))	{
        this._popupOperations[ZaOperation.DELETE].enabled = false;
	}

    var isToEnable = (this._view && this._view.isDirty());

    if(this._popupOperations[ZaOperation.SAVE]) {
        this._popupOperations[ZaOperation.SAVE].enabled = isToEnable;
    }
		
}
ZaController.changeActionsStateMethods["ZaCosController"].push(ZaCosController.changeActionsStateMethod);

ZaCosController.initPopupMenuMethod =
function () {
	this._popupOperations[ZaOperation.SAVE]=new ZaOperation(ZaOperation.SAVE,ZaMsg.TBB_Save, ZaMsg.COSTBB_Save_tt, "Save", "SaveDis", new AjxListener(this, this.saveButtonListener));

	if(ZaZimbraAdmin.canCreateCos()) {
		this._popupOperations[ZaOperation.NEW]=new ZaOperation(ZaOperation.NEW,ZaMsg.TBB_New, ZaMsg.COSTBB_New_tt, "NewCOS", "NewCOSDis", new AjxListener(this, ZaCosController.prototype._newButtonListener, [true]));
	}
	this._popupOperations[ZaOperation.DELETE]=new ZaOperation(ZaOperation.DELETE,ZaMsg.TBB_Delete, ZaMsg.COSTBB_Delete_tt, "Delete", "DeleteDis", new AjxListener(this, this.deleteButtonListener));
}
ZaController.initPopupMenuMethods["ZaCosController"].push(ZaCosController.initPopupMenuMethod);

/**
*	@method setViewMethod 
*	@param entry - isntance of ZaCos class
*/
ZaCosController.setViewMethod =
function(entry) {
	try {
		entry[ZaModel.currentTab] = "1"
		if(entry.id)
			entry.load("id", entry.id);
			
		this._currentObject = entry;
		
         //create toolbar
		//this._initToolbar();
        this._initPopupMenu();
		//always add Help button at the end of the toolbar		
//		this._toolbarOperations[ZaOperation.NONE] = new ZaOperation(ZaOperation.NONE);
//		this._toolbarOperations[ZaOperation.HELP]=new ZaOperation(ZaOperation.HELP,ZaMsg.TBB_Help, ZaMsg.TBB_Help_tt, "Help", "Help", new AjxListener(this, this._helpButtonListener));
//		this._toolbarOrder.push(ZaOperation.NONE);
//		this._toolbarOrder.push(ZaOperation.HELP);	
		//this._toolbar = new ZaToolBar(this._container, this._toolbarOperations,this._toolbarOrder, null, null, ZaId.VIEW_COS);

	  	this._contentView = this._view = new this.tabConstructor(this._container,  entry);
		var elements = new Object();
		elements[ZaAppViewMgr.C_APP_CONTENT] = this._view;
        ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
		ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;

		ZaApp.getInstance().pushView(this.getContentViewId());
		this._view.setDirty(false);
	  	this._view.setObject(entry);

	} catch (ex) {
		this._handleException(ex, "ZaCosController.prototype._setView", null, false);	
	}
	
}
ZaController.setViewMethods["ZaCosController"].push(ZaCosController.setViewMethod);
/*
ZaCosController.prototype.getAppBarAction =
function () {
    if (AjxUtil.isEmpty(this._appbarOperation)) {
    	this._appbarOperation[ZaOperation.HELP]=new ZaOperation(ZaOperation.HELP,ZaMsg.TBB_Help, ZaMsg.TBB_Help_tt, "Help", "Help", new AjxListener(this, this._helpButtonListener));
    	this._appbarOperation[ZaOperation.SAVE]= new ZaOperation(ZaOperation.SAVE, ZaMsg.TBB_Save, ZaMsg.ALTBB_Save_tt, "", "", new AjxListener(this, this.saveButtonListener));
        this._appbarOperation[ZaOperation.CLOSE] = new ZaOperation(ZaOperation.CLOSE, ZaMsg.TBB_Close, ZaMsg.ALTBB_Close_tt, "", "", new AjxListener(this, this.closeButtonListener));
    }

    return this._appbarOperation;
}

ZaCosController.prototype.getAppBarOrder =
function () {
    if (AjxUtil.isEmpty(this._appbarOrder)) {
    	this._appbarOrder.push(ZaOperation.HELP);
    	this._appbarOrder.push(ZaOperation.SAVE);
        this._appbarOrder.push(ZaOperation.CLOSE);
    }

    return this._appbarOrder;
}*/


/**
* saves the changes in the fields, calls modify or create on the current ZaCos
* @return Boolean - indicates if the changes were succesfully saved
**/
ZaCosController.prototype._saveChanges =
function () {

	//check if the XForm has any errors
	if(this._view.getMyForm().hasErrors()) {
		var errItems = this._view.getMyForm().getItemsInErrorState();
		var dlgMsg = ZaMsg.CORRECT_ERRORS;
		dlgMsg +=  "<br><ul>";
		var i = 0;
		for(var key in errItems) {
			if(i > 19) {
				dlgMsg += "<li>...</li>";
				break;
			}
			if(key == "size") continue;
			var label = errItems[key].getInheritedProperty("msgName");
			if(!label && errItems[key].getParentItem()) { //this might be a part of a composite
				label = errItems[key].getParentItem().getInheritedProperty("msgName");
			}
			if(label) {
				if(label.substring(label.length-1,1)==":") {
					label = label.substring(0, label.length-1);
				}
			}
			if(label) {
				dlgMsg += "<li>";
				dlgMsg +=label;			
				dlgMsg += "</li>";
			}
			i++;
		}
		dlgMsg += "</ul>";
		this.popupMsgDialog(dlgMsg,  true);
		return false;
	}
	
	//check if the data is copmlete 
	var tmpObj = this._view.getObject();
	var isNew = false;
	//Check the data
    if(!ZaCos.checkValues(tmpObj))
			return false;


	var mods = new Object();
	//var changeDetails = new Object();
	if(!tmpObj.id)
		isNew = true;
		
	//transfer the fields from the tmpObj to the _currentObject
	for (var a in tmpObj.attrs) {
		if(a == ZaItem.A_objectClass || a == ZaItem.A_zimbraId || a == ZaCos.A_zimbraAvailableSkin
                || a == ZaCos.A_zimbraZimletAvailableZimlets || a == ZaCos.A_zimbraMailHostPool
                || a == ZaItem.A_zimbraACE || a== ZaItem.A_zimbraCreateTimestamp) {
			continue;
		}
		if(!ZaItem.hasWritePermission(a,tmpObj)) {
			continue;
		}
		//check if the value has been modified or the object is new
		if (isNew || (this._currentObject.attrs[a] != tmpObj.attrs[a]) ) {
			mods[a] = tmpObj.attrs[a];
		}
	}
	//check if host pool has been changed

	if(tmpObj.attrs[ZaCos.A_zimbraMailHostPool] != null) {
		var tmpMods = [];
		if(!(tmpObj.attrs[ZaCos.A_zimbraMailHostPool] instanceof Array)) {
			tmpMods = [tmpObj.attrs[ZaCos.A_zimbraMailHostPool]];
		} else {
			var cnt = tmpObj.attrs[ZaCos.A_zimbraMailHostPool].length;
			tmpMods = [];
			for(var i = 0; i < cnt; i++) {
				tmpMods.push(tmpObj.attrs[ZaCos.A_zimbraMailHostPool][i]);
			}
		}
		//check if changed
		if(!isNew && this._currentObject.attrs[ZaCos.A_zimbraMailHostPool] != null) {
			if(this._currentObject.attrs[ZaCos.A_zimbraMailHostPool] instanceof Array) {
				if(tmpMods.join(",") != this._currentObject.attrs[ZaCos.A_zimbraMailHostPool].join(",")) {
					mods[ZaCos.A_zimbraMailHostPool] = tmpMods;
				}
			} else if (tmpMods.join(",") != [this._currentObject.attrs[ZaCos.A_zimbraMailHostPool]].join(",")) {
				mods[ZaCos.A_zimbraMailHostPool] = tmpMods;
			}
		} else {
			mods[ZaCos.A_zimbraMailHostPool] = tmpMods;
		}
	} else if(this._currentObject.attrs[ZaCos.A_zimbraMailHostPool] != null) {
		mods[ZaCos.A_zimbraMailHostPool] = "";
	}

	if(tmpObj.attrs[ZaCos.A_zimbraAvailableSkin] != null) {
		var tmpMods = [];
		if(!(tmpObj.attrs[ZaCos.A_zimbraAvailableSkin] instanceof Array)) {
			tmpMods = [tmpObj.attrs[ZaCos.A_zimbraAvailableSkin]];
		} else {
			var cnt = tmpObj.attrs[ZaCos.A_zimbraAvailableSkin].length;
			tmpMods = [];
			for(var i = 0; i < cnt; i++) {
				tmpMods.push(tmpObj.attrs[ZaCos.A_zimbraAvailableSkin][i]);
			}
		}
			//check if changed
		if(this._currentObject.attrs[ZaCos.A_zimbraAvailableSkin] != null) {
			if(this._currentObject.attrs[ZaCos.A_zimbraAvailableSkin] instanceof Array) {
				if(tmpMods.join(",") != this._currentObject.attrs[ZaCos.A_zimbraAvailableSkin].join(",")) {
					mods[ZaCos.A_zimbraAvailableSkin] = tmpMods;
				}
			} else if (tmpMods.join(",") != [this._currentObject.attrs[ZaCos.A_zimbraAvailableSkin]].join(",")) {
				mods[ZaCos.A_zimbraAvailableSkin] = tmpMods;
			}
		} else {
			mods[ZaCos.A_zimbraAvailableSkin] = tmpMods;
		}
	} else if(this._currentObject.attrs[ZaCos.A_zimbraAvailableSkin] != null) {
		mods[ZaCos.A_zimbraAvailableSkin] = "";
	}
		

	if(tmpObj.attrs[ZaCos.A_zimbraZimletAvailableZimlets] != null) {
		var tmpMods = [];
		if(!(tmpObj.attrs[ZaCos.A_zimbraZimletAvailableZimlets] instanceof Array)) {
			tmpMods = [tmpObj.attrs[ZaCos.A_zimbraZimletAvailableZimlets]];
		} else {
			var cnt = tmpObj.attrs[ZaCos.A_zimbraZimletAvailableZimlets].length;
			tmpMods = [];
			for(var i = 0; i < cnt; i++) {
				tmpMods.push(tmpObj.attrs[ZaAccount.A_zimbraZimletAvailableZimlets][i]);
			}
		}
		if(isNew) {
			mods[ZaCos.A_zimbraZimletAvailableZimlets] = tmpMods;
		} else {
			//check if changed
			if(this._currentObject.attrs[ZaCos.A_zimbraZimletAvailableZimlets] != null) {
				if(this._currentObject.attrs[ZaCos.A_zimbraZimletAvailableZimlets] instanceof Array) {
					if(tmpMods.join(",") != this._currentObject.attrs[ZaCos.A_zimbraZimletAvailableZimlets].join(",")) {
						mods[ZaCos.A_zimbraZimletAvailableZimlets] = tmpMods;
					}
				} else if (tmpMods.join(",") != [this._currentObject.attrs[ZaCos.A_zimbraZimletAvailableZimlets]].join(",")) {
					mods[ZaCos.A_zimbraZimletAvailableZimlets] = tmpMods;
				}
			} else {
				mods[ZaCos.A_zimbraZimletAvailableZimlets] = tmpMods;
			}			
		}
	} else if(this._currentObject.attrs[ZaCos.A_zimbraZimletAvailableZimlets] != null) {
		mods[ZaCos.A_zimbraZimletAvailableZimlets] = "";
	}
	
		
	//check if need to rename
	if(!isNew) {
		if(tmpObj.name != this._currentObject.name) {
            if(this._currentObject.name=="default"||this._currentObject.name=="defaultExternal"){
                this._errorDialog.setMessage( AjxMessageFormat.format(ZaMsg.FAILED_RENAME_COS_DEFAULT,this._currentObject.name), null, DwtMessageDialog.CRITICAL_STYLE, ZabMsg.zimbraAdminTitle);
				this._errorDialog.popup();
                return false;
            }
			newName=tmpObj.name;
			//changeDetails["newName"] = newName;
			try {
				this._currentObject.rename(newName);
			} catch (ex) {
				var detailStr = "";
				for (var prop in ex) {
					detailStr = detailStr + prop + " - " + ex[prop] + "\n";				
				}
				if(ex.code == ZmCsfeException.COS_EXISTS) {
					this._errorDialog.setMessage(ZaMsg.FAILED_RENAME_COS_1, detailStr, DwtMessageDialog.CRITICAL_STYLE, ZabMsg.zimbraAdminTitle);
					this._errorDialog.popup();
				} else {
					this._handleException(ex, "ZaCosController.prototype._saveChanges", null, false);	
				}
				return false;
			}
		}
	}

    if (this._currentObject[ZaModel.currentTab]!= tmpObj[ZaModel.currentTab])
             this._currentObject[ZaModel.currentTab] = tmpObj[ZaModel.currentTab];
	//save changed fields
	try {
		if(isNew) {
			this._currentObject.create(tmpObj.name, mods);
			//if creation took place - fire a CreationEvent
			this.fireCreationEvent(this._currentObject);
			this._toolbar.getButton(ZaOperation.DELETE).setEnabled(true);
            ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.CosCreated,[tmpObj.name]));
		} else {
			this._currentObject.modify(mods);
            ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.CosModified,[this._currentObject.name]));
			//if modification took place - fire a ChangeEvent
			//changeDetails["obj"] = this._currentObject;
			//changeDetails["mods"] = mods;
			//this.fireChangeEvent(this._currentObject);
		}
	} catch (ex) {
		var detailStr = "";
		for (var prop in ex) {
			if(ex[prop] instanceof Function) 
				continue;
				
			detailStr = detailStr + prop + " - " + ex[prop] + "\n";				
		}
		if(ex.code == ZmCsfeException.COS_EXISTS) {
			this._errorDialog.setMessage(ZaMsg.FAILED_CREATE_COS_1, detailStr, DwtMessageDialog.CRITICAL_STYLE, ZabMsg.zimbraAdminTitle);				
			this._errorDialog.popup();
		} else {
			this._handleException(ex, "ZaCosController.prototype._saveChanges", null, false);	
		}
		return false;
	}
	return true;
	
}

ZaCosController.prototype.newCos = 
function () {
	var newCos = new ZaCos();
	var defCos = ZaCos.getCosByName("default");
	//copy values from default cos to the new cos
	for(var aname in defCos.attrs) {
		if( (aname == ZaItem.A_objectClass) || (aname == ZaItem.A_zimbraId) || (aname == ZaCos.A_name) || (aname == ZaCos.A_description) || (aname == ZaCos.A_notes) || (aname = ZaItem.A_zimbraCreateTimestamp))
			continue;			
		newCos.attrs[aname] = defCos.attrs[aname];
	}	
	this._setView(newCos, true);
}

// new button was pressed
ZaCosController.prototype._newButtonListener =
function(openInNewTab, ev) {
	if (openInNewTab) {
		ZaCosListController.prototype._newButtonListener.call (this) ;
	}else{
		if(this._view.isDirty()) {
			//parameters for the confirmation dialog's callback 
			var args = new Object();		
			args["params"] = null;
			args["obj"] = this;
			args["func"] = ZaCosController.prototype.newCos;
			//ask if the user wants to save changes		
			//ZaApp.getInstance().dialogs["confirmMessageDialog"] = new ZaMsgDialog(this._view.shell, null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON, DwtDialog.CANCEL_BUTTON]);								
			ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(ZaMsg.Q_SAVE_CHANGES, DwtMessageDialog.INFO_STYLE);
			ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, this.saveAndGoAway, this, args);		
			ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.NO_BUTTON, this.discardAndGoAway, this, args);		
			ZaApp.getInstance().dialogs["confirmMessageDialog"].popup();
		} else {
			this.newCos();
		}	
	}
}
}
if (AjxPackage.define("zimbraAdmin.domains.controller.ZaDomainListController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaDomainListController
* This is a singleton object that controls all the user interaction with the list of ZaDomain objects
**/
ZaDomainListController = function(appCtxt, container) {
	ZaListViewController.call(this, appCtxt, container, "ZaDomainListController");
	this._helpURL = ZaDomainListController.helpURL;
	this._helpButtonText = ZaMsg.helpManageDomains;
	this._currentQuery = ""
	this._currentPageNum = 1;
	this._currentSortField = ZaDomain.A_domainName;
	this.objType = ZaEvent.S_DOMAIN;
    this._defaultType = ZaItem.DOMAIN;
	this.RESULTSPERPAGE = ZaDomain.RESULTSPERPAGE; 
	this.MAXSEARCHRESULTS = ZaDomain.MAXSEARCHRESULTS;	
}

ZaDomainListController.prototype = new ZaListViewController();
ZaDomainListController.prototype.constructor = ZaDomainListController;
ZaDomainListController.helpURL = ZaUtil.HELP_URL;
ZaController.initToolbarMethods["ZaDomainListController"] = new Array();
ZaController.initPopupMenuMethods["ZaDomainListController"] = new Array();
ZaController.changeActionsStateMethods["ZaDomainListController"] = new Array(); 

ZaDomainListController.prototype.show = function (doPush,openInNewTab) {

    if(!ZaZimbraAdmin.hasGlobalDomainListAccess() && this._currentQuery == "") {
        var domainNameList = ZaApp.getInstance()._domainNameList;
        if(domainNameList && (domainNameList instanceof Array) && domainNameList.length > 0) {
            for(var i = 0; i < domainNameList.length; i++)
                this._currentQuery += "(" + ZaDomain.A_domainName + "=" + domainNameList[i] + ")";
            if(domainNameList.length > 1)
                this._currentQuery = "(|" + this._currentQuery + ")";
        } else {
            this._list = new ZaItemList(ZaDomain);
            this.numPages = 0;
            this._searchTotal = 0;
            if(doPush) this._show(this._list);
            else this._updateUI(this._list);
            return;
        }
    }

	var busyId = Dwt.getNextId();
	var callback = new AjxCallback(this, this.searchCallback, {openInNewTab:openInNewTab,limit:ZaDomain.RESULTSPERPAGE,CONS:ZaDomain,show:doPush, busyId:busyId});
	var searchParams = {
			query:this._currentQuery, 
			types:[ZaSearch.DOMAINS],
			sortBy:ZaDomain.A_domainName,
			offset:this.RESULTSPERPAGE*(this._currentPageNum-1),
			sortAscending:"1",
			limit:this.RESULTSPERPAGE,
			callback:callback,
			controller: this,
			showBusy:true,
			busyId:busyId,
			busyMsg:ZaMsg.BUSY_SEARCHING_DOMAINS,
			skipCallbackIfCancelled:false,
			attrs:[ZaDomain.A_description, ZaDomain.A_domainName,ZaDomain.A_zimbraDomainStatus,ZaItem.A_zimbraId, ZaDomain.A_domainType]		
	}
    this.scrollSearchParams={
        query:this._currentQuery,
			types:[ZaSearch.DOMAINS],
			sortBy:ZaDomain.A_domainName,
			sortAscending:"1",
			controller: this,
			showBusy:true,
			busyMsg:ZaMsg.BUSY_SEARCHING_DOMAINS,
			skipCallbackIfCancelled:false,
			attrs:[ZaDomain.A_description, ZaDomain.A_domainName,ZaDomain.A_zimbraDomainStatus,ZaItem.A_zimbraId, ZaDomain.A_domainType]
    };
	ZaSearch.searchDirectory(searchParams);
}

ZaDomainListController.prototype._show = 
function (list,  openInNewTab, openInSearchTab, hasMore) {
	this._updateUI(list, openInNewTab, openInSearchTab, hasMore);
	//ZaApp.getInstance().pushView(ZaZimbraAdmin._DOMAINS_LIST_VIEW);
	ZaApp.getInstance().pushView(this.getContentViewId(), openInNewTab, openInSearchTab);
    return;
}



/**
* @return ZaItemList - the list currently displaid in the list view
**/
ZaDomainListController.prototype.getList = 
function() {
	return this._list;
}


ZaDomainListController.prototype.set = 
function(domainList) {
	this.show(domainList);
}

/**
* @param ev
* This listener is invoked by ZaAccountViewController or any other controller that can change an ZaDomain object
**/
ZaDomainListController.prototype.handleDomainChange = 
function (ev) {
	//if any of the data that is currently visible has changed - update the view
	if(ev) {
		var details = ev.getDetails();
		//details["modFields"] is outdated.
		//if(details["modFields"] && (details["modFields"][ZaDomain.A_description] || details["modFields"][ZaDomain.A_domainName])) {
		if (details){
			if (this._list) this._list.replace(details);
			if (this._contentView) this._contentView.setUI();
			if(ZaApp.getInstance().getCurrentController() == this) {
				this.show();			
			} else if(this.objType && ev.type==this.objType && this._UICreated) {
                this.show(false);
            }
			this.changeActionsState();
             ZaZimbraAdmin.getInstance().getOverviewPanelController().refreshRelatedTreeByEdit (ev.getDetails());
		}
	}
}


ZaDomainListController.initPopupMenuMethod =
function () {
	if(ZaZimbraAdmin.canCreateTopDomain()) {
		this._popupOperations[ZaOperation.NEW]=new ZaOperation(ZaOperation.NEW,ZaMsg.TBB_New, ZaMsg.DTBB_New_tt, "Domain", "DomainDis", new AjxListener(this, ZaDomainListController.prototype._newButtonListener));
	}
	this._popupOperations[ZaOperation.EDIT]=new ZaOperation(ZaOperation.EDIT,ZaMsg.TBB_Edit, ZaMsg.DTBB_Edit_tt, "Edit", "EditDis",  new AjxListener(this, ZaDomainListController.prototype._editButtonListener));    	
	this._popupOperations[ZaOperation.DELETE]=new ZaOperation(ZaOperation.DELETE,ZaMsg.TBB_Delete, ZaMsg.DTBB_Delete_tt, "Delete", "DeleteDis", new AjxListener(this, ZaDomainListController.prototype._deleteButtonListener));    	    	
    if(ZaZimbraAdmin.canCreateTopDomain()) {
		this._popupOperations[ZaOperation.ADD_DOMAIN_ALIAS]=new ZaOperation(ZaOperation.ADD_DOMAIN_ALIAS,ZaMsg.TBB_AddDomainAlias, ZaMsg.DTBB_addDomainAlias_tt, "DomainAlias", "DomainAliasDis", new AjxListener(this, ZaDomainListController.prototype._addDomainAliasListener));
	}
	this._popupOperations[ZaOperation.VIEW_DOMAIN_ACCOUNTS]=new ZaOperation(ZaOperation.VIEW_DOMAIN_ACCOUNTS,ZaMsg.Domain_view_accounts, ZaMsg.Domain_view_accounts_tt, "Search", "SearchDis", new AjxListener(this, this.viewAccountsButtonListener));
	this._popupOperations[ZaOperation.GAL_WIZARD]=new ZaOperation(ZaOperation.GAL_WIZARD,ZaMsg.DTBB_GAlConfigWiz, ZaMsg.DTBB_GAlConfigWiz_tt, "GALWizard", "GALWizardDis", new AjxListener(this, ZaDomainListController.prototype._galWizButtonListener));   		
	this._popupOperations[ZaOperation.AUTH_WIZARD]=new ZaOperation(ZaOperation.AUTH_WIZARD,ZaMsg.DTBB_AuthConfigWiz, ZaMsg.DTBB_AuthConfigWiz_tt, "AuthWizard", "AuthWizardDis", new AjxListener(this, ZaDomainListController.prototype._authWizButtonListener));
    /* bug 71235, remove auto provisioning
     this._popupOperations[ZaOperation.AUTOPROV_WIZARD]=new ZaOperation(ZaOperation.AUTOPROV_WIZARD,ZaMsg.DTBB_AutoProvConfigWiz, ZaMsg.DTBB_AutoProvConfigWiz_tt, "Backup", "BackupDis", new AjxListener(this, ZaDomainListController.prototype._autoProvWizButtonListener));
    */
}
ZaController.initPopupMenuMethods["ZaDomainListController"].push(ZaDomainListController.initPopupMenuMethod);

//private and protected methods
ZaDomainListController.prototype._createUI = 
function (openInNewTab, openInSearchTab) {
	this._contentView = new ZaDomainListView(this._container, this._defaultType);
	ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
	// create the menu operations/listeners first	
	//always add Help and navigation buttons at the end of the toolbar    
	//add the acount number counts
	//ZaSearch.searchResultCountsView(this._toolbarOperations, this._toolbarOrder);
	
		
	var elements = new Object();
	elements[ZaAppViewMgr.C_APP_CONTENT] = this._contentView;
    ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
	this._initPopupMenu();
	this._actionMenu =  new ZaPopupMenu(this._contentView, "ActionMenu", null, this._popupOperations, ZaId.VIEW_DMLIST, ZaId.MENU_POP);
	
	//set a selection listener on the account list view
	this._contentView.addSelectionListener(new AjxListener(this, this._listSelectionListener));
	this._contentView.addActionListener(new AjxListener(this, this._listActionListener));			

	this._initDeleteDialogs();
	this._UICreated = true;
}

ZaDomainListController.prototype._initDeleteDialogs = 
function() {
	if(!this._removeConfirmMessageDialog) {
		this._removeConfirmMessageDialog = ZaApp.getInstance().dialogs["removeConfirmMessageDialog"] = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON],null,ZaId.CTR_PREFIX + ZaId.VIEW_DMLIST + "_removeConfirm");
	}
	if(!this._forceRemoveMessageDialog) {
		this._forceRemoveMessageDialog = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON],null,ZaId.CTR_PREFIX + ZaId.VIEW_DMLIST + "_forceRemoveConfirm");
	    this._forceRemoveMessageDialog.registerCallback(DwtDialog.YES_BUTTON, ZaDomainListController.prototype._forceDeleteDomainCallback, this);
	    this._forceRemoveMessageDialog.registerCallback(DwtDialog.NO_BUTTON, ZaDomainListController.prototype._donotForceDeleteDomainsCallback, this);
	    this._forceRemoveMessageDialog._button[DwtDialog.YES_BUTTON].setText(ZaMsg.FORCE_DELETE_BUTTON);
	}
}
/**
*	Private method that notifies listeners that a new ZaDomain is created
* 	@param details
*/
ZaDomainListController.prototype._fireDomainCreationEvent =
function(details) {
	try {
		if (this._evtMgr.isListenerRegistered(ZaEvent.E_CREATE)) {
			var evt = new ZaEvent(ZaEvent.S_DOMAIN);
			evt.set(ZaEvent.E_CREATE, this);
			evt.setDetails(details);
			this._evtMgr.notifyListeners(ZaEvent.E_CREATE, evt);
		}
	} catch (ex) {
		this._handleException(ex, "ZaDomainListController.prototype._fireDomainCreationEvent", details, false);	
	}
}

/**
*	Private method that notifies listeners to that the controlled ZaDomain is changed
* 	@param details
*/
ZaDomainListController.prototype._fireDomainChangeEvent =
function(details) {
	try {
		if (this._evtMgr.isListenerRegistered(ZaEvent.E_MODIFY)) {
			var evt = new ZaEvent(ZaEvent.S_DOMAIN);
			evt.set(ZaEvent.E_MODIFY, this);
			evt.setDetails(details);
			this._evtMgr.notifyListeners(ZaEvent.E_MODIFY, evt);
		}
	} catch (ex) {
		this._handleException(ex, "ZaDomainListController.prototype._fireDomainChangeEvent", details, false);	
	}
}

/**
* This listener is called when the item in the list is double clicked. It call ZaDomainController.show method
* in order to display the Domain View
**/
ZaDomainListController.prototype._listSelectionListener =
function(ev) {
	if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		if(ev.item) {
            var item = ev.item ;
            if (item.attrs [ZaDomain.A_domainType] == ZaDomain.domainTypes.local) {
                ZaApp.getInstance().getDomainController().show(item);
            } else if ( item.attrs [ZaDomain.A_domainType] == ZaDomain.domainTypes.alias) {
                ZaApp.getInstance().getDomainAliasWizard(true).editDomainAlias (item, true) ;
            }
            var parentPath = ZaTree.getPathByArray([ZaMsg.OVP_home, ZaMsg.OVP_configure, ZaMsg.OVP_domains]);
            ZaZimbraAdmin.getInstance().getOverviewPanelController().addObjectItem(parentPath, item.name, null, false, false, item, undefined, true);
		}
	} else {
		this.changeActionsState();	
	}
}

ZaDomainListController.prototype._listActionListener =
function (ev) {
	this.changeActionsState();
	this._actionMenu.popup(0, ev.docX, ev.docY);
}

/**
* This listener is called when the Edit button is clicked. 
* It call ZaDomainController.show method
* in order to display the Domain View
**/
ZaDomainListController.prototype._editButtonListener =
function(ev) {
	if(this._contentView.getSelectionCount() == 1) {
		var item = this._contentView.getSelection()[0];
        this._editItem(item);
	}
}

ZaDomainListController.prototype._editItem =
function(item) {
    if (item.attrs [ZaDomain.A_domainType] == ZaDomain.domainTypes.local) {
        ZaApp.getInstance().getDomainController().show(item);
    } else if ( item.attrs [ZaDomain.A_domainType] == ZaDomain.domainTypes.alias) {
        ZaApp.getInstance().getDomainAliasWizard(true).editDomainAlias (item, true) ;
    }
    var parentPath = ZaTree.getPathByArray([ZaMsg.OVP_home, ZaMsg.OVP_configure, ZaMsg.OVP_domains]);
    ZaZimbraAdmin.getInstance().getOverviewPanelController().addObjectItem(parentPath, item.name, null, false, false, item, undefined, true);
}

ZaDomainListController.prototype._addDomainAliasListener =
function (ev) {
    var domain = new ZaDomain () ;
    if(this._contentView.getSelectionCount() == 1) {
             var item = this._contentView.getSelection()[0];
             domain[ZaDomain.A2_zimbraDomainAliasTarget] = item;
    }
    var domainAliasWizard = ZaApp.getInstance().getDomainAliasWizard () ;
    domainAliasWizard.registerCallback(DwtDialog.OK_BUTTON,
            ZaDomain.prototype.createDomainAlias, domain,
            domainAliasWizard._localXForm);
    domainAliasWizard.setObject(domain);
    domainAliasWizard.popup();
}

// new button was pressed
ZaDomainListController.prototype._newButtonListener =
function(ev) {
	try {
		var domain = new ZaDomain();
			
		domain.getAttrs = {all:true};
		/*domain.setAttrs = {all:true};
		domain.rights = {};
		domain._defaultValues = {attrs:{}};*/
		domain.loadNewObjectDefaults("name","domain.tld");
        if(!ZaApp.getInstance().dialogs["ZaNewDomainXWizard"])
		    ZaApp.getInstance().dialogs["ZaNewDomainXWizard"] = new ZaNewDomainXWizard(this._container, domain);
        this._newDomainWizard = ZaApp.getInstance().dialogs["ZaNewDomainXWizard"];
		this._newDomainWizard.registerCallback(DwtWizardDialog.FINISH_BUTTON, ZaDomainListController.prototype._finishNewButtonListener, this, null);			
		this._newDomainWizard.setObject(domain);
		this._newDomainWizard.popup();
	} catch (ex) {
		this._handleException(ex, "ZaDomainListController.prototype._newButtonListener", null, false);
	}
}


ZaDomainListController.prototype._galWizButtonListener =
function(ev) {
	try {
		if(this._contentView.getSelectionCount() == 1) {
			var item = this._contentView.getSelection()[0];
			this._openConfigGAL(item);
		}
	} catch (ex) {
		this._handleException(ex, "ZaDomainListController.prototype._showGalWizard", null, false);
	}
}

ZaDomainListController.prototype._openConfigGAL =
function(item) {
	this._currentObject = item;
    item.load("name", item.attrs[ZaDomain.A_domainName],false,true);

    ZaApp.getInstance().dialogs["ZaGALConfigXWizard"] = new ZaGALConfigXWizard(this._container,item)
    this._galWizard = ZaApp.getInstance().dialogs["ZaGALConfigXWizard"];
    item._extid=ZaUtil.getItemUUid();
    item._editObject = item;

    this._galWizard.setObject(item);
    this._galWizard.popup();
}

ZaDomainListController.prototype._authWizButtonListener =
function(ev) {
	try {
		if(this._contentView.getSelectionCount() == 1) {
			var item = this._contentView.getSelection()[0];
			this._openAuthWiz(item);
		}
	} catch (ex) {
		this._handleException(ex, "ZaDomainListController.prototype._showAuthWizard", null, false);
	}
}

ZaDomainListController.prototype._openAuthWiz =
function (item) {
    this._currentObject = item;
    item.load("name", item.attrs[ZaDomain.A_domainName],false,true);
    this._authWizard = ZaApp.getInstance().dialogs["ZaTaskAuthConfigWizard"] = new ZaTaskAuthConfigWizard(this._container);
    item._extid=ZaUtil.getItemUUid();
    item._editObject = item;

    this._authWizard.setObject(item);
    this._authWizard.popup();
}

ZaDomainListController.prototype._autoProvWizButtonListener =
function(ev) {
	try {
		if(this._contentView.getSelectionCount() == 1) {
			var item = this._contentView.getSelection()[0];
			this._currentObject = item;
			item.load("name", item.attrs[ZaDomain.A_domainName],false,true);
            if(!this._autoProvWizard) {
                if(ZaApp.getInstance().dialogs["ZaTaskAutoProvDialog"])
                     this._autoProvWizard = ZaApp.getInstance().dialogs["ZaTaskAutoProvDialog"];
                else
			        this._autoProvWizard = ZaApp.getInstance().dialogs["ZaTaskAutoProvDialog"] = new ZaTaskAutoProvDialog(this._container, ZaMsg.NAD_AutoProvConfigTitle);//ZaAutoProvConfigXWizard(this._container);
            }
            item._extid=ZaUtil.getItemUUid();
            item._editObject = item;
            this._autoProvWizard.registerCallback(DwtDialog.OK_BUTTON, ZaTaskAutoProvDialog.prototype.finishWizard, this._autoProvWizard, null);

            item.currentTab = "1";
			this._autoProvWizard.setObject(item);
			this._autoProvWizard.popup();
		}
	} catch (ex) {
		this._handleException(ex, "ZaDomainListController.prototype._autoProvWizButtonListener", null, false);
	}
}

/**
* This listener is called when the Delete button is clicked. 
**/
ZaDomainListController.prototype._deleteButtonListener =
function(ev) {
	this._initDeleteDialogs();
	this._removeList = new Array();
	this._itemsInTabList = [] ;
	var contentView = ZaApp.getInstance().getCurrentController()._contentView;
	if(contentView.getSelectionCount()>0) {
		var arrItems = contentView.getSelection();
		var cnt = arrItems.length;
		for(var key =0; key < cnt; key++) {
			var item = arrItems[key];
			if (item) {
				//detect whether the deleting item is open in a tab
				if (ZaApp.getInstance().getTabGroup() && ZaApp.getInstance().getTabGroup().getTabByItemId (item.id)) {
					this._itemsInTabList.push (item) ;
				}else{
					this._removeList.push(item);
				}
			}
		}
	}
	
	if (this._itemsInTabList.length > 0) {
		if(!ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"]) {
			ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"] = 
				new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.CANCEL_BUTTON], 
						[ZaMsgDialog.CLOSE_TAB_DELETE_BUTTON_DESC , ZaMsgDialog.NO_DELETE_BUTTON_DESC],
						ZaId.CTR_PREFIX + ZaId.VIEW_DMLIST + "_ConfirmDeleteItemsInTab");			
		}
		
		var msg = ZaMsg.dl_warning_delete_accounts_in_tab ; ;
		msg += ZaDomainListController.getDlMsgFromList (this._itemsInTabList) ;
		
		ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].setMessage(msg, DwtMessageDialog.WARNING_STYLE);	
		ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].registerCallback(
				ZaMsgDialog.CLOSE_TAB_DELETE_BUTTON, ZaDomainListController.prototype._closeTabsBeforeRemove, this);
		ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].registerCallback(
				ZaMsgDialog.NO_DELETE_BUTTON, ZaDomainListController.prototype._deleteDomainInRemoveList, this);		
		ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].popup();
		
	}else{
		this._deleteDomainInRemoveList ();
	}
}

ZaDomainListController.prototype.viewAccountsButtonListener  =
function (ev) {
    if(this._contentView.getSelectionCount() == 1) {
        var item = this._contentView.getSelection()[0];
        var domainName = item.name ;
        ZaDomain.searchAccountsInDomain (domainName) ;
	}
}

ZaDomainListController.prototype._closeTabsBeforeRemove =
function () {
	this.closeTabsInRemoveList() ;
	this._deleteDomainInRemoveList();
}

ZaDomainListController.prototype._deleteDomainInRemoveList =
function () {
	if (ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"]) {
		ZaApp.getInstance().dialogs["ConfirmDeleteItemsInTabDialog"].popdown();
	}
	if(this._removeList.length) {
		var dlgMsg = ZaMsg.Q_DELETE_DOMAINS;
		dlgMsg += ZaDomainListController.getDlMsgFromList (this._removeList);
		this._removeConfirmMessageDialog.setMessage(dlgMsg, DwtMessageDialog.INFO_STYLE);
		this._removeConfirmMessageDialog.registerCallback(DwtDialog.YES_BUTTON, ZaDomainListController.prototype._deleteDomainsCallback, this);
		this._removeConfirmMessageDialog.registerCallback(DwtDialog.NO_BUTTON, ZaDomainListController.prototype._donotDeleteDomainsCallback, this);		
		this._removeConfirmMessageDialog.popup();
	}
	
} 

ZaDomainListController.getDlMsgFromList =
function (listArr) {
    var i = 0, name;
	var	dlgMsg = "<br><ul>";

	for(var key in listArr) {
		if(i > 19) {
			dlgMsg += "<li>...</li>";
			break;
		}
		dlgMsg += "<li>";
		name = listArr[key].name;
		if(name.length > 50) {
			//split it
			var endIx = 49;
			var beginIx = 0; //
			while(endIx < name.length) { //
				dlgMsg +=  AjxStringUtil.htmlEncode(name.slice(beginIx, endIx)); //
				beginIx = endIx + 1; //
				if(beginIx >= (name.length) ) //
					break;
				
				endIx = ( name.length <= (endIx + 50) ) ? name.length-1 : (endIx + 50);
				dlgMsg +=  "<br>";	
			}
		} else {
			dlgMsg += AjxStringUtil.htmlEncode(name);
		}
		dlgMsg += "</li>";
		i++;
	}
	dlgMsg += "</ul>";
	return dlgMsg ;
}

ZaDomainListController.prototype._deleteDomainsCallback = 
function () {
    if(!this._successRemList)
	    this._successRemList=new Array();
    for(var key = 0; key <  this._removeList.length; key++) {
        if(this._removeList[key] && AjxUtil.indexOf(this._successRemList, this._removeList[key]) == -1) {
            try {
                this._removeList[key].remove();
                this._successRemList.push(this._removeList[key]);
            } catch (ex) {
                this._removeConfirmMessageDialog.popdown();
                if(ex.code == ZmCsfeException.DOMAIN_NOT_EMPTY 
                		&& ZaZimbraAdmin.haveTargetRight(ZaItem.ACCOUNT, ZaAccount.DELETE_ACCOUNT_RIGHT, this._removeList[key].name)
                		&& ZaZimbraAdmin.haveTargetRight(ZaItem.ACCOUNT, ZaAccount.RIGHT_LIST_ACCOUNT, this._removeList[key].name)) {
                    this._forceDeleteDomain(this._removeList[key]);
                } else if(ex.code == ZmCsfeException.DOMAIN_NOT_EMPTY) {
            		this.popupErrorDialog(ZaMsg.ERROR_DOMAIN_NOT_EMPTY);
            	} else {
                    this._handleException(ex, "ZaDomainListController.prototype._deleteDomainsCallback", null, false);
                }
                return;
            }
            if(this._list) {
            	this._list.remove(this._removeList[key]); //remove from the list
            }
        }
    }
    ZaApp.getInstance().getCurrentController().fireRemovalEvent(this._successRemList);
    this._successRemList = null;
	this._removeConfirmMessageDialog.popdown();
}

ZaDomainListController.prototype._donotDeleteDomainsCallback = 
function () {
	this._removeList = new Array();
	this._removeConfirmMessageDialog.popdown();
}

ZaDomainListController.prototype._getAllAccountDomain =
function (domainName) {
    if (domainName) {
        var busyId = Dwt.getNextId();
        var searchTypes = [ZaSearch.ACCOUNTS, ZaSearch.DLS, ZaSearch.ALIASES, ZaSearch.RESOURCES] ;
        var searchParams = {
            query:"",
            domain:domainName,
            types:searchTypes,
            attrs:AjxBuffer.concat(ZaAlias.searchAttributes,",",
                    ZaDistributionList.searchAttributes,",",
                    ZaResource.searchAttributes,",",
                    ZaSearch.standardAttributes),
            controller: ZaApp.getInstance().getCurrentController(),
            showBusy:true,
            busyId:busyId,
            busyMsg:ZaMsg.BUSY_SEARCHING
        }
        var resp = ZaSearch.searchDirectory(searchParams);
        if(resp && resp.Body.SearchDirectoryResponse) {
            var response = resp.Body.SearchDirectoryResponse;
            var acctlist = new ZaItemList(ZaAccount);
            acctlist.loadFromJS(response);
            return acctlist.getArray();
        } else return null;
    } else {
        var currentController = ZaApp.getInstance().getCurrentController () ;
        currentController.popupErrorDialog(ZaMsg.ERROR_NO_DOMAIN_NAME) ;
    }
    return null;
}

ZaDomainListController.prototype._forceDeleteDomain =
function (domain) {
    var acctlist = this._getAllAccountDomain(domain.name);
    if(acctlist && acctlist.length > 0) {
        var sysacctNum = 0;
        var regularacctNum = 0;
        for (var i = 0; i < acctlist.length; i++) {
            if(acctlist[i].attrs[ZaAccount.A_zimbraIsSystemAccount] == "TRUE")
                sysacctNum ++;
            else regularacctNum++;
        }
        this._forceRemoveAccountList = acctlist;
        this._forceRemoveDomain = domain;
        var dlgMsg = AjxMessageFormat.format(ZaMsg.Q_FORCE_DELETE_DOMAIN, [domain.name, sysacctNum, regularacctNum]);
        dlgMsg += ZaDomainListController.getDlMsgFromList (this._forceRemoveAccountList);
        this._forceRemoveMessageDialog.setMessage(dlgMsg, DwtMessageDialog.INFO_STYLE);
        this._forceRemoveMessageDialog.popup();
    }
}

ZaDomainListController.prototype._forceDeleteDomainCallback =
function() {
    this._forceRemoveMessageDialog.popdown();
    var acctList = this._forceRemoveAccountList;
    var dom = this._forceRemoveDomain;
    if(!acctList || !dom) return;
    try {
        for(var i = 0; i < acctList.length; i++) {
            acctList[i].remove();
        }
        this._forceRemoveAccountList = null;
        this._deleteDomainsCallback();
    } catch (ex) {
        this._handleException(ex, "ZaDomainListController.prototype._forceDeleteDomainCallback", null, false);
    }
}

ZaDomainListController.prototype._donotForceDeleteDomainsCallback =
function () {
    this._forceRemoveMessageDialog.popdown();
    if(this._forceRemoveDomain) {
        AjxUtil.arrayRemove(this._removeList,this._forceRemoveDomain);
        this._deleteDomainsCallback();
    }
}

ZaDomainListController.changeActionsStateMethod = 
function () {
	if(!this._contentView)
		return;
		
	var cnt = this._contentView.getSelectionCount();
	if(cnt == 1) {
		var item = this._contentView.getSelection()[0];
		if(item) {
			if(item.attrs[ZaDomain.A_domainType] == "alias"){
				
				if(this._popupOperations[ZaOperation.ADD_DOMAIN_ALIAS])
                                        this._popupOperations[ZaOperation.ADD_DOMAIN_ALIAS].enabled=false;


				if(this._popupOperations[ZaOperation.AUTOPROV_WIZARD])
                                        this._popupOperations[ZaOperation.AUTOPROV_WIZARD].enabled=false;
			}
			
			if(item.attrs[ZaDomain.A_zimbraDomainStatus] == ZaDomain.DOMAIN_STATUS_SHUTDOWN) {
					
				if(this._popupOperations[ZaOperation.EDIT])
					this._popupOperations[ZaOperation.EDIT].enabled=false;
			
				if(this._popupOperations[ZaOperation.AUTH_WIZARD])
					this._popupOperations[ZaOperation.AUTH_WIZARD].enabled=false;

				if(this._popupOperations[ZaOperation.AUTOPROV_WIZARD])
					this._popupOperations[ZaOperation.AUTOPROV_WIZARD].enabled=false;

				if(this._popupOperations[ZaOperation.GAL_WIZARD])
					this._popupOperations[ZaOperation.GAL_WIZARD].enabled=false;

                if (this._popupOperations[ZaOperation.VIEW_DOMAIN_ACCOUNTS])
                    this._popupOperations[ZaOperation.VIEW_DOMAIN_ACCOUNTS].enabled=false;                    
            } else {
				if (AjxUtil.isEmpty(item.rights)) {
					item.loadEffectiveRights("id", item.id, false);
				}
				
				if(!(ZaDomain.canConfigureGal(item))) {
					
					if(this._popupOperations[ZaOperation.GAL_WIZARD])
						this._popupOperations[ZaOperation.GAL_WIZARD].enabled=false;						
				}
		
				if(!(ZaDomain.canConfigureAuth(item))) {
			
					if(this._popupOperations[ZaOperation.AUTH_WIZARD])
						this._popupOperations[ZaOperation.AUTH_WIZARD].enabled=false;
				}

				if(!(ZaDomain.canConfigureAutoProv(item))) {

					if(this._popupOperations[ZaOperation.AUTOPROV_WIZARD])
						this._popupOperations[ZaOperation.AUTOPROV_WIZARD].enabled=false;
				}

				if(!item.rights[ZaDomain.RIGHT_DELETE_DOMAIN]) {
					
					if(this._popupOperations[ZaOperation.DELETE]) {
						this._popupOperations[ZaOperation.DELETE].enabled=false;
					}
				}				
            }
		}
	} else if (cnt > 1){
		if(this._popupOperations[ZaOperation.AUTH_WIZARD])
			this._popupOperations[ZaOperation.AUTH_WIZARD].enabled=false;

		if(this._popupOperations[ZaOperation.AUTOPROV_WIZARD])
			this._popupOperations[ZaOperation.AUTOPROV_WIZARD].enabled=false;

		if(this._popupOperations[ZaOperation.GAL_WIZARD])
			this._popupOperations[ZaOperation.GAL_WIZARD].enabled=false;
		
		if(this._popupOperations[ZaOperation.EDIT])
			this._popupOperations[ZaOperation.EDIT].enabled=false;

        if (this._popupOperations[ZaOperation.VIEW_DOMAIN_ACCOUNTS])
            this._popupOperations[ZaOperation.VIEW_DOMAIN_ACCOUNTS].enabled=false;    
    } else {
			
		if(this._popupOperations[ZaOperation.EDIT])
			this._popupOperations[ZaOperation.EDIT].enabled=false;
		
		if(this._popupOperations[ZaOperation.DELETE])
			this._popupOperations[ZaOperation.DELETE].enabled=false;
		
		if(this._popupOperations[ZaOperation.AUTH_WIZARD])
			this._popupOperations[ZaOperation.AUTH_WIZARD].enabled=false;

		if(this._popupOperations[ZaOperation.AUTOPROV_WIZARD])
			this._popupOperations[ZaOperation.AUTOPROV_WIZARD].enabled=false;
					
		if(this._popupOperations[ZaOperation.GAL_WIZARD])
			this._popupOperations[ZaOperation.GAL_WIZARD].enabled=false;

        if (this._popupOperations[ZaOperation.VIEW_DOMAIN_ACCOUNTS])
            this._popupOperations[ZaOperation.VIEW_DOMAIN_ACCOUNTS].enabled=false;    
    }
}
ZaController.changeActionsStateMethods["ZaDomainListController"].push(ZaDomainListController.changeActionsStateMethod);

ZaDomainListController.prototype._finishNewButtonListener =
function(ev) {
	try {
		var obj = this._newDomainWizard.getObject();
		var domain = ZaItem.create(obj,ZaDomain,"ZaDomain");
		if(domain != null) {
			this._newDomainWizard.popdown();
			//if creation took place - fire an DomainChangeEvent
			this._fireDomainCreationEvent(domain);
			var evt = new ZaEvent(ZaEvent.S_DOMAIN);
			evt.set(ZaEvent.E_CREATE, this);
			evt.setDetails(domain);
			this.handleCreation(evt);
            ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.DomainCreated,[domain.name]));
		}
	} catch (ex) {
		if(ex.code == ZmCsfeException.DOMAIN_EXISTS) {
			this.popupErrorDialog(ZaMsg.ERROR_DOMAIN_EXISTS, ex);
		} else {
			this._handleException(ex, "ZaDomainListController.prototype._finishNewButtonListener", null, false);
		}
	}
	return;
}

ZaDomainListController.prototype.notifyAllOpenTabs =
function(editObject) {
    this._currentObject = editObject;
    this._notifyAllOpenTabs();
}

ZaDomainListController.prototype._notifyAllOpenTabs =
function() {
        var warningMsg = "<br><ul>";
        var hasItem = false;
        for (var i=0; i < ZaAppTabGroup._TABS.size(); i++) {
                var tab = ZaAppTabGroup._TABS.get(i) ;
                var v = tab.getAppView() ;
                if (v && v._containedObject && v._containedObject.name) {
                        var acctName = v._containedObject.name;
                        var l = acctName.indexOf('@');
                        var domain = null;
                        if(l > 0) domain = acctName.substring(l+1);
                        if((domain != null && domain == this._currentObject.attrs[ZaDomain.A_domainName])
				|| (domain == null && acctName == this._currentObject.attrs[ZaDomain.A_domainName]))
			{
                                warningMsg += "<li>" + acctName + "</li>";
                                hasItem = true;
                        }
                }
        }
        warningMsg += "</ul></br>";
        if(hasItem)
                ZaApp.getInstance().getCurrentController().popupWarningDialog(ZaMsg.WARN_CHANGE_AUTH_METH + warningMsg);

}

ZaDomainListController.prototype._finishAuthButtonListener =
function(ev) {
	try {
		ZaDomain.modifyAuthSettings.call(this._currentObject,this._authWizard.getObject());
		//if a modification took place - fire an DomainChangeEvent
		this._fireDomainChangeEvent(this._currentObject);
		this._authWizard.popdown();
		this._notifyAllOpenTabs();
	} catch (ex) {
		this._handleException(ex, "ZaDomainListController.prototype._finishAuthButtonListener", null, false);
	}
	return;
}

ZaDomainListController.prototype._finishAutoProvButtonListener =
function(ev) {
	try {


        if(!this._autoProvWizard._checkGeneralConfig() || !this._autoProvWizard._checkEagerConfig()
                || !this._autoProvWizard._checkLazyConfig()) {
            return;
        }
        var savedObj = this._autoProvWizard.getObject();
        this._autoProvWizard._combineConfigureValues(savedObj);
		ZaDomain.modifyAutoPovSettings.call(this._currentObject,savedObj);
		this._fireDomainChangeEvent(this._currentObject);
		this._autoProvWizard.popdown();
		this._notifyAllOpenTabs();
	} catch (ex) {
		this._handleException(ex, "ZaDomainListController.prototype._finishAutoProvButtonListener", null, false);
	}
	return;
}

ZaDomainListController.prototype._finishGalButtonListener =
function(ev) {
	try {
		ZaDomain.modifyGalSettings.call(this._currentObject,this._galWizard.getObject()); 
		//if a modification took place - fire an DomainChangeEvent
		this._fireDomainChangeEvent(this._currentObject);
		this._galWizard.popdown();
	} catch (ex) {
		this._handleException(ex, "ZaDomainListController.prototype._finishGalButtonListener", null, false);
	}
	return;
}

ZaDomainListController.prototype.searchCallback = function(params, resp) {
	ZaListViewController.prototype.searchCallback.call(this, params, resp);
	var app = ZaApp.getInstance();
	app._domainList = this.getList();
};
}
if (AjxPackage.define("zimbraAdmin.servers.controller.ZaServerListController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaServerListController
* This is a singleton object that controls all the user interaction with the list of ZaServer objects
* @author Greg Solovyev
**/
ZaServerListController = function(appCtxt, container) {
	ZaListViewController.call(this, appCtxt, container,"ZaServerListController");
   	this._toolbarOperations = new Array();
   	this._popupOperations = new Array();			
	
	this._helpURL = ZaUtil.HELP_URL;
	this._helpButtonText = ZaMsg.helpManageServers;
}

ZaServerListController.prototype = new ZaListViewController();
ZaServerListController.prototype.constructor = ZaServerListController;

ZaController.initToolbarMethods["ZaServerListController"] = new Array();
ZaController.initPopupMenuMethods["ZaServerListController"] = new Array();
ZaController.changeActionsStateMethods["ZaServerListController"] = new Array();

/**
* @param list {ZaItemList} a list of ZaServer {@link ZaServer} objects
**/
ZaServerListController.prototype.show = 
function(list, openInNewTab) {
    if (!this._UICreated) {
		this._createUI();
	} 	
	if (list != null)
		this._contentView.set(list.getVector());
				
	ZaApp.getInstance().pushView(this.getContentViewId());
	if (list != null)
		this._list = list;
		
	this.changeActionsState();		
}

ZaServerListController.initToolbarMethod =
function () {
   	this._toolbarOperations[ZaOperation.EDIT] = new ZaOperation(ZaOperation.EDIT, ZaMsg.TBB_Edit, ZaMsg.SERTBB_Edit_tt, "Properties", "PropertiesDis", new AjxListener(this, ZaServerListController.prototype._editButtonListener));    	
   	this._toolbarOperations[ZaOperation.FLUSH_CACHE] = new ZaOperation(ZaOperation.FLUSH_CACHE, ZaMsg.SERTBB_FlushCache, ZaMsg.SERTBB_FlushCache_tt, "FlushCache", "FlushCache", new AjxListener(this, ZaServerListController.prototype._flushCacheButtonListener));	
	this._toolbarOperations[ZaOperation.NONE] = new ZaOperation(ZaOperation.NONE);
	this._toolbarOperations[ZaOperation.HELP] = new ZaOperation(ZaOperation.HELP, ZaMsg.TBB_Help, ZaMsg.TBB_Help_tt, "Help", "Help", new AjxListener(this, this._helpButtonListener));
	
	this._toolbarOrder.push(ZaOperation.EDIT);
	this._toolbarOrder.push(ZaOperation.FLUSH_CACHE);
	this._toolbarOrder.push(ZaOperation.NONE);	
	this._toolbarOrder.push(ZaOperation.HELP);					
}
ZaController.initToolbarMethods["ZaServerListController"].push(ZaServerListController.initToolbarMethod);

ZaServerListController.initPopupMenuMethod =
function () {
   	this._popupOperations[ZaOperation.EDIT] = new ZaOperation(ZaOperation.EDIT, ZaMsg.TBB_Edit, ZaMsg.SERTBB_Edit_tt, "Properties", "PropertiesDis", new AjxListener(this, ZaServerListController.prototype._editButtonListener));
	this._popupOperations[ZaOperation.FLUSH_CACHE] = new ZaOperation(ZaOperation.FLUSH_CACHE, ZaMsg.SERTBB_FlushCache, ZaMsg.SERTBB_FlushCache_tt, "FlushCache", "FlushCache", new AjxListener(this, ZaServerListController.prototype._flushCacheButtonListener));   	    	    	    	
}
ZaController.initPopupMenuMethods["ZaServerListController"].push(ZaServerListController.initPopupMenuMethod);

ZaServerListController.prototype._createUI = function () {
	try {
		var elements = new Object();
		this._contentView = new ZaServerListView(this._container);

		this._initPopupMenu();
		this._actionMenu =  new ZaPopupMenu(this._contentView, "ActionMenu", null, this._popupOperations, ZaId.VIEW_SERLIST, ZaId.MENU_POP);
		elements[ZaAppViewMgr.C_APP_CONTENT] = this._contentView;
		//ZaApp.getInstance().createView(ZaZimbraAdmin._SERVERS_LIST_VIEW, elements);
        ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
		this._contentView.addSelectionListener(new AjxListener(this, this._listSelectionListener));
		this._contentView.addActionListener(new AjxListener(this, this._listActionListener));								
			
		this._UICreated = true;
		ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
	} catch (ex) {
		this._handleException(ex, "ZaServerListController.prototype._createUI", null, false);
		return;
	}	
}

ZaServerListController.prototype._flushCacheButtonListener = 
function(ev) {
	try {
		if(this._contentView.getSelectionCount()>0) {
			var arrItems = this._contentView.getSelection();
			if(arrItems && arrItems.length) {
				srvList = [];
				srvList._version = 1;
				var uuid = [];
				for(var i=0;i<arrItems.length;i++) {
					var srv = arrItems[i];
					srv["status"] = 0;
					srvList.push(srv);
					uuid.push(srv.id);
				}
				obj = {statusMessage:null,flushZimlet:true,flushSkin:true,flushLocale:true,serverList:srvList,status:0,name:(uuid.length > 1 ? ZaMsg.multiple_servers : srvList[0].name), _uuid:(uuid.length > 1 ? uuid.join("__") : uuid[0])};
				obj._uuid = uuid.join("__");
				ZaApp.getInstance().dialogs["flushCacheDialog"] = new ZaFlushCacheXDialog(this._container, {id:(uuid.length > 1 ? uuid.join("__") : uuid[0]), name:(uuid.length > 1 ? ZaMsg.multiple_servers : srvList[0].name)});
				ZaApp.getInstance().dialogs["flushCacheDialog"].setObject(obj);
				ZaApp.getInstance().dialogs["flushCacheDialog"].popup();
			}
		}	
	} catch (ex) {
		this._handleException(ex, "ZaServerListController.prototype._flushCacheButtonListener", null, false);
	}
	return;
}

ZaServerListController.prototype.set = 
function(serverList) {
	this.show(serverList);
}

/**
* @param ev
* This listener is invoked by  any controller that can change an ZaServer object
**/
ZaServerListController.prototype.handleServerChange = 
function (ev) {
	//if any of the data that is currently visible has changed - update the view
	if(ev) {
		var details = ev.getDetails();
		//if(details["modFields"] && (details["modFields"][ZaServer.A_description] )) {
		if (details) {
			if (this._list) this._list.replace (details);
			if (this._contentView) this._contentView.setUI();
			if(ZaApp.getInstance().getCurrentController() == this) {
				this.show();			
			}
			this.changeActionsState();
		}
	}
}


// new button was pressed
ZaServerListController.prototype._newButtonListener =
function(ev) {
	var newServer = new ZaServer();
	ZaApp.getInstance().getServerController().show(newServer);
}

/**
* This listener is called when the item in the list is double clicked. It call ZaServerController.show method
* in order to display the Server View
**/
ZaServerListController.prototype._listSelectionListener =
function(ev) {
	if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		if(ev.item) {
			this._selectedItem = ev.item;
			ZaApp.getInstance().getServerController().show(ev.item);
            var parentPath = ZaTree.getPathByArray([ZaMsg.OVP_home, ZaMsg.OVP_configure, ZaMsg.OVP_servers]);
            ZaZimbraAdmin.getInstance().getOverviewPanelController().addObjectItem(parentPath, ev.item.name, null, false, false, ev.item, undefined, true);
		}
	} else {
		this.changeActionsState();	
	}
}

ZaServerListController.prototype._listActionListener =
function (ev) {
	this.changeActionsState();
	this._actionMenu.popup(0, ev.docX, ev.docY);
}
/**
* This listener is called when the Edit button is clicked. 
* It call ZaServerController.show method
* in order to display the Server View
**/
ZaServerListController.prototype._editButtonListener =
function(ev) {
	if(this._contentView.getSelectionCount() == 1) {
		var item = this._contentView.getSelection()[0];
		ZaApp.getInstance().getServerController().show(item);
        var parentPath = ZaTree.getPathByArray([ZaMsg.OVP_home, ZaMsg.OVP_configure, ZaMsg.OVP_servers]);
        ZaZimbraAdmin.getInstance().getOverviewPanelController().addObjectItem(parentPath, item.name, null, false, false, item);
	}
}

ZaServerListController.prototype.getPopUpOperation =
function () {
    return this._popupOperations;
}

ZaServerListController.changeActionsStateMethod = 
function () {
	if(this._contentView) {
		var cnt = this._contentView.getSelectionCount();
		var enableFlush = true;
		var servers = this._contentView.getSelection();
		if(servers) {
			var cnt = servers.length;
			for(var i=0; i<cnt; i++) {
				if(!ZaItem.hasRight(ZaServer.FLUSH_CACHE_RIGHT,servers[i]) || !servers[i].attrs[ZaServer.A_zimbraMailboxServiceEnabled] || !servers[i].attrs[ZaServer.A_zimbraMailboxServiceInstalled]) {
					enableFlush = false;
					break;
				} 
					
			}
		}
		if(cnt == 1) {
			if(!enableFlush) {
				if(this._toolbarOperations[ZaOperation.FLUSH_CACHE])	
					this._toolbarOperations[ZaOperation.FLUSH_CACHE].enabled = false;
					
				if(this._popupOperations[ZaOperation.FLUSH_CACHE])	
					this._popupOperations[ZaOperation.FLUSH_CACHE].enabled = false;
			}
		} else if (cnt > 1){
			if(this._toolbarOperations[ZaOperation.EDIT])	
				this._toolbarOperations[ZaOperation.EDIT].enabled = false;
				
			if(this._popupOperations[ZaOperation.EDIT])	
				this._popupOperations[ZaOperation.EDIT].enabled = false;
				
			if(!enableFlush) {
				if(this._toolbarOperations[ZaOperation.FLUSH_CACHE])	
					this._toolbarOperations[ZaOperation.FLUSH_CACHE].enabled = false;
					
				if(this._popupOperations[ZaOperation.FLUSH_CACHE])	
					this._popupOperations[ZaOperation.FLUSH_CACHE].enabled = false;
			}
		} else if (cnt <1) {
			if(this._toolbarOperations[ZaOperation.EDIT])	
				this._toolbarOperations[ZaOperation.EDIT].enabled = false;
				
			if(this._popupOperations[ZaOperation.EDIT])	
				this._popupOperations[ZaOperation.EDIT].enabled = false;

			if(this._toolbarOperations[ZaOperation.FLUSH_CACHE])	
				this._toolbarOperations[ZaOperation.FLUSH_CACHE].enabled = false;
				
			if(this._popupOperations[ZaOperation.FLUSH_CACHE])	
				this._popupOperations[ZaOperation.FLUSH_CACHE].enabled = false;
				
		}
	}
}
ZaController.changeActionsStateMethods["ZaServerListController"].push(ZaServerListController.changeActionsStateMethod);
}
if (AjxPackage.define("zimbraAdmin.servers.controller.ZaServerController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaServerController controls display of a single Server
* @contructor ZaServerController
* @param appCtxt
* @param container
* @param abApp
* @author Greg Solovyev
**/

ZaServerController = function(appCtxt, container) {
	ZaXFormViewController.call(this, appCtxt, container,"ZaServerController");
	this._UICreated = false;
	this._helpURL = ZaUtil.HELP_URL;
	this._helpButtonText = ZaMsg.helpManageServers;
	this._toolbarOperations = new Array();
    this._popupOperations = new Array();
	this.deleteMsg = ZaMsg.Q_DELETE_SERVER;	
	this.objType = ZaEvent.S_SERVER;	
	this.tabConstructor = ZaServerXFormView ;
}

ZaServerController.prototype = new ZaXFormViewController();
ZaServerController.prototype.constructor = ZaServerController;

ZaController.initToolbarMethods["ZaServerController"] = new Array();
ZaController.initPopupMenuMethods["ZaServerController"] = new Array();
ZaController.setViewMethods["ZaServerController"] = new Array();
ZaController.changeActionsStateMethods["ZaServerController"] = new Array();
ZaXFormViewController.preSaveValidationMethods["ZaServerController"] = new Array();
/**
*	@method show
*	@param entry - isntance of ZaServer class
*/
ZaServerController.prototype.show = 
function(entry) {
	if (! this.selectExistingTabByItemId(entry.id)){
		this._setView(entry, true);
		//this.setDirty(false);
	}
}

ZaServerController.changeActionsStateMethod = function () {
    var isToEnable = (this._view && this._view.isDirty());

    if(this._popupOperations[ZaOperation.SAVE]) {
        this._popupOperations[ZaOperation.SAVE].enabled = isToEnable;
    }
		
}
ZaController.changeActionsStateMethods["ZaServerController"].push(ZaServerController.changeActionsStateMethod);

ZaServerController.prototype.setEnabled = 
function(enable) {
	//this._view.setEnabled(enable);
}

/**
* Adds listener to modifications in the contained ZaServer 
* @param listener
**/
ZaServerController.prototype.addServerChangeListener = 
function(listener) {
	this._evtMgr.addListener(ZaEvent.E_MODIFY, listener);
}

/**
* Removes listener to modifications in the controlled ZaServer 
* @param listener
**/
ZaServerController.prototype.removeServerChangeListener = 
function(listener) {
	this._evtMgr.removeListener(ZaEvent.E_MODIFY, listener);    	
}

ZaServerController.initPopupMethod =
function () {
	this._popupOperations[ZaOperation.SAVE]=new ZaOperation(ZaOperation.SAVE,ZaMsg.TBB_Save, ZaMsg.SERTBB_Save_tt, "Save", "SaveDis", new AjxListener(this, this.saveButtonListener));
   	this._popupOperations[ZaOperation.FLUSH_CACHE] = new ZaOperation(ZaOperation.FLUSH_CACHE, ZaMsg.SERTBB_FlushCache, ZaMsg.SERTBB_FlushCache_tt, "FlushCache", "FlushCache", new AjxListener(this, ZaServerController.prototype.flushCacheButtonListener));
	this._popupOperations[ZaOperation.DOWNLOAD_SERVER_CONFIG]=new ZaOperation(ZaOperation.DOWNLOAD_SERVER_CONFIG,ZaMsg.TBB_DownloadConfig, ZaMsg.SERTBB_DownloadConfig_tt, "DownloadServerConfig", "DownloadServerConfig", new AjxListener(this, this.downloadConfigButtonListener));
}
ZaController.initPopupMenuMethods["ZaServerController"].push(ZaServerController.initPopupMethod);

/*
ZaServerController.prototype.getAppBarAction =
function () {
    if (AjxUtil.isEmpty(this._appbarOperation)) {
        this._appbarOperation[ZaOperation.SAVE]= new ZaOperation(ZaOperation.SAVE, ZaMsg.TBB_Save, ZaMsg.ALTBB_Save_tt, "", "", new AjxListener(this, this.saveButtonListener));
        this._appbarOperation[ZaOperation.CLOSE] = new ZaOperation(ZaOperation.CLOSE, ZaMsg.TBB_Close, ZaMsg.ALTBB_Close_tt, "", "", new AjxListener(this, this.closeButtonListener));
    }

    return this._appbarOperation;
}

ZaServerController.prototype.getAppBarOrder =
function () {
    if (AjxUtil.isEmpty(this._appbarOrder)) {
        this._appbarOrder.push(ZaOperation.SAVE);
        this._appbarOrder.push(ZaOperation.CLOSE);
    }

    return this._appbarOrder;
}*/

/**
*	@method setViewMethod 
*	@param entry - isntance of ZaDomain class
*/
ZaServerController.setViewMethod =
function(entry) {
	entry.load("id", entry.id, false, true);
    if (!this._UICreated)
	    this._createUI(entry);
	ZaApp.getInstance().pushView(this.getContentViewId());
	this._view.setDirty(false);
	this._view.setObject(entry); 	//setObject is delayed to be called after pushView in order to avoid jumping of the view	
	this._currentObject = entry;
}
ZaController.setViewMethods["ZaServerController"].push(ZaServerController.setViewMethod);

/**
* @method _createUI
**/
ZaServerController.prototype._createUI =
function (entry) {
	this._contentView = this._view = new this.tabConstructor(this._container, entry);

    this._initPopupMenu();
	//always add Help button at the end of the toolbar
	
	var elements = new Object();
	elements[ZaAppViewMgr.C_APP_CONTENT] = this._view;
	ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
	this._UICreated = true;
	ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
}

ZaServerController.prototype.getPopUpOperation =
function () {
    return this._popupOperations;
}

ZaServerController.prototype._saveChanges =
function () {
	var obj = this._view.getObject();
    if (this._currentObject[ZaModel.currentTab]!= obj[ZaModel.currentTab])
             this._currentObject[ZaModel.currentTab] = obj[ZaModel.currentTab];
	this._currentObject.modify(obj);
	this._view.setDirty(false);
    ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.ServerModified,[this._currentObject.name]));
	return true;
}

ZaServerController.prototype.validateMyNetworks =
function (params) {
	if(!ZaItem.hasWritePermission(ZaServer.A_zimbraMtaMyNetworks, this._currentObject)) {
		this.runValidationStack(params);
		return;
	}

	var obj = this._view.getObject();

	/* If the user never edit the MTA Text field, the attribute doesn't exist. In this case
	*  we don't use to check the value. Otherwise, if we continue to check, it will report
	*  an error even the user never edit this item.
	*/
	
	if(!obj.attrs.hasOwnProperty(ZaServer.A_zimbraMtaMyNetworks)) {
		this.runValidationStack(params);
		return;
	}

	//find local networks
	var localIPs = [];
	var localIPs2 = [];
	var numIFs = 0;

	if(this._currentObject.nifs && this._currentObject.nifs.length) {
		numIFs = this._currentObject.nifs.length;
		for (var i = 0; i < numIFs; i++) {
			if (this._currentObject.nifs[i] && this._currentObject.nifs[i].attrs && this._currentObject.nifs[i].attrs.addr && this._currentObject.nifs[i].attrs.mask) {
				try {
					var localIpData = ZaIPUtil.isValidIP(this._currentObject.nifs[i].attrs.addr);
					var localIpData2 = ZaIPUtil.isValidIP(this._currentObject.nifs[i].attrs.addr);
					localIPs.push(localIpData);
					localIPs2.push(localIpData2);
				} catch (ex) {

				}
			}
		}
	}

	var IFCounter = numIFs;

	if (obj.attrs[ZaServer.A_zimbraMtaMyNetworks]) {
		obj.attrs[ZaServer.A_zimbraMtaMyNetworks] = AjxStringUtil.trim(obj.attrs[ZaServer.A_zimbraMtaMyNetworks], true);
		var chunks = obj.attrs[ZaServer.A_zimbraMtaMyNetworks].split(/[\s,]+/);
		var cnt = chunks.length;
		var masks = [];
		var excludeMasks = [];
		var cidrData;
		var validStr;
		for (var i = 0; i < cnt; i++) {
			if (chunks[i] != null && chunks[i].length > 2) {
				if (chunks[i].indexOf("!") == 0) {
					//exclude
					validStr = chunks[i].substr(1);
					if (chunks[i].indexOf("/") > 0) {
						//subnet
						try {
							cidrData = ZaIPUtil.isValidCIDR(validStr);
						} catch (ex) {
							throw new AjxException(AjxMessageFormat.format(ZaMsg.ERROR_NOT_CIDR, [validStr]), AjxException.INVALID_PARAM, "ZaServerController.prototype.validateMyNetworks");
						}
						excludeMasks.push(cidrData);

						for (var j = (numIFs - 1); j >= 0; j--) {
							if (ZaIPUtil.isInSubNet(cidrData, localIPs2[j])) {
								throw new AjxException(AjxMessageFormat.format(ZaMsg.ERROR_LOCAL_ADDR_EXCLUDED, [localIPs2[j].src, chunks[i]]), AjxException.INVALID_PARAM, "ZaServerController.prototype.validateMyNetworks");
							}
						}
					} else {
						//address
						try {
							var exIPData = ZaIPUtil.isValidIP(validStr);
						} catch (ex) {
							throw new AjxException(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_EXCLUDE_ADDR, [validStr]), AjxException.INVALID_PARAM, "ZaServerController.prototype.validateMyNetworks");
						}

						for (var j = (numIFs - 1); j >= 0; j--) {
							var cmpResult = 1;
							try {
								cmpResult = ZaIPUtil.compareIP(localIPs2[j], exIPData);
							} catch (ex) {

							}

							if(cmpResult === 0) {
								throw new AjxException(AjxMessageFormat.format(ZaMsg.ERROR_LOCAL_ADDR_EXCLUDED, [localIPs2[j].src, chunks[i]]), AjxException.INVALID_PARAM, "ZaServerController.prototype.validateMyNetworks");
							}
						}
					}
				} else {
					//include
					validStr = chunks[i];

					//bug ZCS-1549:  allow non-CIDR inet addresses
					var j = 0;
					var ipFound = false;
					var isNonCIDR = false;

					if (validStr.search("/") < 0) {
						isNonCIDR = true;
						try {
							var exIPData = ZaIPUtil.isValidIP(validStr);
						} catch (ex) {
							throw new AjxException(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_EXCLUDE_ADDR, [validStr]), AjxException.INVALID_PARAM, "ZaServerController.prototype.validateMyNetworks");
						}
					}

					while (validStr.search("/") < 0 && j < localIPs.length) {
						if (validStr === localIPs[j].src) {
							localIPs.splice(j, 1);
							IFCounter--;
							ipFound = true;
							break;
						}
						j++;
					}

					if (ipFound == false && isNonCIDR == false) {
						try {
							cidrData = ZaIPUtil.isValidCIDR(validStr);
						} catch (ex) {
							throw new AjxException(AjxMessageFormat.format(ZaMsg.ERROR_NOT_CIDR, [validStr]), AjxException.INVALID_PARAM, "ZaServerController.prototype.validateMyNetworks");
						}

						masks.push(cidrData);

						for (var j = (IFCounter - 1); j >= 0; j--) {
							try {
								if (ZaIPUtil.isInSubNet(cidrData, localIPs[j])) {
									localIPs.splice(j, 1);
									IFCounter--;
								}
							} catch (ex) {

							}
						}
					}
				}
			} else {
				throw new AjxException(AjxMessageFormat.format(ZaMsg.ERROR_NOT_CIDR, [chunks[i]]), AjxException.INVALID_PARAM, "ZaServerController.prototype.validateMyNetworks");
			}
		}

		if (chunks.length < 1) {
			//error! no valid subnets
			throw new AjxException(AjxMessageFormat.format(ZaMsg.ERROR_NO_VALID_SUBNETS, [obj.attrs[ZaServer.A_zimbraMtaMyNetworks]]), AjxException.INVALID_PARAM, "ZaServerController.prototype.validateMyNetworks");
		}
	}

	//do we have a 127.0.0.0/8 (255.0.0.0) and other local interfaces
	if (IFCounter > 0) {
		//error! missing local interfaces
		var missingIfs = [];
		for (var ix = 0; ix < IFCounter; ix++) {
			missingIfs.push(localIPs[ix].src);
		}
		throw new AjxException(AjxMessageFormat.format(ZaMsg.ERROR_MISSING_LOCAL, missingIfs.join(",")), AjxException.INVALID_PARAM, "ZaServerController.prototype.validateMyNetworks");
	}

	this.runValidationStack(params);

}
ZaXFormViewController.preSaveValidationMethods["ZaServerController"].push(ZaServerController.prototype.validateMyNetworks);

ZaServerController.prototype.validateMTA =
function (params) {
	if(!ZaItem.hasWritePermission(ZaServer.A_zimbraSmtpHostname,this._currentObject)) {
		this.runValidationStack(params);
		return;
	}
	
	var obj = this._view.getObject();
	if((AjxUtil.isEmpty(obj.attrs[ZaServer.A_zimbraSmtpHostname])) && !AjxUtil.isEmpty(this._currentObject.attrs[ZaServer.A_zimbraSmtpHostname])) {
		if(ZaApp.getInstance().dialogs["confirmMessageDialog"])
			ZaApp.getInstance().dialogs["confirmMessageDialog"].popdown();
			
		ZaApp.getInstance().dialogs["confirmMessageDialog"]  = new ZaMsgDialog(this._view.shell, null, [DwtDialog.YES_BUTTON, DwtDialog.CANCEL_BUTTON], null, ZaId.CTR_PREFIX + ZaId.VIEW_STATUS + "_confirmMessage");	
		ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(AjxMessageFormat.format(ZaMsg.WARNING_RESETING_SMTP_HOST,[obj._defaultValues.attrs[ZaServer.A_zimbraSmtpHostname].join(", "),obj._defaultValues.attrs[ZaServer.A_zimbraSmtpHostname].join(", ")]),  DwtMessageDialog.WARNING_STYLE);
		var args;
		var callBack = ZaServerController.prototype.runValidationStack;
		if(!params || !params["func"]) {
			args = null;
		} else {
			args = params;		
		}
		ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, callBack, this, args);		
		ZaApp.getInstance().dialogs["confirmMessageDialog"].popup();		
	} else {
		this.runValidationStack(params);
		return;
	}
}
ZaXFormViewController.preSaveValidationMethods["ZaServerController"].push(ZaServerController.prototype.validateMTA);

ZaServerController.prototype.validateVolumeChanges = 
function (params) {
	if(!ZaItem.hasRight(ZaServer.MANAGE_VOLUME_RIGHT,this._currentObject)) {
		this.runValidationStack(params);
		return;
	}
		
	var obj = this._view.getObject();
	if(obj[ZaServer.A_RemovedVolumes] && obj[ZaServer.A_RemovedVolumes].length > 0 ) {
		if(ZaApp.getInstance().dialogs["confirmMessageDialog"])
			ZaApp.getInstance().dialogs["confirmMessageDialog"].popdown();
			
		ZaApp.getInstance().dialogs["confirmMessageDialog"] = new ZaMsgDialog(this._view.shell, null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON],null, ZaId.CTR_PREFIX + ZaId.VIEW_STATUS + "_confirmMessage");	

		ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(ZaMsg.Q_DELETE_VOLUMES,  DwtMessageDialog.WARNING_STYLE);
		var args;
		var callBack = ZaServerController.prototype.runValidationStack;
		if(!params || !params["func"]) {
			args = null;
		} else {
			args = params;		
		}
		ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, callBack, this, args);		
		ZaApp.getInstance().dialogs["confirmMessageDialog"].popup();		
	} else {
		this.runValidationStack(params);
		return;
	}
}
ZaXFormViewController.preSaveValidationMethods["ZaServerController"].push(ZaServerController.prototype.validateVolumeChanges);

ZaServerController.changeProxyPorts = function () {
	if(ZaApp.getInstance().dialogs["confirmMessageDialog"]) {
		var obj = ZaApp.getInstance().dialogs["confirmMessageDialog"].getObject();
		if(obj) {
			if(obj.selectedChoice == 0) {
				//change
				this._view.getObject().attrs[obj.fieldRef] = obj.defVal;
			} else if (obj.selectedChoice == 2) {
				//do not change and disable service
				this._view.getObject().attrs[ZaServer.A_zimbraMailProxyServiceEnabled] = false;
			}
		}
	}
	ZaServerController.prototype.runValidationStack.call(this);
}
ZaServerController.prototype.validateImapBindPort =
function (params) {
	if(!ZaItem.hasWritePermission(ZaServer.A_zimbraImapBindPort,this._currentObject)) {
		this.runValidationStack(params);
		return;
	}		
	var obj = this._view.getObject();
 	var tmpObj = {selectedChoice:0, choice1Label:"",choice2Label:"",choice3Label:"",warningMsg:"",fieldRef:""};

	if( (obj.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] != this._currentObject.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] && obj.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] == true)	
	) {
		if ((obj.attrs[ZaServer.A_zimbraImapBindPort] != ZaServer.DEFAULT_IMAP_PORT_ZCS && (obj.attrs[ZaServer.A_zimbraImapBindPort] != null)) || 
			(obj.attrs[ZaServer.A_zimbraImapBindPort] == null && (obj._defaultValues.attrs[ZaServer.A_zimbraImapBindPort] != ZaServer.DEFAULT_IMAP_PORT_ZCS))
			 ) {
			tmpObj.warningMsg = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning,[ZaMsg.IMAP_Port,obj.attrs[ZaServer.A_zimbraImapBindPort]]);
			tmpObj.choice1Label = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning_OP1,[ZaMsg.IMAP_Port,ZaServer.DEFAULT_IMAP_PORT_ZCS]);
			tmpObj.choice2Label = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning_OP2,[ZaMsg.IMAP_Port,obj.attrs[ZaServer.A_zimbraImapBindPort]]);			
			tmpObj.choice3Label = ZaMsg.Server_WrongPortWarning_OP3;		
			tmpObj.fieldRef = ZaServer.A_zimbraImapBindPort;
			tmpObj.defVal = ZaServer.DEFAULT_IMAP_PORT_ZCS;
			ZaServerController.showPortWarning.call(this, params,tmpObj);
		} else {
			this.runValidationStack(params);
			return;
		}
	} else {
		this.runValidationStack(params);
		return;
	}
}
ZaXFormViewController.preSaveValidationMethods["ZaServerController"].push(ZaServerController.prototype.validateImapBindPort);

ZaServerController.prototype.validateImapSSLBindPort =
function (params) {
	var obj = this._view.getObject();
 	var tmpObj = {selectedChoice:0, choice1Label:"",choice2Label:"",choice3Label:"",warningMsg:"",fieldRef:""};

	if( (obj.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] != this._currentObject.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] && obj.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] == true)	
	) {
		if ((obj.attrs[ZaServer.A_ImapSSLBindPort] != ZaServer.DEFAULT_IMAP_SSL_PORT_ZCS && (obj.attrs[ZaServer.A_ImapSSLBindPort] != null)) || (obj.attrs[ZaServer.A_ImapSSLBindPort] == null && (obj._defaultValues.attrs[ZaServer.A_ImapSSLBindPort] != ZaServer.DEFAULT_IMAP_SSL_PORT_ZCS))) { 
			tmpObj.defVal = ZaServer.DEFAULT_IMAP_SSL_PORT_ZCS;
			tmpObj.warningMsg = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning,[ZaMsg.IMAP_Port,obj.attrs[ZaServer.A_ImapSSLBindPort]]);
			tmpObj.choice1Label = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning_OP1,[ZaMsg.IMAP_SSLPort,ZaServer.DEFAULT_IMAP_SSL_PORT_ZCS]);
			tmpObj.choice2Label = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning_OP2,[ZaMsg.IMAP_SSLPort,obj.attrs[ZaServer.A_ImapSSLBindPort]]);			
			tmpObj.choice3Label = ZaMsg.Server_WrongPortWarning_OP3;				
			tmpObj.fieldRef = ZaServer.A_ImapSSLBindPort;
			ZaServerController.showPortWarning.call(this, params,tmpObj);
		} else {
			this.runValidationStack(params);
			return;
		}
	} else {
		this.runValidationStack(params);
		return;
	}
}
ZaXFormViewController.preSaveValidationMethods["ZaServerController"].push(ZaServerController.prototype.validateImapSSLBindPort);

ZaServerController.prototype.validatePop3BindPort =
function (params) {
	if(!ZaItem.hasWritePermission(ZaServer.A_zimbraPop3BindPort,this._currentObject)) {
		this.runValidationStack(params);
		return;
	}
	var obj = this._view.getObject();
 	var tmpObj = {selectedChoice:0, choice1Label:"",choice2Label:"",choice3Label:"",warningMsg:"",fieldRef:""};

	if( (obj.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] != this._currentObject.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] && obj.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] == true)	
	) {
		if ((obj.attrs[ZaServer.A_zimbraPop3BindPort] != ZaServer.DEFAULT_POP3_PORT_ZCS && (obj.attrs[ZaServer.A_zimbraPop3BindPort] != null)) || (obj.attrs[ZaServer.A_zimbraPop3BindPort] == null && (obj._defaultValues.attrs[ZaServer.A_zimbraPop3BindPort] != ZaServer.DEFAULT_POP3_PORT_ZCS))) {
			tmpObj.defVal = ZaServer.DEFAULT_POP3_PORT_ZCS;
			tmpObj.warningMsg = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning,[ZaMsg.NAD_POP_Port,obj.attrs[ZaServer.A_zimbraPop3BindPort]]);
			tmpObj.choice1Label = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning_OP1,[ZaMsg.NAD_POP_Port,ZaServer.DEFAULT_POP3_PORT_ZCS]);
			tmpObj.choice2Label = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning_OP2,[ZaMsg.NAD_POP_Port,obj.attrs[ZaServer.A_zimbraPop3BindPort]]);			
			tmpObj.choice3Label = ZaMsg.Server_WrongPortWarning_OP3;	
			tmpObj.fieldRef = ZaServer.A_zimbraPop3BindPort;	
			ZaServerController.showPortWarning.call(this, params,tmpObj);
		} else {
			this.runValidationStack(params);
			return;
		}
	} else {
		this.runValidationStack(params);
		return;
	}
}
ZaXFormViewController.preSaveValidationMethods["ZaServerController"].push(ZaServerController.prototype.validatePop3BindPort);

ZaServerController.prototype.validatePop3BindAddress = 
function (params) {
        if(!ZaItem.hasWritePermission(ZaServer.A_Pop3BindAddress,this._currentObject)) {
                this.runValidationStack(params);
                return;
        }
        var obj = this._view.getObject();
	if(obj.attrs[ZaServer.A_Pop3BindAddress] != this._currentObject.attrs[ZaServer.A_Pop3BindAddress]) {
		if(!ZaApp.getInstance().dialogs["confirmSaveDialog"]) {
		var confirmDialog = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, 
			[DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON], null, ZaId.VIEW_STATUS + "_confirmSavePopAddr"); 
		confirmDialog.setMessage(ZaMsg.NAD_POP_Address_Warning, DwtMessageDialog.WARNING_STYLE);
		confirmDialog.registerCallback(DwtDialog.YES_BUTTON, ZaServerController._confirmSavePop3BindAddress, this, null);
		ZaApp.getInstance().dialogs["confirmSaveDialog"] = confirmDialog;
		}
		ZaApp.getInstance().dialogs["confirmSaveDialog"].popup();

	} else {
                this.runValidationStack(params);
                return;
	}
}
ZaXFormViewController.preSaveValidationMethods["ZaServerController"].push(ZaServerController.prototype.validatePop3BindAddress);

ZaServerController._confirmSavePop3BindAddress =
function() {
	if(ZaApp.getInstance().dialogs["confirmSaveDialog"])
		ZaApp.getInstance().dialogs["confirmSaveDialog"].popdown();
	ZaServerController.prototype.runValidationStack.call(this);
}


ZaServerController.prototype.validatePop3SSLBindPort =
function (params) {
	if(!ZaItem.hasWritePermission(ZaServer.A_zimbraPop3SSLBindPort,this._currentObject)) {
		this.runValidationStack(params);
		return;
	}		
	var obj = this._view.getObject();
 	var tmpObj = {selectedChoice:0, choice1Label:"",choice2Label:"",choice3Label:"",warningMsg:"",fieldRef:""};

	if( (obj.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] != this._currentObject.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] && obj.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] == true)	
	) {
		 if ((obj.attrs[ZaServer.A_zimbraPop3SSLBindPort] != ZaServer.DEFAULT_POP3_SSL_PORT_ZCS && (obj.attrs[ZaServer.A_zimbraPop3SSLBindPort] != null)) || (obj.attrs[ZaServer.A_zimbraPop3SSLBindPort] == null && (obj._defaultValues.attrs[ZaServer.A_zimbraPop3SSLBindPort] != ZaServer.DEFAULT_POP3_SSL_PORT_ZCS))) {
			tmpObj.defVal = ZaServer.DEFAULT_POP3_SSL_PORT_ZCS;			
			tmpObj.warningMsg = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning,[ZaMsg.NAD_POP_SSL_Port,obj.attrs[ZaServer.A_zimbraPop3SSLBindPort]]);
			tmpObj.choice1Label = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning_OP1,[ZaMsg.NAD_POP_SSL_Port,ZaServer.DEFAULT_POP3_SSL_PORT_ZCS]);
			tmpObj.choice2Label = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning_OP2,[ZaMsg.NAD_POP_SSL_Port,obj.attrs[ZaServer.A_zimbraPop3SSLBindPort]]);			
			tmpObj.choice3Label = ZaMsg.Server_WrongPortWarning_OP3;				
			tmpObj.fieldRef = ZaServer.A_zimbraPop3SSLBindPort;	
			ZaServerController.showPortWarning.call(this, params,tmpObj);
		} else {
			this.runValidationStack(params);
			return;
		}
	} else {
		this.runValidationStack(params);
		return;
	}
}
ZaXFormViewController.preSaveValidationMethods["ZaServerController"].push(ZaServerController.prototype.validatePop3SSLBindPort);

ZaServerController.prototype.validateImapProxyBindPort =
function (params) {
	if(!ZaItem.hasWritePermission(ZaServer.A_zimbraImapProxyBindPort,this._currentObject)) {
		this.runValidationStack(params);
		return;
	}
	
	var obj = this._view.getObject();
 	var tmpObj = {selectedChoice:0, choice1Label:"",choice2Label:"",choice3Label:"",warningMsg:"",fieldRef:""};

	if( (obj.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] != this._currentObject.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] && obj.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] == true)	
	) {
		 if ((obj.attrs[ZaServer.A_zimbraImapProxyBindPort] != ZaServer.DEFAULT_IMAP_PORT && (obj.attrs[ZaServer.A_zimbraImapProxyBindPort] != null)) || (obj.attrs[ZaServer.A_zimbraImapProxyBindPort] == null && (obj._defaultValues.attrs[ZaServer.A_zimbraImapProxyBindPort] != ZaServer.DEFAULT_IMAP_PORT))) {
			tmpObj.defVal = ZaServer.DEFAULT_IMAP_PORT;						
			tmpObj.warningMsg = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning,[ZaMsg.IMAP_Proxy_Port,obj.attrs[ZaServer.A_zimbraImapProxyBindPort]]);
			tmpObj.choice1Label = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning_OP1,[ZaMsg.IMAP_Proxy_Port,ZaServer.DEFAULT_IMAP_PORT]);
			tmpObj.choice2Label = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning_OP2,[ZaMsg.IMAP_Proxy_Port,obj.attrs[ZaServer.A_zimbraImapProxyBindPort]]);			
			tmpObj.choice3Label = ZaMsg.Server_WrongPortWarning_OP3;	
			tmpObj.fieldRef = ZaServer.A_zimbraImapProxyBindPort;			
			ZaServerController.showPortWarning.call(this, params,tmpObj);
		} else {
			this.runValidationStack(params);
			return;
		}
	} else {
		this.runValidationStack(params);
		return;
	}
}
ZaXFormViewController.preSaveValidationMethods["ZaServerController"].push(ZaServerController.prototype.validateImapProxyBindPort);


ZaServerController.prototype.validateImapSSLProxyBindPort =
function (params) {
	if(!ZaItem.hasWritePermission(ZaServer.A_zimbraImapSSLProxyBindPort,this._currentObject)) {
		this.runValidationStack(params);
		return;
	}
	var obj = this._view.getObject();
 	var tmpObj = {selectedChoice:0, choice1Label:"",choice2Label:"",choice3Label:"",warningMsg:"",fieldRef:""};

	if( (obj.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] != this._currentObject.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] && obj.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] == true)	
	) {
		if ((obj.attrs[ZaServer.A_zimbraImapSSLProxyBindPort] != ZaServer.DEFAULT_IMAP_SSL_PORT && (obj.attrs[ZaServer.A_zimbraImapSSLProxyBindPort] != null)) || (obj.attrs[ZaServer.A_zimbraImapSSLProxyBindPort] == null && (obj._defaultValues.attrs[ZaServer.A_zimbraImapSSLProxyBindPort] != ZaServer.DEFAULT_IMAP_SSL_PORT))) {
			tmpObj.defVal = ZaServer.DEFAULT_IMAP_SSL_PORT;									
			tmpObj.warningMsg = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning,[ZaMsg.IMAP_SSL_Proxy_Port,obj.attrs[ZaServer.A_zimbraImapSSLProxyBindPort]]);
			tmpObj.choice1Label = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning_OP1,[ZaMsg.IMAP_SSL_Proxy_Port,ZaServer.DEFAULT_IMAP_SSL_PORT]);
			tmpObj.choice2Label = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning_OP2,[ZaMsg.IMAP_SSL_Proxy_Port,obj.attrs[ZaServer.A_zimbraImapSSLProxyBindPort]]);			
			tmpObj.choice3Label = ZaMsg.Server_WrongPortWarning_OP3;				
			tmpObj.fieldRef = ZaServer.A_zimbraImapSSLProxyBindPort;		
			ZaServerController.showPortWarning.call(this, params,tmpObj);	
		} else {
			this.runValidationStack(params);
			return;
		}
	} else {
		this.runValidationStack(params);
		return;
	}
}
ZaXFormViewController.preSaveValidationMethods["ZaServerController"].push(ZaServerController.prototype.validateImapSSLProxyBindPort);


ZaServerController.prototype.validatePop3ProxyBindPort =
function (params) {
	if(!ZaItem.hasWritePermission(ZaServer.A_zimbraPop3ProxyBindPort,this._currentObject)) {
		this.runValidationStack(params);
		return;
	}
	
	var obj = this._view.getObject();
 	var tmpObj = {selectedChoice:0, choice1Label:"",choice2Label:"",choice3Label:"",warningMsg:"",fieldRef:""};

	if( (obj.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] != this._currentObject.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] && obj.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] == true)	
	) {
		if ((obj.attrs[ZaServer.A_zimbraPop3ProxyBindPort] != ZaServer.DEFAULT_POP3_PORT && (obj.attrs[ZaServer.A_zimbraPop3ProxyBindPort] != null)) || (obj.attrs[ZaServer.A_zimbraPop3ProxyBindPort] == null && (obj._defaultValues.attrs[ZaServer.A_zimbraPop3ProxyBindPort] != ZaServer.DEFAULT_POP3_PORT))) {
			tmpObj.defVal = ZaServer.DEFAULT_POP3_PORT;												
			tmpObj.warningMsg = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning,[ZaMsg.NAD_POP_proxy_Port,obj.attrs[ZaServer.A_zimbraPop3ProxyBindPort]]);
			tmpObj.choice1Label = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning_OP1,[ZaMsg.NAD_POP_proxy_Port,ZaServer.DEFAULT_POP3_PORT]);
			tmpObj.choice2Label = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning_OP2,[ZaMsg.NAD_POP_proxy_Port,obj.attrs[ZaServer.A_zimbraPop3ProxyBindPort]]);			
			tmpObj.choice3Label = ZaMsg.Server_WrongPortWarning_OP3;				
			tmpObj.fieldRef = ZaServer.A_zimbraPop3ProxyBindPort;		
			ZaServerController.showPortWarning.call(this, params,tmpObj);
		} else {
			this.runValidationStack(params);
			return;
		}
	} else {
		this.runValidationStack(params);
		return;
	}
}
ZaXFormViewController.preSaveValidationMethods["ZaServerController"].push(ZaServerController.prototype.validatePop3ProxyBindPort);

ZaServerController.prototype.validatePop3SSLProxyBindPort =
function (params) {
	if(!ZaItem.hasWritePermission(ZaServer.A_zimbraPop3SSLProxyBindPort,this._currentObject)) {
		this.runValidationStack(params);
		return;
	}
	
	var obj = this._view.getObject();
 	var tmpObj = {selectedChoice:0, choice1Label:"",choice2Label:"",choice3Label:"",warningMsg:"",fieldRef:""};

	if( (obj.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] != this._currentObject.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] && obj.attrs[ZaServer.A_zimbraMailProxyServiceEnabled] == true)	
	) {
		if ((obj.attrs[ZaServer.A_zimbraPop3SSLProxyBindPort] != ZaServer.DEFAULT_POP3_SSL_PORT && (obj.attrs[ZaServer.A_zimbraPop3SSLProxyBindPort] != null)) || (obj.attrs[ZaServer.A_zimbraPop3SSLProxyBindPort] == null && (obj._defaultValues.attrs[ZaServer.A_zimbraPop3SSLProxyBindPort] != ZaServer.DEFAULT_POP3_SSL_PORT))) {
			tmpObj.defVal = ZaServer.DEFAULT_POP3_SSL_PORT;															
			tmpObj.warningMsg = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning,[ZaMsg.NAD_POP_SSL_proxy_Port,obj.attrs[ZaServer.A_zimbraPop3SSLProxyBindPort]]);
			tmpObj.choice1Label = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning_OP1,[ZaMsg.NAD_POP_SSL_proxy_Port,ZaServer.DEFAULT_POP3_SSL_PORT]);
			tmpObj.choice2Label = AjxMessageFormat.format(ZaMsg.Server_WrongPortWarning_OP2,[ZaMsg.NAD_POP_SSL_proxy_Port,obj.attrs[ZaServer.A_zimbraPop3SSLProxyBindPort]]);			
			tmpObj.choice3Label = ZaMsg.Server_WrongPortWarning_OP3;	
			tmpObj.fieldRef = ZaServer.A_zimbraPop3SSLProxyBindPort;			
			ZaServerController.showPortWarning.call(this, params,tmpObj);
		} else {
			this.runValidationStack(params);
			return;
		}
	} else {
		this.runValidationStack(params);
		return;
	}
}
ZaXFormViewController.preSaveValidationMethods["ZaServerController"].push(ZaServerController.prototype.validatePop3SSLProxyBindPort);


ZaServerController.showPortWarning = function (params, instanceObj) {
	if(ZaApp.getInstance().dialogs["confirmMessageDialog"])
		ZaApp.getInstance().dialogs["confirmMessageDialog"].popdown();
		
	ZaApp.getInstance().dialogs["confirmMessageDialog"] = new ZaProxyPortWarningXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "550px", "150px",ZaMsg.Server_WrongPortWarningTitle);	
	ZaApp.getInstance().dialogs["confirmMessageDialog"].setObject(instanceObj);
	ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.OK_BUTTON, ZaServerController.changeProxyPorts, this, null);
	var args;
	if(!params || !params["func"]) {
		args = null;
	} else {
		args = params;		
	}
	ZaApp.getInstance().dialogs["confirmMessageDialog"].popup();		
}
/**
* handles "save" button click
* calls modify on the current ZaServer
**/
ZaServerController.prototype.saveButtonListener =
function(ev) {
	try {
		this.validateChanges();
		
	} catch (ex) {
		//if exception thrown - don' go away
		this._handleException(ex, "ZaServerController.prototype.saveButtonListener", null, false);
	}
}
/**
* handles "download" button click. Launches file download in a new window
**/
ZaServerController.prototype.downloadConfigButtonListener = 
function(ev) {
	window.open(["/service/collectconfig/?host=",this._currentObject.attrs[ZaServer.A_ServiceHostname]].join(""));
}

ZaServerController.prototype.flushCacheButtonListener = 
function(ev) {
	try {
		srvList = [];
		srvList._version = 1;
		var srv = this._currentObject;
		srv["status"] = 0;
		srvList.push(srv);
		obj = {statusMessage:null,flushZimlet:true,flushSkin:true,flushLocale:true,serverList:srvList,status:0, _uuid:srv.id, name:srv.name};
		ZaApp.getInstance().dialogs["flushCacheDialog"] = new ZaFlushCacheXDialog(this._container, srv);
		ZaApp.getInstance().dialogs["flushCacheDialog"].setObject(obj);
		ZaApp.getInstance().dialogs["flushCacheDialog"].popup();
	} catch (ex) {
		this._handleException(ex, "ZaServerController.prototype.flushCacheButtonListener", null, false);
	}
	return;
}

}
if (AjxPackage.define("zimbraAdmin.adminext.controller.ZaAdminExtListController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaAdminExtListController
* This is a singleton object that controls all the user interaction with the list of ZaZimlet objects
* @author Greg Solovyev
**/
ZaAdminExtListController = function(appCtxt, container) {
	ZaListViewController.call(this, appCtxt, container,"ZaAdminExtListController");
   	this._popupOperations = new Array();			
	this.objType = ZaEvent.S_ZIMLET;
	this._helpURL = ZaUtil.HELP_URL;
	this._helpButtonText = ZaMsg.helpAdminExtensions;
}

ZaAdminExtListController.prototype = new ZaListViewController();
ZaAdminExtListController.prototype.constructor = ZaAdminExtListController;
 
ZaController.initPopupMenuMethods["ZaAdminExtListController"] = new Array();
ZaController.changeActionsStateMethods["ZaAdminExtListController"] = new Array();

/**
* @param list {ZaItemList} a list of ZaZimlet {@link ZaZimlet} objects
**/
ZaAdminExtListController.prototype.show = 
function(list, openInNewTab) {
    	if (!this._UICreated) {
		this._createUI();
	}
 	
	if (list != null && list instanceof ZaItemList) {
		this._list = list;
	} else {
		this._list = ZaZimlet.getAll(ZaZimlet.EXCLUDE_MAIL, new AjxCallback(this, this.show));
		return;		
	}	

	this._contentView.set(this._list.getVector());
	//ZaApp.getInstance().pushView(ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW);					
	ZaApp.getInstance().pushView(this.getContentViewId());
	this._removeList = new Array();
		
	this.changeActionsState();		
	/*
	if (openInNewTab) {//when a ctrl shortcut is pressed
		
	}else{ //open in the main tab
		this.updateMainTab ("AdminExtension") ;	
	}*/
}

ZaAdminExtListController.initPopupMenuMethod =
function () {
	this._popupOperations[ZaOperation.DEPLOY_ZIMLET]=new ZaOperation(ZaOperation.DEPLOY_ZIMLET,ZaMsg.TBB_DeployNew, ZaMsg.TBB_DeployNew_tt, "Deploy", "Deploy", new AjxListener(this, this.deployZimletListener));
   	this._popupOperations[ZaOperation.DELETE]=new ZaOperation(ZaOperation.DELETE,ZaMsg.TBB_Undeploy, ZaMsg.DTBB_Undeploy_tt, "Undeploy", "Undeploy", new AjxListener(this, this._undeployButtonListener));
   	this._popupOrder.push(ZaOperation.DEPLOY_ZIMLET);
   	this._popupOrder.push(ZaOperation.DELETE);
}
ZaController.initPopupMenuMethods["ZaAdminExtListController"].push(ZaAdminExtListController.initPopupMenuMethod);

ZaAdminExtListController.prototype.deployZimletListener = 
function (ev) {
	try {
		//if(!this._deployZimletWizard)
			this._deployZimletWizard = new ZaZimletDeployXWizard(this._container);		
	
		var zimlet = new ZaZimlet();
		this._deployZimletWizard.setObject(zimlet);		
		this._deployZimletWizard.popup();
	} catch (ex) {
		this._handleException(ex, "ZaAdminExtListController.prototype.deployZimletListener", null, false);
	}
	return;
}

ZaAdminExtListController.prototype._createUI = function () {
	try {
		var elements = new Object();
		this._contentView = new ZaAdminExtListView(this._container);
		this._initPopupMenu();
		this._actionMenu =  new ZaPopupMenu(this._contentView, "ActionMenu", null, this._popupOperations, ZaId.VIEW_AELIST, ZaId.MENU_POP);

		elements[ZaAppViewMgr.C_APP_CONTENT] = this._contentView;
		//ZaApp.getInstance().createView(ZaZimbraAdmin._ZIMLET_LIST_VIEW, elements);
        
        ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
		this._contentView.addSelectionListener(new AjxListener(this, this._listSelectionListener));
		this._contentView.addActionListener(new AjxListener(this, this._listActionListener));			
		this._removeConfirmMessageDialog = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON],null, ZaId.CTR_PREFIX + ZaId.VIEW_AELIST + "_removeConfirm");					
		
		this._UICreated = true;
		ZaApp.getInstance()._controllers[this.getContentViewId()] = this ;
	} catch (ex) {
		this._handleException(ex, "ZaAdminExtListController.prototype._createUI", null, false);
		return;
	}	
}

ZaAdminExtListController.prototype.set = 
function(zimletList) {
	this.show(zimletList);
}


/**
* This listener is called when the item in the list is double clicked. It call ZaZimletController.show method
* in order to display the Zimlet View
**/
ZaAdminExtListController.prototype._listSelectionListener =
function(ev) {
	if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		if(ev.item) {
			this._selectedItem = ev.item;
			ZaApp.getInstance().getZimletController().show(ev.item);

            var parentPath = ZaTree.getPathByArray([ZaMsg.OVP_home, ZaMsg.OVP_configure, ZaMsg.OVP_adminZimlets]);
            ZaZimbraAdmin.getInstance().getOverviewPanelController().addObjectItem(parentPath, ev.item.name, null, false, false, ev.item);
		}
	} else {
		this.changeActionsState();	
	}
}

ZaAdminExtListController.prototype._listActionListener =
function (ev) {
	this.changeActionsState();
	this._actionMenu.popup(0, ev.docX, ev.docY);
}
/**
* This listener is called when the Edit button is clicked. 
* It call ZaZimletController.show method
* in order to display the Zimlet View
**/
ZaAdminExtListController.prototype._editButtonListener =
function(ev) {
/*	if(this._contentView.getSelectionCount() == 1) {
		var item = this._contentView.getSelection()[0];
		ZaApp.getInstance().getZimletController().show(item);
	}*/
}

/**
* This listener is called when the Undeploy button is clicked. 
**/
ZaAdminExtListController.prototype._undeployButtonListener =
function(ev) {
	this._removeList = new Array();
	if(this._contentView.getSelectionCount()>0) {
		var arrItems = this._contentView.getSelection();
		var cnt = arrItems.length;
		for(var key =0; key < cnt; key++) {
			if(arrItems[key]) {
				this._removeList.push(arrItems[key]);
			}
		}
	}
	if(this._removeList.length) {
		var dlgMsg;
		dlgMsg = ZaMsg.Q_UNDEPLOY_ADMIN_EXTENSIONS;			
		dlgMsg += "<br>";
		for(var key in this._removeList) {
			if(i > 19) {
				dlgMsg += "<li>...</li>";
				break;
			}
			dlgMsg += "<li>";
			if(this._removeList[key].name.length > 50) {
				//split it
				var endIx = 49;
				var beginIx = 0; //
				while(endIx < this._removeList[key].name.length) { //
					dlgMsg +=  this._removeList[key].name.slice(beginIx, endIx); //
					beginIx = endIx + 1; //
					if(beginIx >= (this._removeList[key].name.length) ) //
						break;
					
					endIx = ( this._removeList[key].name.length <= (endIx + 50) ) ? this._removeList[key].name.length-1 : (endIx + 50);
					dlgMsg +=  "<br>";	
				}
			} else {
				dlgMsg += this._removeList[key].name;
			}
			dlgMsg += "</li>";
			i++;
		}
		dlgMsg += "</ul>";
		this._removeConfirmMessageDialog.setMessage(dlgMsg, DwtMessageDialog.INFO_STYLE);
		this._removeConfirmMessageDialog.registerCallback(DwtDialog.YES_BUTTON, ZaAdminExtListController.prototype._undeployZimletsCallback, this);
		this._removeConfirmMessageDialog.registerCallback(DwtDialog.NO_BUTTON, ZaAdminExtListController.prototype._donotUndeployZimletsCallback, this);		
		this._removeConfirmMessageDialog.popup();
	}
}

ZaAdminExtListController.prototype._undeployZimletsCallback = 
function () {
	var successRemList=new Array();
	for(var key in this._removeList) {
		if(this._removeList[key]) {
			try {
				this._removeList[key].remove();
				successRemList.push(this._removeList[key]);					
			} catch (ex) {
				this._removeConfirmMessageDialog.popdown();
				this._handleException(ex, "ZaAdminExtListController.prototype._undeployZimletsCallback", null, false);				
				return;
			}
		}
		this._list.remove(this._removeList[key]); //remove from the list
	}
	this.fireRemovalEvent(successRemList); 		
	this._removeConfirmMessageDialog.popdown();
	this._contentView.setUI();
	this.show();
}

ZaAdminExtListController.prototype._donotUndeployZimletsCallback = 
function () {
	this._removeList = new Array();
	this._removeConfirmMessageDialog.popdown();
}

ZaAdminExtListController.changeActionsStateMethod = 
function () {
	var cnt = this._contentView.getSelectionCount();
	if(cnt == 1) {
		var arrItems = this._contentView.getSelection();
		if(arrItems[0].attrs[ZaZimlet.A_zimbraAdminExtDisableUIUndeploy] && arrItems[0].attrs[ZaZimlet.A_zimbraAdminExtDisableUIUndeploy]=="TRUE") {
				
			if(this._popupOperations[ZaOperation.DELETE])	
				this._popupOperations[ZaOperation.DELETE].enabled = false;				
		} 
	} else if (cnt > 1){
			
		var arrItems = this._contentView.getSelection();
		var cnt = arrItems.length;
		var gotInternal = false;	
		for(var i=0;i<cnt;i++) {
			if(!gotInternal) {
				if(arrItems[i].attrs[ZaZimlet.A_zimbraAdminExtDisableUIUndeploy] && arrItems[i].attrs[ZaZimlet.A_zimbraAdminExtDisableUIUndeploy]=="TRUE") {
					gotInternal = true;
				} 		
			}
			
			if(gotInternal) {
				//nothing else to look for
				break;
			}
			
		}
		if(gotInternal) {
				
			if(this._popupOperations[ZaOperation.DELETE])	
				this._popupOperations[ZaOperation.DELETE].enabled = false;				
		}
	} else {

		if(this._popupOperations[ZaOperation.EDIT])	
			this._popupOperations[ZaOperation.EDIT].enabled = false;
			
		if(this._popupOperations[ZaOperation.DELETE])	
			this._popupOperations[ZaOperation.DELETE].enabled = false;
	}
}
ZaController.changeActionsStateMethods["ZaAdminExtListController"].push(ZaAdminExtListController.changeActionsStateMethod);
}
if (AjxPackage.define("zimbraAdmin.zimlets.controller.ZaZimletListController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaZimletListController
* This is a singleton object that controls all the user interaction with the list of ZaZimlet objects
* @author Greg Solovyev
**/
ZaZimletListController = function(appCtxt, container) {
	ZaListViewController.call(this, appCtxt, container, "ZaZimletListController");
   	this._toolbarOperations = new Array();
   	this._popupOperations = new Array();			
	this.objType = ZaEvent.S_ZIMLET;
	this._helpURL = ZaUtil.HELP_URL;
	this._helpButtonText = ZaMsg.helpManageZimlets;
}

ZaZimletListController.prototype = new ZaListViewController();
ZaZimletListController.prototype.constructor = ZaZimletListController;

ZaController.initPopupMenuMethods["ZaZimletListController"] = new Array();
ZaController.changeActionsStateMethods["ZaZimletListController"] = new Array(); 
/**
* @param list {ZaItemList} a list of ZaZimlet {@link ZaZimlet} objects
**/
ZaZimletListController.prototype.show = 
function(list, openInNewTab) {
    	if (!this._UICreated) {
		this._createUI();
	}
 	
	if (list != null && list instanceof ZaItemList) {
		this._list = list;
	} else {
		this._list = ZaZimlet.getAll(ZaZimlet.EXCLUDE_EXTENSIONS, new AjxCallback(this, this.show));
		return;				
	}

	this._contentView.set(this._list.getVector());	
	ZaApp.getInstance().pushView(this.getContentViewId());
	this._removeList = new Array();
		
	this.changeActionsState();		
	/*
	if (openInNewTab) {//when a ctrl shortcut is pressed
		
	}else{ //open in the main tab
		this.updateMainTab ("Zimlet") ;	
	}*/
}

ZaZimletListController.initPopupMenuMethod =
function () {
    this._popupOperations[ZaOperation.DEPLOY_ZIMLET]=new ZaOperation(ZaOperation.DEPLOY_ZIMLET,ZaMsg.TBB_DeployNew, ZaMsg.TBB_DeployNew_tt, "Deploy", "Deploy", new AjxListener(this, this.deployZimletListener));
   	this._popupOperations[ZaOperation.DELETE]=new ZaOperation(ZaOperation.DELETE,ZaMsg.TBB_Undeploy, ZaMsg.DTBB_Undeploy_tt, "Undeploy", "Undeploy", new AjxListener(this, this._undeployButtonListener));    	    		
   	this._popupOperations[ZaOperation.TOGGLE]=new ZaOperation(ZaOperation.TOGGLE,ZaMsg.TBB_Toggle, ZaMsg.TBB_Toggle_tt, "ToggleStatus", "ToggleStatus", new AjxListener(this, this._toggleButtonListener));
   	this._popupOrder.push(ZaOperation.DEPLOY_ZIMLET);
   	this._popupOrder.push(ZaOperation.DELETE);
   	this._popupOrder.push(ZaOperation.TOGGLE);

   
}
ZaController.initPopupMenuMethods["ZaZimletListController"].push(ZaZimletListController.initPopupMenuMethod);

ZaZimletListController.prototype._toggleButtonListener = 
function (ev) {
	try {
		var arrItems = this._contentView.getSelection();
		var cnt = arrItems.length;
		for (var i=0; i<cnt; i++) {
			if(arrItems[i] ) {
				arrItems[i].enable( ! arrItems[i].isEnabled(), new AjxCallback(this, this.fireChangeEvent,arrItems[i] ));
			}
		}
	} catch (ex) {
		this._handleException(ex, "ZaZimletListController.prototype._toggleZimletListener", null, false);
	}
	
	return;
}

/*
ZaZimletListController.prototype.disableZimletListener = 
function (ev) {
	try {
		var arrItems = this._contentView.getSelection();
		var cnt = arrItems.length;
		for (var i=0; i<cnt; i++) {
			if(arrItems[i]) {
				arrItems[i].enable(false,new AjxCallback(this, this.fireChangeEvent,arrItems[i] ));
			}
		}
	} catch (ex) {
		this._handleException(ex, "ZaZimletListController.prototype.disableZimletListener", null, false);
	}
	return;
}

ZaZimletListController.prototype.enableZimletListener = 
function (ev) {
	try {
		var arrItems = this._contentView.getSelection();
		var cnt = arrItems.length;
		for (var i=0; i<cnt; i++) {
			if(arrItems[i]) {
				arrItems[i].enable(true, new AjxCallback(this, this.fireChangeEvent,arrItems[i] ));
			}
		}
	} catch (ex) {
		this._handleException(ex, "ZaZimletListController.prototype.enableZimletListener", null, false);
	}
	return;
}*/

ZaZimletListController.prototype.deployZimletListener = 
function (ev) {
	try {
		//if(!this._deployZimletWizard)
			this._deployZimletWizard = new ZaZimletDeployXWizard(this._container);		
	
		var zimlet = new ZaZimlet();
		this._deployZimletWizard.setObject(zimlet);		
		this._deployZimletWizard.popup();
	} catch (ex) {
		this._handleException(ex, "ZaZimletListController.prototype.deployZimletListener", null, false);
	}
	return;
}

ZaZimletListController.prototype._createUI = function () {
	try {
		var elements = new Object();
		this._contentView = new ZaZimletListView(this._container);

		this._initPopupMenu();
		this._actionMenu =  new ZaPopupMenu(this._contentView, "ActionMenu", null, this._popupOperations, ZaId.VIEW_ZIMLIST, ZaId.MENU_POP);

		elements[ZaAppViewMgr.C_APP_CONTENT] = this._contentView;
		//ZaApp.getInstance().createView(ZaZimbraAdmin._ZIMLET_LIST_VIEW, elements);
		//ZaApp.getInstance().createView(ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW, elements);
        ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
		this._contentView.addSelectionListener(new AjxListener(this, this._listSelectionListener));
		this._contentView.addActionListener(new AjxListener(this, this._listActionListener));			
		this._removeConfirmMessageDialog = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON], null, ZaId.CTR_PREFIX + ZaId.VIEW_ZIMLIST + "_removeConfirm");					
		this._UICreated = true;
		ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
	} catch (ex) {
		this._handleException(ex, "ZaZimletListController.prototype._createUI", null, false);
		return;
	}	
}

ZaZimletListController.prototype.set = 
function(zimletList) {
	this.show(zimletList);
}


/**
* This listener is called when the item in the list is double clicked. It call ZaZimletController.show method
* in order to display the Zimlet View
**/
ZaZimletListController.prototype._listSelectionListener =
function(ev) {
	if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		if(ev.item) {
			this._selectedItem = ev.item;
			ZaApp.getInstance().getZimletController().show(ev.item);

            var parentPath = ZaTree.getPathByArray([ZaMsg.OVP_home, ZaMsg.OVP_configure, ZaMsg.OVP_zimlets]);
            ZaZimbraAdmin.getInstance().getOverviewPanelController().addObjectItem(parentPath, ev.item.name, null, false, false, ev.item);
		}
	} else {
		this.changeActionsState();	
	}
}

ZaZimletListController.prototype._listActionListener =
function (ev) {
	this.changeActionsState();
	this._actionMenu.popup(0, ev.docX, ev.docY);
}
/**
* This listener is called when the Edit button is clicked. 
* It call ZaZimletController.show method
* in order to display the Zimlet View
**/
ZaZimletListController.prototype._editButtonListener =
function(ev) {
/*	if(this._contentView.getSelectionCount() == 1) {
		var item = this._contentView.getSelection()[0];
		ZaApp.getInstance().getZimletController().show(item);
	}*/
}

/**
* This listener is called when the Undeploy button is clicked. 
**/
ZaZimletListController.prototype._undeployButtonListener =
function(ev) {
	this._removeList = new Array();
	if(this._contentView.getSelectionCount()>0) {
		var arrItems = this._contentView.getSelection();
		var cnt = arrItems.length;
		for(var key =0; key < cnt; key++) {
			if(arrItems[key]) {
				this._removeList.push(arrItems[key]);
			}
		}
	}
	if(this._removeList.length) {
		var dlgMsg;
		dlgMsg = ZaMsg.Q_UNDEPLOY_ZIMLETS;			

		dlgMsg += "<br>";
		for(var key in this._removeList) {
			if(i > 19) {
				dlgMsg += "<li>...</li>";
				break;
			}
			dlgMsg += "<li>";
			if(this._removeList[key].name.length > 50) {
				//split it
				var endIx = 49;
				var beginIx = 0; //
				while(endIx < this._removeList[key].name.length) { //
					dlgMsg +=  this._removeList[key].name.slice(beginIx, endIx); //
					beginIx = endIx + 1; //
					if(beginIx >= (this._removeList[key].name.length) ) //
						break;
					
					endIx = ( this._removeList[key].name.length <= (endIx + 50) ) ? this._removeList[key].name.length-1 : (endIx + 50);
					dlgMsg +=  "<br>";	
				}
			} else {
				dlgMsg += this._removeList[key].name;
			}
			dlgMsg += "</li>";
			i++;
		}
		dlgMsg += "</ul>";
		this._removeConfirmMessageDialog.setMessage(dlgMsg, DwtMessageDialog.INFO_STYLE);
		this._removeConfirmMessageDialog.registerCallback(DwtDialog.YES_BUTTON, ZaZimletListController.prototype._undeployZimletsCallback, this);
		this._removeConfirmMessageDialog.registerCallback(DwtDialog.NO_BUTTON, ZaZimletListController.prototype._donotUndeployZimletsCallback, this);		
		this._removeConfirmMessageDialog.popup();
	}
}

ZaZimletListController.prototype._undeployZimletsCallback = 
function () {
	var successRemList=new Array();
	for(var key in this._removeList) {
		if(this._removeList[key]) {
			try {
				this._removeList[key].remove();
				successRemList.push(this._removeList[key]);					
			} catch (ex) {
				this._removeConfirmMessageDialog.popdown();
				this._handleException(ex, "ZaZimletListController.prototype._undeployZimletsCallback", null, false);				
				return;
			}
		}
		this._list.remove(this._removeList[key]); //remove from the list
	}
	this.fireRemovalEvent(successRemList); 		
	this._removeConfirmMessageDialog.popdown();
	this._contentView.setUI();
	this.show();
}

ZaZimletListController.prototype._donotUndeployZimletsCallback = 
function () {
	this._removeList = new Array();
	this._removeConfirmMessageDialog.popdown();
}

ZaZimletListController.changeActionsStateMethod = 
function () {
	var cnt = this._contentView.getSelectionCount();
	var offArray = [];
	var onArray = [];
	if(cnt < 1) {
			
		if(this._popupOperations[ZaOperation.EDIT])	
			this._popupOperations[ZaOperation.EDIT].enabled = false;
					
		if(this._popupOperations[ZaOperation.DELETE])	
			this._popupOperations[ZaOperation.DELETE].enabled = false;

		if(this._popupOperations[ZaOperation.TOGGLE])	
			this._popupOperations[ZaOperation.TOGGLE].enabled = false;			
	} 
}
ZaController.changeActionsStateMethods["ZaZimletListController"].push(ZaZimletListController.changeActionsStateMethod);
}
if (AjxPackage.define("zimbraAdmin.zimlets.controller.ZaZimletViewController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaZimletViewController controls display of a single Account
* @contructor ZaZimletViewController
* @param appCtxt
* @param container
* @param abApp
* @author Greg Solovyev
**/

ZaZimletViewController = function(appCtxt, container) {
	ZaXFormViewController.call(this, appCtxt, container,"ZaZimletViewController");
	this._UICreated = false;
	this.objType = ZaEvent.S_ZIMLET;
	this._helpURL = ZaAccountViewController.helpURL;
	this.deleteMsg = ZaMsg.Q_DELETE_ACCOUNT;
	this.tabConstructor = ZaZimletXFormView;	
}

ZaZimletViewController.prototype = new ZaXFormViewController();
ZaZimletViewController.prototype.constructor = ZaZimletViewController;
ZaZimletViewController.helpURL = ZaUtil.HELP_URL;
//public methods

ZaController.initToolbarMethods["ZaZimletViewController"] = new Array();
ZaController.setViewMethods["ZaZimletViewController"] = new Array();
ZaController.initPopupMenuMethods["ZaZimletViewController"] = new Array();


ZaZimletViewController.prototype.show = 
function(entry, skipRefresh) {
    if (! this.selectExistingTabByItemId(entry.id)){
		this._setView(entry, true);
	}
}


/**
*	@method setViewMethod 
*	@param entry - isntance of ZaDomain class
*/
ZaZimletViewController.setViewMethod =
function(entry) {
	entry.load("name", entry.name);
	if(!this._UICreated) {
		this._createUI();
	} 
//	ZaApp.getInstance().pushView(ZaZimbraAdmin._ZIMLET_VIEW);
	ZaApp.getInstance().pushView(this.getContentViewId());
	this._view.setDirty(false);
    entry[ZaModel.currentTab] = "1";
    this._view.setObject(entry); 	//setObject is delayed to be called after pushView in order to avoid jumping of the view
	this._currentObject = entry;
}
ZaController.setViewMethods["ZaZimletViewController"].push(ZaZimletViewController.setViewMethod);

/**
* @method _createUI
**/
ZaZimletViewController.prototype._createUI =
function () {
	this._contentView = this._view = new this.tabConstructor(this._container);

    this._initPopupMenu();
    var elements = new Object();
	elements[ZaAppViewMgr.C_APP_CONTENT] = this._view;
    ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
	this._UICreated = true;
	ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
}

ZaZimletViewController.prototype.getAppBarAction =
function () {
    if (AjxUtil.isEmpty(this._appbarOperation)) {
    	this._appbarOperation[ZaOperation.HELP]=new ZaOperation(ZaOperation.HELP,ZaMsg.TBB_Help, ZaMsg.TBB_Help_tt, "Help", "Help", new AjxListener(this, this._helpButtonListener));
        this._appbarOperation[ZaOperation.CLOSE] = new ZaOperation(ZaOperation.CLOSE, ZaMsg.TBB_Close, ZaMsg.ALTBB_Close_tt, "", "", new AjxListener(this, this.closeButtonListener));
    }

    return this._appbarOperation;
}

ZaZimletViewController.prototype.getAppBarOrder =
function () {
    if (AjxUtil.isEmpty(this._appbarOrder)) {
    	this._appbarOrder.push(ZaOperation.HELP);
        this._appbarOrder.push(ZaOperation.CLOSE);
    }

    return this._appbarOrder;
}


ZaZimletViewController.initPopupMenuMethod =
function () {
      this._popupOperations[ZaOperation.CLOSE] = new ZaOperation(ZaOperation.CLOSE,ZaMsg.TBB_Close, ZaMsg.DTBB_Close_tt, "Close", "CloseDis", new AjxListener(this, this.closeButtonListener));
      this._popupOrder.push(ZaOperation.CLOSE);
}
ZaController.initPopupMenuMethods["ZaZimletViewController"].push(ZaZimletViewController.initPopupMenuMethod);
}
if (AjxPackage.define("zimbraAdmin.domains.controller.ZaDomainController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

 /**
* @class ZaDomainController controls display of a single Domain
* @contructor ZaDomainController
* @param appCtxt
* @param container
* @param abApp
**/

ZaDomainController = function(appCtxt, container) {
	ZaXFormViewController.call(this, appCtxt, container,"ZaDomainController");
	this._UICreated = false;
	this._helpURL = ZaUtil.HELP_URL;
	this._helpButtonText = ZaMsg.helpEditDomains;
	this._toolbarOperations = new Array();			
	this.deleteMsg = ZaMsg.Q_DELETE_DOMAIN;	
	this.objType = ZaEvent.S_DOMAIN;
	this.tabConstructor = ZaDomainXFormView;				
}

ZaDomainController.prototype = new ZaXFormViewController();
ZaDomainController.prototype.constructor = ZaDomainController;

ZaController.changeActionsStateMethods["ZaDomainController"] = new Array();
ZaController.initToolbarMethods["ZaDomainController"] = new Array();
ZaController.initPopupMenuMethods["ZaDomainController"] = new Array();
ZaController.setViewMethods["ZaDomainController"] = new Array();
ZaController.saveChangeCheckMethods["ZaDomainController"] = new Array();
ZaController.postChangeMethods["ZaDomainController"] = new Array();

/**
*	@method show
*	@param entry - isntance of ZaDomain class
*/

ZaDomainController.prototype.show = 
function(entry) {
	if (! this.selectExistingTabByItemId(entry.id)){
		this._setView(entry, true);
	}
}

ZaDomainController.changeActionsStateMethod = function () {
    var isToEnable = (this._view && this._view.isDirty());

    if(this._popupOperations[ZaOperation.SAVE]) {
        this._popupOperations[ZaOperation.SAVE].enabled = isToEnable;
    }
}
ZaController.changeActionsStateMethods["ZaDomainController"].push(ZaDomainController.changeActionsStateMethod);


ZaDomainController.initPopupMenuMethod = function () {

    this._popupOperations[ZaOperation.SAVE] = new ZaOperation(
        ZaOperation.SAVE,
        ZaMsg.TBB_Save,
        ZaMsg.DTBB_Save_tt,
        "Save",
        "SaveDis",
        new AjxListener(
            this,
            this.saveButtonListener
        )
    );

    if (ZaZimbraAdmin.canCreateDomain()) {

        this._popupOperations[ZaOperation.NEW] = new ZaOperation(
            ZaOperation.NEW,
            ZaMsg.TBB_New,
            ZaMsg.DTBB_New_tt,
            "Domain",
            "DomainDis",
            new AjxListener(
                this,
                this._newButtonListener
            )
        );
    }

    this._popupOperations[ZaOperation.VIEW_DOMAIN_ACCOUNTS] = new ZaOperation(
        ZaOperation.VIEW_DOMAIN_ACCOUNTS,
        ZaMsg.Domain_view_accounts,
        ZaMsg.Domain_view_accounts_tt,
        "Search",
        "SearchDis",
        new AjxListener(
            this,
            this.viewAccountsButtonListener
        )
    );

    if (ZaDomain.canConfigureGal(this._currentObject)) {

        this._popupOperations[ZaOperation.GAL_WIZARD] = new ZaOperation(
            ZaOperation.GAL_WIZARD,
            ZaMsg.DTBB_GAlConfigWiz,
            ZaMsg.DTBB_GAlConfigWiz_tt,
            "GALWizard",
            "GALWizardDis",
            new AjxListener(
                this,
                ZaDomainController.prototype._galWizButtonListener
            )
        );

    }

    if (ZaDomain.canConfigureAuth(this._currentObject)) {

        this._popupOperations[ZaOperation.AUTH_WIZARD] = new ZaOperation(
            ZaOperation.AUTH_WIZARD,
            ZaMsg.DTBB_AuthConfigWiz,
            ZaMsg.DTBB_AuthConfigWiz_tt,
            "AuthWizard",
            "AuthWizardDis",
            new AjxListener(
                this,
                ZaDomainController.prototype._authWizButtonListener
            )
        );
    }

    if (ZaItem.hasRight(ZaDomain.RIGHT_CHECK_MX_RECORD,this._currentObject)) {

        this._popupOperations[ZaOperation.CHECK_MX_RECORD] = new ZaOperation(
            ZaOperation.CHECK_MX_RECORD,
            ZaMsg.DTBB_CheckMX,
            ZaMsg.DTBB_CheckMX_tt,
            "ReindexMailboxes",
            "ReindexMailboxes",
            new AjxListener(
                this,
                ZaDomainController.prototype._checkMXButtonListener
            )
        );
    }

    // For reference
    // Bug 79717 - Removed DELETE operation
    // Bug 71235 - Removed AUTOPROV_WIZARD operation

}
ZaController.initPopupMenuMethods["ZaDomainController"].push(ZaDomainController.initPopupMenuMethod);
/*
ZaDomainController.prototype.getAppBarAction =
function () {
    if (AjxUtil.isEmpty(this._appbarOperation)) {
    	this._appbarOperation[ZaOperation.HELP]=new ZaOperation(ZaOperation.HELP,ZaMsg.TBB_Help, ZaMsg.TBB_Help_tt, "Help", "Help", new AjxListener(this, this._helpButtonListener));
        this._appbarOperation[ZaOperation.SAVE]= new ZaOperation(ZaOperation.SAVE, ZaMsg.TBB_Save, ZaMsg.ALTBB_Save_tt, "", "", new AjxListener(this, this.saveButtonListener));
        this._appbarOperation[ZaOperation.CLOSE] = new ZaOperation(ZaOperation.CLOSE, ZaMsg.TBB_Close, ZaMsg.ALTBB_Close_tt, "", "", new AjxListener(this, this.closeButtonListener));
    }

    return this._appbarOperation;
}

ZaDomainController.prototype.getAppBarOrder =
function () {
    if (AjxUtil.isEmpty(this._appbarOrder)) {
    	this._appbarOrder.push(ZaOperation.HELP);
        this._appbarOrder.push(ZaOperation.SAVE);
        this._appbarOrder.push(ZaOperation.CLOSE);
    }

    return this._appbarOrder;
}*/

/**
*	@method setViewMethod 
*	@param entry - isntance of ZaDomain class
*/
ZaDomainController.setViewMethod =
function(entry) {
	entry.load("id", entry.id,false,true);
	this._currentObject = entry;
	this._createUI(entry);
 
	ZaApp.getInstance().pushView(this.getContentViewId());
	this._view.setDirty(false);
	this._view.setObject(entry); 	//setObject is delayed to be called after pushView in order to avoid jumping of the view	
}
ZaController.setViewMethods["ZaDomainController"].push(ZaDomainController.setViewMethod);

/**
* @method _createUI
**/
ZaDomainController.prototype._createUI =
function (entry) {
	this._contentView = this._view = new this.tabConstructor(this._container, entry);

    this._initPopupMenu();
	//always add Help button at the end of the toolbar
	
	var elements = new Object();
	elements[ZaAppViewMgr.C_APP_CONTENT] = this._view;
    ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
	this._UICreated = true;
	ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
}

ZaDomainController.prototype._saveChanges = 
function () {
	var tmpObj = this._view.getObject();
	//Check the data
	if(tmpObj.attrs == null ) {
		//show error msg
		this._errorDialog.setMessage(ZaMsg.ERROR_UNKNOWN, null, DwtMessageDialog.CRITICAL_STYLE, null);
		this._errorDialog.popup();		
		return false;	
	}

	var mods = new Object();
	var haveSmth = false; //what is this variable for?
    var renameNotebookAccount = false;
    var catchAllChanged = false ;
	var skinChanged = false;
	
	this._currentObject["mods"] = mods;

    if (!(AjxUtil.isEmpty(tmpObj[ZaAccount.A_zimbraMailCatchAllAddress]) && AjxUtil.isEmpty(this._currentObject[ZaAccount.A_zimbraMailCatchAllAddress])) 
    	&& (tmpObj[ZaAccount.A_zimbraMailCatchAllAddress] != this._currentObject[ZaAccount.A_zimbraMailCatchAllAddress])) {
         catchAllChanged = true ;
    }

    // execute other plugin methods
    if(ZaController.saveChangeCheckMethods["ZaDomainController"]) {
            var methods = ZaController.saveChangeCheckMethods["ZaDomainController"];
            var cnt = methods.length;
            for(var i = 0; i < cnt && !haveSmth; i++) {
                    if(typeof(methods[i]) == "function")
                           haveSmth =  methods[i].call(this, mods, tmpObj, this._currentObject);
            }
    }

	for (var a in tmpObj.attrs) {
		if(a == ZaItem.A_zimbraId || a==ZaDomain.A_domainName  || a == ZaDomain.A_domainType
                || a == ZaItem.A_zimbraACE) {
			continue;
		}
		if(!ZaItem.hasWritePermission(a,tmpObj)) {
				continue;
		}
		if (!(AjxUtil.isEmpty(this._currentObject.attrs[a]) && AjxUtil.isEmpty(tmpObj.attrs[a]))) {
			if(tmpObj.attrs[a] instanceof Array) {
					if(
						!(this._currentObject.attrs[a] instanceof Array) 
						|| (this._currentObject.attrs[a] && tmpObj.attrs[a] && tmpObj.attrs[a].join(",").valueOf() !=  this._currentObject.attrs[a].join(",").valueOf())
                  		|| (this._currentObject.attrs[a] == null && tmpObj.attrs[a] != null)
                    	|| (this._currentObject.attrs[a] != null && (tmpObj.attrs[a] == null || tmpObj.attrs[a].length == 0)) 
                    )
                    {
						mods[a] = tmpObj.attrs[a];
						haveSmth = true;
					}	
			} else if(tmpObj.attrs[a] != this._currentObject.attrs[a]) {
				mods[a] = tmpObj.attrs[a];
				haveSmth = true;
				if(a == ZaDomain.A_zimbraSkinForegroundColor || a == ZaDomain.A_zimbraSkinBackgroundColor || 
					a == ZaDomain.A_zimbraSkinSecondaryColor || a == ZaDomain.A_zimbraSkinSelectionColor ||
					a == ZaDomain.A_zimbraSkinLogoURL || a == ZaDomain.A_zimbraSkinLogoLoginBanner || 
					a == ZaDomain.A_zimbraSkinLogoAppBanner) {
					skinChanged = true;
				}				
			}
		}
	}

	if(!this.checkCertKeyValid(tmpObj.attrs[ZaDomain.A_zimbraSSLCertificate],tmpObj.attrs[ZaDomain.A_zimbraSSLPrivateKey]))
		return false;
	// check validation expression, which should be email-like pattern
	if(tmpObj.attrs[ZaDomain.A_zimbraMailAddressValidationRegex]) {
		var regList = tmpObj.attrs[ZaDomain.A_zimbraMailAddressValidationRegex];
		var islegal = true;
		var regval = null;
		if(regList && regList instanceof Array) {
			for(var i = 0; i < regList.length && islegal; i++) {
				if (regList[i].indexOf("@") == -1) {
					islegal = false;
					regval = regList[i];
				}
			}
		} else if(regList) {
                        if (regList.indexOf("@") == -1) {
				islegal = false;
				regval = regList;
			}
		}
		if(!islegal) {
			this._errorDialog.setMessage(AjxMessageFormat.format(ZaMsg.ERROR_MSG_EmailValidReg, regval),
				null, DwtMessageDialog.CRITICAL_STYLE, ZabMsg.zimbraAdminTitle);
			this._errorDialog.popup();
			return islegal;
		}
	}

	if(!haveSmth) {
		if(tmpObj[ZaDomain.A2_gal_sync_accounts] && tmpObj[ZaDomain.A2_gal_sync_accounts][0]) { 
			if(tmpObj[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds] 
				&& tmpObj[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].attrs
				&& this._currentObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds]
				&& this._currentObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].attrs) {
				if(this._currentObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval] !=
				tmpObj[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval]) {
					haveSmth = true;
				}
			}
		}
	}
	
	if(!haveSmth) {
		if(tmpObj[ZaDomain.A2_gal_sync_accounts] && tmpObj[ZaDomain.A2_gal_sync_accounts][0]) { 
			if(tmpObj[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds] 
				&& tmpObj[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].attrs
				&& this._currentObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds]
				&& this._currentObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].attrs) {
				if(this._currentObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval] !=
				tmpObj[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval]) {
					haveSmth = true;
				}
			}
		}
	}
	if(haveSmth || catchAllChanged) {
		try { 
			if(renameNotebookAccount) {
				var account = new ZaAccount();
				account.load(ZaAccount.A_name,this._currentObject.attrs[ZaDomain.A_zimbraNotebookAccount]);
				account.rename(tmpObj.attrs[ZaDomain.A_zimbraNotebookAccount]);
			}

            //change the catchAllMailAddress for the account
            if (catchAllChanged) {
                //1. remove the old account catchAll
                if(!AjxUtil.isEmpty(this._currentObject[ZaAccount.A_zimbraMailCatchAllAddress]) && !AjxUtil.isEmpty(this._currentObject[ZaAccount.A_zimbraMailCatchAllAddress].id)) {
                	ZaAccount.modifyCatchAll (this._currentObject[ZaAccount.A_zimbraMailCatchAllAddress].id, "") ;
                } else if (this._currentObject[ZaAccount.A_zimbraMailCatchAllAddress] && ZaItem.ID_PATTERN.test(this._currentObject[ZaAccount.A_zimbraMailCatchAllAddress])) {
                	ZaAccount.modifyCatchAll (this._currentObject[ZaAccount.A_zimbraMailCatchAllAddress], "") ;
                }
                if(!AjxUtil.isEmpty(tmpObj[ZaAccount.A_zimbraMailCatchAllAddress]) && !AjxUtil.isEmpty(tmpObj[ZaAccount.A_zimbraMailCatchAllAddress].id)) {
                //2. Add the new account catchAll
                	ZaAccount.modifyCatchAll (tmpObj[ZaAccount.A_zimbraMailCatchAllAddress].id, this._currentObject.attrs[ZaDomain.A_domainName]) ;
                } else if(tmpObj[ZaAccount.A_zimbraMailCatchAllAddress] && ZaItem.ID_PATTERN.test(tmpObj[ZaAccount.A_zimbraMailCatchAllAddress])) {
                	ZaAccount.modifyCatchAll (tmpObj[ZaAccount.A_zimbraMailCatchAllAddress], this._currentObject.attrs[ZaDomain.A_domainName]) ;	
                	
                }
                if(!AjxUtil.isEmpty(tmpObj[ZaAccount.A_zimbraMailCatchAllAddress])  && !AjxUtil.isEmpty(tmpObj[ZaAccount.A_zimbraMailCatchAllAddress].id)) {
                //3. Set the new catchAll value to the current object
                	this._currentObject[ZaAccount.A_zimbraMailCatchAllAddress] = tmpObj[ZaAccount.A_zimbraMailCatchAllAddress] ;
                } else if (!AjxUtil.isEmpty(tmpObj[ZaAccount.A_zimbraMailCatchAllAddress]) && ZaItem.ID_PATTERN.test(tmpObj[ZaAccount.A_zimbraMailCatchAllAddress])) {
                	var acc = new ZaAccount(ZaApp.getInstance());
                	acc.load("id",tmpObj[ZaAccount.A_zimbraMailCatchAllAddress],false,true);
                	this._currentObject[ZaAccount.A_zimbraMailCatchAllAddress] = acc;
                }
            }

			if(haveSmth) {
				try {	
					this._currentObject.modify(mods, tmpObj);
				} catch (ex) {
					this._handleException(ex, "ZaAccountViewController.prototype._saveChanges", null, false);	
					return false;
				}
            }
            if(skinChanged) {
            	//get domains
            	try {
            		var mbxSrvrs = ZaApp.getInstance().getMailServers();
            		var serverList = [];
            		var cnt = mbxSrvrs.length;
            		for(var i=0; i<cnt; i++) {
            			if(ZaItem.hasRight(ZaServer.FLUSH_CACHE_RIGHT,mbxSrvrs[i])) {
            				serverList.push(mbxSrvrs[i]);
            			}
            		}
            		
            		if(serverList.length > 0) {
						ZaApp.getInstance().dialogs["confirmMessageDialog2"].setMessage(ZaMsg.Domain_flush_cache_q, DwtMessageDialog.INFO_STYLE);
						ZaApp.getInstance().dialogs["confirmMessageDialog2"].registerCallback(DwtDialog.YES_BUTTON, this.openFlushCacheDlg, this, [serverList]);		
						ZaApp.getInstance().dialogs["confirmMessageDialog2"].registerCallback(DwtDialog.NO_BUTTON, this.closeCnfrmDelDlg, this, null);				
						ZaApp.getInstance().dialogs["confirmMessageDialog2"].popup();             			
            		}
            		
            	} catch (ex) {
					if (ex.code ==  ZmCsfeException.SVC_PERM_DENIED) {
						return;
					} else {
						throw (ex);
					}           		
            	}
           	
            }

            if (this._currentObject[ZaModel.currentTab]!= tmpObj[ZaModel.currentTab])
                this._currentObject[ZaModel.currentTab] = tmpObj[ZaModel.currentTab];

            ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.DomainModified,[this._currentObject.name]));
			return true;
		} catch (ex) {
			this._handleException(ex,"ZaDomainController.prototype._saveChanges");
		}
	} else {
        ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.DomainModified,[this._currentObject.name]));
		return true;
	}
}

ZaDomainController.prototype.openFlushCacheDlg = 
function (serverList) {
	ZaApp.getInstance().dialogs["confirmMessageDialog2"].popdown(); 

	serverList._version = 1;
	var uuid = [];
	for(var i=0;i<serverList.length;i++) {
		serverList[i]["status"] = 0;
		uuid.push(serverList[i].id);
	}
	obj = {statusMessage:null,flushZimlet:false,flushSkin:true,flushLocale:false,serverList:serverList,status:0, _uuid:(uuid.length > 1 ? uuid.join("__") : uuid[0]),name:(uuid.length > 1 ? ZaMsg.multiple_servers : serverList[0].name)};
	ZaApp.getInstance().dialogs["flushCacheDialog"] = new ZaFlushCacheXDialog(this._container, {id:(uuid.length > 1 ? uuid.join("__") : uuid[0]), name:(uuid.length > 1 ? ZaMsg.multiple_servers : serverList[0].name)});
	ZaApp.getInstance().dialogs["flushCacheDialog"].setObject(obj);
	ZaApp.getInstance().dialogs["flushCacheDialog"].popup();
}

ZaDomainController.prototype.newDomain = 
function () {
	var newName = "";
	if(!this._currentDomainName) {
		this._currentDomainName = this._currentObject.attrs[ZaDomain.A_domainName];
	}	
	
	if(this._currentDomainName)
		newName = "." + this._currentDomainName;

	this._currentObject = new ZaDomain();
	
	this._currentObject.getAttrs = {all:true};
	this._currentObject.loadNewObjectDefaults("name","foo"+newName);
	this._currentObject.attrs[ZaDomain.A_domainName] = newName;
	this._showNewDomainWizard();
}

ZaDomainController.prototype._showNewDomainWizard = 
function () {
	try {
        if(!ZaApp.getInstance().dialogs["newDomainWizard"])
		    ZaApp.getInstance().dialogs["newDomainWizard"] = new ZaNewDomainXWizard(this._container, this._currentObject);
        this._newDomainWizard = ZaApp.getInstance().dialogs["newDomainWizard"];
		this._newDomainWizard.registerCallback(DwtWizardDialog.FINISH_BUTTON, ZaDomainController.prototype._finishNewButtonListener, this, null);			
		this._newDomainWizard.setObject(this._currentObject);
		this._newDomainWizard.popup();
	} catch (ex) {
			this._handleException(ex, "ZaDomainController.prototype._showNewDomainWizard", null, false);
	}
}

// new button was pressed
ZaDomainController.prototype._newButtonListener =
function(ev) {
	if(this._view.isDirty()) {
		//parameters for the confirmation dialog's callback 
		var args = new Object();		
		args["params"] = null;
		args["obj"] = ZaApp.getInstance().getDomainController();
		args["func"] = ZaDomainController.prototype.newDomain;
		//ask if the user wants to save changes		
		//ZaApp.getInstance().dialogs["confirmMessageDialog"] = ZaApp.getInstance().dialogs["confirmMessageDialog"] = new ZaMsgDialog(this._view.shell, null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON, DwtDialog.CANCEL_BUTTON]);								
		ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(ZaMsg.Q_SAVE_CHANGES, DwtMessageDialog.INFO_STYLE);
		ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, this.saveAndGoAway, this, args);		
		ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.NO_BUTTON, this.discardAndGoAway, this, args);		
		ZaApp.getInstance().dialogs["confirmMessageDialog"].popup();
	} else {
		this.newDomain();
	}	
}


ZaDomainController.prototype.viewAccountsButtonListener  =
function (ev) {
   var domainName = this._view.getObject().name ;
   ZaDomain.searchAccountsInDomain (domainName) ;
}

ZaDomainController.prototype._galWizButtonListener =
function(ev) {
	try {
		this._galWizard = ZaApp.getInstance().dialogs["galWizard"] = new ZaGALConfigXWizard(this._container,this._currentObject);
        this._currentObject._extid=ZaUtil.getItemUUid();
        this._currentObject._editObject = this._currentObject;

		this._galWizard.setObject(this._currentObject);
		this._galWizard.popup();
	} catch (ex) {
			this._handleException(ex, "ZaDomainController.prototype._showGalWizard", null, false);
	}
}


ZaDomainController.prototype._authWizButtonListener =
function(ev) {
	try {
        if(!this._authWizard) {
           this._authWizard = ZaApp.getInstance().dialogs["authWizard"] =  new ZaTaskAuthConfigWizard(this._container);
           this._currentObject._extid=ZaUtil.getItemUUid();
           this._currentObject._editObject = this._currentObject;

        }
		this._authWizard.setObject(this._currentObject);
		this._authWizard.popup();
	} catch (ex) {
			this._handleException(ex, "ZaDomainController.prototype._showAuthWizard", null, false);
	}
}

ZaDomainController.prototype._autoProvWizButtonListener =
function(ev) {
	try {
		//this._autoProvWizard = ZaApp.getInstance().dialogs["autoProvWizard"] =  new ZaAutoProvConfigXWizard(this._container);
		//this._autoProvWizard.registerCallback(DwtWizardDialog.FINISH_BUTTON, ZaDomainController.prototype._finishAutoProvButtonListener, this, null);
        if(!this._autoProvWizard) {
            if(ZaApp.getInstance().dialogs["autoProvWizard"])
                 this._autoProvWizard = ZaApp.getInstance().dialogs["autoProvWizard"];
            else
                this._autoProvWizard = ZaApp.getInstance().dialogs["autoProvWizard"] = new ZaTaskAutoProvDialog(this._container, ZaMsg.NAD_AutoProvConfigTitle);//ZaAutoProvConfigXWizard(this._container);
        }
        this._currentObject._extid=ZaUtil.getItemUUid();
        this._currentObject._editObject = this._currentObject;
        this._autoProvWizard.registerCallback(DwtDialog.OK_BUTTON, ZaTaskAutoProvDialog.prototype.finishWizard, this._autoProvWizard, null);

        this._currentObject.currentTab = "1";
		this._autoProvWizard.setObject(this._currentObject);
		this._autoProvWizard.popup();
	} catch (ex) {
			this._handleException(ex, "ZaDomainController.prototype._autoProvWizButtonListener", null, false);
	}
}

ZaDomainController.prototype._finishGalButtonListener =
function(ev) {
	try {
		//var changeDetails = new Object();
		ZaDomain.modifyGalSettings.call(this._currentObject, this._galWizard.getObject()); 
		//if a modification took place - fire an DomainChangeEvent
		//changeDetails["obj"] = this._currentObject;
		this.fireChangeEvent(this._currentObject);
		this._view.setObject(this._currentObject);		
		this._galWizard.popdown();
	} catch (ex) {
		this._handleException(ex, "ZaDomainController.prototype._finishGalButtonListener", null, false);
	}
	return;
}

ZaDomainController.prototype._notifyAllOpenTabs =
function() {
	var warningMsg = "<br><ul>";
	var hasItem = false;
        for (var i=0; i < ZaAppTabGroup._TABS.size(); i++) {
                var tab = ZaAppTabGroup._TABS.get(i) ;
                var v = tab.getAppView() ;
                if (v && v._containedObject && v._containedObject.name) {
			var acctName = v._containedObject.name;
			var l = acctName.indexOf('@');
			var domain = null;
			if(l > 0) domain = acctName.substring(l+1);
			if(domain != null && domain == this._currentObject.attrs[ZaDomain.A_domainName]) {
				warningMsg += "<li>" + acctName + "</li>";
				hasItem = true;
			}
                }
        }
	warningMsg += "</ul></br>";
	if(hasItem)
		ZaApp.getInstance().getCurrentController().popupWarningDialog(ZaMsg.WARN_CHANGE_AUTH_METH + warningMsg);	
}


ZaDomainController.prototype._finishAuthButtonListener =
function(ev) {
	try {
		ZaDomain.modifyAuthSettings.call(this._currentObject,this._authWizard.getObject());
		//var changeDetails = new Object();
		//if a modification took place - fire an DomainChangeEvent
		//changeDetails["obj"] = this._currentObject;
	
		this.fireChangeEvent(this._currentObject);
		this._view.setObject(this._currentObject);
		this._authWizard.popdown();
		this._notifyAllOpenTabs();
	} catch (ex) {
		this._handleException(ex, "ZaDomainController.prototype._finishAuthButtonListener", null, false);
	}
	return;
}

ZaDomainController.prototype._finishAutoProvButtonListener =
function(ev) {
	try {
        if(!this._autoProvWizard._checkGeneralConfig() || !this._autoProvWizard._checkEagerConfig()
                || !this._autoProvWizard._checkLazyConfig()) {
            return;
        }
        var savedObj = this._autoProvWizard.getObject();
        this._autoProvWizard._combineConfigureValues(savedObj);
		ZaDomain.modifyAutoPovSettings.call(this._currentObject,savedObj);
		this._view.setObject(this._currentObject);
		this._autoProvWizard.popdown();
		this._notifyAllOpenTabs();
	} catch (ex) {
		this._handleException(ex, "ZaDomainController.prototype._finishAutoProvButtonListener", null, false);
	}
	return;
}

/**
* @param 	ev event object
* This method handles "finish" button click in "New Domain" dialog
**/

ZaDomainController.prototype._finishNewButtonListener =
function(ev) {
	try {
		var obj = this._newDomainWizard.getObject();
		var domain = ZaItem.create(obj,ZaDomain,"ZaDomain");
		domain.load("id",domain.id,false,true);
		if(domain != null) {
			//if creation took place - fire an DomainChangeEvent
			this.fireCreationEvent(domain);
			if(domain.rights && domain.rights[ZaDomain.RIGHT_DELETE_DOMAIN]) {
                if (this._toolbar && this._toolbar.getButton(ZaOperation.DELETE))
				    this._toolbar.getButton(ZaOperation.DELETE).setEnabled(true);
            }
			this._newDomainWizard.popdown();
		}
	} catch (ex) {
		if(ex.code == ZmCsfeException.DOMAIN_EXISTS) {
			this.popupErrorDialog(ZaMsg.ERROR_DOMAIN_EXISTS, ex);		
		} else {
			this._handleException(ex, "ZaDomainController.prototype._finishNewButtonListener", null, false);
		}
	}
	return;
}

ZaDomainController.prototype._checkMXButtonListener = 
function (ev) {
	var callback = new AjxCallback(this, this.checkMXCallback);
	ZaDomain.checkDomainMXRecord(this._currentObject, callback);
}


ZaDomainController.prototype.checkMXCallback = 
function (resp) {
	if(!resp)
		return;
	if(resp.isException()) {
		//var ex = resp.getException();
		//if(ex.msg && (ex.msg.indexOf("NameNotFoundException")>0 || ex.msg.indexOf("NoMXRecordsForDomain")>0)) {
		//	this.popupErrorDialog(AjxMessageFormat.format(ZaMsg.failedToGetMXRecords, [this._currentObject.name]));
		//} else {
		//	this._handleException(resp.getException(), "ZaDomainController.prototype.checkMXCallback", null, false);
		//}
		this.popupErrorDialog(AjxMessageFormat.format(ZaMsg.failedToGetMXRecords, [this._currentObject.name]));
		return;
	} 
	var response = resp.getResponse().Body.CheckDomainMXRecordResponse;
	if(response.code[0]._content=="Ok") {
		this.popupMsgDialog(ZaMsg.MX_RecordCheckSuccess);
	} else {
		var msgArray = [];
		msgArray.push(ZaMsg.foundTheseMXRecords);
		if(response.entry && response.entry.length>0) {
			var cnt = response.entry.length;
			for (var i=0;i<cnt;i++) {
				msgArray.push(response.entry[i]._content);
			}
		}
		this._errorDialog.setMessage(response.message[0]._content, msgArray.join("<br/>"), DwtMessageDialog.CRITICAL_STYLE, ZabMsg.zimbraAdminTitle);
		this._errorDialog.popup();
	}
	
}

ZaDomainController.prototype._handleException = 
function (ex, method, params, restartOnError, obj) {
	if(ex.code == ZmCsfeException.DOMAIN_NOT_EMPTY) {
		this.popupErrorDialog(ZaMsg.ERROR_DOMAIN_NOT_EMPTY);
		
	} else if(ex.code == ZmCsfeException.DOMAIN_EXISTS) {
		this.popupErrorDialog(ZaMsg.ERROR_DOMAIN_EXISTS);
		
	} else {
		ZaController.prototype._handleException.call(this, ex, method, params, restartOnError, obj);				
	}	
}

ZaDomainController.prototype.checkCertKeyValid = 
function(cert, prvkey) {
	if(cert && prvkey) {
		var params = {
			type: "comm",
			cert: cert,
			prvkey: prvkey
		};
		resp = ZaCert.verifyCertKey(ZaApp.getInstance(), params);

		if(!resp){
                        this._errorDialog.setMessage(ZaMsg.SERVER_ERROR, ZaMsg.ERROR_DOMAIN_CERT_VERIFY, DwtMessageDialog.CRITICAL_STYLE, ZabMsg.zimbraAdminTitle);
                        this._errorDialog.popup();
                        return false;
                 
		}

		var verifyResult = resp.verifyResult;
		if(verifyResult == "false") {
	                this._errorDialog.setMessage(ZaMsg.ERROR_DOMAIN_CERT_KEY_VERIFY, ZaMsg.ALERT_DOMAIN_CERT_KEY, DwtMessageDialog.CRITICAL_STYLE, ZabMsg.zimbraAdminTitle);
        	        this._errorDialog.popup();
			return false;
		 }else if(verifyResult == "invalid") {
                        this._errorDialog.setMessage(ZaMsg.ERROR_DOMAIN_CERT_KEY_INVALID, null, DwtMessageDialog.CRITICAL_STYLE, ZaMsg.
zimbraAdminTitle);
                        this._errorDialog.popup();
                        return false;
		 }else if(verifyResult == "true") {
			return true;
		 } else return false;

	} else if(!cert && prvkey) {
                        this._errorDialog.setMessage(ZaMsg.ERROR_DOMAIN_CERT_MISSING, null, DwtMessageDialog.CRITICAL_STYLE, ZabMsg.zimbraAdminTitle);
                        this._errorDialog.popup();
			return false;
	} else if(cert && !prvkey) {
                        this._errorDialog.setMessage(ZaMsg.ERROR_DOMAIN_KEY_MISSING, null, DwtMessageDialog.CRITICAL_STYLE, ZabMsg.zimbraAdminTitle);
                        this._errorDialog.popup();
                        return false;
	}
	return true;
}

ZaDomainController.prototype.handleDomainChange =
function (ev) {
	var methods = ZaController.postChangeMethods["ZaDomainController"];
	for (var i in methods) {
		var method = methods[i];
		if (typeof(method) == "function") {
			method.call(this, ev);
		}
	}
}
}
if (AjxPackage.define("zimbraAdmin.status.controller.ZaStatusViewController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaStatusViewController 
* @contructor ZaStatusViewController
* @param appCtxt
* @param container
* @param app
* @author Roland Schemers
* @author Greg Solovyev
**/
ZaStatusViewController = function(appCtxt, container) {
	ZaController.call(this, appCtxt, container,"ZaStatusViewController");
	this._helpURL = ZaUtil.HELP_URL;
	this._helpButtonText = ZaMsg.helpEditDomains;
   	this._popupOperations = new Array();
	this._UICreated = false;	
}

ZaStatusViewController.prototype = new ZaController();
ZaStatusViewController.prototype.constructor = ZaStatusViewController;
ZaController.initToolbarMethods["ZaStatusViewController"] = new Array();
ZaController.initPopupMenuMethods["ZaStatusViewController"] = new Array();

ZaStatusViewController.prototype.show = function(openInNewTab) {
	try {
		this._createUI(openInNewTab);
		var statusObj = new ZaStatus();
		statusObj.load();
		var statusVector = statusObj.getStatusVector();
		this._contentView.set(statusVector);
		ZaApp.getInstance().pushView(this.getContentViewId());
		var now = new Date();
	} catch (ex) {
		this._handleException(ex, "ZaStatusViewController.prototype.show", null, false);
		return;
	}	
};

ZaStatusViewController.prototype.getAppBarAction =function () {
    if (AjxUtil.isEmpty(this._appbarOperation)) {
    	this._appbarOperation[ZaOperation.HELP]=new ZaOperation(ZaOperation.HELP,ZaMsg.TBB_Help, ZaMsg.TBB_Help_tt, "Help", "Help", new AjxListener(this, this._helpButtonListener));
    }

    return this._appbarOperation;
}

ZaStatusViewController.prototype.getAppBarOrder = function () {
    if (AjxUtil.isEmpty(this._appbarOrder)) {
    	this._appbarOrder.push(ZaOperation.HELP);
    }

    return this._appbarOrder;
}

ZaStatusViewController.prototype._createUI = function (openInNewTab) {
	try {
		var elements = new Object();
		this._contentView = new ZaServicesListView(this._container);
		this._initPopupMenu();
		if(this._popupOperations && this._popupOperations.length) {
			this._acctionMenu =  new ZaPopupMenu(this._contentView, "ActionMenu", null, this._popupOperations, ZaId.VIEW_STATUSLIST, ZaId.MENU_POP);
		}
		elements[ZaAppViewMgr.C_APP_CONTENT] = this._contentView;
		//ZaApp.getInstance().createView(ZaZimbraAdmin._STATUS, elements);
		ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
		this._UICreated = true;
		ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
	} catch (ex) {
		this._handleException(ex, "ZaStatusViewController.prototype._createUI", null, false);
		return;
	}	
}

ZaStatusViewController.prototype.refreshListener = function () {
	this.show();
}

ZaStatusViewController.prototype._handleException =
function(ex, method, params, restartOnError, obj) {
	if (ex.code && ex.code == ZmCsfeException.SVC_AUTH_REQUIRED) {
		this.popupErrorDialog(ZaMsg.SERVER_ERROR, ex);
	} else {
		ZaController.prototype._handleException.call(this, ex, method, params, restartOnError, obj);
	}
}	
}
if (AjxPackage.define("zimbraAdmin.statistics.controller.ZaGlobalStatsController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaGlobalStatsController
* @contructor ZaGlobalStatsController
* @param appCtxt
* @param container
* @param app
* @author Greg Solovyev
**/
ZaGlobalStatsController = function(appCtxt, container) {
    this._toolbarOperations = new Array();
    this._toolbarOrder = new Array();
    ZaController.call(this, appCtxt, container, "ZaGlobalStatsController");
    this._helpURL = ZaUtil.HELP_URL;
    this._helpButtonText = ZaMsg.helpCheckStatistics;
    this.tabConstructor = ZaGlobalStatsView;
}

ZaGlobalStatsController.prototype = new ZaController();
ZaGlobalStatsController.prototype.constructor = ZaGlobalStatsController;

/**
 * This array contains function references. The functions referenced in this array will be called by ZaController.prototype._setView method
 * @see ZaController#_setView
 */
ZaController.setViewMethods["ZaGlobalStatsController"] = [];

/**
 * 'show' method iof every controller s responsible for two actions:
 *  - calling _setView method
 *  - instantiating data object and feeding the data to the view controlled by this controller
 * see also: {@link ZaController#_setView}, {@link ZaApp#pushView}
 *
 */
ZaGlobalStatsController.prototype.show =
function() {
    /**
     * this call will create the view object {@link ZaGlobalStatsView } @see ZaController#_setView
     */
    this._setView();
    /**
     * This call will push the view on top of the visible stack of views
     */
    ZaApp.getInstance().pushView(this.getContentViewId());

    /**
     * this statement creates a data object. In most of other cases, we will use a special model class such as ZaServer, ZaDomain, etc
     * however, in this case, the data object does not have any special features to be encapsulated
     **/
    var item = new Object();
    try {

        item[ZaModel.currentTab] = "1"
        /**
         * This statement feeds the data to the view @see ZaGlobalStatsView#setObject
         */
        this._contentView.setObject(item);
    } catch (ex) {
        this._handleException(ex, "ZaGlobalConfigViewController.prototype.show", null, false);
    }
    this._currentObject = item;
}

/**
 * We do not directly overwrite ZaController.prototype._setView method of ZaController class,
 * instead we add function references to ZaController.setViewMethods map
 * @see ZaController#setViewMethods
 * @see ZaController#_setView
 */
ZaGlobalStatsController.setViewMethod =
function() {
    if (!this._contentView) {
        /**
         * This call instantiates ZaGlobalStatsView
         */
        this._contentView  = new this.tabConstructor(this._container);

        /**
         * This object tells ZaAppViewMgr which components to put on the screen for this view.
         * Usualy, these are: toolbar and the view contents.
         */
        var elements = new Object();

        elements[ZaAppViewMgr.C_APP_CONTENT] = this._contentView;
        /**
         * This statement will tell the view manager to make the view visible
         */

        ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);

        /**
         * We need this in order to be able to get a handle of this controler instance
         */
        ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
    }
}
/**
 * This statement adds ZaGlobalStatsController.setViewMethod method to the map of methods that will be called by ZaController.prototype._setView
 * whenever this._setView();
 */
ZaController.setViewMethods["ZaGlobalStatsController"].push(ZaGlobalStatsController.setViewMethod);


ZaGlobalStatsController.prototype.refreshListener =
function (ev) {
    var currentTabView = this._contentView._tabs[this._contentView._currentTabKey]["view"];
    if (currentTabView && currentTabView.showMe) {
        currentTabView.showMe(2) ; //force server side cache to be refreshed.
    }
}
}
if (AjxPackage.define("zimbraAdmin.statistics.controller.ZaServerStatsController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaServerStatsController 
* @contructor ZaServerStatsController
* @param appCtxt
* @param container
* @param app
* @author Greg Solovyev
**/
ZaServerStatsController = function(appCtxt, container) {
   	this._toolbarOperations = new Array();
   	this._toolbarOrder = new Array();
      	
	ZaController.call(this, appCtxt, container,"ZaServerStatsController");
	this._helpURL = ZaUtil.HELP_URL;
	this._helpButtonText = ZaMsg.helpCheckStatistics;
	this.tabConstructor = ZaServerStatsView;
}

ZaServerStatsController.prototype = new ZaController();
ZaServerStatsController.prototype.constructor = ZaServerStatsController;

ZaController.setViewMethods["ZaServerStatsController"] = [];
//ZaServerStatsController.STATUS_VIEW = "ZaServerStatsController.STATUS_VIEW";

ZaServerStatsController.prototype.show = 
function(entry, openInNewTab, skipRefresh) {
	if (! this.selectExistingTabByItemId(entry.id)){	
		this._setView(entry, openInNewTab, skipRefresh);
	}
}

ZaServerStatsController.setViewMethod =
function(item,openInNewTab) {	
    if (!this._contentView) {
		this._view = this._contentView = new this.tabConstructor(this._container);
		var elements = new Object();


		elements[ZaAppViewMgr.C_APP_CONTENT] = this._contentView;

		ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
		this._UICreated = true;
		ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
	}
//	ZaApp.getInstance().pushView(ZaZimbraAdmin._STATISTICS_BY_SERVER);
	ZaApp.getInstance().pushView(this.getContentViewId());
//	ZaApp.getInstance().setCurrentController(this);

	this._contentView.setObject(item);
	//show the view in the new tab

	//var tab = new ZaAppTab (ZaApp.getInstance().getTabGroup(),  
	//			item.name, "StatisticsByServer" , null, null, true, true, ZaApp.getInstance()._currentViewId) ;
	//tab.setToolTipContent(ZaMsg.tt_tab_View + " " + item.type + " " + item.name + " " + ZaMsg.tt_tab_Statistics) ;

}
ZaController.setViewMethods["ZaServerStatsController"].push(ZaServerStatsController.setViewMethod);

ZaServerStatsController.prototype._prevPageListener = 
function (ev) {
	var currentView = this.getCurrentStatsView() ;
	var mbxPage = this._contentView._mbxPage ;
	var sessPage = this._contentView._sessionPage ;
	if (currentView == mbxPage) {
		var xform = mbxPage._view ;
		var curInst = xform.getInstance();
		mbxPage.updateMbxLists(curInst, null, curInst.offset - ZaServerMBXStatsPage.MBX_DISPLAY_LIMIT, null, null );
	}	
	
	if (currentView == sessPage) {
		sessPage._pageListener(true);
	}
};

ZaServerStatsController.prototype._nextPageListener = 
function (ev) {
	var currentView = this.getCurrentStatsView() ;
	var mbxPage = this._contentView._mbxPage ;
	var sessPage = this._contentView._sessionPage ;
	if (currentView == mbxPage) {
		var xform = mbxPage._view ;
		var curInst = xform.getInstance();
		mbxPage.updateMbxLists(curInst, null, curInst.offset + ZaServerMBXStatsPage.MBX_DISPLAY_LIMIT, null, null );
	}
	
	if (currentView == sessPage) {
		sessPage._pageListener();
	}
}; 

ZaServerStatsController.prototype.getCurrentStatsView =
function () {
	return this._contentView._tabs[this._contentView._currentTabKey].view ;
}

ZaServerStatsController.prototype.refreshListener =
function (ev) {
	var currentTabView = this._contentView._tabs[this._contentView._currentTabKey]["view"];
	if (currentTabView && currentTabView.showMe) {
		currentTabView.showMe(2) ; //force server side cache to be refreshed.
	}
}



//////////////////////////////////////////////////////////////////////////////////////////

/**
* @constructor
* @class ZaServerStatsListController
* This is a singleton object that controls all the user interaction with the list of ZaServer objects
* @author wgan
**/
ZaServerStatsListController = function(appCtxt, container) {
    ZaListViewController.call(this, appCtxt, container, "ZaServerStatsListController");
    this._popupOperations = new Array();

    this._helpURL = ZaUtil.HELP_URL;
    this._helpButtonText = ZaMsg.helpCheckStatistics;
}

ZaServerStatsListController.prototype = new ZaListViewController();
ZaServerStatsListController.prototype.constructor = ZaServerStatsListController;

ZaController.initPopupMenuMethods["ZaServerStatsListController"] = new Array();
ZaController.changeActionsStateMethods["ZaServerStatsListController"] = new Array();

/**
* @param list {ZaItemList} a list of ZaServer {@link ZaServer} objects
**/
ZaServerStatsListController.prototype.show =
function(list) {
    if (!this._UICreated) {
        this._createUI();
    }
    if (list != null)
    this._contentView.set(list.getVector());

    ZaApp.getInstance().pushView(this.getContentViewId());
    if (list != null)
    this._list = list;

    this.changeActionsState();
}


ZaServerStatsListController.initPopupMenuMethod =
function () {
        this._popupOperations[ZaOperation.VIEW] = new ZaOperation(ZaOperation.VIEW,ZaMsg.TBB_View, ZaMsg.PQTBB_View_tt, "Properties", "PropertiesDis", new AjxListener(this, ZaServerStatsListController.prototype._viewButtonListener));
        this._popupOperations[ZaOperation.VIEW].enabled = false;
}
ZaController.initPopupMenuMethods["ZaServerStatsListController"].push(ZaServerStatsListController.initPopupMenuMethod);

ZaServerStatsListController.prototype._createUI = function () {
    try {
        var elements = new Object();
        this._contentView = new ZaServerListView(this._container);

        this._initPopupMenu();
        this._actionMenu =  new ZaPopupMenu(this._contentView, "ActionMenu", null, this._popupOperations, ZaId.VIEW_SERLIST, ZaId.MENU_POP);
        elements[ZaAppViewMgr.C_APP_CONTENT] = this._contentView;

        ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);

        this._contentView.addSelectionListener(new AjxListener(this, this._listSelectionListener));
        this._contentView.addActionListener(new AjxListener(this, this._listActionListener));

        this._UICreated = true;
        ZaApp.getInstance()._controllers[this.getContentViewId ()] = this;
    } catch (ex) {
        this._handleException(ex, "ZaServerStatsListController.prototype._createUI", null, false);
    }
}

ZaServerStatsListController.prototype.set =
function(serverList) {
    this.show(serverList);
}

/**
* @param ev
* This listener is invoked by  any controller that can change an ZaServer object
**/
ZaServerStatsListController.prototype.handleServerChange =
function (ev) {
    //if any of the data that is currently visible has changed - update the view
    if(ev) {
        var details = ev.getDetails();
        //if(details["modFields"] && (details["modFields"][ZaServer.A_description] )) {
        if (details) {
            if (this._list) {
                this._list.replace (details);
            }
            if (this._contentView) {
                this._contentView.setUI();
            }
            if(ZaApp.getInstance().getCurrentController() == this) {
                this.show();
            }
            this.changeActionsState();
        }
    }
}


/**
* This listener is called when the item in the list is double clicked. It call ZaServerController.show method
* in order to display the Server View
**/
ZaServerStatsListController.mappingId2handlerMap = null;
ZaServerStatsListController._getMapForMappingId2handler =
function (){
    if (!ZaServerStatsListController.mappingId2handlerMap){
        ZaServerStatsListController.mappingId2handlerMap = {
            "mainNode": { "mappingId": ZaZimbraAdmin._STATISTICS_BY_SERVER,
                          "handler": ZaOverviewPanelController.statsByServerTreeListener
                        },
            "tabNodes": { "mappingId": ZaZimbraAdmin._SERVER_STATISTICS_TAB_VIEW,
                          "handler": ZaOverviewPanelController.statsByServerTabTreeListener
                        }
        }
    } //only be initialized once

    return ZaServerStatsListController.mappingId2handlerMap;
}

ZaServerStatsListController.parentPathInTree = null;
ZaServerStatsListController._getparentPathInTree =
function (){
    if (!ZaServerStatsListController.parentPathInTree){
        ZaServerStatsListController.parentPathInTree =
            ZaTree.getPathByArray([ZaMsg.OVP_home, ZaMsg.OVP_monitor, ZaMsg.OVP_statistics]);
    } //only be initialized once
    return ZaServerStatsListController.parentPathInTree;
}

ZaServerStatsListController.prototype._listSelectionListener =
function(ev) {
    if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
        var item = ev.item;
        this._switchToSubItem(item);
    } else {
        this.changeActionsState();
    }
}

ZaServerStatsListController.prototype._listActionListener =
function (ev) {
    this.changeActionsState();
    this._actionMenu.popup(0, ev.docX, ev.docY);
}

ZaServerStatsListController.prototype._viewButtonListener =
function(ev) {
    if(this._contentView.getSelectionCount() == 1) {
        var item = this._contentView.getSelection()[0];
        this._switchToSubItem(item);
    }
}

ZaServerStatsListController.prototype._switchToSubItem = function (item)
{
    if (item) {
        this._selectedItem = item;
        ZaApp.getInstance().getServerStatsController().show(item);

        //must switch to the individual server stats view firstly,
        //then the ZaApp.getInstance().getAppViewMgr().getCurrentView() == server stats view,
        //let the  addObjectItemForAll get the right view id
        var overviewPanelController = ZaZimbraAdmin.getInstance().getOverviewPanelController();
        var parentPath = ZaServerStatsListController._getparentPathInTree();
        var map = ZaServerStatsListController._getMapForMappingId2handler();

        overviewPanelController.addObjectItem(parentPath, item.name, null,
                                                    false, false, item, map);
    }
}

ZaServerStatsListController.changeActionsStateMethod =
function () {
    var view = this._contentView;
    if(!view) {
        return;
    }

    var canEnableButton = (view.getSelectionCount() == 1 && view.getSelection()[0] != null);
    if(this._popupOperations[ZaOperation.VIEW]) {
        this._popupOperations[ZaOperation.VIEW].enabled = canEnableButton;
    }
}
ZaController.changeActionsStateMethods["ZaServerStatsListController"].push(ZaServerStatsListController.changeActionsStateMethod);
}
if (AjxPackage.define("zimbraAdmin.globalconfig.controller.ZaGlobalConfigViewController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaGlobalConfigViewController 
* @contructor ZaGlobalConfigViewController
* @param appCtxt
* @param container
* @param app
* @author Greg Solovyev
**/
ZaGlobalConfigViewController = function(appCtxt, container) {
	ZaXFormViewController.call(this, appCtxt, container, "ZaGlobalConfigViewController");
	this._UICreated = false;
	this._helpURL = ZaUtil.HELP_URL;
	this._helpButtonText = ZaMsg.helpManageGlobalSettings;
	this.objType = ZaEvent.S_GLOBALCONFIG;
	this.tabConstructor = GlobalConfigXFormView;					
}

ZaGlobalConfigViewController.prototype = new ZaXFormViewController();
ZaGlobalConfigViewController.prototype.constructor = ZaGlobalConfigViewController;

//ZaGlobalConfigViewController.STATUS_VIEW = "ZaGlobalConfigViewController.STATUS_VIEW";
ZaController.initToolbarMethods["ZaGlobalConfigViewController"] = new Array();
ZaController.initPopupMenuMethods["ZaGlobalConfigViewController"] = new Array();
ZaController.setViewMethods["ZaGlobalConfigViewController"] = [];
ZaController.changeActionsStateMethods["ZaGlobalConfigViewController"] = [];
ZaXFormViewController.preSaveValidationMethods["ZaGlobalConfigViewController"] = new Array();
//qin
ZaController.saveChangeCheckMethods["ZaGlobalConfigViewController"] = new Array();

/**
* Adds listener to removal of an ZaDomain 
* @param listener
**/
ZaGlobalConfigViewController.prototype.addSettingsChangeListener = 
function(listener) {
	this._evtMgr.addListener(ZaEvent.E_MODIFY, listener);
}

ZaGlobalConfigViewController.prototype.show = 
function(item, openInNewTab) {
	this._setView(item, false);
}

ZaGlobalConfigViewController.initPopupMenuMethod =
function () {
	this._popupOperations[ZaOperation.SAVE] = new ZaOperation(ZaOperation.SAVE, ZaMsg.TBB_Save, ZaMsg.ALTBB_Save_tt, "Save", "SaveDis", new AjxListener(this, this.saveButtonListener));    			
	this._popupOperations[ZaOperation.DOWNLOAD_GLOBAL_CONFIG] = new ZaOperation(ZaOperation.DOWNLOAD_GLOBAL_CONFIG, ZaMsg.TBB_DownloadConfig, ZaMsg.GLOBTBB_DownloadConfig_tt, "DownloadGlobalConfig", "DownloadGlobalConfig", new AjxListener(this, this.downloadConfigButtonListener));

}
ZaController.initPopupMenuMethods["ZaGlobalConfigViewController"].push(ZaGlobalConfigViewController.initPopupMenuMethod);

ZaGlobalConfigViewController.setViewMethod = function (entry) {
    try {
    	entry.load();
	} catch (ex) {
		this._handleException(ex, "ZaGlobalConfigViewController.prototype.show", null, false);
	}

    if (!entry[ZaModel.currentTab]) {
        entry[ZaModel.currentTab] = "1";
    }

    if (!this._UICreated) {
        this._createUI(entry);
    }

    ZaApp.getInstance().pushView(this.getContentViewId());

    this._view.setDirty(false);
    this._view.setObject(entry); 	//setObject is delayed to be called after pushView in order to avoid jumping of the view

    this._currentObject = entry;
}
ZaController.setViewMethods["ZaGlobalConfigViewController"].push(ZaGlobalConfigViewController.setViewMethod) ;

/**
* @method _createUI
**/
ZaGlobalConfigViewController.prototype._createUI =
function (entry) {
	this._contentView = this._view = new this.tabConstructor(this._container, entry);

    this._initPopupMenu();
	//always add Help button at the end of the toolbar
	
	var elements = new Object();
	elements[ZaAppViewMgr.C_APP_CONTENT] = this._view;
    ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
	this._UICreated = true;
	ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
}

ZaGlobalConfigViewController.prototype.setEnabled = 
function(enable) {
	this._view.setEnabled(enable);
}

ZaGlobalConfigViewController.changeActionsStateMethod =
function () {
    var isToEnable = (this._view && this._view.isDirty());
    if(this._popupOperations[ZaOperation.SAVE]) {
        this._popupOperations[ZaOperation.SAVE].enabled = isToEnable;
    }
}
ZaController.changeActionsStateMethods["ZaGlobalConfigViewController"].push(ZaGlobalConfigViewController.changeActionsStateMethod);


/**
* handles "download" button click. Launches file download in a new window
**/
ZaGlobalConfigViewController.prototype.downloadConfigButtonListener = 
function(ev) {
	window.open("/service/collectldapconfig/");
}

ZaGlobalConfigViewController.prototype._saveChanges =
function () {
	var tmpObj = this._view.getObject();
	var isNew = false;
	if(tmpObj.attrs == null) {
		//show error msg
		this._errorDialog.setMessage(ZaMsg.ERROR_UNKNOWN, null, DwtMessageDialog.CRITICAL_STYLE, null);
		this._errorDialog.popup();		
		return false;	
	}

	//check values
	if(ZaItem.hasWritePermission(ZaGlobalConfig.A_zimbraSmtpPort,tmpObj)) {
		if(!AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaGlobalConfig.A_zimbraSmtpPort])) {
			//show error msg
			this._errorDialog.setMessage(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.NAD_SmtpPort]), null, DwtMessageDialog.CRITICAL_STYLE, null);
			this._errorDialog.popup();		
			return false;
		}
	}	
	//check if domain is real
	if(ZaItem.hasWritePermission(ZaGlobalConfig.A_zimbraDefaultDomainName,tmpObj)) {
		if(tmpObj.attrs[ZaGlobalConfig.A_zimbraDefaultDomainName]) {
			if(tmpObj.attrs[ZaGlobalConfig.A_zimbraDefaultDomainName] != this._currentObject.attrs[ZaGlobalConfig.A_zimbraDefaultDomainName]) {
				var testD = new ZaDomain();
				try {
					testD.load("name",tmpObj.attrs[ZaGlobalConfig.A_zimbraDefaultDomainName]);
				} catch (ex) {
					if (ex.code == ZmCsfeException.NO_SUCH_DOMAIN) {
						this._errorDialog.setMessage(AjxMessageFormat.format(ZaMsg.ERROR_WRONG_DOMAIN_IN_GS, [tmpObj.attrs[ZaGlobalConfig.A_zimbraDefaultDomainName]]), null, DwtMessageDialog.CRITICAL_STYLE, null);
						this._errorDialog.popup();	
						return false;	
					} else {
						throw (ex);
					}
				}
			}
		}
	}	
	if(ZaItem.hasWritePermission(ZaGlobalConfig.A_zimbraGalMaxResults,tmpObj)) {
		if(!AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaGlobalConfig.A_zimbraGalMaxResults])) {
			//show error msg
			this._errorDialog.setMessage(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR,[ZaMsg.MSG_zimbraGalMaxResults]), null, DwtMessageDialog.CRITICAL_STYLE, null);
			this._errorDialog.popup();		
			return false;
		}	
	}	
	if(ZaItem.hasWritePermission(ZaGlobalConfig.A_zimbraScheduledTaskNumThreads,tmpObj)) {
		if (tmpObj.attrs[ZaGlobalConfig.A_zimbraScheduledTaskNumThreads] &&
		 	 !AjxUtil.isPositiveInt(tmpObj.attrs[ZaGlobalConfig.A_zimbraScheduledTaskNumThreads])) {
				//show error msg
			this._errorDialog.setMessage(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR,[ZaMsg.NAD_zimbraScheduledTaskNumThreads]), null, DwtMessageDialog.CRITICAL_STYLE, null);
			this._errorDialog.popup();		
			return false;
		}	
	}	
	// update zimbraMtaRestriction (except RBLs)
	if(ZaItem.hasWritePermission(ZaGlobalConfig.A_zimbraMtaRestriction,tmpObj)) {
		var restrictions = [];
		for (var i = 0; i < ZaGlobalConfig.MTA_RESTRICTIONS.length; i++) {
			var restriction = ZaGlobalConfig.MTA_RESTRICTIONS[i];
			if (tmpObj.attrs["_"+ZaGlobalConfig.A_zimbraMtaRestriction+"_"+restriction]) {
				restrictions.push(restriction);
			}			
		}
		var dirty = restrictions.length > 0;
		if (tmpObj.attrs[ZaGlobalConfig.A_zimbraMtaRestriction]) {
			var prevRestrictions = AjxUtil.isString(tmpObj.attrs[ZaGlobalConfig.A_zimbraMtaRestriction])
			                     ? [ tmpObj.attrs[ZaGlobalConfig.A_zimbraMtaRestriction] ]
			                     : tmpObj.attrs[ZaGlobalConfig.A_zimbraMtaRestriction];
			dirty = AjxStringUtil.getAsString(restrictions.sort()) != AjxStringUtil.getAsString(prevRestrictions.sort());
			if (!dirty) {
				for (var i = 0; i < prevRestrictions.length; i++) {
					var restriction = prevRestrictions[i];
					if (!tmpObj.attrs["_"+ZaGlobalConfig.A_zimbraMtaRestriction+"_"+restriction]) {
						dirty = true;
						break;
					}
				}
			}
		}
		
		//check policy service
		var policyService = tmpObj.attrs[ZaGlobalConfig.A_zimbraMtaPolicyService];
		var currentPolicyService = this._currentObject.attrs[ZaGlobalConfig.A_zimbraMtaPolicyService];
		var policyServiceLength = policyService.length;
		if ((policyServiceLength != currentPolicyService.length) || (policyService.join("") != currentPolicyService.join(""))) {
			dirty = true;
		}
		for (var ix = 0; ix < policyServiceLength; ix++) {
			var policyServiceValue = policyService[ix];
			if (policyServiceValue) {
				restrictions.push("check_policy_service " + policyServiceValue);
			}
		}

        // Check reject_rbl_client - List of Client RBLs
		var rblClient = tmpObj.attrs[ZaGlobalConfig.A_zimbraMtaRejectRblClient];
		var currentRblClient = this._currentObject.attrs[ZaGlobalConfig.A_zimbraMtaRejectRblClient];
		var rblClientLength = rblClient.length;
		if ((rblClientLength != currentRblClient.length) || (rblClient.join("") != currentRblClient.join(""))) {
			dirty = true;
		}
		for (var ix = 0 ; ix < rblClientLength; ix++) {
			var rblClientValue = rblClient[ix];
			if (rblClientValue) {
				restrictions.push("reject_rbl_client " + rblClientValue);
			}
		}

        // Check reject_rhsbl_client - List of Client RHSBLs
		var RHSblClient = tmpObj.attrs[ZaGlobalConfig.A_zimbraMtaRejectRHSblClient];
		var currentRHSblClient = this._currentObject.attrs[ZaGlobalConfig.A_zimbraMtaRejectRHSblClient];
		var RHSblClientLength = RHSblClient.length;
		if ((RHSblClientLength != currentRHSblClient.length) || (RHSblClient.join("") != currentRHSblClient.join(""))) {
			dirty = true;
		}
		for (var ix = 0 ; ix < RHSblClientLength; ix++) {
			var RHSblClientValue = RHSblClient[ix];
			if (RHSblClientValue) {
				restrictions.push("reject_rhsbl_client " + RHSblClientValue);
			}
		}

        // Check reject_rhsbl_reverse_client - List of Reverse Client RHSBLs
		var RHSblReverseClient = tmpObj.attrs[ZaGlobalConfig.A_zimbraMtaRejectRHSblReverseClient];
		var currentRHSblReverseClient = this._currentObject.attrs[ZaGlobalConfig.A_zimbraMtaRejectRHSblReverseClient];
		var RHSblReverseClientLength = RHSblReverseClient.length;
		if ((RHSblReverseClientLength != currentRHSblReverseClient.length) || (RHSblReverseClient.join("") != currentRHSblReverseClient.join(""))) {
			dirty = true;
		}
		for (var ix = 0 ; ix < RHSblReverseClientLength; ix++) {
			var RHSblReverseClientValue = RHSblReverseClient[ix];
			if (RHSblReverseClientValue) {
				restrictions.push("reject_rhsbl_reverse_client " + RHSblReverseClientValue);
			}
		}

        // Check reject_rhsbl_sender - List of Sender RHSBLs
		var RHSblSender = tmpObj.attrs[ZaGlobalConfig.A_zimbraMtaRejectRHSblSender];
		var currentRHSblSender = this._currentObject.attrs[ZaGlobalConfig.A_zimbraMtaRejectRHSblSender];
		var RHSblSenderLength = RHSblSender.length;
		if ((RHSblSenderLength != currentRHSblSender.length) || (RHSblSender.join("") != currentRHSblSender.join(""))) {
			dirty = true;
		}
		for (var ix = 0 ; ix < RHSblSenderLength; ix++) {
			var RHSblSenderValue = RHSblSender[ix];
			if (RHSblSenderValue) {
				restrictions.push("reject_rhsbl_sender " + RHSblSenderValue);
			}
		}

        if (dirty) {
			tmpObj.attrs[ZaGlobalConfig.A_zimbraMtaRestriction] = restrictions;
		}
	}

	// check validation expression, which should be email-like pattern
        if(tmpObj.attrs[ZaGlobalConfig.A_zimbraMailAddressValidationRegex]) {
                var regList = tmpObj.attrs[ZaGlobalConfig.A_zimbraMailAddressValidationRegex];
                var islegal = true;
                var regval = null;
                if(regList && regList instanceof Array) {
                        for(var i = 0; i < regList.length && islegal; i++) {
                                if (regList[i].indexOf("@") == -1) {
                                        islegal = false;
                                        regval = regList[i];
                                }
                        }
                } else if(regList) {
                        if (regList.indexOf("@") == -1) {
                                islegal = false;
                                regval = regList;
                        }
                }
                if(!islegal) {
                        this._errorDialog.setMessage(AjxMessageFormat.format(ZaMsg.ERROR_MSG_EmailValidReg, regval),
                                null, DwtMessageDialog.CRITICAL_STYLE, ZabMsg.zimbraAdminTitle);
                        this._errorDialog.popup();
                        return islegal;
                }
        }

        //transfer the fields from the tmpObj to the _currentObject, since _currentObject is an instance of ZaDomain
        var mods = new Object();

        // execute other plugin methods
        if(ZaController.saveChangeCheckMethods["ZaGlobalConfigViewController"]) {
                var methods = ZaController.saveChangeCheckMethods["ZaGlobalConfigViewController"];
                var cnt = methods.length;
                for(var i = 0; i < cnt; i++) {
                        if(typeof(methods[i]) == "function")
                               methods[i].call(this, mods, tmpObj, this._currentObject);
                }
        }
	
	for (var a in tmpObj.attrs) {
		if(a == ZaItem.A_objectClass || a == ZaGlobalConfig.A_zimbraAccountClientAttr ||
		a == ZaGlobalConfig.A_zimbraServerInheritedAttr || a == ZaGlobalConfig.A_zimbraDomainInheritedAttr ||
		a == ZaGlobalConfig.A_zimbraCOSInheritedAttr || a == ZaGlobalConfig.A_zimbraGalLdapAttrMap || 
		a == ZaGlobalConfig.A_zimbraGalLdapFilterDef || /^_/.test(a) || a == ZaGlobalConfig.A_zimbraMtaBlockedExtension || a == ZaGlobalConfig.A_zimbraMtaCommonBlockedExtension
                || a == ZaItem.A_zimbraACE)
			continue;
		if(!ZaItem.hasWritePermission(a,tmpObj)) {
			continue;
		}		
		
		if ((this._currentObject.attrs[a] != tmpObj.attrs[a]) && !(this._currentObject.attrs[a] == undefined && tmpObj.attrs[a] === "")) {
			if(tmpObj.attrs[a] instanceof Array) {
                if (!this._currentObject.attrs[a])
                	this._currentObject.attrs[a] = [] ;
		else if(!(this._currentObject.attrs[a] instanceof Array))
			this._currentObject.attrs[a] = [this._currentObject.attrs[a]];

                if( tmpObj.attrs[a].join(",").valueOf() !=  this._currentObject.attrs[a].join(",").valueOf()) {
					if (a === ZaGlobalConfig.A_zimbraMtaRestriction) { // Fix for bug 104512
						var mtaRestCustomAttrArr = ZaGlobalConfigViewController.getMTARestCustomAttributes(this._currentObject.attrs[a]);
						tmpObj.attrs[a] =  AjxUtil.mergeArrays(tmpObj.attrs[a],mtaRestCustomAttrArr);
						AjxUtil.dedup(tmpObj.attrs[a]);
					}
					mods[a] = tmpObj.attrs[a];
				}
			} else {
				mods[a] = tmpObj.attrs[a];
			}				
		}
	}
	//check if blocked extensions are changed
	if(ZaItem.hasWritePermission(ZaGlobalConfig.A_zimbraMtaBlockedExtension,tmpObj)) {
		if(!AjxUtil.isEmpty(tmpObj.attrs[ZaGlobalConfig.A_zimbraMtaBlockedExtension])) {
			if(
				(
					(!this._currentObject.attrs[ZaGlobalConfig.A_zimbraMtaBlockedExtension] || !this._currentObject.attrs[ZaGlobalConfig.A_zimbraMtaBlockedExtension].length))
					|| (tmpObj.attrs[ZaGlobalConfig.A_zimbraMtaBlockedExtension].join("") != this._currentObject.attrs[ZaGlobalConfig.A_zimbraMtaBlockedExtension].join(""))
				) {
				mods[ZaGlobalConfig.A_zimbraMtaBlockedExtension] = tmpObj.attrs[ZaGlobalConfig.A_zimbraMtaBlockedExtension];
			} 
		} else if (AjxUtil.isEmpty(tmpObj.attrs[ZaGlobalConfig.A_zimbraMtaBlockedExtension])  && !AjxUtil.isEmpty(this._currentObject.attrs[ZaGlobalConfig.A_zimbraMtaBlockedExtension])) {
			mods[ZaGlobalConfig.A_zimbraMtaBlockedExtension] = "";
		}		
	}

	//validate ephemeral backend url
	var backendLDAP = "ldap";
	var backendSSDB = "ssdb";
	var defaulValue = "//default";

	if (ZaItem.hasWritePermission(ZaGlobalConfig.A_zimbraEphemeralBackendURL, tmpObj)) {
		if (tmpObj.attrs[ZaGlobalConfig.A_zimbraEphemeralBackendURL]) {
			var backendURL = tmpObj.attrs[ZaGlobalConfig.A_zimbraEphemeralBackendURL];
			var chunks = backendURL.split(":");
			
			if (chunks < 2 || chunks > 3) {
				throw new AjxException(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_BACKEND_URL, [backendURL]), AjxException.INVALID_PARAM, "ZaGlobalConfigViewController.prototype._saveChanges");
			}

			//check two or more adjacent colon, colon is at the begin/end of the URL
			for (var i = 0; i < chunks.length; i++) {
				if (chunks[i].length == 0) {
					throw new AjxException(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_BACKEND_URL, [backendURL]), AjxException.INVALID_PARAM, "ZaGlobalConfigViewController.prototype._saveChanges");
				}
			}

			if (chunks.length == 2) {
				if (chunks[0] == backendLDAP) {
					if (chunks.length == 2 && chunks[1] != defaulValue) {
						throw new AjxException(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_BACKEND_URL, [backendURL]), AjxException.INVALID_PARAM, "ZaGlobalConfigViewController.prototype._saveChanges");
					}
				}

				if (chunks[0] == backendSSDB) {
					throw new AjxException(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_BACKEND_URL, [backendURL]), AjxException.INVALID_PARAM, "ZaGlobalConfigViewController.prototype._saveChanges");
				}
			} else {	//chunks.length == 3
				var isIPOrHostName = false;
				//check valid ip or host name
				if (!ZaGlobalConfigViewController.isValidHostName(chunks[1])) {
					isIPOrHostName = false;
				}

				// In case of localhost, lets not verify IPV4
				if (chunks[1] === 'localhost') {
					isIPOrHostName = true;
				}

				if (!isIPOrHostName) {
					try {
						var exIPData = ZaIPUtil.isIPV4(chunks[1]);
						isIPOrHostName = true;
					} catch (ex) {
						isIPOrHostName = false;
					}
				}

				if (!isIPOrHostName) {
					throw new AjxException(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_BACKEND_URL, [backendURL]), AjxException.INVALID_PARAM, "ZaGlobalConfigViewController.prototype._saveChanges");
				}

				//check valid port
				if (!AjxUtil.isInt(chunks[2])) {
					throw new AjxException(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_BACKEND_URL, [backendURL]), AjxException.INVALID_PARAM, "ZaGlobalConfigViewController.prototype._saveChanges");
				}
			}
		} else {
			throw new AjxException(AjxMessageFormat.format(ZaMsg.ERROR_EMPTY_BACKEND_URL, [backendURL]), AjxException.INVALID_PARAM, "ZaGlobalConfigViewController.prototype._saveChanges");
		}
	}

	//save the model
    if (this._currentObject[ZaModel.currentTab]!= tmpObj[ZaModel.currentTab])
             this._currentObject[ZaModel.currentTab] = tmpObj[ZaModel.currentTab];
	//var changeDetails = new Object();
	this._currentObject.modify(mods,tmpObj);

    // skin modification needs to restart server
    if(mods.hasOwnProperty(ZaGlobalConfig.A_zimbraSkinForegroundColor)
            ||  mods.hasOwnProperty(ZaGlobalConfig.A_zimbraSkinBackgroundColor)
            ||  mods.hasOwnProperty(ZaGlobalConfig.A_zimbraSkinSecondaryColor)
            ||  mods.hasOwnProperty(ZaGlobalConfig.A_zimbraSkinSelectionColor)
            ||  mods.hasOwnProperty(ZaGlobalConfig.A_zimbraSkinLogoURL)
            ||  mods.hasOwnProperty(ZaGlobalConfig.A_zimbraSkinLogoLoginBanner)
            ||  mods.hasOwnProperty(ZaGlobalConfig.A_zimbraSkinLogoAppBanner)
            ) {
            	try {
            		var mbxSrvrs = ZaApp.getInstance().getMailServers();
            		var serverList = [];
            		var cnt = mbxSrvrs.length;
            		for(var i=0; i<cnt; i++) {
            			if(ZaItem.hasRight(ZaServer.FLUSH_CACHE_RIGHT,mbxSrvrs[i])) {
            				serverList.push(mbxSrvrs[i]);
            			}
            		}

            		if(serverList.length > 0) {
						ZaApp.getInstance().dialogs["confirmMessageDialog2"].setMessage(ZaMsg.Domain_flush_cache_q, DwtMessageDialog.INFO_STYLE);
						ZaApp.getInstance().dialogs["confirmMessageDialog2"].registerCallback(DwtDialog.YES_BUTTON, this.openFlushCacheDlg, this, [serverList]);
						ZaApp.getInstance().dialogs["confirmMessageDialog2"].registerCallback(DwtDialog.NO_BUTTON, this.closeCnfrmDelDlg, this, null);
						ZaApp.getInstance().dialogs["confirmMessageDialog2"].popup();
            		}

            	} catch (ex) {
                    this._handleException(ex, "ZaGlobalConfigViewController.prototype._saveChange", null, false);
                    return false;
            	}

    }
    ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(ZaMsg.GlobalConfigModified);
	return true;
}

ZaGlobalConfigViewController.isValidHostName =
function (isHostNameStr) {
	if (!isHostNameStr) {
		return false;
	}
    
	//Invalid host name that has two or more adjacent dot, dot is at index 0 or at the end of host name
	var chunks = isHostNameStr.split(".");
	for (var i = 0; i < isHostNameStr.length; i++) {
		if (isHostNameStr[i].length == 0) {
			return false;
		}
	}
	
	if(AjxUtil.isHostName(isHostNameStr)) {
		return true;
	}
	return false;
}

ZaGlobalConfigViewController.prototype.validateMyNetworks = ZaServerController.prototype.validateMyNetworks;
ZaXFormViewController.preSaveValidationMethods["ZaGlobalConfigViewController"].push(ZaGlobalConfigViewController.prototype.validateMyNetworks);

ZaGlobalConfigViewController.prototype.openFlushCacheDlg =
function (serverList) {
	ZaApp.getInstance().dialogs["confirmMessageDialog2"].popdown();
	
	serverList._version = 1;
	var uuid = [];
	for(var i=0;i<serverList.length;i++) {
		serverList[i]["status"] = 0;
		uuid.push(serverList[i].id)
	}
	obj = {statusMessage:null,flushZimlet:false,flushSkin:true,flushLocale:false,serverList:serverList,status:0, _uuid:(uuid.length > 1 ? uuid.join("__") : uuid[0]), name:(uuid.length > 1 ? ZaMsg.multiple_servers : serverList[0].name)};
	ZaApp.getInstance().dialogs["flushCacheDialog"] = new ZaFlushCacheXDialog(this._container, {id:(uuid.length > 1 ? uuid.join("__") : uuid[0]), name:(uuid.length > 1 ? ZaMsg.multiple_servers : serverList[0].name)});
	ZaApp.getInstance().dialogs["flushCacheDialog"].setObject(obj);
	ZaApp.getInstance().dialogs["flushCacheDialog"].popup();
}

ZaGlobalConfigViewController.getMTARestCustomAttributes = function(savedMtaRestAttrArr) {

	var zimbraMtaRestAttr = ZaGlobalConfig.MTA_RESTRICTIONS;
	var zimbraMtaRestExtraAttr = ['policy_service','reject_rbl_client','reject_rhsbl_client','reject_rhsbl_reverse_client','reject_rhsbl_sender'];

	// Get all defined zimbraMtaRestriction attributes .
	zimbraMtaRestAttr = AjxUtil.mergeArrays(zimbraMtaRestAttr,zimbraMtaRestExtraAttr);
	var _len = savedMtaRestAttrArr.length;
	var zimbraMtaRestAttrStr  =   AjxStringUtil.getAsString(zimbraMtaRestAttr);

	/*Get the  custom MTA Rest. attr. and add them to the request body of modifyConfigRequest.
	 Server MTA Rest. attr. which are not in zimbra defined attr are customized one.
	 Parse the saved attr. and compare it with zimbra defined attr, if it doesnot match, the attr. is customized one. */

	var mtaRestCustomAttrArr = [];
	for (var i = 0; i < _len; i++) {
		var savedMtaRestAttr = savedMtaRestAttrArr[i];
		var savedMtaRestAttrName = savedMtaRestAttr.substring(0,savedMtaRestAttr.indexOf(' ')); //  zimbra attr having array values
		if ( zimbraMtaRestAttrStr.indexOf(savedMtaRestAttr) === -1 &&  zimbraMtaRestExtraAttr.indexOf(savedMtaRestAttrName) === -1) { // getting the customised attribute, excluding  zimbra attr which have array values
			mtaRestCustomAttrArr.push(savedMtaRestAttr);
		}
	}
	return mtaRestCustomAttrArr ;
};




}
if (AjxPackage.define("zimbraAdmin.dl.controller.ZaDLController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaDLController controls display of a single Distribution list
 * @author EMC
 * Distribution list controller 
 */
ZaDLController = function(appCtxt, container) {
	ZaXFormViewController.call(this, appCtxt, container,"ZaDLController");
	this._UICreated = false;
	this._helpURL = ZaUtil.HELP_URL;
	this._helpButtonText = ZaMsg.helpEditDL;
	this.deleteMsg = ZaMsg.Q_DELETE_DL;
	this.objType = ZaEvent.S_ACCOUNT;
	this.tabConstructor = ZaDLXFormView;
	this._removeAliasArr = [];
	this._addAliasArr = [];		
}

ZaDLController.prototype = new ZaXFormViewController();
ZaDLController.prototype.constructor = ZaDLController;

ZaController.initToolbarMethods["ZaDLController"] = new Array();
ZaController.initPopupMenuMethods["ZaDLController"] = new Array();
ZaController.setViewMethods["ZaDLController"] = [];
ZaController.changeActionsStateMethods["ZaDLController"] = new Array();

ZaDLController.prototype.toString = function () {
	return "ZaDLController";
};


ZaDLController.prototype.show = 
function(entry, openInNewTab, skipRefresh) {
	this._setView(entry, openInNewTab, skipRefresh);
	//if it has many members, that could slow down the performance when loading members, so make the get members request as async
	entry.schedulePostLoading(this);
}

ZaDLController.setViewMethod =
function (entry)	{
	try {
        var skipRight = false ;       
        if (entry.id == null) { //it is a new distribution list, ignore the right checking.
            skipRight = true ;
        }
	    entry.refresh (skipRight,true) ;
		this._createUI(entry);
		ZaApp.getInstance().pushView(this.getContentViewId());
		this._view.setDirty(false);
		entry[ZaModel.currentTab] = "1";
		this._view.setObject(entry);
		this._currentObject = entry;
	} catch (ex) {
		this._handleException(ex, "ZaDLController.prototype.show", null, false);
	}	
};
ZaController.setViewMethods["ZaDLController"].push(ZaDLController.setViewMethod);
                            

ZaDLController.changeActionsStateMethod = function () {
    var isToEnable = (this._view && this._view.isDirty());

    if(this._popupOperations[ZaOperation.SAVE]) {
        this._popupOperations[ZaOperation.SAVE].enabled = isToEnable;
    }

    if(!this._currentObject.id || !ZaItem.hasRight(ZaAccount.RIGHT_DELETE_DL,this._currentObject)) {
        this._popupOperations[ZaOperation.DELETE].enabled = false;
    }
}
ZaController.changeActionsStateMethods["ZaDLController"].push(ZaDLController.changeActionsStateMethod);

ZaDLController.initToolbarMethod =
function () {
}
ZaController.initToolbarMethods["ZaDLController"].push(ZaDLController.initToolbarMethod);

ZaDLController.initPopupMenuMethod =
function () {
	var showNewDL = false;
	if(ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE') {
		showNewDL = true;
	} else {
		showNewDL = ZaZimbraAdmin.canCreateDL();
	}
   	this._popupOperations[ZaOperation.SAVE]=new ZaOperation(ZaOperation.SAVE,ZaMsg.TBB_Save, ZaMsg.ALTBB_Save_tt, "Save", "SaveDis", new AjxListener(this, this.saveButtonListener));
   	this._popupOperations[ZaOperation.CLOSE]=new ZaOperation(ZaOperation.CLOSE,ZaMsg.TBB_Close, ZaMsg.ALTBB_Close_tt, "Close", "CloseDis", new AjxListener(this, this.closeButtonListener));
   	//this._popupOperations[ZaOperation.SEP] = new ZaOperation(ZaOperation.SEP);
   	if(showNewDL) {
		this._popupOperations[ZaOperation.NEW]=new ZaOperation(ZaOperation.NEW,ZaMsg.TBB_New, ZaMsg.DLTBB_New_tt, "DistributionList", "DistributionListDis", new AjxListener(this, this.newButtonListener, [true]));
   	}
   	this._popupOperations[ZaOperation.DELETE]=new ZaOperation(ZaOperation.DELETE,ZaMsg.TBB_Delete, ZaMsg.DLTBB_Delete_tt,"Delete", "DeleteDis", new AjxListener(this, this.deleteButtonListener));

   	if(showNewDL) {
		this._popupOrder.push(ZaOperation.NEW);
   	}
	this._popupOrder.push(ZaOperation.DELETE);
	this._popupOrder.push(ZaOperation.SAVE);
	this._popupOrder.push(ZaOperation.CLOSE);
	this._popupOrder.push(ZaOperation.SEP);
}
ZaController.initPopupMenuMethods["ZaDLController"].push(ZaDLController.initPopupMenuMethod);

ZaDLController.prototype.getPopUpOperation =
function() {
    return this._popupOperations;
}
/*
ZaDLController.prototype.getAppBarAction =
function () {
    if (AjxUtil.isEmpty(this._appbarOperation)) {
    	this._appbarOperation[ZaOperation.HELP]=new ZaOperation(ZaOperation.HELP,ZaMsg.TBB_Help, ZaMsg.TBB_Help_tt, "Help", "Help", new AjxListener(this, this._helpButtonListener));
        this._appbarOperation[ZaOperation.SAVE]= new ZaOperation(ZaOperation.SAVE, ZaMsg.TBB_Save, ZaMsg.ALTBB_Save_tt, "", "", new AjxListener(this, this.saveButtonListener));
        this._appbarOperation[ZaOperation.CLOSE] = new ZaOperation(ZaOperation.CLOSE, ZaMsg.TBB_Close, ZaMsg.ALTBB_Close_tt, "", "", new AjxListener(this, this.closeButtonListener));
    }

    return this._appbarOperation;
}

ZaDLController.prototype.getAppBarOrder =
function () {
    if (AjxUtil.isEmpty(this._appbarOrder)) {
    	this._appbarOrder.push(ZaOperation.HELP);
        this._appbarOrder.push(ZaOperation.SAVE);
        this._appbarOrder.push(ZaOperation.CLOSE);
    }

    return this._appbarOrder;
}*/

ZaDLController.prototype.newDl = function () {
	var newDL = new ZaDistributionList();
	this.show(newDL);
}

// new button was pressed
ZaDLController.prototype.newButtonListener =
function(openInNewTab, ev) {
	if (openInNewTab) {
		ZaAccountListController.prototype._newDistributionListListener.call (this) ;
	}else{
		if(this._view.isDirty()) {
			//parameters for the confirmation dialog's callback 
			var args = new Object();		
			args["params"] = null;
			args["obj"] = this;
			args["func"] = ZaDLController.prototype.newDl;
			//ask if the user wants to save changes		
			//ZaApp.getInstance().dialogs["confirmMessageDialog"] = ZaApp.getInstance().dialogs["confirmMessageDialog"] = new ZaMsgDialog(this._view.shell, null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON, DwtDialog.CANCEL_BUTTON]);								
			ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(ZaMsg.Q_SAVE_CHANGES, DwtMessageDialog.INFO_STYLE);
			ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, this.saveAndGoAway, this, args);		
			ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.NO_BUTTON, this.discardAndGoAway, this, args);		
			ZaApp.getInstance().dialogs["confirmMessageDialog"].popup();
		} else {
			this.newDl();
		}	
	}
}

//private and protected methods
ZaDLController.prototype._createUI = 
function (entry) {
	//create accounts list view
	// create the menu operations/listeners first	
	this._contentView = this._view = new this.tabConstructor(this._container, entry);

    this._initPopupMenu();
	//always add Help button at the end of the toolbar    
		
	var elements = new Object();
	elements[ZaAppViewMgr.C_APP_CONTENT] = this._view;
    ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
	this._removeConfirmMessageDialog = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON],
	null, ZaId.CTR_PREFIX + ZaId.VIEW_DL + "_removeConfirm");			
	this._UICreated = true;
	ZaApp.getInstance()._controllers[this.getContentViewId()] = this ;
}

ZaDLController.prototype._saveChanges = function () {
	var retval = false;
	var newName = null;
	var obj;
	try { 
		if(this._view.getMyForm().hasErrors()) {
			var errItems = this._view.getMyForm().getItemsInErrorState();
			var dlgMsg = ZaMsg.CORRECT_ERRORS;
			dlgMsg +=  "<br><ul>";
			var i = 0;
			for(var key in errItems) {
				if(i > 19) {
					dlgMsg += "<li>...</li>";
					break;
				}
				if(key == "size") continue;
				var label = errItems[key].getInheritedProperty("msgName");
				if (!label && errItems[key].getLabel()) {
					label = errItems[key].getLabel();
				} else if(!label && errItems[key].getParentItem()) { //this might be a part of a composite
					if(errItems[key].getParentItem().getInheritedProperty("msgName")) {
						label = errItems[key].getParentItem().getInheritedProperty("msgName");
					} else {
						label = errItems[key].getParentItem().getLabel();
					}
				} 
				if(label) {
					if(label.substring(label.length-1,1)==":") {
						label = label.substring(0, label.length-1);
					}
				}			
				if(label) {
					dlgMsg += "<li>";
					dlgMsg +=label;			
					dlgMsg += "</li>";
				}
				i++;
			}
			dlgMsg += "</ul>";
			this.popupMsgDialog(dlgMsg, true);
			return false;
		}
		obj = this._view.getObject();
			
		if(!ZaDistributionList.checkValues(obj))
			return retval;

        if (this._currentObject[ZaModel.currentTab]!= obj[ZaModel.currentTab])
             this._currentObject[ZaModel.currentTab] = obj[ZaModel.currentTab];

		if (this._currentObject.id){
			this._currentObject.schedulePostLoading(this);
			this._currentObject.modify(null, obj);
			//check if need to rename
			if(this._currentObject && obj.name != this._currentObject.name && this._currentObject.id) {
				newName = obj.name;
			}		
					
			//check if need to rename
			if(newName) {
				try {
					this._currentObject.rename(newName);
				} catch (ex) {
					if(ex.code == ZmCsfeException.DISTRIBUTION_LIST_EXISTS) {
						this.popupErrorDialog(ZaMsg.FAILED_RENAME_DL_1, ex);
					} else {
						this.popupErrorDialog(ZaMsg.FAILED_RENAME_DL, ex);	
					}
					return retval;
				}
			}
            ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.DLModified,[this._currentObject.name]));
		} else {
			this._currentObject = ZaItem.create(obj,ZaDistributionList,"ZaDistributionList");
            ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.DLCreated,[this._currentObject.name]));
			//this._currentObject.id = dl.id;
            ZaApp.getInstance().getAccountListController().fireCreationEvent(this._currentObject);
		}
				
		//save changed fields
	} catch (ex) {
		if(ex.code == ZmCsfeException.ACCT_EXISTS || ex.code == ZmCsfeException.DISTRIBUTION_LIST_EXISTS) {
			this.popupErrorDialog(ZaMsg.ERROR_dlWithThisNameExists, ex);
		} else {
			this._handleException(ex, "ZaDLController.prototype._saveChanges", null, false);	
		}
		return false;
	}		
	return true;
};

}
if (AjxPackage.define("zimbraAdmin.resource.controller.ZaResourceController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaResourceController controls display of a single resource
 * @author Charles Cao
 * resource controller 
 */  
ZaResourceController = function(appCtxt, container) {
	ZaXFormViewController.call(this, appCtxt, container,"ZaResourceController");
	this._UICreated = false;
	this._helpURL = ZaUtil.HELP_URL;
	this._helpButtonText = ZaMsg.helpManageResourceAccount;
	this.deleteMsg = ZaMsg.Q_DELETE_RES;
	this.objType = ZaEvent.S_ACCOUNT;	
	this.tabConstructor = ZaResourceXFormView;	
}

ZaResourceController.prototype = new ZaXFormViewController();
ZaResourceController.prototype.constructor = ZaResourceController;

ZaController.initToolbarMethods["ZaResourceController"] = new Array();
ZaController.initPopupMenuMethods["ZaResourceController"] = new Array();
ZaController.setViewMethods["ZaResourceController"] = [];
ZaController.changeActionsStateMethods["ZaResourceController"] = new Array();

ZaResourceController.prototype.toString = function () {
	return "ZaResourceController";
};

ZaResourceController.prototype.show =
function(entry, openInNewTab, skipRefresh) {
	this._setView(entry, openInNewTab, skipRefresh);
}

ZaResourceController.changeActionsStateMethod = function () {
    var isToEnable = (this._view && this._view.isDirty());

    if(this._popupOperations[ZaOperation.SAVE]) {
        this._popupOperations[ZaOperation.SAVE].enabled = isToEnable;
    }
}
ZaController.changeActionsStateMethods["ZaResourceController"].push(ZaResourceController.changeActionsStateMethod);

ZaResourceController.setViewMethod =
function (entry)	{
	this._createUI(entry);
	try {
		//ZaApp.getInstance().pushView(ZaZimbraAdmin._RESOURCE_VIEW);
		ZaApp.getInstance().pushView(this.getContentViewId());
		if(entry.id) {
			//get the calendar resource by id
			entry.load("id", entry.id, null);			
		}	
		this._view.setDirty(false);
		entry[ZaModel.currentTab] = "1" ;
	
		this._view.setObject(entry);
		//disable the save button at the beginning of showing the form
        ZaZimbraAdmin.getInstance().getCurrentAppBar().enableButton(ZaOperation.SAVE, false);
		this._currentObject = entry;
	} catch (ex) {
		this._handleException(ex, "ZaResourceController.prototype.show", null, false);
	}	
};
ZaController.setViewMethods["ZaResourceController"].push(ZaResourceController.setViewMethod);

ZaResourceController.initPopupMenuMethod =
function () {
	var showNewCalRes = false;
	if(ZaSettings.HAVE_MORE_DOMAINS || ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE') {
		showNewCalRes = true;
	} else {
		showNewCalRes = ZaZimbraAdmin.canCreateCalRes();
	}

   	this._popupOperations[ZaOperation.SAVE]=new ZaOperation(ZaOperation.SAVE,ZaMsg.TBB_Save, ZaMsg.ALTBB_Save_tt, "Save", "SaveDis", new AjxListener(this, this.saveButtonListener));
   	this._popupOperations[ZaOperation.CLOSE]=new ZaOperation(ZaOperation.CLOSE,ZaMsg.TBB_Close, ZaMsg.ALTBB_Close_tt, "Close", "CloseDis", new AjxListener(this, this.closeButtonListener));
   	if(showNewCalRes) {
		this._popupOperations[ZaOperation.NEW]=new ZaOperation(ZaOperation.NEW,ZaMsg.TBB_New, ZaMsg.RESTBB_New_tt, "Resource", "ResourceDis", new AjxListener(this, this.newButtonListener));
   	}
   	this._popupOperations[ZaOperation.DELETE]=new ZaOperation(ZaOperation.DELETE,ZaMsg.TBB_Delete, ZaMsg.RESTBB_Delete_tt,"Delete", "DeleteDis", new AjxListener(this, this.deleteButtonListener));

    this._popupOrder.push(ZaOperation.NEW);
    this._popupOrder.push(ZaOperation.SAVE);
    this._popupOrder.push(ZaOperation.CLOSE);
    this._popupOrder.push(ZaOperation.DELETE);
}
ZaController.initPopupMenuMethods["ZaResourceController"].push(ZaResourceController.initPopupMenuMethod);
/*
ZaResourceController.prototype.getAppBarAction =
function () {
    if (AjxUtil.isEmpty(this._appbarOperation)) {
        this._appbarOperation[ZaOperation.SAVE]= new ZaOperation(ZaOperation.SAVE, ZaMsg.TBB_Save, ZaMsg.ALTBB_Save_tt, "", "", new AjxListener(this, this.saveButtonListener));
        this._appbarOperation[ZaOperation.CLOSE] = new ZaOperation(ZaOperation.CLOSE, ZaMsg.TBB_Close, ZaMsg.ALTBB_Close_tt, "", "", new AjxListener(this, this.closeButtonListener));
    }

    return this._appbarOperation;
}

ZaResourceController.prototype.getAppBarOrder =
function () {
    if (AjxUtil.isEmpty(this._appbarOrder)) {
        this._appbarOrder.push(ZaOperation.SAVE);
        this._appbarOrder.push(ZaOperation.CLOSE);
    }

    return this._appbarOrder;
}*/

ZaResourceController.prototype.getPopUpOperation =
function() {
    return this._popupOperations;
}

ZaResourceController.prototype.newResource = function () {
	try {
		var newResource = new ZaResource();
		//newResource.getAttrs = {all:true};
		//newResource._defaultValues = {attrs:{}};	
		newResource.loadNewObjectDefaults("name", ZaSettings.myDomainName);	
		
		if(!ZaApp.getInstance().dialogs["newResourceWizard"])
			ZaApp.getInstance().dialogs["newResourceWizard"]= new ZaNewResourceXWizard(this._container);	

		ZaApp.getInstance().dialogs["newResourceWizard"].setObject(newResource);
		ZaApp.getInstance().dialogs["newResourceWizard"].popup();
	} catch (ex) {
		this._handleException(ex, "ZaResourceController.prototype.newResource", null, false);
	}
}

// new button was pressed
ZaResourceController.prototype.newButtonListener =
function(ev) {
	if(this._view.isDirty()) {
		//parameters for the confirmation dialog's callback 
		var args = new Object();		
		args["params"] = null;
		args["obj"] = this;
		args["func"] = ZaResourceController.prototype.newResource;
		//ask if the user wants to save changes		
		//ZaApp.getInstance().dialogs["confirmMessageDialog"] = ZaApp.getInstance().dialogs["confirmMessageDialog"] = new ZaMsgDialog(this._view.shell, null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON, DwtDialog.CANCEL_BUTTON]);								
		ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(ZaMsg.Q_SAVE_CHANGES, DwtMessageDialog.INFO_STYLE);
		ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, this.saveAndGoAway, this, args);		
		ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.NO_BUTTON, this.discardAndGoAway, this, args);		
		ZaApp.getInstance().dialogs["confirmMessageDialog"].popup();
	} else {
		this.newResource();
	}	
}

//private and protected methods
ZaResourceController.prototype._createUI = 
function (entry) {
	//create accounts list view
	// create the menu operations/listeners first	
	this._contentView = this._view = new this.tabConstructor(this._container, entry);

    this._initPopupMenu();
	//always add Help button at the end of the toolbar    
		
	var elements = new Object();
	elements[ZaAppViewMgr.C_APP_CONTENT] = this._view;
	ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
	this._removeConfirmMessageDialog = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON], null, ZaId.VIEW_RES + "_removeConfirm");			
	this._UICreated = true;
	ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
}


/**
* saves the changes in the fields, calls modify or create on the current ZaResource
* @return Boolean - indicates if the changes were succesfully saved
**/
ZaResourceController.prototype._saveChanges  =
function () {
	//check if the XForm has any errors
	if(this._view.getMyForm().hasErrors()) {
		var errItems = this._view.getMyForm().getItemsInErrorState();
		var dlgMsg = ZaMsg.CORRECT_ERRORS;
		dlgMsg +=  "<br><ul>";
		var i = 0;
		for(var key in errItems) {
			if(i > 19) {
				dlgMsg += "<li>...</li>";
				break;
			}
			if(key == "size") continue;
			var label = errItems[key].getInheritedProperty("msgName");
			if(!label && errItems[key].getParentItem()) { //this might be a part of a composite
				label = errItems[key].getParentItem().getInheritedProperty("msgName");
			}
			if(label) {
				if(label.substring(label.length-1,1)==":") {
					label = label.substring(0, label.length-1);
				}
			}			
			if(label) {
				dlgMsg += "<li>";
				dlgMsg +=label;			
				dlgMsg += "</li>";
			}
			i++;
		}
		dlgMsg += "</ul>";
		this.popupMsgDialog(dlgMsg, true);
		return false;
	}
	//check if the data is copmlete 
	var tmpObj = this._view.getObject();
	var newName=null;
	
	//Check the data
	if(tmpObj.attrs == null ) {
		//show error msg
		this._errorDialog.setMessage(ZaMsg.ERROR_UNKNOWN, null, DwtMessageDialog.CRITICAL_STYLE, null);
		this._errorDialog.popup();		
		return false;	
	}
	
	ZaResource.prototype.setLdapAttrsFromSchedulePolicy.call(tmpObj);
	
	//check if need to rename
	if(this._currentObject && tmpObj.name != this._currentObject.name) {
		//var emailRegEx = /^([a-zA-Z0-9_\-])+((\.)?([a-zA-Z0-9_\-])+)*@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
		/*if(!AjxUtil.EMAIL_SHORT_RE.test(tmpObj.name) ) {*/
		if(!AjxUtil.isValidEmailNonReg(tmpObj.name)) {
			//show error msg
			this._errorDialog.setMessage(ZaMsg.ERROR_ACCOUNT_NAME_INVALID, null, DwtMessageDialog.CRITICAL_STYLE, null);
			this._errorDialog.popup();		
			return false;
		}
		newName = tmpObj.name;
	}

	var mods = new Object();
	
	if(!ZaResource.checkValues(tmpObj))
		return false;
		
	if(ZaItem.hasAnyRight([ZaResource.SET_CALRES_PASSWORD_RIGHT, ZaResource.CHANGE_CALRES_PASSWORD_RIGHT],tmpObj)) {
		//change password if new password is provided
		if(tmpObj.attrs[ZaResource.A_password]!=null && tmpObj[ZaResource.A2_confirmPassword]!=null && tmpObj.attrs[ZaResource.A_password].length > 0) {
			try {
				this._currentObject.changePassword(tmpObj.attrs[ZaResource.A_password]);
			} catch (ex) {
				this.popupErrorDialog(ZaMsg.FAILED_SAVE_ACCOUNT, ex);
				return false;				
				
			}
		}
	}
			
	var changeDetails = new Object();
	
	//set the cosId to "" if the autoCos is enabled.
	if (tmpObj[ZaResource.A2_autoCos] == "TRUE") {
		tmpObj.attrs[ZaResource.A_COSId] = "" ;
	}
	
	//check if need to rename
	if(newName) {
		changeDetails["newName"] = newName;
		try {
			this._currentObject.rename(newName);
		} catch (ex) {
			if(ex.code == ZmCsfeException.ACCT_EXISTS) {
				this.popupErrorDialog(ZaMsg.FAILED_RENAME_ACCOUNT_1, ex);
			} else {
				this._handleException(ex, "ZaResourceController.prototype._saveChanges", null, false);	
			} 
			return false;
		}
	}	
	
	//transfer the fields from the tmpObj to the _currentObject
	for (var a in tmpObj.attrs) {
		if(a == ZaResource.A_password || a == ZaItem.A_objectClass ||  a==ZaResource.A_mail
                || a == ZaItem.A_zimbraId || a == ZaItem.A_zimbraACE) {
			continue;
		}	
		if(!ZaItem.hasWritePermission(a,tmpObj)) {
			continue;
		}
		//check if the value has been modified
		if ((this._currentObject.attrs[a] != tmpObj.attrs[a]) && !(this._currentObject.attrs[a] == undefined && tmpObj.attrs[a] === "")) {
			if(a==ZaResource.A_uid) {
				continue; //skip uid, it is changed throw a separate request
			}
			if(a == ZaResource.A_COSId && !AjxUtil.isEmpty(tmpObj.attrs[ZaResource.A_COSId]) && !ZaItem.ID_PATTERN.test(tmpObj.attrs[ZaResource.A_COSId])) {
				this.popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_NO_SUCH_COS,[tmpObj.attrs[ZaResource.A_COSId]]), null);
				return false;
			}
			if(tmpObj.attrs[a] instanceof Array && this._currentObject.attrs[a] instanceof Array) {
				if(tmpObj.attrs[a].join(",").valueOf() !=  this._currentObject.attrs[a].join(",").valueOf()) {
					mods[a] = tmpObj.attrs[a];
				}
			} else {
				mods[a] = tmpObj.attrs[a];
			}				
		}
	}
      if (this._currentObject[ZaModel.currentTab]!= tmpObj[ZaModel.currentTab])
             this._currentObject[ZaModel.currentTab] = tmpObj[ZaModel.currentTab];
	//save changed fields
	try {	
		this._currentObject.modify(mods);
	} catch (ex) {
		if(ex.code == ZmCsfeException.ACCT_EXISTS) {
			this.popupErrorDialog(ZaMsg.FAILED_CREATE_ACCOUNT_1, ex);
		} else if(ex.code == ZmCsfeException.NO_SUCH_COS) {
			this.popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_NO_SUCH_COS,[tmpObj.attrs[ZaResource.A_COSId]]), ex);
        } else {
			this._handleException(ex, "ZaResourceController.prototype._saveChanges", null, false);	
		}
		return false;
	}
    ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.ResourceModified,[this._currentObject.name]));
	return true;
};
}
if (AjxPackage.define("zimbraAdmin.helpdesk.controller.ZaHelpViewController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaHelpViewController 
* @contructor ZaHelpViewController
* @param appCtxt
* @param container
* @param app
* @author Greg Solovyev
**/
ZaHelpViewController = function(appCtxt, container) {

	ZaController.call(this, appCtxt, container, "ZaHelpViewController");
	this.tabConstructor = ZaHelpView;
}

ZaHelpViewController.prototype = new ZaController();
ZaHelpViewController.prototype.constructor = ZaHelpViewController;
ZaController.initToolbarMethods["ZaHelpViewController"] = new Array();


ZaHelpViewController.prototype.show = 
function(openInNewTab) {
    if (!this._contentView) {
		var elements = new Object();
		this._contentView = new this.tabConstructor(this._container);
		elements[ZaAppViewMgr.C_APP_CONTENT] = this._contentView;

        ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements) ;
		this._UICreated = true;
		ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
	}
	ZaApp.getInstance().pushView(this.getContentViewId());
};
}
if (AjxPackage.define("zimbraAdmin.helpdesk.controller.ZaMWizController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaMigrationWizController 
* @contructor ZaMigrationWizController
* @param appCtxt
* @param container
* @param app
* @author Greg Solovyev
**/
ZaMigrationWizController = function(appCtxt, container) {

	ZaController.call(this, appCtxt, container, "ZaMigrationWizController");
	this.tabConstructor = ZaMigrationWizView;	
}

ZaMigrationWizController.prototype = new ZaController();
ZaMigrationWizController.prototype.constructor = ZaMigrationWizController;


ZaMigrationWizController.prototype.show = 
function(openInNewTab) {
    if (!this._contentView) {
		var elements = new Object();
		this._contentView = new this.tabConstructor(this._container);
		elements[ZaAppViewMgr.C_APP_CONTENT] = this._contentView;

        ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements) ;
		this._UICreated = true;
		ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
	}
	//ZaApp.getInstance().pushView(ZaZimbraAdmin._MIGRATION_WIZ_VIEW);
	ZaApp.getInstance().pushView(this.getContentViewId());
	/*
	if (openInNewTab) {//when a ctrl shortcut is pressed
		
	}else{ //open in the main tab
		this.updateMainTab ("MigrationWiz", ZaMsg.Migration_wiz_title) ;	
	}*/
};
}
if (AjxPackage.define("zimbraAdmin.mta.controller.ZaMTAListController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaMTAListController
**/
ZaMTAListController = function(appCtxt, container) {
	ZaController.call(this, appCtxt, container, "ZaMTAListController");
   	this._toolbarOperations = new Array();
   	this._popupOperations = new Array();			
	this.MTAPool = [];
	this._helpURL = ZaUtil.HELP_URL;
	this._helpButtonText = ZaMsg.helpManageMailQueue;
}

ZaMTAListController.prototype = new ZaController();
ZaMTAListController.prototype.constructor = ZaMTAListController;

ZaController.initToolbarMethods["ZaMTAListController"] = new Array();
ZaController.initPopupMenuMethods["ZaMTAListController"] = new Array();
ZaController.changeActionsStateMethods["ZaMTAListController"] = new Array(); 

ZaMTAListController.prototype.show = 
function(list, openInNewTab) {

    if (!this._UICreated) {
		this._createUI();
	} 	

	if (list != null) {
		this._contentView.set(list.getVector());
		//start loading queue info
		this.MTAPool = [];
		var tmpList = list.getArray();
		var numMTAs = tmpList.length;

		for(var ix = 0; ix < numMTAs; ix++) {
			this.MTAPool.push(tmpList[ix]);
		}
		
		var i=0;
		var tmp = [];
		var cnt = numMTAs > 5 ? 5 : numMTAs;
		for(i = 0; i < cnt; i++) {
			tmp[i] = this.MTAPool.shift();
		}
		ZaMTA._quecountsArr = new Array();
		for(i = cnt-1; i >= 0; i--) {
			tmp[i].load("id",tmp[i].id,false,true);
		}
	}	
	//ZaApp.getInstance().pushView(ZaZimbraAdmin._POSTQ_VIEW);			
	ZaApp.getInstance().pushView(this.getContentViewId());
	this._removeList = new Array();
	if (list != null)
		this._list = list;
		
	this.changeActionsState();		
	/*
	if (openInNewTab) {//when a ctrl shortcut is pressed
		
	}else{ //open in the main tab
		this.updateMainTab ("Queue") ;	
	}*/
}

ZaMTAListController.initPopupMenuMethod =
function () {
    this._popupOperations[ZaOperation.VIEW]=new ZaOperation(ZaOperation.VIEW,ZaMsg.TBB_View, ZaMsg.PQTBB_View_tt, "Properties", "PropertiesDis", new AjxListener(this, ZaMTAListController.prototype._viewButtonListener));
}
ZaController.initPopupMenuMethods["ZaMTAListController"].push(ZaMTAListController.initPopupMenuMethod);

ZaMTAListController.prototype._createUI = function () {
	try {
		var elements = new Object();
		this._contentView = new ZaMTAListView(this._container);

		this._initPopupMenu();
		this._actionMenu =  new ZaPopupMenu(this._contentView, "ActionMenu", null, this._popupOperations, ZaId.VIEW_MTALIST, ZaId.MENU_POP);

		elements[ZaAppViewMgr.C_APP_CONTENT] = this._contentView;
        ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
		this._contentView.addSelectionListener(new AjxListener(this, this._listSelectionListener));
		this._contentView.addActionListener(new AjxListener(this, this._listActionListener));			
		this._removeConfirmMessageDialog = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON],null,ZaId.CTR_PREFIX + ZaId.VIEW_MTALIST + "_removeConfirm");					
		
		this._UICreated = true;
		ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
	} catch (ex) {
		this._handleException(ex, "ZaMTAListController.prototype._createUI", null, false);
		return;
	}	
}

/**
* @return ZaItemList - the list currently displaid in the list view
**/
ZaMTAListController.prototype.getList = 
function() {
	return this._list;
}

/*
ZaMTAListController.prototype.refresh = 
function() {
	try {
		this._contentView.set(ZaApp.getInstance().getServerList(true).getVector());
	} catch (ex) {
		this._handleException(ex, ZaMTAListController.prototype.refresh, null, false);
	}
}
*/

ZaMTAListController.prototype.set = 
function(serverList) {
	this.show(serverList);
}

/**
* This listener is called when the item in the list is double clicked. It call ZaMTAController.show method
* in order to display the MailQ View
**/
ZaMTAListController.prototype._listSelectionListener =
function(ev) {
	if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		if(ev.item) {
			this._selectedItem = ev.item;
			ZaApp.getInstance().getMTAController().show(ev.item);
		}
	} else {
		this.changeActionsState();	
	}
}

ZaMTAListController.prototype._listActionListener =
function (ev) {
	this.changeActionsState();
	this._actionMenu.popup(0, ev.docX, ev.docY);
}
/**
* This listener is called when the Edit button is clicked. 
* It call ZaMTAController.show method
* in order to display the MailQ View
**/
ZaMTAListController.prototype._viewButtonListener =
function(ev) {
	if(this._contentView.getSelectionCount() == 1) {
		var item = this._contentView.getSelection()[0];
		ZaApp.getInstance().getMTAController().show(item);
	}
}


ZaMTAListController.changeActionsState = 
function () {
	var cnt = this._contentView.getSelectionCount();
	if (cnt != 1){
		if(this._popupOperations[ZaOperation.EDIT])
			this._popupOperations[ZaOperation.EDIT].enabled=false;			
	}
}
ZaController.changeActionsStateMethods["ZaMTAListController"].push(ZaMTAListController.changeActionsStateMethod);
/**
* @param ev
* This listener is invoked by ZaMTAController or any other controller that can change a ZaMTA object
**/
ZaMTAListController.prototype.handleMTAChange = 
function (ev) {
	//if any of the data that is currently visible has changed - update the view
	if(ev && this._contentView) {
		if(ev.getDetail("obj")) {
			this._contentView.setUI();
			//check if we have any MTAs in the queue waiting to be loaded
			if(this.MTAPool.length) {
				var mta = this.MTAPool.shift();
				mta.load();
			}
		}
	}
}

/**
* Asynchronously calls ZaItem.load {@link ZaItem#load}
**/
ZaMTAListController.prototype.getQCounts = function () {
	this.MTAPool = [];
	var tmpList = this._list.getArray();
	var numMTAs = tmpList.length;
	for(var ix = 0; ix < numMTAs; ix++) {
		this.MTAPool.push(tmpList[ix]);
	}
	var cnt = numMTAs > 5 ? 5 : numMTAs;
	var i=0;
	var tmp = [];
	for(i = 0; i < cnt; i++) {
		tmp[i] = this.MTAPool.shift();
	}
	ZaMTA._quecountsArr = new Array();
	for(i = cnt-1; i >= 0; i--) {
		tmp[i].load();
	}
}

ZaMTAListController.prototype.refreshListener = 
function () {
	this.getQCounts();
}
}
if (AjxPackage.define("zimbraAdmin.mta.controller.ZaMTAController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaMTAController controls display of a single Server's Postfix Queue
* @contructor ZaMTAController
* @param appCtxt
* @param container
* @param abApp
* @author Greg Solovyev
**/

ZaMTAController = function(appCtxt, container) {
	ZaXFormViewController.call(this, appCtxt, container,"ZaMTAController");
	this._UICreated = false;
	this._helpURL = ZaUtil.HELP_URL;
	this._helpButtonText = ZaMsg.helpManageMailQueue;
	this._toolbarOperations = new Array();
    this._popupOperations = new Array();
	this.objType = ZaEvent.S_MTA;	
	this.tabConstructor = ZaMTAXFormView;	
}

ZaMTAController.prototype = new ZaXFormViewController();
ZaMTAController.prototype.constructor = ZaMTAController;

ZaController.initToolbarMethods["ZaMTAController"] = new Array();
ZaController.initPopupMenuMethods["ZaMTAController"] = new Array();
ZaController.setViewMethods["ZaMTAController"] = new Array();
ZaController.changeActionsStateMethods["ZaMTAController"] = new Array();
/**
*	@method show
*	@param entry - isntance of ZaServer class
*/
ZaMTAController.prototype.show = 
function(entry) {
	if (! this.selectExistingTabByItemId(entry.id)){
		this._setView(entry, true);
		this.setDirty(false);
	}
}

/**
*	@method setViewMethod 
*	@param entry - isntance of ZaDomain class
*/
ZaMTAController.setViewMethod =
function(entry) {
	entry.load();
	if(!this._UICreated) {
		this._createUI();
	} 
	//ZaApp.getInstance().pushView(ZaZimbraAdmin._POSTQ_BY_SERVER_VIEW);
	ZaApp.getInstance().pushView(this.getContentViewId());
	this._view.setDirty(false);
	this._view.setObject(entry); 	//setObject is delayed to be called after pushView in order to avoid jumping of the view	
	this._currentObject = entry;
}
ZaController.setViewMethods["ZaMTAController"].push(ZaMTAController.setViewMethod);

ZaMTAController.initPopupMenuMethod =
function () {
	this._popupOperations[ZaOperation.FLUSH]=new ZaOperation(ZaOperation.FLUSH,ZaMsg.TBB_FlushQs, ZaMsg.TBB_TBB_FlushQs_tt, "FlushAllQueues", "FlushAllQueues", new AjxListener(this, this.flushListener));
}
ZaController.initPopupMenuMethods["ZaMTAController"].push(ZaMTAController.initPopupMenuMethod);
/**
* @method _createUI
**/
ZaMTAController.prototype._createUI =
function () {
	this._contentView = this._view = new this.tabConstructor(this._container);


    this._initPopupMenu();
	var elements = new Object();
	elements[ZaAppViewMgr.C_APP_CONTENT] = this._view;
    ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
	this._UICreated = true;
	ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
}


ZaMTAController.prototype.flushListener = function () {
	//ZaApp.getInstance().dialogs["confirmMessageDialog"] = ZaApp.getInstance().dialogs["confirmMessageDialog"] = new ZaMsgDialog(this._view.shell, null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON]);					
	ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(ZaMsg.Q_FLUSH_QUEUES,  DwtMessageDialog.WARNING_STYLE);
	ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, this.flushQueues, this);		
	ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.NO_BUTTON, this.closeCnfrmDlg, this, null);				
	ZaApp.getInstance().dialogs["confirmMessageDialog"].popup();
}

ZaMTAController.prototype.flushQueues = function () {
	try {
		this._currentObject.flushQueues();
	} catch (ex) {
		this._handleException(ex, "ZaMTAController.prototype.flushQueues");
	}
	this.closeCnfrmDlg();
}

/**
* @param ev
* This listener is invoked by ZaMTAController or any other controller that can change a ZaMTA object
**/
ZaMTAController.prototype.handleMTAChange =
function (ev) {
    if(ev && this._view && (this._view.__internalId==ZaApp.getInstance().getAppViewMgr().getCurrentView())) {
        if(ev.getDetail("obj") && (ev.getDetail("obj") instanceof ZaMTA) ) {
            if(this._currentObject && this._currentObject[ZaItem.A_zimbraId] == ev.getDetail("obj")[ZaItem.A_zimbraId]) {
                this._currentObject = ev.getDetail("obj");
                var qName = ev.getDetail("qName");

                if(qName && ev.getDetail("poll")) {
                        var pageNum = 0;
                        if(ev.getDetail("offset") != undefined) {
                                if(ev.getDetail("offset") > 0)
                                        pageNum = ev.getDetail("offset")/ZaMTA.RESULTSPERPAGE;

                        }
                        this._currentObject[qName][ZaMTA.A_pageNum] = pageNum;
                        if(this._currentObject[qName][ZaMTA.A_Status]==ZaMTA.STATUS_SCANNING) {
                                var ta = new AjxTimedAction(this._currentObject, ZaMTA.prototype.getMailQStatus, qName, ev.getDetail("query"),ev.getDetail("offset"),ev.getDetail("limit"),ev.getDetail("force"));
                                AjxTimedAction.scheduleAction(ta, ZaMTA.POLL_INTERVAL);
                        }
                }
                this._view.setObject(this._currentObject);
            }
        }
    }
}
}
if (AjxPackage.define("zimbraAdmin.search.controller.ZaSearchListController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaSearchListController This is a singleton class that controls all the user interaction with the list of ZaAccount objects
* @param appCtxt
* @param container
* @param app
* @extends ZaController
* @author Greg Solovyev
**/
ZaSearchListController = function(appCtxt, container) {
	ZaListViewController.call(this, appCtxt, container,"ZaSearchListController");
    //Account operations
	this._toolbarOperations = new Array();
	this._popupOperations = new Array();
	this._popupOperationsOnAppBar = new Array();

	this._currentPageNum = 1;
	this._currentQuery = null;
	this._currentDomain = null;
	this._currentSortField = ZaAccount.A_uid;
	this._currentSortOrder = "1";
	this.searchTypes = [ZaSearch.ALIASES,ZaSearch.DLS,ZaSearch.ACCOUNTS, ZaSearch.RESOURCES, ZaSearch.DOMAINS, ZaSearch.COSES];
	this.pages = new Object();
	this._searchPanel = null;
	this._searchField = null;
	this._helpURL = ZaSearchListController.helpURL;
	this._helpButtonText = ZaMsg.helpManageAccounts;
	this._UICreated = false;
    this._readFromQuery = false;
	this._isAdvancedSearch = false ;
	this._searchFieldInput = null ; //the input of the search field for basic search, it is also be used as the tab title
	this.objType = ZaEvent.S_ACCOUNT;	
	this.fetchAttrs = ZaSearch.standardAttributes;
    this.searchResultFilter = [ZaAccount.A_accountStatus];  // for Alias currently
    this._filterObj = null;
}

ZaSearchListController.prototype = new ZaListViewController();
ZaSearchListController.prototype.constructor = ZaSearchListController;
ZaSearchListController.helpURL = ZaUtil.HELP_URL;

ZaController.initToolbarMethods["ZaSearchListController"] = new Array();
ZaController.initPopupMenuMethods["ZaSearchListController"] = new Array();
ZaController.changeActionsStateMethods["ZaSearchListController"] = new Array();
ZaSearchListController.prototype.show = function (doPush) {
	var busyId = Dwt.getNextId();
	var callback = new AjxCallback(this, this.searchCallback, {limit:this.RESULTSPERPAGE,CONS:null,show:doPush, busyId:busyId, resultFilter:this._filterObj});
	/*
	if (this._currentQuery == null) {
		this._currentQuery =  (ZaSearch._currentQuery ? ZaSearch._currentQuery : "");
	}*/
	var searchParams = {
			query: this._currentQuery, 
			types:this.searchTypes,
			sortBy:this._currentSortField,
			offset:this.RESULTSPERPAGE*(this._currentPageNum-1),
			sortAscending:this._currentSortOrder,
			limit:this.RESULTSPERPAGE,
			attrs:this.fetchAttrs,
			callback:callback,
			controller: this,
			showBusy:true,
			busyId:busyId,
			busyMsg:ZaMsg.BUSY_SEARCHING,
			skipCallbackIfCancelled:false
	}
	var searchQueryList = new Array();
	var isAliasSpec = false;
	for(var i = 0; this.searchTypes && i < this.searchTypes.length; i++) {
		if(this.searchTypes[i] == ZaSearch.ALIASES)
			isAliasSpec = true;
	}
	if(isAliasSpec && !this._currentDomain) {
		searchQueryList.push(searchParams);
		var keyword = ZaSearchListController._getSearchKeyWord(this._currentQuery);
		ZaSearchListController.searchAliasDomain(keyword,this,searchQueryList);
	}else {
		if(this._currentDomain) searchParams.domain = this._currentDomain;
		ZaSearch.searchDirectory(searchParams);
	}

}

ZaSearchListController.version = 1;
ZaSearchListController.prototype._show = 
function (list, openInNewTab, openInSearchTab,hasmore,isShowBubble) {
	this._updateUI(list, openInNewTab, openInSearchTab,hasmore);
	//ZaApp.getInstance().pushView(ZaZimbraAdmin._SEARCH_LIST_VIEW);
    ZaApp.getInstance().pushView(this.getContentViewId());
    if(isShowBubble) {
        this._uiContainer.setQueryFieldVisible(true);
    }else{
       //this._uiContainer.removeAllBubbles(true);
        this._uiContainer.setQueryFieldVisible(false);
    }

    var currentQueryValue = this._uiContainer.getQueryFormBubbles();
    currentQueryValue = currentQueryValue ? currentQueryValue: "";
    this._uiContainer.setQueryField(currentQueryValue);
}



/**
* searh panel
*/	
ZaSearchListController.prototype.getSearchPanel = 
function () {
	if(!this._searchPanel) {
	    this._searchPanel = new DwtComposite(ZaApp.getInstance().getAppCtxt().getShell(), "SearchPanel", DwtControl.ABSOLUTE_STYLE, null, ZaId.getOverviewId(ZaId.PANEL_APPSEARCH));
	    
		// Create search toolbar and setup browse tool bar button handlers
		this._searchToolBar = new ZaSearchToolBar(this._searchPanel, null, ZaId.PANEL_APPSEARCH);
	    
		// Setup search field handler
		this._searchField = this._searchToolBar.getSearchField();
		this._searchField.registerCallback(ZaSearchListController.prototype._searchFieldCallback, this);	
		this._searchPanel.zShow(true);		
	}
	return this._searchPanel;
}

ZaSearchListController.prototype.set = 
function(accountList) {
	this.show(accountList);
}

ZaSearchListController.prototype.setPageNum = 
function (pgnum) {
	this._currentPageNum = Number(pgnum);
}

ZaSearchListController.prototype.getPageNum = 
function () {
	return this._currentPageNum;
}

ZaSearchListController.prototype.getTotalPages = 
function () {
	return this.numPages;
}

ZaSearchListController.prototype.setFetchAttrs = 
function (fetchAttrs) {
	this.fetchAttrs = fetchAttrs;
}

ZaSearchListController.prototype.getFetchAttrs = 
function () {
	return this.fetchAttrs;
}

ZaSearchListController.prototype.setQuery = 
function (query) {
	this._currentQuery = query;
}

ZaSearchListController.prototype.getQuery = 
function () {
	return this._currentQuery;
}

ZaSearchListController.prototype.setSearchTypes = 
function (searchTypes) {
	this.searchTypes = searchTypes;
}

ZaSearchListController.prototype.getSearchTypes = 
function () {
	return this.searchTypes;
}

ZaSearchListController.prototype.setSortOrder = 
function (sortOrder) {
	this._currentSortOrder = sortOrder;
}

ZaSearchListController.prototype.getSortOrder = 
function () {
	return this._currentSortOrder;
}

ZaSearchListController.prototype.setSortField = 
function (sortField) {
	this._currentSortField = sortField;
}

ZaSearchListController.prototype.getSortField = 
function () {
	return this._currentSortField;
}

ZaSearchListController.prototype._batchSearchforDomain =
function (domainArr, searchQueryList, childQueries, isShowBubble) {
	var paramsArr;
    var searchTypes = ZaSearch.ALIASES;
    var searchQuery = "(uid=*";
    if(!childQueries) searchQuery += ")";
    else if(childQueries && !(childQueries instanceof Array)) searchQuery += childQueries + "*)";
    else if(childQueries instanceof Array && childQueries.length == 1) searchQuery += childQueries[0] + "*)";
    else if(childQueries instanceof Array && childQueries.length > 1)  searchQuery += childQueries[1] + ")";

    var controller = ZaApp.getInstance().getSearchListController();

	if(searchQueryList && searchQueryList instanceof Array)
		paramsArr = searchQueryList;
	else paramsArr = new Array();
        var busyId = Dwt.getNextId();
	var inParams = {limit:controller.RESULTSPERPAGE,show:true, openInSearchTab: true,busyId:busyId, isShowBubble:isShowBubble};
        var callback = new AjxCallback(controller, controller.searchCallback, inParams);
	for(var i =0; i < domainArr.length; i++) {
	        var searchParams = {
        	                query:searchQuery,
                	        types:searchTypes,
	                        showBusy:true,
        	                busyId:busyId,
	                        busyMsg:ZaMsg.BUSY_SEARCHING,
        	                skipCallbackIfCancelled:false,
	                        sortBy:controller._currentSortField,
        	                attrs:ZaSearch.standardAttributes,
                	        callback:callback,
	                        controller: controller,
        	                domain: domainArr[i]
	        }
		paramsArr.push(searchParams);
	}
	controller.multipleSearchCallback(inParams, paramsArr);

}


ZaSearchListController.searchAliasDomainCallback = 
function(params,resp) {

        if(params.busyId)
                        ZaApp.getInstance().getAppCtxt().getShell().setBusy(false, params.busyId);
        try {
                if(!resp) {
                        throw(new AjxException(ZaMsg.ERROR_EMPTY_RESPONSE_ARG, AjxException.UNKNOWN, "ZaSearchListController.searchAliasDomainCallback"));
                }
                if(resp.isException()) {
                        throw(resp.getException());
                } else {
                        var response = resp.getResponse().Body.SearchDirectoryResponse;
			var domainArr = new Array(); 
                        if (response.domain && response.domain.length > 0) {
                                for (var i =0; i < response.domain.length; i ++) {
                                       var domain = response.domain[i].name ;
						domainArr.push(domain);
                                }
				
                        }
			ZaSearchListController.prototype._batchSearchforDomain(domainArr,params.searchQueryList, params.childQueries, params.isShowBubble);
                }
        } catch (ex) {
		this._handleException(ex, "ZaSearchListController.searchAliasDomainCallback", null, false); 
	}

}

ZaSearchListController.searchAliasDomain =
function (value, searchCtl,searchQueryList,isShowBubble) {
        var busyId = Dwt.getNextId();
        var controller = searchCtl? searchCtl:this;

        var query = "(" + ZaDomain.A_domainName;
        if(value.length > 0) query += "=" + value[0] + "*)";
        else query = "";

        var callback = new AjxCallback(controller, ZaSearchListController.searchAliasDomainCallback,
            {busyId:busyId, searchQueryList:searchQueryList, childQueries:value, isShowBubble:isShowBubble});
        var searchParams = {

                        query: query,
                        types: [ZaSearch.DOMAINS],
                        sortBy: ZaDomain.A_domainName,
                        attrs: [ZaDomain.A_domainName],
                        callback:callback,
                        controller: controller, 
                        showBusy:true,
                        busyId:busyId,
                        busyMsg:ZaMsg.BUSY_SEARCHING_DOMAINS,
			skipCallbackIfCancelled:false
        }
        ZaSearch.searchDirectory(searchParams);

}

ZaSearchListController._getSearchKeyWord =
function(query) {
	var keyword = "";
	var sw = "zimbraDomainName=*";
        var domflag = "@";
	var ew = "*";
	if(!query) return keyword;
	var start = query.indexOf(sw);
	if(start < 0 || start > query.length-1)
	    return [];
	var end = query.indexOf(ew,start+sw.length);
	if(end > query.length-1)
	    return [];
	keyword = query.substr(start+sw.length,end-start-sw.length);
        // handle the case of "str@str"
        start = keyword.indexOf(domflag);
	if(start < 0 || start > query.length-1)
	    return [keyword];
	return [keyword.substr(start+1,keyword.length),keyword.substr(0,start)];
}

/*********** Search Field Callback */
ZaSearchListController.prototype._searchFieldCallback =
function(params) {
	var searchQueryList = new Array();
	if(this.setSearchTypes)
		this.setSearchTypes(params.types);

	this._currentQuery = params.query;
	this._currentSortField = params.sortBy;
	var busyId = Dwt.getNextId();	
	var callback = new AjxCallback(this, this.searchCallback, {limit:this.RESULTSPERPAGE,show:true, openInSearchTab: true,busyId:busyId, resultFilter:this._filterObj, isShowBubble:params.isShowBubble});
        var postCallback = new AjxCallback(this, this.updateSearchTree);
        var searchParams = {
                        query:this._currentQuery,//params.query,
                        types:params.types,
                        showBusy:true,
                        busyId:busyId,
                        busyMsg:ZaMsg.BUSY_SEARCHING,
                        skipCallbackIfCancelled:false,
                        sortBy:params.sortBy,
                        offset:this.RESULTSPERPAGE*(this._currentPageNum-1),
                        sortAscending:this._currentSortOrder,
                        limit:this.RESULTSPERPAGE,
                        attrs:ZaSearch.standardAttributes,
                        callback:callback,
                        controller:this
        }

	var isAliasSpec = false;
	for(var i = 0; params.types && i < params.types.length; i++) {
		if(params.types[i] == ZaSearch.ALIASES)
			isAliasSpec = true;
	}

	if(isAliasSpec) {
          this.scrollSearchParams={
                        query:this._currentQuery,//params.query,
                        types:params.types,
                        showBusy:true,
                        busyId:busyId,
                        busyMsg:ZaMsg.BUSY_SEARCHING,
                        skipCallbackIfCancelled:false,
                        sortBy:params.sortBy,
                        sortAscending:this._currentSortOrder,
                        attrs:ZaSearch.standardAttributes,
                        controller:this,
                        scrollType:"isAliasSearch",
                        postCallback: postCallback
         }
		searchQueryList.push(searchParams);
		var keyword = ZaSearchListController._getSearchKeyWord(params.query);
		ZaSearchListController.searchAliasDomain(keyword,this,searchQueryList, params.isShowBubble);
	}else {
        this.scrollSearchParams={
                        query:this._currentQuery,//params.query,
                        types:params.types,
                        showBusy:true,
                        busyId:busyId,
                        busyMsg:ZaMsg.BUSY_SEARCHING,
                        skipCallbackIfCancelled:false,
                        sortBy:params.sortBy,
                        sortAscending:this._currentSortOrder,
                        attrs:ZaSearch.standardAttributes,
                        controller:this,
                        postCallback: postCallback
        }
		ZaSearch.searchDirectory(searchParams);
    }
}


ZaSearchListController.initPopupMenuMethod = function () {
    this._popupOperations[ZaOperation.EDIT] = new ZaOperation(
        ZaOperation.EDIT,
        ZaMsg.TBB_Edit,
        ZaMsg.ACTBB_Edit_tt,
        "Edit",
        "EditDis",
        new AjxListener(
            this,
            ZaSearchListController.prototype._editButtonListener
        )
    );

    this._popupOperations[ZaOperation.DELETE] = new ZaOperation(
        ZaOperation.DELETE,
        ZaMsg.TBB_Delete,
        ZaMsg.ACTBB_Delete_tt,
        "Delete",
        "DeleteDis",
        new AjxListener(
            this,
            ZaSearchListController.prototype._deleteButtonListener
        )
    );

    this._popupOperations[ZaOperation.CHNG_PWD] = new ZaOperation(
        ZaOperation.CHNG_PWD,
        ZaMsg.ACTBB_ChngPwd,
        ZaMsg.ACTBB_ChngPwd_tt,
        "Padlock",
        "PadlockDis",
        new AjxListener(
            this,
            ZaAccountListController.prototype._chngPwdListener
        )
    );

    this._popupOperations[ZaOperation.EXPIRE_SESSION] = new ZaOperation(
        ZaOperation.EXPIRE_SESSION,
        ZaMsg.ACTBB_ExpireSessions,
        ZaMsg.ACTBB_ExpireSessions_tt,
        "ExpireSession",
        "ExpireSessionDis",
        new AjxListener(
            this,
            ZaAccountListController.prototype._expireSessionListener
        )
    );

    this._popupOperations[ZaOperation.MOVE_ALIAS] = new ZaOperation(
        ZaOperation.MOVE_ALIAS,
        ZaMsg.ACTBB_MoveAlias,
        ZaMsg.ACTBB_MoveAlias_tt,
        "MoveAlias",
        "MoveAlias",
        new AjxListener(
            this,
            ZaAccountListController.prototype._moveAliasListener
        )
    );

}
ZaController.initPopupMenuMethods["ZaSearchListController"].push(ZaSearchListController.initPopupMenuMethod);

ZaSearchListController.prototype.reset =
function () {
    this._currentPageNum = 1;
	this._currentQuery = null;
	this._currentSortField = ZaAccount.A_uid;
	this._currentSortOrder = "1";
	this.pages = new Object();
	this.objType = ZaEvent.S_ACCOUNT;	
}

//private and protected methods
ZaSearchListController.prototype._createUI = 
function () {
	//create accounts list view
	// create the menu operations/listeners first
    this._uiContainer =  new ZaSearchXFormView(this._container)
    this._contentView = this._uiContainer.widget;
	ZaApp.getInstance()._controllers[this.getContentViewId ()] = this ;
	this._newDLListener = new AjxListener(this, ZaSearchListController.prototype._newDistributionListListener);
	this._newAcctListener = new AjxListener(this, ZaSearchListController.prototype._newAccountListener);
	this._newResListener = new AjxListener(this, ZaSearchListController.prototype._newResourceListener);

	//add the acount number counts
		
	var elements = new Object();

    elements[ZaAppViewMgr.C_APP_CONTENT] = this._uiContainer;
    ZaApp.getInstance().getAppViewMgr().createView(this.getContentViewId(), elements);
    this._initPopupMenu();
    this._actionMenu =  new ZaPopupMenu(this._contentView, "ActionMenu", null, this._popupOperations, ZaId.VIEW_SCHLIST, ZaId.MENU_POP);
    this._initPopupMenuAtAppBar();

    //set a selection listener on the account list view
    this._contentView.addSelectionListener(new AjxListener(this, this._listSelectionListener));
    this._contentView.addActionListener(new AjxListener(this, this._listActionListener));

	this._removeConfirmMessageDialog = ZaApp.getInstance().dialogs["ConfirmMessageDialog"] = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON],null,ZaId.CTR_PREFIX + ZaId.VIEW_SCHLIST + "_ConfirmMessage");			
	this._UICreated = true;

}

ZaSearchListController.prototype.closeButtonListener =
function(ev, noPopView, func, obj, params) {
	if (noPopView) {
		func.call(obj, params) ;
	}else{
		ZaApp.getInstance().popView () ;
	}
	
	//reset the search text when the search list view/tab is closed
	if(this._searchField) {
		var searchFieldXForm = this._searchField._localXForm ;
		var searchFieldItem = searchFieldXForm.getItemsById(ZaSearch.A_query)[0];
		searchFieldItem.getElement().value = "" ;
	}
}

// new account button was pressed
ZaSearchListController.prototype._newAccountListener =
function(ev) {

	try {
		var newAccount = new ZaAccount();
		if(!ZaApp.getInstance().dialogs["newAccountWizard"])
			ZaApp.getInstance().dialogs["newAccountWizard"] = new ZaNewAccountXWizard(this._container);	

		ZaApp.getInstance().dialogs["newAccountWizard"].setObject(newAccount);
		ZaApp.getInstance().dialogs["newAccountWizard"].popup();
	} catch (ex) {
		this._handleException(ex, "ZaSearchListController.prototype._newAccountListener", null, false);
	}
}

ZaSearchListController.prototype._newDistributionListListener =
function(ev) {
	try {
		var newDL = new ZaDistributionList();
		ZaApp.getInstance().getDistributionListController().show(newDL);
	} catch (ex) {
		this._handleException(ex, "ZaSearchListController.prototype._newDistributionListListener", null, false);
	}

};

ZaSearchListController.prototype._newResourceListener =
function(ev) {
	try {
		var newResource = new ZaResource();
		if(!ZaApp.getInstance().dialogs["newResourceWizard"])
			ZaApp.getInstance().dialogs["newResourceWizard"] = new ZaNewResourceXWizard(this._container);	

		ZaApp.getInstance().dialogs["newResourceWizard"].setObject(newResource);
		ZaApp.getInstance().dialogs["newResourceWizard"].popup();
	} catch (ex) {
		this._handleException(ex, "ZaSearchListController.prototype._newResourceListener", null, false);
	}
}


/**
* This listener is called when the item in the list is double clicked. It call ZaAccountViewController.show method
* in order to display the Account View
**/
ZaSearchListController.prototype._listSelectionListener =
function(ev) {
	if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		if(ev.item) {
			this._editItem(ev.item);
		}
	} else {
		this.changeActionsState();
	}
}

ZaSearchListController.prototype._listActionListener =
function (ev) {
	this.changeActionsState();
	this._actionMenu.popup(0, ev.docX, ev.docY);
}

/**
* This listener is called when the Edit button is clicked. 
* It call ZaAccountViewController.show method
* in order to display the Account View
**/
ZaSearchListController.prototype._editButtonListener =
function(ev) {
	if(this._contentView.getSelectionCount() == 1) {
		var item = this._contentView.getSelection()[0];
		this._editItem(item);
	}
}

/**
* This listener is called when the Delete button is clicked. 
* It call ZaAccountViewController.show method
* in order to display the Account View
**/
ZaSearchListController.prototype._deleteButtonListener =
function(ev) {
	ZaAccountListController.prototype._deleteButtonListener.call(this, ev);
}

ZaSearchListController.prototype._deleteAccountsInRemoveList =
function (ev) {
	ZaAccountListController.prototype._deleteAccountsInRemoveList.call (this, ev) ;
}

ZaSearchListController.prototype._editItem = function (item) {
	var type = item.type;
	if (type == ZaItem.ACCOUNT) {
		ZaApp.getInstance().getAccountViewController().show(item);
	} else if (type == ZaItem.DL) {
		ZaApp.getInstance().getDistributionListController().show(item);
	} else if(type == ZaItem.ALIAS) {
		var targetObj = item.getAliasTargetObj() ;
		
		if (item.attrs[ZaAlias.A_targetType] == ZaAlias.TARGET_TYPE_ACCOUNT) {			
			ZaApp.getInstance().getAccountViewController().show(targetObj, true);
		}else if (item.attrs[ZaAlias.A_targetType] == ZaAlias.TARGET_TYPE_DL){
			ZaApp.getInstance().getDistributionListController().show(targetObj, true);
		}
	} else if (type == ZaItem.RESOURCE ){
		ZaApp.getInstance().getResourceController().show(item);
	} else if (type==ZaItem.DOMAIN) {
        if (item.attrs[ZaDomain.A_domainType] == ZaDomain.domainTypes.local) {
            ZaApp.getInstance().getDomainController().show(item);
        } else if (item.attrs[ZaDomain.A_domainType] == ZaDomain.domainTypes.alias) {
            ZaApp.getInstance().getDomainAliasWizard(true).editDomainAlias (item, true);
        }
	}else if (type==ZaItem.COS) {
                ZaApp.getInstance().getCosController().show(item);
    }
    ZaZimbraAdmin.getInstance().getOverviewPanelController().addAccountItem(item);

};


ZaSearchListController.changeActionsStateMethod = function () {

    var cnt = this._contentView.getSelectionCount();
    if (cnt == 1) {
        var item = this._contentView.getSelection()[0];
        if (item) {
            if (item.type != ZaItem.ALIAS) {
                if (this._popupOperations[ZaOperation.MOVE_ALIAS]) {
                    this._popupOperations[ZaOperation.MOVE_ALIAS].enabled = false;
                }
            }

            if (item.type == ZaItem.ALIAS || item.type == ZaItem.DL) {
                if(this._popupOperations[ZaOperation.CHNG_PWD]) {
                    this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
                }
            }

            if ((
                    (item.type == ZaItem.ALIAS) &&
                    (item.attrs[ZaAlias.A_targetType] == ZaItem.DL)
                ) ||
                (item.type == ZaItem.DL)) {

                if (this._popupOperations[ZaOperation.EXPIRE_SESSION]) {
                    this._popupOperations[ZaOperation.EXPIRE_SESSION].enabled = false;
                }

            } else if (item.type == ZaItem.DL) {

                if(this._popupOperations[ZaOperation.MOVE_ALIAS])	{
                    this._popupOperations[ZaOperation.MOVE_ALIAS].enabled = false;
                }

            } else if (item.type == ZaItem.ACCOUNT) {

                var enable = false;

                if (ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE') {
                    enable = true;
                } else if (AjxUtil.isEmpty(item.rights)) {
                    item.loadEffectiveRights("id", item.id, false);
                }

                if (!enable) {
                    if (!ZaItem.hasRight(ZaAccount.DELETE_ACCOUNT_RIGHT, item)) {
                        if (this._popupOperations[ZaOperation.DELETE]) {
                            this._popupOperations[ZaOperation.DELETE].enabled = false;
                        }
                    }

                    if (!ZaItem.hasAnyRight([ZaAccount.SET_PASSWORD_RIGHT, ZaAccount.CHANGE_PASSWORD_RIGHT], item)) {
                        if (this._popupOperations[ZaOperation.CHNG_PWD]) {
                            this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
                        }
                    }

                    if (!ZaItem.hasWritePermission(ZaAccount.A_zimbraAuthTokenValidityValue, item)) {
                        if(this._popupOperations[ZaOperation.EXPIRE_SESSION]) {
                            this._popupOperations[ZaOperation.EXPIRE_SESSION].enabled = false;
                        }
                    }
                }

            } else if ((item.type == ZaItem.ALIAS) && (item.attrs[ZaAlias.A_targetType] == ZaItem.ACCOUNT))  {

                if (!item.targetObj) {
                    item.targetObj = item.getAliasTargetObj() ;
                }

                var enable = false;

                if (ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE') {
                    enable = true;
                } else if (AjxUtil.isEmpty(item.targetObj.rights)) {
                    item.targetObj.loadEffectiveRights("id", item.id, false);
                }

                if (!enable) {
                    if (!ZaItem.hasRight(ZaAccount.DELETE_ACCOUNT_RIGHT,item.targetObj)) {
                        if (this._popupOperations[ZaOperation.DELETE]) {
                            this._popupOperations[ZaOperation.DELETE].enabled = false;
                        }
                    }

                    if (!ZaItem.hasAnyRight([ZaAccount.SET_PASSWORD_RIGHT, ZaAccount.CHANGE_PASSWORD_RIGHT], item.targetObj)) {
                        if(this._popupOperations[ZaOperation.CHNG_PWD]) {
                            this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
                        }
                    }

                    if (!ZaItem.hasWritePermission(ZaAccount.A_zimbraAuthTokenValidityValue,item.targetObj)) {
                        if(this._popupOperations[ZaOperation.EXPIRE_SESSION]) {
                            this._popupOperations[ZaOperation.EXPIRE_SESSION].enabled = false;
                        }
                    }
                }

            } else if ((item.type == ZaItem.ALIAS) && (item.attrs[ZaAlias.A_targetType] == ZaItem.RESOURCE)) {

                if (!item.targetObj) {
                    item.targetObj = item.getAliasTargetObj() ;
                }

                var enable = false;

                if (ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE') {
                    enable = true;
                } else if (AjxUtil.isEmpty(item.targetObj.rights)) {
                    item.targetObj.loadEffectiveRights("id", item.id, false);
                }

                if (!enable) {
                    if (!ZaItem.hasRight(ZaResource.DELETE_CALRES_RIGHT,item.targetObj)) {
                        if(this._popupOperations[ZaOperation.DELETE]) {
                            this._popupOperations[ZaOperation.DELETE].enabled = false;
                        }
                    }

                    if (!ZaItem.hasRight(ZaResource.SET_CALRES_PASSWORD_RIGHT, item.targetObj)) {
                        if(this._popupOperations[ZaOperation.CHNG_PWD]) {
                            this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
                        }
                    }
                }

            } else if (item.type == ZaItem.RESOURCE) {

                var enable = false;

                if (ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE') {
                    enable = true;
                } else if (AjxUtil.isEmpty(item.rights)) {
                    item.loadEffectiveRights("id", item.id, false);
                }

                if (!enable) {
                    if (!ZaItem.hasRight(ZaResource.DELETE_CALRES_RIGHT,item)) {
                        if (this._popupOperations[ZaOperation.DELETE]) {
                            this._popupOperations[ZaOperation.DELETE].enabled = false;
                        }
                    }

                    if (!ZaItem.hasRight(ZaResource.SET_CALRES_PASSWORD_RIGHT, item)) {
                        if (this._popupOperations[ZaOperation.CHNG_PWD]) {
                            this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
                        }
                    }
                }

            } else if ( item.type == ZaItem.DOMAIN || item.type == ZaItem.COS ) {

                if (this._popupOperations[ZaOperation.DELETE]) {
                    this._popupOperations[ZaOperation.DELETE].enabled = false;
                }

                if (this._popupOperations[ZaOperation.EXPIRE_SESSION]) {
                    this._popupOperations[ZaOperation.EXPIRE_SESSION].enabled = false;
                }

                if (this._popupOperations[ZaOperation.CHNG_PWD]) {
                    this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
                }
            }

        } else {

            if (this._popupOperations[ZaOperation.EXPIRE_SESSION]) {
                this._popupOperations[ZaOperation.EXPIRE_SESSION].enabled = false;
            }

            if (this._popupOperations[ZaOperation.EDIT]) {
                this._popupOperations[ZaOperation.EDIT].enabled = false;
            }

            if (this._popupOperations[ZaOperation.CHNG_PWD]) {
                this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
            }

            if (this._popupOperations[ZaOperation.MOVE_ALIAS]) {
                this._popupOperations[ZaOperation.MOVE_ALIAS].enabled = false;
            }

            if (this._popupOperations[ZaOperation.DELETE]) {
                this._popupOperations[ZaOperation.DELETE].enabled = false;
            }
        }

    } else if (cnt > 1) {

        if (this._popupOperations[ZaOperation.EDIT]) {
            this._popupOperations[ZaOperation.EDIT].enabled = false;
        }

        if (this._popupOperations[ZaOperation.CHNG_PWD]) {
            this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
        }

        if (this._popupOperations[ZaOperation.MOVE_ALIAS]) {
            this._popupOperations[ZaOperation.MOVE_ALIAS].enabled = false;
        }

        if (this._popupOperations[ZaOperation.EXPIRE_SESSION]) {
            this._popupOperations[ZaOperation.EXPIRE_SESSION].enabled = false;
        }

    } else {

        if (this._popupOperations[ZaOperation.EXPIRE_SESSION]) {
            this._popupOperations[ZaOperation.EXPIRE_SESSION].enabled = false;
        }

        if (this._popupOperations[ZaOperation.EDIT]) {
            this._popupOperations[ZaOperation.EDIT].enabled = false;
        }

        if (this._popupOperations[ZaOperation.DELETE]) {
            this._popupOperations[ZaOperation.DELETE].enabled = false;
        }

        if (this._popupOperations[ZaOperation.CHNG_PWD]) {
            this._popupOperations[ZaOperation.CHNG_PWD].enabled = false;
        }

        if (this._popupOperations[ZaOperation.MOVE_ALIAS])	{
            this._popupOperations[ZaOperation.MOVE_ALIAS].enabled = false;
        }

    }

    for (var i = 0; i < cnt; i++) {
        var itemObj = this._contentView.getSelection()[i];
        if (itemObj && itemObj.type==ZaItem.ACCOUNT) {
            if (itemObj.attrs[ZaAccount.A_zimbraIsSystemAccount] == "TRUE") {
                if (this._popupOperations[ZaOperation.DELETE]) {
                    this._popupOperations[ZaOperation.DELETE].enabled = false;
                }
            }
        }
    }
}
ZaController.changeActionsStateMethods["ZaSearchListController"].push(ZaSearchListController.changeActionsStateMethod);

/**
 * Get the count statistics that will show in the search tree
 * @param resp response
 * @param orig Optional. The count statics will be added to <code>orig</code> if it is provided.
 * It is used for batch request.
 */
ZaSearchListController.prototype.getSearchResultStats =
function(resp, orig) {
    var result = {};
    if (orig) {
        result = orig;
    }

    if (!resp || !resp.searchTotal) {
        return result;
    }

    if (resp.more || ((orig && orig.more))) {
        result.more = true;
    }

    if (result.searchTotal) {
        result.searchTotal += resp.searchTotal;
    } else {
        result.searchTotal = resp.searchTotal;
    }

    if (resp[ZaItem.ACCOUNT] instanceof Array) {
        if (result[ZaItem.ACCOUNT])
            result[ZaItem.ACCOUNT] += resp[ZaItem.ACCOUNT].length;
        else {
            result[ZaItem.ACCOUNT] = resp[ZaItem.ACCOUNT].length;
        }
    }

    if (resp[ZaItem.ALIAS] instanceof Array) {
        if (result[ZaItem.ALIAS]) {
            result[ZaItem.ALIAS] += resp[ZaItem.ALIAS].length;
        }
        else {
            result[ZaItem.ALIAS] = resp[ZaItem.ALIAS].length;
        }
    }

    if (resp[ZaItem.DOMAIN] instanceof Array) {
        if (result[ZaItem.DOMAIN])
            result[ZaItem.DOMAIN] += resp[ZaItem.DOMAIN].length;
        else {
            result[ZaItem.DOMAIN] = resp[ZaItem.DOMAIN].length;
        }
    }

    if (resp[ZaItem.DL] instanceof Array) {
        if (result[ZaItem.DL])
            result[ZaItem.DL] += resp[ZaItem.DL].length;
        else {
            result[ZaItem.DL] = resp[ZaItem.DL].length;
        }
    }
    return result;
}

ZaSearchListController.prototype.updateSearchTree =
function(searchTotal, hasMore,  vectArray) {
    if (!vectArray)
        return "";

    var array = vectArray.getArray();
    var result = {}
    result.searchTotal = searchTotal;
    result.more = hasMore;
    result [ZaItem.ACCOUNT] = 0;
    result [ZaItem.DOMAIN] = 0;
    result [ZaItem.DL] = 0;
    for (var i = 0;i < array.length; i++) {
        if (array[i].type == ZaItem.ACCOUNT) {
            result[ZaItem.ACCOUNT]++;
        } else if (array[i].type == ZaItem.DOMAIN) {
            result[ZaItem.DOMAIN]++;
        } else if (array[i].type == ZaItem.DL) {
            result[ZaItem.DL]++;
        }
    }
    ZaZimbraAdmin.getInstance().getOverviewPanelController().fireSearchEvent(result);
}


ZaSearchListController.prototype._initPopupMenuAtAppBar = function(){

    if (AjxUtil.isEmpty(this._popupOrder)) {
        // in new UI, this._popupOrder is used to arrange the order of the items of PopUpMenu under the gear button,
        // instead of right-click menu

        // make the original right-click menu items first
        for(var ix in this._popupOperations) {
            this._popupOrder.push(ix)
        }
        //then add extra menu items set by other amdin extensions or zimlets
        for(var ix in this._popupOperationsOnAppBar) {
            this._popupOrder.push(ix)
        }
    }

    //merge the original right-click menu items and the extra menu items
    for(var ix in this._popupOperations) {
        this._popupOperationsOnAppBar[ix] = this._popupOperations[ix];
    }
}

//used for showing the PopUpMenu under the gear button in the new UI
ZaSearchListController.prototype.getPopUpOperation =
function () {
    return this._popupOperationsOnAppBar;
}
}
if (AjxPackage.define("zimbraAdmin.search.controller.ZaSearchBuilderController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaSearchBuilderController
* @contructor ZaSearchBuilderController
* Provides all the data and UI action controlls over the advanced search builder options
* @author Charles Cao
**/
ZaSearchBuilderController = function(appCtxt, container) {
	ZaController.call(this, appCtxt, container,"ZaSearchBuilderController");
	this._helpURL = ZaUtil.HELP_URL;
	this._helpButtonText = ZaMsg.zimbraHelpCenter;
   	this._option_views = [];
	this._searchBuildPanel = null;
	this._searchBuildTBPanel = null ;
	this._searchBuilderVisible = false ; //also indicate whether the advanced search query should be used
	this._query = null ;
	this._searchTypes = null ;
	this._objTypeOptionViewPosition = -1; //indicate the whether objTypeOptionView is visible or not by its position
	this._serverOptionViewPosition = -1 ;
	this._numberOfDomainOptions = 0; //how many domainOptions are visible
	this._cosids = null;
}

ZaSearchBuilderController.prototype = new ZaController();
ZaSearchBuilderController.prototype.constructor = ZaSearchBuilderController;
ZaSearchBuilderController.prototype.getSearchBuilderPanel =
function () {
	if (! this._searchBuildPanel) {
		DBG.println(AjxDebug.DBG3, "Initializing the search builder option panel.") ;
		this._searchBuildPanel = new ZaSearchBuilderView (ZaApp.getInstance().getAppCtxt().getShell());
		//always display the basic search when the search builder view is initialized.
		this.addOptionView (ZaSearchOption.BASIC_TYPE_ID) ;
	}
	return this._searchBuildPanel ;
}


ZaSearchBuilderController.prototype.getSearchBuilderTBPanel =
function () {
	if (! this._searchBuildTBPanel) {
		DBG.println(AjxDebug.DBG3, "Initialize the search builder toolbar panel.") ;
		this._searchBuildTBPanel = new ZaSearchBuilderToolbarView (ZaApp.getInstance().getAppCtxt().getShell());
	}
	return this._searchBuildTBPanel ;
}

ZaSearchBuilderController.prototype.toggleVisible =
function () {
	this._searchBuilderVisible = ! this._searchBuilderVisible ;
}

ZaSearchBuilderController.prototype.isSBVisible =
function () {
	return this._searchBuilderVisible ;
} 

//test if the current query string is LDAP query string or a basic search string.
ZaSearchBuilderController.prototype.isAdvancedSearch =
function (query) {
	var regEx =  /\([^\(\)\=]+=[^\(\)\=]+\)/ ; //ldap query string regEx
	if (query.match(regEx) != null) {
		return true ;
	}
	
	return  false ;
} 

ZaSearchBuilderController.handleOptions =
function (value, event, form){
//	DBG.println(AjxDebug.DBG3, "Handling the options on the search builder toolbar ...");
	
	var controller = ZaApp.getInstance().getSearchBuilderController();
	var searchField = ZaApp.getInstance().getSearchListController()._searchField ;
	
	var charCode = event.charCode;
	if (charCode == 13 || charCode == 3) {
	   searchField.invokeCallback();
	} else {
		this.setInstanceValue(value);
		
		//handle the special cases
		//1) domain admin and admin account search option is mutual exclusive.
		var invertValue ;
		if (value == "TRUE") { 
			invertValue = "FALSE";
		}

        var ref = this.getRef () ; 
        //can't each both be set
		if (invertValue == "FALSE" && ref == ZaSearchOption.A_objTypeAccountDomainAdmin) {
			this.setInstanceValue (invertValue, ZaSearchOption.A_objTypeAccountAdmin) ;
			this.setInstanceValue (invertValue, ZaSearchOption.A_objTypeSystemAccount);
		}else if (invertValue == "FALSE" && ref == ZaSearchOption.A_objTypeAccountAdmin) {
			this.setInstanceValue (invertValue, ZaSearchOption.A_objTypeAccountDomainAdmin) ;
			this.setInstanceValue (invertValue, ZaSearchOption.A_objTypeSystemAccount);
		} else if (invertValue == "FALSE" && ref == ZaSearchOption.A_objTypeSystemAccount) {
			this.setInstanceValue (invertValue, ZaSearchOption.A_objTypeAccountAdmin) ;
			this.setInstanceValue (invertValue, ZaSearchOption.A_objTypeAccountDomainAdmin) ;
		}

        //set the advanced login timestamp attributes value
        if ((ref == ZaSearchOption.A_enableAccountLastLoginTime_From || ref == ZaSearchOption.A_enableAccountLastLoginTime_To)
            && ( value == "TRUE" )) {
            var loginTimeRef ;
            if (ref == ZaSearchOption.A_enableAccountLastLoginTime_From) loginTimeRef = ZaSearchOption.A_accountLastLoginTime_From ;
            if (ref == ZaSearchOption.A_enableAccountLastLoginTime_To) loginTimeRef = ZaSearchOption.A_accountLastLoginTime_To ;

            var loginTime = this.getInstanceValue (loginTimeRef);
            if (!loginTime) {
                this.setInstanceValue (new Date(), loginTimeRef) ;
            }
        }

        //set the query value
		controller.setQuery () ;
	}
	
	//disable the domain option button if domain is checked
	/*
	if (this.getRef () == ZaSearchOption.A_objTypeDomain) {
		var domainBT = controller._searchBuildTBPanel.getButton (ZaOperation.SEARCH_BY_DOMAIN) ;
		if (domainBT) {
			domainBT.setEnabled (value == "FALSE" ? true : false);
		}
	}*/
}

ZaSearchBuilderController.filterDomains =
function (value, event, form) {
	if (AjxUtil.isEmpty(value) || AjxStringUtil.trim(value) == "") {
		return;
	}
	this.setInstanceValue (value);
	var busyId = Dwt.getNextId();
	var callback = new AjxCallback(this, ZaSearchBuilderController.optionFilterCallback, {busyId:busyId});
	var searchParams = {
			query: "(" + ZaDomain.A_domainName + "=*" + value + "*)", 
			types: [ZaSearch.DOMAINS],
			sortBy: ZaDomain.A_domainName,
			attrs: [ZaDomain.A_domainName],
			applyCos: "0",
			callback:callback,
			controller: ZaApp.getInstance().getCurrentController(),
			showBusy:true,
			busyId:busyId,
			busyMsg:ZaMsg.BUSY_SEARCHING_DOMAINS,
			skipCallbackIfCancelled:false			
	}
	ZaSearch.searchDirectory(searchParams);
}

ZaSearchBuilderController.filterCOSES =
function (value, event, form) {
        if (AjxUtil.isEmpty(value) || AjxStringUtil.trim(value) == "") {
            return;
        }
        this.setInstanceValue (value);
        var busyId = Dwt.getNextId();
        var callback = new AjxCallback(this, ZaSearchBuilderController.optionCosFilterCallback, {busyId:busyId});
        var searchParams = {
                        query: "(" + ZaCos.A_name + "=*" + value + "*)",
                        types: [ZaSearch.COSES],
                        sortBy: ZaCos.A_name,
                        attrs: [ZaCos.A_name],
                        applyCos: "0",
                        callback:callback,
                        controller: ZaApp.getInstance().getCurrentController(),
                        showBusy:true,
                        busyId:busyId,
                        busyMsg:ZaMsg.BUSY_SEARCHING_COSES,
                        skipCallbackIfCancelled:false
        }
        ZaSearch.searchDirectory(searchParams);
}


ZaSearchBuilderController.prototype.listAllServers =
function () {
	var serverView = this._option_views[this._option_views.length -1];
	
	var form = serverView._localXForm;
	var instance = form.getInstance ()
	var list = ZaServer.getAll().getArray ();
	var servers = new Array (list.length) ;
	for (var i = 0; i < servers.length; i ++) {
		servers [i] = list [i].name ;
	}
	
	//set the list and refresh the list UI
	instance["options"][ZaSearchOption.A_serverList] = servers ;
	
	//reset the checked domain list vector
	instance["options"][ZaSearchOption.A_serverListChecked] = new AjxVector ();
	
	form.refresh () ;
}

ZaSearchBuilderController.prototype.updateServerFilter=
function (dialog) {
	var serverView = dialog;

	var form = serverView._localXForm;
	var instance = form.getInstance ()
	var list = ZaServer.getAll().getArray ();
	var servers = new Array (list.length) ;
	for (var i = 0; i < servers.length; i ++) {
		servers [i] = list [i].name ;
	}

	//set the list and refresh the list UI
	instance["options"][ZaSearchOption.A_serverList] = servers ;

	//reset the checked domain list vector
	instance["options"][ZaSearchOption.A_serverListChecked] = new AjxVector ();

	form.refresh () ;
}

ZaSearchBuilderController.filterSelectionListener =
function (value) {
	var targetEl = value.target ;
	
//	if (targetEl instanceof HTMLInputElement) { //not Supported by IE
	if (targetEl.type && targetEl.type == "checkbox") {
		var ref = this.getRef ();
		var item = targetEl.value ;
		var form = this.getForm ();
		var instance = form.getInstance ();
		var checkedFiltersVector = null ;
		if (ref == ZaSearchOption.A_domainList) {
			checkedFiltersVector = instance["options"][ZaSearchOption.A_domainListChecked];
		}else if (ref == ZaSearchOption.A_serverList) {
			checkedFiltersVector = instance["options"][ZaSearchOption.A_serverListChecked];
		}else if (ref == ZaSearchOption.A_cosList) {
                        checkedFiltersVector = instance["options"][ZaSearchOption.A_cosListChecked];
                }

		var controller = form.parent._controller ;
		DBG.println(AjxDebug.DBG3, item + " is selected ... ");
		if (targetEl.checked) { //after the selection it will be uncheck
			DBG.println(AjxDebug.DBG3, "remove the choice " + targetEl.value );
			checkedFiltersVector.remove(item);
			//controller._domainFiltersVector.remove(domain) ;
		}else{
			DBG.println(AjxDebug.DBG3, "add the choice " + targetEl.value );
			checkedFiltersVector.add(item);
			//controller._domainFiltersVector.add (domain) ;
		}
		
		DBG.println(AjxDebug.DBG3, "Update the query ... ");
		controller.setQuery () ;
	}
}

ZaSearchBuilderController.optionFilterCallback =
function (params,resp) {
	DBG.println(AjxDebug.DBG3, "Check for the filter results ... ") ;
	if(params.busyId)
			ZaApp.getInstance().getAppCtxt().getShell().setBusy(false, params.busyId);
	
	var form = this.getForm ();
	try {
		if(!resp) {
			throw(new AjxException(ZaMsg.ERROR_EMPTY_RESPONSE_ARG, AjxException.UNKNOWN, "ZaListViewController.prototype.searchCallback"));
		}
		if(resp.isException()) {
			throw(resp.getException());
		} else {
			var response = resp.getResponse().Body.SearchDirectoryResponse;
			if (response.domain && response.domain.length > 0) {
				var domains = new Array (response.domain.length);
				for (var i=0; i<domains.length; i++) {
					if(response.domain[i]) {
						domains[i] = response.domain[i].name;
					}
				}
				var searchTotal = response.searchTotal;
				
				//set the list and refresh the list UI
				this.setInstanceValue (domains, "/options/" + ZaSearchOption.A_domainList);
				
				//reset the checked domain list vector
				this.setInstanceValue (new AjxVector (), "/options/" + ZaSearchOption.A_domainListChecked);
				form.refresh () ;
			}else{//no match domain found
				this.setInstanceValue ([], "/options/" + ZaSearchOption.A_domainList);
				this.setInstanceValue (new AjxVector (), "/options/" + ZaSearchOption.A_domainListChecked);
				form.refresh () ;
			}
		}
	} catch (ex) {
		if (ex.code != ZmCsfeException.MAIL_QUERY_PARSE_ERROR) {
			form.parent._controller._handleException(ex, "ZaSearchBuilderController.optionFilterCallback");	
		} else {
			form.parent._controller.popupErrorDialog(ZaMsg.queryParseError, ex);
		}		
	}
}


ZaSearchBuilderController.optionCosFilterCallback =
function (params,resp) {
        if(params.busyId)
                        ZaApp.getInstance().getAppCtxt().getShell().setBusy(false, params.busyId);

        var form = this.getForm ();
	var controller = ZaApp.getInstance().getSearchBuilderController();
        try {
                if(!resp) {
                        throw(new AjxException(ZaMsg.ERROR_EMPTY_RESPONSE_ARG, AjxException.UNKNOWN, "ZaListViewController.prototype.searchCallback"));
                }
                if(resp.isException()) {
                        throw(resp.getException());
                } else {
                        var response = resp.getResponse().Body.SearchDirectoryResponse;
                        if (response.cos && response.cos.length > 0) {
                                var coses = new Array (response.cos.length);
				controller._cosids = new Array (response.cos.length);
                                for (var i =0; i < coses.length; i ++) {
                                        coses[i] = response.cos[i].name ;
					controller._cosids[coses[i]] = response.cos[i].id;

                                }
                                
                                this.setInstanceValue (coses, "/options/" + ZaSearchOption.A_cosList);

                                this.setInstanceValue (new AjxVector (), "/options/" + ZaSearchOption.A_cosListChecked);
                                form.refresh () ;
                        }else{
                                this.setInstanceValue ([], "/options/" + ZaSearchOption.A_cosList);
                                this.setInstanceValue (new AjxVector (), "/options/" + ZaSearchOption.A_cosListChecked);
                                form.refresh () ;
                        }
                }
        } catch (ex) {
                if (ex.code != ZmCsfeException.MAIL_QUERY_PARSE_ERROR) {
                        form.parent._controller._handleException(ex, "ZaSearchBuilderController.optionCosFilterCallback");
                } else {
                        form.parent._controller.popupErrorDialog(ZaMsg.queryParseError, ex);
                }
        }
}



ZaSearchBuilderController.prototype.handleSpecialQueries = 
function () {
	var optionViews = this.getOptionViews () ;
	this._includeNeverLoggedInAccts = false ; //by default
    this._includeObjectWithoutCosId = false;  // by default
	for (var i =0 ; i < optionViews.length; i++) {
		var optionId = optionViews[i]._optionId ;
		var instance = optionViews[i]._localXForm.getInstance () ;
		//handle the special case never logged in accounts
		if (this._includeNeverLoggedInAccts == false //if it is set, then we won't change it again.
				&& instance[ZaSearchOption.A_includeNeverLoginedAccounts]
				&& instance[ZaSearchOption.A_includeNeverLoginedAccounts] == "TRUE" ) 
		{
			this._includeNeverLoggedInAccts = true ;	
		}
		if (this._includeObjectWithoutCosId == false && instance[ZaSearchOption.A2_cosNotSet]
				&& instance[ZaSearchOption.A2_cosNotSet] == "TRUE" )
		{
			this._includeObjectWithoutCosId = true ;
		}
	}
}

/**
 * Set the query value based on the LDAP query language for the advanced search 
 * and the query value will be displayed on the search bar also.
 * 
 */
ZaSearchBuilderController.prototype.setQuery =
function () {
	this.handleSpecialQueries () ;
	var optionViews = this.getOptionViews () ;
		
	this._query = null ;
	this._searchTypes = null ;
	//_filterObj holds all the options objects
	this._filterObj = {} ;
	this._filterObj [ZaSearchOption.BASIC_TYPE_ID] = [] ;
	this._filterObj [ZaSearchOption.OBJECT_TYPE_ID] = [] ;
	this._filterObj [ZaSearchOption.DOMAIN_ID] = [] ;
	this._filterObj [ZaSearchOption.SERVER_ID] = [] ;
	this._filterObj [ZaSearchOption.ADVANCED_ID] = [] ;
	this._filterObj [ZaSearchOption.COS_ID] = [] ;
	
	for (var i =0 ; i < optionViews.length; i++) {
		var optionId = optionViews[i]._optionId ;
		var instance = optionViews[i]._localXForm.getInstance () ;
		
		var options = instance ["options"] ;
		var filter = [];

        if(optionId == ZaSearchOption.COS_ID && this._includeObjectWithoutCosId
                && (!options[ZaSearchOption.A_cosListChecked] || options[ZaSearchOption.A_cosListChecked].size() == 0))
             filter.push("(!(" + ZaAccount.A_COSId + "=*))");

		for (var key in options) {
			var value = options[key] ;
			if (value != null){
				var op = null ; //the operator of the filter
				if (value instanceof Date) { //the date type options
					value = ZaUtil.getAdminServerDateTime(value, true) ;
				}
				if (key == ZaSearchOption.A_accountLastLoginTime_From) {
					if (instance[ZaSearchOption.A_enableAccountLastLoginTime_From] == "TRUE") {
						key = ZaAccount.A_zimbraLastLogonTimestamp ;
						op = ">=" ;
					}else{
						continue ;
					}
				}
				
				if (key == ZaSearchOption.A_accountLastLoginTime_To) {
					if (instance[ZaSearchOption.A_enableAccountLastLoginTime_To] == "TRUE") {
						key = ZaAccount.A_zimbraLastLogonTimestamp ;
						op = "<=" ;
					}else{
						continue ;
					}
				}
				
				if ((value.length > 0) 
						|| ((value instanceof AjxVector) && (value.size() > 0)))  {
					//TODO: handle the checkbox TRUE or FALSE value
					this._addFilter (filter, key, value, op) ;	
				}
			}
		}
		this._filterObj[optionId].push(filter);
	}
	this._query = this.getQueryFromFilters () ;
	this._searchTypes = this.getSearchTypesFromFilters ();
	DBG.println(AjxDebug.DBG1, "Current Query String = " + this._query) ;
	
	//update the search field textbox entry
	var searchFieldXform = ZaApp.getInstance().getSearchListController()._searchField._localXForm;
	var	searchFieldInstance = searchFieldXform.getInstance ();
	var searchFieldItem = searchFieldXform.getItemsById(ZaSearch.A_query)[0];
	if (this.isSBVisible()){
		searchFieldItem["toolTipContent"] = ZaMsg.tt_advancedSearchField ;
		searchFieldInstance[ZaSearch.A_query] = this._query ;
	}else{ //clear the search field is not advacned search
		searchFieldItem["toolTipContent"] = null ;
		searchFieldInstance[ZaSearch.A_query] = "" ;
	}
	searchFieldXform.refresh ();
}

//add the option value into the LDAP query filter
ZaSearchBuilderController.prototype._addFilter = 
function (filter, key, value, op) {
	if (value instanceof String ) {
		value = String(value).replace(/([\\\\\\*\\(\\)])/g, "\\$1");
	}
	var entry = null ;
    var searchListController = ZaApp.getInstance().getSearchListController();
	if (key == ZaSearchOption.A_domainFilter 
		//|| key == ZaSearchOption.A_domainAll
		|| key == ZaSearchOption.A_domainList 
		|| key == ZaSearchOption.A_serverList
		|| key == ZaSearchOption.A_cosFilter
		|| key == ZaSearchOption.A_cosList) {
		//ignored 			
					
	}else if (key == ZaSearchOption.A_objTypeAccount) {
		if (value == "TRUE" && (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ACCOUNT_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI])) filter.push(ZaSearch.ACCOUNTS);
	}else if (key == ZaSearchOption.A_objTypeDl) {
		if (value == "TRUE"  && (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.DL_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]))  filter.push(ZaSearch.DLS);
	}else if (key == ZaSearchOption.A_objTypeAlias ) {
		if (value == "TRUE" && (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ALIAS_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]))  filter.push(ZaSearch.ALIASES);
	}else if (key == ZaSearchOption.A_objTypeResource) {
		if (value == "TRUE" && (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.RESOURCE_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) )  filter.push(ZaSearch.RESOURCES);
	/*}else if (key == ZaSearchOption.A_objTypeDomain) {
		if (value == "TRUE")  filter.push(ZaSearch.DOMAINS);*/
        }else if (key == ZaSearchOption.A_objTypeSystemAccount) {
                if (value == "TRUE")  entry = "(" + key + "=" + value + ")" ;
	}else if (key == ZaSearchOption.A_objTypeAccountAdmin) {
		if (value == "TRUE")  entry = "(" + key + "=" + value + ")" ; //no * for the TRUE or FALSE value
	}else if (ZaSearchOption.A_objTypeAccountDomainAdmin && key == ZaSearchOption.A_objTypeAccountDomainAdmin){
		if (value == "TRUE")  entry = "(" + key + "=" + value + ")" ; //no * for the TRUE or FALSE value
	}else if (key == ZaSearchOption.A_domainListChecked) {	
		if (value.size () > 0) {
				entry = ZaSearchBuilderController.getOrFilter4ListArray (
						value.getArray(),
						ZaSearchOption.DOMAIN_ID
						);
		}
	}else if (key == ZaSearchOption.A_serverListChecked) {	
		if (value.size () > 0) {
				entry = ZaSearchBuilderController.getOrFilter4ListArray (
						value.getArray(),
						ZaSearchOption.SERVER_ID
						);
		}
	}else if (key == ZaSearchOption.A_cosListChecked) {
		if (value.size () > 0) {
			entry = ZaSearchBuilderController.getCosFilter4ListArray(value.getArray());
		}
    }else if (key == ZaAccount.A_zimbraLastLogonTimestamp){
		entry = "("	+ key + op + value + ")";
	}else if (key == ZaSearchOption.A_zimbraMailForwardingAddress ){
		entry = "(" + key + "=*" + value + "*)" ;
                entry += "(" + ZaSearchOption.A_zimbraPrefMailForwardingAddress + "=*" + value + "*)" ;
                entry = "(|" + entry + ")";
    } else if (searchListController.searchResultFilter.indexOf(key) >= 0) {
        if(!searchListController._filterObj || !(searchListController._filterObj instanceof Object))
             searchListController._filterObj = {};
        searchListController._filterObj[key] = value;
    } else {
		entry = "(" + key + "=*" + value + "*)" ;
	}
	
	if (entry != null && entry.length > 0) {
		DBG.println (AjxDebug.DBG1, "Add entry " + entry );
		filter.push (entry) ;
	}
	
}

ZaSearchBuilderController.prototype.getSearchTypesFromFilters =
function () {
	var searchTypeFilterArr = this._filterObj[ZaSearchOption.OBJECT_TYPE_ID] ;
	if (this._objTypeOptionViewPosition < 0){ //the objType option is hidden and search all the object types
		return ZaSearchOption.getDefaultObjectTypes();
	}else if (searchTypeFilterArr != null && searchTypeFilterArr.length > 0) {
		return searchTypeFilterArr ;
	}else {
		return [];
	}
}



ZaSearchBuilderController.prototype.getQueryFromFilters =
function () {
	var query = "";
	var i = 0 ; //count the number of non empty valid options.
	
	for (var key in this._filterObj) {
		if (key != ZaSearchOption.OBJECT_TYPE_ID) {
			var filter = this.getOrFilter4SameOptionType (this._filterObj [key], key) ;
			if (filter != null && filter.length > 0) {
				query += filter ;
				i ++ ;	
			}	
		}
	}
	
	if (i > 1) {
		query = "(&" + query + ")" ;
	}
	
	return query ;
	
	/*
	
	var basicOptions = this.getOrFilter4SameOptionType(this._filterObj[ZaSearchOption.BASIC_TYPE_ID]);
	if (basicOptions != null && basicOptions.length > 0) {
		query += basicOptions ;
		i ++ ;	
	}
	
	var objTypeOptions = this.getOrFilter4SameOptionType(this._filterObj[ZaSearchOption.OBJECT_TYPE_ID]);
	if (objTypeOptions != null && objTypeOptions.length > 0) {
		query += objTypeOptions ;
		i ++ ;	
	}
	
	var domainOptions = this.getOrFilter4SameOptionType(this._filterObj[ZaSearchOption.DOMAIN_ID]);
	if (domainOptions != null && domainOptions.length > 0) {
		query += domainOptions ;
		i ++ ;	
	}
	
	var serverOptions = this.getOrFilter4SameOptionType(this._filterObj[ZaSearchOption.SERVER_ID]);
	if (serverOptions != null && serverOptions.length > 0) {
		query += serverOptions ;
		i ++ ;	
	} */
	
	
}

//For the same option types
ZaSearchBuilderController.prototype.getOrFilter4SameOptionType =
function (arr, key) {
	var query = "";
	var numberOfFilters = 0;
	//special cases for the Never Logged In Accounts
	if (key == ZaSearchOption.ADVANCED_ID){ //for the advanced attribute tab
		if (this._includeNeverLoggedInAccts) {
			query += "(!(" + ZaAccount.A_zimbraLastLogonTimestamp + "=*))" ;
			numberOfFilters ++ ;
		}
	}
	
	for (var i=0; i < arr.length; i++) {
		query += this.getAndFilter4EntriesInOneOption (arr[i]);
		numberOfFilters ++ ;
	}
	if (numberOfFilters > 1) {
		query = "(|" + query + ")";	
	}
	DBG.println (AjxDebug.DBG3, "Same Option Type Filter = " + query) ;
	return query ;
}

//for the filter entries in an option type
ZaSearchBuilderController.prototype.getAndFilter4EntriesInOneOption =
function (arr) {
	var query = arr.join("") ;
	if (arr.length > 1) {
		query = "(&" + query + ")";	
	}
	DBG.println (AjxDebug.DBG3, "One Option Type Filter = " + query) ;
	
	return query ;
}

//for domain list and server list
ZaSearchBuilderController.getOrFilter4ListArray=
function (arr, optionId) {
	var query = "";
	for (var i =0; i < arr.length; i ++ ) {
		if (optionId == ZaSearchOption.DOMAIN_ID) {
			query += "(" + ZaAccount.A_mailDeliveryAddress + "=*@" + arr[i] + ")"
				   + "(" + ZaAccount.A_zimbraMailAlias+ "=*@" + arr[i] + ")";
		}else if (optionId == ZaSearchOption.SERVER_ID){
			query += "(" + ZaAccount.A_mailHost + "=" + arr[i] + ")";
		}
	}
	if (arr.length > 1 || (arr.length > 0 && optionId == ZaSearchOption.DOMAIN_ID)) {
		query = "(|" + query + ")";	
	}
	
	return query ;
}

ZaSearchBuilderController.getCosFilter4ListArray = 
function (arr) {
	var query = "";
	var controller = ZaApp.getInstance().getSearchBuilderController();
	var cosids = controller._cosids;

    if(controller._includeObjectWithoutCosId) {
        query += "(!(" + ZaAccount.A_COSId + "=*))";
    }
	if(cosids && cosids.length  > 0) {
		for(var i = 0; i < arr.length && i < cosids.length; i++) {
			query += "(" + ZaAccount.A_COSId  + "=" + cosids[arr[i]] + ")";
		}
	}
        if (cosids.length > 1 || (cosids.length == 1 && controller._includeObjectWithoutCosId)) {
                query = "(|" + query + ")";
        }
	return query;
}


ZaSearchBuilderController.prototype.getQuery =
function () {
	return this._query ;
}

ZaSearchBuilderController.prototype.getAddressTypes =
function () {
	return this._searchTypes ;
}

/**
 * add an option picker in the search options panel based on the optionId which is 
 * defined in the option button view.  And update the corresponding 
 * data structure this._option_views
 */
ZaSearchBuilderController.prototype.addOptionView =
function (optionId) {
	var position = this._option_views.length ;
	var searchPanel = this._searchBuildPanel || this.getSearchBuilderPanel() ;
	var width = ZaSearchOptionView.WIDTH ;
	if (optionId == ZaSearchOption.BASIC_TYPE_ID) {
		width = ZaSearchOptionView.BASIC_OPTION_WIDTH ;
	}else if (optionId == ZaSearchOption.ADVANCED_ID) {
		width = ZaSearchOptionView.ADVANCED_OPTION_WIDTH;
	}else if (optionId == ZaSearchOption.OBJECT_TYPE_ID){
		if (this._objTypeOptionViewPosition >= 0 ) {
			return ; //object type option only display for one time
		}
		else{
			this._objTypeOptionViewPosition = position;
		}
	}else if (optionId == ZaSearchOption.SERVER_ID){
		if (this._serverOptionViewPosition >= 0 ) {
			return ; //object type option only display for one time
		}else{
			this._serverOptionViewPosition = position;
		}
	} else if (optionId == ZaSearchOption.DOMAIN_ID) {
		width = ZaSearchOptionView.DOMAIN_OPTION_WIDTH;    
	} else if (optionId == ZaSearchOption.COS_ID) {
        width = ZaSearchOptionView.COS_OPTION_WIDTH;
	}
	/*
	else if (optionId == ZaSearchOption.DOMAIN_ID){
			this._numberOfDomainOptions ++ ;
			//if object type view exists and this is the first domain option
			//refresh the object type view
			
			if (this._objTypeOptionViewPosition >= 0 && this._numberOfDomainOptions == 1) {
				this._option_views[this._objTypeOptionViewPosition]._localXForm.refresh();
			}
	}*/
	
	this._option_views.push(new ZaSearchOptionView (
			searchPanel,  optionId, 
			width,  position));
}

ZaSearchBuilderController.prototype.removeAllOptionViews=
function () {
	for (var i= this._option_views.length - 1; i >= 0 ; i --){
		this.removeOptionView (i);	
	}
}

//remove an option picker from the search option panel. And update the corresponding 
//data structure this._option_views
ZaSearchBuilderController.prototype.removeOptionView =
function (position, reposition){
	var option = this._option_views[position] ;
	var y = option.getY();
	option.dispose ();
	this._option_views.splice (position, 1) ;
	
	if (option._optionId == ZaSearchOption.OBJECT_TYPE_ID) {
		this._objTypeOptionViewPosition = -1 ;
		this._searchBuildTBPanel.getButton (ZaOperation.SEARCH_BY_ADDESS_TYPE).setEnabled (true) ;
	}else if (option._optionId == ZaSearchOption.SERVER_ID) {
		this._serverOptionViewPosition = -1 ;
		this._searchBuildTBPanel.getButton (ZaOperation.SEARCH_BY_SERVER).setEnabled (true) ;
	}
	
	
	 /*
	else if (option._optionId == ZaSearchOption.DOMAIN_ID) {
		this._numberOfDomainOptions -- ;
		//if object type view exists and this is the last domain option
		//refresh the object type view
		if (this._objTypeOptionViewPosition >= 0 && this._numberOfDomainOptions == 0) {
			this._option_views[this._objTypeOptionViewPosition]._localXForm.refresh();
		}
	}*/
	
	if (reposition) {
		var len = this._option_views.length ;
		//reset the following element's position and location
		for (var i = position ; i < len; i ++) {
			var x = this._searchBuildPanel.getNextOptionX(i);
			//var w = this._option_views[i-1].getW ();
			this._option_views[i].setLocation(x, y) ;
			this._option_views[i].setPosition (i);
		}
		//reset the query
		this.setQuery();
	}
}

ZaSearchBuilderController.prototype.getOptionViews =
function (){
	return this._option_views ;
}


/* New UI Start */

ZaSearchBuilderController.newHandleOptions =
function (value, event, form){
//	DBG.println(AjxDebug.DBG3, "Handling the options on the search builder toolbar ...");


	var charCode = event.charCode;
	if (charCode == 13 || charCode == 3) {
	   //;
	} else {
		this.setInstanceValue(value);

		//handle the special cases
		//1) domain admin and admin account search option is mutual exclusive.
		var invertValue ;
		if (value == "TRUE") {
			invertValue = "FALSE";
		}

        var ref = this.getRef () ;
        //can't each both be set
		if (invertValue == "FALSE" && ref == ZaSearchOption.A_objTypeAccountDomainAdmin) {
			this.setInstanceValue (invertValue, ZaSearchOption.A_objTypeAccountAdmin) ;
			this.setInstanceValue (invertValue, ZaSearchOption.A_objTypeSystemAccount);
		}else if (invertValue == "FALSE" && ref == ZaSearchOption.A_objTypeAccountAdmin) {
            if (ZaSearchOption.A_objTypeAccountDomainAdmin)
			    this.setInstanceValue (invertValue, ZaSearchOption.A_objTypeAccountDomainAdmin) ;
			this.setInstanceValue (invertValue, ZaSearchOption.A_objTypeSystemAccount);
		} else if (invertValue == "FALSE" && ref == ZaSearchOption.A_objTypeSystemAccount) {
			this.setInstanceValue (invertValue, ZaSearchOption.A_objTypeAccountAdmin) ;
            if (ZaSearchOption.A_objTypeAccountDomainAdmin)
			    this.setInstanceValue (invertValue, ZaSearchOption.A_objTypeAccountDomainAdmin) ;
		}

        //set the advanced login timestamp attributes value
        if ((ref == ZaSearchOption.A_enableAccountLastLoginTime_From || ref == ZaSearchOption.A_enableAccountLastLoginTime_To)
            && ( value == "TRUE" )) {
            var loginTimeRef ;
            if (ref == ZaSearchOption.A_enableAccountLastLoginTime_From) loginTimeRef = ZaSearchOption.A_accountLastLoginTime_From ;
            if (ref == ZaSearchOption.A_enableAccountLastLoginTime_To) loginTimeRef = ZaSearchOption.A_accountLastLoginTime_To ;

            var loginTime = this.getInstanceValue (loginTimeRef);
            if (!loginTime) {
                this.setInstanceValue (new Date(), loginTimeRef) ;
            }
        }

        if ( ref == ZaSearchOption.A2_status_active
            || ref ==ZaSearchOption.A2_status_closed
            || ref ==ZaSearchOption.A2_status_locked
            || ref ==ZaSearchOption.A2_status_lockout
            || ref ==ZaSearchOption.A2_status_pending
            || ref ==ZaSearchOption.A2_status_maintenance) {
            var statusArr = [];
            if (this.getInstanceValue(ZaSearchOption.A2_status_active) == "TRUE") {
                statusArr.push(ZaAccount.ACCOUNT_STATUS_ACTIVE);
            }
            if (this.getInstanceValue(ZaSearchOption.A2_status_closed) == "TRUE") {
                statusArr.push(ZaAccount.ACCOUNT_STATUS_CLOSED);
            }
            if (this.getInstanceValue(ZaSearchOption.A2_status_locked) == "TRUE") {
                statusArr.push(ZaAccount.ACCOUNT_STATUS_LOCKED);
            }
            if (this.getInstanceValue(ZaSearchOption.A2_status_lockout) == "TRUE") {
                statusArr.push(ZaAccount.ACCOUNT_STATUS_LOCKOUT);
            }
            if (this.getInstanceValue(ZaSearchOption.A2_status_pending) == "TRUE") {
                statusArr.push(ZaAccount.ACCOUNT_STATUS_PENDING);
            }
            if (this.getInstanceValue(ZaSearchOption.A2_status_maintenance) == "TRUE") {
                statusArr.push(ZaAccount.ACCOUNT_STATUS_MAINTENANCE);
            }
            this.setInstanceValue(statusArr, ZaSearchOption.A2_status_list);
        }

	}
}

ZaSearchBuilderController.prototype.newHandleSpecialQueries =
function () {
	var optionViews = this.getFilterDialogArray ();
	this._includeNeverLoggedInAccts = false ; //by default
    this._includeObjectWithoutCosId = false;  // by default
	for (var i =0 ; i < optionViews.length; i++) {
		var optionId = optionViews[i]._optionId ;
		var instance = optionViews[i]._localXForm.getInstance () ;
		//handle the special case never logged in accounts
		if (this._includeNeverLoggedInAccts == false //if it is set, then we won't change it again.
				&& instance[ZaSearchOption.A_includeNeverLoginedAccounts]
				&& instance[ZaSearchOption.A_includeNeverLoginedAccounts] == "TRUE" )
		{
			this._includeNeverLoggedInAccts = true ;
		}
		if (this._includeObjectWithoutCosId == false && instance[ZaSearchOption.A2_cosNotSet]
				&& instance[ZaSearchOption.A2_cosNotSet] == "TRUE" )
		{
			this._includeObjectWithoutCosId = true ;
		}
	}
}

/**
 * Set the query value based on the LDAP query language for the advanced search
 * and the query value will be displayed on the search bar also.
 *
 */
ZaSearchBuilderController.prototype.setNewQuery =
function (dialog) {
	this.newHandleSpecialQueries () ;
	var optionViews = this.getFilterDialogArray () ;

	this._query = null ;
	this._searchTypes = null ;
	//_filterObj holds all the options objects
    this._filterObj = null ;


    var optionId = dialog._optionId;
	var instance = dialog._localXForm.getInstance () ;

	var options = instance ["options"] ;
	var filter = [];

    if(optionId == ZaSearchOption.COS_FILTER_ID && this._includeObjectWithoutCosId
                && (!options[ZaSearchOption.A_cosListChecked] || options[ZaSearchOption.A_cosListChecked].size() == 0))
        filter.push("(!(" + ZaAccount.A_COSId + "=*))");

	for (var key in options) {
		var value = options[key] ;
		if (value != null){
			var op = null ; //the operator of the filter
		    if (value instanceof Date) { //the date type options
		        value = ZaUtil.getAdminServerDateTime(value, true) ;
		    }
		    if (key == ZaSearchOption.A_accountLastLoginTime_From) {
			    if (instance[ZaSearchOption.A_enableAccountLastLoginTime_From] == "TRUE") {
				    key = ZaAccount.A_zimbraLastLogonTimestamp ;
				    op = ">=" ;
			    }else{
				    continue ;
			    }
		    }
            if (key == ZaSearchOption.A_accountLastLoginTime_To) {
			    if (instance[ZaSearchOption.A_enableAccountLastLoginTime_To] == "TRUE") {
				    key = ZaAccount.A_zimbraLastLogonTimestamp ;
					    op = "<=" ;
			    }else{
				    continue ;
			    }
		    }
            if ((value.length > 0)
						|| ((value instanceof AjxVector) && (value.size() > 0)))  {
			    //TODO: handle the checkbox TRUE or FALSE value
			    this._newAddFilter (filter, key, value, op) ;
		    }
		}
	}

	var slController = ZaApp.getInstance().getSearchListController();
    if (slController._uiContainer) {
        var query = this.newGetOrFilter4SameOptionType ([filter], optionId) ;
        var unique = false;
        if(optionId == ZaSearchOption.SERVER_FILTER_ID){
            unique = true;
        }
        var params = {
            type:2,
            unique:unique,
            query:query,
            optionalType: optionId,
            displayName: this.getFilterTypeName(dialog._optionId)
        };
        slController._uiContainer.addBubble(params);
    }
}

ZaSearchBuilderController.prototype.getFilterTypeName =
function (filterType) {
      var filterTypeName ;
      switch (filterType) {
        case ZaSearchOption.BASIC_FILTER_ID:
            filterTypeName = ZaMsg.OVP_basicFilter;
        break;
        case ZaSearchOption.STATUS_FILTER_ID:
            filterTypeName = ZaMsg.OVP_statutsFilter;
        break;
        case ZaSearchOption.LASTER_LOGIN_TIME_FILTER_ID:
            filterTypeName = ZaMsg.OVP_lltFilter;
        break;
        case ZaSearchOption.EXT_EMAIL_ADDRESS_FILTER_ID:
            filterTypeName = ZaMsg.OVP_eeaFilter;
        break;
        case ZaSearchOption.COS_FILTER_ID:
            filterTypeName = ZaMsg.OVP_cosFilter;
        break;
        case ZaSearchOption.SERVER_FILTER_ID:
            filterTypeName = ZaMsg.OVP_serverFilter;
        break;
        case ZaSearchOption.DOMAIN_FILTER_ID:
            filterTypeName = ZaMsg.OVP_domainFilter;
        break;
      }
    return filterTypeName;
}


//add the option value into the LDAP query filter
ZaSearchBuilderController.prototype._newAddFilter =
function (filter, key, value, op) {
	if (value instanceof String ) {
		value = String(value).replace(/([\\\\\\*\\(\\)])/g, "\\$1");
	}
	var entry = null ;
    var searchListController = ZaApp.getInstance().getSearchListController();
	if (key == ZaSearchOption.A_domainFilter
		//|| key == ZaSearchOption.A_domainAll
		|| key == ZaSearchOption.A_domainList
		|| key == ZaSearchOption.A_serverList
		|| key == ZaSearchOption.A_cosFilter
		|| key == ZaSearchOption.A_cosList
        || key == ZaSearchOption.A2_status_active
        || key ==ZaSearchOption.A2_status_closed
        || key ==ZaSearchOption.A2_status_locked
        || key ==ZaSearchOption.A2_status_lockout
        || key ==ZaSearchOption.A2_status_pending
        || key ==ZaSearchOption.A2_status_maintenance
        ) {
		//ignored
	}else if (key == ZaSearchOption.A_objTypeSystemAccount) {
                if (value == "TRUE")  entry = "(" + key + "=" + value + ")" ;
	}else if (key == ZaSearchOption.A_objTypeAccountAdmin) {
		if (value == "TRUE")  entry = "(" + key + "=" + value + ")" ; //no * for the TRUE or FALSE value
	}else if (ZaSearchOption.A_objTypeAccountDomainAdmin && key == ZaSearchOption.A_objTypeAccountDomainAdmin){
		if (value == "TRUE")  entry = "(" + key + "=" + value + ")" ; //no * for the TRUE or FALSE value
	}else if (key == ZaSearchOption.A_domainListChecked) {
		if (value.size () > 0) {
				entry = ZaSearchBuilderController.newGetOrFilter4ListArray (
						value.getArray(),
						ZaSearchOption.DOMAIN_FILTER_ID
						);
		}
	}else if (key == ZaSearchOption.A_serverListChecked) {
		if (value.size () > 0) {
				entry = ZaSearchBuilderController.newGetOrFilter4ListArray (
						value.getArray(),
						ZaSearchOption.SERVER_FILTER_ID
						);
		}
	}else if (key == ZaSearchOption.A_cosListChecked) {
		if (value.size () > 0) {
			entry = ZaSearchBuilderController.newGetCosFilter4ListArray(value.getArray());
		}
	}else if (key == ZaSearchOption.A2_status_list) {
		if (value.length > 0) {
			entry = ZaSearchBuilderController.newGetOrFilter4ListArray(value, ZaSearchOption.STATUS_FILTER_ID);
		}
    }else if (key == ZaAccount.A_zimbraLastLogonTimestamp){
		entry = "("	+ key + op + value + ")";
	}else if (key == ZaSearchOption.A_zimbraMailForwardingAddress ){
		entry = "(" + key + "=*" + value + "*)" ;
        entry += "(" + ZaSearchOption.A_zimbraPrefMailForwardingAddress + "=*" + value + "*)" ;
        entry = "(|" + entry + ")";
    } else {
        entry = "(" + key + "=*" + value + "*)" ;
	}

	if (entry != null && entry.length > 0) {
		filter.push (entry) ;
	}

}

ZaSearchBuilderController.prototype.newGetQueryFromFilters =
function () {
	var query = "";
	var i = 0 ; //count the number of non empty valid options.

	for (var key in this._filterObj) {
        var filter = this.newGetOrFilter4SameOptionType (this._filterObj [key], key) ;
        if (filter != null && filter.length > 0) {
            query += filter ;
            i ++ ;
        }
	}

	if (i > 1) {
		query = "(&" + query + ")" ;
	}
	return query ;
}

//For the same option types
ZaSearchBuilderController.prototype.newGetOrFilter4SameOptionType =
function (arr, key) {
	var query = "";
	var numberOfFilters = 0;
	//special cases for the Never Logged In Accounts
	if (key == ZaSearchOption.LASTER_LOGIN_TIME_FILTER_ID){ //for the advanced attribute tab
		if (this._includeNeverLoggedInAccts) {
			query += "(!(" + ZaAccount.A_zimbraLastLogonTimestamp + "=*))" ;
			numberOfFilters ++ ;
		}
	}

	for (var i=0; i < arr.length; i++) {
		query += this.newGetAndFilter4EntriesInOneOption (arr[i]);
		numberOfFilters ++ ;
	}
	if (numberOfFilters > 1) {
		query = "(|" + query + ")";
	}
	return query ;
}

//for the filter entries in an option type
ZaSearchBuilderController.prototype.newGetAndFilter4EntriesInOneOption =
function (arr) {
	var query = arr.join("") ;
	if (arr.length > 1) {
		query = "(&" + query + ")";
	}
	return query ;
}

//for domain list and server list
ZaSearchBuilderController.newGetOrFilter4ListArray=
function (arr, optionId) {
	var query = "";
	for (var i =0; i < arr.length; i ++ ) {
		if (optionId == ZaSearchOption.DOMAIN_FILTER_ID) {
			query += "(" + ZaAccount.A_mailDeliveryAddress + "=*@" + arr[i] + ")"
				   + "(" + ZaAccount.A_zimbraMailAlias+ "=*@" + arr[i] + ")";
		}else if (optionId == ZaSearchOption.SERVER_FILTER_ID){
			query += "(" + ZaAccount.A_mailHost + "=" + arr[i] + ")";
		}else if (optionId == ZaSearchOption.STATUS_FILTER_ID){
			query += "(" + ZaAccount.A_accountStatus + "=" + arr[i] + ")";
		}
	}
	if (arr.length > 1 || (arr.length > 0 && optionId == ZaSearchOption.DOMAIN_FILTER_ID)) {
		query = "(|" + query + ")";
	}

	return query ;
}

ZaSearchBuilderController.newGetCosFilter4ListArray =
function (arr) {
	var query = "";
	var controller = ZaApp.getInstance().getSearchBuilderController();
	var cosids = controller._cosids;

    if(controller._includeObjectWithoutCosId) {
        query += "(!(" + ZaAccount.A_COSId + "=*))";
    }
	if(cosids && cosids.length  > 0) {
		for(var i = 0; i < arr.length && i < cosids.length; i++) {
			query += "(" + ZaAccount.A_COSId  + "=" + cosids[arr[i]] + ")";
		}
	}
        if (cosids.length > 1 || (cosids.length == 1 && controller._includeObjectWithoutCosId)) {
                query = "(|" + query + ")";
        }
	return query;
}


ZaSearchBuilderController.prototype.getFilterTreeItems =
function () {
    return [
        {text: ZaMsg.OVP_basicFilter,    filterType: ZaSearchOption.BASIC_FILTER_ID},
        {text: ZaMsg.OVP_statutsFilter, filterType: ZaSearchOption.STATUS_FILTER_ID},
        {text: ZaMsg.OVP_lltFilter,     filterType: ZaSearchOption.LASTER_LOGIN_TIME_FILTER_ID},
        {text: ZaMsg.OVP_eeaFilter,     filterType: ZaSearchOption.EXT_EMAIL_ADDRESS_FILTER_ID},
        {text: ZaMsg.OVP_cosFilter,     filterType: ZaSearchOption.COS_FILTER_ID},
        {text: ZaMsg.OVP_serverFilter,  filterType: ZaSearchOption.SERVER_FILTER_ID},
        {text: ZaMsg.OVP_domainFilter,  filterType: ZaSearchOption.DOMAIN_FILTER_ID}

    ];
}

ZaSearchBuilderController.searchFilterTreeListener =
function (ev) {
    var filterType = ev.item.getData("filterType");
    var loc = {};
    var treeItemBound = ev.item.getBounds();
    loc.x = treeItemBound.x + treeItemBound.width;
    loc.y = treeItemBound.y;
    var dialog;
    var sbController = ZaApp.getInstance().getSearchBuilderController();
    var skipDefaultValue = false;
    switch (filterType) {
        case ZaSearchOption.BASIC_FILTER_ID:
            dialog = sbController.getFilterDialogByType (ZaSearchOption.BASIC_FILTER_ID);
        break;
        case ZaSearchOption.SERVER_FILTER_ID:
            dialog = sbController.getFilterDialogByType (ZaSearchOption.SERVER_FILTER_ID, true);
            sbController.updateServerFilter(dialog);
            skipDefaultValue = true;
        break;
        case ZaSearchOption.COS_FILTER_ID:
            dialog = sbController.getFilterDialogByType (ZaSearchOption.COS_FILTER_ID);
        break;
        case ZaSearchOption.DOMAIN_FILTER_ID:
            dialog = sbController.getFilterDialogByType (ZaSearchOption.DOMAIN_FILTER_ID);
        break;
        case ZaSearchOption.EXT_EMAIL_ADDRESS_FILTER_ID:
            dialog = sbController.getFilterDialogByType (ZaSearchOption.EXT_EMAIL_ADDRESS_FILTER_ID);
        break;
        case ZaSearchOption.LASTER_LOGIN_TIME_FILTER_ID:
            dialog = sbController.getFilterDialogByType (ZaSearchOption.LASTER_LOGIN_TIME_FILTER_ID);
        break;
        case ZaSearchOption.STATUS_FILTER_ID:
            dialog = sbController.getFilterDialogByType (ZaSearchOption.STATUS_FILTER_ID);
        break;
    }
    if (dialog) {
        ZaSearchBuilderController.currentPopupDialog  = dialog;
        if (!skipDefaultValue)
            dialog._localXForm.setInstance(ZaSearchOption.getDefaultInstance(dialog._optionId));
        dialog.popup(loc);
	    var omem = DwtOutsideMouseEventMgr.INSTANCE;
	    var omemParams = {
		    id:					"ZaOptionView",
		    obj:				dialog,
		    outsideListener:	ZaSearchBuilderController.getOutsideListener()
	    }
	    omem.startListening(omemParams);
    }
}

ZaSearchBuilderController.filterDialogSet = {};
ZaSearchBuilderController.currentPopupDialog = undefined;
ZaSearchBuilderController.outSideListener = undefined;
ZaSearchBuilderController.prototype.getFilterDialogArray = function () {
    var result = [];
    for (var filterType in ZaSearchBuilderController.filterDialogSet) {
        if (ZaSearchBuilderController.filterDialogSet[filterType])
            result.push(ZaSearchBuilderController.filterDialogSet[filterType]);
    }
    return result;
}

ZaSearchBuilderController.getOutsideListener = function () {
    if (!ZaSearchBuilderController.outSideListener) {
        ZaSearchBuilderController.outSideListener = new AjxListener(null, ZaSearchBuilderController.outsideListener);
    }
    return ZaSearchBuilderController.outSideListener;
}

ZaSearchBuilderController.outsideListener = function (ev, context) {
    if(ZaSearchBuilderController.currentPopupDialog) {
        if (ZaSearchBuilderController._isChildMenuClicked(ev.target)) {
            return;
        }

        ZaSearchBuilderController.currentPopupDialog.popdown();
        var omem = DwtOutsideMouseEventMgr.INSTANCE;
        omem.stopListening({id:"ZaOptionView", obj:ZaSearchBuilderController.currentPopupDialog});
        ZaSearchBuilderController.currentPopupDialog = undefined;
    }
}

// Fix bug 69265: Search window goes away after selecting calendar date
// If a user clicks a dropdown menu in this dialog, and clicks the menu items, without this method,
// browser will consider the user clicks other part of the screen and popdown the dialog. But actually
// the dialog should not disappear, and the user should see the result he select.
// This method checks whether the target is a drop menu.
ZaSearchBuilderController._isChildMenuClicked = function (targetHtml) {
    while (targetHtml && targetHtml.className != "DwtShell") {
        if (targetHtml.className == "DwtMenu") {
            return true;
        }
        targetHtml = targetHtml.parentElement ? targetHtml.parentElement : targetHtml.parentNode;
    }
    return false;
}

ZaSearchBuilderController.prototype.getFilterDialogByType =
function (filterType, noCached) {
    if (!ZaSearchBuilderController.filterDialogSet[filterType] || noCached) {
        var w, h;
        if (filterType == ZaSearchOption.SERVER_FILTER_ID) {
            w = ZaSearchOptionView.WIDTH + 10;
            h = 150;
        } else if (filterType == ZaSearchOption.COS_FILTER_ID) {
            w = ZaSearchOptionView.COS_OPTION_WIDTH;
        } else if (filterType == ZaSearchOption.DOMAIN_FILTER_ID) {
            w = ZaSearchOptionView.DOMAIN_OPTION_WIDTH;
            h = 150;
        } else if (filterType == ZaSearchOption.EXT_EMAIL_ADDRESS_FILTER_ID) {
			w = 240;
			h= 60;
        }
        ZaSearchBuilderController.filterDialogSet[filterType] = new ZaSearchOptionDialog(ZaApp.getInstance().getAppCtxt().getShell(), filterType, w, h);
        ZaSearchBuilderController.filterDialogSet[filterType].registerCallback(DwtDialog.OK_BUTTON, this.filterOKListener, this, filterType);
    }
    return ZaSearchBuilderController.filterDialogSet[filterType];
}

ZaSearchBuilderController.prototype.filterOKListener =
function (filterType) {
    var dialog = this.getFilterDialogByType(filterType);
    dialog.popdown();
    dialog._controller.setNewQuery(dialog);
    var omem = DwtOutsideMouseEventMgr.INSTANCE;
    omem.stopListening({id:"ZaOptionView", obj:dialog});
    ZaSearchBuilderController.currentPopupDialog = undefined;
}
}
if (AjxPackage.define("zimbraAdmin.task.controller.ZaTaskController")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 9/5/11
 * Time: 12:27 AM
 * To change this template use File | Settings | File Templates.
 */
ZaTaskController = function(appCtxt, container) {
	ZaController.call(this, appCtxt, container,"ZaTaskController");
    this._workingInProcess = new AjxVector();
    this._workingInProcess.getArray()._version = 1;
    this._runningTask = new AjxVector();
    this._runningTask.getArray()._version = 1;
    this._notification = { _msgNames:{} };
}

ZaTaskController.prototype = new ZaController();
ZaTaskController.prototype.constructor = ZaTaskController;


ZaTaskController.prototype.getTaskHeaderPanel =
function() {
    if (!this._taskHeadPanel) {
        this._taskHeadPanel = new ZaTaskHeaderPanel(this._container);
    }
    return this._taskHeadPanel;
}

ZaTaskController.prototype.getTaskContentPanel =
function(entry) {
    if (!this._taskContentPanel) {
        if(!entry) {
            entry = new ZaTask();
            entry.load(false, false, true);
            entry[ZaModel.currentTab] = "1";
            entry[ZaModel.currentStep] = 1;
        }
        this._taskContentPanel = new ZaTaskContentView(this._container, entry);
        this._taskContentPanel.setObject(entry);
    }
    return this._taskContentPanel;
}

ZaTaskController.prototype.addTask = function(task) {
    var taskArray;
    var modelItem;
    if (task.type ==1) {
        taskArray =  this._workingInProcess;
        modelItem = ZaTask.A_workingInProcess;
    } else {
        taskArray =  this._runningTask;
        modelItem = ZaTask.A_runningTask;
    }
    var index= taskArray.indexOfLike(task, task.getData);
    taskArray.getArray()._version = taskArray.getArray()._version + 1;
    if (index == -1) {
        taskArray.add(task, undefined, true);
        this._taskContentPanel._localXForm.setInstanceValue(taskArray.getArray(),modelItem);
    }else{
        var currentTask = taskArray.get(index);
        task.displayName = currentTask.displayName;
        taskArray.replace(index, task);
        this._taskContentPanel._localXForm.setInstanceValue(taskArray.getArray(),modelItem);
    }
}

ZaTaskController.prototype.removeTask = function(task) {
    var taskArray;
    var modelItem;
    if (task.type ==1) {
        taskArray =  this._workingInProcess;
        modelItem = ZaTask.A_workingInProcess;
    } else {
        taskArray =  this._runningTask;
        modelItem = ZaTask.A_runningTask;
    }
    var index= taskArray.indexOfLike(task, task.getData);
    if (index != -1) {
        taskArray.getArray()._version = taskArray.getArray()._version + 1;
        taskArray.removeAt(index);
        this._taskContentPanel._localXForm.setInstanceValue(taskArray.getArray(),modelItem);
    }
}

ZaTaskController.prototype.setExpanded = function(isExpanded) {
    // TODO  remove this to view manager
    var width;
    if (isExpanded) {
        width = ZaSkin.hints.rightTask.maxWidth || 220;
    } else {
        width = ZaSkin.hints.rightTask.minWidth || 20;
    }
    window.skin.setToolWidth(width);
    window.skin._reflowApp();

    this._taskContentPanel._localXForm.setInstanceValue(isExpanded, ZaTask.A2_isExpanded);
}

ZaTaskController.prototype.setInstanceValue = function(value, ref){
    if( this._taskContentPanel && this._taskContentPanel._localXForm){
        this._taskContentPanel._localXForm.setInstanceValue(value, ref);
    }
}

ZaTaskController.prototype.getInstanceValue = function(ref){
    if( this._taskContentPanel && this._taskContentPanel._localXForm){
        return this._taskContentPanel._localXForm.getInstanceValue(ref);
    }
    return null;
}

ZaTaskController.prototype.increaseNotificationCount = function(msgName){
    if (AjxUtil.isEmpty(msgName)) {
        return;
    }
    //not allow more than once for the same msgName
    if (!this._notification._msgNames[msgName]) {
        this._notification._msgNames[msgName] = true;
        var count = this.getInstanceValue(ZaTask.A2_notificationCount) || 0;
        this.setInstanceValue(++count, ZaTask.A2_notificationCount);
    }

}

ZaTaskController.prototype.decreaseNotificationCount = function(msgName){
    if (AjxUtil.isEmpty(msgName)) {
        return;
    }

    //only allow the msgName has been added (marked true)
    if (this._notification._msgNames[msgName]) {
        this._notification._msgNames[msgName] = false;
        var count = this.getInstanceValue(ZaTask.A2_notificationCount) || 0;
        if ( count > 0 ){
            this.setInstanceValue(--count, ZaTask.A2_notificationCount);
        }
    }

}
}

// model
if (AjxPackage.define("zimbraAdmin.home.model.ZaHome")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 8/29/11
 * Time: 9:37 PM
 * To change this template use File | Settings | File Templates.
 */
ZaHome = function() {
	ZaItem.call(this,"ZaHome");
	this._init();
}
ZaItem.loadMethods["ZaHome"] = new Array();
ZaItem.initMethods["ZaHome"] = new Array();
ZaHome.postLoadDataFunction = new Array();

ZaHome.prototype = new ZaItem;
ZaHome.prototype.constructor = ZaHome;

ZaHome.A2_version= "version";
ZaHome.A2_account = "account";
ZaHome.A2_serverNum = "serverNum";
ZaHome.A2_accountNum = "accountNum";
ZaHome.A2_cosNum = "cosNum";
ZaHome.A2_domainNum = "domainNum";
ZaHome.A2_lastCleanup = "lastCleanup";
ZaHome.A2_lastCleanupTime = "lastCleanupTime";
ZaHome.A2_lastLogPurge = "lastLogPurge";
ZaHome.A2_lastLogPurgeTime = "lastLogPurgeTime";
ZaHome.A2_DBCheckType = "dbCheckType";
ZaHome.A2_DBCheckMessage= "dbCheckMessage";
ZaHome.A2_serviceStatus = "serviceStatus";
ZaHome.A2_serviceStatusMessage = "serviceStatusMessage";
ZaHome.A2_serviceDetailedMessage = "serviceDetailedMessage";
ZaHome.A2_activeSession = "activeSession";
ZaHome.A2_queueLength = "queueLength";
ZaHome.A2_messageCount = "messageCount";
ZaHome.A2_messageVolume = "messageVolume";

ZaHome.A2_showWarningPanel = "showWarningPanel";
ZaHome.A2_maintenanceItemNum = "maintenanceItemNum";
ZaHome.initMethod = function () {
	this.attrs = new Object();
	this.type = ZaItem.HOME;
}
ZaItem.initMethods["ZaHome"].push(ZaHome.initMethod);

// Fake here no soap request, just collect all kinds of information everywhere
ZaHome.loadMethod =
function () {
    var now = new Date();
    var formatter = AjxDateFormat.getDateInstance(AjxDateFormat.LONG);
    var currentTime = formatter.format(now);
    this.attrs[ZaHome.A2_account] = ZaZimbraAdmin.currentAdminAccount.attrs.mail;
    this.attrs[ZaHome.A2_version] = ZaServerVersionInfo.version;

    this.attrs[ZaHome.A2_accountNum] = ZaMsg.MSG_HomeLoading;
    this.attrs[ZaHome.A2_cosNum] = ZaMsg.MSG_HomeLoading;
    this.attrs[ZaHome.A2_domainNum] = ZaMsg.MSG_HomeLoading;
    this.attrs[ZaHome.A2_serverNum] = ZaMsg.MSG_HomeLoading;
    this.attrs[ZaHome.A2_activeSession] = ZaMsg.MSG_HomeLoading;

    this.attrs[ZaHome.A2_lastCleanup] = true;
    this.attrs[ZaHome.A2_lastCleanupTime] = currentTime;
    this.attrs[ZaHome.A2_lastLogPurge] = true;
    this.attrs[ZaHome.A2_lastLogPurgeTime] = currentTime;
    this.attrs[ZaHome.A2_DBCheckType] = true;
    this.attrs[ZaHome.A2_DBCheckMessage] = ZaMsg.LBL_HomeStatusOK;
    this.attrs[ZaHome.A2_serviceStatusMessage] = ZaMsg.MSG_HomeLoading;
    this.attrs[ZaHome.A2_serviceDetailedMessage] = ZaMsg.MSG_HomeLoading;
    this.attrs[ZaHome.A2_queueLength] = ZaMsg.MSG_HomeLoading;
    this.attrs[ZaHome.A2_messageCount] = "120/h";
    this.attrs[ZaHome.A2_messageVolume] = "34MB/h";

    this.attrs[ZaHome.A2_showWarningPanel] = false;
    this.attrs[ZaHome.A2_maintenanceItemNum] = 1;
}
ZaItem.loadMethods["ZaHome"].push(ZaHome.loadMethod);

ZaHome.updateMaintenanceNum = function() {
    var num = 1;
    try {
        var homeCtl = ZaApp.getInstance().getHomeViewController();
        var maintainenceGroup = homeCtl._view._localXForm.getItemsById("maintenance_grp");
        num = maintainenceGroup[0].items.length;
    } catch (ex) {

    }
    ZaApp.getInstance().getHomeViewController().setInstanceValue(num, ZaHome.A2_maintenanceItemNum);
}

ZaHome.postLoadDataFunction.push(ZaHome.updateMaintenanceNum);

ZaHome.accountStatCallback = function(accountStat) {
	ZaApp.getInstance().getHomeViewController().setInstanceValue(accountStat[ZaItem.ACCOUNT], ZaHome.A2_accountNum);
}

ZaHome.loadAccountNum = function() {
	var callback =  new AjxCallback(ZaHome.accountStatCallback);
	ZaSearch.getObjectCounts([ZaItem.ACCOUNT],callback);
}
ZaHome.postLoadDataFunction.push(ZaHome.loadAccountNum);

ZaHome.loadServerServerNum = function() {
    var soapDoc = AjxSoapDoc.create("GetAllServersRequest", ZaZimbraAdmin.URN, null);
	soapDoc.getMethod().setAttribute("applyConfig", "false");
//	var command = new ZmCsfeCommand();
    var updateServerNum = new AjxCallback(this, this.updateServerNum);
	var params = new Object();
	params.soapDoc = soapDoc;
	params.asyncMode = true;
    params.callback = updateServerNum;
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_GET_ALL_SERVER
	}
	var resp = ZaRequestMgr.invoke(params, reqMgrParams);
	return resp;
}

ZaHome.postLoadDataFunction.push(ZaHome.loadServerServerNum);

ZaHome.prototype.updateServerNum = function(resp) {
    var num = 1;
    try {
        var resp = resp.getResponse().Body.GetAllServersResponse;
        var list = new ZaItemList(ZaServer);
        list.loadFromJS(resp);
        num = list.size();
    } catch (ex) {

    }
    ZaApp.getInstance().getHomeViewController().setInstanceValue(num, ZaHome.A2_serverNum);
}

ZaHome.loadDomainNum = function() {
    var callback = function(domainList) {
        ZaApp.getInstance().getHomeViewController().setInstanceValue(domainList.size(), ZaHome.A2_domainNum);
    }
    try {
        ZaApp.getInstance().getDomainList(true, {asyncMode: true, callback: callback});
    } catch (ex) {
    }
}
ZaHome.postLoadDataFunction.push(ZaHome.loadDomainNum);

ZaHome.loadCosNum = function() {
	var callback = function(cosList) {
		ZaApp.getInstance().getHomeViewController().setInstanceValue(cosList.size(), ZaHome.A2_cosNum);
	};
	try {
		ZaApp.getInstance().getCosList(true, callback);
	} catch (ex) {

	}
};

ZaHome.postLoadDataFunction.push(ZaHome.loadCosNum);

ZaHome.prototype.updateCosNum = function(resp) {
    var num = 1;
    ZaApp.getInstance().getHomeViewController().setInstanceValue(num, ZaHome.A2_cosNum);
}

ZaHome.loadStatusfo = function () {
    try {
		var logHost = ZaApp.getInstance().getGlobalConfig().attrs[ZaServer.A_zimbraLogHostname];
		//if zimbraLogHostname is set
		if (logHost) {
			var soapDoc = AjxSoapDoc.create("GetServiceStatusRequest", ZaZimbraAdmin.URN, null);
            var updateServiceStatus = new AjxCallback(this, this.updateServiceStatus);
			var command = new ZmCsfeCommand();
			var params = new Object();
			params.soapDoc = soapDoc;
            params.asyncMode = true;
            params.noAuthToken = true;
            params.callback = updateServiceStatus;
			command.invoke(params);
		} else {
            this.updateServiceStatus();
        }
    } catch (ex) {
        this.attrs[ZaHome.A2_serviceStatusMessage] = ZaMsg.LBL_HOmeStatusUnknown ;
        this.attrs[ZaHome.A2_serviceDetailedMessage] = ZaMsg.LBL_HomeDetailedServiceUnknown;
    }
}
ZaHome.postLoadDataFunction.push(ZaHome.loadStatusfo);

ZaHome.prototype.updateServiceStatus = function (resp) {
    var status = new ZaStatus();
    if (resp) {
        resp = resp.getResponse().Body.GetServiceStatusResponse;
        status.initFromJS(resp);
    }
    var serviceStatus;
    var serviceStatusMessage = ZaMsg.LBL_HOmeStatusUnknown;
    var serviceDetailedMessage = ZaMsg.LBL_HomeDetailedServiceUnknown;
    try {
        var statusVector = status.getStatusVector();
        var serverStatus;
        if (statusVector.size() > 0) {
            serviceStatus = true;
            serviceStatusMessage = ZaMsg.LBL_HomeStatusRunning ;
            for(var i = 0; i < statusVector.size(); i++) {
                serverStatus = statusVector.get(i);
                if (serverStatus.status != 1) {
                    serviceStatus = false;
                    serviceStatusMessage= ZaMsg.LBL_HomeStatusFailed;
                    serviceDetailedMessage = ZaMsg.LBL_HomeDetailedServiceNotRunning;
                    break;
                }
            }
        }
    } catch (ex) {
    }
    var viewController = ZaApp.getInstance().getHomeViewController();
    viewController.setInstanceValue(serviceStatus, ZaHome.A2_serviceStatus);
    viewController.setInstanceValue(serviceStatusMessage, ZaHome.A2_serviceStatusMessage);
    viewController.setInstanceValue(serviceDetailedMessage, ZaHome.A2_serviceDetailedMessage);
    if (serviceStatus != true && ZaHomeXFormView.showStatusInfo()) {
        viewController.showWarningPanel();
    }
}

ZaHome.startLoadingSessions = function() {
	ZaHome.totalSession = 0;
	var callback = new AjxCallback(this,ZaHome.startLoadingSessionsCallback);
	ZaApp.getInstance().getMailServers(false, callback);
}
ZaHome.postLoadDataFunction.push(ZaHome.startLoadingSessions);

ZaHome.startLoadingSessionsCallback = function(resp) {
	if(resp.getResponse() && resp.getResponse().Body && resp.getResponse().Body.GetAllServersResponse) {
		var list = new ZaItemList(ZaServer);
		list.loadFromJS(resp.getResponse().Body.GetAllServersResponse);
		var serverArray = list.getArray();
		for(var i=0;i<serverArray.length;i++) {
			var server = serverArray[i];
			var callback = new AjxCallback(this,ZaHome.loadActiveSession,server);
			server.loadEffectiveRights("id", server.id, true,callback);
		}
	}
}


ZaHome.totalSession = 0;
ZaHome.loadActiveSession = function (server,rightsResp) {
	if(rightsResp && rightsResp.getResponse() && rightsResp.getResponse().Body && rightsResp.getResponse().Body.GetEffectiveRightsResponse && server) {
		
		server.initEffectiveRightsFromJS(rightsResp.getResponse().Body.GetEffectiveRightsResponse);

        var sessionType = ["soap", "admin", "imap"];
        for (var j = 0 ; j < sessionType.length; j ++) {
            if (ZaItem.hasRight(ZaServer.RIGHT_GET_SESSIONS, server)) {
                var sessionCallback = new  AjxCallback (this, ZaHome.loadOneSessionNumer);
                try {
                    var soapDoc = AjxSoapDoc.create("GetSessionsRequest", ZaZimbraAdmin.URN, null);
                    var params = {};
                    params.type = sessionType[j];

                    soapDoc.getMethod().setAttribute("type", params.type);

                    params.fresh = 1;
                    soapDoc.getMethod().setAttribute("refresh", params.fresh);

                    soapDoc.getMethod().setAttribute("limit", ZaServerSessionStatsPage.PAGE_LIMIT);

                    params.offset = 0 ;

                    soapDoc.getMethod().setAttribute("offset", params.offset);

                    params.sortBy = "nameAsc";

                    soapDoc.getMethod().setAttribute("sortBy", params.sortBy);

                    var getSessCmd = new ZmCsfeCommand ();
                    params.soapDoc = soapDoc ;
                    params.asyncMode = true;
                    params.noAuthToken = true;
                    params.callback = sessionCallback;

                    var resp = getSessCmd.invoke(params);
                } catch (ex) {
                    sessionCallback.run();
                }
            }
        }
    }
}

ZaHome.loadOneSessionNumer = function (resp) {
    if(resp && resp.getException && !resp.getException()) {
        resp = resp.getResponse();
        if (resp && resp.Body && resp.Body.GetSessionsResponse) {
            var sessionStats = resp.Body.GetSessionsResponse;
            ZaHome.totalSession += sessionStats.total;
        }
    }
    this.updateSessionNum(ZaHome.totalSession);
}

ZaHome.prototype.updateSessionNum = function(num) {
    ZaApp.getInstance().getHomeViewController().setInstanceValue(num, ZaHome.A2_activeSession);
}

ZaHome.startLoadingMTAS = function() {
	ZaHome.totalSession = 0;
	var postQList = ZaApp.getInstance().getPostQList();
	if (postQList) {
		var serverArray = postQList.getArray();
		for(var i = 0; i < serverArray.length; i++) {
			var server = serverArray[i];
			var callback = ZaHome.loadQueueLength.bind(this, server);
			server.loadEffectiveRights("id", server.id, true, callback);
		}
	}
}
ZaHome.postLoadDataFunction.push(ZaHome.startLoadingMTAS);

ZaHome.totalQueueLength = 0;
ZaHome.loadQueueLength = function (server,rightsResp) {
	if(rightsResp && rightsResp.getResponse() && rightsResp.getResponse().Body && rightsResp.getResponse().Body.GetEffectiveRightsResponse && server) {
		
		server.initEffectiveRightsFromJS(rightsResp.getResponse().Body.GetEffectiveRightsResponse);
		if(ZaItem.hasRight(ZaServer.MANAGE_MAIL_QUEUE_RIGHT, server)) {
            var isEx = false;
            var queueLengthCallback = new AjxCallback(this, ZaHome.loadOneQueueNumber);
            try {
                var soapDoc = AjxSoapDoc.create("GetMailQueueInfoRequest", ZaZimbraAdmin.URN, null);
                var attr = soapDoc.set("server", "");
                attr.setAttribute("name", server.name);
                var command = new ZmCsfeCommand();
                var params = new Object();
                params.soapDoc = soapDoc ;
                params.asyncMode = true;
                params.noAuthToken = true;
                params.callback = queueLengthCallback;
                command.invoke(params);
            } catch (ex) {
            	//
            }
        }
    } 
}

ZaHome.loadOneQueueNumber = function (resp) {
    if(resp && resp.getException && !resp.getException()) {
    	resp = resp.getResponse();
        var body = resp.Body;
        if(body && body.GetMailQueueInfoResponse.server && body.GetMailQueueInfoResponse.server[0]) {
            var queue =  body.GetMailQueueInfoResponse.server[0].queue;
            for ( var j in queue) {
                if (queue[j].n) {
                	ZaHome.totalQueueLength += parseInt(queue[j].n);
                }
            }
        }
    }
    this.updateQueueLength(ZaHome.totalQueueLength);
}
ZaHome.prototype.updateQueueLength = function(queueLength) {
    ZaApp.getInstance().getHomeViewController().setInstanceValue(queueLength, ZaHome.A2_queueLength);
}

ZaHome.prototype.schedulePostLoading = function () {
    // Don't disturbe the home view rendering process, when view is realy, start to update data.
    var act = new AjxTimedAction(this, ZaHome.prototype.startPostLoading);
	AjxTimedAction.scheduleAction(act, 100);
}

ZaHome.prototype.startPostLoading = function () {
    for (var i = 0; i < ZaHome.postLoadDataFunction.length; i++) {
        ZaHome.postLoadDataFunction[i].call(this);
    }
}

ZaHome.myXModel = {
    items: [
        {id:ZaHome.A2_version,type:_STRING_,  ref:"attrs/" + ZaHome.A2_version},
    	{id:ZaHome.A2_account,type:_STRING_, ref:"attrs/" + ZaHome.A2_account},
    	{id:ZaHome.A2_domainNum,type:_STRING_, ref:"attrs/" + ZaHome.A2_domainNum},
    	{id:ZaHome.A2_cosNum,type:_STRING_, ref:"attrs/" + ZaHome.A2_cosNum},
    	{id:ZaHome.A2_serverNum,type:_STRING_, ref:"attrs/" + ZaHome.A2_serverNum},
    	{id:ZaHome.A2_accountNum,type:_STRING_, ref:"attrs/" + ZaHome.A2_accountNum},
        {id:ZaHome.A2_lastCleanupTime, type:_STRING_, ref: "attrs/" + ZaHome.A2_lastCleanupTime},
        {id:ZaHome.A2_lastCleanup, type:_ENUM_, ref: "attrs/" + ZaHome.A2_lastCleanupTime, choices: ZaModel.BOOLEAN_CHOICES},
        {id:ZaHome.A2_lastLogPurgeTime, type:_STRING_, ref: "attrs/" + ZaHome.A2_lastLogPurgeTime},
        {id:ZaHome.A2_lastLogPurge, type:_ENUM_, ref: "attrs/" + ZaHome.A2_lastLogPurge, choices: ZaModel.BOOLEAN_CHOICES},
        {id:ZaHome.A2_DBCheckMessage, type:_STRING_, ref: "attrs/" + ZaHome.A2_DBCheckMessage},
        {id:ZaHome.A2_DBCheckType, type:_ENUM_, ref: "attrs/" + ZaHome.A2_DBCheckType, choices: ZaModel.BOOLEAN_CHOICES},
        {id:ZaHome.A2_serviceStatusMessage, type:_STRING_, ref: "attrs/" + ZaHome.A2_serviceStatusMessage},
        {id:ZaHome.A2_serviceDetailedMessage, type:_STRING_, ref: "attrs/" + ZaHome.A2_serviceDetailedMessage},
        {id:ZaHome.A2_serviceStatus, type:_ENUM_, ref: "attrs/" + ZaHome.A2_serviceStatus, choices: ZaModel.BOOLEAN_CHOICES},
        {id:ZaHome.A2_activeSession, type:_STRING_, ref:"attrs/" + ZaHome.A2_activeSession},
        {id:ZaHome.A2_queueLength, type:_STRING_, ref:"attrs/" + ZaHome.A2_queueLength},
        {id:ZaHome.A2_messageCount, type:_NUMBER_, ref:"attrs/" + ZaHome.A2_messageCount},
        {id:ZaHome.A2_messageVolume, type:_NUMBER_, ref:"attrs/" + ZaHome.A2_messageVolume},
        {id:ZaHome.A2_showWarningPanel, type:_ENUM_, ref:"attrs/" + ZaHome.A2_showWarningPanel, choices: ZaModel.BOOLEAN_CHOICES1},
        {id:ZaHome.A2_maintenanceItemNum, type:_NUMBER_, ref:"attrs/" + ZaHome.A2_maintenanceItemNum}
    ]
}

}
if (AjxPackage.define("zimbraAdmin.accounts.model.ZaDataSource")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaDataSource
* @contructor ZaDataSource
* @param ZaApp app
* this class is a model for zimbraDataSource and zimbraGalDataSource ldap objects
* @author Greg Solovyev
**/
ZaDataSource = function(noInit) {
	if (noInit) return;	
	ZaItem.call(this, "ZaDataSource");
	this._init();
	this.type = ZaItem.DATASOURCE;
}

ZaDataSource.prototype = new ZaItem;
ZaDataSource.prototype.constructor = ZaDataSource;

ZaDataSource.DS_TYPE_GAL = "gal";
ZaDataSource.GAL_TYPE_ZIMBRA = "zimbra";
ZaDataSource.GAL_TYPE_LDAP = "ldap";

ZaDataSource.A_zimbraGalLdapAttrMap = "zimbraGalLdapAttrMap";
ZaDataSource.A_zimbraGalSyncLdapURL = "zimbraGalSyncLdapURL";
ZaDataSource.A_zimbraGalSyncLdapSearchBase = "zimbraGalSyncLdapSearchBase";
ZaDataSource.A_zimbraGalSyncLdapFilter = "zimbraGalSyncLdapFilter";
ZaDataSource.A_zimbraGalSyncLdapAuthMech = "zimbraGalSyncLdapAuthMech";
ZaDataSource.A_zimbraGalSyncLdapBindDn = "zimbraGalSyncLdapBindDn";
ZaDataSource.A_zimbraGalSyncLdapBindPassword = "zimbraGalSyncLdapBindPassword";
ZaDataSource.A_zimbraGalSyncLdapKerberos5Principal = "zimbraGalSyncLdapKerberos5Principal";
ZaDataSource.A_zimbraGalSyncLdapKerberos5Keytab = "zimbraGalSyncLdapKerberos5Keytab";
ZaDataSource.A_zimbraGalSyncLdapPageSize = "zimbraGalSyncLdapPageSize";
ZaDataSource.A_zimbraGalSyncInternalSearchBase = "zimbraGalSyncInternalSearchBase";
ZaDataSource.A_zimbraGalSyncLdapStartTlsEnabled = "zimbraGalSyncLdapStartTlsEnabled";
ZaDataSource.A_zimbraGalLastSuccessfulSyncTimestamp = "zimbraGalLastSuccessfulSyncTimestamp";
ZaDataSource.A_zimbraGalLastFailedSyncTimestamp = "zimbraGalLastFailedSyncTimestamp";
ZaDataSource.A_zimbraGalStatus = "zimbraGalStatus";
ZaDataSource.A_zimbraGalType = "zimbraGalType";
ZaDataSource.A_zimbraGalSyncTimestampFormat = "zimbraGalSyncTimestampFormat";
ZaDataSource.A_zimbraDataSourceType = "zimbraDataSourceType";
ZaDataSource.A_zimbraDataSourcePollingInterval = "zimbraDataSourcePollingInterval";

ZaDataSource.myXModel = {
    items: [
    	{id:ZaDataSource.A_zimbraDataSourceType, type:_STRING_, ref:"attrs/" + ZaDataSource.A_zimbraDataSourceType},
    	{id:ZaDataSource.A_zimbraGalType, type:_STRING_, ref:"attrs/" + ZaDataSource.A_zimbraGalType},
    	{id:ZaDataSource.A_zimbraGalSyncLdapURL, type:_LIST_,  listItem:{type:_SHORT_URL_},  ref:"attrs/" + ZaDataSource.A_zimbraGalSyncLdapURL},
    	{id:ZaDataSource.A_zimbraGalSyncLdapFilter, type:_STRING_, ref:"attrs/" + ZaDataSource.A_zimbraGalSyncLdapFilter,required:true},
    	{id:ZaDataSource.A_zimbraGalSyncInternalSearchBase, type:_STRING_, ref:"attrs/" + ZaDataSource.A_zimbraGalSyncInternalSearchBase},
		{id:ZaDataSource.A_zimbraGalSyncLdapBindDn, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/" + ZaDataSource.A_zimbraGalSyncLdapBindDn},
		{id:ZaDataSource.A_zimbraGalSyncLdapBindPassword, type:_STRING_, ref:"attrs/" + ZaDataSource.A_zimbraGalSyncLdapBindPassword},
    	{id:ZaDataSource.A_zimbraGalSyncLdapStartTlsEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/" + ZaDataSource.A_zimbraGalSyncLdapStartTlsEnabled},
    	{id:ZaDataSource.A_zimbraGalSyncLdapAuthMech, type:_STRING_, ref:"attrs/" + ZaDataSource.A_zimbraGalSyncLdapAuthMech},
    	{id:ZaDataSource.A_zimbraDataSourcePollingInterval,type:_MLIFETIME_, ref:"attrs/" + ZaDataSource.A_zimbraDataSourcePollingInterval}
    ]
};
}
if (AjxPackage.define("zimbraAdmin.accounts.model.ZaAccount")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaAccount
* @contructor ZaAccount
* @param ZaApp app
* this class is a model for zimbraAccount ldap objects
* @author Roland Schemers
* @author Greg Solovyev
**/
ZaAccount = function(noInit) {
    if (noInit) return;
    ZaItem.call(this, "ZaAccount");
    this._init();
    this.type = ZaItem.ACCOUNT;
}

ZaAccount.prototype = new ZaItem;
ZaAccount.prototype.constructor = ZaAccount;

ZaItem.loadMethods["ZaAccount"] = new Array();
ZaItem.initMethods["ZaAccount"] = new Array();
ZaItem.modifyMethods["ZaAccount"] = new Array();
ZaItem.createMethods["ZaAccount"] = new Array();
ZaItem.ObjectModifiers["ZaAccount"] = [];
ZaItem.modelExtensions["ZaAccount"] = new Array();
ZaItem.getRelatedMethods["ZaAccount"] = new Array();
ZaAccount.renameMethods = new Array();
ZaAccount.changePasswordMethods = new Array();

//object attributes
ZaAccount.A_name = "name";
ZaAccount.A_uid = "uid";
ZaAccount.A_accountName = "cn"; //contact name
ZaAccount.A_firstName = "givenName"; //first name
ZaAccount.A_lastName = "sn"; //last name
ZaAccount.A_mail = "mail";
ZaAccount.A_password = "password";
ZaAccount.A_description = "description";
ZaAccount.A_telephoneNumber = "telephoneNumber";
ZaAccount.A_homePhone = "homePhone" ;
ZaAccount.A_mobile = "mobile";
ZaAccount.A_pager = "pager" ;
ZaAccount.A_displayname = "displayName";
ZaAccount.A_country = "co"; //country
ZaAccount.A_company = "company";
ZaAccount.A_title = "title";
ZaAccount.A_manager = "manager";
ZaAccount.A_facsimileTelephoneNumber = "facsimileTelephoneNumber";
ZaAccount.A_initials = "initials"; //middle initial
ZaAccount.A_city = "l";
ZaAccount.A_orgUnit = "ou";
ZaAccount.A_office = "physicalDeliveryOfficeName";
ZaAccount.A_street = "street";
ZaAccount.A_zip = "postalCode";
ZaAccount.A_state = "st";
ZaAccount.A_mailDeliveryAddress = "zimbraMailDeliveryAddress";
ZaAccount.A_accountStatus = "zimbraAccountStatus";
ZaAccount.A_notes = "zimbraNotes";
ZaAccount.A_zimbraMailQuota = "zimbraMailQuota";
ZaAccount.A_mailHost = "zimbraMailHost";
ZaAccount.A_zimbraMailTransport = "zimbraMailTransport";
ZaAccount.A_COSId = "zimbraCOSId";

//Phonetic attribute
ZaAccount.A_zimbraPhoneticFirstName = "zimbraPhoneticFirstName";
ZaAccount.A_zimbraPhoneticLastName = "zimbraPhoneticLastName";
ZaAccount.A_zimbraPhoneticCompany = "zimbraPhoneticCompany";

ZaAccount.A_zimbraIsAdminAccount = "zimbraIsAdminAccount";
ZaAccount.A_zimbraIsDelegatedAdminAccount = "zimbraIsDelegatedAdminAccount";
ZaAccount.A_zimbraIsExternalVirtualAccount = "zimbraIsExternalVirtualAccount";
// system account
ZaAccount.A_zimbraIsSystemAccount = "zimbraIsSystemAccount";

ZaAccount.A_zimbraMinPwdLength="zimbraPasswordMinLength";
ZaAccount.A_zimbraMaxPwdLength="zimbraPasswordMaxLength";
ZaAccount.A_zimbraPasswordMinUpperCaseChars = "zimbraPasswordMinUpperCaseChars";
ZaAccount.A_zimbraPasswordMinLowerCaseChars = "zimbraPasswordMinLowerCaseChars";
ZaAccount.A_zimbraPasswordMinPunctuationChars = "zimbraPasswordMinPunctuationChars";
ZaAccount.A_zimbraPasswordMinNumericChars = "zimbraPasswordMinNumericChars";
ZaAccount.A_zimbraPasswordMinDigitsOrPuncs = "zimbraPasswordMinDigitsOrPuncs";
ZaAccount.A_zimbraMinPwdAge="zimbraPasswordMinAge";
ZaAccount.A_zimbraMaxPwdAge="zimbraPasswordMaxAge";
ZaAccount.A_zimbraEnforcePwdHistory="zimbraPasswordEnforceHistory";
ZaAccount.A_zimbraPasswordBlockCommonEnabled="zimbraPasswordBlockCommonEnabled";
ZaAccount.A_zimbraMailAlias="zimbraMailAlias";
ZaAccount.A_zimbraMailForwardingAddress="zimbraMailForwardingAddress";
ZaAccount.A_zimbraPasswordMustChange="zimbraPasswordMustChange";
ZaAccount.A_zimbraPasswordLocked="zimbraPasswordLocked";
ZaAccount.A_zimbraContactMaxNumEntries = "zimbraContactMaxNumEntries";
ZaAccount.A_zimbraMailForwardingAddressMaxLength = "zimbraMailForwardingAddressMaxLength";
ZaAccount.A_zimbraMailForwardingAddressMaxNumAddrs = "zimbraMailForwardingAddressMaxNumAddrs";
ZaAccount.A_zimbraAttachmentsBlocked = "zimbraAttachmentsBlocked";
ZaAccount.A_zimbraQuotaWarnPercent = "zimbraQuotaWarnPercent";
ZaAccount.A_zimbraQuotaWarnInterval = "zimbraQuotaWarnInterval";
ZaAccount.A_zimbraQuotaWarnMessage = "zimbraQuotaWarnMessage";
ZaAccount.A_zimbraIsSystemResource = "zimbraIsSystemResource";
ZaAccount.A_zimbraExcludeFromCMBSearch = "zimbraExcludeFromCMBSearch";

ZaAccount.A_zimbraAdminAuthTokenLifetime  = "zimbraAdminAuthTokenLifetime";
ZaAccount.A_zimbraAuthTokenValidityValue = "zimbraAuthTokenValidityValue";
ZaAccount.A_zimbraAuthTokenLifetime = "zimbraAuthTokenLifetime";
ZaAccount.A_zimbraMailMessageLifetime = "zimbraMailMessageLifetime";
ZaAccount.A_zimbraMailSpamLifetime = "zimbraMailSpamLifetime";
ZaAccount.A_zimbraMailTrashLifetime = "zimbraMailTrashLifetime";
ZaAccount.A_zimbraMailIdleSessionTimeout = "zimbraMailIdleSessionTimeout";
ZaAccount.A_zimbraAvailableSkin = "zimbraAvailableSkin";
ZaAccount.A_zimbraZimletAvailableZimlets = "zimbraZimletAvailableZimlets";

ZaAccount.A_zimbraDataSourceMinPollingInterval = "zimbraDataSourceMinPollingInterval";
ZaAccount.A_zimbraDataSourcePop3PollingInterval = "zimbraDataSourcePop3PollingInterval";
ZaAccount.A_zimbraDataSourceImapPollingInterval = "zimbraDataSourceImapPollingInterval";
ZaAccount.A_zimbraDataSourceCalendarPollingInterval = "zimbraDataSourceCalendarPollingInterval";
ZaAccount.A_zimbraDataSourceRssPollingInterval = "zimbraDataSourceRssPollingInterval";
ZaAccount.A_zimbraDataSourceCaldavPollingInterval = "zimbraDataSourceCaldavPollingInterval";


ZaAccount.A_zimbraProxyAllowedDomains = "zimbraProxyAllowedDomains";
ZaAccount.A_zimbraIsCCAccount = "zimbraIsCustomerCareAccount";
//prefs
ZaAccount.A_zimbraPrefAppleIcalDelegationEnabled = "zimbraPrefAppleIcalDelegationEnabled";
ZaAccount.A_zimbraPrefCalendarShowPastDueReminders = "zimbraPrefCalendarShowPastDueReminders";
ZaAccount.A_zimbraPrefCalendarToasterEnabled = "zimbraPrefCalendarToasterEnabled";
ZaAccount.A_zimbraPrefCalendarAllowCancelEmailToSelf = "zimbraPrefCalendarAllowCancelEmailToSelf";
ZaAccount.A_zimbraPrefCalendarAllowPublishMethodInvite = "zimbraPrefCalendarAllowPublishMethodInvite";
ZaAccount.A_zimbraPrefCalendarAllowForwardedInvite = "zimbraPrefCalendarAllowForwardedInvite";
ZaAccount.A_zimbraPrefCalendarReminderFlashTitle = "zimbraPrefCalendarReminderFlashTitle";
ZaAccount.A_zimbraPrefCalendarNotifyDelegatedChanges = "zimbraPrefCalendarNotifyDelegatedChanges";
ZaAccount.A_zimbraPrefCalendarFirstDayOfWeek = "zimbraPrefCalendarFirstDayOfWeek";
ZaAccount.A_zimbraPrefCalendarInitialView = "zimbraPrefCalendarInitialView";
ZaAccount.A_zimbraPrefCalendarForwardInvitesTo = "zimbraPrefCalendarForwardInvitesTo";
ZaAccount.A_zimbraPrefClientType = "zimbraPrefClientType";
ZaAccount.A_zimbraPrefTimeZoneId = "zimbraPrefTimeZoneId";
ZaAccount.A_zimbraAllowAnyFromAddress = "zimbraAllowAnyFromAddress";
ZaAccount.A_zimbraAllowFromAddress = "zimbraAllowFromAddress";
ZaAccount.A_zimbraPrefCalendarAlwaysShowMiniCal = "zimbraPrefCalendarAlwaysShowMiniCal";
ZaAccount.A_zimbraPrefCalendarUseQuickAdd = "zimbraPrefCalendarUseQuickAdd";
ZaAccount.A_zimbraPrefSaveToSent="zimbraPrefSaveToSent";
ZaAccount.A_zimbraPrefMailSignature="zimbraPrefMailSignature";
ZaAccount.A_zimbraPrefMailSignatureEnabled="zimbraPrefMailSignatureEnabled";
ZaAccount.A_zimbraPrefSentMailFolder = "zimbraPrefSentMailFolder";
ZaAccount.A_zimbraPrefGroupMailBy = "zimbraPrefGroupMailBy";
ZaAccount.A_zimbraPrefIncludeSpamInSearch = "zimbraPrefIncludeSpamInSearch";
ZaAccount.A_zimbraPrefIncludeTrashInSearch = "zimbraPrefIncludeTrashInSearch";
ZaAccount.A_zimbraPrefMailInitialSearch = "zimbraPrefMailInitialSearch";
ZaAccount.A_zimbraMaxMailItemsPerPage = "zimbraMaxMailItemsPerPage";
ZaAccount.A_zimbraPrefMailItemsPerPage = "zimbraPrefMailItemsPerPage";
ZaAccount.A_zimbraPrefMailPollingInterval = "zimbraPrefMailPollingInterval";
ZaAccount.A_zimbraPrefAutoSaveDraftInterval = "zimbraPrefAutoSaveDraftInterval";
ZaAccount.A_zimbraPrefMailFlashTitle = "zimbraPrefMailFlashTitle";
ZaAccount.A_zimbraPrefMailFlashIcon = "zimbraPrefMailFlashIcon" ;
ZaAccount.A_zimbraPrefMailSoundsEnabled = "zimbraPrefMailSoundsEnabled" ;
ZaAccount.A_zimbraPrefMailToasterEnabled = "zimbraPrefMailToasterEnabled";
ZaAccount.A_zimbraMailMinPollingInterval = "zimbraMailMinPollingInterval";
ZaAccount.A_zimbraPrefOutOfOfficeFromDate = "zimbraPrefOutOfOfficeFromDate";
ZaAccount.A_zimbraPrefOutOfOfficeUntilDate = "zimbraPrefOutOfOfficeUntilDate";
ZaAccount.A_zimbraPrefOutOfOfficeReply = "zimbraPrefOutOfOfficeReply";
ZaAccount.A_zimbraPrefOutOfOfficeReplyEnabled = "zimbraPrefOutOfOfficeReplyEnabled";
ZaAccount.A_zimbraPrefReplyToAddress = "zimbraPrefReplyToAddress";
ZaAccount.A_zimbraPrefUseKeyboardShortcuts = "zimbraPrefUseKeyboardShortcuts";
ZaAccount.A_zimbraMemberOf = "zimbraMemberOf";
ZaAccount.A_zimbraPrefComposeInNewWindow = "zimbraPrefComposeInNewWindow";
ZaAccount.A_zimbraPrefForwardReplyInOriginalFormat = "zimbraPrefForwardReplyInOriginalFormat";
ZaAccount.A_zimbraPrefAutoAddAddressEnabled = "zimbraPrefAutoAddAddressEnabled";
ZaAccount.A_zimbraPrefComposeFormat = "zimbraPrefComposeFormat";
ZaAccount.A_zimbraPrefMessageViewHtmlPreferred = "zimbraPrefMessageViewHtmlPreferred";
ZaAccount.A_zimbraPrefNewMailNotificationAddress = "zimbraPrefNewMailNotificationAddress";
ZaAccount.A_zimbraPrefNewMailNotificationEnabled = "zimbraPrefNewMailNotificationEnabled";
ZaAccount.A_zimbraPrefOutOfOfficeReply = "zimbraPrefOutOfOfficeReply";
ZaAccount.A_zimbraPrefShowSearchString = "zimbraPrefShowSearchString";
//ZaAccount.A_zimbraPrefMailSignatureStyle = "zimbraPrefMailSignatureStyle";
ZaAccount.A_zimbraPrefUseTimeZoneListInCalendar = "zimbraPrefUseTimeZoneListInCalendar";
ZaAccount.A_zimbraPrefImapSearchFoldersEnabled = "zimbraPrefImapSearchFoldersEnabled";
ZaAccount.A_zimbraPrefMailForwardingAddress = "zimbraPrefMailForwardingAddress";
ZaAccount.A_zimbraPrefMailLocalDeliveryDisabled = "zimbraPrefMailLocalDeliveryDisabled";
ZaAccount.A_zimbraPrefCalendarApptReminderWarningTime = "zimbraPrefCalendarApptReminderWarningTime";
ZaAccount.A_zimbraPrefSkin = "zimbraPrefSkin";
ZaAccount.A_zimbraPrefGalAutoCompleteEnabled = "zimbraPrefGalAutoCompleteEnabled";
ZaAccount.A_zimbraPrefWarnOnExit = "zimbraPrefWarnOnExit" ;
ZaAccount.A_zimbraPrefShowSelectionCheckbox = "zimbraPrefShowSelectionCheckbox" ;
ZaAccount.A_zimbraPrefHtmlEditorDefaultFontSize = "zimbraPrefHtmlEditorDefaultFontSize" ;
ZaAccount.A_zimbraPrefHtmlEditorDefaultFontFamily = "zimbraPrefHtmlEditorDefaultFontFamily" ;
ZaAccount.A_zimbraPrefHtmlEditorDefaultFontColor = "zimbraPrefHtmlEditorDefaultFontColor" ;
ZaAccount.A_zimbraMailSignatureMaxLength = "zimbraMailSignatureMaxLength" ;
ZaAccount.A_zimbraPrefDisplayExternalImages = "zimbraPrefDisplayExternalImages" ;
ZaAccount.A_zimbraPrefOutOfOfficeCacheDuration = "zimbraPrefOutOfOfficeCacheDuration";
ZaAccount.A_zimbraPrefMailDefaultCharset = "zimbraPrefMailDefaultCharset";
ZaAccount.A_zimbraPrefLocale ="zimbraPrefLocale" ;
ZaAccount.A_zimbraJunkMessagesIndexingEnabled = "zimbraJunkMessagesIndexingEnabled" ;
ZaAccount.A_zimbraPrefMailSendReadReceipts = "zimbraPrefMailSendReadReceipts";
ZaAccount.A_zimbraPrefReadReceiptsToAddress = "zimbraPrefReadReceiptsToAddress";
ZaAccount.A_zimbraPrefAdminConsoleWarnOnExit = "zimbraPrefAdminConsoleWarnOnExit" ;
ZaAccount.A_zimbraPrefMandatorySpellCheckEnabled = "zimbraPrefMandatorySpellCheckEnabled";
ZaAccount.A_zimbraPrefMessageIdDedupingEnabled = "zimbraPrefMessageIdDedupingEnabled";
ZaAccount.A_zimbraPrefItemsPerVirtualPage="zimbraPrefItemsPerVirtualPage";
ZaAccount.A_zimbraPrefImapEnabled = "zimbraPrefImapEnabled";
ZaAccount.A_zimbraPrefPop3Enabled = "zimbraPrefPop3Enabled";

//features
ZaAccount.A_zimbraFeatureManageZimlets = "zimbraFeatureManageZimlets";
ZaAccount.A_zimbraFeatureImportFolderEnabled = "zimbraFeatureImportFolderEnabled";
ZaAccount.A_zimbraFeatureExportFolderEnabled = "zimbraFeatureExportFolderEnabled";
ZaAccount.A_zimbraDumpsterEnabled = "zimbraDumpsterEnabled";
ZaAccount.A_zimbraMailDumpsterLifetime = "zimbraMailDumpsterLifetime";
ZaAccount.A_zimbraDumpsterUserVisibleAge = "zimbraDumpsterUserVisibleAge";
ZaAccount.A_zimbraDumpsterPurgeEnabled = "zimbraDumpsterPurgeEnabled";
ZaAccount.A_zimbraPrefCalendarReminderSoundsEnabled = "zimbraPrefCalendarReminderSoundsEnabled";
ZaAccount.A_zimbraPrefCalendarSendInviteDeniedAutoReply = "zimbraPrefCalendarSendInviteDeniedAutoReply";
ZaAccount.A_zimbraPrefCalendarAutoAddInvites = "zimbraPrefCalendarAutoAddInvites";
ZaAccount.A_zimbraPrefCalendarApptVisibility = "zimbraPrefCalendarApptVisibility";
ZaAccount.A_zimbraFeatureReadReceiptsEnabled = "zimbraFeatureReadReceiptsEnabled";
ZaAccount.A_zimbraFeatureMailPriorityEnabled = "zimbraFeatureMailPriorityEnabled";
ZaAccount.A_zimbraFeatureImapDataSourceEnabled = "zimbraFeatureImapDataSourceEnabled";
ZaAccount.A_zimbraFeaturePop3DataSourceEnabled = "zimbraFeaturePop3DataSourceEnabled";
ZaAccount.A_zimbraFeatureMailSendLaterEnabled = "zimbraFeatureMailSendLaterEnabled";
//ZaAccount.A_zimbraFeatureFreeBusyViewEnabled = "zimbraFeatureFreeBusyViewEnabled";
ZaAccount.A_zimbraFeatureIdentitiesEnabled = "zimbraFeatureIdentitiesEnabled";
ZaAccount.A_zimbraFeatureMailForwardingEnabled = "zimbraFeatureMailForwardingEnabled";
ZaAccount.A_zimbraFeatureContactsEnabled="zimbraFeatureContactsEnabled";
ZaAccount.A_zimbraFeatureCalendarEnabled="zimbraFeatureCalendarEnabled";
ZaAccount.A_zimbraFeatureTasksEnabled="zimbraFeatureTasksEnabled";
ZaAccount.A_zimbraFeatureTaggingEnabled="zimbraFeatureTaggingEnabled";
ZaAccount.A_zimbraFeaturePeopleSearchEnabled = "zimbraFeaturePeopleSearchEnabled";
ZaAccount.A_zimbraFeatureAdvancedSearchEnabled="zimbraFeatureAdvancedSearchEnabled";
ZaAccount.A_zimbraFeatureSavedSearchesEnabled="zimbraFeatureSavedSearchesEnabled";
ZaAccount.A_zimbraFeatureConversationsEnabled="zimbraFeatureConversationsEnabled";
ZaAccount.A_zimbraFeatureChangePasswordEnabled="zimbraFeatureChangePasswordEnabled";
ZaAccount.A_zimbraFeatureInitialSearchPreferenceEnabled="zimbraFeatureInitialSearchPreferenceEnabled";
ZaAccount.A_zimbraFeatureFiltersEnabled="zimbraFeatureFiltersEnabled";
ZaAccount.A_zimbraFeatureGalEnabled="zimbraFeatureGalEnabled";
ZaAccount.A_zimbraFeatureMAPIConnectorEnabled = "zimbraFeatureMAPIConnectorEnabled";
ZaAccount.A_zimbraFeatureSharingEnabled="zimbraFeatureSharingEnabled";
ZaAccount.A_zimbraPublicSharingEnabled="zimbraPublicSharingEnabled";
ZaAccount.A_zimbraExternalSharingEnabled="zimbraExternalSharingEnabled";
//ZaAccount.A_zimbraFeatureNotebookEnabled = "zimbraFeatureNotebookEnabled";
ZaAccount.A_zimbraFeatureBriefcasesEnabled = "zimbraFeatureBriefcasesEnabled";
ZaAccount.A_zimbraFeatureHtmlComposeEnabled = "zimbraFeatureHtmlComposeEnabled";
ZaAccount.A_zimbraFeatureGalAutoCompleteEnabled = "zimbraFeatureGalAutoCompleteEnabled";
ZaAccount.A_zimbraImapEnabled = "zimbraImapEnabled";
ZaAccount.A_zimbraPop3Enabled = "zimbraPop3Enabled";
ZaAccount.A_zimbraFeatureWebClientEnabled = "zimbraFeatureWebClientEnabled";
ZaAccount.A_zimbraFeatureSkinChangeEnabled = "zimbraFeatureSkinChangeEnabled";
ZaAccount.A_zimbraFeatureOutOfOfficeReplyEnabled = "zimbraFeatureOutOfOfficeReplyEnabled";
ZaAccount.A_zimbraFeatureNewMailNotificationEnabled = "zimbraFeatureNewMailNotificationEnabled";
ZaAccount.A_zimbraHideInGal = "zimbraHideInGal";
ZaAccount.A_zimbraMailCanonicalAddress = "zimbraMailCanonicalAddress";
ZaAccount.A_zimbraMailCatchAllAddress = "zimbraMailCatchAllAddress" ;
ZaAccount.A_zimbraFeatureOptionsEnabled = "zimbraFeatureOptionsEnabled";
//ZaAccount.A_zimbraFeatureShortcutAliasesEnabled = "zimbraFeatureShortcutAliasesEnabled" ;
ZaAccount.A_zimbraFeatureMailEnabled = "zimbraFeatureMailEnabled" ;
ZaAccount.A_zimbraFeatureGroupCalendarEnabled = "zimbraFeatureGroupCalendarEnabled" ;
ZaAccount.A_zimbraFeatureFlaggingEnabled = "zimbraFeatureFlaggingEnabled" ;
ZaAccount.A_zimbraForeignPrincipal = "zimbraForeignPrincipal" ;

//security
ZaAccount.A_zimbraPasswordLockoutEnabled = "zimbraPasswordLockoutEnabled";
ZaAccount.A_zimbraPasswordLockoutDuration = "zimbraPasswordLockoutDuration";
ZaAccount.A_zimbraPasswordLockoutMaxFailures = "zimbraPasswordLockoutMaxFailures";
ZaAccount.A_zimbraPasswordLockoutFailureLifetime = "zimbraPasswordLockoutFailureLifetime";
ZaAccount.A_zimbraAdminConsoleUIComponents = "zimbraAdminConsoleUIComponents";
ZaAccount.A_zimbraAuthLdapExternalDn = "zimbraAuthLdapExternalDn";

ZaAccount.A_zimbraFreebusyExchangeUserOrg = "zimbraFreebusyExchangeUserOrg" ;
ZaAccount.A_zimbraFeatureManageSMIMECertificateEnabled = "zimbraFeatureManageSMIMECertificateEnabled";
ZaAccount.A_zimbraFeatureSMIMEEnabled = "zimbraFeatureSMIMEEnabled";
ZaAccount.A_zimbraFeatureEwsEnabled = "zimbraFeatureEwsEnabled";
ZaAccount.A_zimbraFeatureTouchClientEnabled = "zimbraFeatureTouchClientEnabled";
ZaAccount.A_zimbraFeatureWebClientOfflineAccessEnabled = "zimbraFeatureWebClientOfflineAccessEnabled";
ZaAccount.A_zimbraFeatureDistributionListFolderEnabled = "zimbraFeatureDistributionListFolderEnabled";

ZaAccount.A_zimbraFeatureCalendarReminderDeviceEmailEnabled = "zimbraFeatureCalendarReminderDeviceEmailEnabled";

//readonly
ZaAccount.A_zimbraLastLogonTimestamp = "zimbraLastLogonTimestamp";
ZaAccount.A_zimbraPasswordModifiedTime = "zimbraPasswordModifiedTime";


ZaAccount.ACCOUNT_STATUS_ACTIVE = "active";
ZaAccount.ACCOUNT_STATUS_MAINTENANCE = "maintenance";
ZaAccount.ACCOUNT_STATUS_LOCKED = "locked";
ZaAccount.ACCOUNT_STATUS_LOCKOUT = "lockout";
ZaAccount.ACCOUNT_STATUS_CLOSED = "closed";
ZaAccount.ACCOUNT_STATUS_PENDING = "pending" ;

//this attributes are not used in the XML object, but is used in the model
ZaAccount.A2_ldap_ds = "ldap_ds";
ZaAccount.A2_zimbra_ds = "zimbra_ds";
ZaAccount.A2_datasources = "datasources";
ZaAccount.A2_confirmPassword = "confirmPassword";
ZaAccount.A2_mbxsize = "mbxSize";
ZaAccount.A2_quota = "quota2";
ZaAccount.A2_autodisplayname = "autodisplayname";
ZaAccount.A2_autoMailServer = "automailserver";
ZaAccount.A2_autoCos = "autoCos" ;
ZaAccount.A2_myCOS = "mycos";
ZaAccount.A2_newAlias = "newalias";

//ZaAccount.A2_newForward = "newforward";
ZaAccount.A2_aliases = "aliases";
ZaAccount.A2_forwarding = "forwardings";

//Group (Member Of tab needed)
ZaAccount.A2_memberOf = "memberOf" ;
//ZaAccount.A2_isgroup = "isgroup" ;
ZaAccount.A2_directMemberList = "directMemberList" ;
ZaAccount.A2_indirectMemberList = "indirectMemberList";
ZaAccount.A2_nonMemberList = "nonMemberList" ;
ZaAccount.A2_nonMemberListSelected = "nonMemberListSelected" ;
ZaAccount.A2_indirectMemberListSelected = "indirectMemberListSelected" ;
ZaAccount.A2_directMemberListSelected = "directMemberListSelected" ;
ZaAccount.A2_showSameDomain = "showSameDomain" ;
ZaAccount.A2_domainLeftAccounts = "leftDomainAccounts" ;
ZaAccount.A2_publicMailURL = "publicMailURL";
ZaAccount.A2_adminSoapURL = "adminSoapURL";
ZaAccount.A2_soapURL = "soapURL";
ZaAccount.MAXSEARCHRESULTS = ZaSettings.MAXSEARCHRESULTS;
ZaAccount.RESULTSPERPAGE = ZaSettings.RESULTSPERPAGE;

ZaAccount.A2_accountTypes = "accountTypes" ; //used to save the account types available to this account based on domain
ZaAccount.A2_currentAccountType = "currentAccountType" ; //used to save the current account type - cos id
ZaAccount.A2_alias_selection_cache = "alias_selection_cache";
ZaAccount.A2_fwdAddr_selection_cache = "fwdAddr_selection_cache";
ZaAccount.A2_calFwdAddr_selection_cache = "calFwdAddr_selection_cache";
ZaAccount.A2_fp_selection_cache = "fp_selection_cache";
ZaAccount.A2_errorMessage = "errorMessage";
ZaAccount.A2_warningMessage = "warningMessage";
ZaAccount.A2_showAccountTypeMsg = "showAccountTypeMsg";
ZaAccount.A2_isExternalAuth = "isExternalAuth";
//constants for rights

ZaAccount.SET_PASSWORD_RIGHT = "setAccountPassword";
ZaAccount.CHANGE_PASSWORD_RIGHT = "changeAccountPassword"; // Enable password policy
ZaAccount.RENAME_ACCOUNT_RIGHT = "renameAccount";
ZaAccount.REINDEX_MBX_RIGHT = "reindexMailbox";
ZaAccount.DELETE_ACCOUNT_RIGHT = "deleteAccount";
ZaAccount.GET_MBX_DUMP_RIGHT = "getMailboxDump";
ZaAccount.VIEW_MAIL_RIGHT = "adminLoginAs";
ZaAccount.ADD_ACCOUNT_ALIAS_RIGHT = "addAccountAlias";
ZaAccount.REMOVE_ACCOUNT_ALIAS_RIGHT = "removeAccountAlias";
ZaAccount.GET_ACCOUNT_MEMBERSHIP_RIGHT = "getAccountMembership";
ZaAccount.GET_MAILBOX_INFO_RIGHT = "getMailboxInfo";
ZaAccount.GET_ACCOUNT_INFO_RIGHT = "getAccountInfo";
ZaAccount.RIGHT_VIEW_ADMINUI_COMPONENTS = "viewAccountAdminUI";
ZaAccount.RIGHT_DELETE_DL = "deleteDistributionList";
ZaAccount.RIGHT_LIST_ACCOUNT = "listAccount";
ZaAccount.checkValues =
function(tmpObj) {
    /**
    * check values
    **/

    if(ZaItem.hasWritePermission(ZaAccount.A_name,tmpObj) && (tmpObj.name == null || tmpObj.name.length < 1)) {
        //show error msg
        ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_ACCOUNT_NAME_REQUIRED);
        return false;
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_name,tmpObj) && ( tmpObj.name.length > 255)) {
        //show error msg
        ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_ACCOUNT_NAME_TOOLONG);
        return false;
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_lastName,tmpObj) && (tmpObj.attrs[ZaAccount.A_lastName] == null || tmpObj.attrs[ZaAccount.A_lastName].length < 1)) {
        //show error msg
        ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_ACCOUNT_LAST_NAME_REQUIRED);
        return false;
    }

    /*if(!AjxUtil.EMAIL_SHORT_RE.test(tmpObj.name) ) {
        //show error msg
        ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_ACCOUNT_NAME_INVALID);
        return false;
    }*/
    if(ZaItem.hasWritePermission(ZaAccount.A_name,tmpObj) && !AjxUtil.isValidEmailNonReg(tmpObj.name)) {
        ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_ACCOUNT_NAME_INVALID);
        return false;
    }

    var maxPwdLen = Number.POSITIVE_INFINITY;
    var minPwdLen = 0;
    var maxPwdAge = Number.POSITIVE_INFINITY;
    var minPwdAge = 0;


    //validate this account's password constraints
    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMinPwdLength,tmpObj) && tmpObj.attrs[ZaAccount.A_zimbraMinPwdLength] != "" && tmpObj.attrs[ZaAccount.A_zimbraMinPwdLength] !=null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaAccount.A_zimbraMinPwdLength])) {
        //show error msg
        ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMinPwdLength])) ;
        return false;
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMaxPwdLength,tmpObj) && tmpObj.attrs[ZaAccount.A_zimbraMaxPwdLength] != "" && tmpObj.attrs[ZaAccount.A_zimbraMaxPwdLength] !=null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaAccount.A_zimbraMaxPwdLength])) {
        //show error msg
        ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMaxPwdLength])) ;
        return false;
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMaxPwdLength,tmpObj) && tmpObj.attrs[ZaAccount.A_zimbraMaxPwdLength])
        tmpObj.attrs[ZaAccount.A_zimbraMaxPwdLength] = parseInt(tmpObj.attrs[ZaAccount.A_zimbraMaxPwdLength]);

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMinPwdLength,tmpObj) && tmpObj.attrs[ZaAccount.A_zimbraMinPwdLength])
        tmpObj.attrs[ZaAccount.A_zimbraMinPwdLength] = parseInt(tmpObj.attrs[ZaAccount.A_zimbraMinPwdLength]);

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMinPwdAge,tmpObj) && tmpObj.attrs[ZaAccount.A_zimbraMinPwdAge] != "" && tmpObj.attrs[ZaAccount.A_zimbraMinPwdAge] !=null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaAccount.A_zimbraMinPwdAge])) {
        //show error msg
        ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMinPwdAge])) ;
        return false;
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMaxPwdAge,tmpObj) && tmpObj.attrs[ZaAccount.A_zimbraMaxPwdAge] != "" && tmpObj.attrs[ZaAccount.A_zimbraMaxPwdAge] !=null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaAccount.A_zimbraMaxPwdAge])) {
        //show error msg
        ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMaxPwdAge])) ;
        return false;
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMinPwdAge,tmpObj) && tmpObj.attrs[ZaAccount.A_zimbraMinPwdAge])
        tmpObj.attrs[ZaAccount.A_zimbraMinPwdAge] = parseInt(tmpObj.attrs[ZaAccount.A_zimbraMinPwdAge]);

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMaxPwdAge,tmpObj) && tmpObj.attrs[ZaCos.A_zimbraMaxPwdAge])
        tmpObj.attrs[ZaCos.A_zimbraMaxPwdAge] = parseInt(tmpObj.attrs[ZaCos.A_zimbraMaxPwdAge]);

    //validate password length against this account's or COS setting
    //if the account did not have a valid cos id - pick the first COS
    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMinPwdLength,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraMinPwdLength] != null) {
            minPwdLen = parseInt(tmpObj.attrs[ZaAccount.A_zimbraMinPwdLength]);
        } else {
            minPwdLen = parseInt(tmpObj._defaultValues.attrs[ZaAccount.A_zimbraMinPwdLength]);
        }
    }
    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMaxPwdLength,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraMaxPwdLength] != null) {
            maxPwdLen = parseInt (tmpObj.attrs[ZaAccount.A_zimbraMaxPwdLength]);
        } else {
            maxPwdLen = parseInt (tmpObj._defaultValues.attrs[ZaAccount.A_zimbraMaxPwdLength]);
        }
    }
    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMaxPwdLength,tmpObj) || ZaItem.hasWritePermission(ZaAccount.A_zimbraMinPwdLength,tmpObj)) {
        if(maxPwdLen < minPwdLen) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_MAX_MIN_PWDLENGTH);
            return false;
        }
    }

    //validate password age settings
    //if the account did not have a valid cos id - pick the first COS
    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMaxPwdLength,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraMaxPwdAge] != null) {
            maxPwdAge = parseInt (tmpObj.attrs[ZaAccount.A_zimbraMaxPwdAge]);
        } else {
            maxPwdAge = parseInt ( tmpObj._defaultValues.attrs[ZaAccount.A_zimbraMaxPwdAge]);
        }
    }
    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMinPwdAge,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraMinPwdAge] != null) {
            minPwdAge = parseInt (tmpObj.attrs[ZaAccount.A_zimbraMinPwdAge]);
        } else {
            minPwdAge = parseInt (tmpObj._defaultValues.attrs[ZaCos.A_zimbraMinPwdAge]);
        }
    }
    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMaxPwdLength,tmpObj) || ZaItem.hasWritePermission(ZaAccount.A_zimbraMinPwdLength,tmpObj)) {
        if(maxPwdAge < minPwdAge) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_MAX_MIN_PWDAGE);
            return false;
        }
    }
    //if there is a password - validate it
    if(ZaItem.hasAnyRight([ZaAccount.SET_PASSWORD_RIGHT, ZaAccount.CHANGE_PASSWORD_RIGHT],tmpObj)) {
        if(!AjxUtil.isEmpty(tmpObj.attrs[ZaAccount.A_password]) || !AjxUtil.isEmpty(tmpObj[ZaAccount.A2_confirmPassword])) {
            if(tmpObj.attrs[ZaAccount.A_password] != tmpObj[ZaAccount.A2_confirmPassword]) {
                //show error msg
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_MISMATCH);
                return false;
            }
            if(tmpObj.attrs[ZaAccount.A_password].length < minPwdLen || AjxStringUtil.trim(tmpObj.attrs[ZaAccount.A_password]).length < minPwdLen) {
                //show error msg
                var minpassMsg;
                if (minPwdLen > 1) {
                    minpassMsg =  String(ZaMsg.NAD_passMinLengthMsg_p).replace("{0}",minPwdLen);
                } else {
                    minpassMsg =  String(ZaMsg.NAD_passMinLengthMsg_s).replace("{0}",minPwdLen);
                }
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_TOOSHORT + "<br>" + minpassMsg);
                return false;
            }

            if(AjxStringUtil.trim(tmpObj.attrs[ZaAccount.A_password]).length > maxPwdLen) {
                //show error msg
                //show error msg
                var maxpassMsg;
                if (maxPwdLen > 1) {
                    maxpassMsg =  String(ZaMsg.NAD_passMaxLengthMsg_p).replace("{0}",maxPwdLen);
                } else {
                    maxpassMsg =  String(ZaMsg.NAD_passMaxLengthMsg_s).replace("{0}",maxPwdLen);
                }
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_TOOLONG+ "<br>" + maxpassMsg);
                return false;
            }
        }
    }
    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMailQuota,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraMailQuota] != "" && tmpObj.attrs[ZaAccount.A_zimbraMailQuota] !=null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaAccount.A_zimbraMailQuota])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMailQuota])) ;
            return false;
        }
    }
    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraContactMaxNumEntries,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraContactMaxNumEntries] != "" && tmpObj.attrs[ZaAccount.A_zimbraContactMaxNumEntries] !=null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaAccount.A_zimbraContactMaxNumEntries])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraContactMaxNumEntries])) ;
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMailForwardingAddressMaxLength,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraMailForwardingAddressMaxLength] != "" && tmpObj.attrs[ZaAccount.A_zimbraMailForwardingAddressMaxLength] !=null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaAccount.A_zimbraMailForwardingAddressMaxLength])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMailForwardingAddressMaxLength])) ;
            return false;
        }
    }
        if(ZaItem.hasWritePermission(ZaAccount.A_zimbraDataSourceMinPollingInterval,tmpObj)) {
                var min_dataInterval = tmpObj.attrs[ZaAccount.A_zimbraDataSourceMinPollingInterval];
                if (!AjxUtil.isEmpty(min_dataInterval) && !AjxUtil.isLifeTime(min_dataInterval)) {
                        ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraDataSourceMinPollingInterval])) ;
                        return false;
                }
        }
        if(ZaItem.hasWritePermission(ZaAccount.A_zimbraDataSourcePop3PollingInterval,tmpObj)) {
                var p_dataInterval = tmpObj.attrs[ZaAccount.A_zimbraDataSourcePop3PollingInterval];
                if (!AjxUtil.isEmpty(p_dataInterval) && !AjxUtil.isLifeTime(p_dataInterval)) {
                        ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraDataSourcePop3PollingInterval]));
                        return false;
                }
                if (!AjxUtil.isEmpty(min_dataInterval)) {
                        min_dataInterval = tmpObj._defaultValues.attrs[ZaAccount.A_zimbraDataSourceMinPollingInterval];
                }
                if(!AjxUtil.isEmpty(p_dataInterval) && !AjxUtil.isEmpty(min_dataInterval)) {
                        if (ZaUtil.getLifeTimeInSeconds(p_dataInterval) < ZaUtil.getLifeTimeInSeconds(min_dataInterval)){
                                ZaApp.getInstance().getCurrentController().popupErrorDialog (ZaMsg.tt_mailPollingIntervalError + min_dataInterval);
                                return false;
                        }
                }
        }
        if(ZaItem.hasWritePermission(ZaAccount.A_zimbraDataSourceImapPollingInterval,tmpObj)) {
                var p_dataInterval = tmpObj.attrs[ZaAccount.A_zimbraDataSourceImapPollingInterval];
                if (!AjxUtil.isEmpty(p_dataInterval) && !AjxUtil.isLifeTime(p_dataInterval)) {
                        ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraDataSourceImapPollingInterval]));
                        return false;
                }
                if (!AjxUtil.isEmpty(min_dataInterval)) {
                    min_dataInterval = tmpObj._defaultValues.attrs[ZaAccount.A_zimbraDataSourceMinPollingInterval];
                }
                if (!AjxUtil.isEmpty(p_dataInterval) && !AjxUtil.isEmpty(min_dataInterval)) {
                        if (ZaUtil.getLifeTimeInSeconds(p_dataInterval) < ZaUtil.getLifeTimeInSeconds(min_dataInterval)){
                                ZaApp.getInstance().getCurrentController().popupErrorDialog (ZaMsg.tt_mailPollingIntervalError + min_dataInterval);
                                return false;
                        }
                }
        }
        if(ZaItem.hasWritePermission(ZaAccount.A_zimbraDataSourceCalendarPollingInterval,tmpObj)) {
                var p_dataInterval = tmpObj.attrs[ZaAccount.A_zimbraDataSourceCalendarPollingInterval];
                if (!AjxUtil.isEmpty(p_dataInterval) && !AjxUtil.isLifeTime(p_dataInterval)) {
                        ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraDataSourceCalendarPollingInterval]));
                        return false;
                }
                if (!AjxUtil.isEmpty(min_dataInterval)) {
                    min_dataInterval = tmpObj._defaultValues.attrs[ZaAccount.A_zimbraDataSourceMinPollingInterval];
                }
                if (!AjxUtil.isEmpty(p_dataInterval) && !AjxUtil.isEmpty(min_dataInterval)) {
                        if (ZaUtil.getLifeTimeInSeconds(p_dataInterval) < ZaUtil.getLifeTimeInSeconds(min_dataInterval)){
                                ZaApp.getInstance().getCurrentController().popupErrorDialog (ZaMsg.tt_mailPollingIntervalError + min_dataInterval);
                                return false;
                        }
                }
        }
        if(ZaItem.hasWritePermission(ZaAccount.A_zimbraDataSourceRssPollingInterval,tmpObj)) {
                var p_dataInterval = tmpObj.attrs[ZaAccount.A_zimbraDataSourceRssPollingInterval];
                if (!AjxUtil.isEmpty(p_dataInterval) && !AjxUtil.isLifeTime(p_dataInterval)) {
                        ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraDataSourceRssPollingInterval]));
                        return false;
                }
                if (!AjxUtil.isEmpty(min_dataInterval)) {
                    min_dataInterval = tmpObj._defaultValues.attrs[ZaAccount.A_zimbraDataSourceMinPollingInterval];
                }
                if (!AjxUtil.isEmpty(p_dataInterval) && !AjxUtil.isEmpty(min_dataInterval)) {
                        if (ZaUtil.getLifeTimeInSeconds(p_dataInterval) < ZaUtil.getLifeTimeInSeconds(min_dataInterval)){
                                ZaApp.getInstance().getCurrentController().popupErrorDialog (ZaMsg.tt_mailPollingIntervalError + min_dataInterval);
                                return false;
                        }
                }
        }
        if(ZaItem.hasWritePermission(ZaAccount.A_zimbraDataSourceCaldavPollingInterval,tmpObj)) {
                var p_dataInterval = tmpObj.attrs[ZaAccount.A_zimbraDataSourceCaldavPollingInterval];
                if (!AjxUtil.isEmpty(p_dataInterval) && !AjxUtil.isLifeTime(p_dataInterval)) {
                        ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraDataSourceCaldavPollingInterval]));
                        return false;
                }
                if (!AjxUtil.isEmpty(min_dataInterval)) {
                    min_dataInterval = tmpObj._defaultValues.attrs[ZaAccount.A_zimbraDataSourceMinPollingInterval];
                }
                if (!AjxUtil.isEmpty(p_dataInterval) && !AjxUtil.isEmpty(min_dataInterval)) {
                        if (ZaUtil.getLifeTimeInSeconds(p_dataInterval) < ZaUtil.getLifeTimeInSeconds(min_dataInterval)){
                                ZaApp.getInstance().getCurrentController().popupErrorDialog (ZaMsg.tt_mailPollingIntervalError + min_dataInterval);
                                return false;
                        }
                }
        }

        if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPrefAutoSaveDraftInterval,tmpObj)) {
                var p_autoSaveInterval = tmpObj.attrs[ZaAccount.A_zimbraPrefAutoSaveDraftInterval] ;
                if( p_autoSaveInterval != "" && p_autoSaveInterval !=null && !AjxUtil.isLifeTime(p_autoSaveInterval)) {
                        ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPrefAutoSaveDraftInterval])) ;
                        return false;
                }
        }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMailForwardingAddressMaxNumAddrs,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraMailForwardingAddressMaxNumAddrs] != "" && tmpObj.attrs[ZaAccount.A_zimbraMailForwardingAddressMaxNumAddrs] !=null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaAccount.A_zimbraMailForwardingAddressMaxNumAddrs])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMailForwardingAddressMaxNumAddrs])) ;
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraContactMaxNumEntries,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraContactMaxNumEntries])
            tmpObj.attrs[ZaAccount.A_zimbraContactMaxNumEntries] = parseInt    (tmpObj.attrs[ZaAccount.A_zimbraContactMaxNumEntries]);
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPasswordMinUpperCaseChars,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraPasswordMinUpperCaseChars] != "" && tmpObj.attrs[ZaAccount.A_zimbraPasswordMinUpperCaseChars] !=null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaAccount.A_zimbraPasswordMinUpperCaseChars])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPasswordMinUpperCaseChars])) ;
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPasswordMinUpperCaseChars,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraPasswordMinUpperCaseChars])
            tmpObj.attrs[ZaAccount.A_zimbraPasswordMinUpperCaseChars] = parseInt    (tmpObj.attrs[ZaAccount.A_zimbraPasswordMinUpperCaseChars]);
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPasswordMinLowerCaseChars,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraPasswordMinLowerCaseChars] != "" && tmpObj.attrs[ZaAccount.A_zimbraPasswordMinLowerCaseChars] !=null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaAccount.A_zimbraPasswordMinLowerCaseChars])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPasswordMinLowerCaseChars])) ;
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPasswordMinLowerCaseChars,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraPasswordMinLowerCaseChars])
            tmpObj.attrs[ZaAccount.A_zimbraPasswordMinLowerCaseChars] = parseInt    (tmpObj.attrs[ZaAccount.A_zimbraPasswordMinLowerCaseChars]);
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPasswordMinPunctuationChars,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraPasswordMinPunctuationChars] != "" && tmpObj.attrs[ZaAccount.A_zimbraPasswordMinPunctuationChars] !=null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaAccount.A_zimbraPasswordMinPunctuationChars])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPasswordMinPunctuationChars])) ;
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPasswordMinPunctuationChars,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraPasswordMinPunctuationChars])
            tmpObj.attrs[ZaAccount.A_zimbraPasswordMinPunctuationChars] = parseInt    (tmpObj.attrs[ZaAccount.A_zimbraPasswordMinPunctuationChars]);
    }
    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPasswordMinNumericChars,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraPasswordMinNumericChars] != "" && tmpObj.attrs[ZaAccount.A_zimbraPasswordMinNumericChars] !=null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaAccount.A_zimbraPasswordMinNumericChars])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPasswordMinNumericChars])) ;
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPasswordMinNumericChars,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraPasswordMinNumericChars])
            tmpObj.attrs[ZaAccount.A_zimbraPasswordMinNumericChars] = parseInt    (tmpObj.attrs[ZaAccount.A_zimbraPasswordMinNumericChars]);
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPasswordMinDigitsOrPuncs,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraPasswordMinDigitsOrPuncs] != "" && tmpObj.attrs[ZaAccount.A_zimbraPasswordMinDigitsOrPuncs] !=null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaAccount.A_zimbraPasswordMinDigitsOrPuncs])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPasswordMinDigitsOrPuncs])) ;
            return false;
        }
    }
    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPasswordMinDigitsOrPuncs,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraPasswordMinDigitsOrPuncs])
            tmpObj.attrs[ZaAccount.A_zimbraPasswordMinDigitsOrPuncs] = parseInt    (tmpObj.attrs[ZaAccount.A_zimbraPasswordMinDigitsOrPuncs]);
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraAuthTokenLifetime,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraAuthTokenLifetime] != "" && tmpObj.attrs[ZaAccount.A_zimbraAuthTokenLifetime] !=null && !AjxUtil.isLifeTime(tmpObj.attrs[ZaAccount.A_zimbraAuthTokenLifetime])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraAuthTokenLifetime])) ;
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraAdminAuthTokenLifetime,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraAdminAuthTokenLifetime] != "" && tmpObj.attrs[ZaAccount.A_zimbraAdminAuthTokenLifetime] !=null && !AjxUtil.isLifeTime(tmpObj.attrs[ZaAccount.A_zimbraAdminAuthTokenLifetime])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraAdminAuthTokenLifetime])) ;
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPrefOutOfOfficeCacheDuration,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraPrefOutOfOfficeCacheDuration] != "" && tmpObj.attrs[ZaAccount.A_zimbraPrefOutOfOfficeCacheDuration] !=null && !AjxUtil.isLifeTime(tmpObj.attrs[ZaAccount.A_zimbraPrefOutOfOfficeCacheDuration])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPrefOutOfOfficeCacheDuration])) ;
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPrefMailPollingInterval,tmpObj)) {
        var p_mailPollingInterval = tmpObj.attrs[ZaAccount.A_zimbraPrefMailPollingInterval] ;
        if( p_mailPollingInterval != "" && p_mailPollingInterval !=null && !AjxUtil.isLifeTime(p_mailPollingInterval)) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPrefMailPollingInterval])) ;
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMailMinPollingInterval,tmpObj)) {
        var min_mailPollingInterval = tmpObj.attrs[ZaAccount.A_zimbraMailMinPollingInterval]
        if( min_mailPollingInterval != "" && min_mailPollingInterval !=null && !AjxUtil.isLifeTime(min_mailPollingInterval)) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMailMinPollingInterval])) ;
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMailMinPollingInterval,tmpObj)) {
        if (min_mailPollingInterval == "" || min_mailPollingInterval == null) {
            //take the cos value
            min_mailPollingInterval = tmpObj._defaultValues.attrs[ZaAccount.A_zimbraMailMinPollingInterval];
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPrefMailPollingInterval,tmpObj)) {
        if (p_mailPollingInterval == "" || p_mailPollingInterval == null){
            p_mailPollingInterval = tmpObj._defaultValues.attrs[ZaAccount.A_zimbraPrefMailPollingInterval];
        }
        if(p_mailPollingInterval != null && min_mailPollingInterval != null) {
            if (ZaUtil.getLifeTimeInSeconds(p_mailPollingInterval) < ZaUtil.getLifeTimeInSeconds(min_mailPollingInterval)){
                ZaApp.getInstance().getCurrentController().popupErrorDialog (ZaMsg.tt_mailPollingIntervalError + min_mailPollingInterval) ;
                return false ;
            }
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMailIdleSessionTimeout,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraMailIdleSessionTimeout] != "" && tmpObj.attrs[ZaAccount.A_zimbraMailIdleSessionTimeout] !=null && !AjxUtil.isLifeTime(tmpObj.attrs[ZaAccount.A_zimbraMailIdleSessionTimeout])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMailIdleSessionTimeout])) ;
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMailMessageLifetime,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraMailMessageLifetime] != "" && tmpObj.attrs[ZaAccount.A_zimbraMailMessageLifetime] !=null) {
            if(!AjxUtil.isLifeTime(tmpObj.attrs[ZaAccount.A_zimbraMailMessageLifetime])) {
                //show error msg
                ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMailMessageLifetime])) ;
                return false;
            }
            var itestVal = parseInt(tmpObj.attrs[ZaAccount.A_zimbraMailMessageLifetime].substr(0, tmpObj.attrs[ZaAccount.A_zimbraMailMessageLifetime].length-1));
            if(itestVal > 0 && itestVal < 31) {
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_MESSAGE_LIFETIME_BELOW_31);
                return false;
            }
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMailTrashLifetime,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraMailTrashLifetime] != "" && tmpObj.attrs[ZaAccount.A_zimbraMailTrashLifetime] !=null && !AjxUtil.isLifeTime(tmpObj.attrs[ZaAccount.A_zimbraMailTrashLifetime])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMailTrashLifetime])) ;
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMailSpamLifetime,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraMailSpamLifetime] != "" && tmpObj.attrs[ZaAccount.A_zimbraMailSpamLifetime] != 0 && tmpObj.attrs[ZaAccount.A_zimbraMailSpamLifetime] !=null && !AjxUtil.isLifeTime(tmpObj.attrs[ZaAccount.A_zimbraMailSpamLifetime])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMailSpamLifetime])) ;
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPasswordLockoutFailureLifetime,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraPasswordLockoutFailureLifetime] != "" && tmpObj.attrs[ZaAccount.A_zimbraPasswordLockoutFailureLifetime] !=null && !AjxUtil.isLifeTime(tmpObj.attrs[ZaAccount.A_zimbraPasswordLockoutFailureLifetime])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPasswordLockoutFailureLifetime])) ;
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPasswordLockoutDuration,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A_zimbraPasswordLockoutDuration] != "" && tmpObj.attrs[ZaAccount.A_zimbraPasswordLockoutDuration] !=null && tmpObj.attrs[ZaAccount.A_zimbraPasswordLockoutDuration] !=0 && !AjxUtil.isLifeTime(tmpObj.attrs[ZaAccount.A_zimbraPasswordLockoutDuration])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPasswordLockoutDuration])) ;
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraEnforcePwdHistory,tmpObj)) {
        if(tmpObj.attrs[ZaAccount.A__zimbraEnforcePwdHistory] != "" && tmpObj.attrs[ZaAccount.A_zimbraEnforcePwdHistory] !=null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaAccount.A_zimbraEnforcePwdHistory])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraEnforcePwdHistory])) ;
            return false;
        }
        if(tmpObj.attrs[ZaAccount.A_zimbraEnforcePwdHistory])
            tmpObj.attrs[ZaAccount.A_zimbraEnforcePwdHistory] = parseInt(tmpObj.attrs[ZaAccount.A_zimbraEnforcePwdHistory]);
    }
    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMaxMailItemsPerPage,tmpObj)) {
        var maxItemsPerPage;
        if(tmpObj.attrs[ZaAccount.A_zimbraMaxMailItemsPerPage] != null) {
            maxItemsPerPage = parseInt (tmpObj.attrs[ZaAccount.A_zimbraMaxMailItemsPerPage]);
        } else {
            maxItemsPerPage = parseInt ( tmpObj._defaultValues.attrs[ZaAccount.A_zimbraMaxMailItemsPerPage]);
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPrefMailItemsPerPage,tmpObj)) {
        var prefItemsPerPage;
        if(tmpObj.attrs[ZaAccount.A_zimbraPrefMailItemsPerPage] != null) {
            prefItemsPerPage = parseInt (tmpObj.attrs[ZaAccount.A_zimbraPrefMailItemsPerPage]);
        } else {
            prefItemsPerPage = parseInt ( tmpObj._defaultValues.attrs[ZaAccount.A_zimbraPrefMailItemsPerPage]);
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPrefMailItemsPerPage,tmpObj) && ZaItem.hasWritePermission(ZaAccount.A_zimbraMaxMailItemsPerPage,tmpObj)) {
        if(maxItemsPerPage < prefItemsPerPage) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_ITEMS_PER_PAGE_OVER_MAX);
            return false;
        }
    }

    if(!ZaZimbraAdmin.isGlobalAdmin() && ZaItem.hasWritePermission(ZaAccount.A_zimbraDomainAdminMaxMailQuota,tmpObj) && (tmpObj.attrs[ZaAccount.A_zimbraMailQuota] != null)) {
        var cosMaxAccountQuota = tmpObj._defaultValues.attrs[ZaAccount.A_zimbraDomainAdminMaxMailQuota];
        var prefAccountQuota = tmpObj.attrs[ZaAccount.A_zimbraMailQuota];

        if(prefAccountQuota > cosMaxAccountQuota) {
            ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_MAX_ACCOUNT_QUOTA);
            return false;
        }
    }

    var forwardFields = [
        ZaAccount.A_zimbraMailForwardingAddress,
        ZaAccount.A_zimbraPrefMailForwardingAddress,
        ZaAccount.A_zimbraPrefCalendarForwardInvitesTo
    ];
    var canFixForwardingErrors =
        AjxUtil.reduce(
            forwardFields.concat([ZaAccount.A_zimbraPrefMailLocalDeliveryDisabled]),
            function(found, name) {
                return found || ZaItem.hasWritePermission(name, tmpObj);
            });

    if (canFixForwardingErrors && tmpObj.attrs[ZaAccount.A_zimbraPrefMailLocalDeliveryDisabled] == "TRUE") {
        var hasForwardingEmail = AjxUtil.reduce(forwardFields, function(found, name) {
            // this check handles undefined values, strings and arrays
            return found ||
                (tmpObj.attrs[name] && tmpObj.attrs[name].length > 0);
        });

        if (!hasForwardingEmail) {
            ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_missing_zimbraPrefMailForwardingAddress);
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaAccount.A_zimbraPasswordLockoutMaxFailures,tmpObj)&& tmpObj.attrs[ZaAccount.A_zimbraPasswordLockoutMaxFailures] && !AjxUtil.isInt(tmpObj.attrs[ZaAccount.A_zimbraPasswordLockoutMaxFailures])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog( AjxMessageFormat.format(ZaMsg.ERROR_VALUE_NOT_INTEGER,ZaAccount.A_zimbraPasswordLockoutMaxFailures));
            return false;
    }

    if(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ACCOUNTS_SKIN_TAB] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
        //check that current theme is part of selected themes
        var currentTheme = tmpObj.attrs[ZaAccount.A_zimbraPrefSkin] ? tmpObj.attrs[ZaAccount.A_zimbraPrefSkin] : tmpObj._defaultValues.attrs[ZaCos.A_zimbraPrefSkin];
        var availableThemes = tmpObj.attrs[ZaAccount.A_zimbraAvailableSkin] ? tmpObj.attrs[ZaAccount.A_zimbraAvailableSkin] : tmpObj._defaultValues.attrs[ZaCos.A_zimbraAvailableSkin];

        if(currentTheme && availableThemes) {
            var arr = availableThemes instanceof Array ? availableThemes : [availableThemes];
            var cnt = arr.length;
            var found=false;
            for(var i=0; i < cnt; i++) {
                if(arr[i]==currentTheme) {
                    found=true;
                    break;
                }
            }
            if(!found) {
                //show error msg
                ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format (ZaMsg.NAD_WarningCurrentThemeNotAvail, [currentTheme, currentTheme]));
                return false;
            }
        }
    }

    if (!ZaAccount.isAccountTypeSet(tmpObj))  {
        ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_ACCOUNT_TYPE_NOT_SET);
        return false;
    }

    return true;
}

/**
* Creates a new ZaAccount. This method makes SOAP request to create a new account record.
* @param tmpObj
* @param app {ZaApp}
* @param account {ZaAccount}
**/
ZaAccount.createMethod =
function (tmpObj, account) {
    tmpObj.attrs[ZaAccount.A_mail] = tmpObj.name.replace(/[\s]+/g,"");
    var resp;
    //create SOAP request
    var soapDoc = AjxSoapDoc.create("CreateAccountRequest", ZaZimbraAdmin.URN, null);
    soapDoc.set(ZaAccount.A_name, tmpObj.attrs[ZaAccount.A_mail]);
    if(tmpObj.attrs[ZaAccount.A_password] && tmpObj.attrs[ZaAccount.A_password].length > 0)
        soapDoc.set(ZaAccount.A_password, tmpObj.attrs[ZaAccount.A_password]);

    if(tmpObj[ZaAccount.A2_autoMailServer] == "TRUE") {
        tmpObj.attrs[ZaAccount.A_mailHost] = null;
    }

    //check if we need to set the cosId
    if (tmpObj[ZaAccount.A2_autoCos] == "TRUE" ) {
        tmpObj.attrs[ZaAccount.A_COSId] = null ;
    }

    for (var aname in tmpObj.attrs) {
        if(aname == ZaAccount.A_password || aname == ZaAccount.A_zimbraMailAlias || aname == ZaItem.A_objectClass || aname == ZaAccount.A2_mbxsize || aname == ZaAccount.A_mail) {
            continue;
        }

        if(tmpObj.attrs[aname] instanceof Array) {
            var cnt = tmpObj.attrs[aname].length;
            if(cnt) {
                for(var ix=0; ix <cnt; ix++) {
                    if(typeof(tmpObj.attrs[aname][ix])=="object") {
                        var attr = soapDoc.set("a", tmpObj.attrs[aname][ix].toString());
                        attr.setAttribute("n", aname);
                    } else {
                        var attr = soapDoc.set("a", tmpObj.attrs[aname][ix]);
                        attr.setAttribute("n", aname);
                    }
                }
            }
        } else if (tmpObj.attrs[aname] instanceof AjxVector) {
            var tmpArray = tmpObj.attrs[aname].getArray();
            var cnt = tmpArray.length;
            if(cnt) {
                for(var ix=0; ix <cnt; ix++) {
                    if(tmpArray[ix] !=null) {
                        if(typeof(tmpArray[ix])=="object") {
                            var attr = soapDoc.set("a", tmpArray[ix].toString());
                            attr.setAttribute("n", aname);
                        } else {
                            var attr = soapDoc.set("a", tmpArray[ix]);
                            attr.setAttribute("n", aname);
                        }
                    }
                }
            }

        } else {
            if(tmpObj.attrs[aname] != null) {
                if(typeof(tmpObj.attrs[aname]) == "object") {
                    var attr = soapDoc.set("a", tmpObj.attrs[aname].toString());
                    attr.setAttribute("n", aname);
                } else {
                    var attr = soapDoc.set("a", tmpObj.attrs[aname]);
                    attr.setAttribute("n", aname);
                }
            }
        }
    }
    try {

        //var createAccCommand = new ZmCsfeCommand();
        var csfeParams = new Object();
        csfeParams.soapDoc = soapDoc;
        var reqMgrParams = {} ;
        reqMgrParams.controller = ZaApp.getInstance().getCurrentController();
        reqMgrParams.busyMsg = ZaMsg.BUSY_CREATE_ACCOUNTS ;
        //reqMgrParams.busyMsg = "Creating Accounts ...";
        //resp = createAccCommand.invoke(params).Body.CreateAccountResponse;
        resp = ZaRequestMgr.invoke(csfeParams, reqMgrParams ).Body.CreateAccountResponse;
    } catch (ex) {
        throw ex;
        return null;
    }

    account.initFromJS(resp.account[0]);
    //add aliases
    if(tmpObj.attrs[ZaAccount.A_zimbraMailAlias].length) {
        var tmpObjCnt = tmpObj.attrs[ZaAccount.A_zimbraMailAlias].length;
        var failedAliases = "";
        var failedAliasesCnt = 0;
        try {
            for(var ix=0; ix < tmpObjCnt; ix++) {
                try {
                    if(tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix]!="") {
                        account.addAlias(tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix]);
                        account.attrs[ZaAccount.A_zimbraMailAlias].push(tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix]);
                    }
                } catch (ex) {
                    if(ex.code == ZmCsfeException.ACCT_EXISTS) {
                        //if failed because account exists just show a warning
                        failedAliases += ("<br>" + tmpObj.attrs[ZaAccount.A_zimbraMailAlias][ix]);
                        failedAliasesCnt++;
                    } else {
                        //if failed for another reason - jump out
                        throw (ex);
                    }
                }
            }
            if(failedAliasesCnt == 1) {
                ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.WARNING_ALIAS_EXISTS, [failedAliases]));
            } else if(failedAliasesCnt > 1) {
                ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.WARNING_ALIASES_EXIST, [failedAliases]));
            }
        } catch (ex) {
            ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.FAILED_ADD_ALIASES, ex);
            return null;
        }
    }
}
ZaItem.createMethods["ZaAccount"].push(ZaAccount.createMethod);

/**
* @method modify
* Updates ZaAccount attributes (SOAP)
* @param mods set of modified attributes and their new values
*/
ZaAccount.modifyMethod =
function(mods) {
    var gotSomething = false;
    //update the object
    var soapDoc = AjxSoapDoc.create("ModifyAccountRequest", ZaZimbraAdmin.URN, null);
    soapDoc.set("id", this.id);
    for (var aname in mods) {
        gotSomething = true;
        //multy value attribute
        if(mods[aname] instanceof Array) {
            var cnt = mods[aname].length;
            if(cnt) {
                var nonemptyElements = false;
                for(var ix=0; ix <cnt; ix++) {
                    var attr = null;
                    if(mods[aname][ix] instanceof String || AjxUtil.isString(mods[aname][ix])) {
                        if(AjxUtil.isEmpty(mods[aname][ix])) {
                            continue;
                        } else {
                            nonemptyElements = true;
                        }
                        var attr = soapDoc.set("a", mods[aname][ix].toString());
                    } else if(mods[aname][ix] instanceof Object) {
                        var attr = soapDoc.set("a", mods[aname][ix].toString());
                        nonemptyElements = true;
                    } else {
                        var attr = soapDoc.set("a", mods[aname][ix]);
                        nonemptyElements = true;
                    }

                    if(attr)
                        attr.setAttribute("n", aname);
                }
                if(!nonemptyElements) {
                    var attr = soapDoc.set("a", "");
                    attr.setAttribute("n", aname);
                }
            } else {
                var attr = soapDoc.set("a", "");
                attr.setAttribute("n", aname);
            }
        } else {
            var attr = soapDoc.set("a", mods[aname]);
            attr.setAttribute("n", aname);
        }
    }

    if(!gotSomething)
        return;

    //var modifyAccCommand = new ZmCsfeCommand();
    var params = new Object();
    params.soapDoc = soapDoc;
    var reqMgrParams = {
        controller:ZaApp.getInstance().getCurrentController(),
        busyMsg: ZaMsg.BUSY_MODIFY_ACCOUNT
    } ;

    //resp = modifyAccCommand.invoke(params).Body.ModifyAccountResponse;
    resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.ModifyAccountResponse ;

    this.initFromJS(resp.account[0]);
    this[ZaAccount.A2_confirmPassword] = null;
    //invalidate the original tooltip
    this._toolTip = null ;
    return;
}
ZaItem.modifyMethods["ZaAccount"].push(ZaAccount.modifyMethod);



ZaAccount.getViewMailLink =
function(accId) {
    var retVal={authToken:"", lifetime:0};
    var soapDoc = AjxSoapDoc.create("DelegateAuthRequest", ZaZimbraAdmin.URN, null);
    var attr = soapDoc.set("account", accId);
    attr.setAttribute("by", "id");

    //var command = new ZmCsfeCommand();
    var params = new Object();
    params.soapDoc = soapDoc;
    //var resp = command.invoke(params).Body.DelegateAuthResponse;
    var reqMgrParams = {
        controller: ZaApp.getInstance().getCurrentController ()
    }
    var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.DelegateAuthResponse ;
    retVal.authToken = resp.authToken[0]._content;
    retVal.lifetime = resp.lifetime;

    return retVal;
}

ZaReindexMailbox = function() {
    this.status = null;
    this.numSucceeded = 0;
    this.numFailed = 0;
    this.numRemaining = 0;
    this.numTotal = 100;
    this.numDone = 0;
    this.progressMsg = ZaMsg.NAD_ACC_ReindexingNotRunning;
    this.mbxId = null;
    this.resultMsg = null;
    this.errorDetail = null;
    this.pollInterval = 500;
}
ZaReindexMailbox.A_status = "status";
ZaReindexMailbox.A_numSucceeded = "numSucceeded";
ZaReindexMailbox.A_numFailed = "numFailed";
ZaReindexMailbox.A_numRemaining = "numRemaining";
ZaReindexMailbox.A_mbxId = "mbxId";
ZaReindexMailbox.A_numTotal = "numTotal";
ZaReindexMailbox.A_numDone = "numDone";
ZaReindexMailbox.A_pollInterval = "pollInterval";
ZaReindexMailbox.A_progressMsg = "progressMsg";
ZaReindexMailbox.A_errorDetail = "errorDetail";
ZaReindexMailbox.A_resultMsg = "resultMsg";

ZaReindexMailbox.myXModel = {
    items: [
        {id:ZaReindexMailbox.A_status, ref:ZaReindexMailbox.A_status, type:_STRING_},
        {id:ZaReindexMailbox.A_numSucceeded, ref:ZaReindexMailbox.A_numSucceeded, type:_NUMBER_},
        {id:ZaReindexMailbox.A_numFailed, ref:ZaReindexMailbox.A_numFailed, type:_NUMBER_},
        {id:ZaReindexMailbox.A_numRemaining, ref:ZaReindexMailbox.A_numRemaining, type:_NUMBER_},
        {id:ZaReindexMailbox.A_mbxId, ref:ZaReindexMailbox.A_mbxId, type:_STRING_},
        {id:ZaReindexMailbox.A_numTotal, ref:ZaReindexMailbox.A_numTotal, type:_NUMBER_},
        {id:ZaReindexMailbox.A_numDone, ref:ZaReindexMailbox.A_numDone, type:_NUMBER_},
        {id:ZaReindexMailbox.A_pollInterval, ref:ZaReindexMailbox.A_pollInterval, type:_STRING_},
        {id:ZaReindexMailbox.A_progressMsg, ref:ZaReindexMailbox.A_progressMsg, type:_STRING_},
        {id:ZaReindexMailbox.A_resultMsg, ref:ZaReindexMailbox.A_pollInterval, type:_STRING_},
        {id:ZaReindexMailbox.A_errorDetail, ref:ZaReindexMailbox.A_pollInterval, type:_STRING_}
    ]
};

ZaAccount.prototype.remove =
function(callback) {
    var soapDoc;
    if(this[ZaAccount.A2_ldap_ds] || this[ZaAccount.A2_zimbra_ds]) {
        soapDoc = AjxSoapDoc.create("DeleteGalSyncAccountRequest", ZaZimbraAdmin.URN, null);
        var accEl = soapDoc.set("account", this.id);
        accEl.setAttribute("by", "id");
    } else {
        soapDoc = AjxSoapDoc.create("DeleteAccountRequest", ZaZimbraAdmin.URN, null);
        soapDoc.set("id", this.id);
    }

    this.deleteCommand = new ZmCsfeCommand();
    var params = new Object();
    params.soapDoc = soapDoc;
    params.noAuthToken = true;
    if(callback) {
        params.asyncMode = true;
        params.callback = callback;
    }
    this.deleteCommand.invoke(params);
}

ZaAccount.getReindexStatus =
function (mbxId, callback) {
    var soapDoc = AjxSoapDoc.create("ReIndexRequest", ZaZimbraAdmin.URN, null);
    soapDoc.getMethod().setAttribute("action", "status");
    var attr = soapDoc.set("mbox", null);
    attr.setAttribute("id", mbxId);
    var resp = null;
    try {
        var command = new ZmCsfeCommand();
        var params = new Object();
        params.soapDoc = soapDoc;
        params.noAuthToken = true;
        if(callback) {
            params.asyncMode = true;
            params.callback = callback;
            command.invoke(params);
        } else {
            resp = command.invoke(params);
        }

    } catch (ex) {
        if(ex.code == "service.NOT_IN_PROGRESS") {
            resp = null;
        } else {
            throw (ex);
        }
    }
    return resp;
}

ZaAccount.startReindexMailbox =
function (mbxId, callback) {
    var soapDoc = AjxSoapDoc.create("ReIndexRequest", ZaZimbraAdmin.URN, null);
    soapDoc.getMethod().setAttribute("action", "start");
    var attr = soapDoc.set("mbox", null);
    attr.setAttribute("id", mbxId);

    var resp;
    try {
        var command = new ZmCsfeCommand();
        var params = new Object();
        params.soapDoc = soapDoc;
        params.noAuthToken = true;
        if(callback) {
            params.asyncMode = true;
            params.callback = callback;
            command.invoke(params);
        } else {
            resp = command.invoke(params);
        }

    } catch (ex) {
        resp = ex;
    }
    return resp;
}

ZaAccount.abortReindexMailbox =
function (mbxId, callback) {
    var soapDoc = AjxSoapDoc.create("ReIndexRequest", ZaZimbraAdmin.URN, null);
    soapDoc.getMethod().setAttribute("action", "cancel");
    var attr = soapDoc.set("mbox", null);
    attr.setAttribute("id", mbxId);
    var resp;
    try {
        var command = new ZmCsfeCommand();
        var params = new Object();
        params.soapDoc = soapDoc;
        params.noAuthToken = true;
        if(callback) {
            params.asyncMode = true;
            params.callback = callback;
            command.invoke(params);
        } else {
            resp = command.invoke(params);
        }
    } catch (ex) {
        resp = ex;
    }
    return resp;
}

ZaAccount.parseReindexResponse =
function (respObj, instance, form) {
    if(!respObj)
        return;
    if(respObj.isException && respObj.isException()) {
        var errCode = respObj.getException().code;
        if(errCode && errCode == "service.NOT_IN_PROGRESS") {
            form.setInstanceValue("", ZaReindexMailbox.A_errorDetail);
            form.setInstanceValue("", ZaReindexMailbox.A_resultMsg);
            form.setInstanceValue(ZaMsg.NAD_ACC_ReindexingNotRunning, ZaReindexMailbox.A_progressMsg);
            if(instance.numRemaining > 0 || instance.status == "started") {
                form.setInstanceValue(instance.numTotal, ZaReindexMailbox.A_numDone);
                form.setInstanceValue(ZaMsg.NAD_ACC_ReindexingComplete, ZaReindexMailbox.A_progressMsg);
                form.setInstanceValue("complete", ZaReindexMailbox.A_status);
            } else {
                form.setInstanceValue(null, ZaReindexMailbox.A_status);
                //instance.status = null;
            }
        } else if(errCode && errCode == ZmCsfeException.EMPTY_RESPONSE) {
            form.setInstanceValue(ZaMsg.ERROR_RECEIVED_EMPTY_RESPONSE,ZaReindexMailbox.A_resultMsg);
            form.setInstanceValue(null,ZaReindexMailbox.A_errorDetail);
            form.setInstanceValue("error", ZaReindexMailbox.A_status);
        } else {
            var detail = respObj.getException().detail;
            var msg = respObj.getException().msg;
            var strBuf = [];
            if(detail) {
                strBuf.push(detail);
            }
            if(msg) {
                strBuf.push(msg);
            }
            form.setInstanceValue(AjxMessageFormat.format(ZaMsg.FAILED_REINDEX,[errCode]),ZaReindexMailbox.A_resultMsg);
            form.setInstanceValue(strBuf.join("\n"),ZaReindexMailbox.A_errorDetail);
            form.setInstanceValue("error", ZaReindexMailbox.A_status);
        }
    } else  {
        var resp;
        if(respObj.getResponse) {
            resp = respObj.getResponse();
        } else if(respObj.Body.ReIndexResponse) {
            resp = respObj;
        }
        if(resp && resp.Body.ReIndexResponse) {
            if(resp.Body.ReIndexResponse.status == "idle") {
                form.setInstanceValue("", ZaReindexMailbox.A_errorDetail);
                form.setInstanceValue("", ZaReindexMailbox.A_resultMsg);
                form.setInstanceValue(ZaMsg.NAD_ACC_ReindexingNotRunning, ZaReindexMailbox.A_progressMsg);
                if(instance.numRemaining > 0 || instance.status == "started") {
                    form.setInstanceValue(instance.numTotal, ZaReindexMailbox.A_numDone);
                    form.setInstanceValue(ZaMsg.NAD_ACC_ReindexingComplete, ZaReindexMailbox.A_progressMsg);
                    form.setInstanceValue("complete", ZaReindexMailbox.A_status);
                } else {
                    form.setInstanceValue(null, ZaReindexMailbox.A_status);
                }
                form.setInstanceValue(resp.Body.ReIndexResponse.status, ZaReindexMailbox.A_status);
            } else {
                form.setInstanceValue(resp.Body.ReIndexResponse.status, ZaReindexMailbox.A_status);
                if(resp.Body.ReIndexResponse.status == "started") {
                    form.setInstanceValue(0, ZaReindexMailbox.A_numDone);
                    form.setInstanceValue(ZaMsg.NAD_ACC_ReindexingStarted, ZaReindexMailbox.A_progressMsg);
                }
                if(resp.Body.ReIndexResponse.progress && resp.Body.ReIndexResponse.progress[0]) {
                    var progress = resp.Body.ReIndexResponse.progress[0];

                    form.setInstanceValue(progress.numFailed, ZaReindexMailbox.A_numFailed);
                    form.setInstanceValue(progress.numSucceeded, ZaReindexMailbox.A_numSucceeded);
                    form.setInstanceValue(progress.numRemaining, ZaReindexMailbox.A_numRemaining);
                    form.setInstanceValue(progress.numSucceeded + progress.numFailed + progress.numRemaining, ZaReindexMailbox.A_numTotal);
                    form.setInstanceValue(progress.numFailed + progress.numSucceeded, ZaReindexMailbox.A_numDone);
                    form.setInstanceValue(AjxMessageFormat.format(ZaMsg.NAD_ACC_ReindexingStatus,[progress.numSucceeded,progress.numRemaining,progress.numFailed]), ZaReindexMailbox.A_progressMsg);

                    if(instance.status == "cancelled") {
                        form.setInstanceValue((instance.progressMsg + "<br>" + ZaMsg.NAD_ACC_ReindexingCancelled), ZaReindexMailbox.A_progressMsg);
                    }
                    if(instance.numRemaining == 0) {
                        form.setInstanceValue(instance.numTotal, ZaReindexMailbox.A_numDone);
                    }
                }
            }
        }
    }
}

ZaAccount.prototype.initFromDom =
function(node) {
    this.name = node.getAttribute("name");
    this.id = node.getAttribute("id");
    this.attrs[ZaAccount.A_zimbraMailAlias] = new Array();
    this.attrs[ZaAccount.A_zimbraMailForwardingAddress] = new Array();
    this.attrs[ZaAccount.A_zimbraPrefCalendarForwardInvitesTo] = new Array();
    this.attrs[ZaAccount.A_zimbraAllowFromAddress] = new Array();
    this.attrs[ZaAccount.A_zimbraForeignPrincipal ] = [];
    var children = node.childNodes;
    for (var i=0; i< children.length;  i++) {
        child = children[i];
        if (child.nodeName != 'a') continue;
        var name = child.getAttribute("n");
        if (child.firstChild != null) {
            var value = child.firstChild.nodeValue;
            if (name in this.attrs) {
                var vc = this.attrs[name];
                if ((typeof vc) == "object") {
                    vc.push(value);
                } else {
                    this.attrs[name] = [vc, value];
                }
            } else {
                this.attrs[name] = value;
            }
        }
    }
}

ZaAccount.prototype.initFromJS =
function (account) {
    if(!account)
        return;

    this.attrs = new Object();
    this.attrs[ZaAccount.A_zimbraMailAlias] = new Array();
    this.name = account.name;
    this.id = account.id;
    this.isExternal = account.isExternal;
    var len = account.a.length;
    this.attrs[ZaAccount.A_zimbraMailAlias] = new Array();
    this.attrs[ZaAccount.A_zimbraMailForwardingAddress] = new Array();
    this.attrs[ZaAccount.A_zimbraPrefCalendarForwardInvitesTo] = new Array();
    this.attrs[ZaAccount.A_zimbraAllowFromAddress] = new Array();
    this.attrs[ZaAccount.A_zimbraForeignPrincipal ] = [];
    for(var ix = 0; ix < len; ix++) {
        if(!this.attrs[[account.a[ix].n]]) {
            this.attrs[[account.a[ix].n]] = account.a[ix]._content;
        } else {
            if(!(this.attrs[[account.a[ix].n]] instanceof Array)) {
                this.attrs[[account.a[ix].n]] = [this.attrs[[account.a[ix].n]]];
            }
            this.attrs[[account.a[ix].n]].push(account.a[ix]._content);
        }
    }
    if(!(this.attrs[ZaAccount.A_description] instanceof Array)) {
        this.attrs[ZaAccount.A_description] = [this.attrs[ZaAccount.A_description]];
    }

    if(!this.attrs[ZaItem.A_zimbraId] && this.id) {
        this.attrs[ZaItem.A_zimbraId] = this.id;
    }

    if(this.attrs[ZaAccount.A_zimbraProxyAllowedDomains] &&
       (!(this.attrs[ZaAccount.A_zimbraProxyAllowedDomains] instanceof Array)) ) {
        this.attrs[ZaAccount.A_zimbraProxyAllowedDomains] = [this.attrs[ZaAccount.A_zimbraProxyAllowedDomains]];
    }
}

/**
* Returns HTML for a tool tip for this account.
*/
ZaAccount.prototype.getToolTip =
function() {
    // update/null if modified
    if (!this._toolTip) {
        var html = new Array(20);
        var idx = 0;
        html[idx++] = "<table cellpadding='0' cellspacing='0' border='0'>";
        html[idx++] = "<tr valign='center'><td colspan='2' align='left'>";
        html[idx++] = "<div style='border-bottom: 1px solid black; white-space:nowrap; overflow:hidden;width:350' >";
        html[idx++] = "<table cellpadding='0' cellspacing='0' border='0' style='width:100%;'>";
        html[idx++] = "<tr valign='center'>";
        html[idx++] = "<td><b>" + AjxStringUtil.htmlEncode(this.name) + "</b></td>";
        html[idx++] = "<td align='right'>";
        if( this.attrs[ZaAccount.A_zimbraIsAdminAccount]=="TRUE" ) {
            html[idx++] = AjxImg.getImageHtml("AdminUser");
        } else if (this.attrs[ZaAccount.A_zimbraIsDelegatedAdminAccount] == "TRUE") {
            html[idx++] = AjxImg.getImageHtml("DomainAdminUser");
        } else if (this.attrs[ZaAccount.A_zimbraIsSystemResource] == "TRUE") {
            html[idx++] = AjxImg.getImageHtml("SystemResource");
        } else {
            html[idx++] = AjxImg.getImageHtml("Account");
        }
          html[idx++] = "</td>";
                html[idx++] = "</table></div></td></tr>";
                html[idx++] = "<tr></tr>";

                if(this.isExternal) {
                        idx = this._addRow(ZaMsg.NAD_MailServer, this.attrs[ZaAccount.A_zimbraMailTransport], html, idx);
                        html[idx++] = "<tr valign='top'><td align='left' style='padding-right: 5px;' colspan='2'><b>";
                        html[idx++] = AjxStringUtil.htmlEncode(ZaMsg.externalAccountNote);
                        html[idx++] = "</b></td>";
                        html[idx++] = "</td></tr>";
                } else {
                        idx = this._addRow(ZaMsg.NAD_MailServer, this.attrs[ZaAccount.A_mailHost], html, idx);
                }
                idx = this._addAttrRow(ZaItem.A_zimbraId, html, idx);
                html[idx++] = "</table>";
                this._toolTip = html.join("");

    }
    return this._toolTip;
}



ZaAccount.loadMethod =
function(by, val) {
    var soapDoc, params, resp;
    //batch the rest of the requests
    soapDoc = AjxSoapDoc.create("BatchRequest", "urn:zimbra");
    soapDoc.setMethodAttribute("onerror", "continue");

    if(by=="id") {
        this.id = val;
        this.attrs[ZaItem.A_zimbraId] = val;
        var getAccDoc = soapDoc.set("GetAccountRequest", null, null, ZaZimbraAdmin.URN);
        getAccDoc.setAttribute("applyCos", "0");
        if(!this.getAttrs.all && !AjxUtil.isEmpty(this.attrsToGet)) {
            getAccDoc.setAttribute("attrs", this.attrsToGet.join(","));
        }
        var elBy = soapDoc.set("account", val, getAccDoc);
        elBy.setAttribute("by", by);
    } else {
        var getAccDoc = AjxSoapDoc.create("GetAccountRequest", ZaZimbraAdmin.URN, null);
        getAccDoc.getMethod().setAttribute("applyCos", "0");
        if(!this.getAttrs.all && !AjxUtil.isEmpty(this.attrsToGet)) {
            getAccDoc.getMethod().setAttribute("attrs", this.attrsToGet.join(","));
        }
        var elBy = getAccDoc.set("account", val);
        elBy.setAttribute("by", by);

        //var getAccCommand = new ZmCsfeCommand();
        var params = new Object();
        params.soapDoc = getAccDoc;
        var reqMgrParams = {
            controller:ZaApp.getInstance().getCurrentController()
        }
        resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.GetAccountResponse;
        this.attrs = new Object();
        this.initFromJS(resp.account[0]);
    }

    if(!AjxUtil.isEmpty(this.attrs[ZaAccount.A_mailHost]) && ZaItem.hasRight(ZaAccount.GET_MAILBOX_INFO_RIGHT,this) && this.attrs[ZaAccount.A_zimbraIsExternalVirtualAccount] != "TRUE") {
        var getMailboxReq = soapDoc.set("GetMailboxRequest", null, null, ZaZimbraAdmin.URN);
        var mbox = soapDoc.set("mbox", "", getMailboxReq);
        mbox.setAttribute("id", this.attrs[ZaItem.A_zimbraId]);
    }
    this[ZaAccount.A2_confirmPassword] = null;

    //Make a GetAccountMembershipRequest
    if(ZaItem.hasRight(ZaAccount.GET_ACCOUNT_MEMBERSHIP_RIGHT,this)) {
        var getAccMembershipDoc = AjxSoapDoc.create("GetAccountMembershipRequest", ZaZimbraAdmin.URN);
        var account = getAccMembershipDoc.set("account", this.attrs[ZaItem.A_zimbraId]);
        account.setAttribute("by", "id");
        var params = {
            soapDoc : getAccMembershipDoc,
            asyncMode : true,
            callback : this._handleAccountMembershipResponse.bind(this)
        };
        var reqMgrParams = {
            controller : ZaApp.getInstance().getCurrentController()
        };
        ZaRequestMgr.invoke(params, reqMgrParams);
    }

    if(ZaItem.hasRight(ZaAccount.GET_ACCOUNT_INFO_RIGHT,this)) {
        var getAccInfoReq = soapDoc.set("GetAccountInfoRequest", null, null, ZaZimbraAdmin.URN);
        var account = soapDoc.set("account", this.attrs[ZaItem.A_zimbraId], getAccInfoReq);
        account.setAttribute("by","id");
    }

    if(ZaItem.hasRight(ZaAccount.VIEW_MAIL_RIGHT, this)) {
        var getDSReq = soapDoc.set("GetDataSourcesRequest", null, null, ZaZimbraAdmin.URN);
        var elId = soapDoc.set("id", this.attrs[ZaItem.A_zimbraId], getDSReq);
    }

    var hasError = false ;
    var lastException  ;
    if(by=="id" ||
        ZaItem.hasRight(ZaAccount.GET_ACCOUNT_INFO_RIGHT,this) || ZaItem.hasRight(ZaAccount.GET_ACCOUNT_MEMBERSHIP_RIGHT,this) ||
        (!AjxUtil.isEmpty(this.attrs[ZaAccount.A_mailHost]) && ZaItem.hasRight(ZaAccount.GET_MAILBOX_INFO_RIGHT,this)) ) {
        try {
            params = new Object();
            params.soapDoc = soapDoc;
            var reqMgrParams ={
                controller:ZaApp.getInstance().getCurrentController()
            }
            var respObj = ZaRequestMgr.invoke(params, reqMgrParams);
            if(respObj.isException && respObj.isException()) {
                ZaApp.getInstance().getCurrentController()._handleException(respObj.getException(), "ZaAccount.loadMethod", null, false);
                hasError  = true ;
                lastException = ex ;
            } else if(respObj.Body.BatchResponse.Fault) {
                var fault = respObj.Body.BatchResponse.Fault;
                if(fault instanceof Array)
                    fault = fault[0];

                if (fault) {
                    // JS response with fault
                    var ex = ZmCsfeCommand.faultToEx(fault);
                    ZaApp.getInstance().getCurrentController()._handleException(ex,"ZaAccount.loadMethod", null, false);
                    hasError = true ;
                    lastException = ex ;
                }
            } else {
                var batchResp = respObj.Body.BatchResponse;

                if(batchResp.GetAccountResponse) {
                    resp = batchResp.GetAccountResponse[0];
                    this.initFromJS(resp.account[0]);
                }

                if(batchResp.GetMailboxResponse) {
                    resp = batchResp.GetMailboxResponse[0];
                    if(resp && resp.mbox && resp.mbox[0]) {
                        this.attrs[ZaAccount.A2_mbxsize] = resp.mbox[0].s;
                    }
                }

                if(batchResp.GetAccountMembershipResponse) {
                    resp = batchResp.GetAccountMembershipResponse[0];
                    this[ZaAccount.A2_memberOf] = ZaAccountMemberOfListView.parseGetAccMembershipResponse(resp) ;
                    this[ZaAccount.A2_directMemberList + "_more"] =
                        (this[ZaAccount.A2_memberOf][ZaAccount.A2_directMemberList].length > ZaAccountMemberOfListView.SEARCH_LIMIT) ? 1: 0;
                    this[ZaAccount.A2_indirectMemberList + "_more"] =
                        (this[ZaAccount.A2_memberOf][ZaAccount.A2_indirectMemberList].length > ZaAccountMemberOfListView.SEARCH_LIMIT) ? 1: 0;
                }

                if(batchResp.GetAccountInfoResponse) {
                    resp = batchResp.GetAccountInfoResponse[0];
                    if(resp[ZaAccount.A2_publicMailURL] && resp[ZaAccount.A2_publicMailURL][0])
                        this[ZaAccount.A2_publicMailURL] = resp[ZaAccount.A2_publicMailURL][0]._content;

                    if(resp[ZaAccount.A2_adminSoapURL] && resp[ZaAccount.A2_adminSoapURL][0])
                        this[ZaAccount.A2_adminSoapURL] = resp[ZaAccount.A2_adminSoapURL][0]._content;

                    if(resp[ZaAccount.A2_soapURL] && resp[ZaAccount.A2_soapURL][0])
                        this[ZaAccount.A2_soapURL] = resp[ZaAccount.A2_soapURL][0]._content;

                    if (resp.cos && resp.cos.id)
                        this[ZaAccount.A2_currentAccountType] = resp.cos.id ;
                }

                if(batchResp.GetDataSourcesResponse && batchResp.GetDataSourcesResponse instanceof Array && batchResp.GetDataSourcesResponse[0]) {
                    this[ZaAccount.A2_datasources] = new ZaItemList(ZaDataSource);
                    this[ZaAccount.A2_datasources].loadFromJS(batchResp.GetDataSourcesResponse[0]);
                    var dss = this[ZaAccount.A2_datasources].getArray();
                    if(dss && dss.length) {
                        for(var i=0; i < dss.length; i++) {
                            if(dss[i].attrs[ZaDataSource.A_zimbraDataSourceType] == ZaDataSource.DS_TYPE_GAL) {
                                if(dss[i].attrs[ZaDataSource.A_zimbraGalType] == ZaDataSource.GAL_TYPE_ZIMBRA) {
                                    this[ZaAccount.A2_zimbra_ds] = dss[i];
                                } else if(dss[i].attrs[ZaDataSource.A_zimbraGalType] == ZaDataSource.GAL_TYPE_LDAP) {
                                    this[ZaAccount.A2_ldap_ds] = dss[i];
                                }
                            }
                        }
                    }
                }
            }
        } catch (ex) {
            //show the error and go on
            //we should not stop the Account from loading if some of the information cannot be acces
            ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaAccount.prototype.load", null, false);
            hasError = true ;
            lastException = ex ;
        }
    }

    if (hasError) {
        throw lastException ;
    }

    var autoDispName;
    if(this.attrs[ZaAccount.A_firstName])
        autoDispName = this.attrs[ZaAccount.A_firstName];
    else
        autoDispName = "";

    if(this.attrs[ZaAccount.A_initials]) {
        autoDispName += " ";
        autoDispName += this.attrs[ZaAccount.A_initials];
        autoDispName += ".";
    }
    if(this.attrs[ZaAccount.A_lastName]) {
        if(autoDispName.length > 0)
            autoDispName += " ";

        autoDispName += this.attrs[ZaAccount.A_lastName];
    }

    if(this.attrs[ZaAccount.A_zimbraPrefMailPollingInterval]) {
        var poIntervalInS = ZaUtil.getLifeTimeInSeconds(this.attrs[ZaAccount.A_zimbraPrefMailPollingInterval]);
        if (poIntervalInS >= 1)
            this.attrs[ZaAccount.A_zimbraPrefMailPollingInterval] = poIntervalInS + "s";
    }

    if(this._defaultValues.attrs[ZaAccount.A_zimbraPrefMailPollingInterval]) {
        var dePoIntervalInS = ZaUtil.getLifeTimeInSeconds(this._defaultValues.attrs[ZaAccount.A_zimbraPrefMailPollingInterval]);
        if (dePoIntervalInS  >= 1)
            this._defaultValues.attrs[ZaAccount.A_zimbraPrefMailPollingInterval] = dePoIntervalInS  + "s";
    }

    if( autoDispName == this.attrs[ZaAccount.A_displayname]) {
        this[ZaAccount.A2_autodisplayname] = "TRUE";
    } else {
        this[ZaAccount.A2_autodisplayname] = "FALSE";
    }

}

ZaItem.loadMethods["ZaAccount"].push(ZaAccount.loadMethod);

/**
* public rename;
**/
ZaAccount.prototype.rename =
function (newName) {
    //Instrumentation code start
    if(ZaAccount.renameMethods) {
        var methods = ZaAccount.renameMethods;
        var cnt = methods.length;
        for(var i = 0; i < cnt; i++) {
            if(typeof(methods[i]) == "function") {
                methods[i].call(this, newName);
            }
        }
    }
    //Instrumentation code end
}

/**
* public renameMethod; sends RenameAccountRequest soap request
**/
ZaAccount.renameMethod =
function (newName) {
    var soapDoc = AjxSoapDoc.create("RenameAccountRequest", ZaZimbraAdmin.URN, null);
    soapDoc.set("id", this.id);
    soapDoc.set("newName", newName);
    var command = new ZmCsfeCommand();
    var params = new Object();
    params.soapDoc = soapDoc;
    params.noAuthToken = true;
    command.invoke(params);
}
ZaAccount.renameMethods.push(ZaAccount.renameMethod);

/**
* private changePasswordMethod; sends SetPasswordRequest soap request
* @param newPassword
**/
ZaAccount.changePasswordMethod =
function (newPassword) {
    var soapDoc = AjxSoapDoc.create("SetPasswordRequest", ZaZimbraAdmin.URN, null);
    soapDoc.set("id", this.id);
    soapDoc.set("newPassword", newPassword);
    var command = new ZmCsfeCommand();
    var params = new Object();
    params.soapDoc = soapDoc;
    params.noAuthToken = true;
    command.invoke(params);
}
/**
* private _changePassword;
* @param newPassword
**/
ZaAccount.prototype.changePassword =
function (newPassword) {
    //Instrumentation code start
    if(ZaAccount.changePasswordMethods) {
        var methods = ZaAccount.changePasswordMethods;
        var cnt = methods.length;
        for(var i = 0; i < cnt; i++) {
            if(typeof(methods[i]) == "function") {
                methods[i].call(this, newPassword);
            }
        }
    }
    //Instrumentation code end
}
ZaAccount.changePasswordMethods.push(ZaAccount.changePasswordMethod);


ZaAccount.isValidName =
function(value) {
    if (AjxUtil.isEmpty(value))
        return false;

    var index = value.indexOf("@");
    var name = value.substring(0, index);

    var namePart = name.replace(/(\s*$)/g, "");
    namePart = AjxStringUtil.trim(namePart);
    var domainPart = value.substring(index+1);
    domainPart = AjxStringUtil.trim(domainPart);

    value = namePart + "@" + domainPart;
    return (AjxEmailAddress.isValid(value));
}

/**
* ZaAccount.myXModel - XModel for XForms
**/
ZaAccount.myXModel = {
    items: [
        {id:"getAttrs",type:_LIST_},
        {id:"setAttrs",type:_LIST_},
        {id:"rights",type:_LIST_},
        {id:ZaItem.A_zimbraACE, ref:"attrs/" + ZaItem.A_zimbraACE, type:_LIST_},
        {id:ZaAccount.A2_errorMessage, ref:ZaAccount.A2_errorMessage, type:_STRING_},
        {id:ZaAccount.A2_warningMessage, ref:ZaAccount.A2_warningMessage, type:_STRING_},
        {id:ZaAccount.A2_domainLeftAccounts, ref:ZaAccount.A2_domainLeftAccounts, type:_STRING_},
        {id:ZaAccount.A2_showAccountTypeMsg, ref:ZaAccount.A2_showAccountTypeMsg, type:_STRING_},
        {id:ZaAccount.A_name, type:_STRING_, ref:"name", required:true,
            constraints: {type:"method", value:
                function (value, form, formItem, instance) {
                    if (value){
                        if(ZaAccount.isValidName(value)) {
                            return value;
                        } else {
                            throw ZaMsg.ErrorInvalidEmailAddress;
                        }
                    }
               }
            }
        },
        {id:ZaItem.A_zimbraId, type:_STRING_, ref:"attrs/" + ZaItem.A_zimbraId},
        {id:ZaAccount.A_uid, type:_STRING_, ref:"attrs/"+ZaAccount.A_uid},
        {id:ZaItem.A_zimbraCreateTimestamp, ref:"attrs/" + ZaItem.A_zimbraCreateTimestamp},
        {id:ZaAccount.A_accountName, type:_STRING_, ref:"attrs/"+ZaAccount.A_accountName},
        {id:ZaAccount.A_firstName, type:_STRING_, ref:"attrs/"+ZaAccount.A_firstName},
        {id:ZaAccount.A_lastName, type:_STRING_, ref:"attrs/"+ZaAccount.A_lastName, required:true},
        {id:ZaAccount.A_zimbraPhoneticFirstName, type:_STRING_, ref:"attrs/"+ZaAccount.A_zimbraPhoneticFirstName},
        {id:ZaAccount.A_zimbraPhoneticLastName, type:_STRING_, ref:"attrs/"+ZaAccount.A_zimbraPhoneticLastName},
    {id:ZaAccount.A_zimbraPhoneticCompany, type:_STRING_, ref:"attrs/"+ZaAccount.A_zimbraPhoneticCompany},
    {id:ZaAccount.A_mail, type:_STRING_, ref:"attrs/"+ZaAccount.A_mail},
        {id:ZaAccount.A_password, type:_STRING_, ref:"attrs/"+ZaAccount.A_password},
        {id:ZaAccount.A2_confirmPassword, type:_STRING_},
         ZaItem.descriptionModelItem,
            /*
        {id:ZaAccount.A_description, type: _LIST_, ref:"attrs/"+ZaAccount.A_description,
            listItem:{type:_STRING_}
        },    */
        {id:ZaAccount.A_telephoneNumber, type:_STRING_, ref:"attrs/"+ZaAccount.A_telephoneNumber},
        {id:ZaAccount.A_mobile, type:_STRING_, ref:"attrs/"+ZaAccount.A_mobile},
        {id:ZaAccount.A_pager, type:_STRING_, ref:"attrs/"+ZaAccount.A_pager},
        {id:ZaAccount.A_homePhone, type:_STRING_, ref:"attrs/"+ZaAccount.A_homePhone},
        {id:ZaAccount.A_displayname, type:_STRING_, ref:"attrs/"+ZaAccount.A_displayname},
        {id:ZaAccount.A_country, type:_STRING_, ref:"attrs/"+ZaAccount.A_country},
        {id:ZaAccount.A_company, type:_STRING_, ref:"attrs/"+ZaAccount.A_company},
        {id:ZaAccount.A_title, type:_STRING_, ref:"attrs/"+ZaAccount.A_title},
        {id:ZaAccount.A_manager, type:_STRING_, ref:"attrs/"+ZaAccount.A_manager},
        {id:ZaAccount.A_facsimileTelephoneNumber, type:_STRING_, ref:"attrs/"+ZaAccount.A_facsimileTelephoneNumber},
        {id:ZaAccount.A_initials, type:_STRING_, ref:"attrs/"+ZaAccount.A_initials},
        {id:ZaAccount.A_city, type:_STRING_, ref:"attrs/"+ZaAccount.A_city},
        {id:ZaAccount.A_orgUnit, type:_STRING_, ref:"attrs/"+ZaAccount.A_orgUnit},
        {id:ZaAccount.A_office, type:_STRING_, ref:"attrs/"+ZaAccount.A_office},
        {id:ZaAccount.A_street, type:_STRING_, ref:"attrs/"+ZaAccount.A_street},
        {id:ZaAccount.A_zip, type:_STRING_, ref:"attrs/"+ZaAccount.A_zip},
        {id:ZaAccount.A_state, type:_STRING_, ref:"attrs/"+ZaAccount.A_state},
        {id:ZaAccount.A_mailDeliveryAddress, type:_EMAIL_ADDRESS_, ref:"attrs/"+ZaAccount.A_mailDeliveryAddress},
        {id:ZaAccount.A_zimbraMailCanonicalAddress, type:_EMAIL_ADDRESS_, ref:"attrs/"+ZaAccount.A_zimbraMailCanonicalAddress},
        {id:ZaAccount.A_accountStatus, type:_STRING_, ref:"attrs/"+ZaAccount.A_accountStatus},
        {id:ZaAccount.A_notes, type:_STRING_, ref:"attrs/"+ZaAccount.A_notes},
        {id:ZaAccount.A_zimbraMailQuota, type:_COS_MAILQUOTA_, ref:"attrs/"+ZaAccount.A_zimbraMailQuota},
        {id:ZaAccount.A_mailHost, type:_STRING_, ref:"attrs/"+ZaAccount.A_mailHost},
        {id:ZaAccount.A_COSId, type:_STRING_, ref:"attrs/" + ZaAccount.A_COSId},
        {id:ZaAccount.A_zimbraIsAdminAccount, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraIsAdminAccount},
        {id:ZaAccount.A_zimbraIsSystemResource, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraIsSystemResource},
        {id:ZaAccount.A_zimbraIsSystemAccount, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraIsSystemAccount},

        {id:ZaAccount.A_zimbraLastLogonTimestamp, type:_STRING_, ref:"attrs/"+ZaAccount.A_zimbraLastLogonTimestamp},
        {id:ZaAccount.A_zimbraMaxPwdLength, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraMaxPwdLength, maxInclusive:2147483647, minInclusive:0},
        {id:ZaAccount.A_zimbraMinPwdLength, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraMinPwdLength, maxInclusive:2147483647, minInclusive:0},

        {id:ZaAccount.A_zimbraPasswordMinUpperCaseChars, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraPasswordMinUpperCaseChars, maxInclusive:2147483647, minInclusive:0},
        {id:ZaAccount.A_zimbraPasswordMinLowerCaseChars, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraPasswordMinLowerCaseChars, maxInclusive:2147483647, minInclusive:0},
        {id:ZaAccount.A_zimbraPasswordMinPunctuationChars, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraPasswordMinPunctuationChars, maxInclusive:2147483647, minInclusive:0},
        {id:ZaAccount.A_zimbraPasswordMinNumericChars, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraPasswordMinNumericChars, maxInclusive:2147483647, minInclusive:0},
        {id:ZaAccount.A_zimbraPasswordMinDigitsOrPuncs, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraPasswordMinDigitsOrPuncs, maxInclusive:2147483647, minInclusive:0},
     {id:ZaAccount.A_zimbraAuthLdapExternalDn, type:_STRING_, ref:"attrs/"+ZaAccount.A_zimbraAuthLdapExternalDn},

        {id:ZaAccount.A_zimbraMinPwdAge, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraMinPwdAge, maxInclusive:2147483647, minInclusive:0},
        {id:ZaAccount.A_zimbraMaxPwdAge, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraMaxPwdAge, maxInclusive:2147483647, minInclusive:0},
        {id:ZaAccount.A_zimbraEnforcePwdHistory, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraEnforcePwdHistory, maxInclusive:2147483647, minInclusive:0},
        {id:ZaAccount.A_zimbraMailAlias, type:_LIST_, ref:"attrs/"+ZaAccount.A_zimbraMailAlias, listItem:{type:_EMAIL_ADDRESS_}},
        {id:ZaAccount.A_zimbraForeignPrincipal, type:_LIST_, ref:"attrs/"+ZaAccount.A_zimbraForeignPrincipal, listItem:{type:_STRING_}},
        {id:ZaAccount.A_zimbraMailForwardingAddress, type:_LIST_, ref:"attrs/"+ZaAccount.A_zimbraMailForwardingAddress, listItem:{type:_EMAIL_ADDRESS_}},
        {id:ZaAccount.A_zimbraPrefCalendarForwardInvitesTo, type:_LIST_, ref:"attrs/"+ZaAccount.A_zimbraPrefCalendarForwardInvitesTo, listItem:{type:_EMAIL_ADDRESS_}},
        {id:ZaAccount.A_zimbraPasswordMustChange, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraPasswordMustChange},
        {id:ZaAccount.A_zimbraPasswordLocked, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPasswordLocked, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPasswordBlockCommonEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPasswordBlockCommonEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraContactMaxNumEntries, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraContactMaxNumEntries, maxInclusive:2147483647, minInclusive:0},
        {id:ZaAccount.A_zimbraMailForwardingAddressMaxLength, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraMailForwardingAddressMaxLength, maxInclusive:2147483647, minInclusive:0},
        {id:ZaAccount.A_zimbraDataSourcePop3PollingInterval, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraDataSourcePop3PollingInterval},
        {id:ZaAccount.A_zimbraDataSourceImapPollingInterval, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraDataSourceImapPollingInterval},
        {id:ZaAccount.A_zimbraDataSourceCalendarPollingInterval, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraDataSourceCalendarPollingInterval},
        {id:ZaAccount.A_zimbraDataSourceRssPollingInterval, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraDataSourceRssPollingInterval},
        {id:ZaAccount.A_zimbraDataSourceCaldavPollingInterval, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraDataSourceCaldavPollingInterval},
        {id:ZaAccount.A_zimbraDataSourceMinPollingInterval, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraDataSourceMinPollingInterval},
        {id:ZaAccount.A_zimbraPrefAutoSaveDraftInterval, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraPrefAutoSaveDraftInterval},
        {id:ZaAccount.A_zimbraProxyAllowedDomains, type:_COS_LIST_, ref:"attrs/"+ZaAccount.A_zimbraProxyAllowedDomains, listItem:{ type: _STRING_}},
        {id:ZaAccount.A_zimbraMailForwardingAddressMaxNumAddrs, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraMailForwardingAddressMaxNumAddrs, maxInclusive:2147483647, minInclusive:0},
        {id:ZaAccount.A_zimbraAttachmentsBlocked, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraAttachmentsBlocked, choices:ZaModel.BOOLEAN_CHOICES},

        {id:ZaAccount.A_zimbraQuotaWarnPercent, type:_COS_NUMBER_, ref:"attrs/" + ZaAccount.A_zimbraQuotaWarnPercent},
        {id:ZaAccount.A_zimbraQuotaWarnInterval, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraQuotaWarnInterval},
        {id:ZaAccount.A_zimbraQuotaWarnMessage, type:_COS_STRING_, ref:"attrs/" + ZaAccount.A_zimbraQuotaWarnMessage},

        {id:ZaAccount.A_zimbraAuthTokenLifetime, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraAuthTokenLifetime},
        {id:ZaAccount.A_zimbraAdminAuthTokenLifetime, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraAdminAuthTokenLifetime},
        {id:ZaAccount.A_zimbraMailIdleSessionTimeout, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraMailIdleSessionTimeout},
        {id:ZaAccount.A_zimbraMailMessageLifetime, type:_COS_MLIFETIME_, ref:"attrs/" + ZaAccount.A_zimbraMailMessageLifetime},
        {id:ZaAccount.A_zimbraMailSpamLifetime, type:_COS_MLIFETIME_, ref:"attrs/" + ZaAccount.A_zimbraMailSpamLifetime},
        {id:ZaAccount.A_zimbraMailTrashLifetime, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraMailTrashLifetime},
        {id:ZaAccount.A_zimbraPrefSaveToSent, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefSaveToSent, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefMailSignature, type:_STRING_, ref:"attrs/"+ZaAccount.A_zimbraPrefMailSignature},
        {id:ZaAccount.A_zimbraPrefMailSignatureEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraPrefMailSignatureEnabled},
        //preferences
        {id:ZaAccount.A_zimbraPrefMandatorySpellCheckEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefMandatorySpellCheckEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefAppleIcalDelegationEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefAppleIcalDelegationEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefCalendarShowPastDueReminders, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefCalendarShowPastDueReminders, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefCalendarToasterEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefCalendarToasterEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefCalendarAllowCancelEmailToSelf, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefCalendarAllowCancelEmailToSelf, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefCalendarAllowPublishMethodInvite, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefCalendarAllowPublishMethodInvite, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefCalendarAllowForwardedInvite, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefCalendarAllowForwardedInvite, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefCalendarReminderFlashTitle, type:_COS_ENUM_, ref:"attrs/" + ZaAccount.A_zimbraPrefCalendarReminderFlashTitle, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefCalendarReminderSoundsEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefCalendarReminderSoundsEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefCalendarSendInviteDeniedAutoReply, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefCalendarSendInviteDeniedAutoReply, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefCalendarNotifyDelegatedChanges, type:_COS_ENUM_, ref:"attrs/" + ZaAccount.A_zimbraPrefCalendarNotifyDelegatedChanges, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefCalendarFirstDayOfWeek, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraPrefCalendarFirstDayOfWeek, choices:ZaSettings.dayOfWeekChoices},
        {id:ZaAccount.A_zimbraPrefCalendarInitialView, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefCalendarInitialView, choices:ZaSettings.calendarViewChoinces},
        {id:ZaAccount.A_zimbraPrefClientType, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefClientType, choices:ZaSettings.clientTypeChoices},
        {id:ZaAccount.A_zimbraPrefTimeZoneId,type:_COS_STRING_, ref:"attrs/"+ZaAccount.A_zimbraPrefTimeZoneId, choices:ZaSettings.timeZoneChoices},
        {id:ZaAccount.A_zimbraPrefMailDefaultCharset,type:_COS_STRING_, ref:"attrs/"+ZaAccount.A_zimbraPrefMailDefaultCharset, choices:ZaSettings.mailCharsetChoices},
        {id:ZaAccount.A_zimbraPrefMailToasterEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefMailToasterEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefMessageIdDedupingEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefMessageIdDedupingEnabled, choices:ZaModel.BOOLEAN_CHOICES},

    {id:ZaAccount.A_zimbraPrefLocale,type:_COS_STRING_, ref:"attrs/"+ZaAccount.A_zimbraPrefLocale},
        {id:ZaAccount.A_zimbraPrefSentMailFolder, type:_STRING_, ref:"attrs/"+ZaAccount.A_zimbraPrefSentMailFolder},
        {id:ZaAccount.A_zimbraPrefIncludeSpamInSearch, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefIncludeSpamInSearch, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefIncludeTrashInSearch, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefIncludeTrashInSearch, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefMailInitialSearch, type:_COS_STRING_, ref:"attrs/"+ZaAccount.A_zimbraPrefMailInitialSearch},
        {id:ZaAccount.A_zimbraMaxMailItemsPerPage, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraMaxMailItemsPerPage,maxInclusive:2147483647, minInclusive:0},
        {id:ZaAccount.A_zimbraPrefMailItemsPerPage, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraPrefMailItemsPerPage, choices:[10,25,50,100]},
        {
            id: ZaAccount.A_zimbraPrefMailPollingInterval,
            type: _COS_ENUM_POLLING_,
            ref: "attrs/" + ZaAccount.A_zimbraPrefMailPollingInterval,
            choices: ZaModel.MAIL_POLLING_INTERVAL_CHOICES
        },
        {id:ZaAccount.A_zimbraMailMinPollingInterval, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraMailMinPollingInterval},
        {id:ZaAccount.A_zimbraPrefMailFlashIcon, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraPrefMailFlashIcon, type:_COS_ENUM_},
        {id:ZaAccount.A_zimbraPrefMailFlashTitle, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraPrefMailFlashTitle, type:_COS_ENUM_},
        {id:ZaAccount.A_zimbraPrefMailSoundsEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraPrefMailSoundsEnabled, type:_COS_ENUM_},
        {id:ZaAccount.A_zimbraPrefOutOfOfficeReply, type:_STRING_, ref:"attrs/"+ZaAccount.A_zimbraPrefOutOfOfficeReply},
        {id:ZaAccount.A_zimbraPrefOutOfOfficeReplyEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraPrefOutOfOfficeReplyEnabled, type:_COS_ENUM_},
        {id:ZaAccount.A_zimbraPrefItemsPerVirtualPage, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraPrefItemsPerVirtualPage},
        {id:ZaAccount.A_zimbraPrefReplyToAddress, type:_STRING_, ref:"attrs/"+ZaAccount.A_zimbraPrefReplyToAddress},
        {id:ZaAccount.A_zimbraPrefUseKeyboardShortcuts, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefUseKeyboardShortcuts, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraAllowAnyFromAddress, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraAllowAnyFromAddress, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraAllowFromAddress,type: _LIST_, ref:"attrs/"+ZaAccount.A_zimbraAllowFromAddress, listItem:{type:_STRING_}},
        {id:ZaAccount.A_zimbraPrefComposeInNewWindow, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefComposeInNewWindow, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefForwardReplyInOriginalFormat, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefForwardReplyInOriginalFormat, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefAutoAddAddressEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefAutoAddAddressEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefComposeFormat, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefComposeFormat, choices:ZaModel.COMPOSE_FORMAT_CHOICES},
        {id:ZaAccount.A_zimbraPrefHtmlEditorDefaultFontFamily, choices:ZaModel.FONT_FAMILY_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraPrefHtmlEditorDefaultFontFamily, type:_COS_ENUM_},
        {id:ZaAccount.A_zimbraPrefHtmlEditorDefaultFontSize, choices:ZaModel.FONT_SIZE_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraPrefHtmlEditorDefaultFontSize, type:_COS_ENUM_},
        {id:ZaAccount.A_zimbraPrefHtmlEditorDefaultFontColor, ref:"attrs/"+ZaAccount.A_zimbraPrefHtmlEditorDefaultFontColor, type:_COS_STRING_},
        {id:ZaAccount.A_zimbraMailSignatureMaxLength, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraMailSignatureMaxLength},
        {id:ZaAccount.A_zimbraPrefGroupMailBy, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefGroupMailBy, choices:ZaModel.GROUP_MAIL_BY_CHOICES},
        {id:ZaAccount.A_zimbraPrefMessageViewHtmlPreferred, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefMessageViewHtmlPreferred, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefNewMailNotificationAddress, type:_STRING_, ref:"attrs/"+ZaAccount.A_zimbraPrefNewMailNotificationAddress},
        {id:ZaAccount.A_zimbraPrefMailForwardingAddress, type:_STRING_, ref:"attrs/"+ZaAccount.A_zimbraPrefMailForwardingAddress,
         constraints: {type:"method", value:
         function (value, form, formItem, instance) {
                 if (value){
              var i;
                      var startIndex = 0;
                      var endIndex = 0;
                      var currentEmailAddress;
                      var ret;
                      var isThrown = false;
                      value = value.replace(/\s/g,""); //delete all the white space
                      for(i = 0; i < value.length; i++){
                         endIndex = value.indexOf(",", startIndex);
                         if(endIndex == -1){
                            currentEmailAddress = value.substring(startIndex);

                            if(!AjxUtil.isEmailAddress(currentEmailAddress, false)){
                                   isThrown = true;
                            }

                            break;
                         }
                         currentEmailAddress = value.substring(startIndex, endIndex);

                         if(!AjxUtil.isEmailAddress(currentEmailAddress, false)){
                             isThrown = true;
                             break;
                         }

                         startIndex = endIndex + 1;
                    }
                    if(isThrown){
                       throw  ZaMsg.ErrorInvalidEmailAddressList;
                    }
             }
                return value;
       }
     }
        },
        {id:ZaAccount.A_zimbraPrefNewMailNotificationEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraPrefNewMailNotificationEnabled},
        {id:ZaAccount.A_zimbraPrefOutOfOfficeReply, type:_STRING_, ref:"attrs/"+ZaAccount.A_zimbraPrefOutOfOfficeReply},
        {id:ZaAccount.A_zimbraPrefMailLocalDeliveryDisabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraPrefMailLocalDeliveryDisabled},
        {id:ZaAccount.A_zimbraIsExternalVirtualAccount, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraIsExternalVirtualAccount},
        {id:ZaAccount.A_zimbraPrefShowSearchString, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefShowSearchString, choices:ZaModel.BOOLEAN_CHOICES},
        //{id:ZaAccount.A_zimbraPrefMailSignatureStyle, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefMailSignatureStyle, choices:ZaModel.SIGNATURE_STYLE_CHOICES},
        {id:ZaAccount.A_zimbraPrefUseTimeZoneListInCalendar, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefUseTimeZoneListInCalendar, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefImapSearchFoldersEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefImapSearchFoldersEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefCalendarUseQuickAdd, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefCalendarUseQuickAdd, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefCalendarAlwaysShowMiniCal, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefCalendarAlwaysShowMiniCal, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefSkin, type:_COS_STRING_, ref:"attrs/"+ZaAccount.A_zimbraPrefSkin},
        {id:ZaAccount.A_zimbraAvailableSkin, type:_COS_LIST_, ref:"attrs/" + ZaAccount.A_zimbraAvailableSkin, dataType: _STRING_},
        {id:ZaAccount.A_zimbraZimletAvailableZimlets, type:_COS_LIST_, ref:"attrs/" + ZaAccount.A_zimbraZimletAvailableZimlets, dataType: _STRING_,outputType:_LIST_},
        {id:ZaAccount.A_zimbraPrefGalAutoCompleteEnabled, type:_COS_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraPrefGalAutoCompleteEnabled},
        {id:ZaAccount.A_zimbraPrefAdminConsoleWarnOnExit, type:_COS_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraPrefAdminConsoleWarnOnExit},
        {id:ZaAccount.A_zimbraPrefWarnOnExit, type:_COS_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraPrefWarnOnExit},
        {id:ZaAccount.A_zimbraPrefShowSelectionCheckbox, type:_COS_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaAccount.A_zimbraPrefShowSelectionCheckbox},
        {id:ZaAccount.A_zimbraPrefDisplayExternalImages, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefDisplayExternalImages, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefOutOfOfficeCacheDuration, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraPrefOutOfOfficeCacheDuration},
        {id:ZaAccount.A_zimbraJunkMessagesIndexingEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraJunkMessagesIndexingEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefMailSendReadReceipts, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefMailSendReadReceipts, choices:ZaModel.SEND_READ_RECEPIT_CHOICES},
        {id:ZaAccount.A_zimbraPrefReadReceiptsToAddress, type:_EMAIL_ADDRESS_, ref:"attrs/"+ZaAccount.A_zimbraPrefReadReceiptsToAddress},
        {id:ZaAccount.A_zimbraPrefCalendarAutoAddInvites, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefCalendarAutoAddInvites, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefCalendarApptVisibility, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefCalendarApptVisibility, choices:ZaSettings.apptVisibilityChoices},
        {id:ZaAccount.A_zimbraPrefImapEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefImapEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefPop3Enabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefPop3Enabled, choices:ZaModel.BOOLEAN_CHOICES},
        //features
        {id:ZaAccount.A_zimbraFeatureManageZimlets, type:_COS_ENUM_, ref:"attrs/" + ZaAccount.A_zimbraFeatureManageZimlets, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureImportFolderEnabled, type:_COS_ENUM_, ref:"attrs/" + ZaAccount.A_zimbraFeatureImportFolderEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureExportFolderEnabled, type:_COS_ENUM_, ref:"attrs/" + ZaAccount.A_zimbraFeatureExportFolderEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraDumpsterEnabled, type:_COS_ENUM_, ref:"attrs/" + ZaAccount.A_zimbraDumpsterEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraDumpsterUserVisibleAge, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraDumpsterUserVisibleAge },
        {id:ZaAccount.A_zimbraDumpsterPurgeEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraDumpsterPurgeEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraMailDumpsterLifetime, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraMailDumpsterLifetime },
        {id:ZaAccount.A_zimbraFeatureMailPriorityEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureMailPriorityEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureReadReceiptsEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureReadReceiptsEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureImapDataSourceEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureImapDataSourceEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeaturePop3DataSourceEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeaturePop3DataSourceEnabled, choices:ZaModel.BOOLEAN_CHOICES},
           {id:ZaAccount.A_zimbraFeatureMailSendLaterEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureMailSendLaterEnabled, choices:ZaModel.BOOLEAN_CHOICES},
           //{id:ZaAccount.A_zimbraFeatureFreeBusyViewEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureFreeBusyViewEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureIdentitiesEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureIdentitiesEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureContactsEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureContactsEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureCalendarEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureCalendarEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureTasksEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureTasksEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureTaggingEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureTaggingEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeaturePeopleSearchEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeaturePeopleSearchEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureAdvancedSearchEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureAdvancedSearchEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureSavedSearchesEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureSavedSearchesEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureConversationsEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureConversationsEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureChangePasswordEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureChangePasswordEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureInitialSearchPreferenceEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureInitialSearchPreferenceEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureFiltersEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureFiltersEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureGalEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureGalEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureMAPIConnectorEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureMAPIConnectorEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureMailEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureMailEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        //{id:ZaAccount.A_zimbraFeatureNotebookEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureNotebookEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureBriefcasesEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureBriefcasesEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureHtmlComposeEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureHtmlComposeEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureMailForwardingEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureMailForwardingEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureSharingEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureSharingEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraExternalSharingEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraExternalSharingEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPublicSharingEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPublicSharingEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureOutOfOfficeReplyEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureOutOfOfficeReplyEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureNewMailNotificationEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureNewMailNotificationEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        //{id:ZaAccount.A_zimbraFeatureShortcutAliasesEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureShortcutAliasesEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureOptionsEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureOptionsEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureSkinChangeEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureSkinChangeEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPrefCalendarApptReminderWarningTime, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPrefCalendarApptReminderWarningTime, choices:ZaModel.REMINDER_CHOICES},
        {id:ZaAccount.A_zimbraFeatureGalAutoCompleteEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureGalAutoCompleteEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureGroupCalendarEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureGroupCalendarEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureFlaggingEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureFlaggingEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraImapEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraImapEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPop3Enabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPop3Enabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureWebClientEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureWebClientEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {
            id: ZaAccount.A_zimbraFeatureDistributionListFolderEnabled,
            choices: ZaModel.BOOLEAN_CHOICES,
            ref: "attrs/" + ZaAccount.A_zimbraFeatureDistributionListFolderEnabled,
            type: _COS_ENUM_
        },

        {id:ZaAccount.A_zimbraFeatureSMIMEEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureSMIMEEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureManageSMIMECertificateEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureManageSMIMECertificateEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureEwsEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureEwsEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureTouchClientEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureTouchClientEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureWebClientOfflineAccessEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureWebClientOfflineAccessEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraFeatureCalendarReminderDeviceEmailEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraFeatureCalendarReminderDeviceEmailEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaModel.currentStep, type:_NUMBER_, ref:ZaModel.currentStep},
        {id:ZaAccount.A2_newAlias, type:_STRING_},
        {id:ZaAccount.A2_aliases, type:_LIST_,listItem:{type:_STRING_}},
        {id:ZaAccount.A2_forwarding, type:_LIST_,listItem:{type:_STRING_}},
        {id:ZaAccount.A2_mbxsize, type:_NUMBER_, ref:"attrs/"+ZaAccount.A2_mbxsize},
        //{id:ZaAccount.A2_quota, type:_MAILQUOTA_2_, ref:"attrs/"+ZaAccount.A_zimbraMailQuota},
        {id:ZaAccount.A2_autodisplayname, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A2_autoMailServer, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A2_autoCos, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A2_alias_selection_cache, type:_LIST_},
        {id:ZaAccount.A2_fwdAddr_selection_cache, type:_LIST_},
        {id:ZaAccount.A2_calFwdAddr_selection_cache, type:_LIST_},
        {id:ZaAccount.A2_fp_selection_cache, type:_LIST_},
        {id:ZaAccount.A_zimbraHideInGal, type:_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraHideInGal, choices:ZaModel.BOOLEAN_CHOICES},

        {id:ZaAccount.A_zimbraMailTransport, type:_STRING_, ref:"attrs/"+ZaAccount.A_zimbraMailTransport},

        //security
        {id:ZaAccount.A_zimbraPasswordLockoutEnabled, type:_COS_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraPasswordLockoutEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaAccount.A_zimbraPasswordLockoutDuration, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraPasswordLockoutDuration},
        {id:ZaAccount.A_zimbraPasswordLockoutMaxFailures, type:_COS_NUMBER_, ref:"attrs/"+ZaAccount.A_zimbraPasswordLockoutMaxFailures, maxInclusive:2147483647, minInclusive:0},
        {id:ZaAccount.A_zimbraPasswordLockoutFailureLifetime, type:_COS_MLIFETIME_, ref:"attrs/"+ZaAccount.A_zimbraPasswordLockoutFailureLifetime},

        //interop
        {id:ZaAccount.A_zimbraFreebusyExchangeUserOrg, ref:"attrs/" +  ZaAccount.A_zimbraFreebusyExchangeUserOrg, type:_COS_STRING_},

        //datasources
        {id:ZaAccount.A2_ldap_ds, ref:ZaAccount.A2_ldap_ds, type:_OBJECT_, items:ZaDataSource.myXModel.items},
        {id:ZaAccount.A2_zimbra_ds, ref:ZaAccount.A2_zimbra_ds, type:_OBJECT_, items:ZaDataSource.myXModel.items},
        {id:ZaAccount.A2_datasources, ref:ZaAccount.A2_datasources, type:_LIST_, listItem:{type:_OBJECT_, items:ZaDataSource.myXModel.items}} ,
        {id:ZaAccount.A2_isExternalAuth, ref:ZaAccount.A2_isExternalAuth, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES1}
    ]
};



ZaItem._ATTR[ZaAccount.A_displayname] = ZaMsg.attrDesc_accountName;
ZaItem._ATTR[ZaAccount.A_description] = ZaMsg.attrDesc_description;
ZaItem._ATTR[ZaAccount.A_firstName] = ZaMsg.attrDesc_firstName;
ZaItem._ATTR[ZaAccount.A_lastName] = ZaMsg.attrDesc_lastName;
ZaItem._ATTR[ZaAccount.A_accountStatus] = ZaMsg.attrDesc_accountStatus;
ZaItem._ATTR[ZaAccount.A_mailHost] =  ZabMsg.attrDesc_mailHost;
ZaItem._ATTR[ZaAccount.A_zimbraMailQuota] = ZaMsg.attrDesc_zimbraMailQuota;
ZaItem._ATTR[ZaAccount.A_notes] = ZaMsg.attrDesc_notes;

ZaAccount._accountStatus =
function(val) {
    var desc = ZaAccount.getAccountStatusMsg (val);
    return (desc == null) ? val : desc;
}

/* Translation of Account status values into screen names */

ZaAccount.getAccountStatusMsg = function (status) {
    if (status == ZaAccount.ACCOUNT_STATUS_ACTIVE)  {
        return ZaMsg.accountStatus_active;
    }else if (status == ZaAccount.ACCOUNT_STATUS_CLOSED) {
        return ZaMsg.accountStatus_closed;
    }else if (status == ZaAccount.ACCOUNT_STATUS_LOCKED ) {
        return  ZaMsg.accountStatus_locked;
    }else if (status == ZaAccount.ACCOUNT_STATUS_LOCKOUT){
        return  ZaMsg.accountStatus_lockout;
    }else if (status == ZaAccount.ACCOUNT_STATUS_MAINTENANCE){
        return  ZaMsg.accountStatus_maintenance;
    }else if (status == ZaAccount.ACCOUNT_STATUS_PENDING) {
        return ZaMsg.accountStatus_pending ;
    }else {
        return "";
    }
}

ZaAccount.initMethod = function () {
    this.attrs = new Object();
    this.id = "";
    this.name="";
    this.attrs[ZaAccount.A_zimbraMailAlias] = new Array();
    this.attrs[ZaAccount.A_zimbraForeignPrincipal] = new Array ();
    this[ZaAccount.A2_memberOf] = {directMemberList: [],indirectMemberList: [],nonMemberList: []};
    this[ZaAccount.A2_directMemberList + "_more"] = 0;
    this[ZaAccount.A2_indirectMemberList + "_more"] = 0;
}
ZaItem.initMethods["ZaAccount"].push(ZaAccount.initMethod);

ZaAccount.getDomain =
function (accountName) {
    if (!accountName) return null;
    return accountName.substring(accountName.lastIndexOf ("@") + 1 ) ;
}

ZaAccount.isAutoMailServer = function () {
    return (this.getInstanceValue(ZaAccount.A2_autoMailServer)=="FALSE" && !AjxUtil.isEmpty(ZaApp.getInstance().getServerListChoices().getChoices()) && !AjxUtil.isEmpty(ZaApp.getInstance().getServerListChoices().getChoices().values));
}


ZaAccount.setCosChanged = function (value, event, form) {
    var oldVal = this.getInstanceValue();
    if(oldVal == value)
        return;

    this.setInstanceValue(value);

    if(ZaItem.ID_PATTERN.test(value)) {
        this._defaultValues = ZaCos.getCosById(value);
    } else if(!AjxUtil.isEmpty(value)) {
        var cos = ZaCos.getCosByName(value);
        if(cos) {
            this._defaultValues = cos;
            this.getInstance().attrs[ZaAccount.A_COSId] = cos.id;
        } else {
            this.setError(AjxMessageFormat.format(ZaMsg.ERROR_NO_SUCH_COS,[value]));
            var event = new DwtXFormsEvent(form, this, value);
            form.notifyListeners(DwtEvent.XFORMS_VALUE_ERROR, event);
        }
    }
}

ZaAccount.setDomainChanged =
function (value, event, form){
    //form.parent.setDirty(true);
    try {
        var instance = form.getInstance();
        var oldDomainName = ZaAccount.getDomain(instance[ZaAccount.A_name]);
        this.setInstanceValue(value);
        var p = form.parent ;
        var newDomainName = ZaAccount.getDomain(value) ;

    if( !newDomainName ){
        return;
    }

        var domainObj;
        try {
            domainObj =  ZaDomain.getDomainByName(newDomainName) ;
        } catch (ex) {
            if(ex.code == ZmCsfeException.SVC_PERM_DENIED) {
                form.getModel().setInstanceValue(form.getInstance(),"setAttrs",[]);
                form.getModel().setInstanceValue(form.getInstance(),ZaAccount.A2_errorMessage,AjxMessageFormat.format(ZaMsg.CANNOT_CREATE_ACCOUNTS_IN_THIS_DOMAIN,[newDomainName]));
                return;
            } else if(ex.code == ZmCsfeException.NO_SUCH_DOMAIN) {
                return;
            } else {
                throw (ex);
            }

        }

    if (instance [ZaAccount.A2_autoCos] == "TRUE"){
        ZaAccount.setDefaultCos(instance);
    }

        if ((newDomainName != oldDomainName)
                //set the right default cos at the account creation time
                || (instance [ZaAccount.A_name].indexOf("@") == 0))
        { //see if the cos needs to be updated accordingly
            try {
                ZaItem.prototype.loadNewObjectDefaults.call(instance,"name", newDomainName);
            } catch (ex) {
                if(ex.code == ZmCsfeException.NO_SUCH_DOMAIN) {
                    return value;
                } else {
                    throw (ex);
                }
            }

            if(instance.getAttrs[ZaAccount.A_zimbraAvailableSkin] || instance.getAttrs.all) {
                var skins = ZaApp.getInstance().getInstalledSkins();

                if(AjxUtil.isEmpty(skins)) {
                    if(domainObj && domainObj.attrs && !AjxUtil.isEmpty(domainObj.attrs[ZaDomain.A_zimbraAvailableSkin])) {
                        //if we cannot get all zimlets try getting them from domain
                        skins = domainObj.attrs[ZaDomain.A_zimbraAvailableSkin];
                    } else if(instance._defaultValues && instance._defaultValues.attrs && !AjxUtil.isEmpty(instance._defaultValues.attrs[ZaAccount.A_zimbraAvailableSkin])) {
                        //if we cannot get all zimlets from domain either, just use whatever came in "defaults" which would be what the COS value is
                        skins = instance._defaultValues.attrs[ZaAccount.A_zimbraAvailableSkin];
                    } else {
                        skins = [];
                    }
                } else {
                    if (AjxUtil.isString(skins))     {
                        skins = [skins];
                    }
                }

                var skinsChoices = ZaApp.getInstance().getSkinChoices(skins);
                if(ZaNewAccountXWizard.themeChoices) {
                    ZaNewAccountXWizard.themeChoices.setChoices(skinsChoices);
                    ZaNewAccountXWizard.themeChoices.dirtyChoices();
                }

                if(ZaAccountXFormView.themeChoices) {
                    ZaAccountXFormView.themeChoices.setChoices(skinsChoices);
                    ZaAccountXFormView.themeChoices.dirtyChoices();
                }

            }

            if(instance.getAttrs[ZaAccount.A_zimbraZimletAvailableZimlets] || instance.getAttrs.all) {
                //get sll Zimlets
                var allZimlets = ZaZimlet.getAll("extension");

                if(!AjxUtil.isEmpty(allZimlets) && allZimlets instanceof ZaItemList || allZimlets instanceof AjxVector)
                    allZimlets = allZimlets.getArray();

                if(AjxUtil.isEmpty(allZimlets)) {

                    if(domainObj && domainObj.attrs && !AjxUtil.isEmpty(domainObj.attrs[ZaDomain.A_zimbraZimletDomainAvailableZimlets])) {
                        //if we cannot get all zimlets try getting them from domain
                        allZimlets = domainObj.attrs[ZaDomain.A_zimbraZimletDomainAvailableZimlets];
                    } else if(instance._defaultValues && instance._defaultValues.attrs && !AjxUtil.isEmpty(instance._defaultValues.attrs[ZaAccount.A_zimbraZimletAvailableZimlets])) {
                        allZimlets = instance._defaultValues.attrs[ZaAccount.A_zimbraZimletAvailableZimlets];
                    } else {
                        allZimlets = [];
                    }
                    if(ZaNewAccountXWizard.zimletChoices) {
                        ZaNewAccountXWizard.zimletChoices.setChoices(allZimlets);
                        ZaNewAccountXWizard.zimletChoices.dirtyChoices();
                    }

                    if(ZaAccountXFormView.zimletChoices) {
                        ZaAccountXFormView.zimletChoices.setChoices(allZimlets);
                        ZaAccountXFormView.zimletChoices.dirtyChoices();
                    }

                } else {
                    //convert objects to strings
                    var cnt = allZimlets.length;
                    var _tmpZimlets = [];
                    for(var i=0; i<cnt; i++) {
                        var zimlet = allZimlets[i];
                        _tmpZimlets.push(zimlet.name);
                    }
                    if(ZaNewAccountXWizard.zimletChoices) {
                        ZaNewAccountXWizard.zimletChoices.setChoices(_tmpZimlets);
                        ZaNewAccountXWizard.zimletChoices.dirtyChoices();
                    }
                    if(ZaAccountXFormView.zimletChoices) {
                        ZaAccountXFormView.zimletChoices.setChoices(_tmpZimlets);
                        ZaAccountXFormView.zimletChoices.dirtyChoices();
                    }
                }
            }
                    ZaAccount.setDefaultCos(instance);
                    instance [ZaAccount.A2_autoCos] = "TRUE";
                    form.refresh();

        }

        //if domain name is not changed, we don't want to update the account type output
        if  (oldDomainName !=  newDomainName){
            if (domainObj && domainObj.attrs ){
                var cosMaxAccounts = domainObj.attrs[ZaDomain.A_zimbraDomainCOSMaxAccounts] ;
                if (cosMaxAccounts && cosMaxAccounts.length > 0){
                    form.getModel().setInstanceValue(form.getInstance(),ZaAccount.A2_errorMessage,"");
                    form.getModel().setInstanceValue(form.getInstance(),ZaAccount.A2_accountTypes,domainObj.getAccountTypes ());
                    form.parent.updateAccountType();
                }

             }

        }
    if (domainObj && domainObj.attrs ){
                var maxDomainAccounts = domainObj.attrs[ZaDomain.A_domainMaxAccounts] ;
                var cosMaxAccounts = domainObj.attrs[ZaDomain.A_zimbraDomainCOSMaxAccounts] ;
                if (maxDomainAccounts) {
                    maxDomainAccounts = parseInt (maxDomainAccounts);
                }
                if (maxDomainAccounts && maxDomainAccounts > 0) {
                    var usedAccounts = domainObj.getUsedDomainAccounts(newDomainName );
                    if (maxDomainAccounts < usedAccounts && (!cosMaxAccounts || cosMaxAccounts.length <= 0)) {
            form.getModel().setInstanceValue(form.getInstance(),ZaAccount.A2_accountTypes,null);
                        var msg;
                        if (usedAccounts - maxDomainAccounts > 1) {
                            msg = AjxMessageFormat.format (ZaMsg.NAD_DomainAccountLimits_p, [newDomainName, usedAccounts - maxDomainAccounts]);
                        } else {
                            msg = AjxMessageFormat.format (ZaMsg.NAD_DomainAccountLimits_s, [newDomainName, usedAccounts - maxDomainAccounts]);
                        }
                        form.getModel().setInstanceValue(form.getInstance(),ZaAccount.A2_domainLeftAccounts, msg);
            }else {
            form.getModel().setInstanceValue(form.getInstance(),ZaAccount.A2_domainLeftAccounts,null);
            }
        } else {
                    form.getModel().setInstanceValue(form.getInstance(),ZaAccount.A2_domainLeftAccounts,null);
        }
    }

        if (domainObj && domainObj.attrs &&
            domainObj.attrs[ZaDomain.A_AuthMech] &&
            (domainObj.attrs[ZaDomain.A_AuthMech] != ZaDomain.AuthMech_zimbra) ) {
            form.getModel().setInstanceValue(form.getInstance(),ZaAccount.A2_isExternalAuth, true);
        } else {
            form.getModel().setInstanceValue(form.getInstance(),ZaAccount.A2_isExternalAuth, false);
        }

        if(form.parent.setDirty)  { //edit account view
            form.parent.setDirty(true);
        }

    } catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaAccount.setDomainChanged", null, false);
    }
}

ZaAccount.generateDisplayName =
function (instance, firstName, lastName, initials) {
    var oldDisplayName = this.getInstanceValue(ZaAccount.A_displayname);
    var newDisplayname = "";
    var firstOne = firstName, secondOne = lastName;
    if(ZaZimbraAdmin.isLanguage("ja")){
        firstOne = lastName;
        secondOne = firstName;
    }

    if(firstOne)
        newDisplayname = firstOne;
    else
        newDisplayname = "";

    if(initials) {

        newDisplayname += " ";
        newDisplayname += initials;
        newDisplayname += ".";
    }
    if(secondOne) {
        if(newDisplayname.length > 0)
            newDisplayname += " ";

        newDisplayname += secondOne;
    }
    if(newDisplayname == oldDisplayName) {
        return false;
    } else {
        this.getModel().setInstanceValue(instance, ZaAccount.A_displayname, newDisplayname);
        return true;
    }
}

ZaAccount.setDefaultCos =
function (instance) {
    var defaultCos = ZaCos.getDefaultCos4Account(instance[ZaAccount.A_name], instance.attrs[ZaAccount.A_zimbraIsExternalVirtualAccount] == "TRUE");

    if( defaultCos && defaultCos.id) {
        instance._defaultValues = defaultCos;
        instance.attrs[ZaAccount.A_COSId] = defaultCos.id;
    }
}

ZaAccount.prototype.getCurrentCos =
function (){
    try {
        var cosId = this.attrs[ZaAccount.A_COSId] ;
        var currentCos ;
        currentCos = ZaCos.getCosById(this.attrs[ZaAccount.A_COSId]);
        if (!currentCos){
            currentCos = ZaCos.getDefaultCos4Account(this.name, this.attrs[ZaAccount.A_zimbraIsExternalVirtualAccount] == "TRUE");
        }
        return currentCos ;
    } catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaAccount.prototype.getCurrentCos", null, false);
    }
}

//the serverStr is in format yyyyMMddHHmmssZ to be converted to MM/dd/yyyy HH:mm:ss
ZaAccount.getLastLoginTime =
function (serverStr) {
    if (serverStr) {
        return ZaItem.formatServerTime(serverStr);
    }else{
        return ZaMsg.Last_Login_Never;
    }
}

ZaAccount.prototype.manageSpecialAttrs =
function () {
    var warning = "" ;

    //handle the unrecognized timezone
    var tz = this.attrs[ZaAccount.A_zimbraPrefTimeZoneId] ;
    if (tz) {
        var n_tz = ZaModel.setUnrecoganizedChoiceValue(tz, ZaSettings.timeZoneChoices) ;
        if (tz != n_tz) {
            this.attrs[ZaAccount.A_zimbraPrefTimeZoneId] = n_tz ;
            warning +=  AjxMessageFormat.format(ZaMsg.WARNING_TIME_ZONE_INVALID ,  [ tz, "account - \"" + this.name +"\""] );
        }
    }

    //handle the unrecognized mail charset
    var mdc = this.attrs[ZaAccount.A_zimbraPrefMailDefaultCharset] ;
    if (mdc) {
        var n_mdc = ZaModel.setUnrecoganizedChoiceValue(mdc, ZaSettings.mailCharsetChoices) ;
        if (mdc != n_mdc) {
            this.attrs[ZaAccount.A_zimbraPrefMailDefaultCharset] = n_mdc ;
            warning += AjxMessageFormat.format(ZaMsg.WARNING_CHARSET_INVALID , [ mdc, "account - \"" + this.name +"\""]);
        }
    }


    //handle the unrecognized locale value
    var lv = this.attrs[ZaCos.A_zimbraPrefLocale] ;
    if (lv) {
        var n_lv = ZaModel.setUnrecoganizedChoiceValue(lv, ZaSettings.getLocaleChoices()) ;
        if (lv != n_lv) {
            this.attrs[ZaCos.A_zimbraPrefLocale] = n_lv ;
            warning += AjxMessageFormat.format(ZaMsg.WARNING_LOCALE_INVALID , [ lv, "account - \"" + this.name +"\""]);
        }
    }
    //display warnings about the if manageSpecialAttrs return value
    if (warning && warning.length > 0) {
        ZaApp.getInstance().getCurrentController().popupMsgDialog (warning, true);
    }
}
ZaAccount.isAdminAccount = function () {
    try {
        return (this.getInstanceValue(ZaAccount.A_zimbraIsAdminAccount)=="TRUE" || this.getInstanceValue(ZaAccount.A_zimbraIsDelegatedAdminAccount)=="TRUE");
    } catch (ex)     {
        return false;
    }
}
/**
 * Test if the email retention policy should be enabled based on
 * if (serversetting is not set) { //check global setting
       if (gs != 0 ) {
        enable ERP for account on this server
        } else {
        disable ERP for account on this server
  }
}else{  //check server setting
    if ( serverSetting != 0 ) {
        enable ERP for account on this server
      } else if (serverSetting == 0 ){
        disable ERP  for account on this server
      }

}
 */
ZaAccount.isEmailRetentionPolicyEnabled = function () {
    try {
        var instance  = this.getInstance () ;
        var gc   = ZaApp.getInstance().getGlobalConfig();
        if (AjxUtil.isEmpty(instance.attrs[ZaAccount.A_mailHost])) {
            // GetEffectiveRightsRequest fails with an exception if a server name is blank
            var ex = new ZmCsfeException("The request was not sent", ZmCsfeException.ACCT_INVALID_ATTR_VALUE, "GetEffectiveRightsRequest", "zimbraMailHost cannot be read");
            throw(ex);
        }
        var sc =  ZaApp.getInstance().getServerByName(instance.attrs[ZaAccount.A_mailHost]);
        var s_mailpurge = sc.attrs[ZaServer.A_zimbraMailPurgeSleepInterval] ;    //always end with [s,m,h,d]
        var g_mailpurge = gc.attrs[ZaGlobalConfig.A_zimbraMailPurgeSleepInterval] ;
        if (s_mailpurge === _UNDEFINED_ || s_mailpurge === null)  {
            if(window.console && window.console.log) console.log("server setting A_zimbraMailPurgeSleepInterval is NOT set.")
            if (g_mailpurge != null && ZaUtil.getLifeTimeInSeconds(g_mailpurge) == 0) {
                return false ;
            }
        } else if (ZaUtil.getLifeTimeInSeconds(s_mailpurge) == 0){
            return false ;
        }

        return true ;
    } catch (ex) {
        return false;
       }
}

ZaAccount.isEmailRetentionPolicyDisabled = function () {
    return !ZaAccount.isEmailRetentionPolicyEnabled.call(this);
}

ZaAccount.isShowAccountType = function() {
    var form = this.getForm () ;
    var instance = form.getInstance () ;
    var acctTypes = instance[ZaAccount.A2_accountTypes] ;
    var isShow = false;

    for (var i=0; i < acctTypes.length && !isShow; i ++) {

        var domainName = ZaAccount.getDomain (instance.name) ;
        var domainObj =  ZaDomain.getDomainByName (domainName, form.parent._app);
        var cos = ZaCos.getCosById (acctTypes[i] , ZaApp.getInstance()) ;
        if (cos == null) {
            ZaApp.getInstance().getCurrentController().popupErrorDialog(
                        AjxMessageFormat.format(ZaMsg.ERROR_INVALID_ACCOUNT_TYPE, [acctTypes[i]]));
                return isShow;
        }
    if(domainObj.isCosLimitInDomain(cos.name))
        isShow = true;
    }
    return isShow;
}

ZaAccount.getAccountTypeOutput = function (isNewAccount) {
    var form = this.getForm () ;
    var instance = form.getInstance () ;
    var acctTypes = instance[ZaAccount.A2_accountTypes] ;
    var out = [] ;
    if (acctTypes && acctTypes.length > 0) {
        /*
        var currentCos = ZaCos.getCosById(instance.attrs[ZaAccount.A_COSId], form.parent._app) ;
        var currentType = null ;
        if (currentCos)
            currentType = currentCos.id ;
        */
        var currentType = instance[ZaAccount.A2_currentAccountType] ;
    var defaultType = ZaCos.getDefaultCos4Account(instance[ZaAccount.A_name], instance.attrs[ZaAccount.A_zimbraIsExternalVirtualAccount] == "TRUE");
    if(!currentType && defaultType)
        currentType = defaultType.id;

        var domainName = ZaAccount.getDomain (instance.name) ;
        var domainObj =  ZaDomain.getDomainByName (domainName, form.parent._app);
    var isFullUsed = true;

        out.push("<table with=100%>");
        out.push("<colgroup><col width='200px' /><col width='200px' /><col width='200px' /></colgroup> ");
        out.push("<tbody>") ;

        var radioGroupName = "account_type_radio_group_" + Dwt.getNextId() ;
        //make sure CountAccountRequest is called to refresh the used accounts counts
        domainObj.updateUsedAccounts();
        for (var i=0; i < acctTypes.length; i ++) {
            var cos = ZaCos.getCosById (acctTypes[i] , ZaApp.getInstance()) ;
            var isCheck = false;
            if (cos == null) {
                ZaApp.getInstance().getCurrentController().popupErrorDialog(
                        AjxMessageFormat.format(ZaMsg.ERROR_INVALID_ACCOUNT_TYPE, [acctTypes[i]]));
                return ;
            }
            var accountTypeDisplayValue = cos.attrs[ZaCos.A_description] ;
            if (!accountTypeDisplayValue || accountTypeDisplayValue.length < 1)
                accountTypeDisplayValue = cos.name ;

            //3 columns a row
            if (i % 3 == 0) { //first col, need open <tr>
                out.push("<tr>") ;
            }
            out.push("<td>") ;

            //output the contents
            var usedAccounts = domainObj.getUsedAccounts(cos.name);
            var availableAccounts = domainObj.getAvailableAccounts(cos.name);

            var isNewAccount = false;
            if(form &&form.parent && form.parent instanceof ZaNewAccountXWizard)
                  isNewAccount = true;


        if(availableAccounts > 0) isFullUsed = false;
            else if (currentType == acctTypes[i]) isFullUsed = false;
        if (currentType == acctTypes[i]) {
         //isFullUsed = false;
                 isCheck = true;
         if (currentType != instance.attrs[ZaAccount.A_COSId]) {
                instance.autoCos = "FALSE" ;
                instance.attrs[ZaAccount.A_COSId] = currentType;
            if(isNewAccount)
                  form.parent.updateCosGrouper();
         }
        }

            out.push("<div>" +
                     "<label style='font-weight: bold;"
                    + ((availableAccounts > 0 || (currentType == acctTypes[i] && !isNewAccount) ) ? "" : "color: #686357;")
                    + "'>") ;
            //account type is disable when no accounts available
            out.push("<input type=radio name=" + radioGroupName + " value=" + acctTypes[i]
                    + ((availableAccounts > 0 || (currentType == acctTypes[i] && !isNewAccount)) ?  (" onclick=\"ZaAccount.setAccountType.call("
                                    + this.getGlobalRef() + ", '" + acctTypes[i] +  "', event );\" ") : (" disabled "))
                    + (/*(currentType == acctTypes[i])*/(isCheck && (availableAccounts > 0 || !isNewAccount)) ? " checked " : "" )
                    + " />") ;
            out.push(accountTypeDisplayValue + "</label></div>") ;

            out.push("<div>" + AjxMessageFormat.format(ZaMsg.AccountsAvailable, [usedAccounts, availableAccounts])  + "</div> ") ;
            out.push("</td>")

            if ((i % 3 == 2) || (i + 1 == acctTypes.length)) { //last col, need close </td>
                out.push("</tr>") ;
            }
        }

        out.push("</tbody></table>") ;

    // set warning message because of not avaliable account
    if(isFullUsed) {
                form.getModel().setInstanceValue(form.getInstance(),ZaAccount.A2_showAccountTypeMsg,
                        AjxMessageFormat.format (ZaMsg.MSG_AccountTypeUnavailable, [defaultType.name]));
    }else{
                form.getModel().setInstanceValue(form.getInstance(),ZaAccount.A2_showAccountTypeMsg,null);
    }

    }
    return out.join("") ;
}

ZaAccount.setAccountType = function (newType, ev) {
    //console.log ("Account Type Changed") ;
    var form = this.getForm() ;
    var instance = form.getInstance () ;

    var newCos = ZaCos.getCosById (newType) ;
    if (newCos.id != instance.attrs[ZaAccount.A_COSId])  {
        //change the account type
        if (instance.cos) instance._defaultValues = newCos ;
        instance.autoCos = "FALSE" ;
        instance.attrs[ZaAccount.A_COSId] = newCos.id ;
        form.parent._isCosChanged = true ;

        form.itemChanged(this, newType, ev);

        if(form.parent.setDirty)
            form.parent.setDirty(true);

    form.parent.updateCosGrouper();
    }
}

ZaAccount.isAccountTypeSet = function (tmpObj) {

    var cosId = tmpObj.attrs [ZaAccount.A_COSId] || tmpObj[ZaAccount.A2_currentAccountType];
    var defaultType = ZaCos.getDefaultCos4Account(tmpObj[ZaAccount.A_name], tmpObj.attrs[ZaAccount.A_zimbraIsExternalVirtualAccount] == "TRUE");
    if (!tmpObj.accountTypes  || tmpObj.accountTypes.length <= 0) {
        return  true ; //account type is not present, no need to check if it is set
    } else if (!cosId){
        return false ;
    }

    // check whether default account type is adopted
    if(cosId == defaultType.id)
    return true;
    // if not, check whether accountType in list is selected
    for (var i=0; i < tmpObj.accountTypes.length; i ++) {
        if (cosId == tmpObj.accountTypes[i] )
            return true ;
    }

    return false ;

}

ZaAccount.getCatchAllDomain = function (domainName) {
    return "@" + domainName ;
}

//find the catch all account for the domain
ZaAccount.getCatchAllAccount = function (domainName) {
      /* var accounts = ZaAccount.getAllDomainAccounts (domainName) ;
        for (var i=0; i < accounts.length; i++) {
            if (accounts [i].attrs[ZaAccount.A_zimbraMailCatchAllAddress] == ZaAccount.getCatchAllDomain(domainName)) {
                return accounts [i].id;
            }
       }
     */
      var searchParams = {
         limit : 1 , //just need one
         type : [ZaSearch.ACCOUNTS] ,
         domain: domainName ,
         applyCos:  0,
         attrs: [ZaAccount.A_zimbraMailCatchAllAddress],
         query:(["(",ZaAccount.A_zimbraMailCatchAllAddress,"=",ZaAccount.getCatchAllDomain(domainName),")"].join(""))
      }

      var resp =  ZaSearch.searchDirectory (searchParams).Body.SearchDirectoryResponse ;
      var list = new ZaItemList(ZaAccount);
      list.loadFromJS(resp);
      var arr = list.getArray();
      if(!AjxUtil.isEmpty(arr)) {
          if(arr[0]) {
              return arr[0];
          }
      }
      return new ZaAccount(ZaApp.getInstance());
}

//++++++++++Modify CatchAll +++++++++++++++++++++++++
ZaAccount.modifyCatchAll =
function (accountId, domainName) {
    if (accountId == null | accountId.length <= 0) {
        return ;
    }
    var soapDoc = AjxSoapDoc.create("ModifyAccountRequest", "urn:zimbraAdmin", null);
    soapDoc.set("id", accountId);
    var catchAllDomain = "" ;
    if (domainName == null || domainName.length == 0) {
        //remove the catchAll value from the account
        catchAllDomain = "" ;
    }else if (domainName.indexOf("@") == -1) { //has no @
        catchAllDomain = ZaAccount.getCatchAllDomain (domainName) ;
    }else if (domainName.indexOf("@") != 0) {
        catchAllDomain = domainName.substring(domainName.lastIndexOf("@"))
    }else {
        catchAllDomain = domainName ;
    }
    var el = soapDoc.set("a", catchAllDomain) ;

    el.setAttribute("n", ZaAccount.A_zimbraMailCatchAllAddress) ;

    var command = new ZmCsfeCommand();
    var params = new Object();
    params.soapDoc = soapDoc;
    params.noAuthToken = true;
    command.invoke(params);
}

ZaAccount.getRelatedList =
function (parentPath) {
    var alias = this.attrs[ZaAccount.A_zimbraMailAlias];
    var cos = ZaCos.getCosById(this.attrs[ZaAccount.A_COSId])
            || ZaCos.getDefaultCos4Account(this[ZaAccount.A_name], this.attrs[ZaAccount.A_zimbraIsExternalVirtualAccount] == "TRUE");
    var domainName = ZaAccount.getDomain(this[ZaAccount.A_name]);
    var domainObj =  ZaDomain.getDomainByName (domainName) ;
    //var zimletList = item.attrs[ZaAccount.A_zimbraZimletAvailableZimlets]
    //        || item._defaultValues.attrs[ZaAccount.A_zimbraZimletAvailableZimlets];

    var Tis = [];
    if(alias.length > 0) {
        var aliasTi = new ZaTreeItemData({
                    text: ZaMsg.TABT_Aliases,
                    //type: 1,
                    count:alias.length,
                    image:"AccountAlias",
                    mappingId: ZaZimbraAdmin._ACCOUNT_ALIAS_LIST_VIEW,    //ZaZimbraAdmin._ALIASES_LIST_VIEW,
                    path: parentPath + ZaTree.SEPERATOR + this.name + ZaTree.SEPERATOR + ZaMsg.TABT_Aliases
                    }
                );
        aliasTi.setData("aliasTargetId", this.id);
        ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._ACCOUNT_ALIAS_LIST_VIEW] = ZaOverviewPanelController.aliasListTreeListener;
        Tis.push(aliasTi);
    }

    var dls = this[ZaAccount.A2_memberOf];
    if (dls != null) {
        var direct_dls = dls[ZaAccount.A2_directMemberList];
        var indirect_dls = dls[ZaAccount.A2_indirectMemberList];

        if ((direct_dls.length + indirect_dls.length) > 0) {
            var dlsTi = new ZaTreeItemData({
                    text: ZaMsg.OVP_distributionLists,
                    count:direct_dls.length + indirect_dls.length,
                    image:"DistributionList",
                    mappingId: ZaZimbraAdmin._DISTRIBUTION_LISTS_LIST_VIEW,
                    path: parentPath + ZaTree.SEPERATOR + this.name + ZaTree.SEPERATOR + ZaMsg.OVP_distributionLists
                }
            );
            dlsTi.setData(ZaAccount.A2_memberOf, dls);
            ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._DISTRIBUTION_LISTS_LIST_VIEW] = ZaOverviewPanelController.dlListTreeListener;
            Tis.push(dlsTi);
        }
    }

    var cosTi = new ZaTreeItemData({
                text: cos.name,
                image:"COS",
                forceNode: true,
                mappingId: ZaZimbraAdmin._COS_VIEW,
                path: parentPath + ZaTree.SEPERATOR + cos.name
                }
            );
    cosTi.setData(ZaOverviewPanelController._OBJ_ID, cos.id);
    cosTi.setData("skipHistory", "TRUE");
    ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._COS_VIEW] = ZaOverviewPanelController.cosTreeListener;
    Tis.push(cosTi);

    var domainTi = new ZaTreeItemData({
                text: domainName,
                image:"Domain",
                forceNode: true,
                mappingId: ZaZimbraAdmin._DOMAIN_VIEW,
                path: parentPath + ZaTree.SEPERATOR + domainName
                }
            );
    domainTi.setData(ZaOverviewPanelController._OBJ_ID, domainObj.id);
    domainTi.setData("skipHistory", "TRUE");
    ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._DOMAIN_VIEW] = ZaOverviewPanelController.domainTreeListener;
    Tis.push(domainTi);
    /*
    var zimletTi = new ZaTreeItemData({
                text: ZaMsg.TABT_Zimlets,
                //type: 1,
                count:zimletList.length,
                mappingId:ZaZimbraAdmin._ZIMLET_LIST_VIEW,
                path: parentPath + ZaTree.SEPERATOR + item.name + ZaTree.SEPERATOR + ZaMsg.TABT_Zimlets
                }
            );
    ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._ZIMLET_LIST_VIEW] = ZaOverviewPanelController.zimletListTreeListener;
    */
    return Tis;
}
ZaItem.getRelatedMethods["ZaAccount"].push(ZaAccount.getRelatedList);

ZaAccount.prototype._handleAccountMembershipResponse = function(result) {
    var response = result.getResponse().Body;
    if (!response) {
        return;
    }
    var accountMembershipResponse = response.GetAccountMembershipResponse;
    if (!accountMembershipResponse) {
        return;
    }
    this[ZaAccount.A2_memberOf] = ZaAccountMemberOfListView.parseGetAccMembershipResponse(accountMembershipResponse) ;
    this[ZaAccount.A2_directMemberList + "_more"] = (this[ZaAccount.A2_memberOf][ZaAccount.A2_directMemberList].length > ZaAccountMemberOfListView.SEARCH_LIMIT) ? 1: 0;
    this[ZaAccount.A2_indirectMemberList + "_more"] = (this[ZaAccount.A2_memberOf][ZaAccount.A2_indirectMemberList].length > ZaAccountMemberOfListView.SEARCH_LIMIT) ? 1: 0;
    var controller = ZaApp.getInstance().getCurrentController();
    //If controller's current object is not equal to the current account, then don't update the model.
    if (!controller || controller._currentObject !== this) {
        return;
    }
    var view = controller._view;
    if (view) {
        var form = view.getMyForm();
        if (form) {
			//add the member group, need a deep clone
			form.setInstanceValue(ZaAccountMemberOfListView.cloneMemberOf(this), ZaAccount.A2_memberOf);
			//add the memberList page information
			form.setInstanceValue(this[ZaAccount.A2_directMemberList + "_more"], ZaAccount.A2_directMemberList + "_more");
			form.setInstanceValue(this[ZaAccount.A2_indirectMemberList + "_more"], ZaAccount.A2_indirectMemberList + "_more");
			form.setInstanceValue(true, "memberOfLoaded");
			//This will also notify form instance is changed
			form.setInstance(form.getInstance());
        }
    }
};
}
if (AjxPackage.define("zimbraAdmin.dl.model.ZaDistributionList")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
 /**
 * @author EMC
 **/
ZaDistributionList = function(id, name, memberList, description, notes) {
	ZaItem.call(this, "ZaDistributionList");
    this._init();

    this.attrs = new Object();
	this.attrs[ZaAccount.A_zimbraMailAlias] = [];
	this.id = (id != null)? id: null;
	this.type = ZaItem.DL;
	this.name = (name != null) ? name: null;
	this._selfMember = new ZaDistributionListMember(this.name);
	if (description != null) this.attrs.description = description;
	if (notes != null) this.attrs.zimbraNotes = notes;

    this.attrs[ZaDistributionList.A_zimbraIsACLGroup] = "TRUE";
    this[ZaDistributionList.A2_dlType] = ZaDistributionList.STATIC_DL_TYPE;
	this[ZaDistributionList.A2_numMembers] = 0;
	this[ZaDistributionList.A2_memberList] = (memberList != null) ? memberList: new Array();
	this[ZaDistributionList.A2_memberPool] = new Array();
    this[ZaAccount.A2_autoMailServer] = "TRUE";
    this[ZaAccount.A2_memberOf] = {directMemberList: [],indirectMemberList: [],nonMemberList: []};
    this[ZaAccount.A2_directMemberList + "_more"] = 0;
    this[ZaAccount.A2_indirectMemberList + "_more"] = 0;
    this[ZaDistributionList.A2_DLOwners] = new Array();
}

ZaDistributionList.prototype = new ZaItem;
ZaDistributionList.prototype.constructor = ZaDistributionList;
ZaItem.modifyMethods["ZaDistributionList"] = new Array();
ZaItem.loadMethods["ZaDistributionList"] = new Array();
ZaItem.initMethods["ZaDistributionList"] = new Array();
ZaItem.createMethods["ZaDistributionList"] = new Array();
ZaItem.ObjectModifiers["ZaDistributionList"] = new Array();
ZaItem.getRelatedMethods["ZaDistributionList"] = new Array();

ZaDistributionList.EMAIL_ADDRESS = "ZDLEA";
ZaDistributionList.DESCRIPTION = "ZDLDESC";
ZaDistributionList.ID = "ZDLID";
ZaDistributionList.MEMBER_QUERY_LIMIT = 25;
ZaDistributionList.MEMBER_LIST_PAGE_SIZE = 15;
ZaDistributionList.MEMBER_POOL_PAGE_SIZE = 15;
ZaDistributionList.A_zimbraGroupId = "zimbraGroupId";
ZaDistributionList.A_zimbraCreateTimestamp = "zimbraCreateTimestamp";

ZaDistributionList.A_mailStatus = "zimbraMailStatus";
ZaDistributionList.A2_dlType = "dlType";
ZaDistributionList.A_memberOfURL = "memberURL";
ZaDistributionList.A_zimbraIsACLGroup = "zimbraIsACLGroup";
ZaDistributionList.A2_members = "members";
ZaDistributionList.A2_allMemberHash = "allMemberHash";
ZaDistributionList.A2_allMemberPages = "allMemberPages";
ZaDistributionList.A2_allMemberHash = "allMemberHash";
ZaDistributionList.A2_memberList = "memberList";
ZaDistributionList.A2_origList = "origList";
ZaDistributionList.A2_addList = "addList";
ZaDistributionList.A2_removeList = "removeList";
ZaDistributionList.A2_query = "query";
ZaDistributionList.A2_pagenum = "pagenum";
ZaDistributionList.A2_poolPagenum = "poolPagenum";
ZaDistributionList.A2_poolNumPages = "poolNumPages";
ZaDistributionList.A2_totalNumInPool = "totalNumInPool";
ZaDistributionList.A2_numMembers = "numMembers";
ZaDistributionList.A2_memPagenum = "memPagenum";
ZaDistributionList.A2_memNumPages = "memNumPages";
ZaDistributionList.A2_memberPool = "memberPool";
ZaDistributionList.A2_optionalAdd = "optionalAdd";
ZaDistributionList.A2_membersSelected = "membersSelected";
ZaDistributionList.A2_nonmembersSelected = "nonmembersSelected";
ZaDistributionList.A2_memberPoolSelected = "memberPoolSelected";
ZaDistributionList.A2_directMemberSelected = "directMemberSelected";
ZaDistributionList.A2_indirectMemberSelected = "indirectMemberSelected";
ZaDistributionList.A2_directMemberList = "directMemberList";
ZaDistributionList.A2_indirectMemberList = "indirectMemberList";
ZaDistributionList.A2_nonMemberList = "nonMemberList";
ZaDistributionList.A2_alias_selection_cache = "alias_selection_cache";
ZaDistributionList.A_isAdminGroup = "zimbraIsAdminGroup" ;

ZaDistributionList.A_zimbraPrefReplyToAddress = "zimbraPrefReplyToAddress";
ZaDistributionList.A_zimbraPrefReplyToDisplay = "zimbraPrefReplyToDisplay";
ZaDistributionList.A_zimbraPrefReplyToEnabled = "zimbraPrefReplyToEnabled";

ZaDistributionList.A_zimbraDistributionListSubscriptionPolicy = "zimbraDistributionListSubscriptionPolicy";
ZaDistributionList.A_zimbraDistributionListUnsubscriptionPolicy = "zimbraDistributionListUnsubscriptionPolicy";

ZaDistributionList.A_zimbraDistributionListSendShareMessageToNewMembers = "zimbraDistributionListSendShareMessageToNewMembers";

ZaDistributionList.A2_zimbraDLSubscriptionPolicyAccept = "ACCEPT";
ZaDistributionList.A2_zimbraDLSubscriptionPolicyReject = "REJECT";
ZaDistributionList.A2_zimbraDLSubscriptionPolicyApproval = "APPROVAL";

ZaDistributionList.A2_DLOwners = "DLOwner";
ZaDistributionList.A2_owners_selection_cache = "owners_selection_cache";
ZaDistributionList.getDLStatus = function (status) {
    if (status == "enabled") {
        return ZaMsg.DL_Status_enabled ;
    } else if (status == "disabled" ) {
        return ZaMsg.DL_Status_disabled ;
    } else {
        return ZaMsg.ERROR_UNKNOWN ;
    }
}

ZaDistributionList.RENAME_DL_RIGHT = "renameDistributionList";
ZaDistributionList.ADD_DL_ALIAS_RIGHT = "addDistributionListAlias";
ZaDistributionList.REMOVE_DL_ALIAS_RIGHT = "removeDistributionListAlias";
ZaDistributionList.REMOVE_DL_MEMBER_RIGHT = "removeDistributionListMember";
ZaDistributionList.ADD_DL_MEMBER_RIGHT = "addDistributionListMember";
ZaDistributionList.GET_DL_MEMBERSHIP_RIGHT = "getDistributionListMembership";
ZaDistributionList.GET_DL_SHARE_INFO_RIGHT = "getDistributionListShareInfo";
ZaDistributionList.RIGHT_VIEW_ADMINUI_COMPONENTS = "viewDistributionListAdminUI";

ZaDistributionList.searchAttributes = AjxBuffer.concat(ZaAccount.A_displayname,",",
													   ZaItem.A_zimbraId,  "," , 
													   ZaAccount.A_mailHost , "," , 
													   ZaAccount.A_uid ,"," , 
													   ZaAccount.A_description, ",",
                                                       ZaDistributionList.A_isAdminGroup,",", 
													   ZaDistributionList.A_mailStatus);

ZaDistributionList.DYNAMIC_DL_TYPE = "1";
ZaDistributionList.STATIC_DL_TYPE = "0";
ZaDistributionList.postLoadDataFunction = new Array();

// ==============================================================
// public methods
// ==============================================================

ZaDistributionList.prototype.remove = 
function(callback) {
	var soapDoc = AjxSoapDoc.create("DeleteDistributionListRequest", ZaZimbraAdmin.URN, null);
	soapDoc.set("id", this.id);
	this.deleteCommand = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;
	params.noAuthToken = true;	
	if(callback) {
		params.asyncMode = true;
		params.callback = callback;
	}
	this.deleteCommand.invoke(params);		
}


/**
* public rename; sends RenameDistributionListRequest soap request
**/
ZaDistributionList.prototype.rename = 
function (newName) {
	var soapDoc = AjxSoapDoc.create("RenameDistributionListRequest", ZaZimbraAdmin.URN, null);
	soapDoc.set("id", this.id);
	soapDoc.set("newName", newName);	
	//var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_RENAME_DL
	}
	var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.RenameDistributionListResponse;	
	this.initFromJS(resp.dl[0]);	
}

/**
* Creates a new ZaDistributionList. This method makes SOAP request to create a new account record. 
* @param tmpObj
* @param app 
* @return ZaDistributionList
**/
ZaDistributionList.createMethod =
function(tmpObj, dl) {	
	tmpObj.attrs[ZaAccount.A_mail] = tmpObj.name;	
	var resp;	
	//create SOAP request
	var soapDoc = AjxSoapDoc.create("CreateDistributionListRequest", ZaZimbraAdmin.URN, null);
	soapDoc.set(ZaAccount.A_name, tmpObj.name);

    if(tmpObj[ZaDistributionList.A2_dlType] == ZaDistributionList.DYNAMIC_DL_TYPE) {
        soapDoc.setMethodAttribute("dynamic", ZaDistributionList.DYNAMIC_DL_TYPE);
    }

	if(tmpObj[ZaAccount.A2_autoMailServer] == "TRUE") {
		tmpObj.attrs[ZaAccount.A_mailHost] = null;
	}
	
	//check if we need to set the cosId
	if (tmpObj[ZaAccount.A2_autoCos] == "TRUE" ) {
		tmpObj.attrs[ZaAccount.A_COSId] = null ;
	}
	
	for (var aname in tmpObj.attrs) {
		if( aname == ZaAccount.A_zimbraMailAlias || aname == ZaItem.A_objectClass || aname == ZaAccount.A2_mbxsize || aname == ZaAccount.A_mail) {
			continue;
		}	

        if (tmpObj[ZaDistributionList.A2_dlType] != ZaDistributionList.DYNAMIC_DL_TYPE && aname == ZaDistributionList.A_zimbraIsACLGroup) {
            continue;
        }
		if(tmpObj.attrs[aname] instanceof Array) {
			var cnt = tmpObj.attrs[aname].length;
			if(cnt) {
				for(var ix=0; ix <cnt; ix++) {
					if(typeof(tmpObj.attrs[aname][ix])=="object") {
						var attr = soapDoc.set("a", tmpObj.attrs[aname][ix].toString());
						attr.setAttribute("n", aname);
					} else {
						var attr = soapDoc.set("a", tmpObj.attrs[aname][ix]);
						attr.setAttribute("n", aname);						
					}
				}
			} 
		} else if (tmpObj.attrs[aname] instanceof AjxVector) {
			var tmpArray = tmpObj.attrs[aname].getArray();
			var cnt = tmpArray.length;
			if(cnt) {
				for(var ix=0; ix <cnt; ix++) {
					if(tmpArray[ix] !=null) {
						if(typeof(tmpArray[ix])=="object") {
							var attr = soapDoc.set("a", tmpArray[ix].toString());
							attr.setAttribute("n", aname);
						} else {
							var attr = soapDoc.set("a", tmpArray[ix]);
							attr.setAttribute("n", aname);
						}
					}
				}
			} 			
			
		} else {	
			if(tmpObj.attrs[aname] != null) {
				if(typeof(tmpObj.attrs[aname]) == "object") {				
					var attr = soapDoc.set("a", tmpObj.attrs[aname].toString());
					attr.setAttribute("n", aname);
				} else {
					var attr = soapDoc.set("a", tmpObj.attrs[aname]);
					attr.setAttribute("n", aname);					
				}
			}
		}
	}
	try {

		//var createAccCommand = new ZmCsfeCommand();
		var csfeParams = new Object();
		csfeParams.soapDoc = soapDoc;	
		var reqMgrParams = {} ;
		reqMgrParams.controller = ZaApp.getInstance().getCurrentController();
		reqMgrParams.busyMsg = ZaMsg.BUSY_CREATE_ACCOUNTS ;
		//reqMgrParams.busyMsg = "Creating Accounts ...";
		//resp = createAccCommand.invoke(params).Body.CreateAccountResponse;
		resp = ZaRequestMgr.invoke(csfeParams, reqMgrParams ).Body.CreateDistributionListResponse;
	} catch (ex) {
		throw ex;
		return null;
	}
	dl.initFromJS(resp.dl[0]);
	tmpObj.rights = dl.rights;
	tmpObj.setAttrs = dl.setAttrs;
	tmpObj.getAttrs = dl.getAttrs;
	tmpObj.id = dl.id;
	tmpObj.attrs[ZaItem.A_zimbraId] = dl.attrs[ZaItem.A_zimbraId];
}
ZaItem.createMethods["ZaDistributionList"].push(ZaDistributionList.createMethod);

/**
* @method modify
* Updates ZaDistributionList attributes (SOAP)
* @param mods set of modified attributes and their new values
*/
ZaDistributionList.modifyMethod = function(mods, obj) {
	var gotSomething = false;
	var soapDoc = AjxSoapDoc.create("ModifyDistributionListRequest", ZaZimbraAdmin.URN, null);
	soapDoc.set("id", this.id);
	//transfer the fields from the tmpObj to the _currentObject
	for (var a in obj.attrs) {
		if(a == ZaItem.A_objectClass || a==ZaAccount.A_mail || a == ZaItem.A_zimbraId
                || a == ZaAccount.A_zimbraMailAlias || a == ZaItem.A_zimbraACE) {
			continue;
		}	
		//check if the value has been modified
		if ((this.attrs[a] != obj.attrs[a]) && !(this.attrs[a] == undefined && obj.attrs[a] === "")) {
			if(a==ZaAccount.A_uid) {
				continue; //skip uid, it is changed throw a separate request
			}
			if(!ZaItem.hasWritePermission(a,obj)) {
				continue;
			}			
			gotSomething = true;
			if(obj.attrs[a] instanceof Array) {
	   			if (!this.attrs[a]) {
	   				this.attrs[a] = [] ;
                 }else if (!(this.attrs[a] instanceof Array)) {
                       this.attrs[a] = [this.attrs[a]] ;
                   }

	       		if( obj.attrs[a].join(",").valueOf() !=  this.attrs[a].join(",").valueOf()) {
					//mods[a] = obj.attrs[a];
					var cnt = obj.attrs[a].length;
					if(cnt) {
						for(var ix=0; ix <cnt; ix++) {
							var attr = null;
                            if(obj.attrs[a][ix] instanceof String )
								var attr = soapDoc.set("a", obj.attrs[a][ix].toString());
							else if(obj.attrs[a][ix] instanceof Object)
								var attr = soapDoc.set("a", obj.attrs[a][ix].toString());
							else if(obj.attrs[a][ix])
								var attr = soapDoc.set("a", obj.attrs[a][ix]);
			
							if(attr)
								attr.setAttribute("n", a);
						}						
					} else {
						var attr = soapDoc.set("a", "");
						attr.setAttribute("n", a);
					}
				}
			} else {
				var attr = soapDoc.set("a",obj.attrs[a]);
				attr.setAttribute("n", a);
			}				
		}
	}	
	if(!gotSomething)
		return;
		
	var params = new Object();
	params.soapDoc = soapDoc;	
	var reqMgrParams = {
		controller:ZaApp.getInstance().getCurrentController(),
		busyMsg: ZaMsg.BUSY_MODIFY_DL 
	} ;
	
	//resp = modifyAccCommand.invoke(params).Body.ModifyAccountResponse;
	resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.ModifyDistributionListResponse ;
	
	this.initFromJS(resp.dl[0]);
	this._toolTip = null ;
	return;	
}
ZaItem.modifyMethods["ZaDistributionList"].push(ZaDistributionList.modifyMethod);


/**
* Returns HTML for a tool tip for this resource.
*/
ZaDistributionList.prototype.getToolTip =
function() {
	// update/null if modified
	if (!this._toolTip) {
		var html = new Array(20);
		var idx = 0;
		html[idx++] = "<table>";
		html[idx++] = "<tr valign='center'><td colspan='2' align='left'>";
		html[idx++] = "<div style='border-bottom: 1px solid black; white-space:nowrap; overflow:hidden;'>";
		html[idx++] = "<table style='width:100%;'>";
		html[idx++] = "<tr valign='center'>";
		html[idx++] = "<td><b>" + AjxStringUtil.htmlEncode(this.name) + "</b></td>";
		html[idx++] = "<td align='right'>";
	     if (this.attrs[ZaDistributionList.A_isAdminGroup] == "TRUE") {
			    html[idx++] = AjxImg.getImageHtml("DistributionListGroup");
         }else {
             html[idx++] = AjxImg.getImageHtml("DistributionList");
         }			
		html[idx++] = "</td>";
		html[idx++] = "</table></div></td></tr>";
		html[idx++] = "<tr></tr>";
		idx = this._addAttrRow(ZaItem.A_description, html, idx);
		idx = this._addAttrRow(ZaItem.A_zimbraId, html, idx);
		html[idx++] = "</table>";
		this._toolTip = html.join("");
	}
	return this._toolTip;
}

ZaDistributionList.addRemoveAliases = function (mods, obj) {
	//add-remove aliases
	var tmpObjCnt = -1;
	var currentObjCnt = -1;
	if(ZaItem.hasRight(ZaDistributionList.REMOVE_DL_ALIAS_RIGHT, this) || ZaItem.hasRight(ZaDistributionList.ADD_DL_ALIAS_RIGHT, this)) {
		if(obj.attrs[ZaAccount.A_zimbraMailAlias]) {
			if(typeof obj.attrs[ZaAccount.A_zimbraMailAlias] == "string") {
				var tmpStr = obj.attrs[ZaAccount.A_zimbraMailAlias];
				obj.attrs[ZaAccount.A_zimbraMailAlias] = new Array();
				obj.attrs[ZaAccount.A_zimbraMailAlias].push(tmpStr);
			}
			tmpObjCnt = obj.attrs[ZaAccount.A_zimbraMailAlias].length - 1;
		}
		
		if(this.attrs[ZaAccount.A_zimbraMailAlias]) {
			if(typeof this.attrs[ZaAccount.A_zimbraMailAlias] == "string") {
				var tmpStr = this.attrs[ZaAccount.A_zimbraMailAlias];
				this.attrs[ZaAccount.A_zimbraMailAlias] = new Array();
				this.attrs[ZaAccount.A_zimbraMailAlias].push(tmpStr);
			}
			currentObjCnt = this.attrs[ZaAccount.A_zimbraMailAlias].length - 1;
		}
	
		//diff two arrays
		for(var tmpIx=tmpObjCnt; tmpIx >= 0; tmpIx--) {
			for(var currIx=currentObjCnt; currIx >=0; currIx--) {
				if(obj.attrs[ZaAccount.A_zimbraMailAlias][tmpIx] == this.attrs[ZaAccount.A_zimbraMailAlias][currIx]) {
					//this alias already exists
					obj.attrs[ZaAccount.A_zimbraMailAlias].splice(tmpIx,1);
					this.attrs[ZaAccount.A_zimbraMailAlias].splice(currIx,1);
					break;
				}
			}
		}
		//remove the aliases 
		if(currentObjCnt != -1) {
			currentObjCnt = this.attrs[ZaAccount.A_zimbraMailAlias].length;
		} 
		if(ZaItem.hasRight(ZaDistributionList.REMOVE_DL_ALIAS_RIGHT, this)) {
			try {
				for(var ix=0; ix < currentObjCnt; ix++) {
					this.removeAlias(this.attrs[ZaAccount.A_zimbraMailAlias][ix]);
				}
			} catch (ex) {
				ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDistributionList.addRemoveAliases", null, false);
				return false;
			}
		}
		if(tmpObjCnt != -1) {
			tmpObjCnt = obj.attrs[ZaAccount.A_zimbraMailAlias].length;
		}
		var failedAliases = "";
		var failedAliasesCnt = 0;
		if(ZaItem.hasRight(ZaDistributionList.ADD_DL_ALIAS_RIGHT, this)) {
			try {
				for(var ix=0; ix < tmpObjCnt; ix++) {
					var aliasName = obj.attrs[ZaAccount.A_zimbraMailAlias][ix];
					try {
						if(aliasName) {
							if(aliasName.indexOf("@") != aliasName.lastIndexOf("@")) {
								//show error msg
								ZaApp.getInstance().getCurrentController()._errorDialog.setMessage(AjxMessageFormat.format(ZaMsg.ERROR_ALIAS_INVALID,[aliasName]), null, DwtMessageDialog.CRITICAL_STYLE, null);
								ZaApp.getInstance().getCurrentController()._errorDialog.popup();		
								break;						
							}						
							this.addAlias(aliasName);
						}
					} catch (ex) {
						if((ex.code == ZmCsfeException.ACCT_EXISTS) && aliasName) {
							//if failed because account exists just show a warning
							var account = ZaXFormViewController.prototype._findAlias.call(this, aliasName);
							switch(account.type) {
								case ZaItem.DL:
									if(account.name == aliasName) {
										failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS3,[account.name]);								
									} else {
										failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS4,[account.name, aliasName]);
									}
								break;
								case ZaItem.ACCOUNT:
									if(account.name == aliasName) {
										failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS2,[account.name]);								
									} else {
										failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS1,[account.name, aliasName]);
									}							
								break;	
								case ZaItem.RESOURCE:
									if(account.name == aliasName) {
										failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS5,[account.name]);								
									} else {
										failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS6,[account.name, aliasName]);
									}							
								break;							
								default:
									failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS0,[aliasName]);
								break;
							}
							failedAliasesCnt++;
						} else {
							//if failed for another reason - jump out
							throw (ex);
						}
					}
				}
		
				if(failedAliasesCnt == 1) {
					ZaApp.getInstance().getCurrentController()._errorDialog.setMessage(AjxMessageFormat.format(ZaMsg.WARNING_ALIAS_EXISTS, [failedAliases]), "", DwtMessageDialog.WARNING_STYLE, ZabMsg.zimbraAdminTitle);
					ZaApp.getInstance().getCurrentController()._errorDialog.popup();			
				} else if(failedAliasesCnt > 1) {
					ZaApp.getInstance().getCurrentController()._errorDialog.setMessage(AjxMessageFormat.format(ZaMsg.WARNING_ALIASES_EXIST, [failedAliases]), "", DwtMessageDialog.WARNING_STYLE, ZabMsg.zimbraAdminTitle);
					ZaApp.getInstance().getCurrentController()._errorDialog.popup();			
				}
			} catch (ex) {
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.FAILED_ADD_ALIASES, ex);	
				return false;
			}
		}
	}
}
ZaItem.modifyMethods["ZaDistributionList"].push(ZaDistributionList.addRemoveAliases);

ZaDistributionList.addAliases = function (obj, dl) {
	//add-remove aliases
	if(ZaItem.hasRight(ZaDistributionList.ADD_DL_ALIAS_RIGHT, dl)) {
		if(obj.attrs[ZaAccount.A_zimbraMailAlias]) {
			if(typeof obj.attrs[ZaAccount.A_zimbraMailAlias] == "string") {
				var tmpStr = obj.attrs[ZaAccount.A_zimbraMailAlias];
				obj.attrs[ZaAccount.A_zimbraMailAlias] = new Array();
				obj.attrs[ZaAccount.A_zimbraMailAlias].push(tmpStr);
			}
			tmpObjCnt = obj.attrs[ZaAccount.A_zimbraMailAlias].length;
		}

		var failedAliases = "";
		var failedAliasesCnt = 0;
		try {
			for(var ix=0; ix < tmpObjCnt; ix++) {
				var aliasName = obj.attrs[ZaAccount.A_zimbraMailAlias][ix];
				try {
					if(aliasName) {
						if(aliasName.indexOf("@") != aliasName.lastIndexOf("@")) {
							//show error msg
							ZaApp.getInstance().getCurrentController()._errorDialog.setMessage(AjxMessageFormat.format(ZaMsg.ERROR_ALIAS_INVALID,[aliasName]), null, DwtMessageDialog.CRITICAL_STYLE, null);
							ZaApp.getInstance().getCurrentController()._errorDialog.popup();		
							break;						
						}						
						dl.addAlias(aliasName);
					}
				} catch (ex) {
					if((ex.code == ZmCsfeException.ACCT_EXISTS) && aliasName) {
						//if failed because account exists just show a warning
						var account =  ZaXFormViewController.prototype._findAlias.call(this, aliasName);
						switch(account.type) {
							case ZaItem.DL:
								if(account.name == aliasName) {
									failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS3,[account.name]);								
								} else {
									failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS4,[account.name, aliasName]);
								}
							break;
							case ZaItem.ACCOUNT:
								if(account.name == aliasName) {
									failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS2,[account.name]);								
								} else {
									failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS1,[account.name, aliasName]);
								}							
							break;	
							case ZaItem.RESOURCE:
								if(account.name == aliasName) {
									failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS5,[account.name]);								
								} else {
									failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS6,[account.name, aliasName]);
								}							
							break;							
							default:
								failedAliases += "<br>" +AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS0,[aliasName]);
							break;
						}
						failedAliasesCnt++;
					} else {
						//if failed for another reason - jump out
						throw (ex);
					}
				}
			}
	
			if(failedAliasesCnt == 1) {
				ZaApp.getInstance().getCurrentController()._errorDialog.setMessage(ZaMsg.WARNING_ALIAS_EXISTS + failedAliases, "", DwtMessageDialog.WARNING_STYLE, ZabMsg.zimbraAdminTitle);
				ZaApp.getInstance().getCurrentController()._errorDialog.popup();			
			} else if(failedAliasesCnt > 1) {
				ZaApp.getInstance().getCurrentController()._errorDialog.setMessage(ZaMsg.WARNING_ALIASES_EXIST + failedAliases, "", DwtMessageDialog.WARNING_STYLE, ZabMsg.zimbraAdminTitle);
				ZaApp.getInstance().getCurrentController()._errorDialog.popup();			
			}
		} catch (ex) {
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.FAILED_ADD_ALIASES, ex);	
			return false;
		}
	}
}
ZaItem.createMethods["ZaDistributionList"].push(ZaDistributionList.addAliases);


ZaDistributionList.addRemoveOwners = function (mods, obj) {
	//add-remove Owners
	var tmpObjCnt = -1;
	var currentObjCnt = -1;
    // Used for ACL in future
    var hasAddandRemoveRight = true;
	if(hasAddandRemoveRight) {
		if(obj[ZaDistributionList.A2_DLOwners]) {
			if(!(obj[ZaDistributionList.A2_DLOwners] instanceof Array)) {
				var tmpStr = obj[ZaDistributionList.A2_DLOwners] ;
				obj[ZaDistributionList.A2_DLOwners]  = new Array();
				obj[ZaDistributionList.A2_DLOwners].push(tmpStr);
			}
			tmpObjCnt = obj[ZaDistributionList.A2_DLOwners].length - 1;
		}

		if(this[ZaDistributionList.A2_DLOwners]) {
			if(!(this[ZaDistributionList.A2_DLOwners] instanceof Array)) {
				var tmpStr = this[ZaDistributionList.A2_DLOwners] ;
				this[ZaDistributionList.A2_DLOwners]  = new Array();
				this[ZaDistributionList.A2_DLOwners].push(tmpStr);
			}
			currentObjCnt = this[ZaDistributionList.A2_DLOwners].length - 1;
		}

		//diff two arrays
		for(var tmpIx=tmpObjCnt; tmpIx >= 0; tmpIx--) {
			for(var currIx=currentObjCnt; currIx >=0; currIx--) {
				if(obj[ZaDistributionList.A2_DLOwners][tmpIx] == this[ZaDistributionList.A2_DLOwners][currIx]) {
					//this alias already exists
					obj[ZaDistributionList.A2_DLOwners].splice(tmpIx,1);
					this[ZaDistributionList.A2_DLOwners].splice(currIx,1);
					break;
				}
			}
		}
		//remove owners
		if(currentObjCnt != -1) {
			currentObjCnt = this[ZaDistributionList.A2_DLOwners].length;
		}
		
		try {
			for(var ix=0; ix < currentObjCnt; ix++) {
				this.addRemoveOwner(this[ZaDistributionList.A2_DLOwners][ix]);
			}
		} catch (ex) {
			ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDistributionList.addRemoveOwner", null, false);
			return false;
		}

        // add owners
		if(tmpObjCnt != -1) {
			tmpObjCnt = obj[ZaDistributionList.A2_DLOwners].length;
		}

		try {
			for(var ix=0; ix < tmpObjCnt; ix++) {
				try {
					if(obj[ZaDistributionList.A2_DLOwners][ix]) {
						this.addRemoveOwner(obj[ZaDistributionList.A2_DLOwners][ix], true);
					}
				} catch (ex) {
						//if failed for another reason - jump out
						throw (ex);
				}
			}
		} catch (ex) {
			ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDistributionList.addRemoveOwner", null, false);
			return false;
		}
	}
}
ZaItem.modifyMethods["ZaDistributionList"].push(ZaDistributionList.addRemoveOwners);

ZaDistributionList.addOwners = function (obj, dl) {
	//add-remove Owners
	var tmpObjCnt = -1;
	if(obj[ZaDistributionList.A2_DLOwners]) {
		if(!(obj[ZaDistributionList.A2_DLOwners] instanceof Array)) {
			var tmpStr = obj[ZaDistributionList.A2_DLOwners] ;
			obj[ZaDistributionList.A2_DLOwners]  = new Array();
			obj[ZaDistributionList.A2_DLOwners].push(tmpStr);
		}
		tmpObjCnt = obj[ZaDistributionList.A2_DLOwners].length - 1;
	}

    // add owners
	if(tmpObjCnt != -1) {
		tmpObjCnt = obj[ZaDistributionList.A2_DLOwners].length;
	}

	try {
		for(var ix=0; ix < tmpObjCnt; ix++) {
			try {
				if(obj[ZaDistributionList.A2_DLOwners][ix]) {
					obj.addRemoveOwner(obj[ZaDistributionList.A2_DLOwners][ix], true);
				}
			} catch (ex) {
					//if failed for another reason - jump out
					throw (ex);
			}
		}
	} catch (ex) {
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDistributionList.addOwner", null, false);
		return false;
	}
}
ZaItem.createMethods["ZaDistributionList"].push(ZaDistributionList.addOwners);

ZaDistributionList.prototype.addRemoveOwner = function (ownerName, isAdd){
	var soapDoc = AjxSoapDoc.create("DistributionListActionRequest", "urn:zimbraAccount", null);
    var dlBy = soapDoc.set("dl", this.id);
    dlBy.setAttribute("by", "id");

    var opBy = soapDoc.set("action", null);
    var busyMsg;
    var actionName;
    if (isAdd) {
        actionName = "addOwners";
        busyMsg = ZaMsg.BUSY_ADD_DL_OWNER;
    }  else {
        actionName = "removeOwners";
        busyMsg = ZaMsg.BUSY_REMOVE_DL_OWNER;
    }
    opBy.setAttribute("op", actionName);

    var ownerBy = soapDoc.set("owner", ownerName, opBy);
    ownerBy.setAttribute("by", "name");
    ownerBy.setAttribute("type", "usr");
	var params = new Object();
	params.soapDoc = soapDoc;
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : busyMsg
	}
	ZaRequestMgr.invoke(params, reqMgrParams);
}

ZaDistributionList.checkValues = function(tmpObj) {
	if(ZaItem.hasWritePermission(ZaAccount.A_name,tmpObj)) {
		if(tmpObj.name == null || tmpObj.name.length < 1) {
			//show error msg
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_DL_NAME_REQUIRED);
			return false;
		}
		if(!AjxUtil.isValidEmailNonReg(tmpObj.name)) {
			//show error msg
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_DL_NAME_INVALID);
			return false;
		}	
	}
	

	return true;
}
// ==============================================================
// public accessor methods
// ==============================================================

ZaDistributionList.prototype.markChanged = function () {
	this._dirty = true;
};

ZaDistributionList.prototype.markClean = function () {
	this._dirty = false;
};

ZaDistributionList.prototype.isDirty = function () {
	return this._dirty;
};

ZaDistributionList.prototype.getId = function () {
	return this.id;
};

ZaDistributionList.prototype.setId = function (id) {
	this.id = id;
};

ZaDistributionList.prototype.getName = function () {
	return this.name;
};

ZaDistributionList.prototype.getMemberQueryParams = function(callbackQuery, offset, limit, controller, ajxCallbackWhenCompleted){
		if ( offset == null ) {
			offset = 0;
		}
		if ( limit == null ){
			limit = ZaDistributionList.MEMBER_QUERY_LIMIT;
		}

		var soapDoc = AjxSoapDoc.create("GetDistributionListRequest", ZaZimbraAdmin.URN, null);
		if(!this.getAttrs.all && !AjxUtil.isEmpty(this.attrsToGet)) {
			soapDoc.setMethodAttribute("attrs", this.attrsToGet.join(","));
		}

		soapDoc.setMethodAttribute("limit", limit);
		soapDoc.setMethodAttribute("offset", offset ); //start from the beginning

		var dl = soapDoc.set("dl", this.id);
		dl.setAttribute("by", "id");
		soapDoc.set("name", this.getName());

		var busyId = Dwt.getNextId();
		var argsOfCallback = {
			controller : controller,
			offset: offset,
			limit: limit,
			busyId: busyId,
			ajxCallbackWhenCompleted: ajxCallbackWhenCompleted
		};

		var reqCtrlParams = {
			soapDoc : soapDoc,
			noAuthToken : true,
			asyncMode : true
		}
		if ( callbackQuery != null ) {
			reqCtrlParams.callback = new AjxCallback(this, callbackQuery, argsOfCallback);
		}

		var reqMgrParams = {
			controller : controller,
			showBusy: true,
			busyMsg : ZaMsg.BUSY_GET_DL,
			busyId: busyId,
			skipCallbackIfCancelled: true
		}

		var queryParams = {
			reqCtrlParams: reqCtrlParams,
			reqMgrParams: reqMgrParams
		}
		return queryParams;
}


ZaDistributionList.prototype.getAllMembers = function ( params ) {
	if ( AjxUtil.isEmpty(params) || AjxUtil.isEmpty(params.controller) || AjxUtil.isEmpty(params.controller._view) ) {
		return;
	}
	var controller = params.controller, view = params.controller._view;

	if (this.id != null) {
		var limit = 0; //0 means unlimited
		var offset = 0;
		var callbackQuery = ZaDistributionList.prototype.getAllMembersCallback;
		this[ZaDistributionList.A2_allMemberHash] = {}; // make a new one

		try {
			var ajxCallbackWhenCompleted = new AjxCallback(view, ZaDLXFormView.prototype.updateMemberList);
            var updateTreeWhenCompleted = new AjxCallback(this, this.updateTree);
			var queryParams = ZaDistributionList.prototype.getMemberQueryParams.call( this, callbackQuery, offset, 
																	limit, controller, [ajxCallbackWhenCompleted, updateTreeWhenCompleted] );
			ZaRequestMgr.invoke(queryParams.reqCtrlParams, queryParams.reqMgrParams);
		} catch (ex) {
			ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDistributionList.prototype.getAllMembers", null, false);
		}
	}
}

ZaDistributionList.prototype.updateTree = function () {
    var treeCtrl = ZaZimbraAdmin.getInstance().getOverviewPanelController();
    treeCtrl.refreshRelatedTree(this, true, true);
}

ZaDistributionList.prototype.getAllMembersCallback = function ( params, resp ) {
	try {

		if(params.busyId) {
			ZaApp.getInstance().getAppCtxt().getShell().setBusy(false, params.busyId);
		}

		if(!resp && !this._currentRequest.cancelled) {
			throw(new AjxException(ZaMsg.ERROR_EMPTY_RESPONSE_ARG, AjxException.UNKNOWN, "ZaListViewController.prototype.getAllMembersCallback"));

		} else if( !resp.isException() ) {
			if ( !resp._data || !resp._data || !resp._data.Body ||
				!resp._data.Body.GetDistributionListResponse ) {
				return;
			}
			var dlBody = resp._data.Body.GetDistributionListResponse;
			if (!dlBody.dl || !(dlBody.dl[0]) ) {
				return;
			}
			var dlResp = dlBody.dl[0];

			//whether is dynamic group
			if (dlResp.dynamic === true) {
				this[ZaDistributionList.A2_dlType] = ZaDistributionList.DYNAMIC_DL_TYPE;
			}


			//all its members
			var members = dlResp.dlm;
			var len = (members && members.length) ? members.length : 0;

			var allMembers = this[ZaDistributionList.A2_allMemberHash];
			for (var i =0; i < len; ++i) {
				var name = members[i]._content;
				if ( !AjxUtil.isEmpty(name) ) {
					var member = new ZaDistributionListMember(name);
					allMembers[name] = member;
				}
			}

			this[ZaDistributionList.A2_numMembers] = len;
			this[ZaDistributionList.A2_memNumPages] = Math.ceil(len/ZaDistributionList.MEMBER_LIST_PAGE_SIZE);
			ZaDistributionList.prototype.pageAllMembers.call(this);

			this.id = dlResp.id;
			this.initFromJS(dlResp);

			//membership related instance variables, Make a GetAccountMembershipRequest
			if (this[ZaDistributionList.A2_dlType] !== ZaDistributionList.DYNAMIC_DL_TYPE)
				this[ZaAccount.A2_memberOf] = ZaAccountMemberOfListView.getDlMemberShip(this.id, "id" ) ;
			else
				this[ZaAccount.A2_memberOf] = { directMemberList: [],
												indirectMemberList: [],
												nonMemberList: []
												};
			this[ZaAccount.A2_directMemberList + "_more"] = 
				(this[ZaAccount.A2_memberOf][ZaAccount.A2_directMemberList].length > ZaAccountMemberOfListView.SEARCH_LIMIT) ? 1: 0;
			this[ZaAccount.A2_indirectMemberList + "_more"] = 
				(this[ZaAccount.A2_memberOf][ZaAccount.A2_indirectMemberList].length > ZaAccountMemberOfListView.SEARCH_LIMIT) ? 1: 0;

			//dl owners
			var owners = dlResp.owners;
			var ownerLen = (owners && owners.length) ? owners.length: 0;
			this[ZaDistributionList.A2_DLOwners] = new Array();
			if ( ownerLen > 0 ) {
				var ownerSet = owners[0].owner;
				for (var i = 0; i < ownerSet.length; i++) {
					var owner = new ZaDistributionListOwner(ownerSet[i]);
					this[ZaDistributionList.A2_DLOwners].push(owner.name);
				}
			}

			//run the CallBack finall
			var ajxCallbackWhenCompleted = params.ajxCallbackWhenCompleted || null;
			if (ajxCallbackWhenCompleted instanceof Array) {
                for (var i = 0; i < ajxCallbackWhenCompleted.length; i++)
				    ajxCallbackWhenCompleted[i].run1([this])
			} else if (ajxCallbackWhenCompleted instanceof AjxCallback) {
                ajxCallbackWhenCompleted.run1([this])
            }

		}

	} catch (ex) {
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDistributionList.prototype.getAllMembersCallback", null, false);
	}
}


ZaDistributionList.prototype.pageAllMembers = function ( ) {
	var allMembers = this[ZaDistributionList.A2_allMemberHash];
	if ( AjxUtil.isEmpty(allMembers) ) {
		return;
	}

	var pages = new Array();
	var names = AjxUtil.getHashKeys(allMembers); //sorted by name
	for ( var i = 0; i < names.length ; i+= ZaDistributionList.MEMBER_LIST_PAGE_SIZE ) {
		var page = new Array();
		for ( var j = 0; (i + j < names.length) && (j < ZaDistributionList.MEMBER_LIST_PAGE_SIZE); j++ ) {
			var member = allMembers[ names[i+j] ];
			page.push(member);
		}
		pages.push(page);
	}

	this[ZaDistributionList.A2_allMemberPages] = pages;
}

ZaDistributionList.removeDeletedMembers = function (mods, obj, dl, finishedCallback) {
	if(!ZaItem.hasRight(ZaDistributionList.REMOVE_DL_MEMBER_RIGHT, obj)) {
		if(finishedCallback && finishedCallback instanceof AjxCallback) {
			finishedCallback.run();
		}
		return;
	}
	var removeMemberSoapDoc, r;
	var command = new ZmCsfeCommand();
	//var member = list.getLast();
	removeMemberSoapDoc = AjxSoapDoc.create("RemoveDistributionListMemberRequest", ZaZimbraAdmin.URN, null);
	removeMemberSoapDoc.set("id", obj.id);
	var len = obj[ZaDistributionList.A2_removeList].length;
	if(len < 1)
		return;
		
	
	for (var i = 0; i < len; i++) {
		removeMemberSoapDoc.set("dlm", obj[ZaDistributionList.A2_removeList][i].toString());
	}

	var params = new Object();
	params.soapDoc = removeMemberSoapDoc;
	params.noAuthToken = true;
	if(finishedCallback && finishedCallback instanceof AjxCallback) {
		params.asyncMode = true;
		params.callback = finishedCallback;
	}

	//store the removelist to be used in modify the account's memberof
	//we only set the memberof after the server side is set. 
	//user a var to store removelist to avoid the removelist can't be cleared when some exception is throwed in command.invoke
	var removeList = obj[ZaDistributionList.A2_removeList];
	obj[ZaDistributionList.A2_removeList] = new Array();
	command.invoke(params);
	ZaDistributionList.modifyAccountDL(obj, removeList, false);
};
ZaItem.modifyMethods["ZaDistributionList"].push(ZaDistributionList.removeDeletedMembers);

ZaDistributionList.addNewMembers = function (mods, obj, dl, finishedCallback) {
	if(!ZaItem.hasRight(ZaDistributionList.ADD_DL_MEMBER_RIGHT,obj)) {
		if(finishedCallback && finishedCallback instanceof AjxCallback) {
			finishedCallback.run();
		}
		return;
	}
	
	var addMemberSoapDoc, r;
	var command = new ZmCsfeCommand();
	addMemberSoapDoc = AjxSoapDoc.create("AddDistributionListMemberRequest", ZaZimbraAdmin.URN, null);
	addMemberSoapDoc.set("id", obj.id);
	var len = obj[ZaDistributionList.A2_addList].length;
	if(len < 1)
		return;
		
	for (var i = 0; i < len; i++) {
		addMemberSoapDoc.set("dlm", obj[ZaDistributionList.A2_addList][i].toString());
	}
	var params = new Object();
	params.soapDoc = addMemberSoapDoc;	
	if(finishedCallback && finishedCallback instanceof AjxCallback) {	
		params.asyncMode = true;
		params.callback = finishedCallback;
	}
	params.noAuthToken = true;
	var addList = obj[ZaDistributionList.A2_addList];
	command.invoke(params);
	obj[ZaDistributionList.A2_addList] = new Array();
	ZaDistributionList.modifyAccountDL(obj, addList, true);
};
ZaItem.modifyMethods["ZaDistributionList"].push(ZaDistributionList.addNewMembers);

ZaDistributionList.modifyAccountDL = function (dl, modifyList, isAdd){
	var tabGroup = ZaApp.getInstance().getTabGroup();
	var currentDl =  { name: dl.name, id: dl.id } ;
	for(var i = 0; i < modifyList.length; i++){	
		var currentItem = modifyList[i];
		var accountName = null;
		
		accountName = currentItem.name;
		
		//when the item is added by search result item, it reduces the match time.
		if(currentItem.type == ZaItem.ALIAS && currentItem.attrs){
			accountName = currentItem.attrs[ZaAlias.A_targetAccount];
		}
		
		if(!accountName)
			continue;
		
		var currentView = null;
		for (var iTab=0; iTab < ZaAppTabGroup._TABS.size(); iTab++) {
			var tab = ZaAppTabGroup._TABS.get(iTab) ;
			var v = tab.getAppView() ;
			//Only update the data for account item opened on the tab. 
			//For the items haven't been opened, it will fetch newest data from server when it is opened.
			if (v && v._containedObject && v._containedObject.name && v.constructor && (v.constructor==ZaAccountXFormView)) {
				if (accountName == v._containedObject.name ) {//firstly check for account
					currentView = v;
					break;
				}else if(v._containedObject.attrs && v._containedObject.attrs[ZaAccount.A_zimbraMailAlias]){
					//secondly match the name for account's alias name
					var aliasList = v._containedObject.attrs[ZaAccount.A_zimbraMailAlias];
					var isAliasMatch = false;
					for(var iAlias = 0; iAlias < aliasList.length; iAlias++){
						if(accountName == aliasList[iAlias]){
							isAliasMatch = true;
							break;
						}
					}
					if(isAliasMatch){
						currentView = v;
						break;
					}
				}
			}
		}	
		
		if(!currentView)
			continue;
		
		var isFind = false;
		var currentInDL = currentView._containedObject[ZaAccount.A2_memberOf][ZaAccount.A2_directMemberList];
		for(var j = 0; j < currentInDL.length; j++){
			if(currentInDL[j].name == currentDl.name){
				isFind = true;
				break;
			}
		}	
		
		if(!isFind && isAdd){
			currentInDL.push(currentDl);
		}else if(isFind && !isAdd){
			currentInDL.splice(j, 1);
		}else{
			continue;
		}
		
		currentView._localXForm.setInstanceValue(currentInDL, ZaAccount.A2_directMemberList);
	}
}

ZaDistributionList.addNewMembersCreateMethod = function (obj, dl, finishedCallback) {
    ZaDistributionList.addNewMembers.call (this, null, obj, dl, finishedCallback) ;  
}
ZaItem.createMethods["ZaDistributionList"].push(ZaDistributionList.addNewMembersCreateMethod);


ZaDistributionList.prototype.initFromJS = 
function (dl) {
	if(!dl)
		return;
		
	this.attrs = new Object();	
	this.attrs[ZaAccount.A_zimbraMailAlias] = new Array();
	this.name = dl.name;
	this.id = dl.id;
    this.dynamic = dl.dynamic;
	var len = dl.a.length;

	for(var ix = 0; ix < len; ix++) {
		//we have to handle the special case for DL because server returns the dl itself as the zimbraMailAlias
		if ( dl.a[ix].n == ZaAccount.A_zimbraMailAlias
					&& dl.a[ix]._content == this.name) {				
			continue ;
		}
		
		if(!this.attrs[[dl.a[ix].n]]) {
			this.attrs[[dl.a[ix].n]] = dl.a[ix]._content;
		} else {
			if(!(this.attrs[[dl.a[ix].n]] instanceof Array)) {
				this.attrs[[dl.a[ix].n]] = [this.attrs[[dl.a[ix].n]]];
			} 
			this.attrs[[dl.a[ix].n]].push(dl.a[ix]._content);
		}
	}
	
	if(!this.attrs[ZaAccount.A_description])
		this.attrs[ZaAccount.A_description] = [];
		
	if(!(this.attrs[ZaAccount.A_description] instanceof Array)) {
		this.attrs[ZaAccount.A_description] = [this.attrs[ZaAccount.A_description]];
	}	

}

ZaDistributionList.compareTwoMembers = function (val1, val2) {
	var a = AjxUtil.isEmpty(val1);
	var b = AjxUtil.isEmpty(val2);
	if(a && !b)
		return -1;
	
	if(!a && b)
		return 1;
		
	if(a && b)
		return 0;
		
	if(AjxUtil.isEmpty(val1.name) && AjxUtil.isEmpty(val2.name))
		return 0;
	
	if(val1.name == val2.name)
		return 0;
	
	if (val1.name < val2.name)
		return -1;
		
	if (val1.name > val2.name)
		return 1;
	
	return 0;
		
}
/**
 * Small wrapper class for a distribution list member.
 * The id is needed at a higher level for DwtLists to work correctly.
 */
ZaDistributionListMember = function(name) {
	this[ZaAccount.A_name] = name;
	this.id = "ZADLM_" + name;

}

ZaDistributionListMember.prototype.toString = function () {
	return this[ZaAccount.A_name];
};

ZaDistributionListOwner = function (entry) {
    this[ZaAccount.A_name] = entry.name;
    this.id = entry.id;
    this.type = entry.type;
}

ZaDistributionListOwner.prototype.toString = function () {
	return this[ZaAccount.A_name];
};

ZaDistributionList.myXModel = {

	items: [
		{id:"id", type:_STRING_},
		{id:ZaDistributionList.A2_query, type:_STRING_},
        {id:ZaDistributionList.A2_dlType, type:_STRING_},
		{id:ZaDistributionList.A2_pagenum, type:_NUMBER_, defaultValue:1},
		{id:ZaDistributionList.A2_poolPagenum, type:_NUMBER_, defaultValue:1},
		{id:ZaDistributionList.A2_poolNumPages, type:_NUMBER_, defaultValue:1},		
		{id:ZaDistributionList.A2_memPagenum, type:_NUMBER_, defaultValue:1},
		{id:ZaDistributionList.A2_memNumPages, type:_NUMBER_, defaultValue:1},	
		{id:ZaDistributionList.A2_memberPool, type:_LIST_},
		{id:ZaDistributionList.A2_memberList, type:_LIST_},
		{id:ZaDistributionList.A2_allMemberHash, type:_OBJECT_, defaultValue:{}},
		{id:ZaDistributionList.A2_allMemberPages, type:_LIST_, defaultValue:[]},
		{id:ZaDistributionList.A2_origList, type:_LIST_},
		{id:ZaDistributionList.A2_addList, type:_LIST_},
		{id:ZaDistributionList.A2_removeList, type:_LIST_},
		{id:ZaDistributionList.A2_optionalAdd, type:_STRING_},
		{id:ZaAccount.A_name, type:_STRING_,  required:true,
			constraints: {type:"method", value:
			   function (value, form, formItem, instance) {				   
				   if (value){
					  	if(AjxUtil.isValidEmailNonReg(value)) {
						   return value;
					   } else {
						   throw ZaMsg.ErrorInvalidEmailAddress;
					   }
				   }
			   }
			}
		},
        {id:ZaDistributionList.A2_DLOwners, type:_LIST_, ref:ZaDistributionList.A2_DLOwners, listItem:{type:_STRING_}},
        {id:ZaDistributionList.A2_owners_selection_cache, type:_LIST_},
		{id:ZaDistributionList.A2_members, type:_LIST_},
		ZaItem.descriptionModelItem,
		{id:ZaItem.A_zimbraId, type:_STRING_, ref:"attrs/" + ZaItem.A_zimbraId},
        {id:ZaDistributionList.A_memberOfURL, ref:"attrs/" + ZaDistributionList.A_memberOfURL, type:_STRING_,
            constraints: {type:"method", value:
			   function (value, form, formItem, instance) {
				   value = AjxStringUtil.trim(value);
                   var isAclGroup = instance.attrs[ZaDistributionList.A_zimbraIsACLGroup];
                   if (isAclGroup != "TRUE" && !value) {
                       throw AjxMsg.valueIsRequired;
                   }
                   return value;
			   }
			}
        },
        {id:ZaDistributionList.A_zimbraIsACLGroup, ref:"attrs/"+ZaDistributionList.A_zimbraIsACLGroup, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
		{id:ZaItem.A_zimbraCreateTimestamp, ref:"attrs/" + ZaItem.A_zimbraCreateTimestamp},
        {id:ZaAccount.A_zimbraHideInGal, type:_ENUM_, ref:"attrs/"+ZaAccount.A_zimbraHideInGal, choices:ZaModel.BOOLEAN_CHOICES},
		{id:ZaAccount.A_notes, ref:"attrs/"+ZaAccount.A_notes, type:_STRING_},
        {id:ZaAccount.A_mailHost, type:_STRING_, ref:"attrs/"+ZaAccount.A_mailHost},
        {id:ZaAccount.A2_autoMailServer, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
		{id:ZaAccount.A_displayname, type:_STRING_, ref:"attrs/"+ZaAccount.A_displayname},
		{id:ZaAccount.A_zimbraMailAlias, type:_LIST_, ref:"attrs/"+ZaAccount.A_zimbraMailAlias, listItem:{type:_STRING_}},
		{id:ZaDistributionList.A_mailStatus, ref:"attrs/"+ZaDistributionList.A_mailStatus, type:_STRING_},
		{id:ZaDistributionList.A_zimbraDistributionListSubscriptionPolicy, ref:"attrs/"+ZaDistributionList.A_zimbraDistributionListSubscriptionPolicy, type:_STRING_},
		{id:ZaDistributionList.A_zimbraDistributionListUnsubscriptionPolicy, ref:"attrs/"+ZaDistributionList.A_zimbraDistributionListUnsubscriptionPolicy, type:_STRING_},
        {
            id: ZaDistributionList.A_zimbraDistributionListSendShareMessageToNewMembers,
            ref: "attrs/" + ZaDistributionList.A_zimbraDistributionListSendShareMessageToNewMembers,
            type: _ENUM_,
            choices: ZaModel.BOOLEAN_CHOICES
        },
		{id:ZaDistributionList.A2_membersSelected, type:_LIST_},
		{id:ZaDistributionList.A2_nonmembersSelected, type:_LIST_},
		{id:ZaDistributionList.A2_memberPoolSelected, type:_LIST_},
		{id:ZaDistributionList.A2_directMemberSelected, type:_LIST_},
		{id:ZaDistributionList.A2_indirectMemberSelected, type:_LIST_},
		{id:ZaAccount.A2_memberOf, type:_OBJECT_, items: [
			{id:ZaDistributionList.A2_directMemberList, type:_LIST_},
			{id:ZaDistributionList.A2_indirectMemberList, type:_LIST_},
			{id:ZaDistributionList.A2_nonMemberList, type:_LIST_}
			]
		},		
		{id:(ZaAccount.A2_directMemberList + "_more"), type:_LIST_},
		{id:(ZaAccount.A2_directMemberList + "_offset"), type:_LIST_},
		{id:(ZaAccount.A2_indirectMemberList + "_more"), type:_LIST_},
		{id:(ZaAccount.A2_indirectMemberList + "_offset"), type:_LIST_},	
		{id:(ZaAccount.A2_nonMemberList + "_more"), type:_LIST_},
		{id:(ZaAccount.A2_nonMemberList + "_offset"), type:_LIST_},
		{id:ZaDistributionList.A2_alias_selection_cache, type:_LIST_},
        {id:ZaDistributionList.A_zimbraPrefReplyToEnabled, type:_ENUM_, ref:"attrs/"+ZaDistributionList.A_zimbraPrefReplyToEnabled, choices:ZaModel.BOOLEAN_CHOICES},
		{id:ZaDistributionList.A_zimbraPrefReplyToDisplay, type:_STRING_, ref:"attrs/"+ZaDistributionList.A_zimbraPrefReplyToDisplay},
        {id:ZaDistributionList.A_zimbraPrefReplyToAddress, type:_EMAIL_ADDRESS_, ref:"attrs/"+ZaDistributionList.A_zimbraPrefReplyToAddress}
	]
};

// Don't disturbe the DL view rendering process, when view is realy, start to update data.
ZaDistributionList.prototype.schedulePostLoading = function (controller) {
    //async load the member
    var act = new AjxTimedAction(this, ZaDistributionList.prototype.getAllMembers, {controller:controller});
    AjxTimedAction.scheduleAction(act, 100);
}

ZaDistributionList.getRelatedList =
function (parentPath) {
    var alias = this.attrs[ZaAccount.A_zimbraMailAlias];
    var membersNum = this[ZaDistributionList.A2_numMembers];
    var Tis = [];
    if(alias.length > 0) {
        var aliasTi = new ZaTreeItemData({
                    text: ZaMsg.TABT_Aliases,
                    //type: 1,
                    count:alias.length,
                    image:"AccountAlias",
                    mappingId: ZaZimbraAdmin._DL_ALIAS_LIST_VIEW,
                    path: parentPath + ZaTree.SEPERATOR + this.name + ZaTree.SEPERATOR + ZaMsg.TABT_Aliases
                    }
                );
        aliasTi.setData("aliasTargetId", this.id);
        ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._DL_ALIAS_LIST_VIEW] = ZaOverviewPanelController.aliasListTreeListener;
        Tis.push(aliasTi);
    }
    if(membersNum > 0) {
        var membersTi = new ZaTreeItemData({
                    text: ZaMsg.DLXV_LabelListMembers,
                    count:membersNum,
                    image:"DistributionList",
                    mappingId: ZaZimbraAdmin._DL_MEMBERS_LIST_VIEW,
                    path: parentPath + ZaTree.SEPERATOR + this.name + ZaTree.SEPERATOR + ZaMsg.DLXV_LabelListMembers
                    }
                );
        membersTi.setData("dlItem", this);
        ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._DL_MEMBERS_LIST_VIEW] = ZaOverviewPanelController.memberListInDLTreeListener;
        Tis.push(membersTi);
    }
    return Tis;

}
ZaItem.getRelatedMethods["ZaDistributionList"].push(ZaDistributionList.getRelatedList);
}
if (AjxPackage.define("zimbraAdmin.resource.model.ZaSignature")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 5/24/11
 * Time: 10:28 PM
 * To change this template use File | Settings | File Templates.
 */

ZaSignature =
function(name, id, content, type) {
    this.id = id;
    this.name = name;
    this.content = content;
    this.type = type ? type: "text/plain";
}

ZaSignature.prototype.constructor = ZaSignature;
ZaSignature.prototype.toString =
function() {
    return this.name;
}

ZaSignature.compareObject =
function(t1, t2){
    for(var i in t1){
        if(t1[i] != t2[i]){
            return false;
        }
    }
    return true;
}

ZaSignature.A2_name = "name";
ZaSignature.A2_id = "id";
ZaSignature.A2_content = "content";
ZaSignature.A2_type = "type";

ZaSignature.myXModel = {
    items:[
        {id:ZaSignature.A2_id, type:_STRING_, ref:ZaSignature.A2_id},
        {id:ZaSignature.A2_name, type:_STRING_, ref:ZaSignature.A2_name},
        {id:ZaSignature.A2_content, type:_STRING_, ref:ZaSignature.A2_content},
        {id:ZaSignature.A2_type, type:_STRING_, ref:ZaSignature.A2_type}
    ]
}

ZaSignature.signatureTypeChoices = [
    {value:"text/plain", label:ZaMsg.resSignaturePlainType},
    {value:"text/html", label:ZaMsg.resSignatureHTMLType}
];

ZaSignature.getSignatureChoices =
function (arr) {
    var result = [];
    result.push({name:ZaMsg.VALUE_NOT_SET, id:""});
    var i = 0;
    for(i = 0; i < arr.length; i++) {
    	if(arr[i] && arr[i].name) {
    		result.push({name:arr[i].name, id:arr[i].id});
    	}
    }
    return result;
}

ZaSignature.getNewSignatureChoices =
function (arr) {
    var result = [];
    result.push({name:ZaMsg.VALUE_NOT_SET, id:""});
    var i = 0;
    for(i = 0; i < arr.length; i++){
        if(arr[i] && arr[i].name) {
            result.push({name:arr[i].name, id:arr[i].name});
        }
    }
    return result;
}

ZaSignature.GetSignatures =
function(by, val) {
	if(!ZaZimbraAdmin.haveTargetRight(ZaItem.RESOURCE,ZaResource.VIEW_RESOURCE_MAIL_RIGHT,this.name)
			&& !ZaZimbraAdmin.haveTargetRight(ZaItem.RESOURCE,ZaResource.VIEW_RESOURCE_MAIL_RIGHT,ZaAccount.getDomain(this.name))) {
		return;
	}
	if(!ZaZimbraAdmin.isGlobalAdmin() && this.attrs[ZaResource.A_accountStatus] != ZaResource.ACCOUNT_STATUS_ACTIVE) {
		return;
	}
	
    var soapDoc = AjxSoapDoc.create("GetSignaturesRequest", "urn:zimbraAccount", null);

    var params = new Object();
    params.soapDoc = soapDoc;
    params.skipAuthCheck = false;
    if(by == "id"){
        params.accountId = val;
    } else {
        params.accountName = val;
    }

    try{
        var reqMgrParams = {
            controller : ZaApp.getInstance().getCurrentController(),
            busyMsg : ZaMsg.BUSY_GET_RESOURCE
        };

        this[ZaResource.A2_signatureList] = [];
        var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.GetSignaturesResponse;
        if( resp.signature) {
            for (var i in resp.signature) {
                var _content;
                var _type;
                if(resp.signature[i].content && resp.signature[i].content[0]){
                    _content =  resp.signature[i].content[0]._content;
                    _type = resp.signature[i].content[0].type;
                }
                var currentSignature = new ZaSignature(resp.signature[i].name,
                                            resp.signature[i].id,
                                            _content,
                                            _type);
                this[ZaResource.A2_signatureList].push(currentSignature);
            }

        }

    } catch(ex) {
        throw ex;
        return null;
    }
}

ZaSignature.CreateSignature =
function(by, val) {
    var soapDoc = AjxSoapDoc.create("CreateSignatureRequest", "urn:zimbraAccount", null);
    var signBy = soapDoc.set("signature", null);
    signBy.setAttribute("name", this[ZaSignature.A2_name]);
    var contentBy;
    if(this[ZaSignature.A2_type] == "text/plain"){
        contentBy = soapDoc.set("content", this[ZaSignature.A2_content], signBy);
        contentBy.setAttribute("type", "text/plain");

        contentBy = soapDoc.set("content", null, signBy);
        contentBy.setAttribute("type", "text/html");
    } else {
        contentBy = soapDoc.set("content", this[ZaSignature.A2_content], signBy);
        contentBy.setAttribute("type", "text/html");

        contentBy = soapDoc.set("content", null, signBy);
        contentBy.setAttribute("type", "text/plain");
    }
    var params = new Object();
    params.soapDoc = soapDoc;
    params.skipAuthCheck = false;
    if(by == "id"){
        params.accountId = val;
    } else {
        params.accountName = val;
    }

    try{
        var reqMgrParams = {
            controller : ZaApp.getInstance().getCurrentController(),
            busyMsg : ZaMsg.BUSY_GET_RESOURCE
        };

        var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.CreateSignatureResponse;
        if( resp.signature && resp.signature[0]) {
            this.id = resp.signature[0].id;
        }
        return this;
    } catch(ex) {
        throw ex;
        return null;
    }
}

ZaSignature.CreateAccountSignature =
function(tmpObj, resource){
	if(!ZaZimbraAdmin.haveTargetRight(ZaItem.RESOURCE,ZaResource.VIEW_RESOURCE_MAIL_RIGHT,resource.name)
			&& !ZaZimbraAdmin.haveTargetRight(ZaItem.RESOURCE,ZaResource.VIEW_RESOURCE_MAIL_RIGHT,ZaAccount.getDomain(resource.name))) {
		return;
	}
    if (!AjxUtil.isEmpty(tmpObj[ZaResource.A2_signatureList])) {
        for(var i = 0; i < tmpObj[ZaResource.A2_signatureList].length; i++) {
            var current = tmpObj[ZaResource.A2_signatureList][i];
            var newSign;
            if (current[ZaSignature.A2_name] && current[ZaSignature.A2_content]){
                newSign = new ZaSignature(current[ZaSignature.A2_name], "",
                                          current[ZaSignature.A2_content],
                                          current[ZaSignature.A2_type]);
                ZaSignature.CreateSignature.call(newSign, "id", resource.id);
                tmpObj[ZaResource.A2_signatureList][i] = newSign;
            }
        }
        var mods = {};
        var index;
        if (tmpObj.attrs[ZaResource.A_zimbraPrefCalendarAutoAcceptSignatureId]) {
            index = ZaUtil.findValueInObjArrByPropertyName(tmpObj[ZaResource.A2_signatureList],
                        tmpObj.attrs[ZaResource.A_zimbraPrefCalendarAutoAcceptSignatureId]);
            if (index != -1 && tmpObj[ZaResource.A2_signatureList][index].id) {
                mods[ZaResource.A_zimbraPrefCalendarAutoAcceptSignatureId] = tmpObj[ZaResource.A2_signatureList][index].id;
            }
        }

        if (tmpObj.attrs[ZaResource.A_zimbraPrefCalendarAutoDenySignatureId]) {
            index = ZaUtil.findValueInObjArrByPropertyName(tmpObj[ZaResource.A2_signatureList],
                        tmpObj.attrs[ZaResource.A_zimbraPrefCalendarAutoDenySignatureId]);
            if (index != -1 && tmpObj[ZaResource.A2_signatureList][index].id) {
                mods[ZaResource.A_zimbraPrefCalendarAutoDenySignatureId] = tmpObj[ZaResource.A2_signatureList][index].id;
            }
        }

        if (tmpObj.attrs[ZaResource.A_zimbraPrefCalendarAutoDeclineSignatureId]) {
            index = ZaUtil.findValueInObjArrByPropertyName(tmpObj[ZaResource.A2_signatureList],
                        tmpObj.attrs[ZaResource.A_zimbraPrefCalendarAutoDeclineSignatureId]);
            if (index != -1 && tmpObj[ZaResource.A2_signatureList][index].id) {
                mods[ZaResource.A_zimbraPrefCalendarAutoDeclineSignatureId] = tmpObj[ZaResource.A2_signatureList][index].id;
            }
        }

        if(!AjxUtil.isEmpty(mods))
            ZaResource.modifyMethod.call(resource, mods);
    }

    return resource;
}

ZaSignature.ModifySignature =
function(by, val) {
    var soapDoc = AjxSoapDoc.create("ModifySignatureRequest", "urn:zimbraAccount", null);
    var signBy = soapDoc.set("signature", null);
    signBy.setAttribute("name", this[ZaSignature.A2_name]);
    signBy.setAttribute("id", this[ZaSignature.A2_id]);
    var contentBy;
    if(this[ZaSignature.A2_type] == "text/plain"){
        contentBy = soapDoc.set("content", this[ZaSignature.A2_content], signBy);
        contentBy.setAttribute("type", "text/plain");

        contentBy = soapDoc.set("content", null, signBy);
        contentBy.setAttribute("type", "text/html");
    } else {
        contentBy = soapDoc.set("content", this[ZaSignature.A2_content], signBy);
        contentBy.setAttribute("type", "text/html");

        contentBy = soapDoc.set("content", null, signBy);
        contentBy.setAttribute("type", "text/plain");
    }

    var params = new Object();
    params.soapDoc = soapDoc;
    params.skipAuthCheck = false;
    if(by == "id"){
        params.accountId = val;
    } else {
        params.accountName = val;
    }

    try{
        var reqMgrParams = {
            controller : ZaApp.getInstance().getCurrentController(),
            busyMsg : ZaMsg.BUSY_GET_RESOURCE
        };

        ZaRequestMgr.invoke(params, reqMgrParams).Body.ModifySignatureResponse;

    } catch(ex) {
        throw ex;
        return null;
    }
}


ZaSignature.DeleteSignature =
function(by, val) {
    var soapDoc = AjxSoapDoc.create("DeleteSignatureRequest", "urn:zimbraAccount", null);
    var signBy = soapDoc.set("signature", null);
    signBy.setAttribute("id", this[ZaSignature.A2_id]);

    var params = new Object();
    params.soapDoc = soapDoc;
    params.skipAuthCheck = false;
    if(by == "id"){
        params.accountId = val;
    } else {
        params.accountName = val;
    }

    try{
        var reqMgrParams = {
            controller : ZaApp.getInstance().getCurrentController(),
            busyMsg : ZaMsg.BUSY_GET_RESOURCE
        };

        var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.DeleteSignatureResponse;

    } catch(ex) {
        throw ex;
        return null;
    }
}
}
if (AjxPackage.define("zimbraAdmin.resource.model.ZaResource")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaResource
* @contructor ZaResource
* @param ZaApp app
* this class is a model for zimbra calendar resource account 
* @author Charles Cao
**/
ZaResource = function() {
	ZaItem.call(this, "ZaResource");
	this._init();
	this.type=ZaItem.RESOURCE;
}

ZaResource.prototype = new ZaAccount;
ZaResource.prototype.constructor = ZaResource;

ZaItem.loadMethods["ZaResource"] = new Array();
ZaItem.initMethods["ZaResource"] = new Array();
ZaItem.modifyMethods["ZaResource"] = new Array();
ZaItem.createMethods["ZaResource"] = new Array();

//object attributes
ZaResource.A_name = ZaAccount.A_name;
//ZaResource.A_resourceName = "resourceName";
ZaResource.A_uid = ZaAccount.A_uid;
ZaResource.A_accountName = ZaAccount.A_accountName; 
ZaResource.A_mail = ZaAccount.A_mail;
ZaResource.A_description = ZaAccount.A_description;
ZaResource.A_displayname = ZaAccount.A_displayname;
ZaResource.A_country = ZaAccount.A_country; //country
ZaResource.A_street = ZaAccount.A_street;
ZaResource.A_city = ZaAccount.A_city;
ZaResource.A_zip = ZaAccount.A_zip;
ZaResource.A_state = ZaAccount.A_state;
ZaResource.A_password  = ZaAccount.A_password;
ZaResource.A2_confirmPassword = ZaAccount.A2_confirmPassword;
//ZaResource.A_mailDeliveryAddress = ZaAccount.A_mailDeliveryAddress;
ZaResource.A_accountStatus = ZaAccount.A_accountStatus;
ZaResource.A_notes = ZaAccount.A_notes;
ZaResource.A_mailHost = ZaAccount.A_mailHost;
ZaResource.A_COSId = ZaAccount.A_COSId;
ZaResource.A_zimbraMinPwdLength = ZaAccount.A_zimbraMinPwdLength;
ZaResource.A_zimbraMaxPwdLength = ZaAccount.A_zimbraMaxPwdLength;

ZaResource.A_zimbraPrefCalendarForwardInvitesTo = "zimbraPrefCalendarForwardInvitesTo";
ZaResource.A_zimbraCalResMaxNumConflictsAllowed = "zimbraCalResMaxNumConflictsAllowed";
ZaResource.A_zimbraCalResMaxPercentConflictsAllowed = "zimbraCalResMaxPercentConflictsAllowed";
ZaResource.A_locationDisplayName = "zimbraCalResLocationDisplayName";
ZaResource.A_zimbraAccountCalendarUserType = "zimbraAccountCalendarUserType";
ZaResource.A_zimbraCalResAlwaysFree = "zimbraCalResAlwaysFree";
ZaResource.A_zimbraCalResAutoAcceptDecline = "zimbraCalResAutoAcceptDecline";
ZaResource.A_zimbraCalResAutoDeclineIfBusy = "zimbraCalResAutoDeclineIfBusy";
ZaResource.A_zimbraCalResAutoDeclineRecurring = "zimbraCalResAutoDeclineRecurring";
ZaResource.A_zimbraCalResBuilding = "zimbraCalResBuilding";
ZaResource.A_zimbraCalResCapacity = "zimbraCalResCapacity";
ZaResource.A_zimbraCalResContactEmail = "zimbraCalResContactEmail";
ZaResource.A_zimbraCalResContactName = "zimbraCalResContactName";
ZaResource.A_zimbraCalResContactPhone = "zimbraCalResContactPhone";
ZaResource.A_zimbraCalResFloor = "zimbraCalResFloor";
ZaResource.A_zimbraCalResRoom = "zimbraCalResRoom";
ZaResource.A_zimbraCalResSite = "zimbraCalResSite";
ZaResource.A_zimbraCalResType = "zimbraCalResType";
ZaResource.A_contactInfoAutoComplete = "contactInfoAutoComplete";
ZaResource.A_zimbraMailForwardingAddressMaxLength = "zimbraMailForwardingAddressMaxLength";
ZaResource.A_zimbraMailForwardingAddressMaxNumAddrs = "zimbraMailForwardingAddressMaxNumAddrs";

ZaResource.ACCOUNT_STATUS_ACTIVE = "active";
ZaResource.ACCOUNT_STATUS_MAINTENANCE = "maintenance";
ZaResource.ACCOUNT_STATUS_LOCKED = "locked";
ZaResource.ACCOUNT_STATUS_CLOSED = "closed";

ZaResource.RESOURCE_TYPE_LOCATION = "Location";
ZaResource.RESOURCE_TYPE_EQUIPMENT = "Equipment";

ZaResource.SCHEDULE_POLICY_TT = "scheduleTT";
ZaResource.SCHEDULE_POLICY_FT = "scheduleFT";
ZaResource.SCHEDULE_POLICY_TF = "scheduleTF";
ZaResource.SCHEDULE_POLICY_FF = "scheduleFF";

ZaResource.A_zimbraPrefCalendarAutoAcceptSignatureId = "zimbraPrefCalendarAutoAcceptSignatureId";
ZaResource.A_zimbraPrefCalendarAutoDeclineSignatureId = "zimbraPrefCalendarAutoDeclineSignatureId";
ZaResource.A_zimbraPrefCalendarAutoDenySignatureId = "zimbraPrefCalendarAutoDenySignatureId";
ZaResource.A2_signatureList = "signatureList";
ZaResource.A2_signature_selection_cache = "signatureSelectionCache";

//this attributes are not used in the XML object, but is used in the model
ZaResource.A2_schedulePolicy = "schedulePolicy";
ZaResource.A2_autodisplayname = "autodisplayname";
ZaResource.A2_autoMailServer = "automailserver";
ZaResource.A2_autoCos = "autoCos";
ZaResource.A2_autoLocationName = "autolocationname";
ZaResource.A2_myCOS = "mycos";
ZaResource.A2_calFwdAddr_selection_cache = "calFwdAddr_selection_cache";

ZaResource.MAXSEARCHRESULTS = ZaSettings.MAXSEARCHRESULTS;
ZaResource.RESULTSPERPAGE = ZaSettings.RESULTSPERPAGE;

ZaResource.searchAttributes = AjxBuffer.concat(ZaResource.A_displayname,",",
											   ZaItem.A_zimbraId,  "," , 
											   ZaResource.A_mailHost , "," , 
											   ZaResource.A_uid ,"," , 
											   ZaResource.A_accountStatus , "," , 
											   ZaResource.A_description, ",",
											   ZaResource.A_zimbraCalResType);

ZaResource.VIEW_RESOURCE_MAIL_RIGHT = "adminLoginCalendarResourceAs";
ZaResource.SET_CALRES_PASSWORD_RIGHT = "setCalendarResourcePassword";
ZaResource.CHANGE_CALRES_PASSWORD_RIGHT = "changeCalendarResourcePassword";
ZaResource.ADD_CALRES_ALIAS_RIGHT = "addCalendarResourceAlias";
ZaResource.REMOVE_CALRES_ALIAS_RIGHT = "removeCalendarResourceAlias";
ZaResource.DELETE_CALRES_RIGHT = "deleteCalendarResource";
ZaResource.GET_CALRES_SHAREINFO_RIGHT = "getCalendarResourceShareInfo";
ZaResource.LIST_CALRES_RIGHT = "listCalendarResource";
ZaResource.PUBLISH_CALRES_SHAREINFO = "publishCalendarResourceShareInfo";
ZaResource.RENAME_CALRES_RIGHT = "renameCalendarResource";
ZaResource.GET_CALRES_INFO_RIGHT = "getCalendarResourceInfo";
ZaResource.checkValues = 
function(tmpObj) {
	/**
	* check values
	**/
	if(ZaItem.hasWritePermission(ZaAccount.A_name,tmpObj)) {
		if(tmpObj.name == null || tmpObj.name.length < 1) {
			//show error msg
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_ACCOUNT_NAME_REQUIRED);
			return false;
		}
		
		/*if(!AjxUtil.EMAIL_SHORT_RE.test(tmpObj.name) ) {*/
		if(!AjxUtil.isValidEmailNonReg(tmpObj.name)) {
			//show error msg
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_RESOURCE_EMAIL_INVALID);
			return false;
		}
	}

	var maxPwdLen = Number.POSITIVE_INFINITY;
	var minPwdLen = 1;	
	if(ZaItem.hasWritePermission(ZaAccount.A_zimbraMinPwdLength,tmpObj) && ZaItem.hasWritePermission(ZaAccount.A_zimbraMaxPwdLength,tmpObj)) {
		//validate password length against this account's COS setting
		if(tmpObj.attrs[ZaResource.A_zimbraMinPwdLength] != null) {
			minPwdLen = tmpObj.attrs[ZaResource.A_zimbraMinPwdLength];
		} else  {
			minPwdLen = tmpObj._defaultValues.attrs[ZaResource.A_zimbraMinPwdLength];
		}
		
		if(tmpObj.attrs[ZaResource.A_zimbraMaxPwdLength] != null) {
			maxPwdLen = tmpObj.attrs[ZaResource.A_zimbraMaxPwdLength];
		} else  {
			maxPwdLen = tmpObj._defaultValues.attrs[ZaResource.A_zimbraMaxPwdLength];
		}
	}
	if(ZaItem.hasAnyRight([ZaResource.SET_CALRES_PASSWORD_RIGHT, ZaResource.CHANGE_CALRES_PASSWORD_RIGHT],tmpObj)) {
		//if there is a password - validate it
		if(tmpObj.attrs[ZaResource.A_password]!=null || tmpObj[ZaResource.A2_confirmPassword]!=null) {
			if(tmpObj.attrs[ZaResource.A_password] != tmpObj[ZaResource.A2_confirmPassword]) {
				//show error msg
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_MISMATCH);
				return false;
			} 			
			if(tmpObj.attrs[ZaResource.A_password].length < minPwdLen || AjxStringUtil.trim(tmpObj.attrs[ZaResource.A_password]).length < minPwdLen) { 
				//show error msg
                var minpassMsg;
                if (minPwdLen > 1) {
                    minpassMsg =  String(ZaMsg.NAD_passMinLengthMsg_p).replace("{0}",minPwdLen);
                } else {
                    minpassMsg =  String(ZaMsg.NAD_passMinLengthMsg_s).replace("{0}",minPwdLen);
                }
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_TOOSHORT + "<br>" + minpassMsg);
				return false;		
			}
			
			if(AjxStringUtil.trim(tmpObj.attrs[ZaResource.A_password]).length > maxPwdLen) { 
				//show error msg
                var maxpassMsg;
                if (maxPwdLen > 1) {
                    maxpassMsg =  String(ZaMsg.NAD_passMinLengthMsg_p).replace("{0}",minPwdLen);
                } else {
                    maxpassMsg =  String(ZaMsg.NAD_passMinLengthMsg_s).replace("{0}",minPwdLen);
                }
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_TOOLONG+ "<br>" + maxpassMsg);
				return false;		
			}
		} 	
	}		
	return true;
}


/**
* Creates a new ZaResource. This method makes SOAP request to create a new calresource record. 
* @param tmpObj {Object}
* @param app {ZaApp}
* @param resource {ZaResource}
**/
ZaResource.createMethod = 
function (tmpObj, resource) {
	tmpObj.attrs[ZaResource.A_mail] = tmpObj.name;	
	var resp;	
	//create SOAP request
	var soapDoc = AjxSoapDoc.create("CreateCalendarResourceRequest", ZaZimbraAdmin.URN, null);
	soapDoc.set(ZaResource.A_name, tmpObj.name);
	
	if(tmpObj.attrs[ZaResource.A_password] && tmpObj.attrs[ZaResource.A_password].length > 0)
		soapDoc.set(ZaResource.A_password, tmpObj.attrs[ZaResource.A_password]);
			
	//set mail host	
	if(tmpObj[ZaResource.A2_autoMailServer] == "TRUE") {
		tmpObj.attrs[ZaResource.A_mailHost] = null;
	}
	
	//check if we need to set the cosId
	if (tmpObj[ZaResource.A2_autoCos] == "TRUE" ) {
		tmpObj.attrs[ZaResource.A_COSId] = null ;
	}
	
	//set scheduling policy
	ZaResource.prototype.setLdapAttrsFromSchedulePolicy.call (tmpObj); 
		
	//set all the other attrs automatically
	for (var aname in tmpObj.attrs) {
		if(aname == ZaResource.A_password || aname == ZaItem.A_objectClass || aname == ZaResource.A_mail ||
           aname == ZaResource.A_zimbraPrefCalendarAutoAcceptSignatureId ||
           aname == ZaResource.A_zimbraPrefCalendarAutoDenySignatureId ||
           aname == ZaResource.A_zimbraPrefCalendarAutoDeclineSignatureId     ) {
			continue;
		}	
		
		if(tmpObj.attrs[aname] instanceof Array) {
			var cnt = tmpObj.attrs[aname].length;
			if(cnt) {
				for(var ix=0; ix <cnt; ix++) {
					var attr = soapDoc.set("a", tmpObj.attrs[aname][ix]);
					attr.setAttribute("n", aname);
				}
			} 
		} else {	
			if(tmpObj.attrs[aname] != null) {
				var attr = soapDoc.set("a", tmpObj.attrs[aname]);
				attr.setAttribute("n", aname);
			}
		}
	}
	try {
		//var createResCommand = new ZmCsfeCommand();
		var params = new Object();
		params.soapDoc = soapDoc;
		var reqMgrParams = {
			controller : ZaApp.getInstance().getCurrentController(),
			busyMsg : ZaMsg.BUSY_CREATE_RESOURCE
		}	
		resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.CreateCalendarResourceResponse;
	} catch (ex) {
		throw ex;
		return null ;
	}
		
	resource.initFromJS(resp.calresource[0]);	
	return resource ;		
}
ZaItem.createMethods["ZaResource"].push(ZaResource.createMethod);
ZaItem.createMethods["ZaResource"].push(ZaSignature.CreateAccountSignature);

/**
* @method modify
* Updates ZaResource attributes (SOAP)
* @param mods set of modified attributes and their new values
*/
ZaResource.modifyMethod =
function(mods) {
	var hasSomething = false;
	//update the object
	var soapDoc = AjxSoapDoc.create("ModifyCalendarResourceRequest", ZaZimbraAdmin.URN, null);
	soapDoc.set("id", this.id);
	for (var aname in mods) {
		hasSomething = true;
		//multi value attribute
		if(mods[aname] instanceof Array) {
			var cnt = mods[aname].length;
			if(cnt) {
				var nonemptyElements = false;
				for(var ix=0; ix <cnt; ix++) {
					var attr = null;
					if(mods[aname][ix] instanceof String || AjxUtil.isString(mods[aname][ix])) {
						if(AjxUtil.isEmpty(mods[aname][ix])) {
							continue;
						} else {
							nonemptyElements = true;
						}
						var attr = soapDoc.set("a", mods[aname][ix].toString());
					} else if(mods[aname][ix] instanceof Object) {
						var attr = soapDoc.set("a", mods[aname][ix].toString());
						nonemptyElements = true;
					} else {
						var attr = soapDoc.set("a", mods[aname][ix]);
						nonemptyElements = true;
					}
					
					if(attr)
						attr.setAttribute("n", aname);
				}
				if(!nonemptyElements) {
					var attr = soapDoc.set("a", "");
					attr.setAttribute("n", aname);
				}
			} else {
				var attr = soapDoc.set("a", "");
				attr.setAttribute("n", aname);
			}
		} else {
			var attr = soapDoc.set("a", mods[aname]);
			attr.setAttribute("n", aname);
		}
	}
	if(!hasSomething) {
		return;
	}
	//var modifyAccCommand = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_MODIFY_RESOURCE
	}
	resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.ModifyCalendarResourceResponse;
	this.initFromJS(resp.calresource[0]);
	this[ZaResource.A2_confirmPassword] = null;
	//invalidate the original tooltip
	this._toolTip = null ;
	return;
}
ZaItem.modifyMethods["ZaResource"].push(ZaResource.modifyMethod);

ZaResource.prototype.remove = 
function(callback) {
	var soapDoc = AjxSoapDoc.create("DeleteCalendarResourceRequest", ZaZimbraAdmin.URN, null);
	soapDoc.set("id", this.id);
	this.deleteCommand = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;
	params.noAuthToken = true;	
	if(callback) {
		params.asyncMode = true;
		params.callback = callback;
	}
	this.deleteCommand.invoke(params);		
}

ZaResource.prototype.initFromJS = 
function (resource) {
	if(!resource)
		return;
	
	//ensure current attrs are empty. Otherwise, the old attributes will be included also	
	this.attrs = new Object();			
	this.name = resource.name;
	this.id = resource.id;
	this.attrs[ZaResource.A_zimbraPrefCalendarForwardInvitesTo] = new Array();
	var len = (resource.a ? resource.a.length : 0);
	for(var ix = 0; ix < len; ix++) {
		if(!this.attrs[[resource.a[ix].n]]) {
			this.attrs[[resource.a[ix].n]] = resource.a[ix]._content;
		} else {
			if(!(this.attrs[[resource.a[ix].n]] instanceof Array)) {
				this.attrs[[resource.a[ix].n]] = [this.attrs[[resource.a[ix].n]]];
			} 
			this.attrs[[resource.a[ix].n]].push(resource.a[ix]._content);
		}
	}
		
	this.setSchedulePolicyFromLdapAttrs();	
	if(!this.attrs[ZaAccount.A_description])
		this.attrs[ZaAccount.A_description] = [];
		
	if(!(this.attrs[ZaAccount.A_description] instanceof Array)) {
		this.attrs[ZaAccount.A_description] = [this.attrs[ZaAccount.A_description]];
	}	
	
}

//set the ldap attributes according to the schedule policy values
//the ldap attrs are "zimbraCalResAutoAcceptDecline" & "zimbraCalResAutoDeclineIfBusy";

ZaResource.prototype.setSchedulePolicyFromLdapAttrs =
function () {
	if (this.attrs[ZaResource.A_zimbraCalResAutoAcceptDecline] == "TRUE" && this.attrs[ZaResource.A_zimbraCalResAutoDeclineIfBusy] == "TRUE"){
		this[ZaResource.A2_schedulePolicy] = ZaResource.SCHEDULE_POLICY_TT ;
	} else if (this.attrs[ZaResource.A_zimbraCalResAutoAcceptDecline] == "TRUE" && this.attrs[ZaResource.A_zimbraCalResAutoDeclineIfBusy] == "FALSE") {
		this[ZaResource.A2_schedulePolicy] = ZaResource.SCHEDULE_POLICY_TF;
	} else if (this.attrs[ZaResource.A_zimbraCalResAutoAcceptDecline] == "FALSE" && this.attrs[ZaResource.A_zimbraCalResAutoDeclineIfBusy] == "FALSE") {
		this[ZaResource.A2_schedulePolicy] = ZaResource.SCHEDULE_POLICY_FF;
	}  else if (this.attrs[ZaResource.A_zimbraCalResAutoAcceptDecline] == "FALSE" && this.attrs[ZaResource.A_zimbraCalResAutoDeclineIfBusy] == "TRUE") {
		this[ZaResource.A2_schedulePolicy] = ZaResource.SCHEDULE_POLICY_FT;
	}
	
}


ZaResource.prototype.setLdapAttrsFromSchedulePolicy =
function (){
	if (this[ZaResource.A2_schedulePolicy] == ZaResource.SCHEDULE_POLICY_TT ){
		this.attrs[ZaResource.A_zimbraCalResAutoAcceptDecline] = "TRUE";
		this.attrs[ZaResource.A_zimbraCalResAutoDeclineIfBusy] = "TRUE";		
	} else if (this[ZaResource.A2_schedulePolicy] == ZaResource.SCHEDULE_POLICY_TF){
		this.attrs[ZaResource.A_zimbraCalResAutoAcceptDecline] = "TRUE";
		this.attrs[ZaResource.A_zimbraCalResAutoDeclineIfBusy] = "FALSE";
	} else if (this[ZaResource.A2_schedulePolicy] == ZaResource.SCHEDULE_POLICY_FT) {
		this.attrs[ZaResource.A_zimbraCalResAutoAcceptDecline] = "FALSE";
		this.attrs[ZaResource.A_zimbraCalResAutoDeclineIfBusy] = "TRUE";		
	} else if (this[ZaResource.A2_schedulePolicy] == ZaResource.SCHEDULE_POLICY_FF) {
		this.attrs[ZaResource.A_zimbraCalResAutoAcceptDecline] = "FALSE";
		this.attrs[ZaResource.A_zimbraCalResAutoDeclineIfBusy] = "FALSE";		
	}
};

/**
* Returns HTML for a tool tip for this resource.
*/
ZaResource.prototype.getToolTip =
function() {
	// update/null if modified
	if (!this._toolTip) {
		var html = new Array(20);
		var idx = 0;
		html[idx++] = "<table cellpadding='0' cellspacing='0' border='0'>";
		html[idx++] = "<tr valign='center'><td colspan='2' align='left'>";
		html[idx++] = "<div style='border-bottom: 1px solid black; white-space:nowrap; overflow:hidden;width:350' >";
		html[idx++] = "<table cellpadding='0' cellspacing='0' border='0' style='width:100%;'>";
		html[idx++] = "<tr valign='center'>";
		html[idx++] = "<td><b>" + AjxStringUtil.htmlEncode(this.name) + "</b></td>";
		html[idx++] = "<td align='right'>";
		//display the image
		if (this.attrs[ZaResource.A_zimbraCalResType] == ZaResource.RESOURCE_TYPE_LOCATION){
			html[idx++] = AjxImg.getImageHtml("Location");	
		}else {//equipment or other resource types
			html[idx++] = AjxImg.getImageHtml("Resource");	
		}	
		html[idx++] = "</td>";
		html[idx++] = "</table></div></td></tr>";
		html[idx++] = "<tr></tr>";
		idx = this._addRow(ZaMsg.NAD_ResourceStatus, 
						ZaResource.getAccountStatusLabel(this.attrs[ZaResource.A_accountStatus]), html, idx);
		
		idx = this._addRow(ZaMsg.NAD_ResourceName, this.attrs[ZaResource.A_displayname], html, idx);
		idx = this._addRow(ZaMsg.NAD_ResType, 
						ZaResource.getResTypeLabel(this.attrs[ZaResource.A_zimbraCalResType]), html, idx);
		if(this.getAttrs && this.getAttrs[ZaResource.A_mailHost]) {
			idx = this._addRow(ZaMsg.NAD_MailServer, this.attrs[ZaResource.A_mailHost], html, idx);
		}
		idx = this._addAttrRow(ZaItem.A_zimbraId, html, idx);
		html[idx++] = "</table>";
		this._toolTip = html.join("");
	}
	return this._toolTip;
}

ZaResource.loadMethod = 
function(by, val, withCos) {
	var soapDoc = AjxSoapDoc.create("GetCalendarResourceRequest", ZaZimbraAdmin.URN, null);
	if(withCos) {
		soapDoc.getMethod().setAttribute("applyCos", "1");	
	} else {
		soapDoc.getMethod().setAttribute("applyCos", "0");		
	}
	if(!this.getAttrs.all && !AjxUtil.isEmpty(this.attrsToGet)) {
		soapDoc.setMethodAttribute("attrs", this.attrsToGet.join(","));
	}	
	var elBy = soapDoc.set("calresource", val);
	elBy.setAttribute("by", by);

	//var getAccCommand = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_GET_RESOURCE
	}	
	var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.GetCalendarResourceResponse;
	this.attrs = new Object();
	this.initFromJS(resp.calresource[0]);
	
	//if(this.attrs[ZaResource.A_locationDisplayName] == null || this.getAutoLocationName() == this.attrs[ZaResource.A_locationDisplayName]) {
    var locationDisplayName = this.attrs[ZaResource.A_locationDisplayName]
    if (!locationDisplayName) {
        locationDisplayName = "";
    }
    if(this.getAutoLocationName() == locationDisplayName) {
		this[ZaResource.A2_autoLocationName] = "TRUE";
	} else {
		this[ZaResource.A2_autoLocationName] = "FALSE";
	}
	this[ZaResource.A2_confirmPassword] = null;	
}
ZaItem.loadMethods["ZaResource"].push(ZaResource.loadMethod);

ZaResource.loadInfoMethod = 
function(by, val, withCos) {

	if(!ZaItem.hasRight(ZaResource.GET_CALRES_INFO_RIGHT,this))
		return;
	
	var soapDoc = AjxSoapDoc.create("GetAccountInfoRequest", ZaZimbraAdmin.URN, null);

	var elBy = soapDoc.set("account", val);
	elBy.setAttribute("by", by);

	//var getAccCommand = new ZmCsfeCommand();
	var params = new Object();         i
	params.soapDoc = soapDoc;	
	var reqMgrParams = {
		controller: ZaApp.getInstance().getCurrentController()
	}
	var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.GetAccountInfoResponse;
	if(resp[ZaAccount.A2_publicMailURL] && resp[ZaAccount.A2_publicMailURL][0])
		this[ZaAccount.A2_publicMailURL] = resp[ZaAccount.A2_publicMailURL][0]._content;
	
	if(resp[ZaAccount.A2_adminSoapURL] && resp[ZaAccount.A2_adminSoapURL][0])
		this[ZaAccount.A2_adminSoapURL] = resp[ZaAccount.A2_adminSoapURL][0]._content;
	
	if(resp[ZaAccount.A2_soapURL] && resp[ZaAccount.A2_soapURL][0])
		this[ZaAccount.A2_soapURL] = resp[ZaAccount.A2_soapURL][0]._content;
}

ZaItem.loadMethods["ZaResource"].push(ZaSignature.GetSignatures);
ZaItem.loadMethods["ZaResource"].push(ZaResource.loadInfoMethod);

ZaResource.prototype.getAutoLocationName = 
function (){
	var autoLocName = "";
	if(this.attrs[ZaResource.A_zimbraCalResSite])
		autoLocName += ZaMsg.NAD_Site + " " + this.attrs[ZaResource.A_zimbraCalResSite] ;
	
	if(this.attrs[ZaResource.A_zimbraCalResBuilding])
		autoLocName += ", " + ZaMsg.NAD_Building + " " + this.attrs[ZaResource.A_zimbraCalResBuilding];
	
	if(this.attrs[ZaResource.A_zimbraCalResFloor])
		autoLocName += ", " + ZaMsg.NAD_Floor + " " + this.attrs[ZaResource.A_zimbraCalResFloor];
	
	if(this.attrs[ZaResource.A_zimbraCalResRoom])
		autoLocName += ", " + ZaMsg.NAD_Room + " " + this.attrs[ZaResource.A_zimbraCalResRoom];
	
	//remove the last ',' or spaces
	var regEx = /^\,\s*/;
	autoLocName = autoLocName.replace(regEx, "");
		
	return autoLocName ;
}

ZaResource.prototype.refresh = 
function(withCos) {
	this.load("id", this.id, withCos);	
}

/**
* public rename: sends RenameCalendarResourceRequest soap request
**/
ZaResource.prototype.rename = 
function (newName) {
	var soapDoc = AjxSoapDoc.create("RenameCalendarResourceRequest", ZaZimbraAdmin.URN, null);
	soapDoc.set("id", this.id);
	soapDoc.set("newName", newName);	
	//var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_RENAME_RESOURCE
	}
	ZaRequestMgr.invoke(params, reqMgrParams);
}

/**
* ZaResource.myXModel - XModel for XForms
**/
ZaResource.myXModel = { 
	items: [
		{id:ZaResource.A_name, type:_STRING_, ref:"name", required:true,
			constraints: {type:"method", value:
			   function (value, form, formItem, instance) {				   
				   if (value){
					  	if(AjxUtil.isValidEmailNonReg(value)) {
						   return value;
					   } else {
						   throw ZaMsg.ErrorInvalidEmailAddress;
					   }
				   }
			   }
			}
		},
		{id:ZaItem.A_zimbraId, type:_STRING_, ref:"attrs/" + ZaItem.A_zimbraId},
		{id:ZaItem.A_zimbraCreateTimestamp, ref:"attrs/" + ZaItem.A_zimbraCreateTimestamp}, 	
		{id:ZaResource.A_mail, type:_STRING_, ref:"attrs/"+ZaResource.A_mail,
			constraints: {type:"method", value:
			   function (value, form, formItem, instance) {				   
				   if (value){
					  	if(AjxUtil.isValidEmailNonReg(value)) {
						   return value;
					   } else {
						   throw ZaMsg.ErrorInvalidEmailAddress;
					   }
				   }
			   }
			}
		}, //email address
		{id:ZaResource.A2_schedulePolicy, type:_STRING_, ref:ZaResource.A2_schedulePolicy},
		{id:ZaResource.A_password, type:_STRING_, ref:"attrs/"+ZaAccount.A_password},
		{id:ZaResource.A2_confirmPassword, type:_STRING_},						 		
		//resource properties
		{id:ZaResource.A_displayname, type:_STRING_, ref:"attrs/"+ZaResource.A_displayname, required:true}, //resource name
		{id:ZaResource.A_zimbraCalResType, type:_STRING_, ref:"attrs/"+ZaResource.A_zimbraCalResType},//type
		{id:ZaResource.A_uid, type:_STRING_, ref:"attrs/"+ZaResource.A_uid}, //email address field of the account name
		{id:ZaResource.A_mailHost, type:_STRING_, ref:"attrs/"+ZaResource.A_mailHost}, //domain dropdown of the account name
		{id:ZaResource.A_COSId, type:_STRING_, ref:"attrs/" + ZaResource.A_COSId},
		{id:ZaResource.A_accountStatus, type:_STRING_, ref:"attrs/"+ZaResource.A_accountStatus},		
		{id:ZaResource.A_zimbraCalResAutoDeclineIfBusy, type:_STRING_, ref:"attrs/"+ZaResource.A_zimbraCalResAutoDeclineIfBusy}, //scheduling pocily
		{id:ZaResource.A_zimbraCalResAlwaysFree, type:_STRING_, ref:"attrs/"+ZaResource.A_zimbraCalResAlwaysFree}, //scheduling pocily
		{id:ZaResource.A_zimbraCalResAutoDeclineRecurring, type:_STRING_, ref:"attrs/"+ZaResource.A_zimbraCalResAutoDeclineRecurring},
		{id:ZaResource.A_zimbraCalResMaxNumConflictsAllowed, type:_NUMBER_, ref:"attrs/"+ZaResource.A_zimbraCalResMaxNumConflictsAllowed,defaultValue:0,minInclusive:0},
		{id:ZaResource.A_zimbraCalResMaxPercentConflictsAllowed, type:_NUMBER_, ref:"attrs/"+ZaResource.A_zimbraCalResMaxPercentConflictsAllowed,minInclusive:0,maxInclusive:100,defaultValue:0},
//		{id:ZaResource.A_description, type:_STRING_, ref:"attrs/"+ZaResource.A_description},
		ZaItem.descriptionModelItem ,
          {id:ZaResource.A_notes, type:_STRING_, ref:"attrs/"+ZaResource.A_notes},

        //Signature
        {id:ZaResource.A_zimbraPrefCalendarAutoAcceptSignatureId, type:_STRING_, ref:"attrs/"+ZaResource.A_zimbraPrefCalendarAutoAcceptSignatureId},
        {id:ZaResource.A_zimbraPrefCalendarAutoDenySignatureId, type:_STRING_, ref:"attrs/"+ZaResource.A_zimbraPrefCalendarAutoDenySignatureId},
        {id:ZaResource.A_zimbraPrefCalendarAutoDeclineSignatureId, type:_STRING_, ref:"attrs/"+ZaResource.A_zimbraPrefCalendarAutoDeclineSignatureId},
		//Resource Location
		{id:ZaResource.A_zimbraCalResSite, type:_STRING_, ref:"attrs/"+ZaResource.A_zimbraCalResSite},
		{id:ZaResource.A_zimbraCalResBuilding, type:_STRING_, ref:"attrs/"+ZaResource.A_zimbraCalResBuilding},
		{id:ZaResource.A_zimbraCalResFloor, type:_STRING_, ref:"attrs/"+ZaResource.A_zimbraCalResFloor},
		{id:ZaResource.A_zimbraCalResRoom, type:_STRING_, ref:"attrs/"+ZaResource.A_zimbraCalResRoom},
		{id:ZaResource.A_zimbraCalResCapacity, type:_NUMBER_, ref:"attrs/"+ZaResource.A_zimbraCalResCapacity},		
		{id:ZaResource.A_locationDisplayName, type:_STRING_, ref:"attrs/"+ZaResource.A_locationDisplayName},
		{id:ZaResource.A_street, type:_STRING_, ref:"attrs/"+ZaResource.A_street},	
		{id:ZaResource.A_city, type:_STRING_, ref:"attrs/"+ZaResource.A_city},		
		{id:ZaResource.A_state, type:_STRING_, ref:"attrs/"+ZaResource.A_state},		
		{id:ZaResource.A_country, type:_STRING_, ref:"attrs/"+ZaResource.A_country},
		{id:ZaResource.A_zip, type:_STRING_, ref:"attrs/"+ZaResource.A_zip},						
		
		//Resource 	Contact					
		{id:ZaResource.A_zimbraCalResContactName, type:_STRING_, ref:"attrs/"+ZaResource.A_zimbraCalResContactName},
		{id:ZaResource.A_zimbraCalResContactEmail, type:_STRING_, ref:"attrs/"+ZaResource.A_zimbraCalResContactEmail,
			constraints: {type:"method", value:
			   function (value, form, formItem, instance) {				   
				   if (value){
					  	if(AjxUtil.isValidEmailNonReg(value)) {
						   return value;
					   } else {
						   throw ZaMsg.ErrorInvalidEmailAddress;
					   }
				   }
			   }
			}		
		},
		{id:ZaResource.A_zimbraCalResContactPhone, type:_STRING_, ref:"attrs/"+ZaResource.A_zimbraCalResContactPhone}, 
		{id:ZaResource.A_contactInfoAutoComplete, type:_LIST_, ref:"attrs/"+ZaResource.A_contactInfoAutoComplete},
		{id:ZaResource.A_zimbraPrefCalendarForwardInvitesTo, type:_LIST_, ref:"attrs/"+ZaResource.A_zimbraPrefCalendarForwardInvitesTo, listItem:{type:_EMAIL_ADDRESS_}},
		{id:ZaResource.A2_autodisplayname, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
		{id:ZaResource.A2_autoMailServer, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
		{id:ZaResource.A2_autoCos, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
		{id:ZaResource.A2_autoLocationName, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
		{id:ZaAccount.A2_calFwdAddr_selection_cache, type:_LIST_},
        {id:ZaResource.A2_signatureList, type:_LIST_},
        {id:ZaResource.A2_signature_selection_cache, type:_LIST_}
	]
};

ZaItem._ATTR[ZaResource.A_displayname] = ZaMsg.attrDesc_accountName;
ZaItem._ATTR[ZaResource.A_description] = ZaMsg.attrDesc_description;
ZaItem._ATTR[ZaResource.A_accountStatus] = ZaMsg.attrDesc_accountStatus;
ZaItem._ATTR[ZaResource.A_mailHost] =  ZabMsg.attrDesc_mailHost;
ZaItem._ATTR[ZaResource.A_notes] = ZaMsg.attrDesc_notes;

ZaResource.getAccountStatusLabel = ZaAccount.getAccountStatusMsg ;

ZaResource.getResTypeLabel = 
function(val) {
	var desc = ZaResource._RESOURCE_TYPE[val];
	return (desc == null) ? val : desc;
}

ZaResource._RESOURCE_TYPE = new Object();
ZaResource._RESOURCE_TYPE [ ZaResource.RESOURCE_TYPE_LOCATION] = ZaMsg.resType_location;
ZaResource._RESOURCE_TYPE [ ZaResource.RESOURCE_TYPE_EQUIPMENT] = ZaMsg.resType_equipment;

ZaResource.initMethod = function () {
	this.attrs = new Object();
	this.id = "";
	this.name="";
	//this.attrs[ZaResource.A_zimbraMailAlias] = new Array();
}
ZaItem.initMethods["ZaResource"].push(ZaResource.initMethod);

ZaResource.setAutoLocationName = 
function (elementValue,instanceValue, event){
	var curInstance = this.getInstance() ;
	this.getForm().itemChanged(this, elementValue, event);	
	if(curInstance[ZaResource.A2_autoLocationName]=="TRUE") {
		curInstance.attrs [ZaResource.A_locationDisplayName] = ZaResource.prototype.getAutoLocationName.call (curInstance);
		this.getForm().refresh();
	}		
}

ZaResource.isLocation = function () {
	return (this.getInstanceValue(ZaResource.A_zimbraCalResType).toLowerCase() ==  ZaResource.RESOURCE_TYPE_LOCATION.toLowerCase());
}

ZaResource.isAutoDeclineEnabled = function () {
	return (this.getInstanceValue(ZaResource.A2_schedulePolicy) == ZaResource.SCHEDULE_POLICY_TT ||
	 this.getInstanceValue(ZaResource.A2_schedulePolicy) == ZaResource.SCHEDULE_POLICY_FT);
}

}
if (AjxPackage.define("zimbraAdmin.resource.model.ZaContactList")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
 
 /**
  * This is the list containing the auto complete match contact lists
  * @author Charles Cao
  */
ZaContactList = function() {
	this._list = [];	//this is the array holds all the match objects

}

ZaContactList.matchValue = ZaAccount.A_displayname; //the property name of the match ZaContactList
ZaContactList.matchText =  "matchListFieldText"; //the property name of the match text of ZaContactList

ZaContactList.prototype.getContactList =
function (str, callback){
	try {
		var params = {};
		var busyId = Dwt.getNextId ();
		params.attrs = [ZaAccount.A_displayname, ZaAccount.A_mail, ZaAccount.A_telephoneNumber].join();
		params.types = ZaSearch.ACCOUNTS ;
		params.sortBy = ZaAccount.A_displayname;
		params.query = ZaSearch.getSearchByDisplayNameQuery(str) ;
		params.applyCos = "0";
		myCallback = new AjxCallback(this, this.getDataCallback, {callback:callback,busyId:busyId});
		params.callback = myCallback;
		params.controller = ZaApp.getInstance().getCurrentController () ;
		params.showBusy = true;
		params.busyMsg = ZaMsg.BUSY_SEARCHING;
		params.skipCallbackIfCancelled = false; 
		params.busyId = busyId;		
		ZaSearch.searchDirectory(params);
	}	catch (ex){
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaContactList.prototype.getContactList");	
	}
}

/*
ZaContactList.prototype.autocompleteMatch = 
function (str) {
	var lists = new Array () ;
	var j = 0;
	for (var i=0; i < this._list.length; i++ ) {
		lists[j] = { 	contact: this._list[i], 
						text: this._list[i].name  + " <" + this._list[i].email + ">", 
						value: this._list[i].name 
					};
		j++ ;
	}

	return lists ;

} */

ZaContactList.prototype._autocompleteCallback =
function(match, inputFieldXFormItem) {
	var xform = inputFieldXFormItem.getForm();
	var contact_email = xform.getItemsById(ZaResource.A_zimbraCalResContactEmail) [0];
	var contact_phone = xform.getItemsById(ZaResource.A_zimbraCalResContactPhone) [0];
	contact_email.setInstanceValue (match["contact"][ZaAccount.A_name]);
	contact_phone.setInstanceValue (match["contact"][ZaAccount.A_telephoneNumber]);
	xform.refresh();
}; 

ZaContactList.prototype.getDataCallback = 
function(params, resp){
	try {
		var callback = params.callback;
		if(params.busyId)
			ZaApp.getInstance().getAppCtxt().getShell().setBusy(false, params.busyId);
			
		if(!resp) {
			throw(new AjxException(ZaMsg.ERROR_EMPTY_RESPONSE_ARG, AjxException.UNKNOWN, "ZaContactList.prototype.getDataCallback"));
		}
		if(resp.isException()) {
			//throw(resp.getException());
			ZaSearch.handleTooManyResultsException(resp.getException(), "ZaContactList.prototype.getDataCallback");
		} else {
			ZaSearch.TOO_MANY_RESULTS_FLAG = false ;
			var response = resp.getResponse().Body.SearchDirectoryResponse;
			var list = new ZaItemList();	
			list.loadFromJS(response);
			var arr = list.getArray();
			var data = [];
			for (var i=0; i<arr.length; i++) {
				data[i] = { contact: {}};
				data[i]["contact"][ZaAccount.A_displayname] = arr[i].attrs[ZaAccount.A_displayname]; 
				data[i]["contact"][ZaAccount.A_name ] = arr[i][ZaAccount.A_name]; 			
				data[i]["contact"][ZaAccount.A_telephoneNumber ] = arr[i].attrs[ZaAccount.A_telephoneNumber]; 						
				data[i][ZaContactList.matchText] = data[i]["contact"][ZaAccount.A_displayname] + "< " + data[i]["contact"][ZaAccount.A_name ] + ">";
				data[i][ZaContactList.matchValue] = data[i]["contact"][ZaAccount.A_displayname] ;
 ;
			} 
			/**
			 * data is an array contains all the matching items.
			 * Each matching item has the following attributes:
			 * 1) objectReference name: here it is called "contact" which represents a contact object
			 * 2) matchTextReference: (required) Here it is called ZaContactList.matchText. 
			 * 							Its value is used to be displayed in the match list item
			 * 3) matchValueReference: (required) Here it is called ZaContactList.matchValue. 
			 * 							Its value is used to do the comparison
			 */
			callback.run(data);			
		}
	} catch (ex) {
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaContactList.prototype.getDataCallback");	
	}		
	
};

ZaContactList.prototype.isUniqueValue =
function(str){
	
}

ZaContactList.prototype.getList = function () {
	return this._list;
}




}
if (AjxPackage.define("zimbraAdmin.accounts.model.ZaAlias")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

ZaAlias = function() {
	ZaItem.call(this);
	this.attrs = new Object();
	this.id = "";
	this.name="";
	this.type=ZaItem.ALIAS;
}

ZaAlias.prototype = new ZaItem;
ZaAlias.prototype.constructor = ZaAlias;
ZaAlias.A_AliasTargetId = "zimbraAliasTargetId";
ZaAlias.A_targetAccount = "targetName";
ZaAlias.A_targetType = "type";
ZaAlias.A_index = "index";
ZaAlias.A_uid = "uid";

ZaAlias.TARGET_TYPE_DL = ZaItem.DL ;
ZaAlias.TARGET_TYPE_ACCOUNT = ZaItem.ACCOUNT ;
ZaAlias.TARGET_TYPE_RESOURCE = ZaItem.RESOURCE;

ZaItem._ATTR[ZaAlias.A_targetAccount] = ZaMsg.attrDesc_aliasFor;

ZaAlias.searchAttributes = AjxBuffer.concat(ZaAlias.A_AliasTargetId,",",
											   ZaItem.A_zimbraId,  "," , 
											   ZaAlias.A_targetAccount, "," , 
											   ZaAlias.A_uid,"," , 
											   ZaAlias.A_targetType, "," , 
											   ZaAccount.A_description);
											   
ZaAlias.prototype.remove = 
function(callback) {
	var soapCmd  ;
	
	switch(this.attrs[ZaAlias.A_targetType]) {
		case ZaAlias.TARGET_TYPE_ACCOUNT: soapCmd = "RemoveAccountAliasRequest" ; break ;
		case ZaAlias.TARGET_TYPE_DL  : soapCmd = "RemoveDistributionListAliasRequest" ; break ;
		case ZaAlias.TARGET_TYPE_RESOURCE : soapCmd = "RemoveAccountAliasRequest" ; break ;
		default: throw new Error("Can't add alias for account type: " + this.attrs[ZaAlias.A_targetType]) ;				
	}
	
	var soapDoc = AjxSoapDoc.create(soapCmd, ZaZimbraAdmin.URN, null);
	
	soapDoc.set("id", this.attrs[ZaAlias.A_AliasTargetId]);
	soapDoc.set("alias", this.name);
	this.deleteCommand = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;
	params.noAuthToken = true;	
	if(callback) {
		params.asyncMode = true;
		params.callback = callback;
	}
	this.deleteCommand.invoke(params);		
}

/**
* Returns HTML for a tool tip for this account.
*/
ZaAlias.prototype.getToolTip =
function() {
	// update/null if modified
	if (!this._toolTip) {
		var html = new Array(20);
		var idx = 0;
		html[idx++] = "<table cellpadding='0' cellspacing='0' border='0'>";
		html[idx++] = "<tr valign='center'><td colspan='2' align='left'>";
		html[idx++] = "<div style='border-bottom: 1px solid black; white-space:nowrap; overflow:hidden;width:350' >";
		html[idx++] = "<table cellpadding='0' cellspacing='0' border='0' style='width:100%;'>";
		html[idx++] = "<tr valign='center'>";
		html[idx++] = "<td><b>" + AjxStringUtil.htmlEncode(this.name) + "</b></td>";
		html[idx++] = "<td align='right'>";
		html[idx++] = AjxImg.getImageHtml("AccountAlias");		
		html[idx++] = "</td>";
		html[idx++] = "</table></div></td></tr>";
		html[idx++] = "<tr></tr>";
		//get my account
//		var account = ZaApp.getInstance().getAccountList().getItemById(this.attrs[ZaAlias.A_AliasTargetId]);
		var target = this.getAliasTargetObj();
		if(target && (this.attrs[ZaAlias.A_targetType] == ZaAlias.TARGET_TYPE_ACCOUNT)) {
			idx = this._addRow(ZaItem._attrDesc(ZaAlias.A_targetAccount), 
						target.attrs[ZaAccount.A_displayname], html, idx);
		
			idx = this._addRow(ZaMsg.NAD_AccountStatus, 
						ZaAccount._accountStatus(target.attrs[ZaAccount.A_accountStatus]), html, idx);		
			
			if(target.getAttrs[ZaAccount.A_mailHost]) {
				idx = this._addRow(ZaMsg.NAD_MailServer, 
				target.attrs[ZaAccount.A_mailHost], html, idx);
			}			
		}else if (target && (this.attrs[ZaAlias.A_targetType] == ZaAlias.TARGET_TYPE_DL)){
			idx = this._addRow(ZaItem._attrDesc(ZaAlias.A_targetAccount), 
						target.attrs[ZaAccount.A_displayname], html, idx);
		
			idx = this._addRow(ZaMsg.NAD_AccountStatus, 
						ZaDistributionList.getDLStatus(target.attrs[ZaDistributionList.A_mailStatus]), html, idx);		
			
		}else if (target && (this.attrs[ZaAlias.A_targetType] == ZaAlias.TARGET_TYPE_RESOURCE)){
			idx = this._addRow(ZaItem._attrDesc(ZaAlias.A_targetAccount),
                                                target.attrs[ZaAccount.A_displayname], html, idx);

			idx = this._addRow(ZaMsg.NAD_AccountStatus,
                                                ZaResource.getAccountStatusLabel(target.attrs[ZaResource.A_accountStatus]), html, idx);
			if(target.getAttrs && target.getAttrs[ZaResource.A_mailHost]) {
				idx = this._addRow(ZaMsg.NAD_MailServer, target.attrs[ZaResource.A_mailHost], html, idx);
			}	
		}
		idx = this._addAttrRow(ZaItem.A_zimbraId, html, idx);
		html[idx++] = "</table>";
		this._toolTip = html.join("");
	}
	return this._toolTip;
}

ZaAlias.myXModel = { 
	items: [
	    {id:"getAttrs",type:_LIST_},
    	{id:"setAttrs",type:_LIST_},
    	{id:"rights",type:_LIST_},
		{id:ZaAccount.A_name, type:_STRING_, ref:"name", 
			constraints: {type:"method", value:
			   function (value, form, formItem, instance) {				   
				   if (value){
					  	if(AjxUtil.isValidEmailNonReg(value)) {
						   return value;
					   } else {
						   throw ZaMsg.ErrorInvalidEmailAddress;
					   }
				   }
			   }
			}
		},
		{id:ZaAlias.A_AliasTargetId, type:_STRING_, ref:ZaAlias.A_AliasTargetId},
		{id:ZaAlias.A_targetType, type:_STRING_, ref:ZaAlias.A_targetType},
		{id:ZaAlias.A_targetAccount, ref:ZaAlias.A_targetAccount},
		{id:ZaAlias.A_index, type:_NUMBER_, ref:ZaAlias.A_index}
	]
}

ZaAlias.prototype.addAlias = 
function (form) {
	
	var instance = form.getInstance() ;
	var newAlias = instance [ZaAccount.A_name] ;
	var targetName = instance [ZaAlias.A_targetAccount] ;
	
	try {
		var targetObj ;
		var targetType = ZaAlias.TARGET_TYPE_ACCOUNT ;
		
		try {
			targetObj = ZaAlias.getTargetByName( targetName, targetType) ;
		}catch (ex) {
			if (ex.code == ZmCsfeException.ACCT_NO_SUCH_ACCOUNT) {
				//the target is Distribution List
				targetType =  ZaAlias.TARGET_TYPE_DL ;
				targetObj = ZaAlias.getTargetByName(targetName, targetType) ;
			}else{
				throw ex ;
			}
		}
		
		targetObj.addAlias ( newAlias ) ;
        this.targetObj = targetObj;
		//TODO Need to refresh the alias list view.
		ZaApp.getInstance().getAccountViewController(true).fireCreationEvent(this);
		form.parent.popdown();
        ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.AliasCreated,[newAlias]));
	} catch (ex) {
		if(ex.code == ZmCsfeException.ACCT_EXISTS ) {
			ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.WARNING_ALIAS_EXISTS, [newAlias]) 
					+ "<BR />" + ex.msg );
		} else if (ex.code == ZmCsfeException.NO_SUCH_DISTRIBUTION_LIST || ex.code == ZmCsfeException.ACCT_NO_SUCH_ACCOUNT){
			ZaApp.getInstance().getCurrentController().popupErrorDialog(
				AjxMessageFormat.format(ZaMsg.WARNING_ALIASES_TARGET_NON_EXIST,[targetName]));
		}else{
			//if failed for another reason - jump out
			ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaAlias.prototype.addAlias", null, false);
		}
	}
}

/**
 * Use this method when creating alias using the popup dialog
 * val: target account/dl name
 * targetType: account/dl
 */
ZaAlias.getTargetByName =
function (val, targetType) {
	var soapDoc ;
	var elBy ;
	
	if (targetType == ZaAlias.TARGET_TYPE_DL) {
		soapDoc = AjxSoapDoc.create("GetDistributionListRequest", ZaZimbraAdmin.URN, null);
		elBy = soapDoc.set("dl", val);
	}else if (targetType == ZaAlias.TARGET_TYPE_ACCOUNT) {
		soapDoc = AjxSoapDoc.create("GetAccountRequest", ZaZimbraAdmin.URN, null);
		elBy = soapDoc.set("account", val);
	}else {
		throw new Error ("Alias type " + targetType + " is not valid.") ;
	}
	
	soapDoc.getMethod().setAttribute("applyCos", "0");		
	elBy.setAttribute("by", "name");

	//var getAccCommand = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;	
	var reqMgrParams = {
		controller: ZaApp.getInstance().getCurrentController()
	}
	var respBody = ZaRequestMgr.invoke(params, reqMgrParams).Body ;
	var resp ;
	var targetObj ; 
	
	if (targetType == ZaAlias.TARGET_TYPE_DL) {
		resp = respBody.GetDistributionListResponse.dl[0] ;
		targetObj = new ZaDistributionList() ;
	}else if (targetType == ZaAlias.TARGET_TYPE_ACCOUNT) {
		resp = respBody.GetAccountResponse.account[0];
		targetObj = new ZaAccount() ;
	}

	targetObj.attrs = new Object();
	targetObj.initFromJS(resp);
	
	return targetObj ;
}

/*
 * use this method when the alias obj exists
 */
ZaAlias.prototype.getAliasTargetObj =
function () {
	var targetObj;
	var targetType = this.attrs[ZaAlias.A_targetType] ;
	var targetName = this.attrs[ZaAlias.A_targetAccount] ;
	var targetId = this.attrs[ZaAlias.A_AliasTargetId] ;
	
	if (targetType == ZaAlias.TARGET_TYPE_DL) {
		targetObj = new ZaDistributionList(targetId, targetName) ;
	}else if (targetType == ZaAlias.TARGET_TYPE_ACCOUNT) {
		targetObj = new ZaAccount() ;
	}else if (targetType == ZaAlias.TARGET_TYPE_RESOURCE) {
		targetObj = new ZaResource();
	}else {
		throw new Error ("Alias type " + targetType + " is not valid.") ;
	}

	targetObj.load("name", targetName, false, true);
	
	return targetObj ;
}

ZaAlias.prototype.initEffectiveRightsFromJS = function(resp) {
	if(!this.targetObj) {
		var targetType = this.attrs[ZaAlias.A_targetType] ;
		var targetName = this.attrs[ZaAlias.A_targetAccount] ;
		var targetId = this.attrs[ZaAlias.A_AliasTargetId] ;

		if (targetType == ZaAlias.TARGET_TYPE_DL) {
			this.targetObj = new ZaDistributionList(targetId, targetName) ;
		} else if (targetType == ZaAlias.TARGET_TYPE_ACCOUNT) {
			this.targetObj = new ZaAccount();
			this.targetObj.id = targetId;
			this.targetObj.name = targetName;
			if(!this.targetObj.attrs)
				this.targetObj.attrs = {};
			this.targetObj.attrs[ZaItem.A_cn] = targetName;
			this.targetObj.attrs[ZaItem.A_zimbraId] = targetId;
		}
	}
	this.targetObj.initEffectiveRightsFromJS(resp);
}
}
if (AjxPackage.define("zimbraAdmin.accounts.model.ZaForwardingAddress")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

ZaForwardingAddress = function() {
	ZaItem.call(this, ZaEvent.S_ACCOUNT);
	this.attrs = new Object();
	this.id = "";
	this.name="";
}

ZaForwardingAddress.prototype = new ZaItem;
ZaForwardingAddress.prototype.constructor = ZaForwardingAddress;
}
if (AjxPackage.define("zimbraAdmin.accounts.model.ZaFp")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

ZaFp = function() {
	ZaItem.call(this, ZaEvent.S_ACCOUNT);
	this.attrs = new Object();
	this.name="";
    this.prefix = "";
}

ZaFp.prototype = new ZaItem;
ZaFp.prototype.constructor = ZaFp;

ZaFp.A_name = "name" ;
ZaFp.A_index = "index";
ZaFp.A_prefix = "prefix" ;
//ZaFp.A_providers = "providers" ;

ZaFp.INTEROP_PROVIDER_CHOICES = [] ;

ZaFp.getXModel = function ()
{
    var model = { items:
      [
    	{id:"getAttrs",type:_LIST_},
    	{id:"setAttrs",type:_LIST_},
    	{id:"rights",type:_LIST_},      
		{id:ZaFp.A_name, type:_STRING_, ref:ZaFp.A_name},
		{id:ZaFp.A_index, type:_NUMBER_, ref:ZaFp.A_index},
        {id:ZaFp.A_prefix, type:_STRING_, ref:ZaFp.A_prefix}
      ]};
    return model ;
}

//@entry: prefix:foreignEmailAccount
//return ZaFp object
ZaFp.getObject = function (entry) {
    var obj = {} ;
    //var regEx = /(.+):(.*)/  ;
    //var result = entry.match(regEx) ;
    var found = false;
    for (var i=0; i < ZaFp.INTEROP_PROVIDER_CHOICES.length; i ++) {
       if (entry.indexOf(ZaFp.INTEROP_PROVIDER_CHOICES[i].value) == 0) {
           obj[ZaFp.A_prefix] = ZaFp.INTEROP_PROVIDER_CHOICES[i].value;
           obj[ZaFp.A_name] = entry.substr(ZaFp.INTEROP_PROVIDER_CHOICES[i].value.length);
           found = true ;
           break;
       }
    }
    if (! found) {
        obj[ZaFp.A_name] = entry ;
    }

    return obj;
}

ZaFp.getEntry = function (obj) {
    var entry = "" ;
    if (obj != null) {
		entry = (obj[ZaFp.A_prefix] || "") + (obj[ZaFp.A_name] || "");
    }
    return entry  ;
}


ZaFp.push = function (id) {
    var soapDoc = AjxSoapDoc.create("PushFreeBusyRequest", ZaZimbraAdmin.URN, null);
	var entry = soapDoc.set("account", "");
	entry.setAttribute("id", id);
	try {
		params = new Object();
		params.soapDoc = soapDoc;
		var reqMgrParams ={
			controller: ZaApp.getInstance().getCurrentController() ,
            asyncMode: false,
            busyMsg: ZaMsg.BUSY_PUSH_FP
        }
		resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.PushFreeBusyResponse;
        ZaApp.getInstance().getCurrentController().popupMsgDialog (ZaMsg.PUSH_SUCCEED, true);
    } catch (ex) {
		//show the error and go on
		//we should not stop the Account from loading if some of the information cannot be accessed
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaFp.push", null, false);
	}
}

ZaFp.getProviders = function () {
    var soapDoc = AjxSoapDoc.create("GetAllFreeBusyProvidersRequest", ZaZimbraAdmin.URN, null);
    try {
		params = new Object();
		params.soapDoc = soapDoc;
		var reqMgrParams ={
			controller: ZaApp.getInstance().getCurrentController() ,
            asyncMode: false,
            busyMsg: ZaMsg.BUSY_GET_INTEROP_PROVIDERS
        }
		var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.GetAllFreeBusyProvidersResponse;
	    ZaFp.INTEROP_PROVIDER_CHOICES = [] ;
        var providers = resp.provider ;

        if (providers != null) {
            for (var i=0; i < providers.length; i ++) {
                ZaFp.INTEROP_PROVIDER_CHOICES.push (
                    { value: providers[i].prefix || "",  // set an empty string if a provider is ZIMBRA
                      label: providers[i].name }
                );
            }
        }
        
    } catch (ex) {
		//show the error and go on
		//we should not stop the Account from loading if some of the information cannot be accessed
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaFp.push", null, false);
	}
}

//@entries: foreign principal entries
//@prefix: foreign principal prefixes
ZaFp.findDupPrefixFp = function (entries, prefix) {
    for (var i =0 ; i < entries.length; i ++) {
        // if a new provider is ZIMBRA, the prefix is empty string ""
        if ((prefix.length == 0 && entries[i].indexOf(":") == -1) || 
            (prefix.length != 0 && entries[i].indexOf(prefix) == 0)) {
            return true;
        }
    }
    return false;
}
}
if (AjxPackage.define("zimbraAdmin.cos.model.ZaCos")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaCos
* Data model for zimbraCos object
* @ constructor ZaCos
* @param app reference to the application instance
* @author Greg Solovyev
**/
ZaCos = function() {
    ZaItem.call(this,"ZaCos");
    this._init();
}
ZaItem.loadMethods["ZaCos"] = new Array();
ZaItem.modifyMethods["ZaCos"] = new Array();
ZaItem.initMethods["ZaCos"] = new Array();
ZaItem.getRelatedMethods["ZaCos"] = new Array();

ZaCos.prototype = new ZaItem;
ZaCos.prototype.constructor = ZaCos;

ZaCos.NONE = "none";
//object attributes
ZaCos.A_zimbraNotes="zimbraNotes";
ZaCos.A_zimbraMailQuota="zimbraMailQuota";
ZaCos.A_zimbraMinPwdLength="zimbraPasswordMinLength";
ZaCos.A_zimbraMaxPwdLength="zimbraPasswordMaxLength";
ZaCos.A_zimbraPasswordMinUpperCaseChars = "zimbraPasswordMinUpperCaseChars";
ZaCos.A_zimbraPasswordMinLowerCaseChars = "zimbraPasswordMinLowerCaseChars";
ZaCos.A_zimbraPasswordMinPunctuationChars = "zimbraPasswordMinPunctuationChars";
ZaCos.A_zimbraPasswordMinNumericChars = "zimbraPasswordMinNumericChars";
ZaCos.A_zimbraPasswordMinDigitsOrPuncs = "zimbraPasswordMinDigitsOrPuncs";
ZaCos.A_zimbraMinPwdAge = "zimbraPasswordMinAge";
ZaCos.A_zimbraMaxPwdAge = "zimbraPasswordMaxAge";
ZaCos.A_zimbraEnforcePwdHistory ="zimbraPasswordEnforceHistory";
ZaCos.A_zimbraPasswordLocked = "zimbraPasswordLocked";
ZaCos.A_zimbraPasswordBlockCommonEnabled = "zimbraPasswordBlockCommonEnabled";
ZaCos.A_name = "cn";
ZaCos.A_description = "description";
ZaCos.A_zimbraAttachmentsBlocked = "zimbraAttachmentsBlocked";
ZaCos.A_zimbraQuotaWarnPercent = "zimbraQuotaWarnPercent";
ZaCos.A_zimbraQuotaWarnInterval = "zimbraQuotaWarnInterval";
ZaCos.A_zimbraQuotaWarnMessage = "zimbraQuotaWarnMessage";

ZaCos.A_zimbraAdminAuthTokenLifetime = "zimbraAdminAuthTokenLifetime";
ZaCos.A_zimbraAuthTokenLifetime = "zimbraAuthTokenLifetime";
ZaCos.A_zimbraMailIdleSessionTimeout = "zimbraMailIdleSessionTimeout";
ZaCos.A_zimbraContactMaxNumEntries = "zimbraContactMaxNumEntries";
ZaCos.A_zimbraMailMinPollingInterval = "zimbraMailMinPollingInterval";
ZaCos.A_zimbraMailMessageLifetime = "zimbraMailMessageLifetime";
ZaCos.A_zimbraMailTrashLifetime = "zimbraMailTrashLifetime";
ZaCos.A_zimbraMailSpamLifetime = "zimbraMailSpamLifetime";
ZaCos.A_zimbraMailHostPool = "zimbraMailHostPool";
ZaCos.A_zimbraAvailableSkin = "zimbraAvailableSkin";
ZaCos.A_zimbraZimletAvailableZimlets = "zimbraZimletAvailableZimlets";
ZaCos.A_zimbraMailForwardingAddressMaxLength = "zimbraMailForwardingAddressMaxLength";
ZaCos.A_zimbraMailForwardingAddressMaxNumAddrs = "zimbraMailForwardingAddressMaxNumAddrs";
ZaCos.A_zimbraPrefItemsPerVirtualPage="zimbraPrefItemsPerVirtualPage",

ZaCos.A_zimbraDataSourceMinPollingInterval = "zimbraDataSourceMinPollingInterval";
ZaCos.A_zimbraDataSourcePop3PollingInterval = "zimbraDataSourcePop3PollingInterval";
ZaCos.A_zimbraDataSourceImapPollingInterval = "zimbraDataSourceImapPollingInterval";
ZaCos.A_zimbraDataSourceCalendarPollingInterval = "zimbraDataSourceCalendarPollingInterval";
ZaCos.A_zimbraDataSourceRssPollingInterval = "zimbraDataSourceRssPollingInterval";
ZaCos.A_zimbraDataSourceCaldavPollingInterval = "zimbraDataSourceCaldavPollingInterval";


ZaCos.A_zimbraProxyAllowedDomains = "zimbraProxyAllowedDomains";
//prefs
ZaCos.A_zimbraPrefMandatorySpellCheckEnabled = "zimbraPrefMandatorySpellCheckEnabled";
ZaCos.A_zimbraPrefAppleIcalDelegationEnabled = "zimbraPrefAppleIcalDelegationEnabled";
ZaCos.A_zimbraPrefCalendarShowPastDueReminders = "zimbraPrefCalendarShowPastDueReminders";
ZaCos.A_zimbraPrefCalendarToasterEnabled = "zimbraPrefCalendarToasterEnabled";
ZaCos.A_zimbraPrefCalendarAllowCancelEmailToSelf = "zimbraPrefCalendarAllowCancelEmailToSelf";
ZaCos.A_zimbraPrefCalendarAllowPublishMethodInvite = "zimbraPrefCalendarAllowPublishMethodInvite";
ZaCos.A_zimbraPrefCalendarAllowForwardedInvite = "zimbraPrefCalendarAllowForwardedInvite";
ZaCos.A_zimbraPrefCalendarReminderFlashTitle = "zimbraPrefCalendarReminderFlashTitle";
ZaCos.A_zimbraPrefCalendarReminderSoundsEnabled = "zimbraPrefCalendarReminderSoundsEnabled";
ZaCos.A_zimbraPrefCalendarSendInviteDeniedAutoReply = "zimbraPrefCalendarSendInviteDeniedAutoReply";
ZaCos.A_zimbraPrefCalendarAutoAddInvites = "zimbraPrefCalendarAutoAddInvites";
ZaCos.A_zimbraPrefCalendarApptVisibility = "zimbraPrefCalendarApptVisibility";
ZaCos.A_zimbraPrefCalendarNotifyDelegatedChanges = "zimbraPrefCalendarNotifyDelegatedChanges";
ZaCos.A_zimbraPrefCalendarInitialView = "zimbraPrefCalendarInitialView";
ZaCos.A_zimbraPrefClientType = "zimbraPrefClientType";
ZaCos.A_zimbraPrefTimeZoneId = "zimbraPrefTimeZoneId";
ZaCos.A_zimbraAllowAnyFromAddress = "zimbraAllowAnyFromAddress";
ZaCos.A_zimbraPrefCalendarAlwaysShowMiniCal = "zimbraPrefCalendarAlwaysShowMiniCal";
ZaCos.A_zimbraPrefCalendarUseQuickAdd = "zimbraPrefCalendarUseQuickAdd";
ZaCos.A_zimbraPrefGroupMailBy = "zimbraPrefGroupMailBy";
ZaCos.A_zimbraPrefIncludeSpamInSearch = "zimbraPrefIncludeSpamInSearch";
ZaCos.A_zimbraPrefIncludeTrashInSearch = "zimbraPrefIncludeTrashInSearch";
ZaCos.A_zimbraPrefMailInitialSearch = "zimbraPrefMailInitialSearch";
ZaCos.A_zimbraMaxMailItemsPerPage = "zimbraMaxMailItemsPerPage";
ZaCos.A_zimbraPrefMailItemsPerPage = "zimbraPrefMailItemsPerPage";
ZaCos.A_zimbraPrefMailPollingInterval = "zimbraPrefMailPollingInterval";
ZaCos.A_zimbraPrefAutoSaveDraftInterval = "zimbraPrefAutoSaveDraftInterval";
ZaCos.A_zimbraPrefMailFlashTitle = "zimbraPrefMailFlashTitle";
ZaCos.A_zimbraPrefMailFlashIcon = "zimbraPrefMailFlashIcon" ;
ZaCos.A_zimbraPrefMailSoundsEnabled = "zimbraPrefMailSoundsEnabled" ;
ZaCos.A_zimbraPrefMailToasterEnabled = "zimbraPrefMailToasterEnabled";
ZaCos.A_zimbraPrefMessageIdDedupingEnabled = "zimbraPrefMessageIdDedupingEnabled";
ZaCos.A_zimbraPrefUseKeyboardShortcuts = "zimbraPrefUseKeyboardShortcuts";
ZaCos.A_zimbraPrefSaveToSent = "zimbraPrefSaveToSent";
ZaCos.A_zimbraPrefComposeInNewWindow = "zimbraPrefComposeInNewWindow";
ZaCos.A_zimbraPrefForwardReplyInOriginalFormat = "zimbraPrefForwardReplyInOriginalFormat";
ZaCos.A_zimbraPrefAutoAddAddressEnabled = "zimbraPrefAutoAddAddressEnabled";
ZaCos.A_zimbraPrefComposeFormat = "zimbraPrefComposeFormat";
ZaCos.A_zimbraPrefMessageViewHtmlPreferred = "zimbraPrefMessageViewHtmlPreferred";
ZaCos.A_zimbraPrefShowSearchString = "zimbraPrefShowSearchString";
//ZaCos.A_zimbraPrefMailSignatureStyle = "zimbraPrefMailSignatureStyle";
ZaCos.A_zimbraPrefUseTimeZoneListInCalendar = "zimbraPrefUseTimeZoneListInCalendar";
ZaCos.A_zimbraPrefImapSearchFoldersEnabled = "zimbraPrefImapSearchFoldersEnabled";
ZaCos.A_zimbraPrefCalendarApptReminderWarningTime = "zimbraPrefCalendarApptReminderWarningTime";
ZaCos.A_zimbraPrefSkin = "zimbraPrefSkin";
ZaCos.A_zimbraPrefGalAutoCompleteEnabled = "zimbraPrefGalAutoCompleteEnabled";
ZaCos.A_zimbraPrefWarnOnExit = "zimbraPrefWarnOnExit" ;
ZaCos.A_zimbraPrefShowSelectionCheckbox = "zimbraPrefShowSelectionCheckbox" ;
ZaCos.A_zimbraPrefHtmlEditorDefaultFontFamily = "zimbraPrefHtmlEditorDefaultFontFamily";
ZaCos.A_zimbraPrefHtmlEditorDefaultFontSize = "zimbraPrefHtmlEditorDefaultFontSize" ;
ZaCos.A_zimbraPrefHtmlEditorDefaultFontColor = "zimbraPrefHtmlEditorDefaultFontColor" ;
ZaCos.A_zimbraMailSignatureMaxLength = "zimbraMailSignatureMaxLength" ;
ZaCos.A_zimbraPrefDisplayExternalImages = "zimbraPrefDisplayExternalImages" ;
ZaCos.A_zimbraPrefOutOfOfficeCacheDuration = "zimbraPrefOutOfOfficeCacheDuration";
//ZaCos.A_zimbraPrefIMAutoLogin = "zimbraPrefIMAutoLogin";
ZaCos.A_zimbraPrefMailDefaultCharset = "zimbraPrefMailDefaultCharset";
ZaCos.A_zimbraPrefLocale = "zimbraPrefLocale" ;
ZaCos.A_zimbraJunkMessagesIndexingEnabled = "zimbraJunkMessagesIndexingEnabled";
ZaCos.A_zimbraPrefMailSendReadReceipts = "zimbraPrefMailSendReadReceipts";
ZaCos.A_zimbraPrefAdminConsoleWarnOnExit = "zimbraPrefAdminConsoleWarnOnExit" ;
ZaCos.A_zimbraPrefImapEnabled = "zimbraPrefImapEnabled";
ZaCos.A_zimbraPrefPop3Enabled = "zimbraPrefPop3Enabled";

//features
ZaCos.A_zimbraFeatureExportFolderEnabled = "zimbraFeatureExportFolderEnabled";
ZaCos.A_zimbraFeatureImportFolderEnabled = "zimbraFeatureImportFolderEnabled";
ZaCos.A_zimbraDumpsterEnabled = "zimbraDumpsterEnabled";
ZaCos.A_zimbraMailDumpsterLifetime = "zimbraMailDumpsterLifetime";
ZaCos.A_zimbraDumpsterUserVisibleAge = "zimbraDumpsterUserVisibleAge";
ZaCos.A_zimbraDumpsterPurgeEnabled = "zimbraDumpsterPurgeEnabled";
ZaCos.A_zimbraPrefCalendarFirstDayOfWeek = "zimbraPrefCalendarFirstDayOfWeek";
ZaCos.A_zimbraFeatureReadReceiptsEnabled = "zimbraFeatureReadReceiptsEnabled";
ZaCos.A_zimbraFeatureMailPriorityEnabled = "zimbraFeatureMailPriorityEnabled";
ZaCos.A_zimbraFeatureImapDataSourceEnabled = "zimbraFeatureImapDataSourceEnabled";
ZaCos.A_zimbraFeaturePop3DataSourceEnabled = "zimbraFeaturePop3DataSourceEnabled";
ZaCos.A_zimbraFeatureIdentitiesEnabled = "zimbraFeatureIdentitiesEnabled";
ZaCos.A_zimbraFeatureContactsEnabled="zimbraFeatureContactsEnabled";
ZaCos.A_zimbraFeatureCalendarEnabled="zimbraFeatureCalendarEnabled";
ZaCos.A_zimbraFeatureTasksEnabled = "zimbraFeatureTasksEnabled" ;
ZaCos.A_zimbraFeatureTaggingEnabled="zimbraFeatureTaggingEnabled";
ZaCos.A_zimbraFeaturePeopleSearchEnabled="zimbraFeaturePeopleSearchEnabled";
ZaCos.A_zimbraFeatureAdvancedSearchEnabled="zimbraFeatureAdvancedSearchEnabled";
ZaCos.A_zimbraFeatureSavedSearchesEnabled="zimbraFeatureSavedSearchesEnabled";
ZaCos.A_zimbraFeatureConversationsEnabled="zimbraFeatureConversationsEnabled";
ZaCos.A_zimbraFeatureChangePasswordEnabled="zimbraFeatureChangePasswordEnabled";
ZaCos.A_zimbraFeatureInitialSearchPreferenceEnabled="zimbraFeatureInitialSearchPreferenceEnabled";
ZaCos.A_zimbraFeatureFiltersEnabled="zimbraFeatureFiltersEnabled";
ZaCos.A_zimbraFeatureGalEnabled="zimbraFeatureGalEnabled";
ZaCos.A_zimbraFeatureMAPIConnectorEnabled = "zimbraFeatureMAPIConnectorEnabled";
ZaCos.A_zimbraFeatureEwsEnabled = "zimbraFeatureEwsEnabled";
ZaCos.A_zimbraFeatureTouchClientEnabled = "zimbraFeatureTouchClientEnabled";
ZaCos.A_zimbraFeatureWebClientOfflineAccessEnabled = "zimbraFeatureWebClientOfflineAccessEnabled";
ZaCos.A_zimbraFeatureMailForwardingEnabled = "zimbraFeatureMailForwardingEnabled";
ZaCos.A_zimbraFeatureMailSendLaterEnabled = "zimbraFeatureMailSendLaterEnabled";
//ZaCos.A_zimbraFeatureFreeBusyViewEnabled = "zimbraFeatureFreeBusyViewEnabled";
ZaCos.A_zimbraFeatureSharingEnabled="zimbraFeatureSharingEnabled";
ZaCos.A_zimbraExternalSharingEnabled = "zimbraExternalSharingEnabled";
ZaCos.A_zimbraPublicSharingEnabled = "zimbraPublicSharingEnabled";
ZaCos.A_zimbraFeatureCalendarReminderDeviceEmailEnabled = "zimbraFeatureCalendarReminderDeviceEmailEnabled";
//ZaCos.A_zimbraFeatureNotebookEnabled="zimbraFeatureNotebookEnabled"
ZaCos.A_zimbraFeatureBriefcasesEnabled="zimbraFeatureBriefcasesEnabled";
ZaCos.A_zimbraFeatureBriefcaseDocsEnabled = "zimbraFeatureBriefcaseDocsEnabled";
ZaCos.A_zimbraImapEnabled = "zimbraImapEnabled";
ZaCos.A_zimbraPop3Enabled = "zimbraPop3Enabled";
ZaCos.A_zimbraFeatureWebClientEnabled = "zimbraFeatureWebClientEnabled";
ZaCos.A_zimbraFeatureHtmlComposeEnabled = "zimbraFeatureHtmlComposeEnabled";
ZaCos.A_zimbraFeatureGalAutoCompleteEnabled = "zimbraFeatureGalAutoCompleteEnabled";
ZaCos.A_zimbraFeatureManageZimlets = "zimbraFeatureManageZimlets";
ZaCos.A_zimbraFeatureSkinChangeEnabled = "zimbraFeatureSkinChangeEnabled";
ZaCos.A_zimbraFeatureOutOfOfficeReplyEnabled = "zimbraFeatureOutOfOfficeReplyEnabled";
ZaCos.A_zimbraFeatureNewMailNotificationEnabled = "zimbraFeatureNewMailNotificationEnabled";
ZaCos.A_zimbraFeatureOptionsEnabled = "zimbraFeatureOptionsEnabled" ;
//ZaCos.A_zimbraFeatureShortcutAliasesEnabled = "zimbraFeatureShortcutAliasesEnabled" ;
ZaCos.A_zimbraFeatureMailEnabled = "zimbraFeatureMailEnabled";
ZaCos.A_zimbraFeatureGroupCalendarEnabled = "zimbraFeatureGroupCalendarEnabled";
ZaCos.A_zimbraFeatureFlaggingEnabled = "zimbraFeatureFlaggingEnabled" ;
ZaCos.A_zimbraFeatureManageSMIMECertificateEnabled = "zimbraFeatureManageSMIMECertificateEnabled";
ZaCos.A_zimbraFeatureSMIMEEnabled = "zimbraFeatureSMIMEEnabled";
ZaCos.A_zimbraFeatureDistributionListFolderEnabled = "zimbraFeatureDistributionListFolderEnabled";

//security
ZaCos.A_zimbraPasswordLockoutEnabled = "zimbraPasswordLockoutEnabled";
ZaCos.A_zimbraPasswordLockoutDuration = "zimbraPasswordLockoutDuration";
ZaCos.A_zimbraPasswordLockoutMaxFailures = "zimbraPasswordLockoutMaxFailures";
ZaCos.A_zimbraPasswordLockoutFailureLifetime = "zimbraPasswordLockoutFailureLifetime";

//file retension
ZaCos.A_zimbraNumFileVersionsToKeep = "zimbraNumFileVersionsToKeep";
ZaCos.A_zimbraUnaccessedFileLifetime = "zimbraUnaccessedFileLifetime";
ZaCos.A_zimbraFileTrashLifetime = "zimbraFileTrashLifetime";
ZaCos.A_zimbraFileSendExpirationWarning = "zimbraFileSendExpirationWarning";
ZaCos.A_zimbraFileExpirationWarningDays = "zimbraFileExpirationWarningDays";

ZaCos.A2_retentionPoliciesKeepInherited ="retentionPoliciesKeepInherited";
ZaCos.A2_retentionPoliciesKeep = "retentionPolicyKeep";
ZaCos.A2_retentionPoliciesPurge = "retentionPolicyPurge";
ZaCos.A2_retentionPoliciesKeep_Selection = "retentionPoliciesKeep_Selection";
ZaCos.A2_retentionPoliciesPurge_Selection = "retentionPoliciesPurge_Selection";

// right
ZaCos.RIGHT_LIST_COS = "listCos";
ZaCos.RIGHT_LIST_ZIMLET = "listZimlet";
ZaCos.RIGHT_GET_ZIMLET = "getZimlet";
ZaCos.RIGHT_GET_HOSTNAME = "zimbraVirtualHostname";

ZaCos.A_zimbraFreebusyExchangeUserOrg = "zimbraFreebusyExchangeUserOrg" ;
ZaCos.cacheCounter = 0;
ZaCos.staticCosByNameCacheTable={};
ZaCos.staticCosByIdCacheTable = {};
ZaCos.putCosToCache = function(cos) {
    if(ZaCos.cacheCounter==100) {
        ZaCos.staticCosByNameCacheTable = {};
        ZaCos.staticCosByIdCacheTable = {};
        ZaCos.cacheCounter = 0;
    }

    if(!ZaCos.staticCosByNameCacheTable[cos.name] || !ZaCos.staticCosByIdCacheTable[cos.id]) {
        ZaCos.cacheCounter++;
        ZaCos.staticCosByNameCacheTable[cos.name] = cos;
        ZaCos.staticCosByIdCacheTable[cos.id] = cos;
    }
}

ZaCos.MAJOR_FEATURES_CHOICES = [
    {value: ZaCos.A_zimbraFeatureMailEnabled, label:ZaMsg.NAD_zimbraFeatureMailEnabled },
    {value: ZaCos.A_zimbraFeatureContactsEnabled, label:ZaMsg.NAD_FeatureContactsEnabled },
    {value: ZaCos.A_zimbraFeatureCalendarEnabled, label:ZaMsg.NAD_FeatureCalendarEnabled },
    {value:ZaCos.A_zimbraFeatureTasksEnabled, label:ZaMsg.NAD_FeatureTaskEnabled},
    //{value:ZaCos.A_zimbraFeatureNotebookEnabled,label:ZaMsg.NAD_zimbraFeatureNotebookEnabled},
    {value:ZaCos.A_zimbraFeatureBriefcasesEnabled,label:ZaMsg.NAD_zimbraFeatureBriefcasesEnabled},
    {value:ZaCos.A_zimbraFeatureOptionsEnabled, label:ZaMsg.NAD_zimbraFeatureOptionsEnabled}

];

ZaCos.RENAME_COS_RIGHT = "renameCos";
ZaCos.CREATE_COS_RIGHT = "createCos";
ZaCos.DELETE_COS_RIGHT = "deleteCos";
//internal attributes - do not send these to the server
//ZaCos.A_zimbraMailAllServersInternal = "allserversarray";
//ZaCos.A_zimbraMailHostPoolInternal = "hostpoolarray";

ZaCos.initMethod = function () {
    this.attrs = new Object();
    this.id = "";
    this.name="";
    this.type = ZaItem.COS;
}
ZaItem.initMethods["ZaCos"].push(ZaCos.initMethod);


ZaCos.loadMethod =
function (by, val) {
    var soapDoc = AjxSoapDoc.create("GetCosRequest", ZaZimbraAdmin.URN, null);
    var el = soapDoc.set("cos", val);
    el.setAttribute("by", by);
    if(!this.getAttrs.all && !AjxUtil.isEmpty(this.attrsToGet)) {
        soapDoc.getMethod().setAttribute("attrs", this.attrsToGet.join(","));
    }
    //var command = new ZmCsfeCommand();
    var params = new Object();
    params.soapDoc = soapDoc;
    var reqMgrParams = {
            controller: ZaApp.getInstance().getCurrentController(),
            busyMsg: ZaMsg.BUSY_GET_COS
        }
    var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.GetCosResponse;
    this.initFromJS(resp.cos[0]);

    if(this.attrs[ZaAccount.A_zimbraPrefMailPollingInterval]) {
        var poIntervalInS = ZaUtil.getLifeTimeInSeconds(this.attrs[ZaAccount.A_zimbraPrefMailPollingInterval]);
        if (poIntervalInS >= 1)
            this.attrs[ZaAccount.A_zimbraPrefMailPollingInterval] = poIntervalInS + "s";
    }

    if(this.attrs[ZaCos.A_zimbraProxyAllowedDomains] &&
       (!(this.attrs[ZaCos.A_zimbraProxyAllowedDomains] instanceof Array)) ) {
        this.attrs[ZaCos.A_zimbraProxyAllowedDomains] = [this.attrs[ZaCos.A_zimbraProxyAllowedDomains]];
    }
}
ZaItem.loadMethods["ZaCos"].push(ZaCos.loadMethod);

ZaCos.prototype.refresh =
function () {
    this.load("name", this.name);
}

ZaCos.prototype.initFromJS =
function (obj) {
    ZaItem.prototype.initFromJS.call(this, obj);
    if(typeof(this.attrs[ZaCos.A_zimbraMailHostPool]) == 'string'){
        this.attrs[ZaCos.A_zimbraMailHostPool] = [this.attrs[ZaCos.A_zimbraMailHostPool]];
    }
}

/**
* public ZaCos.rename
* @param name - name for the new COS
* @param attrs - map of attributes
**/
ZaCos.prototype.create =
function(name, mods) {
    var soapDoc = AjxSoapDoc.create("CreateCosRequest", ZaZimbraAdmin.URN, null);
    soapDoc.set("name", name);
    for (var aname in mods) {
        //multy value attribute
        if(mods[aname] instanceof Array) {
            var cnt = mods[aname].length;
            if(cnt) { //only set if not empty
                for(var ix=0; ix <cnt; ix++) {
                    if(mods[aname][ix] instanceof String)
                        var attr = soapDoc.set("a", mods[aname][ix].toString());
                    else if(mods[aname][ix] instanceof Object)
                        var attr = soapDoc.set("a", mods[aname][ix].toString());
                    else
                        var attr = soapDoc.set("a", mods[aname][ix]);

                    attr.setAttribute("n", aname);
                }
            }
        } else if(mods[aname] && (mods[aname].length || !isNaN(mods[aname]) )) {
            var attr = soapDoc.set("a", mods[aname]);
            attr.setAttribute("n", aname);
        }
    }
    //var command = new ZmCsfeCommand();
    var params = new Object();
    params.soapDoc = soapDoc;
    var reqMgrParams = {
            controller: ZaApp.getInstance().getCurrentController(),
            busyMsg : ZaMsg.BUSY_CREATE_COS
        }
    var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.CreateCosResponse;
    this.initFromJS(resp.cos[0]);
}

/**
* public ZaCos.rename
* @param newName - new name
**/
ZaCos.prototype.rename =
function(newName) {
    var soapDoc = AjxSoapDoc.create("RenameCosRequest", ZaZimbraAdmin.URN, null);
    soapDoc.set("id", this.id);
    soapDoc.set("newName", newName);
    //var command = new ZmCsfeCommand();
    var params = new Object();
    params.soapDoc = soapDoc;
    var reqMgrParams = {
        controller : ZaApp.getInstance().getCurrentController(),
        busyMsg : ZaMsg.BUSY_RENAME_COS
    }
    var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.RenameCosResponse;
    this.initFromJS(resp.cos[0]);
}

/**
* public ZaCos.remove
* sends DeleteCosRequest SOAP command
**/
ZaCos.prototype.remove =
function(callback) {
    var soapDoc = AjxSoapDoc.create("DeleteCosRequest", ZaZimbraAdmin.URN, null);
    soapDoc.set("id", this.id);
    //var command = new ZmCsfeCommand();
    var params = new Object();
    params.soapDoc = soapDoc;
    params.soapDoc = soapDoc;
    if(callback) {
        params.asyncMode = true;
        params.callback = callback;
    }
    var reqMgrParams = {
        controller : ZaApp.getInstance().getCurrentController(),
        busyMsg : ZaMsg.BUSY_DELETE_COS
    }
    ZaRequestMgr.invoke(params, reqMgrParams);
}
/**
* public ZaCos.modifyMethod
* @param mods - map of modified attributes
**/
ZaCos.modifyMethod =
function (mods) {
    var gotSomething = false;

    var soapDoc = AjxSoapDoc.create("ModifyCosRequest", ZaZimbraAdmin.URN, null);
    soapDoc.set("id", this.id);
    for (var aname in mods) {
        gotSomething = true;
        //multi value attribute
        if(mods[aname] instanceof Array) {
            var cnt = mods[aname].length;
            if(cnt) {
                var nonemptyElements = false;
                for(var ix=0; ix <cnt; ix++) {
                    var attr = null;
                    if(mods[aname][ix] instanceof String || AjxUtil.isString(mods[aname][ix])) {
                        if(AjxUtil.isEmpty(mods[aname][ix])) {
                            continue;
                        } else {
                            nonemptyElements = true;
                        }
                        var attr = soapDoc.set("a", mods[aname][ix].toString());
                    } else if(mods[aname][ix] instanceof Object) {
                        var attr = soapDoc.set("a", mods[aname][ix].toString());
                        nonemptyElements = true;
                    } else {
                        var attr = soapDoc.set("a", mods[aname][ix]);
                        nonemptyElements = true;
                    }

                    if(attr)
                        attr.setAttribute("n", aname);
                }
                if(!nonemptyElements) {
                    var attr = soapDoc.set("a", "");
                    attr.setAttribute("n", aname);
                }
            } else {
                var attr = soapDoc.set("a", "");
                attr.setAttribute("n", aname);
            }
        } else {
            var attr = soapDoc.set("a", mods[aname]);
            attr.setAttribute("n", aname);
        }
    }
    if(!gotSomething)
        return;

    //var command = new ZmCsfeCommand();
    var params = new Object();
    params.soapDoc = soapDoc;
    var reqMgrParams = {
        controller : ZaApp.getInstance().getCurrentController(),
        busyMsg : ZaMsg.BUSY_MODIFY_COS
    }
    var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.ModifyCosResponse;
    this.initFromJS(resp.cos[0]);
    ZaCos.putCosToCache(this);

}
ZaItem.modifyMethods["ZaCos"].push(ZaCos.modifyMethod);
/**
* Returns HTML for a tool tip for this cos.
*/
ZaCos.prototype.getToolTip =
function() {
    // update/null if modified
    if (!this._toolTip) {
        var html = new Array(20);
        var idx = 0;
        html[idx++] = "<table cellpadding='0' cellspacing='0' border='0'>";
        html[idx++] = "<tr valign='center'><td colspan='2' align='left'>";
        html[idx++] = "<div style='border-bottom: 1px solid black; white-space:nowrap; overflow:hidden;'>";
        html[idx++] = "<table cellpadding='0' cellspacing='0' border='0' style='width:100%;'>";
        html[idx++] = "<tr valign='center'>";
        html[idx++] = "<td><b>" + AjxStringUtil.htmlEncode(this.name) + "</b></td>";
        html[idx++] = "<td align='right'>";
        html[idx++] = AjxImg.getImageHtml("COS");
        html[idx++] = "</td>";
        html[idx++] = "</table></div></td></tr>";
        html[idx++] = "<tr></tr>";
        idx = this._addAttrRow(ZaItem.A_description, html, idx);
        idx = this._addAttrRow(ZaItem.A_zimbraId, html, idx);
        html[idx++] = "</table>";
        this._toolTip = html.join("");
    }
    return this._toolTip;
}

ZaCos.getAll =
function() {
    var soapDoc = AjxSoapDoc.create("GetAllCosRequest", ZaZimbraAdmin.URN, null);
    //var getAllCosCmd = new ZmCsfeCommand ();
    var params = new Object ();
    params.soapDoc = soapDoc ;
    var reqMgrParams = {
            controller: ZaApp.getInstance().getCurrentController(),
            busyMsg: ZaMsg.BUSY_GET_ALL_COS
        }
    var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.GetAllCosResponse;
    var list = new ZaItemList(ZaCos);
    list.loadFromJS(resp);
    //list.sortByName();

    return list;
}

ZaCos.getCosChoices = function () {
    if (ZaCos.cosChoices) {
        return ZaCos.cosChoices ;
    }else{
        ZaCos.cosChoices = new XFormChoices
    }
}





ZaCos.getDefaultCos4Account =
function (accountName, isExtVirtualAccount){
    var defaultCos ;
    var defaultDomainCos ;


    if (!accountName) {
        return defaultCos; //default cos
    }

    var domainName = ZaAccount.getDomain(accountName);
    var domainCosId ;
    var domain;
    try {
        domain= ZaDomain.getDomainByName(domainName);
    } catch (ex) {
        domain = undefined;
    }

    if(domain) {
        domainCosId = isExtVirtualAccount ? domain.attrs[ZaDomain.A_domainDefaultExternalUserCOSId] : domain.attrs[ZaDomain.A_domainDefaultCOSId] ;
        //when domainCosId doesn't exist, we always set default cos
        var defaultCosName = isExtVirtualAccount ? "defaultExternal" : "default";
        if (!domainCosId) {
            var cos = ZaCos.getCosByName(defaultCosName);
            return cos ;
        } else{
            var cos = ZaCos.getCosById (domainCosId);
            if(!cos)
                cos = ZaCos.getCosByName(defaultCosName);

             return cos ;
            //return cosList.getItemById(domainCosId);
        }
    } else {
        return null;
    }

}

ZaCos.getCosByName =
function(cosName) {
    if(!cosName)
        return null;

    var cos = ZaCos.staticCosByNameCacheTable[cosName];
    if(!cos) {
        cos = new ZaCos();
        try {
            cos.load("name", cosName);
        } catch (ex) {
            if(ex.code == ZmCsfeException.NO_SUCH_COS) {
                return null;
            } else {
                throw (ex);
            }
        }
        ZaCos.putCosToCache(cos);
    }
    return cos;
}

ZaCos.getCosById =
function (cosId) {
    if(!cosId)
        return null;

    var cos = ZaCos.staticCosByIdCacheTable[cosId];
    if(!cos) {
        cos = new ZaCos();
        try {
            cos.load("id", cosId);
        } catch (ex) {
            if(ex.code == ZmCsfeException.NO_SUCH_COS) {
                return null;
            } else {
                throw (ex);
            }
        }
        ZaCos.putCosToCache(cos);
    }
    return cos;

    /*var cnt = cosListArray.length;
    for(var i = 0; i < cnt; i++) {
        if(cosListArray[i].id == cosId) {
            return cosListArray[i];
        }
    }*/
}

ZaCos.myXModel = {
    items: [
        {id:"getAttrs",type:_LIST_},
        {id:"setAttrs",type:_LIST_},
        {id:"rights",type:_LIST_},
        {id:ZaItem.A_zimbraId, type:_STRING_, ref:"attrs/" + ZaItem.A_zimbraId},
        {id:ZaItem.A_zimbraCreateTimestamp, ref:"attrs/" + ZaItem.A_zimbraCreateTimestamp},
        {id:ZaCos.A_zimbraMailHostPool, ref:"attrs/" + ZaCos.A_zimbraMailHostPool, type:_LIST_, dataType: _STRING_,outputType:_LIST_},
        {id:ZaCos.A_zimbraNotes, type:_STRING_, ref:"attrs/"+ZaCos.A_zimbraNotes},
        {id:ZaCos.A_zimbraMailQuota, type:_MAILQUOTA_, ref:"attrs."+ZaCos.A_zimbraMailQuota},
        {id:ZaCos.A_zimbraMinPwdLength, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraMinPwdLength, maxInclusive:2147483647, minInclusive:0},
        {id:ZaCos.A_zimbraMaxPwdLength, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraMaxPwdLength, maxInclusive:2147483647, minInclusive:0},
        {id:ZaCos.A_zimbraPasswordMinUpperCaseChars, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraPasswordMinUpperCaseChars, maxInclusive:2147483647, minInclusive:0},
        {id:ZaCos.A_zimbraPasswordMinLowerCaseChars, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraPasswordMinLowerCaseChars, maxInclusive:2147483647, minInclusive:0},
        {id:ZaCos.A_zimbraPasswordMinPunctuationChars, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraPasswordMinPunctuationChars, maxInclusive:2147483647, minInclusive:0},
        {id:ZaCos.A_zimbraPasswordMinNumericChars, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraPasswordMinNumericChars, maxInclusive:2147483647, minInclusive:0},
        {id:ZaCos.A_zimbraPasswordMinDigitsOrPuncs, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraPasswordMinDigitsOrPuncs, maxInclusive:2147483647, minInclusive:0},
        {id:ZaCos.A_zimbraMinPwdAge, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraMinPwdAge, maxInclusive:2147483647, minInclusive:0},
        {id:ZaCos.A_zimbraMaxPwdAge, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraMaxPwdAge, maxInclusive:2147483647, minInclusive:0},
        {id:ZaCos.A_zimbraEnforcePwdHistory, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraEnforcePwdHistory, maxInclusive:2147483647, minInclusive:0},
        {id:ZaCos.A_zimbraPasswordLocked, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPasswordLocked},
        {id:ZaCos.A_zimbraPasswordBlockCommonEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPasswordBlockCommonEnabled},
        {id:ZaCos.A_name, type:_STRING_, ref:"attrs/"+ZaCos.A_name},
//        {id:ZaCos.A_description, type:_STRING_, ref:"attrs/"+ZaCos.A_description},
        ZaItem.descriptionModelItem ,
        {id:ZaCos.A_zimbraAttachmentsBlocked, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraAttachmentsBlocked},
        {id:ZaCos.A_zimbraAuthTokenLifetime, type:_MLIFETIME_, ref:"attrs/"+ZaCos.A_zimbraAuthTokenLifetime, required: true},
        {id:ZaCos.A_zimbraAdminAuthTokenLifetime, type:_MLIFETIME_, ref:"attrs/"+ZaCos.A_zimbraAdminAuthTokenLifetime, required: true},
        {id:ZaCos.A_zimbraMailIdleSessionTimeout, type:_MINTERVAL_, ref:"attrs/"+ZaCos.A_zimbraMailIdleSessionTimeout},
        {id:ZaCos.A_zimbraContactMaxNumEntries, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraContactMaxNumEntries, maxInclusive:2147483647, minInclusive:0},
        {id:ZaCos.A_zimbraMailForwardingAddressMaxLength, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraMailForwardingAddressMaxLength, maxInclusive:2147483647, minInclusive:0},
        {id:ZaCos.A_zimbraMailForwardingAddressMaxNumAddrs, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraMailForwardingAddressMaxNumAddrs, maxInclusive:2147483647, minInclusive:0},
        {id:ZaCos.A_zimbraMailMinPollingInterval, type:_MINTERVAL_, ref:"attrs/"+ZaCos.A_zimbraMailMinPollingInterval},
        {id:ZaCos.A_zimbraMailMessageLifetime, type:_MLIFETIME_, ref:"attrs/"+ZaCos.A_zimbraMailMessageLifetime},
        {id:ZaCos.A_zimbraMailTrashLifetime, type:_MLIFETIME_, ref:"attrs/"+ZaCos.A_zimbraMailTrashLifetime},
        {id:ZaCos.A_zimbraPrefItemsPerVirtualPage, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraPrefItemsPerVirtualPage},
        {id:ZaCos.A_zimbraMailSpamLifetime, type:_MLIFETIME_, ref:"attrs/"+ZaCos.A_zimbraMailSpamLifetime},

        {id:ZaCos.A_zimbraQuotaWarnPercent, type:_NUMBER_, ref:"attrs/" + ZaCos.A_zimbraQuotaWarnPercent},
        {id:ZaCos.A_zimbraQuotaWarnInterval, type:_MINTERVAL_, ref:"attrs/"+ZaCos.A_zimbraQuotaWarnInterval},
        {id:ZaCos.A_zimbraQuotaWarnMessage, type:_STRING_, ref:"attrs/" + ZaCos.A_zimbraQuotaWarnMessage},

//pref
        {id:ZaCos.A_zimbraPrefMandatorySpellCheckEnabled, types:_ENUM_, ref:"attrs/"+ZaCos.A_zimbraPrefMandatorySpellCheckEnabled,  choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaCos.A_zimbraPrefAppleIcalDelegationEnabled, types:_ENUM_, ref:"attrs/"+ZaCos.A_zimbraPrefAppleIcalDelegationEnabled,  choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaCos.A_zimbraPrefCalendarShowPastDueReminders, types:_ENUM_, ref:"attrs/" + ZaCos.A_zimbraPrefCalendarShowPastDueReminders, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaCos.A_zimbraPrefCalendarToasterEnabled, type:_ENUM_, ref:"attrs/" + ZaCos.A_zimbraPrefCalendarToasterEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaCos.A_zimbraPrefCalendarAllowCancelEmailToSelf, type:_ENUM_, ref:"attrs/"+ZaCos.A_zimbraPrefCalendarAllowCancelEmailToSelf, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaCos.A_zimbraPrefCalendarAllowPublishMethodInvite, type:_ENUM_, ref:"attrs/"+ZaCos.A_zimbraPrefCalendarAllowPublishMethodInvite,choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaCos.A_zimbraPrefCalendarAllowForwardedInvite, type:_ENUM_, ref:"attrs/"+ZaCos.A_zimbraPrefCalendarAllowForwardedInvite, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaCos.A_zimbraPrefCalendarReminderFlashTitle, type:_ENUM_, ref:"attrs/"+ZaCos.A_zimbraPrefCalendarReminderFlashTitle, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaCos.A_zimbraPrefCalendarReminderSoundsEnabled, type:_ENUM_, ref:"attrs/"+ZaCos.A_zimbraPrefCalendarReminderSoundsEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaCos.A_zimbraPrefCalendarAutoAddInvites, type:_ENUM_, ref:"attrs/"+ZaCos.A_zimbraPrefCalendarAutoAddInvites, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaCos.A_zimbraPrefCalendarNotifyDelegatedChanges, type:_ENUM_, ref:"attrs/"+ZaCos.A_zimbraPrefCalendarNotifyDelegatedChanges, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaCos.A_zimbraPrefCalendarApptVisibility, type:_ENUM_, ref:"attrs/"+ZaCos.A_zimbraPrefCalendarApptVisibility, choices:ZaSettings.apptVisibilityChoices},
        {id:ZaCos.A_zimbraPrefCalendarFirstDayOfWeek, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraPrefCalendarFirstDayOfWeek, choices:ZaSettings.dayOfWeekChoices},
        {id:ZaCos.A_zimbraPrefCalendarInitialView, type:_ENUM_, ref:"attrs/"+ZaCos.A_zimbraPrefCalendarInitialView, choices:ZaSettings.calendarViewChoinces},
        {id:ZaCos.A_zimbraPrefClientType,type:_STRING_, ref:"attrs/"+ZaCos.A_zimbraPrefClientType, choices:ZaSettings.clientTypeChoices},
        {id:ZaCos.A_zimbraPrefTimeZoneId,type:_STRING_, ref:"attrs/"+ZaCos.A_zimbraPrefTimeZoneId, choices:ZaSettings.timeZoneChoices},
        {id:ZaCos.A_zimbraPrefGroupMailBy, type:_STRING_, ref:"attrs/"+ZaCos.A_zimbraPrefGroupMailBy},
        {id:ZaCos.A_zimbraPrefIncludeSpamInSearch, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefIncludeSpamInSearch, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefIncludeTrashInSearch, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefIncludeTrashInSearch, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefMailInitialSearch, type:_STRING_, ref:"attrs/"+ZaCos.A_zimbraPrefMailInitialSearch},
        {id:ZaCos.A_zimbraPrefUseKeyboardShortcuts, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefUseKeyboardShortcuts, type:_ENUM_},
        {id:ZaCos.A_zimbraAllowAnyFromAddress, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraAllowAnyFromAddress, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefSaveToSent, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefSaveToSent, type:_ENUM_},
        {id:ZaCos.A_zimbraMaxMailItemsPerPage, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraMaxMailItemsPerPage,maxInclusive:2147483647, minInclusive:0},
        {id:ZaCos.A_zimbraPrefMailItemsPerPage, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraPrefMailItemsPerPage, choices:[10,25,50,100]},
        {id:ZaCos.A_zimbraPrefHtmlEditorDefaultFontFamily, choices:ZaModel.FONT_FAMILY_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefHtmlEditorDefaultFontFamily, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefHtmlEditorDefaultFontSize, choices:ZaModel.FONT_SIZE_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefHtmlEditorDefaultFontSize, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefHtmlEditorDefaultFontColor, ref:"attrs/"+ZaCos.A_zimbraPrefHtmlEditorDefaultFontColor, type:_STRING_},
        {id:ZaCos.A_zimbraMailSignatureMaxLength, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraMailSignatureMaxLength},
        {id:ZaCos.A_zimbraPrefMailToasterEnabled, type:_ENUM_, ref:"attrs/" + ZaCos.A_zimbraPrefMailToasterEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaCos.A_zimbraPrefMessageIdDedupingEnabled, type:_ENUM_, ref:"attrs/" + ZaCos.A_zimbraPrefMessageIdDedupingEnabled, choices:ZaModel.BOOLEAN_CHOICES},
    {id:ZaCos.A_zimbraPrefComposeInNewWindow, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefComposeInNewWindow, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefForwardReplyInOriginalFormat, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefForwardReplyInOriginalFormat, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefComposeFormat, choices:ZaModel.COMPOSE_FORMAT_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefComposeFormat, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefAutoAddAddressEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefAutoAddAddressEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefImapSearchFoldersEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefImapSearchFoldersEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefGroupMailBy, choices:ZaModel.GROUP_MAIL_BY_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefGroupMailBy, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefMessageViewHtmlPreferred, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefMessageViewHtmlPreferred, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefShowSearchString, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefShowSearchString, type:_ENUM_},
        //{id:ZaCos.A_zimbraPrefMailSignatureStyle, choices:ZaModel.SIGNATURE_STYLE_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefMailSignatureStyle, type:_ENUM_,defaultValue:"internet"},
        {id:ZaCos.A_zimbraPrefUseTimeZoneListInCalendar, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefUseTimeZoneListInCalendar, type:_ENUM_},
        {
            id: ZaCos.A_zimbraPrefMailPollingInterval,
            ref: "attrs/" + ZaCos.A_zimbraPrefMailPollingInterval,
            type: _ENUM_,
            choices: ZaModel.MAIL_POLLING_INTERVAL_CHOICES
        },
    {id:ZaCos.A_zimbraPrefAutoSaveDraftInterval, ref:"attrs/"+ZaCos.A_zimbraPrefAutoSaveDraftInterval, type:_MINTERVAL_},
        {id:ZaCos.A_zimbraDataSourceMinPollingInterval, ref:"attrs/"+ZaCos.A_zimbraDataSourceMinPollingInterval, type:_LIFETIME_},
        {id:ZaCos.A_zimbraDataSourcePop3PollingInterval, ref:"attrs/"+ZaCos.A_zimbraDataSourcePop3PollingInterval, type:_LIFETIME_},
        {id:ZaCos.A_zimbraDataSourceImapPollingInterval, ref:"attrs/"+ZaCos.A_zimbraDataSourceImapPollingInterval, type:_LIFETIME_},
        {id:ZaCos.A_zimbraDataSourceCalendarPollingInterval, ref:"attrs/"+ZaCos.A_zimbraDataSourceCalendarPollingInterval, type:_LIFETIME_},
        {id:ZaCos.A_zimbraDataSourceRssPollingInterval, ref:"attrs/"+ZaCos.A_zimbraDataSourceRssPollingInterval, type:_LIFETIME_},
        {id:ZaCos.A_zimbraDataSourceCaldavPollingInterval, ref:"attrs/"+ZaCos.A_zimbraDataSourceCaldavPollingInterval, type:_LIFETIME_},
    {id:ZaCos.A_zimbraProxyAllowedDomains, type: _LIST_, ref:"attrs/"+ZaCos.A_zimbraProxyAllowedDomains, listItem:{ type: _STRING_}},
        {id:ZaCos.A_zimbraPrefMailFlashIcon, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefMailFlashIcon, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefMailFlashTitle, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefMailFlashTitle, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefMailSoundsEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefMailSoundsEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefCalendarUseQuickAdd, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefCalendarUseQuickAdd, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefCalendarAlwaysShowMiniCal, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefCalendarAlwaysShowMiniCal, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefCalendarApptReminderWarningTime, choices:ZaModel.REMINDER_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefCalendarApptReminderWarningTime, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefSkin, ref:"attrs/"+ZaCos.A_zimbraPrefSkin, type:_STRING_},
        {id:ZaCos.A_zimbraPrefGalAutoCompleteEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefGalAutoCompleteEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefWarnOnExit, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefWarnOnExit, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefAdminConsoleWarnOnExit, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefAdminConsoleWarnOnExit, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefShowSelectionCheckbox, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefShowSelectionCheckbox, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefIMAutoLogin, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefIMAutoLogin, type:_ENUM_},
        {id:ZaCos.A_zimbraAvailableSkin, ref:"attrs/" + ZaCos.A_zimbraAvailableSkin, type:_LIST_, dataType: _STRING_,outputType:_LIST_},
        {id:ZaCos.A_zimbraZimletAvailableZimlets, ref:"attrs/" + ZaCos.A_zimbraZimletAvailableZimlets, type:_LIST_, dataType: _STRING_,outputType:_LIST_},
        {id:ZaCos.A_zimbraPrefDisplayExternalImages, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefDisplayExternalImages, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefOutOfOfficeCacheDuration, ref:"attrs/"+ZaCos.A_zimbraPrefOutOfOfficeCacheDuration, type:_MLIFETIME_},
        {id:ZaCos.A_zimbraPrefMailDefaultCharset,type:_STRING_, ref:"attrs/"+ZaCos.A_zimbraPrefMailDefaultCharset, choices:ZaSettings.mailCharsetChoices},
        {id:ZaCos.A_zimbraPrefLocale, type: _STRING_, ref: "attrs/" + ZaCos.A_zimbraPrefLocale  },
        {id:ZaCos.A_zimbraJunkMessagesIndexingEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraJunkMessagesIndexingEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefMailSendReadReceipts, choices:ZaModel.SEND_READ_RECEPIT_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefMailSendReadReceipts, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefImapEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefImapEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraPrefPop3Enabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefPop3Enabled, type:_ENUM_},
//features
        {id:ZaCos.A_zimbraFeatureExportFolderEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureExportFolderEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureImportFolderEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureImportFolderEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraDumpsterEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraDumpsterEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraDumpsterUserVisibleAge, type:_MLIFETIME_, ref:"attrs/"+ZaCos.A_zimbraDumpsterUserVisibleAge },
        {id:ZaCos.A_zimbraDumpsterPurgeEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraDumpsterPurgeEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraMailDumpsterLifetime, type:_MLIFETIME_, ref:"attrs/"+ZaCos.A_zimbraMailDumpsterLifetime },
        {id:ZaCos.A_zimbraPrefCalendarSendInviteDeniedAutoReply, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPrefCalendarSendInviteDeniedAutoReply, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureReadReceiptsEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureReadReceiptsEnabled, type:_ENUM_},
        {
            id: ZaCos.A_zimbraFeatureDistributionListFolderEnabled,
            choices: ZaModel.BOOLEAN_CHOICES,
            ref: "attrs/" + ZaCos.A_zimbraFeatureDistributionListFolderEnabled,
            type: _ENUM_
        },
        {id:ZaCos.A_zimbraFeatureMailPriorityEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureMailPriorityEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureImapDataSourceEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureImapDataSourceEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeaturePop3DataSourceEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeaturePop3DataSourceEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureIdentitiesEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureIdentitiesEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureContactsEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureContactsEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureCalendarEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureCalendarEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureTasksEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureTasksEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureTaggingEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureTaggingEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeaturePeopleSearchEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeaturePeopleSearchEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureAdvancedSearchEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureAdvancedSearchEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureSavedSearchesEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureSavedSearchesEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureConversationsEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureConversationsEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureChangePasswordEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureChangePasswordEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureHtmlComposeEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureHtmlComposeEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureInitialSearchPreferenceEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureInitialSearchPreferenceEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureFiltersEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureFiltersEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureGalEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureGalEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureMAPIConnectorEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureMAPIConnectorEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureEwsEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureEwsEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureTouchClientEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureTouchClientEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureWebClientOfflineAccessEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureWebClientOfflineAccessEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureManageSMIMECertificateEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureManageSMIMECertificateEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureSMIMEEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureSMIMEEnabled, type:_ENUM_},
    {id:ZaCos.A_zimbraFeatureMailForwardingEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureMailForwardingEnabled, type:_ENUM_},
    {id:ZaCos.A_zimbraFeatureMailSendLaterEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureMailSendLaterEnabled, type:_ENUM_},
        //{id:ZaCos.A_zimbraFeatureFreeBusyViewEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureFreeBusyViewEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureCalendarReminderDeviceEmailEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureCalendarReminderDeviceEmailEnabled, type:_ENUM_},
    //{id:ZaCos.A_zimbraFeatureNotebookEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureNotebookEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureBriefcasesEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureBriefcasesEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureBriefcaseDocsEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureBriefcaseDocsEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureGalAutoCompleteEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureGalAutoCompleteEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureHtmlComposeEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureHtmlComposeEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraImapEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraImapEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraPop3Enabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPop3Enabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureWebClientEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureWebClientEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureSharingEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureSharingEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraExternalSharingEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraExternalSharingEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraPublicSharingEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraPublicSharingEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureOutOfOfficeReplyEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureOutOfOfficeReplyEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureNewMailNotificationEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureNewMailNotificationEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureOptionsEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureOptionsEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureSkinChangeEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureSkinChangeEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureManageZimlets, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureManageZimlets, type:_ENUM_},
        //{id:ZaCos.A_zimbraFeatureShortcutAliasesEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureShortcutAliasesEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureMailEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureMailEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureGroupCalendarEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureGroupCalendarEnabled, type:_ENUM_},
        {id:ZaCos.A_zimbraFeatureFlaggingEnabled, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/"+ZaCos.A_zimbraFeatureFlaggingEnabled, type:_ENUM_},
        //security
        {id:ZaCos.A_zimbraPasswordLockoutEnabled, type:_ENUM_, ref:"attrs/"+ZaCos.A_zimbraPasswordLockoutEnabled, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaCos.A_zimbraPasswordLockoutDuration, type:_MLIFETIME_, ref:"attrs/"+ZaCos.A_zimbraPasswordLockoutDuration},
        {id:ZaCos.A_zimbraPasswordLockoutMaxFailures, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraPasswordLockoutMaxFailures, maxInclusive:2147483647, minInclusive:0},
        {id:ZaCos.A_zimbraPasswordLockoutFailureLifetime, type:_MLIFETIME_, ref:"attrs/"+ZaCos.A_zimbraPasswordLockoutFailureLifetime},
        //interop
        {id:ZaCos.A_zimbraFreebusyExchangeUserOrg ,type:_STRING_, ref:"attrs/"+ZaCos.A_zimbraFreebusyExchangeUserOrg },


        //file retension
        {id:ZaCos.A_zimbraFileTrashLifetime, type:_MLIFETIME_, ref:"attrs/"+ZaCos.A_zimbraFileTrashLifetime},
        {id:ZaCos.A_zimbraUnaccessedFileLifetime, type:_MLIFETIME_, ref:"attrs/"+ZaCos.A_zimbraUnaccessedFileLifetime},
        {id:ZaCos.A_zimbraNumFileVersionsToKeep, type:_NUMBER_, ref:"attrs/"+ZaCos.A_zimbraNumFileVersionsToKeep, maxInclusive:2147483647, minInclusive:0},
        {id:ZaCos.A_zimbraFileSendExpirationWarning, type:_ENUM_, ref:"attrs/"+ZaCos.A_zimbraFileSendExpirationWarning,
            choices:["none", "owner", "all"]
        },
        {id:ZaCos.A_zimbraFileExpirationWarningDays, type:_MINTERVAL_, ref:"attrs/"+ZaCos.A_zimbraFileExpirationWarningDays},
        {id:ZaCos.A2_retentionPoliciesKeepInherited, type:_ENUM_, ref:ZaCos.A2_retentionPoliciesKeepInherited, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaCos.A2_retentionPoliciesKeep, type:_LIST_},
        {id:ZaCos.A2_retentionPoliciesPurge, type:_LIST_},
        {id:ZaCos.A2_retentionPoliciesKeep_Selection, type:_LIST_},
        {id:ZaCos.A2_retentionPoliciesPurge_Selection, type:_LIST_}
    ]
};


ZaCos.prototype.manageSpecialAttrs =
function () {
    var warning = "" ;

    //handle the unrecognized timezone
    var tz = this.attrs[ZaCos.A_zimbraPrefTimeZoneId] ;
    if (tz) {
        var n_tz = ZaModel.setUnrecoganizedChoiceValue(tz, ZaSettings.timeZoneChoices) ;
        if (tz != n_tz) {
            this.attrs[ZaCos.A_zimbraPrefTimeZoneId] = n_tz ;
            warning += AjxMessageFormat.format(ZaMsg.WARNING_TIME_ZONE_INVALID , [ tz, "cos - \"" + this.name +"\""]);
        }
    }

    //handle the unrecognized mail charset
    var mdc = this.attrs[ZaCos.A_zimbraPrefMailDefaultCharset] ;
    if (mdc) {
        var n_mdc = ZaModel.setUnrecoganizedChoiceValue(mdc, ZaSettings.mailCharsetChoices) ;
        if (mdc != n_mdc) {
            this.attrs[ZaCos.A_zimbraPrefMailDefaultCharset] = n_mdc ;
            warning += AjxMessageFormat.format(ZaMsg.WARNING_CHARSET_INVALID , [ mdc, "cos - \"" + this.name +"\""]);
        }
    }

    //handle the unrecognized locale value
    var lv = this.attrs[ZaCos.A_zimbraPrefLocale] ;
    if (lv) {
        var n_lv = ZaModel.setUnrecoganizedChoiceValue(lv, ZaSettings.getLocaleChoices()) ;
        if (lv != n_lv) {
            this.attrs[ZaCos.A_zimbraPrefLocale] = n_lv ;
            warning += AjxMessageFormat.format(ZaMsg.WARNING_LOCALE_INVALID , [ lv, "cos - \"" + this.name +"\""]);
        }
    }

    //display warnings about the if manageSpecialAttrs return value
    if (warning && warning.length > 0) {
        ZaApp.getInstance().getCurrentController().popupMsgDialog (warning, true);
    }

}
ZaCos.globalRights = {};
ZaCos.getEffectiveCosList = function(adminId) {

    var soapDoc = AjxSoapDoc.create("GetAllEffectiveRightsRequest", ZaZimbraAdmin.URN, null);
    var elGrantee = soapDoc.set("grantee", adminId);
    elGrantee.setAttribute("type", "usr");
    elGrantee.setAttribute("by", "id");

    var params = {};
    params.soapDoc = soapDoc;
    params.asyncMode = false;
    var reqMgrParams = {
        controller : ZaApp.getInstance().getCurrentController(),
        busyMsg : ZaMsg.BUSY_GET_EFFICIENT_COS_LIST
    }

    var cosNameList = [];
    try {
        var resp = ZaRequestMgr.invoke(params, reqMgrParams);
        if(!resp || resp.Body.GetAllEffectiveRightsResponse.Fault)
            return cosNameList;
        var targets = resp.Body.GetAllEffectiveRightsResponse.target;
        for(var i = 0; i < targets.length; i++) {
            if(targets[i].type != ZaItem.COS)
                continue;
            if(!targets[i].entries && !targets[i].all) continue;

            if(targets[i].all) {
                //we have access to all domains
                if(targets[i].all.length && targets[i].all[0] && targets[i].all[0].right && targets[i].all[0].right.length) {
                    for(var j=0;j<targets[i].all[0].right.length;j++) {
                        ZaCos.globalRights[targets[i].all[0].right[j].n] = true;
                    }
                }
            }

            for(var j = 0; j < targets[i].entries.length; j++) {
                var entry = targets[i].entries[j].entry;
                for(var k = 0; k < entry.length; k++)
                    cosNameList.push(entry[k].name);
            }
            break;
        }
        return cosNameList;
    } catch(ex) {
        return cosNameList;
    }

}

ZaCos.prototype.countAllAccounts = function() {
    var soapDoc = AjxSoapDoc.create("SearchDirectoryRequest", ZaZimbraAdmin.URN, null);
    soapDoc.getMethod().setAttribute("maxResults", "0");
    soapDoc.getMethod().setAttribute("limit", "-1");
    var query = "(" + ZaAccount.A_COSId + "=" + this.id + ")";

    if(this.name == "default") {
        query = "(|(&(!(" + ZaAccount.A_COSId + "=*))(!(" + ZaAccount.A_zimbraIsExternalVirtualAccount + "=TRUE)))" + query + ")";
    } else if(this.name == "defaultExternal") {
        query = "(|(&(!(" + ZaAccount.A_COSId + "=*))(" + ZaAccount.A_zimbraIsExternalVirtualAccount + "=TRUE))" + query + ")";
    }
    query = "(&" + query + "(!("+ ZaAccount.A_zimbraIsSystemAccount +"=TRUE)))" ;
    soapDoc.set("query", query);
    soapDoc.set("types", ZaSearch.ACCOUNTS);
    var command = new ZmCsfeCommand();
    var cmdParams = new Object();
    cmdParams.soapDoc = soapDoc;
    cmdParams.noAuthToken = true;
    try {
        var resp = command.invoke(cmdParams).Body.SearchDirectoryResponse;
        if(resp.searchTotal)
            return  resp.searchTotal;
        else return 0;
    } catch(ex) {
        throw (ex);
    }
    return 0;
}

ZaCos.prototype.countAllDomains = function() {
    var soapDoc = AjxSoapDoc.create("SearchDirectoryRequest", ZaZimbraAdmin.URN, null);
    soapDoc.getMethod().setAttribute("maxResults", "0");
    soapDoc.getMethod().setAttribute("limit", "-1");
    var query = "(" + ZaDomain.A_domainDefaultCOSId + "=" + this.id + ")";

    if(this.name == "default") {
        query = "(|(!(" + ZaDomain.A_domainDefaultCOSId + "=*))" + query + ")";
    } else if(this.name == "defaultExternal") {
        query = "(|(!(" + ZaDomain.A_domainDefaultExternalUserCOSId + "=*))" + query + ")";
    }
    soapDoc.set("query", query);
    soapDoc.set("types", ZaSearch.DOMAINS);
    var command = new ZmCsfeCommand();
    var cmdParams = new Object();
    cmdParams.soapDoc = soapDoc;
    cmdParams.noAuthToken = true;
    try {
        var resp = command.invoke(cmdParams).Body.SearchDirectoryResponse;
        if(resp.searchTotal)
            return  resp.searchTotal;
        else return 0;
    } catch(ex) {
        throw (ex);
    }
    return 0;
}


ZaCos.checkValues = function(tmpObj){
   if(tmpObj.attrs == null) {
        //show error msg
        ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_UNKNOWN);
        return false;
    }

    //name
    if(ZaItem.hasWritePermission(ZaCos.A_name,tmpObj)) {
         if((tmpObj.attrs[ZaCos.A_name] == null || tmpObj.attrs[ZaCos.A_name].length < 1 )) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_NAME_REQUIRED);
            return false;
        } else {
            tmpObj.name = tmpObj.attrs[ZaCos.A_name];
        }

        if(tmpObj.name.length > 256 || tmpObj.attrs[ZaCos.A_name].length > 256) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_COS_NAME_TOOLONG);
            return false;
        }
    }
    /**
    * check values
    **/

    //if(tmpObj.attrs[ZaCos.A_zimbraPasswordMinUpperCaseChars] && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaCos.A_zimbraPasswordMinUpperCaseChars])) {
       if(ZaItem.hasWritePermission(ZaCos.A_zimbraPasswordMinUpperCaseChars,tmpObj)) {
       if (tmpObj.attrs[ZaCos.A_zimbraPasswordMinUpperCaseChars] != null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaCos.A_zimbraPasswordMinUpperCaseChars])) {
            //show error msg
           ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPasswordMinUpperCaseChars]));
            return false;
        }
    }
       if(ZaItem.hasWritePermission(ZaCos.A_zimbraPasswordMinLowerCaseChars,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraPasswordMinLowerCaseChars] != null && tmpObj.attrs[ZaCos.A_zimbraPasswordMinLowerCaseChars] && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaCos.A_zimbraPasswordMinLowerCaseChars])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPasswordMinLowerCaseChars]));
            return false;
        }
       }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraPasswordMinPunctuationChars,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraPasswordMinPunctuationChars] != null && tmpObj.attrs[ZaCos.A_zimbraPasswordMinPunctuationChars] && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaCos.A_zimbraPasswordMinPunctuationChars])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPasswordMinPunctuationChars]));
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraPasswordMinNumericChars,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraPasswordMinNumericChars] != null && tmpObj.attrs[ZaCos.A_zimbraPasswordMinNumericChars] && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaCos.A_zimbraPasswordMinNumericChars])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPasswordMinNumericChars]));
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraPasswordMinDigitsOrPuncs,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraPasswordMinDigitsOrPuncs] != null && tmpObj.attrs[ZaCos.A_zimbraPasswordMinDigitsOrPuncs] && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaCos.A_zimbraPasswordMinDigitsOrPuncs])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPasswordMinDigitsOrPuncs]));
            return false;
        }
    }

    if(tmpObj.attrs[ZaCos.A_zimbraMailQuota] != null && tmpObj.attrs[ZaCos.A_zimbraMailQuota] && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaCos.A_zimbraMailQuota])) {
        //show error msg
        ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMailQuota]));
        return false;
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraContactMaxNumEntries,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraContactMaxNumEntries] != null && tmpObj.attrs[ZaCos.A_zimbraContactMaxNumEntries] && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaCos.A_zimbraContactMaxNumEntries])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraContactMaxNumEntries]));
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraMinPwdLength,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraMinPwdLength] != null && tmpObj.attrs[ZaCos.A_zimbraMinPwdLength] && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaCos.A_zimbraMinPwdLength])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMinPwdLength]));
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraMaxPwdLength,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraMaxPwdLength] != null && tmpObj.attrs[ZaCos.A_zimbraMaxPwdLength] && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaCos.A_zimbraMaxPwdLength])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMaxPwdLength]));
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraMaxPwdLength,tmpObj) && ZaItem.hasWritePermission(ZaCos.A_zimbraMinPwdLength,tmpObj)) {
        if (tmpObj.attrs[ZaCos.A_zimbraMaxPwdLength] != null &&  tmpObj.attrs[ZaCos.A_zimbraMinPwdLength] != null) {
            if(parseInt(tmpObj.attrs[ZaCos.A_zimbraMaxPwdLength]) < parseInt(tmpObj.attrs[ZaCos.A_zimbraMinPwdLength]) && parseInt(tmpObj.attrs[ZaCos.A_zimbraMaxPwdLength]) > 0) {
                //show error msg
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_MAX_MIN_PWDLENGTH);
                return false;
            }
        }
    }
    if(ZaItem.hasWritePermission(ZaCos.A_zimbraMinPwdAge,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraMinPwdAge] != null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaCos.A_zimbraMinPwdAge])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_passMinAge]));
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraMaxPwdAge,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraMaxPwdAge] != null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaCos.A_zimbraMaxPwdAge])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_passMaxAge]));
            return false;
        }
    }
    if(ZaItem.hasWritePermission(ZaCos.A_zimbraMinPwdAge,tmpObj) && ZaItem.hasWritePermission(ZaCos.A_zimbraMaxPwdAge,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraMinPwdAge] != null && tmpObj.attrs[ZaCos.A_zimbraMaxPwdAge] != null ){
            if(parseInt(tmpObj.attrs[ZaCos.A_zimbraMaxPwdAge]) < parseInt(tmpObj.attrs[ZaCos.A_zimbraMinPwdAge]) && parseInt(tmpObj.attrs[ZaCos.A_zimbraMaxPwdAge]) > 0) {
                //show error msg
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_MAX_MIN_PWDAGE);
                return false;
            }
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraAuthTokenLifetime,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraAuthTokenLifetime] != null && !AjxUtil.isLifeTime(tmpObj.attrs[ZaCos.A_zimbraAuthTokenLifetime])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraAuthTokenLifetime]));
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraPrefOutOfOfficeCacheDuration,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraPrefOutOfOfficeCacheDuration] != null && !AjxUtil.isLifeTime(tmpObj.attrs[ZaCos.A_zimbraPrefOutOfOfficeCacheDuration])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPrefOutOfOfficeCacheDuration]));
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraMailIdleSessionTimeout,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraMailIdleSessionTimeout] != null && !AjxUtil.isLifeTime(tmpObj.attrs[ZaCos.A_zimbraMailIdleSessionTimeout])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMailIdleSessionTimeout]));
            return false;
        }
    }

        if(ZaItem.hasWritePermission(ZaCos.A_zimbraPrefAutoSaveDraftInterval,tmpObj)) {
                if(tmpObj.attrs[ZaCos.A_zimbraPrefAutoSaveDraftInterval] != null && !AjxUtil.isLifeTime(tmpObj.attrs[ZaCos.A_zimbraPrefAutoSaveDraftInterval])) {
                    ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPrefAutoSaveDraftInterval]));
                        return false;
                }
        }

        if(ZaItem.hasWritePermission(ZaCos.A_zimbraDataSourceMinPollingInterval,tmpObj)) {
            var p_dataInterval = tmpObj.attrs[ZaCos.A_zimbraDataSourceMinPollingInterval];
            if (!AjxUtil.isEmpty(p_dataInterval) && !AjxUtil.isLifeTime(p_dataInterval)) {
                ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraDataSourceMinPollingInterval]));
                return false;
            }
        }
        if(ZaItem.hasWritePermission(ZaCos.A_zimbraDataSourcePop3PollingInterval,tmpObj)) {
            var p_dataInterval = tmpObj.attrs[ZaCos.A_zimbraDataSourcePop3PollingInterval];
            if (!AjxUtil.isEmpty(p_dataInterval)) {
                if (!AjxUtil.isLifeTime(p_dataInterval)) {
                    ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraDataSourcePop3PollingInterval]));
                    return false;
                }
        var min_dataInterval = tmpObj.attrs[ZaCos.A_zimbraDataSourceMinPollingInterval];
                if (!AjxUtil.isEmpty(min_dataInterval)) {
                    if (ZaUtil.getLifeTimeInSeconds(p_dataInterval) < ZaUtil.getLifeTimeInSeconds(min_dataInterval)){
                        ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.tt_mailPollingIntervalError + min_dataInterval);
                        return false;
                    }
                }
            }
        }
        if(ZaItem.hasWritePermission(ZaCos.A_zimbraDataSourceImapPollingInterval,tmpObj)) {
            var p_dataInterval = tmpObj.attrs[ZaCos.A_zimbraDataSourceImapPollingInterval];
            if (!AjxUtil.isEmpty(p_dataInterval)) {
                if (!AjxUtil.isLifeTime(p_dataInterval)) {
                    ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraDataSourceImapPollingInterval]));
                    return false;
                }
                var min_dataInterval = tmpObj.attrs[ZaCos.A_zimbraDataSourceMinPollingInterval];
                if (!AjxUtil.isEmpty(min_dataInterval)) {
                    if (ZaUtil.getLifeTimeInSeconds(p_dataInterval) < ZaUtil.getLifeTimeInSeconds(min_dataInterval)){
                        ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.tt_mailPollingIntervalError + min_dataInterval);
                        return false;
                    }
                }
            }
        }
        if(ZaItem.hasWritePermission(ZaCos.A_zimbraDataSourceCalendarPollingInterval,tmpObj)) {
            var p_dataInterval = tmpObj.attrs[ZaCos.A_zimbraDataSourceCalendarPollingInterval];
            if (!AjxUtil.isEmpty(p_dataInterval)) {
                if (!AjxUtil.isLifeTime(p_dataInterval)) {
                    ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraDataSourceCalendarPollingInterval]));
                    return false;
                }
                var min_dataInterval = tmpObj.attrs[ZaCos.A_zimbraDataSourceMinPollingInterval];
                if (!AjxUtil.isEmpty(min_dataInterval)) {
            if (ZaUtil.getLifeTimeInSeconds(p_dataInterval) < ZaUtil.getLifeTimeInSeconds(min_dataInterval)){
                        ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.tt_mailPollingIntervalError + min_dataInterval);
                        return false;
                    }
                }
            }
        }
        if(ZaItem.hasWritePermission(ZaCos.A_zimbraDataSourceRssPollingInterval,tmpObj)) {
            var p_dataInterval = tmpObj.attrs[ZaCos.A_zimbraDataSourceRssPollingInterval];
            if (!AjxUtil.isEmpty(p_dataInterval)) {
                if (!AjxUtil.isLifeTime(p_dataInterval)) {
                    ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraDataSourceRssPollingInterval]));
                    return false;
                }
                var min_dataInterval = tmpObj.attrs[ZaCos.A_zimbraDataSourceMinPollingInterval];
                if (!AjxUtil.isEmpty(min_dataInterval)) {
                    if (ZaUtil.getLifeTimeInSeconds(p_dataInterval) < ZaUtil.getLifeTimeInSeconds(min_dataInterval)){
                        ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.tt_mailPollingIntervalError + min_dataInterval);
                        return false;
                    }
        }
            }
        }
        if (ZaItem.hasWritePermission(ZaCos.A_zimbraDataSourceCaldavPollingInterval,tmpObj)) {
            var p_dataInterval = tmpObj.attrs[ZaCos.A_zimbraDataSourceCaldavPollingInterval];
            if (!AjxUtil.isEmpty(p_dataInterval)) {
                if (!AjxUtil.isLifeTime(p_dataInterval)) {
                    ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zzimbraDataSourceCaldavPollingInterval]));
                    return false;
                }
                var min_dataInterval = tmpObj.attrs[ZaCos.A_zimbraDataSourceMinPollingInterval];
                if (!AjxUtil.isEmpty(min_dataInterval)) {
                    if (ZaUtil.getLifeTimeInSeconds(p_dataInterval) < ZaUtil.getLifeTimeInSeconds(min_dataInterval)){
                        ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.tt_mailPollingIntervalError + min_dataInterval);
                        return false;
                    }
                }
            }
        }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraPrefMailPollingInterval,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraPrefMailPollingInterval] != null && !AjxUtil.isLifeTime(tmpObj.attrs[ZaCos.A_zimbraPrefMailPollingInterval])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPrefMailPollingInterval]));
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraPrefMailPollingInterval,tmpObj)) {
        var n_minPollingInterval = tmpObj.attrs[ZaCos.A_zimbraMailMinPollingInterval] ;

        if(n_minPollingInterval != null && !AjxUtil.isLifeTime(n_minPollingInterval)) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMailMinPollingInterval]));
            return false;
        }

        //var o_minPollingInterval = this.currentObject.attrs[ZaCos.A_zimbraMailMinPollingInterval] ;
        var o_minPollingInterval = tmpObj.attrs[ZaCos.A_zimbraMailMinPollingInterval] ;
        if (o_minPollingInterval != null && ZaUtil.getLifeTimeInSeconds (n_minPollingInterval)
             > ZaUtil.getLifeTimeInSeconds(o_minPollingInterval)){
             ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format (ZaMsg.tt_minPollingIntervalWarning, [o_minPollingInterval, n_minPollingInterval]),  true);
        }
    }


    if(ZaItem.hasWritePermission(ZaCos.A_zimbraMailMessageLifetime,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraMailMessageLifetime] != null) {

            if(!AjxUtil.isLifeTime(tmpObj.attrs[ZaCos.A_zimbraMailMessageLifetime])) {
                //show error msg
                ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMailMessageLifetime]));
                return false;
            }
            var itestVal = parseInt(tmpObj.attrs[ZaCos.A_zimbraMailMessageLifetime].substr(0, tmpObj.attrs[ZaCos.A_zimbraMailMessageLifetime].length-1));
            if(itestVal > 0 && itestVal < 31) {
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_MESSAGE_LIFETIME_BELOW_31);
                return false;
            }
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraMailTrashLifetime,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraMailTrashLifetime] != null && !AjxUtil.isLifeTime(tmpObj.attrs[ZaCos.A_zimbraMailTrashLifetime])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMailTrashLifetime]));
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraMailSpamLifetime,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraMailSpamLifetime] != null && !AjxUtil.isLifeTime(tmpObj.attrs[ZaCos.A_zimbraMailSpamLifetime])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraMailSpamLifetime]));
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraPasswordLockoutDuration,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraPasswordLockoutDuration] != null && !AjxUtil.isLifeTime(tmpObj.attrs[ZaCos.A_zimbraPasswordLockoutDuration])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPasswordLockoutDuration]));
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraPasswordLockoutFailureLifetime,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraPasswordLockoutFailureLifetime] != null && !AjxUtil.isLifeTime(tmpObj.attrs[ZaCos.A_zimbraPasswordLockoutFailureLifetime])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraPasswordLockoutFailureLifetime]));
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraEnforcePwdHistory,tmpObj)) {
        if(tmpObj.attrs[ZaCos.A_zimbraEnforcePwdHistory] != null && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaCos.A_zimbraEnforcePwdHistory])) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR, [ZaMsg.MSG_zimbraEnforcePwdHistory]));
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraMaxMailItemsPerPage,tmpObj) && ZaItem.hasWritePermission(ZaCos.A_zimbraPrefMailItemsPerPage,tmpObj)) {
        var maxItemsPerPage;
        if(tmpObj.attrs[ZaAccount.A_zimbraMaxMailItemsPerPage] != null) {
            maxItemsPerPage = parseInt (tmpObj.attrs[ZaAccount.A_zimbraMaxMailItemsPerPage]);
        } else {
            maxItemsPerPage = parseInt ( tmpObj._defaultValues.attrs[ZaAccount.A_zimbraMaxMailItemsPerPage]);
        }

        var prefItemsPerPage;
        if(tmpObj.attrs[ZaAccount.A_zimbraPrefMailItemsPerPage] != null) {
            prefItemsPerPage = parseInt (tmpObj.attrs[ZaAccount.A_zimbraPrefMailItemsPerPage]);
        } else {
            prefItemsPerPage = parseInt ( tmpObj._defaultValues.attrs[ZaAccount.A_zimbraPrefMailItemsPerPage]);
        }

        if(maxItemsPerPage < prefItemsPerPage) {
            //show error msg
            ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_ITEMS_PER_PAGE_OVER_MAX);
            return false;
        }
    }

    if(ZaItem.hasWritePermission(ZaCos.A_zimbraAvailableSkin,tmpObj)) {
        //check that current theme is part of selected themes
        if(tmpObj.attrs[ZaCos.A_zimbraAvailableSkin] !=null && tmpObj.attrs[ZaCos.A_zimbraAvailableSkin].length > 0 && tmpObj.attrs[ZaCos.A_zimbraPrefSkin] ) {
            var arr = tmpObj.attrs[ZaCos.A_zimbraAvailableSkin] instanceof Array ? tmpObj.attrs[ZaCos.A_zimbraAvailableSkin] : [tmpObj.attrs[ZaCos.A_zimbraAvailableSkin]];
            var cnt = arr.length;
            var found=false;
            for(var i=0; i < cnt; i++) {
                if(arr[i]==tmpObj.attrs[ZaCos.A_zimbraPrefSkin]) {
                    found=true;
                    break;
                }
            }
            if(!found) {
                //show error msg
                ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format (ZaMsg.COS_WarningCurrentThemeNotAvail, [tmpObj.attrs[ZaCos.A_zimbraPrefSkin], tmpObj.attrs[ZaCos.A_zimbraPrefSkin]]));
                return false;
            }
        }
    }
    return true;
}

ZaCos.getRelatedList =
function (parentPath) {
    var Tis = [];
    var count = this.countAllAccounts();
    if(count > 0) {
        var accountTi = new ZaTreeItemData({
                    text: ZaMsg.OVP_accounts,
                    count:count,
                    image:"Account",
                    mappingId: ZaZimbraAdmin._COS_ACCOUNT_LIST_VIEW,
                    path: parentPath + ZaTree.SEPERATOR + this.name + ZaTree.SEPERATOR + ZaMsg.OVP_accounts
                    }
                );
        accountTi.setData("cosItem", this);
        ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._COS_ACCOUNT_LIST_VIEW] = ZaOverviewPanelController.accountListTreeListener;
        Tis.push(accountTi);
    }
    count = this.countAllDomains();
    if(count > 0) {
        var domainTi = new ZaTreeItemData({
                    text: ZaMsg.OVP_domains,
                    count:count,
                    image:"Domain",
                    mappingId: ZaZimbraAdmin._COS_DOMAIN_LIST_VIEW,
                    path: parentPath + ZaTree.SEPERATOR + this.name + ZaTree.SEPERATOR + ZaMsg.OVP_domains
                    }
                );
        domainTi.setData("cosItem", this);
        ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._COS_DOMAIN_LIST_VIEW] = ZaOverviewPanelController.domainListTreeListener;
        Tis.push(domainTi);
    }
    return Tis;
}
ZaItem.getRelatedMethods["ZaCos"].push(ZaCos.getRelatedList);
}
if (AjxPackage.define("zimbraAdmin.domains.model.ZaDomain")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaDomain
* @ constructor ZaDomain
* @param app reference to the application instance
* Data model for zimbraDomain object
* @author Greg Solovyev
**/

ZaDomain = function() {
	ZaItem.call(this,  "ZaDomain");
	this.attrs = new Object();
	this.id = "";
	this.name="";
	this.type=ZaItem.DOMAIN;

	//default attributes
	this.attrs[ZaDomain.A_zimbraGalMode] = ZaDomain.GAL_Mode_internal;
    this.attrs[ZaDomain.A_AuthMech] = ZaDomain.AuthMech_zimbra;
	this.attrs[ZaDomain.A_GALSyncUseGALSearch]='TRUE';
	this.notebookAcls = {};
	this[ZaDomain.A_NotebookTemplateFolder] = "Template";
	this[ZaDomain.A_NotebookTemplateDir] = "/opt/zextras/wiki/Template";
    this.attrs[ZaDomain.A_zimbraAuthMechAdmin] = ZaDomain.AuthMech_ad;
	this.notebookAcls[ZaDomain.A_NotebookAllACLs] = {r:0,w:0,i:0,d:0,a:0,x:0};
	this.notebookAcls[ZaDomain.A_NotebookPublicACLs] = {r:0,w:0,i:0,d:0,a:0,x:0};
	this.notebookAcls[ZaDomain.A_NotebookDomainACLs] = {r:1,w:1,i:1,d:1,a:0,x:0};
	this.notebookAcls[ZaDomain.A_NotebookUserACLs] = [/*{name:"", acl:{r:0,w:0,i:0,d:0,a:0,x:0}}*/];
	this.notebookAcls[ZaDomain.A_NotebookGroupACLs] = [/*{name:"", acl:{r:0,w:0,i:0,d:0,a:0,x:0}, 
			toString:function () {
				return [this.name,this.acl[r],this.acl[w],this.acl[i],this.acl[d],this.acl[a],this.acl[x]].join();
			}
		}*/];

    this.attrs[ZaDomain.A_zimbraDomainCOSMaxAccounts ] = [];
    this.attrs[ZaDomain.A_zimbraDomainFeatureMaxAccounts ] = [];
}
ZaDomain.DEF_WIKI_ACC = "domain_wiki";
ZaDomain.WIKI_FOLDER_ID = "12";
ZaDomain.RESULTSPERPAGE = ZaSettings.RESULTSPERPAGE; 
ZaDomain.MAXSEARCHRESULTS = ZaSettings.MAXSEARCHRESULTS;
ZaDomain.prototype = new ZaItem;
ZaDomain.prototype.constructor = ZaDomain;
ZaDomain.ACLLabels = {r:ZaMsg.ACL_R, w:ZaMsg.ACL_W, i:ZaMsg.ACL_I, a:ZaMsg.ACL_A, d:ZaMsg.ACL_D, x:ZaMsg.ACL_X};
ZaItem.loadMethods["ZaDomain"] = new Array();
ZaItem.initMethods["ZaDomain"] = new Array();
ZaItem.modifyMethods["ZaDomain"] = new Array();
ZaItem.modifyMethodsExt["ZaDomain"] = new Array();
ZaItem.createMethods["ZaDomain"] = new Array();
ZaItem.getRelatedMethods["ZaDomain"] = new Array();

ZaDomain.DOMAIN_STATUS_ACTIVE = "active";
ZaDomain.DOMAIN_STATUS_MAINTENANCE = "maintenance";
ZaDomain.DOMAIN_STATUS_LOCKED = "locked";
ZaDomain.DOMAIN_STATUS_CLOSED = "closed";
ZaDomain.DOMAIN_STATUS_SUSPENDED = "suspended";
ZaDomain.DOMAIN_STATUS_SHUTDOWN = "shutdown";

ZaDomain.SPNEGO_SUPPORT_UA = [".*Windows.*Firefox/3.*",".*MSIE.*Windows.*",".*Windows.*Chrome.*",
    ".*Windows.*Safari.*",".*Macintosh.*Safari.*"];

ZaDomain._domainStatus = 
function(val) {
	var desc = ZaDomain._DOMAIN_STATUS[val];
	return (desc == null) ? val : desc;
}


/* Translation of Domain status values into screen names */
ZaDomain._DOMAIN_STATUS = new Object ();
ZaDomain.initDomainStatus = function() {
	ZaDomain._DOMAIN_STATUS[ZaDomain.DOMAIN_STATUS_ACTIVE] = ZaMsg.domainStatus_active;
	ZaDomain._DOMAIN_STATUS[ZaDomain.DOMAIN_STATUS_CLOSED] = ZaMsg.domainStatus_closed;
	ZaDomain._DOMAIN_STATUS[ZaDomain.DOMAIN_STATUS_LOCKED] = ZaMsg.domainStatus_locked;
	ZaDomain._DOMAIN_STATUS[ZaDomain.DOMAIN_STATUS_SUSPENDED] = ZaMsg.domainStatus_suspended;
	ZaDomain._DOMAIN_STATUS[ZaDomain.DOMAIN_STATUS_MAINTENANCE] = ZaMsg.domainStatus_maintenance;
	ZaDomain._DOMAIN_STATUS[ZaDomain.DOMAIN_STATUS_SHUTDOWN] = ZaMsg.domainStatus_shutdown;
	
	ZaDomain.getDomainStatusChoices = function(){
	    return [
			{value:ZaDomain.DOMAIN_STATUS_ACTIVE, label:ZaDomain._DOMAIN_STATUS[ZaDomain.DOMAIN_STATUS_ACTIVE]}, 
			{value:ZaDomain.DOMAIN_STATUS_CLOSED, label:ZaDomain._DOMAIN_STATUS[ZaDomain.DOMAIN_STATUS_CLOSED]},
			{value:ZaDomain.DOMAIN_STATUS_LOCKED, label: ZaDomain._DOMAIN_STATUS[ZaDomain.DOMAIN_STATUS_LOCKED]},
			{value:ZaDomain.DOMAIN_STATUS_MAINTENANCE, label:ZaDomain._DOMAIN_STATUS[ZaDomain.DOMAIN_STATUS_MAINTENANCE]},
			{value:ZaDomain.DOMAIN_STATUS_SUSPENDED, label:ZaDomain._DOMAIN_STATUS[ZaDomain.DOMAIN_STATUS_SUSPENDED]}
		];
	}
	ZaDomain.domainStatusChoices = ZaDomain.getDomainStatusChoices;	
}
ZaDomain.initDomainStatus();

ZaDomain.getAggregateQuotaPolicyChoices = function () {
    return [
        {label:ZaMsg.Choice_QuotaPolicy_AllAllowed, value:"ALLOWSENDRECEIVE"},
        {label:ZaMsg.Choice_QuotaPolicy_BlockSends, value:"BLOCKSEND"},
        {label:ZaMsg.Choice_QuotaPolicy_AllBlocked, value:"BLOCKSENDRECEIVE"}
    ];
}
ZaDomain.aggregateQuotaPolicyChoices = ZaDomain.getAggregateQuotaPolicyChoices;

ZaDomain.domainTypes = {alias: "alias", local: "local"} ;
ZaDomain.protocolChoices = {http: "http", https: "https"};

//attribute name constants, this values are taken from carbonio.schema
ZaDomain.A_description = "description";
ZaDomain.A_notes = "zimbraNotes";
ZaDomain.A_domainName = "zimbraDomainName";
ZaDomain.A_domainType = "zimbraDomainType" ;
ZaDomain.A_domainDefaultCOSId = "zimbraDomainDefaultCOSId";
ZaDomain.A_domainDefaultExternalUserCOSId = "zimbraDomainDefaultExternalUserCOSId";
ZaDomain.A_zimbraDomainStatus = "zimbraDomainStatus";
ZaDomain.A_zimbraPublicServiceHostname = "zimbraPublicServiceHostname";
ZaDomain.A_zimbraPublicServicePort = "zimbraPublicServicePort";
ZaDomain.A_zimbraPublicServiceProtocol = "zimbraPublicServiceProtocol";
ZaDomain.A_zimbraDNSCheckHostname = "zimbraDNSCheckHostname";
ZaDomain.A_zimbraBasicAuthRealm = "zimbraBasicAuthRealm";

//GAL search
ZaDomain.A_zimbraGalMaxResults = "zimbraGalMaxResults";
ZaDomain.A_zimbraGalMode = "zimbraGalMode";
ZaDomain.A_GalLdapURL = "zimbraGalLdapURL";
ZaDomain.A_GalLdapSearchBase = "zimbraGalLdapSearchBase";
ZaDomain.A_GalLdapBindDn = "zimbraGalLdapBindDn";
ZaDomain.A_GalLdapBindPassword = "zimbraGalLdapBindPassword";
ZaDomain.A_GalLdapBindPasswordConfirm = "zimbraGalLdapBindPasswordConfirm";
ZaDomain.A_GalLdapFilter = "zimbraGalLdapFilter";
ZaDomain.A_zimbraGalAutoCompleteLdapFilter = "zimbraGalAutoCompleteLdapFilter";
//GAL Sync
ZaDomain.A_zimbraGalSyncLdapURL = "zimbraGalSyncLdapURL";
ZaDomain.A_zimbraGalSyncLdapSearchBase="zimbraGalSyncLdapSearchBase";
ZaDomain.A_zimbraGalSyncLdapFilter="zimbraGalSyncLdapFilter";
ZaDomain.A_zimbraGalSyncLdapAuthMech="zimbraGalSyncLdapAuthMech";
ZaDomain.A_zimbraGalSyncLdapBindDn="zimbraGalSyncLdapBindDn";
ZaDomain.A_zimbraGalSyncLdapBindPassword="zimbraGalSyncLdapBindPassword";

//GAL Sync accounts
ZaDomain.A_zimbraGalAccountId = "zimbraGalAccountId";

ZaDomain.A_zimbraFeatureCalendarReminderDeviceEmailEnabled = "zimbraFeatureCalendarReminderDeviceEmailEnabled";

ZaDomain.A_mailHost = "zimbraMailHost";
//Auth
ZaDomain.A_AuthMech = "zimbraAuthMech";
ZaDomain.A_AuthLdapURL = "zimbraAuthLdapURL";
ZaDomain.A_AuthLdapUserDn = "zimbraAuthLdapBindDn";
ZaDomain.A_AuthLdapSearchBase = "zimbraAuthLdapSearchBase";
ZaDomain.A_AuthLdapSearchFilter = "zimbraAuthLdapSearchFilter";
ZaDomain.A_AuthLdapSearchBindDn ="zimbraAuthLdapSearchBindDn";
ZaDomain.A_AuthLdapSearchBindPassword="zimbraAuthLdapSearchBindPassword";

ZaDomain.A_zimbraAdminConsoleDNSCheckEnabled = "zimbraAdminConsoleDNSCheckEnabled";
ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled = "zimbraAdminConsoleCatchAllAddressEnabled";
ZaDomain.A_zimbraMailCatchAllAddress = "zimbraMailCatchAllAddress" ;
ZaDomain.A_zimbraMailCatchAllForwardingAddress = "zimbraMailCatchAllForwardingAddress" ;
ZaDomain.A_zimbraAdminConsoleSkinEnabled = "zimbraAdminConsoleSkinEnabled";
ZaDomain.A_zimbraAdminConsoleLDAPAuthEnabled = "zimbraAdminConsoleLDAPAuthEnabled" ;
ZaDomain.A_zimbraAuthLdapStartTlsEnabled = "zimbraAuthLdapStartTlsEnabled";
ZaDomain.A_zimbraAuthFallbackToLocal = "zimbraAuthFallbackToLocal";
ZaDomain.A_zimbraPasswordChangeListener = "zimbraPasswordChangeListener";
ZaDomain.A_domainMaxAccounts = "zimbraDomainMaxAccounts";
//internal attributes - not synched with the server code yet
//GAL               
ZaDomain.A_GALServerType = "galservertype";
ZaDomain.A_GALSyncServerType = "galsyncservertype";
ZaDomain.A_GALSyncUseGALSearch = "galsyncusegalsearch";
//ZaDomain.A_GALServerName = "galservername";
//ZaDomain.A_GALServerPort = "galserverport";
//ZaDomain.A_GALUseSSL = "galusessl";
ZaDomain.A_GALSearchTestMessage = "galsearchtestmessage";
ZaDomain.A_GALSyncTestMessage = "galsynctestmessage";
ZaDomain.A_GALSearchTestResultCode = "galsearchtestresutcode";
ZaDomain.A_GALSyncTestResultCode = "galsynctestresutcode";
ZaDomain.A_GALSampleQuery = "samplequery";
ZaDomain.A_UseBindPassword = "usebindpassword";
ZaDomain.A_SyncUseBindPassword = "syncusebindpassword";
ZaDomain.A_GALTestSearchResults = "galtestsearchresults";
ZaDomain.A_NotebookTemplateDir = "templatedir";
ZaDomain.A_NotebookTemplateFolder = "templatefolder";
ZaDomain.A_NotebookAccountPassword = "noteBookAccountPassword";
ZaDomain.A_NotebookAccountPassword2 = "noteBookAccountPassword2";
ZaDomain.A_CreateNotebook = "createNotebook";
ZaDomain.A_OverwriteTemplates = "overwritetemplates";
ZaDomain.A_OverwriteNotebookACLs = "overwritenotebookacls";
ZaDomain.A_NotebookPublicACLs = "pub";
ZaDomain.A_NotebookAllACLs = "all";
ZaDomain.A_NotebookDomainACLs = "dom";
ZaDomain.A_NotebookUserACLs = "usr";
ZaDomain.A_NotebookGroupACLs = "grp";
ZaDomain.A_NotebookGuestACLs = "guest";
ZaDomain.A_allNotebookACLS = "allNotebookACLS";
//values
ZaDomain.GAL_Mode_internal = "zimbra";
ZaDomain.GAL_Mode_external = "ldap";
ZaDomain.GAL_Mode_both = "both";
ZaDomain.GAL_ServerType_ad = "ad";
ZaDomain.GAL_ServerType_ldap = "ldap";

//Auth
ZaDomain.A_AuthADDomainName = "zimbraAuthADDomainName";
//ZaDomain.A_AuthLDAPServerName = "zimbraAuthLDAPServerName";
ZaDomain.A_AuthLDAPSearchBase = "zimbraAuthLDAPSearchBase";
//ZaDomain.A_AuthLDAPServerPort = "zimbraAuthLDAPServerPort";
ZaDomain.A_AuthTestUserName = "authtestusername";
ZaDomain.A_AuthTestPassword = "authtestpassword";
ZaDomain.A_AuthTestMessage = "authtestmessage";
ZaDomain.A_AuthTestResultCode = "authtestresutcode";
ZaDomain.A_AuthComputedBindDn = "authcomputedbinddn";
ZaDomain.A_AuthUseBindPassword = "authusebindpassword";
ZaDomain.A_AuthLdapSearchBindPasswordConfirm = "authldapsearchBindpasswordconfirm";
ZaDomain.A_GalSyncLdapBindPasswordConfirm = "syncldappasswordconfirm";
ZaDomain.A_zimbraVirtualHostname = "zimbraVirtualHostname";

ZaDomain.A_zimbraSSLCertificate = "zimbraSSLCertificate";
ZaDomain.A_zimbraSSLPrivateKey = "zimbraSSLPrivateKey";


//server value constants
ZaDomain.AuthMech_ad = "ad";
ZaDomain.AuthMech_ldap = "ldap";
ZaDomain.AuthMech_zimbra = "zimbra";
ZaDomain.A_zimbraNotebookAccount = "zimbraNotebookAccount";

//interop
ZaDomain.A_zimbraFreebusyExchangeAuthUsername = "zimbraFreebusyExchangeAuthUsername" ;
ZaDomain.A_zimbraFreebusyExchangeAuthPassword = "zimbraFreebusyExchangeAuthPassword" ;
ZaDomain.A_zimbraFreebusyExchangeAuthScheme  = "zimbraFreebusyExchangeAuthScheme" ;
ZaDomain.A_zimbraFreebusyExchangeServerType = "zimbraFreebusyExchangeServerType" ;
ZaDomain.A_zimbraFreebusyExchangeURL ="zimbraFreebusyExchangeURL";
ZaDomain.A_zimbraFreebusyExchangeUserOrg = "zimbraFreebusyExchangeUserOrg" ;

ZaDomain.A_zimbraAvailableSkin = "zimbraAvailableSkin";
ZaDomain.A_zimbraZimletDomainAvailableZimlets = "zimbraZimletDomainAvailableZimlets" ;
//hosted attributes
ZaDomain.A_zimbraDomainCOSMaxAccounts = "zimbraDomainCOSMaxAccounts" ;
ZaDomain.A_zimbraDomainFeatureMaxAccounts = "zimbraDomainFeatureMaxAccounts" ;
ZaDomain.A2_account_limit = "account_limit" ;

// help URL
ZaDomain.A_zimbraHelpAdminURL = "zimbraHelpAdminURL";
ZaDomain.A_zimbraHelpDelegatedURL = "zimbraHelpDelegatedURL";
// login / logout URL
ZaDomain.A_zimbraAdminConsoleLoginURL = "zimbraAdminConsoleLoginURL";
ZaDomain.A_zimbraAdminConsoleLogoutURL = "zimbraAdminConsoleLogoutURL";
// Kerberos
ZaDomain.A_zimbraAuthKerberos5Realm = "zimbraAuthKerberos5Realm";
// web client sso
ZaDomain.A_zimbraWebClientLoginURL = "zimbraWebClientLoginURL";
ZaDomain.A_zimbraWebClientLogoutURL = "zimbraWebClientLogoutURL";
ZaDomain.A_zimbraWebClientLoginURLAllowedUA = "zimbraWebClientLoginURLAllowedUA";
ZaDomain.A_zimbraWebClientLogoutURLAllowedUA = "zimbraWebClientLogoutURLAllowedUA";
ZaDomain.A_zimbraWebClientLoginURLAllowedIP = "zimbraWebClientLoginURLAllowedIP";
ZaDomain.A_zimbraWebClientLogoutURLAllowedIP = "zimbraWebClientLogoutURLAllowedIP";
ZaDomain.A_zimbraForceClearCookies = "zimbraForceClearCookies";

// web client authentication
ZaDomain.A_zimbraReverseProxyClientCertMode = "zimbraReverseProxyClientCertMode";
ZaDomain.A_zimbraMailSSLClientCertPrincipalMap = "zimbraMailSSLClientCertPrincipalMap";
ZaDomain.A_zimbraReverseProxyClientCertCA = "zimbraReverseProxyClientCertCA";

// Provision
ZaDomain.A_zimbraAutoProvMode = "zimbraAutoProvMode";
ZaDomain.A_zimbraAutoProvAuthMech = "zimbraAutoProvAuthMech";
ZaDomain.A_zimbraAutoProvLdapURL = "zimbraAutoProvLdapURL";
ZaDomain.A_zimbraAutoProvLdapStartTlsEnabled = "zimbraAutoProvLdapStartTlsEnabled";
ZaDomain.A_zimbraAutoProvLdapAdminBindDn = "zimbraAutoProvLdapAdminBindDn";
ZaDomain.A_zimbraAutoProvLdapAdminBindPassword = "zimbraAutoProvLdapAdminBindPassword";
ZaDomain.A_zimbraAutoProvLdapSearchBase = "zimbraAutoProvLdapSearchBase";
ZaDomain.A_zimbraAutoProvLdapSearchFilter = "zimbraAutoProvLdapSearchFilter";
ZaDomain.A_zimbraAutoProvLdapBindDn = "zimbraAutoProvLdapBindDn";
ZaDomain.A_zimbraAutoProvAccountNameMap = "zimbraAutoProvAccountNameMap";
ZaDomain.A_zimbraAutoProvAttrMap = "zimbraAutoProvAttrMap";
ZaDomain.A_zimbraAutoProvNotificationFromAddress = "zimbraAutoProvNotificationFromAddress";
ZaDomain.A_zimbraAutoProvBatchSize = "zimbraAutoProvBatchSize";
ZaDomain.A_zimbraAutoProvLastPolledTimestamp = "zimbraAutoProvLastPolledTimestamp";
ZaDomain.A2_zimbraAutoProvModeEAGEREnabled = ZaDomain.A_zimbraAutoProvMode + "_EAGER";
ZaDomain.A2_zimbraAutoProvModeLAZYEnabled = ZaDomain.A_zimbraAutoProvMode + "_LAZY";
ZaDomain.A2_zimbraAutoProvModeMANUALEnabled = ZaDomain.A_zimbraAutoProvMode + "_MANUAL";
ZaDomain.A2_zimbraAutoProvAuthMechLDAPEnabled = ZaDomain.A_zimbraAutoProvAuthMech + "_LDAP";
ZaDomain.A2_zimbraAutoProvAuthMechPREAUTHEnabled = ZaDomain.A_zimbraAutoProvAuthMech + "_PREAUTH";
ZaDomain.A2_zimbraAutoProvAuthMechKRB5Enabled = ZaDomain.A_zimbraAutoProvAuthMech + "_KRB5";
ZaDomain.A2_zimbraAutoProvAuthMechSPNEGOEnabled = ZaDomain.A_zimbraAutoProvAuthMech + "_SPNEGO";
ZaDomain.A2_zimbraAutoProvServerList = "zimbraAutoProvServerList";
ZaDomain.A2_zimbraAutoProvSelectedServerList = "zimbraAutoProvSelectedDomainList";
ZaDomain.A2_zimbraAutoProvPollingInterval = "zimbraAutoProvPollingInterval";
ZaDomain.A2_zimbraAutoProvSearchActivated = "zimbraAutoProvSearchAcctActivated";
ZaDomain.A2_zimbraAutoProvAccountPool = "zimbraAutoProvAccountPool";
ZaDomain.A2_zimbraAutoProvAccountPoolPageNum = "zimbraAutoProvAccountPoolPageNum";
ZaDomain.A2_zimbraAutoProvAccountSrcSelectedPool = "zimbraAutoProvAccountSrcSelectedPool";
ZaDomain.A2_zimbraAutoProvAccountTargetPool = "zimbraAutoProvAccountTargetPool";
ZaDomain.A2_zimbraAutoProvAccountTgtSelectedPool = "zimbraAutoProvAccountTgtSelectedPool";
ZaDomain.A2_zimbraAutoProvAccountPoolPageTotal = "zimbraAutoProvAccountPoolPageTotal";
ZaDomain.A2_zimbraAutoProvAccountPassword = "zimbraAutoProvAccountPassword";
ZaDomain.A2_zimbraAutoProvAccountPasswordInDlg = ZaDomain.A2_zimbraAutoProvAccountPassword + "InDlg";
ZaDomain.A2_zimbraAutoProvAccountPasswordAgainInDlg = ZaDomain.A2_zimbraAutoProvAccountPassword + "AgainInDlg";
ZaDomain.A2_zimbraAutoProvAccountPasswordUnmatchedWarning = ZaDomain.A2_zimbraAutoProvAccountPassword + "UnmatchedWarning";

//skin properties
ZaDomain.A_zimbraSkinForegroundColor = "zimbraSkinForegroundColor" ;
ZaDomain.A_zimbraSkinBackgroundColor = "zimbraSkinBackgroundColor" ;
ZaDomain.A_zimbraSkinSecondaryColor = "zimbraSkinSecondaryColor" ;
ZaDomain.A_zimbraSkinSelectionColor  = "zimbraSkinSelectionColor" ;

ZaDomain.A_zimbraSkinLogoURL ="zimbraSkinLogoURL" ;
ZaDomain.A_zimbraSkinLogoLoginBanner = "zimbraSkinLogoLoginBanner" ;
ZaDomain.A_zimbraSkinLogoAppBanner = "zimbraSkinLogoAppBanner" ;

// domain quota
ZaDomain.A_zimbraMailDomainQuota = "zimbraMailDomainQuota";
ZaDomain.A_zimbraDomainAggregateQuota = "zimbraDomainAggregateQuota";
ZaDomain.A_zimbraDomainAggregateQuotaPolicy = "zimbraDomainAggregateQuotaPolicy";
ZaDomain.A_zimbraDomainAggregateQuotaWarnPercent = "zimbraDomainAggregateQuotaWarnPercent";
ZaDomain.A_zimbraDomainAggregateQuotaWarnEmailRecipient = "zimbraDomainAggregateQuotaWarnEmailRecipient";

// regex of domain name
ZaDomain.A_zimbraMailAddressValidationRegex = "zimbraMailAddressValidationRegex";

//email setting for auto provision
ZaDomain.A_zimbraAutoProvNotificationSubject = "zimbraAutoProvNotificationSubject";
ZaDomain.A_zimbraAutoProvNotificationBody = "zimbraAutoProvNotificationBody";

ZaDomain.A_zimbraDomainAliasTargetId = "zimbraDomainAliasTargetId" ;
ZaDomain.A2_zimbraDomainAliasTarget = "zimbraDomainAliasTargetName" ;
ZaDomain.A_zimbraPrefTimeZoneId = "zimbraPrefTimeZoneId" ;
ZaDomain.A_zimbraAdminConsoleLoginMessage = "zimbraAdminConsoleLoginMessage" ;
ZaDomain.A2_allowClearTextLDAPAuth = "allowClearTextLdapAuth" ;
ZaDomain.A2_isTestingGAL = "isTestingGAL";
ZaDomain.A2_isTestingSync = "isTestingSync";
ZaDomain.A2_isTestingAuth = "isTestingAuth";
ZaDomain.A2_acl_selection_cache = "acl_selection_cache";
ZaDomain.A2_gal_sync_accounts = "gal_sync_accounts";
ZaDomain.A2_new_gal_sync_account_name = "new_gal_sync_account_name";
ZaDomain.A2_new_internal_gal_ds_name = "new_internal_gal_ds_name";
ZaDomain.A2_new_external_gal_ds_name = "new_external_gal_ds_name";
ZaDomain.A2_new_internal_gal_polling_interval = "new_internal_gal_polling_interval";
ZaDomain.A2_new_external_gal_polling_interval = "new_external_gal_polling_interval";
ZaDomain.A2_gal_sync_accounts_set = "gal_sync_accounts_set";
ZaDomain.A2_create_gal_acc = "create_gal_acc";

ZaDomain.A2_domain_account_quota = "domain_account_quota";
//result codes returned from Check* requests
ZaDomain.Check_OK = "check.OK";
ZaDomain.Check_UNKNOWN_HOST="check.UNKNOWN_HOST";
ZaDomain.Check_CONNECTION_REFUSED = "check.CONNECTION_REFUSED";
ZaDomain.Check_SSL_HANDSHAKE_FAILURE = "check.SSL_HANDSHAKE_FAILURE";
ZaDomain.Check_COMMUNICATION_FAILURE = "check.COMMUNICATION_FAILURE";
ZaDomain.Check_AUTH_FAILED = "check.AUTH_FAILED";
ZaDomain.Check_AUTH_NOT_SUPPORTED = "check.AUTH_NOT_SUPPORTED";
ZaDomain.Check_NAME_NOT_FOUND = "check.NAME_NOT_FOUND";
ZaDomain.Check_INVALID_SEARCH_FILTER = "check.INVALID_SEARCH_FILTER";
ZaDomain.Check_FAILURE = "check.FAILURE"; 
ZaDomain.Check_FAULT = "Fault";
ZaDomain.Check_SKIPPED = "Skiped";

ZaDomain.AUTH_MECH_CHOICES = [ZaDomain.AuthMech_ad,ZaDomain.AuthMech_ldap,ZaDomain.AuthMech_zimbra];

ZaDomain.LOCAL_DOMAIN_QUERY = "(zimbraDomainType=local)";

//constants for rights
ZaDomain.RIGHT_LIST_DOMAIN = "listDomain";
ZaDomain.RIGHT_CREATE_TOP_DOMAIN = "createTopDomain";
ZaDomain.RIGHT_DELETE_DOMAIN = "deleteDomain";
ZaDomain.RIGHT_RENAME_DOMAIN = "renameDomain";
ZaDomain.RIGHT_CREATE_SUB_DOMAIN = "createSubDomain";
ZaDomain.RIGHT_CREATE_ACCOUNT = "createAccount";
ZaDomain.RIGHT_CREATE_CALRES = "createCalendarResource";
ZaDomain.RIGHT_CREATE_DL = "createDistributionList";
ZaDomain.RIGHT_CREATE_ALIAS = "createAlias";
ZaDomain.RIGHT_ADMIN_LOGIN_AS = "adminLoginAs";
ZaDomain.RIGHT_CHECK_MX_RECORD = "checkDomainMXRecord";
ZaDomain.CHECK_AUTH_CONFIG = "checkExchangeAuthConfig";
ZaDomain.RIGHT_GET_DOMAIN_QUOTA = "getDomainQuotaUsage";
ZaDomain.RIGHT_CREATE_GROUP = "createGroup";
ZaDomain.RIGHT_LIST_GROUP = "listGroup";
ZaDomain.cacheCounter = 0;
ZaDomain.staticDomainByNameCacheTable = {};
ZaDomain.staticDomainByIdCacheTable = {};
ZaDomain.putDomainToCache = function(domain) {
	if(ZaDomain.cacheCounter==100) {
		ZaDomain.staticDomainByNameCacheTable = {};
		ZaDomain.staticDomainByIdCacheTable = {};
		ZaDomain.cacheCounter = 0;
	}
		
	if(!ZaDomain.staticDomainByNameCacheTable[domain.name] || !ZaDomain.staticDomainByIdCacheTable[domain.id]) {
		ZaDomain.cacheCounter++;
	}

    	if(domain.name)
    		ZaDomain.staticDomainByNameCacheTable[domain.name] = domain;
  	
	if(domain.id)
    		ZaDomain.staticDomainByIdCacheTable[domain.id] = domain;
}
ZaDomain.compareACLs = function (val1, val2) {
	if(AjxUtil.isEmpty(val1.name) && AjxUtil.isEmpty(val2.name)) {
		if(AjxUtil.isEmpty(val1.gt) && AjXUtil.isEmpty(val2.gt)) {
			return 0;
		}
		
		if(val1.gt == val2.gt) 
			return 0;
		
		if(val1.gt < val2.gt)
			return -1;

		if(val1.gt > val2.gt)
			return 1;
	} else {
		if(val1.gt == val2.gt) {
			if(val1.name == val2.name)
				return 0;
			if(val1.name < val2.name)
				return -1;
			if(val1.name > val2.name)
				return 1;	
		} else {
			if(val1.gt == val2.gt) 
				return 0;
			
			if(val1.gt < val2.gt)
				return -1;
	
			if(val1.gt > val2.gt)
				return 1;
		}	
	}		
}
//Use ZaSearch.SearchDirectory
//In order to keep the domain list synchronized with server, we use synchronous call here.
ZaDomain.getAll =
function(target, defaultParams) {
	var query = "";
        if(!ZaZimbraAdmin.hasGlobalDomainListAccess()) {
            var domainNameList = ZaApp.getInstance()._domainNameList;
            if(domainNameList && domainNameList instanceof Array) {
                for(var i = 0; i < domainNameList.length; i++) {
                    if(!target || domainNameList[i].indexOf(target) != -1)
                    query += "(" + ZaDomain.A_domainName + "=" + domainNameList[i] + ")";
                }
                if(domainNameList.length > 1)
                    query = "(|" + query + ")";
            }
        } else
	    if(target) query = "(" + ZaDomain.A_domainName + "=*" + target + "*)";
	var params = {
    	query: query,
		types:[ZaSearch.DOMAINS],
		sortBy:ZaDomain.A_domainName,
		offset:"0",
		attrs:[ZaDomain.A_domainName,ZaDomain.A_zimbraDomainStatus,ZaItem.A_zimbraId, ZaDomain.A_domainType, ZaDomain.A_AuthMech],
		sortAscending:"1",
		limit:ZaDomain.MAXSEARCHRESULTS,
		ignoreTooManyResultsException: true,
		exceptionFrom: "ZaDomain.getAll",
		controller: ZaApp.getInstance().getCurrentController()
	};
	if (defaultParams) {
		if (defaultParams.limit) {
			params.limit = defaultParams.limit;
		}
		if (defaultParams.callback) {
			params.callback = ZaDomain._getAllCallback.bind(window, defaultParams.callback);
		}
	}
	var response = ZaSearch.searchDirectory(params);
	if (response) {
		return ZaDomain._getAllCallback(false, response);
	}
};

ZaDomain._getAllCallback = function(callback, response) {
	var responseBody = response.isZmCsfeResult ? response.getResponse().Body : response.Body;
	var searchDirectoryResponse = responseBody && responseBody.SearchDirectoryResponse;
	var list = new ZaItemList(ZaDomain);
	if(searchDirectoryResponse != null) {
		ZaSearch.TOO_MANY_RESULTS_FLAG = false;
		list.loadFromJS(searchDirectoryResponse);
	}
	if (callback) {
		callback(list);
	}
	return list;
};

/**
* Creates a new ZaDomain. This method makes SOAP request (CreateDomainRequest) to create a new domain record in LDAP. 
* @param attrs
* @param name 
* @return ZaDomain
**/
ZaDomain.createMethod =
function(tmpObj, newDomain) {

	if(tmpObj.attrs == null) {
		//show error msg
		ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_UNKNOWN, null);
		return null;	
	}
	
	//name
	if(tmpObj.attrs[ZaDomain.A_domainName] ==null || tmpObj.attrs[ZaDomain.A_domainName].length < 1) {
		//show error msg
		ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_DOMAIN_NAME_REQUIRED);
		return null;
	}
	tmpObj.name = tmpObj.attrs[ZaDomain.A_domainName];
	//check values
	if(!AjxUtil.isEmpty(tmpObj.attrs[ZaDomain.A_zimbraGalMaxResults]) && !AjxUtil.isNonNegativeLong(tmpObj.attrs[ZaDomain.A_zimbraGalMaxResults])) {
		//show error msg
		ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_INVALID_VALUE_FOR , [ZaMsg.NAD_GalMaxResults]));
		return null;
	}
	
	if(tmpObj.name.length > 256 || tmpObj.attrs[ZaDomain.A_domainName].length > 256) {
		//show error msg
		ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_DOMAIN_NAME_TOOLONG);
		return null;
	}
	
	if(tmpObj.attrs[ZaDomain.A_zimbraGalMode]!=ZaDomain.GAL_Mode_internal) {	
		//check that Filter is provided and at least one server
		if(!tmpObj.attrs[ZaDomain.A_GalLdapFilter]) {
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_SEARCH_FILTER_REQUIRED);			
			return null;
		}
		if(!tmpObj.attrs[ZaDomain.A_GalLdapURL] || tmpObj.attrs[ZaDomain.A_GalLdapURL].length < 1) {
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_LDAP_URL_REQUIRED);					
			return null;
		}
	} 	
	if(tmpObj.attrs[ZaDomain.A_AuthMech]!=ZaDomain.AuthMech_zimbra) {	
		if(!tmpObj.attrs[ZaDomain.A_AuthLdapURL]) {
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_LDAP_URL_REQUIRED);
			return null;
		}
	}
	/*var domainRegEx = AjxUtil.DOMAIN_NAME_FULL_RE;
	if( !domainRegEx.test(tmpObj.attrs[ZaDomain.A_domainName]) ) {
		//show error msg
		ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_DOMAIN_NAME_INVALID);
		return null;
	}
	var nonAlphaNumEx = /[^a-zA-Z0-9\-\.]+/;
	if(nonAlphaNumEx.test(tmpObj.attrs[ZaDomain.A_domainName]) ) {
		//show error msg
		ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_DOMAIN_NAME_INVALID);
		return null;
	}*/	

	var soapDoc = AjxSoapDoc.create("CreateDomainRequest", ZaZimbraAdmin.URN, null);
	soapDoc.set("name", tmpObj.attrs[ZaDomain.A_domainName]);
	var attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraGalMode]);
	attr.setAttribute("n", ZaDomain.A_zimbraGalMode);	

	attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraGalMaxResults]);
	attr.setAttribute("n", ZaDomain.A_zimbraGalMaxResults);

	attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_notes]);
	attr.setAttribute("n", ZaDomain.A_notes);	

	// help URL
    if(tmpObj.attrs[ZaDomain.A_zimbraHelpAdminURL]) {
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraHelpAdminURL]);
        attr.setAttribute("n", ZaDomain.A_zimbraHelpAdminURL);
    }
    if(tmpObj.attrs[ZaDomain.A_zimbraHelpDelegatedURL]) {
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraHelpDelegatedURL]);
        attr.setAttribute("n", ZaDomain.A_zimbraHelpDelegatedURL);
    }
	// login / logout URL
    if(tmpObj.attrs[ZaDomain.A_zimbraAdminConsoleLoginURL]) {
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAdminConsoleLoginURL]);
        attr.setAttribute("n", ZaDomain.A_zimbraAdminConsoleLoginURL);
    }
    if(tmpObj.attrs[ZaDomain.A_zimbraAdminConsoleLogoutURL]) {
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAdminConsoleLogoutURL]);
        attr.setAttribute("n", ZaDomain.A_zimbraAdminConsoleLogoutURL);
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraSSLCertificate]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraSSLCertificate]);
        attr.setAttribute("n", ZaDomain.A_zimbraSSLCertificate);
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraSSLPrivateKey]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraSSLPrivateKey]);
        attr.setAttribute("n", ZaDomain.A_zimbraSSLPrivateKey);
    }

	if(tmpObj.attrs[ZaDomain.A_zimbraAuthLdapStartTlsEnabled]) {
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAuthLdapStartTlsEnabled]);
		attr.setAttribute("n", ZaDomain.A_zimbraAuthLdapStartTlsEnabled);	
	}
		
	if(tmpObj.attrs[ZaDomain.A_AuthLdapURL]) {
		var temp = tmpObj.attrs[ZaDomain.A_AuthLdapURL].join(" ");
		attr = soapDoc.set("a", temp);
		attr.setAttribute("n", ZaDomain.A_AuthLdapURL);	
				
		if(tmpObj.attrs[ZaDomain.A_zimbraAuthLdapStartTlsEnabled] == "TRUE" && tmpObj.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_ldap) {
			//check that we don't have ldaps://
			if(temp.indexOf("ldaps://") > -1) {
				ZaApp.getInstance().getCurrentController().popupWarningDialog(ZaMsg.Domain_WarningStartTLSIgnored)
			}		
		}		
	}
	
	attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_description]);
	attr.setAttribute("n", ZaDomain.A_description);		
    
	if(tmpObj.attrs[ZaDomain.A_zimbraBasicAuthRealm]){
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraBasicAuthRealm]);
        	attr.setAttribute("n", ZaDomain.A_zimbraBasicAuthRealm);
	}

	if(tmpObj.attrs[ZaDomain.A_zimbraGalMode] != ZaDomain.GAL_Mode_internal) {
		temp = tmpObj.attrs[ZaDomain.A_GalLdapURL].join(" ");
		attr = soapDoc.set("a", temp);
		attr.setAttribute("n", ZaDomain.A_GalLdapURL);	

		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_GalLdapSearchBase]);
		attr.setAttribute("n", ZaDomain.A_GalLdapSearchBase);	

		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_GalLdapBindDn]);
		attr.setAttribute("n", ZaDomain.A_GalLdapBindDn);	

		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_GalLdapBindPassword]);
		attr.setAttribute("n", ZaDomain.A_GalLdapBindPassword);	

		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_GalLdapFilter]);
		attr.setAttribute("n", ZaDomain.A_GalLdapFilter);	
		
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraGalAutoCompleteLdapFilter]);
		attr.setAttribute("n", ZaDomain.A_zimbraGalAutoCompleteLdapFilter);			
	}

	if(tmpObj.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_ad) {
		//set bind DN to default for AD
		attr = soapDoc.set("a", "%u@"+tmpObj.attrs[ZaDomain.A_AuthADDomainName]);
		attr.setAttribute("n", ZaDomain.A_AuthLdapUserDn);	
	} else if(tmpObj.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_ldap) {
	
	/*	if(tmpObj.attrs[ZaDomain.A_AuthLdapSearchFilter] ==null || tmpObj.attrs[ZaDomain.A_AuthLdapSearchFilter].length < 1) {
			//show error msg
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_SEARCH_FILTER_REQUIRED);
			return null;
		}
	*/
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_AuthLdapSearchFilter]);
		attr.setAttribute("n", ZaDomain.A_AuthLdapSearchFilter);
			
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_AuthLdapSearchBase]);
		attr.setAttribute("n", ZaDomain.A_AuthLdapSearchBase);	
		
		if(tmpObj[ZaDomain.A_AuthUseBindPassword] && tmpObj[ZaDomain.A_AuthUseBindPassword] == "TRUE") {
			attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_AuthLdapSearchBindDn]);
			attr.setAttribute("n", ZaDomain.A_AuthLdapSearchBindDn);	
			
			attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_AuthLdapSearchBindPassword]);
			attr.setAttribute("n", ZaDomain.A_AuthLdapSearchBindPassword);			
		}
	}

	if(tmpObj.attrs[ZaDomain.A_AuthMech] != ZaDomain.AuthMech_zimbra) {
		if(tmpObj.attrs[ZaDomain.A_zimbraAuthFallbackToLocal]) {
               		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAuthFallbackToLocal]);
               		attr.setAttribute("n", ZaDomain.A_zimbraAuthFallbackToLocal);
		}
		if(tmpObj.attrs[ZaDomain.A_zimbraPasswordChangeListener]) {
               		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraPasswordChangeListener]);
               		attr.setAttribute("n", ZaDomain.A_zimbraPasswordChangeListener);
		}
	}
	var attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_AuthMech]);
	attr.setAttribute("n", ZaDomain.A_AuthMech);	

	if(tmpObj.attrs[ZaDomain.A_domainDefaultCOSId]) {
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_domainDefaultCOSId]);
		attr.setAttribute("n", ZaDomain.A_domainDefaultCOSId);	
	}
	
	if(tmpObj.attrs[ZaDomain.A_zimbraPublicServiceHostname]) {
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraPublicServiceHostname]);
		attr.setAttribute("n", ZaDomain.A_zimbraPublicServiceHostname);
	}

    if(tmpObj.attrs[ZaDomain.A_zimbraPublicServiceProtocol]) {
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraPublicServiceProtocol]);
        attr.setAttribute("n", ZaDomain.A_zimbraPublicServiceProtocol);
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraPublicServicePort]) {
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraPublicServicePort]);
        attr.setAttribute("n", ZaDomain.A_zimbraPublicServicePort);
    }
		
	
	if(tmpObj.attrs[ZaDomain.A_zimbraDNSCheckHostname]) {
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraDNSCheckHostname]);
		attr.setAttribute("n", ZaDomain.A_zimbraDNSCheckHostname);	
	}
	
	if(tmpObj.attrs[ZaDomain.A_zimbraAdminConsoleDNSCheckEnabled]) {
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAdminConsoleDNSCheckEnabled]);
		attr.setAttribute("n", ZaDomain.A_zimbraAdminConsoleDNSCheckEnabled);	
	}

	if(tmpObj.attrs[ZaDomain.A_zimbraFeatureCalendarReminderDeviceEmailEnabled]) {
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraFeatureCalendarReminderDeviceEmailEnabled]);
		attr.setAttribute("n", ZaDomain.A_zimbraFeatureCalendarReminderDeviceEmailEnabled);
	}

    if(tmpObj.attrs[ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled]) {
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled]);
		attr.setAttribute("n", ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled);
	}

    if(tmpObj.attrs[ZaDomain.A_zimbraAdminConsoleLDAPAuthEnabled]) {
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAdminConsoleLDAPAuthEnabled]);
		attr.setAttribute("n", ZaDomain.A_zimbraAdminConsoleLDAPAuthEnabled);
	}

    if(tmpObj.attrs[ZaDomain.A_zimbraDomainStatus]) {
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraDomainStatus]);
		attr.setAttribute("n", ZaDomain.A_zimbraDomainStatus);	
	}
		
	if(tmpObj.attrs[ZaDomain.A_domainMaxAccounts]) {
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_domainMaxAccounts]);
		attr.setAttribute("n", ZaDomain.A_domainMaxAccounts);	
	}

	if(tmpObj.attrs[ZaDomain.A_zimbraVirtualHostname]) {
		if(tmpObj.attrs[ZaDomain.A_zimbraVirtualHostname] instanceof Array) {
			var cnt = tmpObj.attrs[ZaDomain.A_zimbraVirtualHostname].length;
			for(var ix=0; ix<cnt; ix++) {
				attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraVirtualHostname][ix]);
				attr.setAttribute("n", ZaDomain.A_zimbraVirtualHostname);					
			}
		} else {
			attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraVirtualHostname]);
			attr.setAttribute("n", ZaDomain.A_zimbraVirtualHostname);					
		}
	}
	
    if(tmpObj.attrs[ZaDomain.A_zimbraMailAddressValidationRegex]) {
            if(tmpObj.attrs[ZaDomain.A_zimbraMailAddressValidationRegex] instanceof Array) {
                    var cnt = tmpObj.attrs[ZaDomain.A_zimbraMailAddressValidationRegex].length;
                    for(var ix=0; ix<cnt; ix++) {
                            attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraMailAddressValidationRegex][ix]);
                            attr.setAttribute("n", ZaDomain.A_zimbraMailAddressValidationRegex);
                    }
            } else {
                    attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraMailAddressValidationRegex]);
                    attr.setAttribute("n", ZaDomain.A_zimbraMailAddressValidationRegex);
            }
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraAuthKerberos5Realm]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAuthKerberos5Realm]);
        attr.setAttribute("n", ZaDomain.A_zimbraAuthKerberos5Realm);
    }

    if (tmpObj.attrs[ZaDomain.A_zimbraForceClearCookies]) {
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraForceClearCookies]);
        attr.setAttribute("n", ZaDomain.A_zimbraForceClearCookies);
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURL]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURL]);
        attr.setAttribute("n", ZaDomain.A_zimbraWebClientLoginURL);
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURL]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURL]);
        attr.setAttribute("n", ZaDomain.A_zimbraWebClientLogoutURL);
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraReverseProxyClientCertMode]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraReverseProxyClientCertMode]);
        attr.setAttribute("n", ZaDomain.A_zimbraReverseProxyClientCertMode);
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraMailSSLClientCertPrincipalMap]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraMailSSLClientCertPrincipalMap]);
        attr.setAttribute("n", ZaDomain.A_zimbraMailSSLClientCertPrincipalMap);
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraReverseProxyClientCertCA]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraReverseProxyClientCertCA]);
        attr.setAttribute("n", ZaDomain.A_zimbraReverseProxyClientCertCA);
    }

	if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA]) {
		if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA] instanceof Array) {
			var cnt = tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA].length;
			for(var ix=0; ix<cnt; ix++) {
				attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA][ix]);
				attr.setAttribute("n", ZaDomain.A_zimbraWebClientLoginURLAllowedUA);
			}
		} else {
			attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA]);
			attr.setAttribute("n", ZaDomain.A_zimbraWebClientLoginURLAllowedUA);
		}
	}

	if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA]) {
		if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA] instanceof Array) {
			var cnt = tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA].length;
			for(var ix=0; ix<cnt; ix++) {
				attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA][ix]);
				attr.setAttribute("n", ZaDomain.A_zimbraWebClientLogoutURLAllowedUA);
			}
		} else {
			attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA]);
			attr.setAttribute("n", ZaDomain.A_zimbraWebClientLogoutURLAllowedUA);
		}
	}

	if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedIP]) {
		if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedIP] instanceof Array) {
			var cnt = tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedIP].length;
			for(var ix=0; ix<cnt; ix++) {
				attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedIP][ix]);
				attr.setAttribute("n", ZaDomain.A_zimbraWebClientLoginURLAllowedIP);
			}
		} else {
			attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedIP]);
			attr.setAttribute("n", ZaDomain.A_zimbraWebClientLoginURLAllowedIP);
		}
	}

	if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedIP]) {
		if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedIP] instanceof Array) {
			var cnt = tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedIP].length;
			for(var ix=0; ix<cnt; ix++) {
				attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedIP][ix]);
				attr.setAttribute("n", ZaDomain.A_zimbraWebClientLogoutURLAllowedIP);
			}
		} else {
			attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedIP]);
			attr.setAttribute("n", ZaDomain.A_zimbraWebClientLogoutURLAllowedIP);
		}
	}

    if(tmpObj.attrs[ZaDomain.A_zimbraMailDomainQuota]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraMailDomainQuota]);
        attr.setAttribute("n", ZaDomain.A_zimbraMailDomainQuota);
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraDomainAggregateQuota]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraDomainAggregateQuota]);
        attr.setAttribute("n", ZaDomain.A_zimbraDomainAggregateQuota);
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraDomainAggregateQuotaWarnPercent]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraDomainAggregateQuotaWarnPercent]);
        attr.setAttribute("n", ZaDomain.A_zimbraDomainAggregateQuotaWarnPercent);
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraDomainAggregateQuotaWarnEmailRecipient]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraDomainAggregateQuotaWarnEmailRecipient]);
        attr.setAttribute("n", ZaDomain.A_zimbraDomainAggregateQuotaWarnEmailRecipient);
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraDomainAggregateQuotaPolicy]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraDomainAggregateQuotaPolicy]);
        attr.setAttribute("n", ZaDomain.A_zimbraDomainAggregateQuotaPolicy);
    }
	//var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_CREATE_DOMAIN
	}
	var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.CreateDomainResponse;	
	newDomain.initFromJS(resp.domain[0]);
}
ZaItem.createMethods["ZaDomain"].push(ZaDomain.createMethod);

ZaDomain.createGalAccounts = function (tmpDomainObj,newDomain) {
    if (tmpDomainObj[ZaDomain.A2_create_gal_acc] && tmpDomainObj[ZaDomain.A2_create_gal_acc]=="TRUE" && !AjxUtil.isEmpty(tmpDomainObj[ZaDomain.A2_gal_sync_accounts_set])) {
        for(var i in tmpDomainObj[ZaDomain.A2_gal_sync_accounts_set]) {
            var tmpObj = tmpDomainObj[ZaDomain.A2_gal_sync_accounts_set][i];
            if (!tmpObj)
                continue;
            if(tmpObj[ZaDomain.A2_new_gal_sync_account_name] &&
                (tmpObj[ZaDomain.A2_new_internal_gal_ds_name] || tmpObj[ZaDomain.A2_new_external_gal_ds_name])) {
                var soapDoc = AjxSoapDoc.create("BatchRequest", "urn:zimbra");
                soapDoc.setMethodAttribute("onerror", "stop");
                if(tmpObj[ZaDomain.A2_new_gal_sync_account_name].indexOf("@") < 0) {
                    tmpObj[ZaDomain.A2_new_gal_sync_account_name] = [tmpObj[ZaDomain.A2_new_gal_sync_account_name],"@",tmpDomainObj.attrs[ZaDomain.A_domainName]].join("");
                }
                if((tmpDomainObj.attrs[ZaDomain.A_zimbraGalMode] == ZaDomain.GAL_Mode_internal || tmpDomainObj.attrs[ZaDomain.A_zimbraGalMode] == ZaDomain.GAL_Mode_both)
                    && tmpObj[ZaDomain.A2_new_gal_sync_account_name] && tmpObj[ZaDomain.A2_new_internal_gal_ds_name] && tmpObj[ZaDomain.A_mailHost]) {
                    var createInternalDSDoc = soapDoc.set("CreateGalSyncAccountRequest", null, null, ZaZimbraAdmin.URN);
                    createInternalDSDoc.setAttribute("name", tmpObj[ZaDomain.A2_new_internal_gal_ds_name]);
                    createInternalDSDoc.setAttribute("folder", "_"+tmpObj[ZaDomain.A2_new_internal_gal_ds_name]);
                    createInternalDSDoc.setAttribute("type", "zimbra");
                    createInternalDSDoc.setAttribute("domain", tmpDomainObj.attrs[ZaDomain.A_domainName]);
                    createInternalDSDoc.setAttribute("server",tmpObj[ZaDomain.A_mailHost]);
                    //zimbraDataSourcePollingInterval
                    soapDoc.set("account", tmpObj[ZaDomain.A2_new_gal_sync_account_name],createInternalDSDoc).setAttribute("by","name");
                    soapDoc.set("a", tmpObj[ZaDomain.A2_new_internal_gal_polling_interval],createInternalDSDoc).setAttribute("n",ZaDataSource.A_zimbraDataSourcePollingInterval);
                }

                if(tmpDomainObj.attrs[ZaDomain.A_zimbraGalMode] != ZaDomain.GAL_Mode_internal
                    && tmpObj[ZaDomain.A2_new_gal_sync_account_name] && tmpObj[ZaDomain.A2_new_external_gal_ds_name] && tmpObj[ZaDomain.A_mailHost]) {
                    var createExternalDSDoc = soapDoc.set("CreateGalSyncAccountRequest", null, null, ZaZimbraAdmin.URN);
                    createExternalDSDoc.setAttribute("name", tmpObj[ZaDomain.A2_new_external_gal_ds_name]);
                    createExternalDSDoc.setAttribute("folder", "_"+tmpObj[ZaDomain.A2_new_external_gal_ds_name]);
                    createExternalDSDoc.setAttribute("type", "ldap");
                    createExternalDSDoc.setAttribute("domain", tmpDomainObj.attrs[ZaDomain.A_domainName]);
                    createExternalDSDoc.setAttribute("server",tmpObj[ZaDomain.A_mailHost]);
                    soapDoc.set("account", tmpObj[ZaDomain.A2_new_gal_sync_account_name],createExternalDSDoc).setAttribute("by","name");
                    soapDoc.set("a", tmpObj[ZaDomain.A2_new_external_gal_polling_interval],createExternalDSDoc).setAttribute("n",ZaDataSource.A_zimbraDataSourcePollingInterval);
                }

                try {
                    var params = new Object();
                    params.soapDoc = soapDoc;
                    var reqMgrParams ={
                        controller:ZaApp.getInstance().getCurrentController(),
                        busyMsg : ZaMsg.BUSY_CREATING_GALDS,
                        showBusy:true
                    }
                    var respObj = ZaRequestMgr.invoke(params, reqMgrParams);
                    if(respObj.isException && respObj.isException()) {
                        ZaApp.getInstance().getCurrentController()._handleException(respObj.getException(), "ZaDomain.createGalAccounts", null, false);
                        hasError  = true ;
                        lastException = ex ;
                    } else if(respObj.Body.BatchResponse.Fault) {
                        var fault = respObj.Body.BatchResponse.Fault;
                        if(fault instanceof Array)
                            fault = fault[0];

                        if (fault) {
                            // JS response with fault
                            var ex = ZmCsfeCommand.faultToEx(fault);
                            ZaApp.getInstance().getCurrentController()._handleException(ex,"ZaDomain.createGalAccounts", null, false);
                            hasError = true ;
                            lastException = ex ;
                        }
                    } else {
                        var batchResp = respObj.Body.BatchResponse;
                    }
                } catch (ex) {
                    //show the error and go on
                    ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDomain.createGalAccounts", null, false);
                    hasError = true ;
                    lastException = ex ;
                }
            }
        }
    }
}
ZaItem.createMethods["ZaDomain"].push(ZaDomain.createGalAccounts);
/*
ZaDomain.prototype.loadNewObjectDefaults = function (domainBy, domain, cosBy, cos) {
	ZaItem.prototype.loadNewObjectDefaults.call(this,domainBy, domain, cosBy, cos);
	this[ZaDomain.A2_new_gal_sync_account_name] = "galsync";
	this[ZaDomain.A2_new_internal_gal_ds_name] = "zimbra";
	this[ZaDomain.A2_new_external_gal_ds_name] = "ldap";
		
} */
ZaDomain.canConfigureAuth = function (obj) {
	return (ZaItem.hasRight(ZaDomain.CHECK_AUTH_CONFIG,obj) 
		&& ZaItem.hasWritePermission(ZaDomain.A_AuthMech,obj) 
		&& ZaItem.hasWritePermission(ZaDomain.A_AuthLdapURL,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_AuthLdapUserDn,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_AuthLdapSearchBase,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_AuthLdapSearchFilter,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_AuthLdapSearchBindDn,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_AuthLdapSearchBindPassword,obj));
}
ZaDomain.canConfigureGal = function (obj) {
	return (ZaItem.hasWritePermission(ZaDomain.A_zimbraGalAccountId,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraGalMode,obj) 
		&& ZaItem.hasWritePermission(ZaDomain.A_GalLdapURL,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_GalLdapSearchBase,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_GalLdapBindDn,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_GalLdapBindPassword,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_GalLdapFilter,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraGalAutoCompleteLdapFilter,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraGalSyncLdapURL,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraGalSyncLdapSearchBase,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraGalSyncLdapFilter,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraGalSyncLdapBindDn,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraGalSyncLdapBindPassword,obj));
}
ZaDomain.canConfigureAutoProv = function (obj) {
	return (ZaItem.hasRight(ZaDomain.A_zimbraAutoProvMode,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraAutoProvAuthMech,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraAutoProvLdapURL,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraAutoProvLdapAdminBindDn,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraAutoProvLdapAdminBindPassword,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraAutoProvLdapSearchBase,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraAutoProvLdapSearchFilter,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraAutoProvLdapBindDn,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraAutoProvAccountNameMap,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraAutoProvAttrMap,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraAutoProvNotificationFromAddress,obj)
		&& ZaItem.hasWritePermission(ZaDomain.A_zimbraAutoProvBatchSize,obj));
}

ZaDomain.testAuthSettings = 
function (obj, callback) {
	var soapDoc = AjxSoapDoc.create("CheckAuthConfigRequest", ZaZimbraAdmin.URN, null);
	var attr = soapDoc.set("a", obj.attrs[ZaDomain.A_AuthMech]);
	attr.setAttribute("n", ZaDomain.A_AuthMech);
	
	var temp = obj.attrs[ZaDomain.A_AuthLdapURL].join(" ");
	attr = soapDoc.set("a", temp);
	attr.setAttribute("n", ZaDomain.A_AuthLdapURL);	
	
	if(obj.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_ad) {	
		attr = soapDoc.set("a", "%u@"+obj.attrs[ZaDomain.A_AuthADDomainName]);
		attr.setAttribute("n", ZaDomain.A_AuthLdapUserDn);	
	}
	if(obj.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_ldap) {
		if(obj.attrs[ZaDomain.A_zimbraAuthLdapStartTlsEnabled]) {
			attr = soapDoc.set("a", obj.attrs[ZaDomain.A_zimbraAuthLdapStartTlsEnabled]);
			attr.setAttribute("n", ZaDomain.A_zimbraAuthLdapStartTlsEnabled);	
		}			
			
		if(obj.attrs[ZaDomain.A_zimbraAuthLdapStartTlsEnabled] == "TRUE") {
			//check that we don't have ldaps://
			if(temp.indexOf("ldaps://") > -1) {
				ZaApp.getInstance().getCurrentController().popupWarningDialog(ZaMsg.Domain_WarningStartTLSIgnored)
			}		
		}
					
		attr = soapDoc.set("a", obj.attrs[ZaDomain.A_AuthLdapSearchBase]);
		attr.setAttribute("n", ZaDomain.A_AuthLdapSearchBase);
	
		attr = soapDoc.set("a", obj.attrs[ZaDomain.A_AuthLdapSearchFilter]);
		attr.setAttribute("n", ZaDomain.A_AuthLdapSearchFilter);

		attr = soapDoc.set("a", obj.attrs[ZaDomain.A_AuthLdapSearchBindDn]);
		attr.setAttribute("n", ZaDomain.A_AuthLdapSearchBindDn);
	
		attr = soapDoc.set("a", obj.attrs[ZaDomain.A_AuthLdapSearchBindPassword]);
		attr.setAttribute("n", ZaDomain.A_AuthLdapSearchBindPassword);
	}

	
	attr = soapDoc.set("name", obj[ZaDomain.A_AuthTestUserName]);
	attr = soapDoc.set("password", obj[ZaDomain.A_AuthTestPassword]);	
	
	var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;
	params.noAuthToken = true;	
	params.asyncMode = true;
	params.callback = callback;
	command.invoke(params);	

}

ZaDomain.getRevokeNotebookACLsRequest = function (permsToRevoke, soapDoc) {
	var cnt = permsToRevoke.length;
	for(var i = 0; i < cnt; i++) {
		var folderActionRequest = soapDoc.set("FolderActionRequest", null, null, "urn:zimbraMail");			
		var actionEl = soapDoc.set("action", "",folderActionRequest);
		actionEl.setAttribute("id", ZaDomain.WIKI_FOLDER_ID);	
		actionEl.setAttribute("op", "!grant");	
		actionEl.setAttribute("zid", permsToRevoke[i].zid);				
	}
}

ZaDomain.getGrantNotebookACLsRequest = function (obj, soapDoc) {
	var folderActionRequest = soapDoc.set("FolderActionRequest", null, null, "urn:zimbraMail");
	var actionEl = soapDoc.set("action", "",folderActionRequest);
	actionEl.setAttribute("id", ZaDomain.WIKI_FOLDER_ID);	
	actionEl.setAttribute("op", "grant");	
	var grantEl = soapDoc.set("grant", "",actionEl);	
	grantEl.setAttribute("gt", obj.gt);
	if(obj.name) {
		grantEl.setAttribute("d", obj.name);
	}
	var perms = "";
	for(var a in obj.acl) {
		if(obj.acl[a]==1)
			perms+=a;
	}
	grantEl.setAttribute("perm", perms);				
}

ZaDomain.testSyncSettings = function (obj, callback){
	var soapDoc = AjxSoapDoc.create("CheckGalConfigRequest", ZaZimbraAdmin.URN, null);
	var attr = soapDoc.set("a", ZaDomain.GAL_Mode_external);
	attr.setAttribute("n", ZaDomain.A_zimbraGalMode);

	var temp = obj.attrs[ZaDomain.A_GalLdapURL].join(" ");
	attr = soapDoc.set("a", temp);
	attr.setAttribute("n", ZaDomain.A_GalLdapURL);	
	
	attr = soapDoc.set("a", obj.attrs[ZaDomain.A_GalLdapSearchBase]);
	attr.setAttribute("n", ZaDomain.A_GalLdapSearchBase);	

	attr = soapDoc.set("a", obj.attrs[ZaDomain.A_GalLdapFilter]);
	attr.setAttribute("n", ZaDomain.A_GalLdapFilter);	

	if(obj.attrs[ZaDomain.A_GalLdapBindDn]) {
		attr = soapDoc.set("a", obj.attrs[ZaDomain.A_GalLdapBindDn]);
		attr.setAttribute("n", ZaDomain.A_GalLdapBindDn);
	}

	if(obj.attrs[ZaDomain.A_GalLdapBindPassword]) {
		attr = soapDoc.set("a", obj.attrs[ZaDomain.A_GalLdapBindPassword]);
		attr.setAttribute("n", ZaDomain.A_GalLdapBindPassword);
	}

//	
	if(obj.attrs[ZaDomain.A_GALSyncUseGALSearch]=="FALSE") {
		if(obj.attrs[ZaDomain.A_zimbraGalSyncLdapURL]) {
			var temp = obj.attrs[ZaDomain.A_zimbraGalSyncLdapURL].join(" ");
			attr = soapDoc.set("a", temp);
			attr.setAttribute("n", ZaDomain.A_zimbraGalSyncLdapURL);	
		}
		
		if(obj.attrs[ZaDomain.A_zimbraGalSyncLdapSearchBase]) {
			attr = soapDoc.set("a", obj.attrs[ZaDomain.A_zimbraGalSyncLdapSearchBase]);
			attr.setAttribute("n", ZaDomain.A_zimbraGalSyncLdapSearchBase);	
		}
	
		if(obj.attrs[ZaDomain.A_zimbraGalSyncLdapFilter]) {
			attr = soapDoc.set("a", obj.attrs[ZaDomain.A_zimbraGalSyncLdapFilter]);
			attr.setAttribute("n", ZaDomain.A_zimbraGalSyncLdapFilter);	
		}
	
		if(obj.attrs[ZaDomain.A_zimbraGalSyncLdapBindDn]) {
			attr = soapDoc.set("a", obj.attrs[ZaDomain.A_zimbraGalSyncLdapBindDn]);
			attr.setAttribute("n", ZaDomain.A_zimbraGalSyncLdapBindDn);
		}
	
		if(obj.attrs[ZaDomain.A_zimbraGalSyncLdapBindPassword]) {
			attr = soapDoc.set("a", obj.attrs[ZaDomain.A_zimbraGalSyncLdapBindPassword]);
			attr.setAttribute("n", ZaDomain.A_zimbraGalSyncLdapBindPassword);
		}
	}

	soapDoc.set("action", "sync");	
	var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;	
	params.asyncMode = true;
	params.noAuthToken = true;
	params.callback = callback;
	command.invoke(params);	
}

ZaDomain.testGALSettings = function (obj, callback, sampleQuery) {
	
	//search
	var soapDoc = AjxSoapDoc.create("CheckGalConfigRequest", ZaZimbraAdmin.URN, null);
	var attr = soapDoc.set("a", ZaDomain.GAL_Mode_external);
	attr.setAttribute("n", ZaDomain.A_zimbraGalMode);

	var temp = obj.attrs[ZaDomain.A_GalLdapURL].join(" ");
	attr = soapDoc.set("a", temp);
	attr.setAttribute("n", ZaDomain.A_GalLdapURL);	
	
	attr = soapDoc.set("a", obj.attrs[ZaDomain.A_GalLdapSearchBase]);
	attr.setAttribute("n", ZaDomain.A_GalLdapSearchBase);	

	attr = soapDoc.set("a", obj.attrs[ZaDomain.A_GalLdapFilter]);
	attr.setAttribute("n", ZaDomain.A_GalLdapFilter);	

	if(obj.attrs[ZaDomain.A_GalLdapBindDn]) {
		attr = soapDoc.set("a", obj.attrs[ZaDomain.A_GalLdapBindDn]);
		attr.setAttribute("n", ZaDomain.A_GalLdapBindDn);
	}

	if(obj.attrs[ZaDomain.A_GalLdapBindPassword]) {
		attr = soapDoc.set("a", obj.attrs[ZaDomain.A_GalLdapBindPassword]);
		attr.setAttribute("n", ZaDomain.A_GalLdapBindPassword);
	}
	soapDoc.set("query", "*" + sampleQuery + "*");
	soapDoc.set("action", "search");
	
	var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;
	params.noAuthToken = true;	
	params.asyncMode = true;
	params.callback = callback;
	command.invoke(params);
}

ZaDomain.modifyGalSettings = 
function(tmpObj) {
	var soapDoc = AjxSoapDoc.create("BatchRequest", "urn:zimbra");
	soapDoc.setMethodAttribute("onerror", "stop");
    // Create New GAl Account
	if(tmpObj[ZaDomain.A2_create_gal_acc] && tmpObj[ZaDomain.A2_create_gal_acc]=="TRUE" && !AjxUtil.isEmpty(tmpObj[ZaDomain.A2_gal_sync_accounts_set])) {
        for(var i in tmpObj[ZaDomain.A2_gal_sync_accounts_set]) {
            var newGalAccount = tmpObj[ZaDomain.A2_gal_sync_accounts_set][i];
            if(newGalAccount[ZaDomain.A2_new_gal_sync_account_name].indexOf("@") < 0) {
                newGalAccount[ZaDomain.A2_new_gal_sync_account_name] = [newGalAccount[ZaDomain.A2_new_gal_sync_account_name],"@",tmpObj.attrs[ZaDomain.A_domainName]].join("");
            }
            if((tmpObj.attrs[ZaDomain.A_zimbraGalMode] == ZaDomain.GAL_Mode_internal || tmpObj.attrs[ZaDomain.A_zimbraGalMode] == ZaDomain.GAL_Mode_both)
                && newGalAccount[ZaDomain.A2_new_internal_gal_ds_name] && newGalAccount[ZaDomain.A_mailHost]) {
                var createInternalDSDoc = soapDoc.set("CreateGalSyncAccountRequest", null, null, ZaZimbraAdmin.URN);
                createInternalDSDoc.setAttribute("name", newGalAccount[ZaDomain.A2_new_internal_gal_ds_name]);
                createInternalDSDoc.setAttribute("folder", "_"+newGalAccount[ZaDomain.A2_new_internal_gal_ds_name]);
                createInternalDSDoc.setAttribute("type", "zimbra");
                createInternalDSDoc.setAttribute("domain", tmpObj.attrs[ZaDomain.A_domainName]);
                createInternalDSDoc.setAttribute("server",newGalAccount[ZaDomain.A_mailHost]);
                if(newGalAccount[ZaDomain.A2_new_gal_sync_account_name]) {
                    soapDoc.set("account", newGalAccount[ZaDomain.A2_new_gal_sync_account_name],createInternalDSDoc).setAttribute("by","name");

                }  else if (tmpObj[ZaDomain.A2_gal_sync_accounts] && tmpObj[ZaDomain.A2_gal_sync_accounts][i]) {
                    soapDoc.set("account", tmpObj[ZaDomain.A2_gal_sync_accounts][i].name,createExternalDSDoc).setAttribute("by","name");
                }

                if(newGalAccount[ZaDomain.A2_new_internal_gal_polling_interval]) {
                    soapDoc.set("a", newGalAccount[ZaDomain.A2_new_internal_gal_polling_interval],createInternalDSDoc).setAttribute("n",ZaDataSource.A_zimbraDataSourcePollingInterval);
                }
            }

            if(tmpObj.attrs[ZaDomain.A_zimbraGalMode] != ZaDomain.GAL_Mode_internal
                && newGalAccount[ZaDomain.A2_new_external_gal_ds_name] && newGalAccount[ZaDomain.A_mailHost]) {
                var createExternalDSDoc = soapDoc.set("CreateGalSyncAccountRequest", null, null, ZaZimbraAdmin.URN);
                createExternalDSDoc.setAttribute("name", newGalAccount[ZaDomain.A2_new_external_gal_ds_name]);
                createExternalDSDoc.setAttribute("folder", "_"+newGalAccount[ZaDomain.A2_new_external_gal_ds_name]);
                createExternalDSDoc.setAttribute("type", "ldap");
                createExternalDSDoc.setAttribute("domain", tmpObj.attrs[ZaDomain.A_domainName]);
                createExternalDSDoc.setAttribute("server",newGalAccount[ZaDomain.A_mailHost]);
                if(newGalAccount[ZaDomain.A2_new_gal_sync_account_name]) {
                    soapDoc.set("account", newGalAccount[ZaDomain.A2_new_gal_sync_account_name],createExternalDSDoc).setAttribute("by","name");
                }  else if (tmpObj[ZaDomain.A2_gal_sync_accounts] && tmpObj[ZaDomain.A2_gal_sync_accounts][i]) {
                    soapDoc.set("account", tmpObj[ZaDomain.A2_gal_sync_accounts][i].name,createExternalDSDoc).setAttribute("by","name");
                }

                if(newGalAccount[ZaDomain.A2_new_external_gal_polling_interval]) {
                    soapDoc.set("a", newGalAccount[ZaDomain.A2_new_external_gal_polling_interval],createExternalDSDoc).setAttribute("n",ZaDataSource.A_zimbraDataSourcePollingInterval);
                }/* else if(tmpObj[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds] && tmpObj[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].attrs) {
                    soapDoc.set("a", tmpObj[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval],createExternalDSDoc).setAttribute("n",ZaDataSource.A_zimbraDataSourcePollingInterval);
                }*/

            }
        }
	}

    // Modify data source of existed gal account
	if(tmpObj[ZaDomain.A2_gal_sync_accounts] && !AjxUtil.isEmpty(tmpObj[ZaDomain.A2_gal_sync_accounts])) {
        for (var i in tmpObj[ZaDomain.A2_gal_sync_accounts]) {
            var currentSyncAccount = tmpObj[ZaDomain.A2_gal_sync_accounts][i];
            if(currentSyncAccount[ZaAccount.A2_zimbra_ds]
                && currentSyncAccount[ZaAccount.A2_zimbra_ds].attrs
                && this[ZaDomain.A2_gal_sync_accounts][i][ZaAccount.A2_zimbra_ds]
                && this[ZaDomain.A2_gal_sync_accounts][i][ZaAccount.A2_zimbra_ds].attrs) {
                if(this[ZaDomain.A2_gal_sync_accounts][i][ZaAccount.A2_zimbra_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval] !=
                currentSyncAccount[ZaAccount.A2_zimbra_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval]) {
                    var modifyDSDoc = soapDoc.set("ModifyDataSourceRequest", null, null, ZaZimbraAdmin.URN);
                    soapDoc.set("id", this[ZaDomain.A2_gal_sync_accounts][i].id, modifyDSDoc);
                    var ds = soapDoc.set("dataSource", null,modifyDSDoc);
                    ds.setAttribute("id", this[ZaDomain.A2_gal_sync_accounts][i][ZaAccount.A2_zimbra_ds].id);
                    var attr = soapDoc.set("a", currentSyncAccount[ZaAccount.A2_zimbra_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval],ds);
                    attr.setAttribute("n", ZaDataSource.A_zimbraDataSourcePollingInterval);
                }

            }

            if(currentSyncAccount[ZaAccount.A2_ldap_ds]
                && currentSyncAccount[ZaAccount.A2_ldap_ds].attrs
                &&  this[ZaDomain.A2_gal_sync_accounts][i][ZaAccount.A2_ldap_ds]
                &&  this[ZaDomain.A2_gal_sync_accounts][i][ZaAccount.A2_ldap_ds].attrs) {
                if(this[ZaDomain.A2_gal_sync_accounts][i][ZaAccount.A2_ldap_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval] !=
                    currentSyncAccount[ZaAccount.A2_ldap_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval]) {
                    var modifyDSDoc = soapDoc.set("ModifyDataSourceRequest", null, null, ZaZimbraAdmin.URN);
                    soapDoc.set("id", this[ZaDomain.A2_gal_sync_accounts][i].id, modifyDSDoc);
                    var ds = soapDoc.set("dataSource", null,modifyDSDoc);
                    ds.setAttribute("id", this[ZaDomain.A2_gal_sync_accounts][i][ZaAccount.A2_ldap_ds].id);
                    var attr = soapDoc.set("a", currentSyncAccount[ZaAccount.A2_ldap_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval],ds);
                    attr.setAttribute("n", ZaDataSource.A_zimbraDataSourcePollingInterval);
                }

		}
        }
	}	
	var modifyDomainDoc = soapDoc.set("ModifyDomainRequest", null, null, ZaZimbraAdmin.URN);
	soapDoc.set("id", this.id,modifyDomainDoc);
	
	var attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraGalMode],modifyDomainDoc);
	attr.setAttribute("n", ZaDomain.A_zimbraGalMode);	

	if(tmpObj.attrs[ZaDomain.A_zimbraGalMode] != ZaDomain.GAL_Mode_internal) {
		var temp = tmpObj.attrs[ZaDomain.A_GalLdapURL].join(" ");
		attr = soapDoc.set("a", temp,modifyDomainDoc);
		attr.setAttribute("n", ZaDomain.A_GalLdapURL);	

		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_GalLdapSearchBase],modifyDomainDoc);
		attr.setAttribute("n", ZaDomain.A_GalLdapSearchBase);	

		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_GalLdapBindDn],modifyDomainDoc);
		attr.setAttribute("n", ZaDomain.A_GalLdapBindDn);	

		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_GalLdapBindPassword],modifyDomainDoc);
		attr.setAttribute("n", ZaDomain.A_GalLdapBindPassword);	

		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_GalLdapFilter],modifyDomainDoc);
		attr.setAttribute("n", ZaDomain.A_GalLdapFilter);	
		
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraGalAutoCompleteLdapFilter],modifyDomainDoc);
		attr.setAttribute("n", ZaDomain.A_zimbraGalAutoCompleteLdapFilter);		
	}
	if(tmpObj.attrs[ZaDomain.A_zimbraGalMaxResults] != tmpObj.attrs[ZaDomain.A_zimbraGalMaxResults]) {
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraGalMaxResults],modifyDomainDoc);
		attr.setAttribute("n", ZaDomain.A_zimbraGalMaxResults);	
	}

	// Fix for bug 96777
	if (tmpObj && tmpObj[ZaDomain.A2_gal_sync_accounts] &&  tmpObj[ZaDomain.A2_gal_sync_accounts][0]) {

		var  currentGalMode = this.attrs[ZaDomain.A_zimbraGalMode],
			newGalMode = tmpObj.attrs[ZaDomain.A_zimbraGalMode],
			newGalSyncDSAccount = tmpObj[ZaDomain.A2_gal_sync_accounts][0];

		if(currentGalMode === ZaDomain.GAL_Mode_internal && newGalMode === ZaDomain.GAL_Mode_both) {  // galmode changed from internal to both
			// Create a new Gal Sync DS with galtype as external
			var createExternalDSDoc = soapDoc.set("AddGalSyncDataSourceRequest", null, null, ZaZimbraAdmin.URN);
			createExternalDSDoc.setAttribute("name", newGalSyncDSAccount[ZaDomain.A2_new_external_gal_ds_name]); // DS name
			createExternalDSDoc.setAttribute("type", "ldap");
			createExternalDSDoc.setAttribute("domain", tmpObj.attrs[ZaDomain.A_domainName]);
			soapDoc.set("account", newGalSyncDSAccount.name, createExternalDSDoc).setAttribute("by","name");
			soapDoc.set("a", newGalSyncDSAccount[ZaDomain.A2_new_external_gal_polling_interval], createExternalDSDoc).setAttribute("n",ZaDataSource.A_zimbraDataSourcePollingInterval);
		}

		if ( currentGalMode === ZaDomain.GAL_Mode_external && newGalMode === ZaDomain.GAL_Mode_both) {  // galmode changed from external to both
			//  Create a new Gal Sync DS with galtype as internal
			var createInternalDSDoc = soapDoc.set("AddGalSyncDataSourceRequest", null, null, ZaZimbraAdmin.URN);
			createInternalDSDoc.setAttribute("name", newGalSyncDSAccount[ZaDomain.A2_new_internal_gal_ds_name]); // DS name
			createInternalDSDoc.setAttribute("type", "zimbra");
			createInternalDSDoc.setAttribute("domain", tmpObj.attrs[ZaDomain.A_domainName]);
			soapDoc.set("account", newGalSyncDSAccount.name, createInternalDSDoc).setAttribute("by","name");
			soapDoc.set("a", newGalSyncDSAccount[ZaDomain.A2_new_internal_gal_polling_interval], createInternalDSDoc).setAttribute("n",ZaDataSource.A_zimbraDataSourcePollingInterval);
		}
	}
		
	try {
		params = new Object();
		params.soapDoc = soapDoc;	
		var reqMgrParams ={
			controller:ZaApp.getInstance().getCurrentController(),
			busyMsg : ZaMsg.BUSY_CREATING_GALDS,
			showBusy:true
		}
		var respObj = ZaRequestMgr.invoke(params, reqMgrParams);
		if(respObj.isException && respObj.isException()) {
			ZaApp.getInstance().getCurrentController()._handleException(respObj.getException(), "ZaDomain.modifyGalSettings", null, false);
		    hasError  = true ;
            lastException = ex ;
        } else if(respObj.Body.BatchResponse.Fault) {
			var fault = respObj.Body.BatchResponse.Fault;
			if(fault instanceof Array)
				fault = fault[0];
			
			if (fault) {
				// JS response with fault
				var ex = ZmCsfeCommand.faultToEx(fault);
				ZaApp.getInstance().getCurrentController()._handleException(ex,"ZaDomain.modifyGalSettings", null, false);
                hasError = true ;
                lastException = ex ;
            }
		} else {
/*			var batchResp = respObj.Body.BatchResponse;
			var resp = batchResp.ModifyDomainResponse[0];	
			this.initFromJS(resp.domain[0]);*/
			this.refresh(false,true);
			ZaDomain.putDomainToCache(this);			
		}
	} catch (ex) {
		//show the error and go on
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDomain.modifyGalSettings", null, false);
	    hasError = true ;
        lastException = ex ;
	}			
}	

ZaDomain.modifyAuthSettings = 
function(tmpObj) {

	var soapDoc = AjxSoapDoc.create("ModifyDomainRequest", ZaZimbraAdmin.URN, null);
	soapDoc.set("id", this.id);
	
	var attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_AuthMech]);
	attr.setAttribute("n", ZaDomain.A_AuthMech);	
	
	if(tmpObj.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_ad) {
		var temp = tmpObj.attrs[ZaDomain.A_AuthLdapURL].join(" ");
		attr = soapDoc.set("a", temp);
		attr.setAttribute("n", ZaDomain.A_AuthLdapURL);	

		attr = soapDoc.set("a", "%u@"+tmpObj.attrs[ZaDomain.A_AuthADDomainName]);
		attr.setAttribute("n", ZaDomain.A_AuthLdapUserDn);

		if(tmpObj[ZaDomain.A_AuthUseBindPassword] && tmpObj[ZaDomain.A_AuthUseBindPassword] == "TRUE") {
			attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_AuthLdapSearchBindDn]);
			attr.setAttribute("n", ZaDomain.A_AuthLdapSearchBindDn);

			attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_AuthLdapSearchBindPassword]);
			attr.setAttribute("n", ZaDomain.A_AuthLdapSearchBindPassword);
		}
	} else if (tmpObj.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_ldap) {

		if(tmpObj.attrs[ZaDomain.A_zimbraAuthLdapStartTlsEnabled]) {
			attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAuthLdapStartTlsEnabled]);
			attr.setAttribute("n", ZaDomain.A_zimbraAuthLdapStartTlsEnabled);	
		}		
		
		var temp = tmpObj.attrs[ZaDomain.A_AuthLdapURL].join(" ");
		
		if(tmpObj.attrs[ZaDomain.A_zimbraAuthLdapStartTlsEnabled] == "TRUE") {
			//check that we don't have ldaps://
			if(temp.indexOf("ldaps://") > -1) {
				ZaApp.getInstance().getCurrentController().popupWarningDialog(ZaMsg.Domain_WarningStartTLSIgnored)
			}		
		}		
		attr = soapDoc.set("a", temp);
		attr.setAttribute("n", ZaDomain.A_AuthLdapURL);	

		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_AuthLdapSearchFilter]);
		attr.setAttribute("n", ZaDomain.A_AuthLdapSearchFilter);
			
		attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_AuthLdapSearchBase]);
		attr.setAttribute("n", ZaDomain.A_AuthLdapSearchBase);	
		
		if(tmpObj[ZaDomain.A_AuthUseBindPassword] && tmpObj[ZaDomain.A_AuthUseBindPassword] == "TRUE") {
			attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_AuthLdapSearchBindDn]);
			attr.setAttribute("n", ZaDomain.A_AuthLdapSearchBindDn);	
			
			attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_AuthLdapSearchBindPassword]);
			attr.setAttribute("n", ZaDomain.A_AuthLdapSearchBindPassword);			
		}
		/*attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_AuthLdapUserDn]);
		attr.setAttribute("n", ZaDomain.A_AuthLdapUserDn);	
		*/

	}

    if (tmpObj.attrs[ZaDomain.A_AuthMech] != ZaDomain.AuthMech_zimbra &&
        tmpObj[ZaDomain.A2_zimbraExternalGroupLdapEnabled] == "TRUE") {
        if (tmpObj.attrs[ZaDomain.A_zimbraExternalGroupLdapSearchBase] &&
            tmpObj.attrs[ZaDomain.A_zimbraExternalGroupLdapSearchFilter] &&
            tmpObj.attrs[ZaDomain.A_zimbraExternalGroupHandlerClass]) {
            attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraExternalGroupLdapSearchBase]);
            attr.setAttribute("n", ZaDomain.A_zimbraExternalGroupLdapSearchBase);

            attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraExternalGroupLdapSearchFilter]);
            attr.setAttribute("n", ZaDomain.A_zimbraExternalGroupLdapSearchFilter);

            attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraExternalGroupHandlerClass]);
            attr.setAttribute("n", ZaDomain.A_zimbraExternalGroupHandlerClass);

            attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAuthMechAdmin]);
            attr.setAttribute("n", ZaDomain.A_zimbraAuthMechAdmin);
        }
    }
    
    ZaDomain.modifySSOSettings(soapDoc, tmpObj); // temporarily put here, will be invoked by the new SSO Wizard in the future
    
	//var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_MODIFY_DOMAIN
	}
	var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.ModifyDomainResponse;	
	this.initFromJS(resp.domain[0]);
	ZaDomain.putDomainToCache(this);
}

ZaDomain.modifySSOSettings = function(soapDoc, tmpObj) {
    // SPNEGO configuration
    
    // virtual hosts
    if(tmpObj.attrs[ZaDomain.A_zimbraVirtualHostname]) {
        if(tmpObj.attrs[ZaDomain.A_zimbraVirtualHostname] instanceof Array) {
            var cnt = tmpObj.attrs[ZaDomain.A_zimbraVirtualHostname].length;
            for(var ix=0; ix<cnt; ix++) {
                var attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraVirtualHostname][ix]);
                attr.setAttribute("n", ZaDomain.A_zimbraVirtualHostname);
            }
        } else {
            var attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraVirtualHostname]);
            attr.setAttribute("n", ZaDomain.A_zimbraVirtualHostname);
        }
    }
    // web client login/logout URL
    if(tmpObj[ZaDomain.A2_zimbraSpnegoUAAllBrowsers] == "TRUE"
            || tmpObj[ZaDomain.A2_zimbraSpnegoUASupportedBrowsers] == "TRUE") {
        tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA] = ZaDomain.SPNEGO_SUPPORT_UA;
        tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA] = ZaDomain.SPNEGO_SUPPORT_UA;
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA]) {
        if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA] instanceof Array) {
            var cnt = tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA].length;
            for(var ix=0; ix<cnt; ix++) {
                var attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA][ix]);
                attr.setAttribute("n", ZaDomain.A_zimbraWebClientLoginURLAllowedUA);
            }
        } else {
            var attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA]);
            attr.setAttribute("n", ZaDomain.A_zimbraWebClientLoginURLAllowedUA);
        }
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA]) {
        if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA] instanceof Array) {
            var cnt = tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA].length;
            for(var ix=0; ix<cnt; ix++) {
                var attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA][ix]);
                attr.setAttribute("n", ZaDomain.A_zimbraWebClientLogoutURLAllowedUA);
            }
        } else {
            var attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA]);
            attr.setAttribute("n", ZaDomain.A_zimbraWebClientLogoutURLAllowedUA);
        }
    }
    
    if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedIP]) {
        if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedIP] instanceof Array) {
            var cnt = tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedIP].length;
            for(var ix=0; ix<cnt; ix++) {
                var attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedIP][ix]);
                attr.setAttribute("n", ZaDomain.A_zimbraWebClientLoginURLAllowedIP);
            }
        } else {
            var attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedIP]);
            attr.setAttribute("n", ZaDomain.A_zimbraWebClientLoginURLAllowedIP);
        }
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedIP]) {
        if(tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedIP] instanceof Array) {
            var cnt = tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedIP].length;
            for(var ix=0; ix<cnt; ix++) {
                var attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedIP][ix]);
                attr.setAttribute("n", ZaDomain.A_zimbraWebClientLogoutURLAllowedIP);
            }
        } else {
            var attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedIP]);
            attr.setAttribute("n", ZaDomain.A_zimbraWebClientLogoutURLAllowedIP);
        }
    }
}

ZaDomain.modifyAutoPovSettings = function(tmpObj) {
	var soapDoc = AjxSoapDoc.create("BatchRequest", "urn:zimbra");
	soapDoc.setMethodAttribute("onerror", "stop");

    // modify domain
	var modifyDomainDoc = soapDoc.set("ModifyDomainRequest", null, null, ZaZimbraAdmin.URN);
	soapDoc.set("id", this.id,modifyDomainDoc);
    var attr;

    if(tmpObj.attrs[ZaDomain.A_zimbraAutoProvMode]) {
        if(tmpObj.attrs[ZaDomain.A_zimbraAutoProvMode] instanceof Array) {
            var cnt =  tmpObj.attrs[ZaDomain.A_zimbraAutoProvMode].length;
            for(var i = 0; i < cnt; i ++) {
				attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvMode][i],modifyDomainDoc);
				attr.setAttribute("n", ZaDomain.A_zimbraAutoProvMode);
            }
            if(cnt == 0) {
				attr = soapDoc.set("a", "",modifyDomainDoc);
				attr.setAttribute("n", ZaDomain.A_zimbraAutoProvMode);
            }
        } else {
				attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvMode],modifyDomainDoc);
				attr.setAttribute("n", ZaDomain.A_zimbraAutoProvMode);
        }
    }

    if(tmpObj.attrs[ZaDomain.A_zimbraAutoProvAuthMech]) {
        if(tmpObj.attrs[ZaDomain.A_zimbraAutoProvAuthMech] instanceof Array
                && tmpObj.attrs[ZaDomain.A_zimbraAutoProvAuthMech].length > 0) {
            var cnt =  tmpObj.attrs[ZaDomain.A_zimbraAutoProvAuthMech].length;
            for(var i = 0; i < cnt; i ++) {
				attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvAuthMech][i],modifyDomainDoc);
				attr.setAttribute("n", ZaDomain.A_zimbraAutoProvAuthMech);
            }
        } else {
				attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvAuthMech],modifyDomainDoc);
				attr.setAttribute("n", ZaDomain.A_zimbraAutoProvAuthMech);
        }
    }
    if(tmpObj.attrs[ZaDomain.A_zimbraAutoProvAttrMap]) {
        if((tmpObj.attrs[ZaDomain.A_zimbraAutoProvAttrMap] instanceof Array)
                && tmpObj.attrs[ZaDomain.A_zimbraAutoProvAttrMap].length > 0) {
            var cnt =  tmpObj.attrs[ZaDomain.A_zimbraAutoProvAttrMap].length;
            for(var i = 0; i < cnt; i ++) {
				attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvAttrMap][i],modifyDomainDoc);
				attr.setAttribute("n", ZaDomain.A_zimbraAutoProvAttrMap);
            }
        } else {
				attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvAttrMap],modifyDomainDoc);
				attr.setAttribute("n", ZaDomain.A_zimbraAutoProvAttrMap);
        }
    }
    if(tmpObj.attrs[ZaDomain.A_zimbraAutoProvLdapURL]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvLdapURL],modifyDomainDoc);
        attr.setAttribute("n", ZaDomain.A_zimbraAutoProvLdapURL);
    }
    if(tmpObj.attrs[ZaDomain.A_zimbraAutoProvLdapStartTlsEnabled]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvLdapStartTlsEnabled],modifyDomainDoc);
        attr.setAttribute("n", ZaDomain.A_zimbraAutoProvLdapStartTlsEnabled);
    }
    if(tmpObj.attrs[ZaDomain.A_zimbraAutoProvLdapAdminBindDn]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvLdapAdminBindDn],modifyDomainDoc);
        attr.setAttribute("n", ZaDomain.A_zimbraAutoProvLdapAdminBindDn);
    }
    if(tmpObj.attrs[ZaDomain.A_zimbraAutoProvLdapAdminBindPassword]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvLdapAdminBindPassword],modifyDomainDoc);
        attr.setAttribute("n", ZaDomain.A_zimbraAutoProvLdapAdminBindPassword);
    }
    if(tmpObj.attrs[ZaDomain.A_zimbraAutoProvLdapSearchBase]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvLdapSearchBase],modifyDomainDoc);
        attr.setAttribute("n", ZaDomain.A_zimbraAutoProvLdapSearchBase);
    }
    if(tmpObj.attrs[ZaDomain.A_zimbraAutoProvLdapSearchFilter]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvLdapSearchFilter],modifyDomainDoc);
        attr.setAttribute("n", ZaDomain.A_zimbraAutoProvLdapSearchFilter);
    }
    if(tmpObj.attrs[ZaDomain.A_zimbraAutoProvLdapBindDn]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvLdapBindDn],modifyDomainDoc);
        attr.setAttribute("n", ZaDomain.A_zimbraAutoProvLdapBindDn);
    }
    if(tmpObj.attrs[ZaDomain.A_zimbraAutoProvAccountNameMap]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvAccountNameMap],modifyDomainDoc);
        attr.setAttribute("n", ZaDomain.A_zimbraAutoProvAccountNameMap);
    }
    if(tmpObj.attrs[ZaDomain.A_zimbraAutoProvNotificationFromAddress]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvNotificationFromAddress],modifyDomainDoc);
        attr.setAttribute("n", ZaDomain.A_zimbraAutoProvNotificationFromAddress);
    }
    if(tmpObj.attrs[ZaDomain.A_zimbraAutoProvBatchSize]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvBatchSize],modifyDomainDoc);
        attr.setAttribute("n", ZaDomain.A_zimbraAutoProvBatchSize);
    }
    if(tmpObj.attrs[ZaDomain.A_zimbraAutoProvLastPolledTimestamp]){
        attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvLastPolledTimestamp],modifyDomainDoc);
        attr.setAttribute("n", ZaDomain.A_zimbraAutoProvLastPolledTimestamp);
    }

    attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvNotificationSubject],modifyDomainDoc);
    attr.setAttribute("n", ZaDomain.A_zimbraAutoProvNotificationSubject);
    attr = soapDoc.set("a", tmpObj.attrs[ZaDomain.A_zimbraAutoProvNotificationBody],modifyDomainDoc);
    attr.setAttribute("n", ZaDomain.A_zimbraAutoProvNotificationBody);

    // scheduled domain list in server config
    if(tmpObj[ZaDomain.A2_zimbraAutoProvSelectedServerList]
            && tmpObj[ZaDomain.A2_zimbraAutoProvSelectedServerList].getArray().length > 0) {
        var modifyServerDoc = null;
        var selectedList = tmpObj[ZaDomain.A2_zimbraAutoProvSelectedServerList].getArray();
        var serverList = tmpObj[ZaDomain.A2_zimbraAutoProvServerList];
        var cnt = selectedList.length;
        for (var i = 0; i < cnt; i++) {
            var server = null;
            for(var j = 0; j < serverList.length; j++) {
                if(selectedList[i] == serverList[j].name)
                    server = serverList[j];
            }
            if(server) {
                var scheduledDomains = server.attrs[ZaServer.A_zimbraAutoProvScheduledDomains];
                modifyServerDoc = soapDoc.set("ModifyServerRequest", null, null, ZaZimbraAdmin.URN);
                soapDoc.set("id", server.id,modifyServerDoc);
                var isExist = false;
                for(var i = 0; scheduledDomains && i < scheduledDomains.length; i++) {
                    attr = soapDoc.set("a", scheduledDomains[i],modifyServerDoc);
                    attr.setAttribute("n", ZaServer.A_zimbraAutoProvScheduledDomains);
                    if(scheduledDomains[i] == this.name) isExist = true;
                }
                if(!isExist) {
                    attr = soapDoc.set("a", this.name,modifyServerDoc);
                    attr.setAttribute("n", ZaServer.A_zimbraAutoProvScheduledDomains);
                }
                if(tmpObj[ZaDomain.A2_zimbraAutoProvPollingInterval]) {
                    attr = soapDoc.set("a",tmpObj[ZaDomain.A2_zimbraAutoProvPollingInterval],modifyServerDoc);
                    attr.setAttribute("n", ZaServer.A_zimbraAutoProvPollingInterval);
                }
            }
        }

    }
	try {
		params = new Object();
		params.soapDoc = soapDoc;
		var reqMgrParams ={
			controller:ZaApp.getInstance().getCurrentController(),
			busyMsg : ZaMsg.BUSY_MODIFY_DOMAIN,
			showBusy:true
		}
		var respObj = ZaRequestMgr.invoke(params, reqMgrParams);
		if(respObj.isException && respObj.isException()) {
			ZaApp.getInstance().getCurrentController()._handleException(respObj.getException(), "ZaDomain.modifyAutoPovSettings", null, false);
		    hasError  = true ;
            lastException = ex ;
        } else if(respObj.Body.BatchResponse.Fault) {
			var fault = respObj.Body.BatchResponse.Fault;
			if(fault instanceof Array)
				fault = fault[0];

			if (fault) {
				// JS response with fault
				var ex = ZmCsfeCommand.faultToEx(fault);
				ZaApp.getInstance().getCurrentController()._handleException(ex,"ZaDomain.modifyGalSettings", null, false);
                hasError = true ;
                lastException = ex ;
            }
		} else {
			var batchResp = respObj.Body.BatchResponse;
			var resp = batchResp.ModifyDomainResponse[0];
			this.initFromJS(resp.domain[0]);
		}
	} catch (ex) {
		//show the error and go on
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDomain.modifyAutoPovSettings", null, false);
	    hasError = true ;
        lastException = ex ;
	}

	this.refresh(false,true);
	ZaDomain.putDomainToCache(this);
}

ZaDomain.prototype.setStatus = function (newStatus) {
	var soapDoc = AjxSoapDoc.create("ModifyDomainStatusRequest", ZaZimbraAdmin.URN, null);
	soapDoc.set("id", this.id);

	var params = new Object();
	params.soapDoc = soapDoc;
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_MODIFY_DOMAIN_STATUS
	}	
	var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.ModifyDomainStatusResponse;	
	this.attrs[ZaDomain.A_zimbraDomainStatus] = resp.domain.status;
}

/**
* @param mods - map of modified attributes that will be sent to the server
* modifies object's information in the database
**/
ZaDomain.modifyMethod =
function(tmods,tmpObj) {
	var soapDoc = AjxSoapDoc.create("BatchRequest", "urn:zimbra");
	soapDoc.setMethodAttribute("onerror", "stop");

	// method  plugin
	var mods = tmods;
	if(ZaItem.modifyMethodsExt["ZaDomain"]) {
                var methods = ZaItem.modifyMethodsExt["ZaDomain"];
                var cnt = methods.length;
                for(var i = 0; i < cnt; i++) {
                        if(typeof(methods[i]) == "function")
                               methods[i].call(this, mods, tmpObj, soapDoc);
                }

	}	 
	var modifyDomainDoc = soapDoc.set("ModifyDomainRequest", null, null, ZaZimbraAdmin.URN);
	soapDoc.set("id", this.id,modifyDomainDoc);
	
	for (var aname in mods) {
		gotSomething = true;
		//multi value attribute
		if(mods[aname] instanceof Array) {
			var cnt = mods[aname].length;
			if(cnt) {
				var nonemptyElements = false;
				for(var ix=0; ix <cnt; ix++) {
					var attr = null;
					if(mods[aname][ix] instanceof String || AjxUtil.isString(mods[aname][ix])) {
						if(AjxUtil.isEmpty(mods[aname][ix])) {
							continue;
						} else {
							nonemptyElements = true;
						}
						var attr = soapDoc.set("a", mods[aname][ix].toString(),modifyDomainDoc);
					} else if(mods[aname][ix] instanceof Object) {
						var attr = soapDoc.set("a", mods[aname][ix].toString(),modifyDomainDoc);
						nonemptyElements = true;
					} else {
						var attr = soapDoc.set("a", mods[aname][ix],modifyDomainDoc);
						nonemptyElements = true;
					}
					
					if(attr)
						attr.setAttribute("n", aname);
				}
				if(!nonemptyElements) {
					var attr = soapDoc.set("a", "",modifyDomainDoc);
					attr.setAttribute("n", aname);
				}
			} else {
				var attr = soapDoc.set("a", "", modifyDomainDoc);
				attr.setAttribute("n", aname);
			}
		} else {
			var attr = soapDoc.set("a", mods[aname], modifyDomainDoc);
			attr.setAttribute("n", aname);
		}
	}
    
	if(tmpObj[ZaDomain.A2_gal_sync_accounts] && !AjxUtil.isEmpty(tmpObj[ZaDomain.A2_gal_sync_accounts])) {
        for (var i in tmpObj[ZaDomain.A2_gal_sync_accounts]) {
            var currentGalAccount = tmpObj[ZaDomain.A2_gal_sync_accounts][i]
            if (currentGalAccount) {
                if(currentGalAccount[ZaAccount.A2_zimbra_ds]
                    && currentGalAccount[ZaAccount.A2_zimbra_ds].attrs
                    && this[ZaDomain.A2_gal_sync_accounts][i][ZaAccount.A2_zimbra_ds]
                    && this[ZaDomain.A2_gal_sync_accounts][i][ZaAccount.A2_zimbra_ds].attrs) {
                    if(this[ZaDomain.A2_gal_sync_accounts][i][ZaAccount.A2_zimbra_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval] !=
                        currentGalAccount[ZaAccount.A2_zimbra_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval]) {
                        var modifyDSDoc = soapDoc.set("ModifyDataSourceRequest", null, null, ZaZimbraAdmin.URN);
                        soapDoc.set("id", this[ZaDomain.A2_gal_sync_accounts][i].id, modifyDSDoc);
                        var ds = soapDoc.set("dataSource", null,modifyDSDoc);
                        ds.setAttribute("id", this[ZaDomain.A2_gal_sync_accounts][i][ZaAccount.A2_zimbra_ds].id);
                        var attr = soapDoc.set("a", currentGalAccount[ZaAccount.A2_zimbra_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval],ds);
                        attr.setAttribute("n", ZaDataSource.A_zimbraDataSourcePollingInterval);
                    }
                }

                if(currentGalAccount[ZaAccount.A2_ldap_ds]
                    && currentGalAccount[ZaAccount.A2_ldap_ds].attrs
                    && this[ZaDomain.A2_gal_sync_accounts][i][ZaAccount.A2_ldap_ds]
                    && this[ZaDomain.A2_gal_sync_accounts][i][ZaAccount.A2_ldap_ds].attrs) {
                    if(this[ZaDomain.A2_gal_sync_accounts][i][ZaAccount.A2_ldap_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval] !=
                        currentGalAccount[ZaAccount.A2_ldap_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval]) {
                        var modifyDSDoc = soapDoc.set("ModifyDataSourceRequest", null, null, ZaZimbraAdmin.URN);
                        soapDoc.set("id", this[ZaDomain.A2_gal_sync_accounts][i].id, modifyDSDoc);
                        var ds = soapDoc.set("dataSource", null,modifyDSDoc);
                        ds.setAttribute("id", this[ZaDomain.A2_gal_sync_accounts][i][ZaAccount.A2_ldap_ds].id);
                        var attr = soapDoc.set("a", currentGalAccount[ZaAccount.A2_ldap_ds].attrs[ZaDataSource.A_zimbraDataSourcePollingInterval],ds);
                        attr.setAttribute("n", ZaDataSource.A_zimbraDataSourcePollingInterval);
                    }
                }
            }
        }
	}
	
	try {
		params = new Object();
		params.soapDoc = soapDoc;	
		var reqMgrParams ={
			controller:ZaApp.getInstance().getCurrentController(),
			busyMsg : ZaMsg.BUSY_MODIFY_DOMAIN,
			showBusy:true
		}
		var respObj = ZaRequestMgr.invoke(params, reqMgrParams);
		if(respObj.isException && respObj.isException()) {
			ZaApp.getInstance().getCurrentController()._handleException(respObj.getException(), "ZaDomain.modifyGalSettings", null, false);
		    hasError  = true ;
            lastException = ex ;
        } else if(respObj.Body.BatchResponse.Fault) {
			var fault = respObj.Body.BatchResponse.Fault;
			if(fault instanceof Array)
				fault = fault[0];
			
			if (fault) {
				// JS response with fault
				var ex = ZmCsfeCommand.faultToEx(fault);
				ZaApp.getInstance().getCurrentController()._handleException(ex,"ZaDomain.modifyGalSettings", null, false);
                hasError = true ;
                lastException = ex ;
            }
		} else {
			var batchResp = respObj.Body.BatchResponse;
			var resp = batchResp.ModifyDomainResponse[0];	
			this.initFromJS(resp.domain[0]);
		}
	} catch (ex) {
		//show the error and go on
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDomain.modifyGalSettings", null, false);
	    hasError = true ;
        lastException = ex ;
	}		    

	this.refresh(false,true);
	ZaDomain.putDomainToCache(this);
}
ZaItem.modifyMethods["ZaDomain"].push(ZaDomain.modifyMethod);

ZaDomain.getAccountQuota = function ( name, offset, limit, sortBy, sortAscending, callback){
	var soapDoc = AjxSoapDoc.create("GetQuotaUsageRequest", ZaZimbraAdmin.URN, null);

	if (sortBy == null || sortBy == ZaAccountQuota.A2_diskUsage) {
		sortBy = "totalUsed" ;
	}else if (sortBy == ZaAccountQuota.A2_quotaUsage){
		sortBy = "percentUsed" ;
	}else if (sortBy == ZaAccountQuota.A2_quota){
		sortBy = "quotaLimit";
	}else if (sortBy == ZaAccountQuota.A2_name){
		sortBy = "account";
	} else {
		sortBy = "totalUsed";
	}
	soapDoc.getMethod().setAttribute("sortBy", sortBy );
	if (sortAscending) {
		soapDoc.getMethod().setAttribute("sortAscending", sortAscending);
	}

    limit = limit ? limit : ZaSettings.RESULTSPERPAGE;
	soapDoc.getMethod().setAttribute("offset", offset);
	soapDoc.getMethod().setAttribute("limit", ZaServerMBXStatsPage.MBX_DISPLAY_LIMIT);
	soapDoc.getMethod().setAttribute("refresh", "1");
    if (name) {
        soapDoc.getMethod().setAttribute("domain", name);
        soapDoc.getMethod().setAttribute("allServers", "1");
    }
	//use refresh="1" to force server side re-calculating quota and ignore cached data.

	var params = new Object ();
	params.soapDoc = soapDoc ;
    var isAsyncMode = callback? true: false;
    if (isAsyncMode) {
        params.asyncMode = true;
        params.callback = callback;
    }
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_GET_QUOTA
	}
	var resp = ZaRequestMgr.invoke(params, reqMgrParams);
    if (isAsyncMode) {
        return resp;
    } else {
        resp = resp.Body.GetQuotaUsageResponse;
    }

    var result = { hasMore: false, mbxes: new Array() };
	if ((resp.account && resp.account.length > 0) && (resp.searchTotal && resp.searchTotal > 0)){
		result.hasMore = resp.more ;

		var accounts = resp.account ;
		var accountArr = new Array ();

		for (var i=0; i<accounts.length; i ++){
            accountArr[i] = new ZaAccountQuota(accounts[i]);
		}

		result.mbxes = accountArr ;
	}

	return result;
};

ZaDomain.prototype.initFromJS = 
function (obj) {
    ZaItem.prototype.initFromJS.call(this, obj);

    if (!(this.attrs[ZaDomain.A_zimbraDomainCOSMaxAccounts] instanceof Array)) {
        if (this.attrs[ZaDomain.A_zimbraDomainCOSMaxAccounts]) {
            this.attrs[ZaDomain.A_zimbraDomainCOSMaxAccounts] = [this.attrs[ZaDomain.A_zimbraDomainCOSMaxAccounts]];
        } else {
            this.attrs[ZaDomain.A_zimbraDomainCOSMaxAccounts] = [];
        }
    }

    if (!(this.attrs[ZaDomain.A_zimbraDomainFeatureMaxAccounts] instanceof Array)) {
        if (this.attrs[ZaDomain.A_zimbraDomainFeatureMaxAccounts]) {
            this.attrs[ZaDomain.A_zimbraDomainFeatureMaxAccounts] = [this.attrs[ZaDomain.A_zimbraDomainFeatureMaxAccounts]];
        } else {
            this.attrs[ZaDomain.A_zimbraDomainFeatureMaxAccounts] = [];
        }
    }


    if(!(this.attrs[ZaDomain.A_zimbraVirtualHostname] instanceof Array)) {
		if(this.attrs[ZaDomain.A_zimbraVirtualHostname])
			this.attrs[ZaDomain.A_zimbraVirtualHostname] = [this.attrs[ZaDomain.A_zimbraVirtualHostname]];	
		else
			this.attrs[ZaDomain.A_zimbraVirtualHostname] = new Array();
	}
    	if(!(this.attrs[ZaDomain.A_zimbraMailAddressValidationRegex] instanceof Array)) {
                if(this.attrs[ZaDomain.A_zimbraMailAddressValidationRegex])
                        this.attrs[ZaDomain.A_zimbraMailAddressValidationRegex] = [this.attrs[ZaDomain.A_zimbraMailAddressValidationRegex]];
                else
                        this.attrs[ZaDomain.A_zimbraMailAddressValidationRegex] = new Array();
        }

	if(AjxUtil.isString(this.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA])) {
		this.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA] = [this.attrs[ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedUA]];
	}

    if(AjxUtil.isString(this.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA])) {
		this.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA] = [this.attrs[ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedUA]];
	}
    
    if(AjxUtil.isString(this.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedIP])) {
        this.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedIP] = [this.attrs[ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedIP]];
    }

    if(AjxUtil.isString(this.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedIP])) {
        this.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedIP] = [this.attrs[ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedIP]];
    }

	if(!this.attrs[ZaDomain.A_AuthMech]) {
		this.attrs[ZaDomain.A_AuthMech] = ZaDomain.AuthMech_zimbra; //default value
	}
	if(!this.attrs[ZaDomain.A_zimbraGalMode]) {
		this.attrs[ZaDomain.A_zimbraGalMode] = ZaDomain.GAL_Mode_internal; //default value
	}

	if(this.attrs[ZaDomain.A_AuthLdapURL]) {
		// Split Auth URL into an array 
		var temp = this.attrs[ZaDomain.A_AuthLdapURL];
		this.attrs[ZaDomain.A_AuthLdapURL] = temp.split(" ");

	} else this.attrs[ZaDomain.A_AuthLdapURL] = new Array();
	if(this.attrs[ZaDomain.A_GalLdapURL])	{	
		var temp = this.attrs[ZaDomain.A_GalLdapURL];
		this.attrs[ZaDomain.A_GalLdapURL] = temp.split(" ");		
	} else this.attrs[ZaDomain.A_GalLdapURL] = new Array();
	
	if(this.attrs[ZaDomain.A_zimbraGalMode]) {
		if(this.attrs[ZaDomain.A_zimbraGalMode] == "ldap" || this.attrs[ZaDomain.A_zimbraGalMode] == "both") {
			if(this.attrs[ZaDomain.A_GalLdapFilter] == "ad") {
				this.attrs[ZaDomain.A_GALServerType] = "ad";
			} else {
				this.attrs[ZaDomain.A_GALServerType] = "ldap";
			}
			if(!this.attrs[ZaDomain.A_zimbraGalSyncLdapURL]) {
				this.attrs[ZaDomain.A_GALSyncUseGALSearch]="TRUE";
			} else {
				this.attrs[ZaDomain.A_GALSyncUseGALSearch]="FALSE";
				if(this.attrs[ZaDomain.A_zimbraGalSyncLdapBindDn] || this.attrs[ZaDomain.A_zimbraGalSyncLdapBindPassword]) {
					this.attrs[ZaDomain.A_SyncUseBindPassword] = "TRUE";
				} else {
					this.attrs[ZaDomain.A_SyncUseBindPassword] = "FALSE";
				}
				if(this.attrs[ZaDomain.A_zimbraGalSyncLdapFilter] == "ad") {
					this.attrs[ZaDomain.A_GALSyncServerType] = "ad";
				} else {
					this.attrs[ZaDomain.A_GALSyncServerType] = "ldap";
				}
			}
		} else {
			this.attrs[ZaDomain.A_GALSyncUseGALSearch]="TRUE";
		}
	} else {
		this.attrs[ZaDomain.A_zimbraGalMode] = "zimbra";
		this.attrs[ZaDomain.A_GALSyncUseGALSearch]="TRUE";
	}
	
	if(this.attrs[ZaDomain.A_GalLdapBindDn] || this.attrs[ZaDomain.A_GalLdapBindPassword]) {
		this.attrs[ZaDomain.A_UseBindPassword] = "TRUE";
	} else {
		this.attrs[ZaDomain.A_UseBindPassword] = "FALSE";
	}
	
	//
	//if(this.attrs[ZaDomain.A_AuthADDomainName]);
	if(!AjxUtil.isEmpty(this.attrs[ZaDomain.A_AuthLdapUserDn])) {
		this.attrs[ZaDomain.A_AuthADDomainName] = ZaAccount.getDomain(this.attrs[ZaDomain.A_AuthLdapUserDn]);	
	}
		
	if(this.attrs[ZaDomain.A_AuthLdapSearchBindDn] || this.attrs[ZaDomain.A_AuthLdapSearchBindPassword]) {
		this[ZaDomain.A_AuthUseBindPassword] = "TRUE";
	} else {
		this[ZaDomain.A_AuthUseBindPassword] = "FALSE";
	}
		
	this[ZaDomain.A_GALSampleQuery] = "john";
	if(!this.attrs[ZaDomain.A_zimbraGalAutoCompleteLdapFilter])
		this.attrs[ZaDomain.A_zimbraGalAutoCompleteLdapFilter] = "(|(cn=%s*)(sn=%s*)(gn=%s*)(mail=%s*))";
	if(this.attrs[ZaDomain.A_zimbraFreebusyExchangeAuthPassword] &&
		(this.attrs[ZaDomain.A_zimbraFreebusyExchangeAuthPassword] == "VALUE-BLOCKED")) {
		/* Value was replaced in SOAP response - treat as empty string so that it is clear it needs to be typed again
		 * before using "Check the settings" */
		this.attrs[ZaDomain.A_zimbraFreebusyExchangeAuthPassword] = "";
	}
}

ZaDomain.prototype.parseNotebookFolderAcls = function (resp) {
	try {
		if(resp.isException && resp.isException()) {
			throw(resp.getException());
		}
		
		var response;
		if(resp.getResponse)
			response = resp.getResponse().Body.GetFolderResponse;
		else
			response = resp.Body.GetFolderResponse;
			
		if(response && response.folder && response.folder[0] && response.folder[0].acl
			&& response.folder[0].acl.grant) {
			var grants = response.folder[0].acl.grant;
			var cnt = grants.length;
			this[ZaDomain.A_allNotebookACLS] = [];
			for (var gi = 0; gi < cnt; gi++) {
				var grant = grants[gi];
				var grantObj = {
					r:grant.perm.indexOf("r")>=0 ? 1 : 0,
					w:grant.perm.indexOf("w")>=0 ? 1 : 0,
					i:grant.perm.indexOf("i")>=0 ? 1 : 0,
					d:grant.perm.indexOf("d")>=0 ? 1 : 0,
					a:grant.perm.indexOf("a")>=0 ? 1 : 0,
					x:grant.perm.indexOf("x")>=0 ? 1 : 0,
					toString:function () {
						return this.r+this.w+this.i+this.d+this.a+this.x;
					}
				};
				this[ZaDomain.A_allNotebookACLS].push({acl:grantObj, name:grant.d, zid:grant.zid, gt:grant.gt, 
						toString:function() {
							return (this.gt+":"+this.name+":"+this.grantObj.toString());
						}
					});
			}
			this[ZaDomain.A_allNotebookACLS]._version = 0;
			
		}
	} catch (ex) {
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDomain.prototype.parseNotebookFolderAcls", null, false);	
	}
}
/**
* Returns HTML for a tool tip for this domain.
*/
ZaDomain.prototype.getToolTip =
function() {
	// update/null if modified
	if (!this._toolTip) {
		var html = new Array(20);
		var idx = 0;
		html[idx++] = "<table cellpadding='0' cellspacing='0' border='0'>";
		html[idx++] = "<tr valign='center'><td colspan='2' align='left'>";
		html[idx++] = "<div style='border-bottom: 1px solid black; white-space:nowrap; overflow:hidden;width:350'>";
		html[idx++] = "<table cellpadding='0' cellspacing='0' border='0' style='width:100%;'>";
		html[idx++] = "<tr valign='center'>";
		html[idx++] = "<td><b>" + AjxStringUtil.htmlEncode(this.name) + "</b></td>";
		html[idx++] = "<td align='right'>";
		html[idx++] = AjxImg.getImageHtml("Domain");			
		html[idx++] = "</td>";
		html[idx++] = "</table></div></td></tr>";
		html[idx++] = "<tr></tr>";
		idx = this._addAttrRow(ZaItem.A_description, html, idx);		
		idx = this._addAttrRow(ZaItem.A_zimbraId, html, idx);
		html[idx++] = "</table>";
		this._toolTip = html.join("");
	}
	return this._toolTip;
}

ZaDomain.prototype.remove = 
function(callback) {
	var soapDoc = AjxSoapDoc.create("DeleteDomainRequest", ZaZimbraAdmin.URN, null);
	soapDoc.set("id", this.id);
	//var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;
	if(callback) {
		params.asyncMode = true;
		params.callback = callback;
	}
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_DELETE_DOMAIN
	}
	ZaRequestMgr.invoke(params, reqMgrParams);	
}

ZaDomain.getLoginMessage = function () {
    var domain = ZaDomain.getDomainByName (ZaSettings.myDomainName, true) ;
    return domain.attrs[ZaDomain.A_zimbraAdminConsoleLoginMessage]  ;
}

ZaDomain.getDomainByName =
function(domName) {
	if(!domName)
		return null;
	domName = domName.toLowerCase();
	var domain = ZaDomain.staticDomainByNameCacheTable[domName];
	if(!domain) {
		domain = new ZaDomain();
		try {
			domain.load("name", domName, false, true);
		} catch (ex) {
            throw (ex);
        }

		ZaDomain.putDomainToCache(domain);
	} 
	return domain;	
} 

ZaDomain.getDomainById = 
function (domId) {
	if(!domId)
		return null;
		
	var domain = ZaDomain.staticDomainByIdCacheTable[domId];
	if(!domain) {
		domain = new ZaDomain();
		try {
			domain.load("id", domId, false, true);
		} catch (ex) {
			if(ex.code == ZmCsfeException.NO_SUCH_DOMAIN) {
				return null;
			} else {
				throw (ex);
			}
		}
		ZaDomain.putDomainToCache(domain);
	}
	return domain;
}

ZaDomain.loadMethod = 
function(by, val) {
	by = by ? by : "name";
	val = val ? val : this.attrs[ZaDomain.A_domainName];
	this.notebookAcls[ZaDomain.A_NotebookAllACLs] = {r:0,w:0,i:0,d:0,a:0,x:0};
	this.notebookAcls[ZaDomain.A_NotebookPublicACLs] = {r:0,w:0,i:0,d:0,a:0,x:0};
	this.notebookAcls[ZaDomain.A_NotebookDomainACLs] = {r:1,w:1,i:1,d:1,a:0,x:0};
	this.notebookAcls[ZaDomain.A_NotebookUserACLs] = [/*{name:"", acl:{r:0,w:0,i:0,d:0,a:0,x:0}, 
			toString:function () {
				return [this.name,this.acl[r],this.acl[w],this.acl[i],this.acl[d],this.acl[a],this.acl[x]].join();
			}}*/];
	this.notebookAcls[ZaDomain.A_NotebookGroupACLs] = [/*{name:"", acl:{r:0,w:0,i:0,d:0,a:0,x:0}, 
			toString:function () {
				return [this.name,this.acl[r],this.acl[w],this.acl[i],this.acl[d],this.acl[a],this.acl[x]].join();
			}
		}*/];

	var soapDoc = AjxSoapDoc.create("GetDomainRequest", ZaZimbraAdmin.URN, null);
	soapDoc.getMethod().setAttribute("applyConfig", "false");
	var elBy = soapDoc.set("domain", val);
	elBy.setAttribute("by", by);
	if(!this.getAttrs.all && !AjxUtil.isEmpty(this.attrsToGet)) {
		soapDoc.setMethodAttribute("attrs", this.attrsToGet.join(","));
	}
	
	var params = new Object();
	params.soapDoc = soapDoc;	
	
	var reqMgrParams = {
		controller : (ZaApp.getInstance() ? ZaApp.getInstance().getCurrentController() : null),
		busyMsg : ZaMsg.BUSY_GET_DOMAIN
	}
	var respObj = ZaRequestMgr.invoke(params, reqMgrParams);
	if(respObj.isException && respObj.isException()) {
		if(ZaApp.getInstance() && ZaApp.getInstance().getCurrentController()) {
			ZaApp.getInstance().getCurrentController()._handleException(respObj.getException(), "ZaDomain.loadMethod", null, false);
		}
    } else {
		var resp = respObj.Body.GetDomainResponse;
		this.initFromJS(resp.domain[0]);

    }
}
ZaItem.loadMethods["ZaDomain"].push(ZaDomain.loadMethod);

ZaDomain.loadDataSources = function (by, val) {
	if(this.attrs[ZaDomain.A_zimbraGalAccountId]) {
		if(!(this.attrs[ZaDomain.A_zimbraGalAccountId] instanceof Array)) {
			this.attrs[ZaDomain.A_zimbraGalAccountId] = [this.attrs[ZaDomain.A_zimbraGalAccountId]];
		}
		this[ZaDomain.A2_gal_sync_accounts] = [];
		
		for(var i=0; i< this.attrs[ZaDomain.A_zimbraGalAccountId].length; i++) {
			try {
				var galSyncAccount = new ZaAccount();
				galSyncAccount.load("id", this.attrs[ZaDomain.A_zimbraGalAccountId][i], false, false);
				this[ZaDomain.A2_gal_sync_accounts].push(galSyncAccount);
			} catch (ex) {
				if (ex.code == ZmCsfeException.ACCT_NO_SUCH_ACCOUNT) {
					if(ZaApp.getInstance() && ZaApp.getInstance().getCurrentController())
						ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_GALSYNC_ACCOUNT_INVALID,[this.name,this.attrs[ZaDomain.A_zimbraGalAccountId][i]]), ex, true);
				} else {
					if(ZaApp.getInstance() && ZaApp.getInstance().getCurrentController())
						ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDomain.loadDataSources", null, false);
				}	
			}
		}
	}
}
ZaItem.loadMethods["ZaDomain"].push(ZaDomain.loadDataSources);

ZaDomain.loadNotebookACLs = function(by, val) {
    if(this.attrs[ZaDomain.A_zimbraDomainStatus] != ZaDomain.DOMAIN_STATUS_MAINTENANCE && this.attrs[ZaDomain.A_zimbraDomainStatus] != ZaDomain.DOMAIN_STATUS_SUSPENDED) {                                                                                    
	    if(this.attrs[ZaDomain.A_zimbraNotebookAccount]) {
			var soapDoc = AjxSoapDoc.create("GetFolderRequest", "urn:zimbraMail", null);
			var getFolderCommand = new ZmCsfeCommand();
			var params = new Object();
			params.soapDoc = soapDoc;
			params.noAuthToken = true;
			params.accountName = this.attrs[ZaDomain.A_zimbraNotebookAccount];
		
			var folderEl = soapDoc.set("folder", "");
			folderEl.setAttribute("l", ZaDomain.WIKI_FOLDER_ID);	
			try {
				this.parseNotebookFolderAcls(getFolderCommand.invoke(params));
			} catch (ex) {
				ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDomain.loadMethod", null, false);
			}
		}
    }
}
ZaItem.loadMethods["ZaDomain"].push(ZaDomain.loadNotebookACLs);

ZaDomain.loadCatchAll = function () {
	if((this.attrs[ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled] && this.attrs[ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled] == "TRUE")
		|| (AjxUtil.isEmpty(this.attrs[ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled]) && 
			(!AjxUtil.isEmpty(this._defaultValues.attrs[ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled]) &&
				this._defaultValues.attrs[ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled] == "TRUE") )) {
		
		var acc = ZaAccount.getCatchAllAccount (this.name);
		if(!AjxUtil.isEmpty(acc) && !AjxUtil.isEmpty(acc.id) && !AjxUtil.isEmpty(acc.name)) {
			this [ZaAccount.A_zimbraMailCatchAllAddress] = acc;
		} else {
			this [ZaAccount.A_zimbraMailCatchAllAddress] = null;
		}
	} else {
		this [ZaAccount.A_zimbraMailCatchAllAddress] = null;
	}
}
ZaItem.loadMethods["ZaDomain"].push(ZaDomain.loadCatchAll);

ZaDomain.checkDomainMXRecord = 
function(obj, callback) {
	var soapDoc = AjxSoapDoc.create("CheckDomainMXRecordRequest", ZaZimbraAdmin.URN, null);
	var elBy = soapDoc.set("domain", obj.id);
	elBy.setAttribute("by", "id");
	var params = new Object();
	params.soapDoc = soapDoc;	
	if(callback) {
		params.asyncMode = true;
		params.callback = callback;
	}
	var reqMgrParams = {
		controller : (ZaApp.getInstance() ? ZaApp.getInstance().getCurrentController() : null),
		busyMsg : ZaMsg.BUSY_CHECKING_MX
	}
	ZaRequestMgr.invoke(params, reqMgrParams);
}


ZaDomain.aclXModel = {
	items: [
		{id:"acl",
			type:_OBJECT_,
			items: [
				{id:"r", type:_NUMBER_},
				{id:"w", type:_NUMBER_},
				{id:"d", type:_NUMBER_},
				{id:"i", type:_NUMBER_},
				{id:"a", type:_NUMBER_},				
				{id:"x", type:_NUMBER_}
		]},
		{id:"name", type:_STRING_},
		{id:"gt",  type:_STRING_}	
	]
}

ZaDomain.myXModel = {
	items: [
    	{id:"getAttrs",type:_LIST_},
    	{id:"setAttrs",type:_LIST_},
    	{id:"rights",type:_LIST_},	
		{id:"name", type:_STRING_, ref:"name"},
		{id:ZaItem.A_zimbraId, type:_STRING_, ref:"attrs/" + ZaItem.A_zimbraId},
        {id:ZaItem.A_zimbraDomainAliasTargetId, type:_STRING_, ref:"attrs/" + ZaItem.A_zimbraDomainAliasTargetId},                
		{id:ZaItem.A_zimbraCreateTimestamp, ref:"attrs/" + ZaItem.A_zimbraCreateTimestamp},
		{id:ZaDomain.A_domainName, type:_STRING_, ref:"attrs/" + ZaDomain.A_domainName, maxLength:255,constraints: {type:"method", value:
           function (value) {
               value = value.replace(/(^\s*)/g, "");
               return value;
           }}
        },
		{id:ZaDomain.A_zimbraPublicServiceHostname, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraPublicServiceHostname, maxLength:255},
		{id:ZaDomain.A_zimbraPublicServiceProtocol, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraPublicServiceProtocol, maxLength:255, defaultValue:"http"},
		{id:ZaDomain.A_zimbraPublicServicePort, type:_NUMBER_, ref:"attrs/" + ZaDomain.A_zimbraPublicServicePort, minInclusive: 0, maxInclusive:65535, defaultValue:80},
		{id:ZaDomain.A_zimbraDNSCheckHostname, type:_COS_STRING_, ref:"attrs/" + ZaDomain.A_zimbraDNSCheckHostname, maxLength:255},
		{id:ZaDomain.A_zimbraBasicAuthRealm, type:_COS_STRING_, ref:"attrs/" + ZaDomain.A_zimbraBasicAuthRealm, maxLength:255},		
		{id:ZaDomain.A_zimbraAdminConsoleDNSCheckEnabled, type:_COS_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/" + ZaDomain.A_zimbraAdminConsoleDNSCheckEnabled},
        {id:ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled, type:_COS_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/" + ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled},
        {id:ZaDomain.A_zimbraAdminConsoleLDAPAuthEnabled, type:_COS_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/" + ZaDomain.A_zimbraAdminConsoleLDAPAuthEnabled},    
        {id:ZaDomain.A_zimbraAdminConsoleSkinEnabled, type:_COS_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/" + ZaDomain.A_zimbraAdminSkinAddressEnabled},
	    // regex
	    {id:ZaDomain.A_zimbraMailAddressValidationRegex, type:_LIST_, listItem:{type:_STRING_, maxLength:512}, ref:"attrs/" + ZaDomain.A_zimbraMailAddressValidationRegex},
        {id:ZaDomain.A_zimbraVirtualHostname, type:_LIST_, listItem:{type:_STRING_, maxLength:255}, ref:"attrs/" + ZaDomain.A_zimbraVirtualHostname},
         ZaItem.descriptionModelItem,  
	    {id:ZaDomain.A_zimbraSSLCertificate, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraSSLCertificate},
	    {id:ZaDomain.A_zimbraSSLPrivateKey, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraSSLPrivateKey},
        {id:ZaDomain.A_notes, type:_STRING_, ref:"attrs/" + ZaDomain.A_notes},
		{id:ZaDomain.A_domainDefaultCOSId, type:_STRING_, ref:"attrs/" + ZaDomain.A_domainDefaultCOSId},		
		{id:ZaDomain.A_zimbraGalMode, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraGalMode},
        {id:ZaDomain.A_mailHost, type:_STRING_, ref:"attrs/" + ZaDomain.A_mailHost},
		{id:ZaDomain.A_zimbraGalMaxResults, type:_NUMBER_, ref:"attrs/" + ZaDomain.A_zimbraGalMaxResults, maxInclusive:2147483647, minInclusive:1},					
		{id:ZaDomain.A_GALServerType, type:_STRING_, ref:"attrs/" + ZaDomain.A_GALServerType},
		{id:ZaDomain.A_GALSyncServerType, type:_STRING_, ref:"attrs/" + ZaDomain.A_GALSyncServerType},
		{id:ZaDomain.A_GALSyncUseGALSearch, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/" + ZaDomain.A_GALSyncUseGALSearch},
		{id:ZaDomain.A_zimbraGalSyncLdapBindDn, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraGalSyncLdapBindDn},
        {id:ZaDomain.A_zimbraGalSyncLdapBindPassword, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraGalSyncLdapBindPassword},
		{id:ZaDomain.A_zimbraGalSyncLdapSearchBase, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraGalSyncLdapSearchBase},
		{id:ZaDomain.A_zimbraGalSyncLdapFilter, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraGalSyncLdapFilter,required:true},
		{id:ZaDomain.A_GalLdapFilter, type:_STRING_, ref:"attrs/" + ZaDomain.A_GalLdapFilter,required:true},
		{id:ZaDomain.A_zimbraGalAutoCompleteLdapFilter, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraGalAutoCompleteLdapFilter},		
		{id:ZaDomain.A_GalLdapSearchBase, type:_STRING_, ref:"attrs/" + ZaDomain.A_GalLdapSearchBase},
		{id:ZaDomain.A_UseBindPassword, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/" + ZaDomain.A_UseBindPassword},
		{id:ZaDomain.A_SyncUseBindPassword, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/" + ZaDomain.A_SyncUseBindPassword},
		{id:ZaDomain.A_GalLdapURL, type:_LIST_,  listItem:{type:_SHORT_URL_}, ref:"attrs/" + ZaDomain.A_GalLdapURL},
		{id:ZaDomain.A_zimbraGalSyncLdapURL, type:_LIST_,  listItem:{type:_SHORT_URL_}, ref:"attrs/" + ZaDomain.A_zimbraGalSyncLdapURL},
		{id:ZaDomain.A_GalLdapBindDn, type:_STRING_, ref:"attrs/" + ZaDomain.A_GalLdapBindDn},
		{id:ZaDomain.A_GalLdapBindPassword, type:_STRING_, ref:"attrs/" + ZaDomain.A_GalLdapBindPassword},
		{id:ZaDomain.A_GalLdapBindPasswordConfirm, type:_STRING_, ref:"attrs/" + ZaDomain.A_GalLdapBindPasswordConfirm},
		//GAL Account
        {id:ZaDomain.A_zimbraGalAccountId, type:_LIST_, listItem:{type:_STRING_}, ref:"attrs/" + ZaDomain.A_zimbraGalAccountId},
        {id:ZaDomain.A2_create_gal_acc, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:ZaDomain.A2_create_gal_acc},
        {id:ZaDomain.A2_gal_sync_accounts_set, type:_LIST_, ref:ZaDomain.A2_gal_sync_accounts_set, listItem:{
            type:_OBJECT_, ref:".", items:[
                {id:ZaDomain.A2_new_gal_sync_account_name, type:_STRING_, ref:ZaDomain.A2_new_gal_sync_account_name, defaultValue: "galsync"},
                {id:ZaDomain.A2_new_internal_gal_ds_name, type:_STRING_, ref:ZaDomain.A2_new_internal_gal_ds_name, defaultValue: "zimbra"},
                {id:ZaDomain.A2_new_external_gal_ds_name, type:_STRING_, ref:ZaDomain.A2_new_external_gal_ds_name, defaultValue: "ldap"},
                {id:ZaDomain.A2_new_internal_gal_polling_interval, type:_MINTERVAL_, ref:ZaDomain.A2_new_internal_gal_polling_interval, defaultValue: "1d"},
                {id:ZaDomain.A2_new_external_gal_polling_interval, type:_MINTERVAL_, ref:ZaDomain.A2_new_external_gal_polling_interval, defaultValue: "1d"}
            ]
        }},
		{id:ZaDomain.A2_gal_sync_accounts, type:_LIST_, listItem:{type:_OBJECT_, items:ZaAccount.myXModel.items}, ref:ZaDomain.A2_gal_sync_accounts},
		{id:ZaDomain.A_AuthLdapUserDn, type:_STRING_,ref:"attrs/" + ZaDomain.A_AuthLdapUserDn},
		{id:ZaDomain.A_zimbraAuthLdapStartTlsEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/" + ZaDomain.A_zimbraAuthLdapStartTlsEnabled},
		//{id:ZaDomain.A_AuthLDAPServerName, type:_STRING_, ref:"attrs/" + ZaDomain.A_AuthLDAPServerName},
		{id:ZaDomain.A_AuthLDAPSearchBase, type:_STRING_, ref:"attrs/" + ZaDomain.A_AuthLDAPSearchBase},
		//{id:ZaDomain.A_AuthLDAPServerPort, type:_NUMBER_, ref:"attrs/" + ZaDomain.A_AuthLDAPServerPort, maxInclusive:2147483647},
		{id:ZaDomain.A_AuthMech, type:_STRING_, ref:"attrs/" + ZaDomain.A_AuthMech},
		{id:ZaDomain.A_AuthLdapURL, type:_LIST_,  listItem:{type:_SHORT_URL_}, ref:"attrs/" + ZaDomain.A_AuthLdapURL},
		{id:ZaDomain.A_AuthADDomainName, type:_STRING_, ref:"attrs/" + ZaDomain.A_AuthADDomainName},
		{id:ZaDomain.A_AuthLdapSearchBase, type:_STRING_, ref:"attrs/" + ZaDomain.A_AuthLdapSearchBase},		
		{id:ZaDomain.A_AuthLdapSearchFilter, type:_STRING_, ref:"attrs/" + ZaDomain.A_AuthLdapSearchFilter},		
		{id:ZaDomain.A_AuthLdapSearchBindDn, type:_STRING_, ref:"attrs/" + ZaDomain.A_AuthLdapSearchBindDn},		
		{id:ZaDomain.A_AuthLdapSearchBindPassword, type:_STRING_, ref:"attrs/" + ZaDomain.A_AuthLdapSearchBindPassword},		
		{id:ZaDomain.A_zimbraDomainStatus, type:_STRING_, ref:"attrs/"+ZaDomain.A_zimbraDomainStatus},
		{id:ZaDomain.A_AuthTestUserName, type:_STRING_},
		{id:ZaDomain.A_AuthTestPassword, type:_STRING_},
		{id:ZaDomain.A_AuthTestMessage, type:_STRING_},
		{id:ZaDomain.A_AuthTestResultCode, type:_STRING_},
		{id:ZaDomain.A_AuthTestMessage, type:_STRING_},
		{id:ZaDomain.A_AuthComputedBindDn, type:_STRING_},
		{id:ZaDomain.A_zimbraPasswordChangeListener, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraPasswordChangeListener},
		{id:ZaDomain.A_zimbraAuthFallbackToLocal, type:_ENUM_, ref:"attrs/" + ZaDomain.A_zimbraAuthFallbackToLocal, choices:ZaModel.BOOLEAN_CHOICES},
		{id:ZaDomain.A_GALSearchTestMessage, type:_STRING_},
		{id:ZaDomain.A_GALSyncTestMessage, type:_STRING_},
		{id:ZaDomain.A_GALSearchTestResultCode, type:_STRING_},
		{id:ZaDomain.A_GALSyncTestResultCode, type:_STRING_},		
		{id:ZaDomain.A_GALSampleQuery, type:_STRING_,required:true},
		{id:ZaDomain.A_AuthUseBindPassword, type:_STRING_,type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},		
		{id:ZaDomain.A_AuthLdapSearchBindPasswordConfirm, type:_STRING_},
        // provision
		{id:ZaDomain.A_zimbraAutoProvLdapURL, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraAutoProvLdapURL, maxLength:256},
        {id:ZaDomain.A_zimbraAutoProvLdapStartTlsEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/" + ZaDomain.A_zimbraAutoProvLdapStartTlsEnabled},
        {id:ZaDomain.A_zimbraAutoProvLdapAdminBindDn, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraAutoProvLdapAdminBindDn, maxLength:256},
        {id:ZaDomain.A_zimbraAutoProvLdapAdminBindPassword, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraAutoProvLdapAdminBindPassword, maxLength:256},
        {id:ZaDomain.A_zimbraAutoProvLdapSearchBase, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraAutoProvLdapSearchBase, maxLength:256},
        {id:ZaDomain.A_zimbraAutoProvLdapSearchFilter, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraAutoProvLdapSearchFilter, maxLength:256},
        {id:ZaDomain.A_zimbraAutoProvLdapBindDn, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraAutoProvLdapBindDn, maxLength:256},
        {id:ZaDomain.A_zimbraAutoProvAccountNameMap, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraAutoProvAccountNameMap, maxLength:256},
        {id:ZaDomain.A_zimbraAutoProvNotificationFromAddress, type:_EMAIL_ADDRESS_, ref:"attrs/" + ZaDomain.A_zimbraAutoProvNotificationFromAddress, maxLength:256},
        {id:ZaDomain.A_zimbraAutoProvBatchSize, type:_NUMBER_, ref:"attrs/" + ZaDomain.A_zimbraAutoProvBatchSize, maxInclusive:2147483647, minInclusive:0},
        {id:ZaDomain.A_zimbraAutoProvLastPolledTimestamp, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraAutoProvLastPolledTimestamp, maxLength:256},
        {id:ZaDomain.A_zimbraAutoProvAttrMap, type:_LIST_, listItem:{type:_STRING_, maxLength:255}, ref:"attrs/" + ZaDomain.A_zimbraAutoProvAttrMap},
		{id:ZaDomain.A2_zimbraAutoProvModeEAGEREnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:ZaDomain.A2_zimbraAutoProvModeEAGEREnabled},
		{id:ZaDomain.A2_zimbraAutoProvModeLAZYEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:ZaDomain.A2_zimbraAutoProvModeLAZYEnabled},
		{id:ZaDomain.A2_zimbraAutoProvModeMANUALEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:ZaDomain.A2_zimbraAutoProvModeMANUALEnabled},
		{id:ZaDomain.A2_zimbraAutoProvAuthMechLDAPEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:ZaDomain.A2_zimbraAutoProvAuthMechLDAPEnabled},
		{id:ZaDomain.A2_zimbraAutoProvAuthMechPREAUTHEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:ZaDomain.A2_zimbraAutoProvAuthMechPREAUTHEnabled},
		{id:ZaDomain.A2_zimbraAutoProvAuthMechKRB5Enabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:ZaDomain.A2_zimbraAutoProvAuthMechKRB5Enabled},
		{id:ZaDomain.A2_zimbraAutoProvAuthMechSPNEGOEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:ZaDomain.A2_zimbraAutoProvAuthMechSPNEGOEnabled},
        {id:ZaDomain.A2_zimbraAutoProvServerList, type:_LIST_, ref:ZaDomain.A2_zimbraAutoProvServerList},
        {id:ZaDomain.A2_zimbraAutoProvSelectedServerList, type:_LIST_},
        {id:ZaDomain.A2_zimbraAutoProvPollingInterval, ref: ZaDomain.A2_zimbraAutoProvPollingInterval, type: _MINTERVAL_, minInclusive: 0 },
        {id:ZaDomain.A2_zimbraAutoProvSearchActivated, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:ZaDomain.A2_zimbraAutoProvSearchActivated},
        {id:ZaDomain.A2_zimbraAutoProvAccountPool,type:_LIST_,ref:ZaDomain.A2_zimbraAutoProvAccountPool},
        {id:ZaDomain.A2_zimbraAutoProvAccountPoolPageNum,ref:ZaDomain.A2_zimbraAutoProvAccountPoolPageNum, type:_NUMBER_,defaultValue:1},
        {id:ZaDomain.A2_zimbraAutoProvAccountSrcSelectedPool,type:_LIST_,ref:ZaDomain.A2_zimbraAutoProvAccountSrcSelectedPool},
        {id:ZaDomain.A2_zimbraAutoProvAccountTargetPool,type:_LIST_,ref:ZaDomain.A2_zimbraAutoProvAccountTargetPool},
        {id:ZaDomain.A2_zimbraAutoProvAccountTgtSelectedPool,type:_LIST_,ref:ZaDomain.A2_zimbraAutoProvAccountTgtSelectedPool},
        {id:ZaDomain.A2_zimbraAutoProvAccountPoolPageTotal,ref:ZaDomain.A2_zimbraAutoProvAccountPoolPageTotal, type:_NUMBER_,defaultValue:1},
        {id:ZaDomain.A2_zimbraAutoProvAccountPassword	, type:_STRING_, ref:ZaDomain.A2_zimbraAutoProvAccountPassword, maxLength:256},
        // Domain Quota
    	{id:ZaDomain.A_domainMaxAccounts, type:_INT_, ref:"attrs/" + ZaDomain.A_domainMaxAccounts,minInclusive:0},
        {id:ZaDomain.A_zimbraMailDomainQuota, type:_NUMBER_, ref: "attrs/"+ZaDomain.A_zimbraMailDomainQuota, minInclusive:0},
        {id:ZaDomain.A_zimbraDomainAggregateQuota, type:_NUMBER_, ref: "attrs/"+ZaDomain.A_zimbraDomainAggregateQuota, minInclusive:0},
        {id:ZaDomain.A_zimbraDomainAggregateQuotaWarnPercent, type:_NUMBER_, ref:"attrs/"+ZaDomain.A_zimbraDomainAggregateQuotaWarnPercent, maxInclusive:100, minInclusive:0},
        {id:ZaDomain.A_zimbraDomainAggregateQuotaWarnEmailRecipient, type:_EMAIL_ADDRESS_, ref:"attrs/"+ZaDomain.A_zimbraDomainAggregateQuotaWarnEmailRecipient},
        {id:ZaDomain.A_zimbraDomainAggregateQuotaPolicy, type:_ENUM_, ref:"attrs/"+ZaDomain.A_zimbraDomainAggregateQuotaPolicy, choices:ZaDomain.aggregateQuotaPolicyChoices},
		{id:ZaDomain.A_zimbraPrefTimeZoneId,type:_STRING_, ref:"attrs/"+ZaDomain.A_zimbraPrefTimeZoneId, choices:ZaSettings.timeZoneChoices},
        {id:ZaModel.currentStep, type:_NUMBER_, ref:ZaModel.currentStep, maxInclusive:2147483647},
		{id:ZaDomain.A2_acl_selection_cache, type:_LIST_},
		{id:ZaDomain.A_GALTestSearchResults, ref:ZaDomain.A_GALTestSearchResults, type:_LIST_, 
			listItem: {type:_OBJECT_, 
				items:[
					{id:"email", type:_STRING_},
					{id:"fullName", type:_STRING_},					
					{id:"firstName", type:_STRING_},										
					{id:"lastName", type:_STRING_}														
				]
			}
		},		
		{id:ZaDomain.A_NotebookTemplateDir, type:_STRING_, ref:ZaDomain.A_NotebookTemplateDir},
		{id:ZaDomain.A_NotebookTemplateFolder, type:_STRING_, ref:ZaDomain.A_NotebookTemplateFolder},
		{id:ZaDomain.A_NotebookAccountPassword, type:_STRING_},
		{id:ZaDomain.A_NotebookAccountPassword2, type:_STRING_},		
		{id:ZaDomain.A_CreateNotebook, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
		{id:ZaDomain.A_OverwriteTemplates, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
		{id:ZaDomain.A_zimbraNotebookAccount, type:_STRING_, ref:"attrs/" +ZaDomain.A_zimbraNotebookAccount},
		{id:ZaDomain.A_NotebookAllACLs, ref:"notebookAcls/"+ZaDomain.A_NotebookAllACLs, type:_OBJECT_,
			items: [
				{id:"r", type:_NUMBER_},
				{id:"w", type:_NUMBER_},
				{id:"d", type:_NUMBER_},
				{id:"i", type:_NUMBER_},
				{id:"a", type:_NUMBER_},				
				{id:"x", type:_NUMBER_}
			]
		},
		{id:ZaDomain.A_NotebookDomainACLs, ref:"notebookAcls/"+ZaDomain.A_NotebookDomainACLs, type:_OBJECT_,
			items: [
				{id:"r", type:_NUMBER_},
				{id:"w", type:_NUMBER_},
				{id:"d", type:_NUMBER_},
				{id:"i", type:_NUMBER_},
				{id:"a", type:_NUMBER_},				
				{id:"x", type:_NUMBER_}
			]
		},
		{id:ZaDomain.A_NotebookPublicACLs, ref:"notebookAcls/"+ZaDomain.A_NotebookPublicACLs, type:_OBJECT_,
			items: [
				{id:"r", type:_NUMBER_},
				{id:"w", type:_NUMBER_},
				{id:"d", type:_NUMBER_},
				{id:"i", type:_NUMBER_},
				{id:"a", type:_NUMBER_},				
				{id:"x", type:_NUMBER_}
			]
		}, 
		{id:ZaDomain.A_NotebookGroupACLs, ref:"notebookAcls/"+ZaDomain.A_NotebookGroupACLs, type:_LIST_,
			listItem:{type:_OBJECT_,
				items: [
					{id:"acl", /*type:_LIST_, 
						listItem:{*/
							type:_OBJECT_,
							items: [
								{id:"r", type:_NUMBER_},
								{id:"w", type:_NUMBER_},
								{id:"d", type:_NUMBER_},
								{id:"i", type:_NUMBER_},
								{id:"a", type:_NUMBER_},				
								{id:"x", type:_NUMBER_}
							]
//						}
					},
					{id:"name", type:_STRING_},
					{id:"gt",  type:_STRING_}
				]
			}
		}, 
		{id:ZaDomain.A_NotebookUserACLs, ref:"notebookAcls/"+ZaDomain.A_NotebookUserACLs, type:_LIST_,
			listItem:{type:_OBJECT_,
				items: [
					{id:"acl",/* type:_LIST_, 
						listItem:{*/
							type:_OBJECT_,
							items: [
								{id:"r", type:_NUMBER_},
								{id:"w", type:_NUMBER_},
								{id:"d", type:_NUMBER_},
								{id:"i", type:_NUMBER_},
								{id:"a", type:_NUMBER_},				
								{id:"x", type:_NUMBER_}
							]
						//}
					},
					{id:"name", type:_STRING_},
					{id:"gt",  type:_STRING_}
				]
			}
		},
		{id:ZaDomain.A_allNotebookACLS, ref:ZaDomain.A_allNotebookACLS, type:_LIST_,
			listItem:{type:_OBJECT_,
				items: [
					{id:"acl", type:_OBJECT_,
						items: [
							{id:"r", type:_NUMBER_},
							{id:"w", type:_NUMBER_},
							{id:"d", type:_NUMBER_},
							{id:"i", type:_NUMBER_},
							{id:"a", type:_NUMBER_},				
							{id:"x", type:_NUMBER_}
						]
					},
					{id:"name", type:_STRING_}, //null, domain name, group name, user name
					{id:"gt",  type:_STRING_} //grp, usr, dom, pub, all, guest
				]
			}
		},
        {id:ZaDomain.A_zimbraZimletDomainAvailableZimlets, type:_LIST_,
            ref:"attrs/" + ZaDomain.A_zimbraZimletDomainAvailableZimlets,
            dataType: _STRING_ ,outputType:_LIST_},
      { id:ZaAccount.A_zimbraMailCatchAllAddress, ref:ZaAccount.A_zimbraMailCatchAllAddress , type:_OBJECT_,items:[ {id:"id", type:_STRING_},{id:"name", type:_STRING_}] },
      { id:ZaDomain.A_zimbraDomainCOSMaxAccounts, ref:"attrs/" + ZaDomain.A_zimbraDomainCOSMaxAccounts ,
                 type:_LIST_ , dataType: _STRING_ ,outputType:_LIST_ },
      { id:ZaDomain.A_zimbraDomainFeatureMaxAccounts, ref:"attrs/" + ZaDomain.A_zimbraDomainFeatureMaxAccounts ,
                        type:_LIST_ , dataType: _STRING_ ,outputType:_LIST_ },
      // domain account quota
      { id:ZaDomain.A2_domain_account_quota, ref: ZaDomain.A2_domain_account_quota, type:_LIST_, listItem: {type:_OBJECT_} },
       //skin properties
      { id:ZaDomain.A_zimbraSkinForegroundColor, ref:"attrs/" + ZaDomain.A_zimbraSkinForegroundColor, type: _COS_STRING_ },
      { id:ZaDomain.A_zimbraSkinBackgroundColor, ref:"attrs/" + ZaDomain.A_zimbraSkinBackgroundColor, type: _COS_STRING_ },
      { id:ZaDomain.A_zimbraSkinSecondaryColor, ref:"attrs/" + ZaDomain.A_zimbraSkinSecondaryColor, type: _COS_STRING_ },
      { id:ZaDomain.A_zimbraSkinSelectionColor, ref:"attrs/" + ZaDomain.A_zimbraSkinSelectionColor, type: _COS_STRING_ },

      { id:ZaDomain.A_zimbraSkinLogoURL, ref:"attrs/" + ZaDomain.A_zimbraSkinLogoURL, type:_COS_STRING_ },
      { id:ZaDomain.A_zimbraSkinLogoLoginBanner, ref:"attrs/" + ZaDomain.A_zimbraSkinLogoLoginBanner, type:_COS_STRING_ },
      { id:ZaDomain.A_zimbraSkinLogoAppBanner, ref:"attrs/" + ZaDomain.A_zimbraSkinLogoAppBanner, type:_COS_STRING_ },
      // web client redirect
      { id:ZaDomain.A_zimbraWebClientLoginURL, ref:"attrs/" + ZaDomain.A_zimbraWebClientLoginURL, type:_COS_STRING_ },
      { id:ZaDomain.A_zimbraWebClientLogoutURL, ref:"attrs/" + ZaDomain.A_zimbraWebClientLogoutURL, type:_COS_STRING_ },

        // Clear Cookies
        {
            id: ZaDomain.A_zimbraForceClearCookies,
            ref: "attrs/" + ZaDomain.A_zimbraForceClearCookies,
            type: _ENUM_,
            choices: ZaModel.BOOLEAN_CHOICES
        },
    // web client authentication
      { id:ZaDomain.A_zimbraReverseProxyClientCertMode, ref:"attrs/" + ZaDomain.A_zimbraReverseProxyClientCertMode, type:_COS_STRING_, choices:["on","off","optional"]},
      { id:ZaDomain.A_zimbraMailSSLClientCertPrincipalMap, ref:"attrs/" + ZaDomain.A_zimbraMailSSLClientCertPrincipalMap, type:_COS_STRING_ },
      { id:ZaDomain.A_zimbraReverseProxyClientCertCA, ref:"attrs/" + ZaDomain.A_zimbraReverseProxyClientCertCA, type:_COS_STRING_ },
	// help URL
      { id:ZaDomain.A_zimbraHelpAdminURL, ref:"attrs/" + ZaDomain.A_zimbraHelpAdminURL, type:_COS_STRING_ },
      { id:ZaDomain.A_zimbraHelpDelegatedURL, ref:"attrs/" + ZaDomain.A_zimbraHelpDelegatedURL, type:_COS_STRING_ },
	// login/out URL
      { id:ZaDomain.A_zimbraAdminConsoleLoginURL, ref:"attrs/" + ZaDomain.A_zimbraAdminConsoleLoginURL, type:_COS_STRING_ },
      { id:ZaDomain.A_zimbraAdminConsoleLogoutURL, ref:"attrs/" + ZaDomain.A_zimbraAdminConsoleLogoutURL, type:_COS_STRING_ },
      { id:ZaDomain.A_zimbraWebClientLoginURLAllowedUA, type:_COS_LIST_, ref:"attrs/"+ZaDomain.A_zimbraWebClientLoginURLAllowedUA, listItem:{ type: _STRING_}},
      { id:ZaDomain.A_zimbraWebClientLogoutURLAllowedUA, type:_COS_LIST_, ref:"attrs/"+ZaDomain.A_zimbraWebClientLogoutURLAllowedUA, listItem:{ type: _STRING_}},
      { id:ZaDomain.A_zimbraWebClientLoginURLAllowedIP, type:_COS_LIST_, ref:"attrs/"+ZaDomain.A_zimbraWebClientLoginURLAllowedIP, listItem:{ type: _STRING_}},
      { id:ZaDomain.A_zimbraWebClientLogoutURLAllowedIP, type:_COS_LIST_, ref:"attrs/"+ZaDomain.A_zimbraWebClientLogoutURLAllowedIP, listItem:{ type: _STRING_}},
    //kerberos
      { id:ZaDomain.A_zimbraAuthKerberos5Realm, type:_STRING_, ref:"attrs/"+ZaDomain.A_zimbraAuthKerberos5Realm},
        //interop
       { id:ZaDomain.A_zimbraFreebusyExchangeAuthUsername, ref:"attrs/" + ZaDomain.A_zimbraFreebusyExchangeAuthUsername, type: _COS_STRING_ },
       { id:ZaDomain.A_zimbraFreebusyExchangeAuthPassword, ref:"attrs/" + ZaDomain.A_zimbraFreebusyExchangeAuthPassword, type: _COS_STRING_ },
       { id:ZaDomain.A_zimbraFreebusyExchangeAuthScheme, ref:"attrs/" + ZaDomain.A_zimbraFreebusyExchangeAuthScheme,
             type: _COS_ENUM_ , choices: ZaSettings.authorizationScheme },
       { id:ZaDomain.A_zimbraFreebusyExchangeServerType, ref:"attrs/" + ZaDomain.A_zimbraFreebusyExchangeServerType,
             type: _COS_ENUM_ , choices: ZaSettings.exchangeServerType },
       { id:ZaDomain.A_zimbraFreebusyExchangeURL, ref:"attrs/" + ZaDomain.A_zimbraFreebusyExchangeURL, type: _COS_STRING_ } ,
       { id:ZaDomain.A_zimbraFreebusyExchangeUserOrg, ref:"attrs/" + ZaDomain.A_zimbraFreebusyExchangeUserOrg, type: _COS_STRING_ },
       {id:ZaDomain.A2_isTestingGAL, ref:ZaDomain.A2_isTestingGAL, type:_NUMBER_},
       {id:ZaDomain.A2_isTestingSync, ref:ZaDomain.A2_isTestingSync, type:_NUMBER_},
       {id:ZaDomain.A2_isTestingAuth, ref:ZaDomain.A2_isTestingAuth, type:_NUMBER_},
       {id:ZaDomain.A_zimbraFeatureCalendarReminderDeviceEmailEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/" + ZaDomain.A_zimbraFeatureCalendarReminderDeviceEmailEnabled},

       {id:ZaDomain.A_zimbraAutoProvNotificationSubject, type:_COS_STRING_, ref:"attrs/" + ZaDomain.A_zimbraAutoProvNotificationSubject},
       {id:ZaDomain.A_zimbraAutoProvNotificationBody, type:_COS_STRING_, ref:"attrs/" + ZaDomain.A_zimbraAutoProvNotificationBody}
    ]
};

/**
 * Domain Level Account Limits Object, it is a client side only domain property and used
 * by both domain view and account view.  The value is based on the zimbraDomainCOSMaxAccounts
 *  zimbraDomainCOSMaxAccounts is a multi value attribute, its value is in format of "cosName:account_limits",
 * eg.
 *  zimbraDomainCOSMaxAccounts = professional:10
 *
 *  //this value is built on demand
 *
 *  domain.account_limits =
 *   {
 *      cosName : { max: 10,
 *                  used: 2 , //used value is got by the searchDirectory on this domain
 *                  available: 8
 *                  }
 *   }
 *
 **/

ZaDomain.prototype.getUsedDomainAccounts = function () {
    var total = 0 ;    
    var accountCountsByCoses = this.getAccountCountsByCoses();
    if (accountCountsByCoses && accountCountsByCoses.length > 0) {
      for (var i = 0 ; i < accountCountsByCoses.length; i ++) {
        var count = accountCountsByCoses[i]._content ;
        total += parseInt(count) ;
      }
    }
    return total ;
}

ZaDomain.prototype.getAccountCountsByCoses = function () {
    try {
        var soapDoc = AjxSoapDoc.create("CountAccountRequest", ZaZimbraAdmin.URN, null);
        var elBy = soapDoc.set("domain", this.name);
        elBy.setAttribute("by", "name");
        //var command = new ZmCsfeCommand();
        var params = new Object();
        params.soapDoc = soapDoc;

        var reqMgrParams = {
            controller : ZaApp.getInstance().getCurrentController(),
            busyMsg : ZaMsg.BUSY_COUNT_ACCOUNTS
        }
        var resp = ZaRequestMgr.invoke(params, reqMgrParams);
        var accountCountsByCoses = resp.Body.CountAccountResponse.cos ;
        return accountCountsByCoses ;
    }catch (ex) {
        ZaApp.getInstance().getCurrentController().popupErrorDialog(
                AjxMessageFormat.format(ZaMsg.ERROR_GET_USED_ACCOUNTS, [this.name]), ex);
    }
}

ZaDomain.prototype.updateUsedAccounts = function () {
    this.updateMaxAccounts() ;  //make sure all the defined cos in cosMaxAccounts are initialized

    //need to call the CountAccountRequest
    var accountCountsByCoses = this.getAccountCountsByCoses();
    if (accountCountsByCoses && accountCountsByCoses.length > 0) {
        for (var i = 0 ; i < accountCountsByCoses.length; i ++) {
            var aCosName =  accountCountsByCoses[i].name ;
            if (!this[ZaDomain.A2_account_limit][aCosName])
                this[ZaDomain.A2_account_limit][aCosName] = {} ;
            this[ZaDomain.A2_account_limit][aCosName].used =
                                            parseInt (accountCountsByCoses[i]._content) ;
        }
    }

    for (aCosName in this[ZaDomain.A2_account_limit]) {
        if (!this[ZaDomain.A2_account_limit][aCosName].used)
            this[ZaDomain.A2_account_limit][aCosName].used = 0;
    }
}

ZaDomain.prototype.getUsedAccounts =
function (cosName, refresh) {
    if (!this[ZaDomain.A2_account_limit]) this[ZaDomain.A2_account_limit] = {};
    if (!this[ZaDomain.A2_account_limit][cosName])  this[ZaDomain.A2_account_limit][cosName] = {used:null} ;

    if (refresh || (this[ZaDomain.A2_account_limit][cosName].used == null)) {
        this.updateUsedAccounts();   
    }

    if(!this[ZaDomain.A2_account_limit][cosName])
	return 0;
    else 
    	return this[ZaDomain.A2_account_limit][cosName].used ;
}

ZaDomain.prototype.isCosLimitInDomain =
function(cosName) {
    if(!this[ZaDomain.A2_account_limit] || this[ZaDomain.A2_account_limit].length < 1) {
	this.updateMaxAccounts();	
    }
    if(this[ZaDomain.A2_account_limit][cosName]) return true;
    else return false;
}

ZaDomain.prototype.getMaxAccounts = function (cosName, refresh) {
    if (! this [ZaDomain.A2_account_limit] )  this[ZaDomain.A2_account_limit] = {} ;

    //var cosName = ZaCos.getCosById (cosId).name ;
    if (!this[ZaDomain.A2_account_limit][cosName]) this[ZaDomain.A2_account_limit][cosName] = {} ;

    if (! this[ZaDomain.A2_account_limit][cosName].max || refresh) {
        //retrieve the total allowed accounts
       this.updateMaxAccounts ();
    }

    if(!this[ZaDomain.A2_account_limit][cosName])
	return 0;
    else
    return  this[ZaDomain.A2_account_limit][cosName].max ;
}

//init or refresh the cos max accounts
ZaDomain.prototype.updateMaxAccounts = function () {
    this[ZaDomain.A2_account_limit] = {} ;
    
    var cosMaxAccounts = this.attrs[ZaDomain.A_zimbraDomainCOSMaxAccounts];
    for (var i=0; i < cosMaxAccounts.length; i ++) {
        var val = cosMaxAccounts[i].split(":") ;
        var cos = ZaCos.getCosById (val[0]) ;
        if (cos == null) {
                ZaApp.getInstance().getCurrentController.popupErrorDialog(
                    AjxMessageFormat.format(ZaMsg.ERROR_INVALID_ACCOUNT_TYPE, [val[0]]));
            return ;
        }
        var n = cos.name ;

        this[ZaDomain.A2_account_limit][n] = {} ;
        this[ZaDomain.A2_account_limit][n].max = val [1] ;
    }
}

ZaDomain.prototype.getAvailableAccounts = function (cosName, refresh) {
    //var cosName = ZaCos.getCosById (cosId).name ;
    if (!this[ZaDomain.A2_account_limit][cosName]) this[ZaDomain.A2_account_limit][cosName] = {} ;
//    if (! this [ZaDomain.A2_account_limit][cosName].available
//           || refresh ) {
        //retrieve the used accounts
        var used = this.getUsedAccounts (cosName, refresh);
        var max = this.getMaxAccounts (cosName, refresh) ;
        //this [ZaDomain.A2_account_limit][cosName].available = max - used ;
//    }
    if(!this [ZaDomain.A2_account_limit][cosName])
	return 0;
    else {
	this[ZaDomain.A2_account_limit][cosName].available = max - used ;
    	return this[ZaDomain.A2_account_limit][cosName].available;
    }
}

//Account types is only available when ZimbraDomainCOSMaxAccounts are set
ZaDomain.prototype.getAccountTypes = function () {
    var types = [] ;
    var cosMaxAccounts = this.attrs[ZaDomain.A_zimbraDomainCOSMaxAccounts];
    if (cosMaxAccounts && cosMaxAccounts.length > 0 ) {
        for (var i=0; i < cosMaxAccounts.length; i ++) {
            var val = cosMaxAccounts[i].split(":") ;
            types.push (val[0]) ;
        }
    }

    return types ;
}

ZaDomain.getTotalLimitsPerAccountTypes = function (cosMaxAccounts) {
    var total = 0 ;
    //var cosMaxAccounts = this.attrs[ZaDomain.A_zimbraDomainCOSMaxAccounts];
    if (cosMaxAccounts && cosMaxAccounts.length > 0 ) {
        for (var i=0; i < cosMaxAccounts.length; i ++) {
            var val = cosMaxAccounts[i].split(":") ;
            total += new Number (val [1]);
        }
    }

    return total ;
}

ZaDomain.searchAccountsInDomain =
function (domainName) {
    if (domainName) {
        var controller = ZaApp.getInstance().getSearchListController();
        var busyId = Dwt.getNextId();
        var callback =  new AjxCallback(controller, controller.searchCallback, {limit:controller.RESULTSPERPAGE,show:true,busyId:busyId});
	// set search query
        controller._currentQuery = "" ;
        var searchTypes = [ZaSearch.ACCOUNTS, ZaSearch.DLS, ZaSearch.ALIASES, ZaSearch.RESOURCES] ;
	// set search types
        if(controller.setSearchTypes)
            controller.setSearchTypes(searchTypes);
	// search domain
	controller._currentDomain = domainName;
	// search attributes
	controller.fetchAttrs = AjxBuffer.concat(ZaAlias.searchAttributes,",",
                        ZaDistributionList.searchAttributes,",",
                        ZaResource.searchAttributes,",",
                        ZaSearch.standardAttributes);
	// set current pagenum
	controller._currentPageNum = 1;

        var searchParams = {
                query:controller._currentQuery,
                domain: controller._currentDomain,
                types:searchTypes,
                attrs:controller.fetchAttrs,
                callback:callback,
                controller: controller,
                                showBusy:true,
                                busyId:busyId,
                                busyMsg:ZaMsg.BUSY_SEARCHING,
                                skipCallbackIfCancelled:false                
        }
         controller.scrollSearchParams={
                query:controller._currentQuery,
                domain: controller._currentDomain,
                types:searchTypes,
                attrs:controller.fetchAttrs,
                controller: controller,
                                showBusy:true,
                                busyMsg:ZaMsg.BUSY_SEARCHING,
                                skipCallbackIfCancelled:false
         }
        ZaSearch.searchDirectory(searchParams);
    }else {
        var currentController = ZaApp.getInstance().getCurrentController () ;
        currentController.popupErrorDialog(ZaMsg.ERROR_NO_DOMAIN_NAME) ;
    }
}

ZaDomain.prototype.createDomainAlias = function (form) {
    var instance = form.getInstance() ;
	var newAlias = instance.attrs [ZaDomain.A_domainName] ;
	var targetName = instance [ZaDomain.A2_zimbraDomainAliasTarget] ;

	try {
		var targetObj = ZaDomain.getTargetDomainByName(targetName) ;
        if (targetObj == null) {
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(
                    ZaMsg.ERROR_TARGET_DOMAIN_NOT_EXIST, [targetName]));
            return ;
        } else if (targetObj.attrs [ZaDomain.A_domainType] != ZaDomain.domainTypes.local){
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(
                    ZaMsg.ERROR_TARGET_DOMAIN_IS_ALIAS, [targetName]));
            return ;
        } else if (newAlias == null) {
            ZaApp.getInstance().getCurrentController().popupErrorDialog(
                    ZaMsg.ERROR_DOMAIN_ALIAS_NOT_EXIST);
            return ;
        }

        if (!this.attrs)  this.attrs = {};
		this.attrs [ZaDomain.A_domainName] = newAlias ;
        this.attrs [ZaDomain.A_domainType] = ZaDomain.domainTypes.alias ;
        this.attrs [ZaDomain.A_zimbraDomainAliasTargetId] = targetObj.id ;
        this.attrs [ZaDomain.A_description] = AjxMessageFormat.format(
                ZaMsg.DESC_targetDomain, [targetName]) ;
        this.attrs [ZaDomain.A_zimbraMailCatchAllAddress] = "@" + newAlias ;
        this.attrs [ZaDomain.A_zimbraMailCatchAllForwardingAddress] = "@" + targetName ;

        var soapDoc = AjxSoapDoc.create("CreateDomainRequest", ZaZimbraAdmin.URN, null);
        soapDoc.set("name", this.attrs[ZaDomain.A_domainName]);

        var attrNames = [ ZaDomain.A_domainType, ZaDomain.A_zimbraDomainAliasTargetId,
                    ZaDomain.A_description, ZaDomain.A_zimbraMailCatchAllAddress,
                    ZaDomain.A_zimbraMailCatchAllForwardingAddress] ;
        for (var i=0; i < attrNames.length; i ++) {
            var aname = attrNames [i] ;
            if (this.attrs [aname] != null) {
                var attr = soapDoc.set("a", this.attrs[aname]);
		        attr.setAttribute("n", aname);
            }
        }

        var params = new Object();
	    params.soapDoc = soapDoc;
        var reqMgrParams = {
            controller : ZaApp.getInstance().getCurrentController(),
            busyMsg : ZaMsg.BUSY_CREATE_DOMAIN
        }
        var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.CreateDomainResponse;
        ZaApp.getInstance().getDomainListController().fireCreationEvent(this);
        form.parent.popdown();
	} catch (ex) {
		if(ex.code == ZmCsfeException.DOMAIN_EXISTS ) {
			ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(
                    ZaMsg.ERROR_DOMAIN_ALIAS_EXIST, [newAlias]));
		}else{
			//if failed for another reason - jump out
			ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDomain.prototype.createDomainAlias", null, false);
		}
	}   

}

ZaDomain.prototype.modifyDomainAlias = function (form) {
    var instance = form.getInstance() ;
	var targetName =  instance [ZaDomain.A2_zimbraDomainAliasTarget] ;
    if (targetName != null && (("@" + targetName) != this.attrs [ZaDomain.A_zimbraMailCatchAllForwardingAddress])) {
        //changed
        var targetObj = ZaDomain.getTargetDomainByName(targetName) ;
        if (targetObj == null) {
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(
                    ZaMsg.ERROR_TARGET_DOMAIN_NOT_EXIST, [targetName]));
            return ;
        } else if (targetObj.attrs [ZaDomain.A_domainType] != ZaDomain.domainTypes.local){
            ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(
                    ZaMsg.ERROR_TARGET_DOMAIN_IS_ALIAS, [targetName]));
            return ;
        }

        if (!this.attrs)  this.attrs = {};
		this.attrs [ZaDomain.A_zimbraDomainAliasTargetId] = targetObj.id ;
        this.attrs [ZaDomain.A_description] = AjxMessageFormat.format(
                ZaMsg.DESC_targetDomain, [targetName]) ;
        this.attrs [ZaDomain.A_zimbraMailCatchAllForwardingAddress] = "@" + targetName ;

        var soapDoc = AjxSoapDoc.create("ModifyDomainRequest", ZaZimbraAdmin.URN, null);
        soapDoc.set("id", this.id);

        var attrNames = [ZaDomain.A_zimbraDomainAliasTargetId,
                            ZaDomain.A_description,  ZaDomain.A_zimbraMailCatchAllForwardingAddress] ;
        for (var i=0; i < attrNames.length; i ++) {
            var aname = attrNames [i] ;
            if (this.attrs [aname] != null) {
                var attr = soapDoc.set("a", this.attrs[aname]);
                attr.setAttribute("n", aname);
            }
        }

        var params = new Object();
	    params.soapDoc = soapDoc;
        var reqMgrParams = {
            controller : ZaApp.getInstance().getCurrentController(),
            busyMsg : ZaMsg.BUSY_MODIFY_DOMAIN
        }
        var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.ModifyDomainResponse;
        this.oldItem = instance;
        ZaApp.getInstance().getDomainListController().fireChangeEvent(this);
    }

    form.parent.popdown();
}


ZaDomain.getTargetDomainByName = function (targetName) {
    var domainList = ZaDomain.getAll(targetName).getArray (); 
    for (var i = 0; i < domainList.length; i ++) {
        var domain = domainList [i] ;
        if (targetName == domain.name)  {
            return domain ;
        }
    }
    return null ;
}

ZaDomain.globalRights = {};
ZaDomain.getEffectiveDomainList = function(adminId) {
    var soapDoc = AjxSoapDoc.create("GetAllEffectiveRightsRequest", ZaZimbraAdmin.URN, null);
    var elGrantee = soapDoc.set("grantee", adminId);
    elGrantee.setAttribute("type", "usr");
    elGrantee.setAttribute("by", "id");

    var params = {};
    params.soapDoc = soapDoc;
    params.asyncMode = false;
    var reqMgrParams = {
        controller : ZaApp.getInstance().getCurrentController(),
        busyMsg : ZaMsg.BUSY_GET_EFFICIENT_DOMAIN_LIST
    }

    var domainNameList = [];
    try {
        var resp = ZaRequestMgr.invoke(params, reqMgrParams);
        if(!resp || resp.Body.GetAllEffectiveRightsResponse.Fault)
            return domainNameList;
        var targets = resp.Body.GetAllEffectiveRightsResponse.target;
        for(var i = 0; i < targets.length; i++) {
            if(targets[i].type != ZaItem.DOMAIN) 
                continue;
            
            if(!targets[i].entries && !targets[i].all)
            	continue;
            
            if(targets[i].entries) { 
	            for(var j = 0; j < targets[i].entries.length; j++) {
	                var entry = targets[i].entries[j].entry;
	                for(var k = 0; k < entry.length; k++)
	                    domainNameList.push(entry[k].name);
	            }
            }
            
            if(targets[i].all) { 
            	//we have global access to domains
            	if(targets[i].all.length && targets[i].all[0] && targets[i].all[0].right && targets[i].all[0].right.length) {
            		for(var j=0;j<targets[i].all[0].right.length;j++) {
        				ZaDomain.globalRights[targets[i].all[0].right[j].n] = true;
            		}
            	}
            }

            break;
        }
        return domainNameList;
    } catch(ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDomain.getEffectiveDomainList", null, false);
    }
}

ZaDomain.prototype.countAllAccounts = function() {
	var soapDoc = AjxSoapDoc.create("SearchDirectoryRequest", ZaZimbraAdmin.URN, null);
    soapDoc.getMethod().setAttribute("maxResults", "0");
	soapDoc.getMethod().setAttribute("limit", "-1");
	var query = "";
    var types = [ZaSearch.ACCOUNTS, ZaSearch.DLS, ZaSearch.ALIASES, ZaSearch.RESOURCES];

	soapDoc.set("query", query);
    soapDoc.set("types", types.toString());
    soapDoc.set("domain", this.name);
	var command = new ZmCsfeCommand();
	var cmdParams = new Object();
	cmdParams.soapDoc = soapDoc;
    cmdParams.noAuthToken = true;
    try {
	    var resp = command.invoke(cmdParams).Body.SearchDirectoryResponse;
        if(resp.searchTotal)
            return  resp.searchTotal;
        else return 0;
    } catch(ex) {
        throw (ex);
    }
    return 0;
}

ZaDomain.prototype.countAllAliases = function() {
	var soapDoc = AjxSoapDoc.create("SearchDirectoryRequest", ZaZimbraAdmin.URN, null);
	soapDoc.getMethod().setAttribute("limit", "1");
	var query = "(" + ZaDomain.A_zimbraDomainAliasTargetId + "=" + this.id + ")";
    var types = [ZaSearch.DOMAINS];

	soapDoc.set("query", query);
    soapDoc.set("types", types.toString());
	var command = new ZmCsfeCommand();
	var cmdParams = new Object();
	cmdParams.soapDoc = soapDoc;
    cmdParams.noAuthToken = true;
    try {
	    var resp = command.invoke(cmdParams).Body.SearchDirectoryResponse;
        if(resp.searchTotal)
            return  resp.searchTotal;
        else return 0;
    } catch(ex) {
        throw (ex);
    }
    return 0;
}

ZaDomain.getRelatedList =
function (parentPath) {
    var Tis = [];
    var count = this.countAllAccounts();
    if(count > 0) {
        var accountTi = new ZaTreeItemData({
                    text: ZaMsg.OVP_accounts,
                    count:count,
                    image:"Account",
                    mappingId: ZaZimbraAdmin._DOMAIN_ACCOUNT_LIST_VIEW,
                    path: parentPath + ZaTree.SEPERATOR + this.name + ZaTree.SEPERATOR + ZaMsg.OVP_accounts
                    }
                );
        accountTi.setData("domainItem", this);
        ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._DOMAIN_ACCOUNT_LIST_VIEW] = ZaOverviewPanelController.accountListInDomainTreeListener;
        Tis.push(accountTi);
    }

    count = this.countAllAliases();
    if(count > 0) {
        var aliasTi = new ZaTreeItemData({
                    text: ZaMsg.TABT_Aliases,
                    count:count,
                    image:"DomainAlias",
                    mappingId: ZaZimbraAdmin._DOMAIN_ALIAS_LIST_VIEW,
                    path: parentPath + ZaTree.SEPERATOR + this.name + ZaTree.SEPERATOR + ZaMsg.OVP_accounts
                    }
                );
        aliasTi.setData("domainItem", this);
        ZaOverviewPanelController.overviewTreeListeners[ZaZimbraAdmin._DOMAIN_ALIAS_LIST_VIEW] = ZaOverviewPanelController.domainListTreeListener;
        Tis.push(aliasTi);
    }
    return Tis;
}

ZaItem.getRelatedMethods["ZaDomain"].push(ZaDomain.getRelatedList);
}
if (AjxPackage.define("zimbraAdmin.search.model.ZaSearch")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
 * @class ZaSearch
 * @contructor ZaSearch this is a static class taht provides method for
 *             searching LDAP
 * @author Greg Solovyev
 */
ZaSearch = function() {
    this[ZaSearch.A_selected] = null;
    this[ZaSearch.A_query] = "";
    this[ZaSearch.A_fAliases] = "TRUE";
    this[ZaSearch.A_fAccounts] = "TRUE";
    this[ZaSearch.A_fdistributionlists] = "TRUE";
    this[ZaSearch.A_fResources] = "TRUE";
    this[ZaSearch.A_fDomains] = "TRUE";
    this[ZaSearch.A_fCoses] = "TRUE";
    this[ZaSearch.A_pagenum] = 1;
}
ZaSearch.ALIASES = "aliases";
ZaSearch.DLS = "distributionlists";
ZaSearch.DDLS = "dynamicgroups";
ZaSearch.ACCOUNTS = "accounts";
ZaSearch.RESOURCES = "resources";
ZaSearch.DOMAINS = "domains";
ZaSearch.COSES = "coses";
// Limit of result returned for best match.
ZaSearch.BEST_MATCH_LIMIT = 5;

ZaSearch.TYPES = new Object();
ZaSearch.TYPES[ZaItem.ALIAS] = ZaSearch.ALIASES;
ZaSearch.TYPES[ZaItem.DL] = ZaSearch.DLS;
ZaSearch.TYPES[ZaItem.ACCOUNT] = ZaSearch.ACCOUNTS;
ZaSearch.TYPES[ZaItem.RESOURCE] = ZaSearch.RESOURCES;
ZaSearch.TYPES[ZaItem.DOMAIN] = ZaSearch.DOMAINS;
ZaSearch.TYPES[ZaItem.COS] = ZaSearch.COSES;

ZaSearch.A_query = "query";
ZaSearch.A_selected = "selected";
ZaSearch.A_pagenum = "pagenum";
ZaSearch.A_fAliases = "f_aliases";
ZaSearch.A_fAccounts = "f_accounts";
ZaSearch.A_fDomains = "f_domains";
ZaSearch.A_fCoses = "f_coses";
ZaSearch.A_fdistributionlists = "f_distributionlists";
ZaSearch.A_fResources = "f_resources";
ZaSearch.A_ResultMsg = "resultMsg";

ZaSearch._currentQuery = null;
ZaSearch._domain = null; // current searchDirectory's domain parameter
ZaSearch._savedSearchToBeUpdated = true; // initial value to be true

ZaSearch.getPredefinedSavedSearchesForAdminOnly = function() {
    return [ {
        name : ZaMsg.ss_admin_account,
        query : "(|(zimbraIsAdminAccount=TRUE)(zimbraIsDelegatedAdminAccount=TRUE))"
    } ];
}

ZaSearch.getPredefinedSavedSearches = function() {
    return [ {
        name : ZaMsg.ss_external_accounts,
        query : "(zimbraIsExternalVirtualAccount=TRUE)"
    }, {
        name : ZaMsg.ss_locked_out_accounts,
        query : "(zimbraAccountStatus=*lockout*)"
    }, {
        name : ZaMsg.ss_closed_accounts,
        query : "(zimbraAccountStatus=*closed*)"
    }, {
        name : ZaMsg.ss_maintenance_accounts,
        query : "(zimbraAccountStatus=*maintenance*)"
    }, {
        name : ZaMsg.ss_non_active_accounts,
        query : "(!(zimbraAccountStatus=*active*))"
    }, {
        name : ZaMsg.ss_inactive_accounts_30,
        query : "(zimbraLastLogonTimestamp<=###JSON:{func: ZaSearch.getTimestampByDays, args:[-30]}###)"
    }, {
        name : ZaMsg.ss_inactive_accounts_90,
        query : "(zimbraLastLogonTimestamp<=###JSON:{func: ZaSearch.getTimestampByDays, args:[-90]}###)"
    } ];
}

/**
 * @param app
 *                reference to ZaApp
 */

ZaSearch.getAll = function() {
    return ZaSearch.search("", [ ZaSearch.ALIASES, ZaSearch.DLS, ZaSearch.ACCOUNTS, ZaSearch.RESOURCES,
            ZaSearch.DOMAINS, ZaSearch.COSES ], 1, ZaAccount.A_uid, true);
}

ZaSearch.standardAttributes = [ ZaAccount.A_displayname, ZaItem.A_zimbraId, ZaAlias.A_AliasTargetId,
        ZaAccount.A_accountName, ZaAccount.A_lastName, ZaAccount.A_mailHost, ZaAccount.A_uid, ZaAccount.A_COSId,
        ZaAccount.A_accountStatus, ZaAccount.A_zimbraLastLogonTimestamp, ZaAccount.A_description,
        ZaAccount.A_zimbraIsSystemAccount, ZaAccount.A_zimbraIsDelegatedAdminAccount, ZaAccount.A_zimbraIsAdminAccount,
        ZaAccount.A_zimbraIsSystemResource, ZaAccount.A_zimbraAuthTokenValidityValue,
        ZaAccount.A_zimbraIsExternalVirtualAccount, ZaDistributionList.A_mailStatus, ZaDistributionList.A_isAdminGroup,
        ZaResource.A_zimbraCalResType, ZaDomain.A_domainType, ZaDomain.A_domainName, ZaDomain.A_zimbraDomainStatus ]
        .join();
/**
 * Sends SearchDirectoryRequest to the SOAP Servlet params { query - query
 * string should be an LDAP-style filter string (RFC 2254) sortBy - LDAP
 * attribute name, default is zimbraId limit - the number of objects to return
 * (0 is default and means all) offset - the starting offset (0, 25, etc) domain -
 * the domain name to limit the search to (do not use if searching for domains)
 * applyCos - whether or not (0/1) to apply the COS policy to account. specify 0
 * if only requesting attrs that aren't inherited from COS attrs - array of of
 * attributes to return ("displayName", "zimbraId", "zimbraAccountStatus")
 * sortAscending - whether to sort in ascending order (0/1), 1 is default types =
 * array of types to return. legal values are:
 * accounts|distributionlists|aliases|resources|domains, default is accounts
 * callback - an AjxCallback }
 */

ZaSearch.searchDirectory = function(params) {
    var soapDoc = AjxSoapDoc.create("SearchDirectoryRequest", ZaZimbraAdmin.URN, null);
    if (params.query) {
        soapDoc.set("query", params.query);
        ZaSearch._currentQuery = params.query;
    } else {
        soapDoc.set("query", "");
        ZaSearch._currentQuery = "";
    }

    var sortBy = (params.sortBy != undefined) ? params.sortBy : ZaAccount.A_name;
    var limit = (params.limit != undefined) ? params.limit : ZaAccount.RESULTSPERPAGE;
    var offset = (params.offset != undefined) ? params.offset : "0";
    var sortAscending = (params.sortAscending != null) ? params.sortAscending : "1";

    soapDoc.getMethod().setAttribute("offset", offset);
    soapDoc.getMethod().setAttribute("limit", limit);
    soapDoc.getMethod().setAttribute("sortBy", sortBy);
    soapDoc.getMethod().setAttribute("sortAscending", sortAscending);

    if (params.applyCos)
        soapDoc.getMethod().setAttribute("applyCos", params.applyCos);
    else
        soapDoc.getMethod().setAttribute("applyCos", false);

    if (params.applyConfig)
        soapDoc.getMethod().setAttribute("applyConfig", params.applyConfig);
    else
        soapDoc.getMethod().setAttribute("applyConfig", "false");

    if (params.domain) {
        soapDoc.getMethod().setAttribute("domain", params.domain);
        ZaSearch._domain = params.domain;
    } else {
        ZaSearch._domain = null;
    }

    if (params.attrs && params.attrs.length > 0)
        soapDoc.getMethod().setAttribute("attrs", params.attrs.toString());

    if (params.types && params.types.length > 0)
        soapDoc.getMethod().setAttribute("types", ZaSearch.checkDynamicGroupType(params.types).toString());
    // set the maxResults to 2 for testing
    // params.maxResults = 2;
    if (params.maxResults) {
        soapDoc.getMethod().setAttribute("maxResults", params.maxResults.toString());
    }

    var cmdParams = new Object();
    cmdParams.soapDoc = soapDoc;
    if (params.callback) {
        cmdParams.asyncMode = true;
        cmdParams.callback = params.callback;
        cmdParams.skipCallbackIfCancelled = params.skipCallbackIfCancelled;
    }

    try {
        // only returned for synchronous calls
        return ZaRequestMgr.invoke(cmdParams, params);

    } catch (ex) {
        if (params.ignoreTooManyResultsException) {
            ZaSearch.handleTooManyResultsException(ex, cmdParams.exceptionFrom || "ZaSearch.searchDirectory");
            return null;
        } else {
            throw (ex);
        }
    }
}

ZaSearch.checkDynamicGroupType = function(type) {
    for (var i = 0; i < type.length; i++) {
        if (type[i] == ZaSearch.DLS) {
            type.push(ZaSearch.DDLS);
            return type;
        }
    }
    return type;
}

ZaSearch.TOO_MANY_RESULTS_FLAG = false; // control the no result text of the
                                        // list view
ZaSearch.handleTooManyResultsException = function(ex, from) {
    if (ex.code == ZmCsfeException.TOO_MANY_SEARCH_RESULTS) {
        // supress the result
        /*
         * if(window.console && window.console.log) { console.log("Suppressed
         * Exception: " + ex.msg + " from: " + from ); }
         */
        ZaSearch.TOO_MANY_RESULTS_FLAG = true;
    } else {
        throw (ex);
    }
}

ZaSearch.findAccount = function(by, val) {
    var soapDoc = AjxSoapDoc.create("SearchDirectoryRequest", ZaZimbraAdmin.URN, null);
    soapDoc.getMethod().setAttribute("limit", "1");
    var query = [ "(", by, "=", val, ")" ].join("");
    soapDoc.set("query", query);
    var command = new ZmCsfeCommand();
    var cmdParams = new Object();
    cmdParams.soapDoc = soapDoc;
    cmdParams.noAuthToken = true;
    var resp = command.invoke(cmdParams).Body.SearchDirectoryResponse;
    var list = new ZaItemList(ZaAccount);
    list.loadFromJS(resp);
    return list.getArray()[0];
}

ZaSearch.prototype.dynSelectDataCallback = function(params, resp) {
    var callback = params.callback;

    if (params.busyId)
        ZaApp.getInstance().getAppCtxt().getShell().setBusy(false, params.busyId);

    if (!callback)
        return;
    try {
        if (!resp) {
            throw (new AjxException(ZaMsg.ERROR_EMPTY_RESPONSE_ARG, AjxException.UNKNOWN,
                    "ZaListViewController.prototype.dynSelectDataCallback"));
        }
        if (resp.isException()) {
            throw (resp.getException());
        } else {
            var response = resp.getResponse().Body.SearchDirectoryResponse;
            var list = new ZaItemList(null);
            list.loadFromJS(response);
            callback.run(list.getArray(), response.more, response.searchTotal);
        }
    } catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaSearch.prototype.dynSelectDataCallback");
    }
}

ZaSearch.prototype.dynSelectSearchCosesCallback = function(params, resp) {
    var callback = params.callback;

    if (params.busyId)
        ZaApp.getInstance().getAppCtxt().getShell().setBusy(false, params.busyId);

    if (!callback)
        return;
    try {
        if (!resp) {
            throw (new AjxException(ZaMsg.ERROR_EMPTY_RESPONSE_ARG, AjxException.UNKNOWN,
                    "ZaListViewController.prototype.dynSelectSearchCosesCallback"));
        }
        if (resp.isException()) {
            throw (resp.getException());
        } else {
            var response = resp.getResponse().Body.SearchDirectoryResponse;
            var list = new ZaItemList(null);
            list.loadFromJS(response);
            var choices = new XFormChoices([], XFormChoices.OBJECT_LIST, "id", "name");
            choices.setChoices(list.getArray());
            callback.run(list.getArray(), response.more, response.searchTotal);
        }
    } catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex,
                "ZaSearch.prototype.dynSelectSearchCosesCallback");
    }
}

/**
 * @argument callArgs {value, event, callback}
 */
ZaSearch.prototype.dynSelectSearch = function(callArgs) {
    try {
        var value = callArgs["value"];
        var event = callArgs["event"];
        var callback = callArgs["callback"];
        var busyId = Dwt.getNextId();

        var params = new Object();
        var dataCallback = new AjxCallback(this, this.dynSelectDataCallback, {
            callback : callback,
            busyId : busyId
        });
        params.types = callArgs.types ? callArgs.types : [ ZaSearch.ACCOUNTS, ZaSearch.DLS ];
        if (!AjxUtil.isEmpty(callArgs.attrs)) {
            params.attrs = callArgs.attrs;
        }
        params.callback = dataCallback;
        params.sortBy = ZaAccount.A_name;
        if (callArgs["needCategorized"]) {
            params.limit = ZaSearch.BEST_MATCH_LIMIT;
            params.query = ZaSearch.getBestMatchSearchByNameQuery(value, params.types);
        } else {
            params.query = ZaSearch.getSearchByNameQuery(value, params.types);
        }
        params.controller = ZaApp.getInstance().getCurrentController();
        params.showBusy = true;
        params.busyId = busyId;
        params.busyMsg = ZaMsg.BUSY_SEARCHING;
        params.skipCallbackIfCancelled = false;
        if (callArgs.domain)
            params.domain = callArgs.domain;

        ZaSearch.searchDirectory(params);
    } catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaSearch.prototype.dynSelectSearch");
    }
}

ZaSearch.prototype.dynSearchField = function(callArgs) {
    var newCallArgs = {};
    newCallArgs.value = callArgs["value"];
    newCallArgs.event = callArgs["event"];
    newCallArgs.callback = callArgs["callback"];
    newCallArgs.needCategorized = true;
    newCallArgs.types = ZaApp.getInstance().getSearchListController()._searchField.getSearchTypes();
    ZaSearch.prototype.dynSelectSearch.call(this, newCallArgs);

}
/**
 * @argument callArgs {value, event, callback, extraLdapQuery}
 */
ZaSearch.prototype.dynSelectSearchGroups = function(callArgs) {
    try {
        var value = callArgs["value"];
        var event = callArgs["event"];
        var callback = callArgs["callback"];
        var extraLdapQuery = callArgs["extraLdapQuery"];
        var busyId = Dwt.getNextId();

        var params = new Object();
        var dataCallback = new AjxCallback(this, this.dynSelectDataCallback, {
            callback : callback,
            busyId : busyId
        });
        params.types = [ ZaSearch.DLS ];
        params.callback = dataCallback;
        params.sortBy = ZaAccount.A_name;
        params.query = ZaSearch.getSearchByNameQuery(value, params.types);
        if (extraLdapQuery)
            params.query = "(&" + extraLdapQuery + params.query + ")";
        params.controller = ZaApp.getInstance().getCurrentController();
        params.busyId = busyId;
        params.showBusy = true;
        params.busyMsg = ZaMsg.BUSY_SEARCHING;
        params.skipCallbackIfCancelled = false;
        ZaSearch.searchDirectory(params);
    } catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaSearch.prototype.dynSelectSearchGroups");
    }
}

/**
 * @argument callArgs {value, event, callback}
 */
ZaSearch.prototype.dynSelectSearchDomains = function(callArgs) {
    try {
        var value = callArgs["value"];
        var event = callArgs["event"];
        var callback = callArgs["callback"];
        var applyConfig = callArgs["applyConfig"];
        var busyId = Dwt.getNextId();

        var params = new Object();
        var dataCallback = new AjxCallback(this, this.dynSelectDataCallback, {
            callback : callback,
            busyId : busyId
        });
        params.types = [ ZaSearch.DOMAINS ];
        params.callback = dataCallback;
        params.sortBy = ZaDomain.A_domainName;
        params.query = "";
        if (!ZaZimbraAdmin.hasGlobalDomainListAccess()) {
            var domainNameList = ZaApp.getInstance()._domainNameList;
            if (domainNameList && domainNameList instanceof Array) {
                for (var i = 0; i < domainNameList.length; i++) {
                    if (!value || domainNameList[i].indexOf(value) != -1)
                        params.query += "(" + ZaDomain.A_domainName + "=" + domainNameList[i] + ")";
                }
                if (domainNameList.length > 1)
                    params.query = "(|" + params.query + ")";
            }
        } else
            params.query = ZaSearch.getSearchDomainByNameQuery(value);
        params.controller = ZaApp.getInstance().getCurrentController();
        params.showBusy = true;
        params.busyId = busyId;
        params.applyConfig = applyConfig;
        params.busyMsg = ZaMsg.BUSY_SEARCHING_DOMAINS;
        params.skipCallbackIfCancelled = false;
        params.attrs = [ ZaDomain.A_domainName, ZaDomain.A_zimbraDomainStatus, ZaItem.A_zimbraId,
                ZaDomain.A_domainType, ZaDomain.A_zimbraMailAddressValidationRegex ];
        ZaSearch.searchDirectory(params);
    } catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaSearch.prototype.dynSelectSearchDomains");
    }
}

ZaSearch.prototype.dynSelectSearchOnlyDomains = function(callArgs) {
    try {
        var value = callArgs["value"];
        var event = callArgs["event"];
        var callback = callArgs["callback"];
        var busyId = Dwt.getNextId();

        var params = new Object();
        var dataCallback = new AjxCallback(this, this.dynSelectDataCallback, {
            callback : callback,
            busyId : busyId
        });
        params.types = [ ZaSearch.DOMAINS ];
        params.callback = dataCallback;
        params.sortBy = ZaDomain.A_domainName;
        params.query = ZaSearch.getSearchOnlyDomainByNameQuery(value);
        params.controller = ZaApp.getInstance().getCurrentController();
        params.showBusy = true;
        params.busyId = busyId;
        params.busyMsg = ZaMsg.BUSY_SEARCHING_DOMAINS;
        params.skipCallbackIfCancelled = false;
        params.attrs = [ ZaDomain.A_domainName, ZaDomain.A_zimbraDomainStatus, ZaItem.A_zimbraId, ZaDomain.A_domainType ];
        ZaSearch.searchDirectory(params);
    } catch (ex) {
        ZaApp.getInstance().getCurrentController()
                ._handleException(ex, "ZaSearch.prototype.dynSelectSearchOnlyDomains");
    }
}

/**
 * @argument callArgs {value, event, callback}
 */
ZaSearch.prototype.dynSelectSearchCoses = function(callArgs) {
    try {
        var value = callArgs["value"];
        var event = callArgs["event"];
        var callback = callArgs["callback"];
        var busyId = Dwt.getNextId();

        var params = new Object();
        var dataCallback = new AjxCallback(this, this.dynSelectSearchCosesCallback, {
            callback : callback,
            busyId : busyId
        });
        params.types = [ ZaSearch.COSES ];
        params.callback = dataCallback;
        params.sortBy = ZaCos.A_name;
        params.query = "";
        if (!ZaZimbraAdmin.hasGlobalCOSSListAccess()) {
            var cosNameList = ZaApp.getInstance()._cosNameList;
            if (cosNameList && (cosNameList instanceof Array) && cosNameList.length == 0) {
                for (var i = 0; i < cosNameList.length; i++)
                    query += "(" + ZaCos.A_name + "=" + cosNameList[i] + ")";
                if (cosNameList.length > 1)
                    query = "(|" + query + ")";
            } else
                params.query = ZaSearch.getSearchCosByNameQuery(value);
        } else
            params.query = ZaSearch.getSearchCosByNameQuery(value);
        params.controller = ZaApp.getInstance().getCurrentController();
        params.showBusy = true;
        params.busyId = busyId;
        params.busyMsg = ZaMsg.BUSY_SEARCHING_COSES;
        params.skipCallbackIfCancelled = false;
        ZaSearch.searchDirectory(params);
    } catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaSearch.prototype.dynSelectSearchCoses");
    }
}

/**
 * Sends SearchDirectoryRequest to the SOAP Servlet
 * 
 * @param query -
 *                query string
 * @param types -
 *                array of object types to search
 *                for([ZaSearch.ALIASES,ZaSearch.DLS,ZaSearch.ACCOUNTS,
 *                ZaSearch.RESOURCES])
 * @pagenum - results page number
 * @orderby - attribute to sort by
 * @isascending - sort order (boolean)
 * @app - reference to ZaApp instance (will be passed on to ZaItemList
 *      contructor)
 * @attrs - coma separated list of attributes to return (default:
 *        ZaSearch.standardAttributes)
 * @limit - maximum number of records to return
 * @domainName - domain name (optional, if searching within one domain)
 */
ZaSearch.search = function(query, types, pagenum, orderby, isascending, attrs, limit, domainName, maxResults) {
    // if(!orderby) orderby = ZaAccount.A_uid;
    if (!orderby)
        orderby = ZaAccount.A_name;
    var myisascending = "1";

    if (!isascending) {
        myisascending = "0";
    }

    limit = (limit != null) ? limit : ZaAccount.RESULTSPERPAGE;

    var offset = (pagenum - 1) * limit;
    attrs = (attrs != null) ? attrs : ZaSearch.standardAttributes;
    /*
     * var soapDoc = AjxSoapDoc.create("SearchDirectoryRequest",
     * ZaZimbraAdmin.URN, null); soapDoc.set("query", query); if (domainName !=
     * null) { soapDoc.getMethod().setAttribute("domain", domainName); }
     * soapDoc.getMethod().setAttribute("offset", offset);
     * soapDoc.getMethod().setAttribute("limit", limit);
     * soapDoc.getMethod().setAttribute("applyCos", "0");
     * soapDoc.getMethod().setAttribute("attrs", attrs);
     * soapDoc.getMethod().setAttribute("sortBy", orderby);
     * soapDoc.getMethod().setAttribute("sortAscending", myisascending);
     * if(types != null && types.length>0) {
     * soapDoc.getMethod().setAttribute("types", types.toString()); } //For
     * testing: maxResults = 2; if(maxResults) {
     * soapDoc.getMethod().setAttribute("maxResults", maxResults.toString()); }
     * 
     * var command = new ZmCsfeCommand(); var params = new Object();
     * params.soapDoc = soapDoc; var resp =
     * command.invoke(params).Body.SearchDirectoryResponse;
     */

    // Use SearchDirectory
    var params = {
        "query" : query,
        "offset" : offset,
        "limit" : limit,
        "applyCos" : "0",
        "attrs" : attrs,
        "sortBy" : orderby,
        "sortAscending" : myisascending
    }
    if (domainName != null) {
        params["domain"] = domainName;
    }
    if (types != null && types.length > 0) {
        params["types"] = types.toString();
    }
    if (maxResults) {
        params["maxResults"] = maxResults.toString();
    }
    params.controller = ZaApp.getInstance().getCurrentController();
    var resp = ZaSearch.searchDirectory(params).Body.SearchDirectoryResponse;

    var list = new ZaItemList(null);
    list.loadFromJS(resp);

    var searchTotal = resp.searchTotal;
    var numPages = Math.ceil(searchTotal / limit);
    return {
        "list" : list,
        "numPages" : numPages,
        "searchTotal" : searchTotal
    };
}

ZaSearch.searchByDomain = function(domainName, types, pagenum, orderby, isascending, attrs, limit) {
    return ZaSearch.search("", types, pagenum, orderby, isascending, attrs, limit, domainName);
}

ZaSearch.getObjectCountsCalback = function(params, resp) {
    var callback = params.callback;

    if (!callback)
        return;
    try {
        if (!resp) {
            throw (new AjxException(ZaMsg.ERROR_EMPTY_RESPONSE_ARG, AjxException.UNKNOWN,
                    "ZaSearch.getObjectCountsCalback"));
        }
        if (resp.isException()) {
            throw (resp.getException());
        } else {
            var retObj;
            retObj = {};
            retObj[ZaItem.ACCOUNT] = 0;
            retObj[ZaItem.ALIAS] = 0;
            retObj[ZaItem.RESOURCE] = 0;
            retObj[ZaItem.DL] = 0;
            retObj[ZaItem.DOMAIN] = 0;
            retObj[ZaItem.SERVER] = 0;

            // parse batch response and fill in the result object
            var batchResp = resp.getResponse().Body.BatchResponse;

            if (batchResp.CountObjectsResponse) {
                for (var i = 0; i < batchResp.CountObjectsResponse.length; i++) {
                    resp = batchResp.CountObjectsResponse[i];
                    var type = resp.type;
                    if (type == "userAccount") {
                        type = ZaItem.ACCOUNT; // UI only shows number of
                                                // non-system accounts
                    }
                    retObj[type] = resp.num;
                }
            }

            // call the callback that will use the response data
            callback.run(retObj);
        }
    } catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaSearch.getObjectCountsCalback");
    }
}

ZaSearch.getObjectCounts = function(types, callback) {

    var dataCallback = new AjxCallback(ZaSearch.getObjectCountsCalback, {
        callback : callback
    });

    var soapDoc = AjxSoapDoc.create("BatchRequest", "urn:zimbra");
    soapDoc.setMethodAttribute("onerror", "continue");
    for (var i = 0; i < types.length; i++) {
        var type = types[i];
        var getCountDoc = soapDoc.set("CountObjectsRequest", null, null, ZaZimbraAdmin.URN);

        if (type == ZaItem.ACCOUNT) {
            type = "userAccount"; // exclude system account
        }
        getCountDoc.setAttribute("type", type);
        if (ZaZimbraAdmin.isGlobalAdmin() === false && type == ZaItem.DOMAIN && ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsDelegatedAdminAccount] === "TRUE") {
            getCountDoc.setAttribute("onlyRelated", "true");
        }
    }
    try {
        var command = new ZmCsfeCommand();
        var cmdParams = new Object();
        cmdParams.noAuthToken = true;
        cmdParams.soapDoc = soapDoc;
        cmdParams.asyncMode = true;
        cmdParams.callback = dataCallback;
        command.invoke(cmdParams);
    } catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaSearch.getObjectCounts", null, false);
    }
}

ZaSearch.getSearchCosByNameQuery = function(n) {
    if (n == null || n == "") {
        return "";
    } else {
        n = ZaSearch.escapeLdapQuery(n);
        // n = String(n).replace(/([\\\\\\*\\(\\)])/g, "\\$1");
        return ("(|(uid=*" + n + "*)(cn=*" + n + "*)(sn=*" + n + "*)(gn=*" + n + "*)(zimbraId=" + n + "))");
    }
}

ZaSearch.getSearchDomainByNameQuery = function(n) {
    if (n == null || n == "") {
        return "";
    } else {
        n = ZaSearch.escapeLdapQuery(n);
        // n = String(n).replace(/([\\\\\\*\\(\\)])/g, "\\$1");
        return ("(|(uid=*" + n + "*)(cn=*" + n + "*)(sn=*" + n + "*)(gn=*" + n + "*)(zimbraId=" + n
                + ")(zimbraDomainName=*" + n + "*))");
    }
}

ZaSearch.getSearchOnlyDomainByNameQuery = function(n) {
    if (n == null || n == "") {
        return "";
    } else {
        n = ZaSearch.escapeLdapQuery(n);
        // n = String(n).replace(/([\\\\\\*\\(\\)])/g, "\\$1");
        return ("(&(|(uid=*" + n + "*)(cn=*" + n + "*)(sn=*" + n + "*)(gn=*" + n + "*)(zimbraId=" + n
                + ")(zimbraDomainName=*" + n + "*))(zimbraDomainType=local))");
    }
}

ZaSearch.getSearchByNameQuery = function(n, types, excludeClosed) {
    excludeClosed = excludeClosed ? excludeClosed : false;
    var query = [];
    /*
     * if (n == null || n == "") { if(excludeClosed) { return
     * "!(zimbraAccountStatus=closed)"; } else { return ""; }
     */
    if (excludeClosed) {
        query.push("(&(!(zimbraAccountStatus=closed))");
    }

    if (!AjxUtil.isEmpty(n)) {
        query.push("(|");
        // bug 67477, escape special symbols "(", ")", "*", "\"
        n = ZaSearch.escapeLdapQuery(n);
        if (!types)
            types = [ ZaSearch.ALIASES, ZaSearch.ACCOUNTS, ZaSearch.DLS, ZaSearch.RESOURCES, ZaSearch.DOMAINS,
                    ZaSearch.COSES ];
        var addedAddrFields = false;
        var addedAccResFields = false;
        var addedDLAliasFields = false;
        for (var i = 0; i < types.length; i++) {
            if (types[i] == "domains") {
                query.push("(zimbraDomainName=*" + n + "*)");
            } else if (types[i] == ZaSearch.COSES) {
                query.push("(cn=*" + n + "*)");
            } else if (types[i] == ZaSearch.ALIASES) {
                query.push("(zimbraDomainName=*" + n + "*)(uid=*" + n + "*)");

            } else {
                if (!addedAddrFields) {
                    query.push("(mail=*" + n + "*)(cn=*" + n + "*)(sn=*" + n + "*)(gn=*" + n + "*)(displayName=*" + n
                            + "*)");
                    addedAddrFields = true;
                }
                if (!addedAccResFields && (types[i] == "accounts" || types[i] == "resources")) {
                    query.push("(zimbraMailDeliveryAddress=*" + n + "*)");
                    addedAccResFields = true;
                } else if (!addedDLAliasFields && (types[i] == "distributionlists" || types[i] == "aliases")) {
                    query.push("(zimbraMailAlias=*" + n + "*)(uid=*" + n + "*)");
                    addedDLAliasFields = true;
                }
            }
        }
    }
    if (excludeClosed) {
        query.push(")");
    }
    if (!AjxUtil.isEmpty(n)) {
        query.push(")");
    }
    // return "(|" + query.join("") + ")" ;
    return query.join("");

}

/**
 * Fix for Bug 81454
 * 
 * Separating out the query generation for alias searching.
 * 
 * @param n
 * @param types
 * @param excludeClosed
 * @return {String}
 * 
 */
ZaSearch.searchAliasByNameQuery = function(n, types, excludeClosed) {
    excludeClosed = excludeClosed ? excludeClosed : false;
    var query = [];

    if (excludeClosed) {
        query.push("(&(!(zimbraAccountStatus=closed))");
    }

    if (!AjxUtil.isEmpty(n)) {
        query.push("(|");
        // bug 67477, escape special symbols "(", ")", "*", "\"
        n = ZaSearch.escapeLdapQuery(n);

        if (!types) {
            types = [ ZaSearch.ALIASES, ZaSearch.ACCOUNTS, ZaSearch.DLS, ZaSearch.RESOURCES, ZaSearch.DOMAINS,
                    ZaSearch.COSES ];
        }

        var addedAddrFields = false;
        var addedAccResFields = false;
        var addedDLAliasFields = false;

        for (var i = 0; i < types.length; i++) {
            if (types[i] == "domains") {
                query.push("(zimbraDomainName=" + n + ")");
            } else if (types[i] == ZaSearch.COSES) {
                query.push("(cn=" + n + ")");
            } else if (types[i] == ZaSearch.ALIASES) {
                query.push("(zimbraDomainName=" + n + ")(uid=" + n + ")");
            } else {
                if (!addedAddrFields) {
                    query.push("(mail=" + n + ")(cn=" + n + ")(sn=" + n + ")(gn=" + n + ")(displayName=" + n + ")");
                    addedAddrFields = true;
                }
                if (!addedAccResFields && (types[i] == "accounts" || types[i] == "resources")) {
                    query.push("(zimbraMailDeliveryAddress=" + n + ")");
                    addedAccResFields = true;
                } else if (!addedDLAliasFields && (types[i] == "distributionlists" || types[i] == "aliases")) {
                    query.push("(zimbraMailAlias=" + n + ")(uid=" + n + ")");
                    addedDLAliasFields = true;
                }
            }
        }
    }

    if (excludeClosed) {
        query.push(")");
    }

    if (!AjxUtil.isEmpty(n)) {
        query.push(")");
    }

    return query.join("");
}

/**
 * Get the query to search attributes that start or end with <code>n</code>.
 * 
 * @param n
 * @param types
 *                Array object that contains item types
 */
ZaSearch.getBestMatchSearchByNameQuery = function(n, types) {
    var query = ZaSearch.getSearchByNameQuery(n, types);
    n = ZaSearch.escapeLdapQuery(n);

    var orig = new RegExp("\\*" + n + "\\*", "g");
    var lReg = new RegExp("^\\\s*\\(\\\s*\\|");
    var rReg = new RegExp("\\)\\\s*$");
    var beginWithQuery = query.replace(orig, n + "*");
    beginWithQuery = beginWithQuery.replace(lReg, "");
    beginWithQuery = beginWithQuery.replace(rReg, "");
    var endWithQuery = query.replace(orig, "*" + n);
    endWithQuery = endWithQuery.replace(lReg, "");
    endWithQuery = endWithQuery.replace(rReg, "");
    return "(|" + beginWithQuery + endWithQuery + ")";
}

ZaSearch.getSearchByDisplayNameQuery = function(n) {
    if (n == null || n == "") {
        return "";
    } else {
        n = String(n).replace(/([\\\\\\*\\(\\)])/g, "\\$1");
        // return
        // ("(|(uid=*"+n+"*)(cn=*"+n+"*)(sn=*"+n+"*)(gn=*"+n+"*)(displayName=*"+n+"*)(zimbraId="+n+")(mail=*"+n+"*)(zimbraMailAlias=*"+n+"*)(zimbraMailDeliveryAddress=*"+n+"*)(zimbraDomainName=*"+n+"*))");
        return ("(displayName=*" + n + "*)");
    }
}

ZaSearch.searchByQueryHolder = function(queryHolder, pagenum, orderby, isascending) {
    if (queryHolder.isByDomain) {
        return ZaSearch.searchByDomain(queryHolder.byValAttr, queryHolder.types, pagenum, orderby, isascending);
    } else {
        return ZaSearch.search(queryHolder.queryString, queryHolder.types, pagenum, orderby, isascending,
                queryHolder.fetchAttrs, queryHolder.limit);
    }
}

ZaSearch.getSearchFromQuery = function(query) {
    var searchObj = new ZaSearch();
    searchObj[ZaSearch.A_selected] = null;
    searchObj[ZaSearch.A_query] = query.queryString;
    searchObj[ZaSearch.A_fAliases] = "FALSE";
    searchObj[ZaSearch.A_fAccounts] = "FALSE";
    searchObj[ZaSearch.A_fdistributionlists] = "FALSE";
    searchObj[ZaSearch.A_fResources] = "FALSE";
    searchObj[ZaSearch.A_fDomains] = "FALSE";
    searchObj[ZaSearch.A_fCoses] = "FALSE";

    if (query.types != null) {
        for (var i = 0; i < query.types.length; ++i) {
            if (query.types[i] == ZaSearch.ALIASES) {
                searchObj[ZaSearch.A_fAliases] = "TRUE";
            }
            if (query.types[i] == ZaSearch.ACCOUNTS) {
                searchObj[ZaSearch.A_fAccounts] = "TRUE";
            }
            if (query.types[i] == ZaSearch.DLS) {
                searchObj[ZaSearch.A_fdistributionlists] = "TRUE";
            }
            if (query.types[i] == ZaSearch.RESOURCES) {
                searchObj[ZaSearch.A_fResources] = "TRUE";
            }
            if (query.types[i] == ZaSearch.DOMAINS) {
                searchObj[ZaSearch.A_fDomains] = "TRUE";
            }
            if (query.types[i] == ZaSearch.COSES) {
                searchObj[ZaSearch.A_fCoses] = "TRUE";
            }
        }
    }
    return searchObj;
};

ZaSearch.myXModel = {
    items : [ {
        id : ZaSearch.A_query,
        type : _OBJECT_
    }, {
        id : ZaSearch.A_selected,
        type : _OBJECT_,
        items : ZaAccount.myXModel
    }, {
        id : ZaSearch.A_fAliases,
        type : _ENUM_,
        choices : ZaModel.BOOLEAN_CHOICES
    }, {
        id : ZaSearch.A_fdistributionlists,
        type : _ENUM_,
        choices : ZaModel.BOOLEAN_CHOICES
    }, {
        id : ZaSearch.A_fAccounts,
        type : _ENUM_,
        choices : ZaModel.BOOLEAN_CHOICES
    }, {
        id : ZaSearch.A_pagenum,
        type : _NUMBER_
    }, {
        id : ZaSearch.A_ResultMsg,
        type : _STRING_
    } ]
}

ZaSearchQuery = function(queryString, types, byDomain, byVal, attrsCommaSeparatedString, limit) {
    this.queryString = queryString;
    this.isByDomain = byDomain;
    this.byValAttr = byVal;
    this.types = types;
    this.fetchAttrs = (attrsCommaSeparatedString != null) ? attrsCommaSeparatedString : ZaSearch.standardAttributes;
    this.limit = (limit != null) ? limit : ZaAccount.RESULTSPERPAGE;
}

/**
 * add the search result count information to the toolbar
 */
ZaSearch.searchResultCountsView = function(opArr, orderArr) {
    opArr[ZaOperation.SEP] = new ZaOperation(ZaOperation.SEP);
    opArr[ZaOperation.LABEL] = new ZaOperation(ZaOperation.LABEL, AjxMessageFormat.format(ZaMsg.searchResultCount, [ 0,
            0 ]), null, null, null, null, null, null, "ZaSearchResultCountLabel", ZaOperation.SEARCH_RESULT_COUNT);
    opArr[ZaOperation.SEP] = new ZaOperation(ZaOperation.SEP);
    for (var i = 0; i < orderArr.length; i++) {
        if (orderArr[i] == ZaOperation.PAGE_BACK) {
            orderArr.splice(i + 1, 0, ZaOperation.SEP, ZaOperation.LABEL, ZaOperation.SEP);
            break;
        }
    }
}

ZaSearch.isAccountExist = function(params) {
    var currentController = ZaApp.getInstance().getCurrentController();

    var accountName = params.name;
    var isPopupErrorDialog = params.popupError ? true : false;

    if (!accountName) {
        currentController.popupErrorDialog(ZaMsg.error_account_missing);
        return true;
    }

    var params = {
        query : [ "(mail=", accountName, ")" ].join(""),
        limit : 2,
        applyCos : 0,
        types : [ ZaSearch.DLS, ZaSearch.ALIASES, ZaSearch.ACCOUNTS, ZaSearch.RESOURCES ],
        controller : currentController
    };
    try {
        var resp = ZaSearch.searchDirectory(params).Body.SearchDirectoryResponse;
    } catch (ex) {
        currentController._handleException(ex, "ZaSearch.isAccountExist", null, false);
    }
    var list = new ZaItemList(null);
    list.loadFromJS(resp);
    if (list.size() > 0) {
        if (isPopupErrorDialog) {
            var acc = list.getArray()[0];
            if (acc.type == ZaItem.ALIAS) {
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_aliasWithThisNameExists);
            } else if (acc.type == ZaItem.RESOURCE) {
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_resourceWithThisNameExists);
            } else if (acc.type == ZaItem.DL) {
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_dlWithThisNameExists);
            } else {
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_accountWithThisNameExists);
            }
        }

    } else {
        return false;
    }

    return true;
}

/**
 * Never use this call, always use CountAccountRequest
 * ZaSearch.getUsedDomainAccounts = function (domainName, controller) { var
 * params = { domain: domainName, limit: "0", type: "accounts", offset: "0",
 * applyCos: "0", attrs: "", controller: controller }
 * 
 * var resp = ZaSearch.searchDirectory(params) ; return
 * resp.Body.SearchDirectoryResponse.searchTotal ; }
 */

// modify the saved search
// @param savedSearchArray : the array contains the saved searches obj to be
// modified.
// The object is {name: "saved search name", query : "saved search query" }
ZaSearch.modifySavedSearches = function(savedSearchArray, callback) {
    if (ZaSearchField.canSaveSearch()) {
        var soapDoc = AjxSoapDoc.create("ModifyAdminSavedSearchesRequest", ZaZimbraAdmin.URN, null);
        for (var i = 0; i < savedSearchArray.length; i++) {
            var cSavedSearch = savedSearchArray[i];
            var el = soapDoc.set("search", cSavedSearch.query);
            el.setAttribute("name", cSavedSearch.name);
        }

        var command = new ZmCsfeCommand();
        var cmdParams = new Object();
        cmdParams.soapDoc = soapDoc;
        cmdParams.noAuthToken = true;
        if (callback) {
            cmdParams.asyncMode = true;
            cmdParams.callback = callback;
        }
        command.invoke(cmdParams);
    }
}

// get saved searches
// @param searchNameArr: the array contains all the saved search names whose
// queries will be returned.
ZaSearch.getSavedSearches = function(searchNameArr, callback) {
    if (ZaSearchField.canViewSavedSearch()) {
        var soapDoc = AjxSoapDoc.create("GetAdminSavedSearchesRequest", ZaZimbraAdmin.URN, null);
        if (searchNameArr) {
            for (var i = 0; i < searchNameArr.length; i++) {
                var el = soapDoc.set("search", "");
                el.setAttribute("name", searchNameArr[i]);
            }
        }

        var command = new ZmCsfeCommand();
        var cmdParams = new Object();
        cmdParams.soapDoc = soapDoc;
        cmdParams.noAuthToken = true;
        if (callback) {
            cmdParams.asyncMode = true;
            cmdParams.callback = callback;
        }
        return command.invoke(cmdParams);
    }
}

ZaSearch.updateSavedSearch = function(resp) {

    // if(window.console && window.console.log) console.debug("Update Saved
    // Search ... ");
    ZaSearch.SAVED_SEARCHES = [];
    if (resp != null) {
        var respObj = resp._data || resp;
        var searchResults = respObj.Body.GetAdminSavedSearchesResponse.search;

        if (searchResults) {
            for (var i = 0; i < searchResults.length; i++) {
                ZaSearch.SAVED_SEARCHES.push({
                    name : searchResults[i].name,
                    query : searchResults[i]._content
                })
            }
        }
    }

    ZaSearch._savedSearchToBeUpdated = false;
}

ZaSearch.loadPredefinedSearch = function() {
    if (ZaSearchField.canViewSavedSearch()) {
        // var currentSavedSearches =
        // ZaSearch.getSavedSearches().Body.GetAdminSavedSearchesResponse.search;
        var currentSavedSearches = ZaApp.getInstance().getSavedSearchList();
        /*
         * If we get saved search from server and have write-permission, we will *
         * replace all the "zimbraIsDomainAdminAccount" with "zimbraIsDelegatedA *
         * dminAccount" to update the query string for version update
         */
        if ((!AjxUtil.isEmpty(currentSavedSearches)) && (ZaSearchField.canSaveSearch())) {
            var modifiedSearches = [];

            for (var i = 0; i < currentSavedSearches.length; i++) {
                var currentName = currentSavedSearches[i].name;
                var currentContent = currentSavedSearches[i].query;

                if (currentContent && currentContent.search(/zimbraIsDomainAdminAccount/) != -1) {

                    currentContent = currentContent.replace(/zimbraIsDomainAdminAccount/g,
                            "zimbraIsDelegatedAdminAccount"); // 'g' is used
                                                                // for global
                                                                // replace
                    modifiedSearches.push({
                        name : currentName,
                        query : currentContent
                    });
                }
            }

            if (modifiedSearches.length != 0) {
                ZaSearch.modifySavedSearches(modifiedSearches);
                ZaSearch.SAVED_SEARCHES = savedSearchArr;
                ZaSearch._savedSearchToBeUpdated = false;
            }
        }

        if ((AjxUtil.isEmpty(currentSavedSearches)) && (ZaSearchField.canSaveSearch())) {// load
                                                                                            // the
                                                                                            // predefined
                                                                                            // searches
            // if(window.console && window.console.log) console.log("Load the
            // predefined saved searches ...") ;
            var savedSearchArr = [];
            // if (!ZaSettings.isDomainAdmin) { //admin only searches
            for (var m = 0; m < ZaSearch.getPredefinedSavedSearchesForAdminOnly().length; m++) {
                savedSearchArr.push(ZaSearch.getPredefinedSavedSearchesForAdminOnly()[m]);
            }
            // }

            for (var n = 0; n < ZaSearch.getPredefinedSavedSearches().length; n++) {
                savedSearchArr.push(ZaSearch.getPredefinedSavedSearches()[n]);
            }

            ZaSearch.modifySavedSearches(savedSearchArr);
            ZaSearch.SAVED_SEARCHES = savedSearchArr;
            ZaSearch._savedSearchToBeUpdated = false;
        }
    }
}

/**
 * parse saved search query to allow the following searches:
 * - "Inactive Accounts (30 Days)" -- returns all accounts not logged in in 30 days
 * - "Inactive Accounts (90 Days)" -- returns all accounts not logged in in 90 days
 * 
 * This is a temperary solution to allow some dynamic data to be kept in the saved search 
 * and parsed on the client side before we have a formal query language.
 * 
 * Currently, it supports
 * 1)###JSON:{func: %function_name%, args:[%days%]}### : 
 * 	{func: %function_name%, args:[%days%]} is a JSON object with function name and arguments
 * 	 examples: 	{func: ZaSearch.getTimestampByDays , args: [30] } 				
 * 			
 * 
 */
ZaSearch.parseSavedSearchQuery = function(query) {
    if (query == null || query.length <= 0)
        return;
    //if(window.console && window.console.log) console.log("Original Saved Search query: " + query) ;
    var regEx = /^(.+)#{3}JSON:(.+)#{3}(.+)$/;
    var results = query.match(regEx);
    if (results != null) {
        query = results[1];
        eval("var jsonObj = " + results[2]);
        //call the function
        query += jsonObj.func(jsonObj.args);
        query += results[3];
    }
    //if(window.console && window.console.log) console.log("Parsed Saved Search query: " + query) ;
    return query;
}

/**
 * return the server time string yyyyMMddHHmmssZ by current time + days
 * days: signed integer, can be 30 or -90, etc.
 */
ZaSearch.getTimestampByDays = function(days) {
    //if(window.console && window.console.log) console.log("Get the timestamp of " + days + " days.");	
    var d = parseInt(days);
    var dateObj = new Date();
    var now = dateObj.getTime();
    dateObj.setTime(now + d * 86400 * 1000);
    return ZaUtil.getAdminServerDateTime(dateObj, true);
}

//Keep the saved searches
//A sample saved search object:
// {name:"savedA", query:"users"};
ZaSearch.SAVED_SEARCHES = [];

ZaSearch.escapeLdapQuery = function(value) {
    value = String(value);
    value = value.replace(/\\/g, "\\5C");
    value = value.replace(/\(/g, "\\28");
    value = value.replace(/\)/g, "\\29");
    value = value.replace(/\*/g, "\\2A");

    return value;
}
}
if (AjxPackage.define("zimbraAdmin.search.model.ZaSearchOption")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaSearchOption
* @contructor ZaSearchOption
* Provides the data model and UI items for the advanced search options
* @author Charles Cao
**/
ZaSearchOption = function() {
}

ZaSearchOption.ID = 100;
ZaSearchOption.BASIC_TYPE_ID = ZaSearchOption.ID ++ ;
ZaSearchOption.OBJECT_TYPE_ID = ZaSearchOption.ID ++ ;
ZaSearchOption.DOMAIN_ID = ZaSearchOption.ID ++ ;
ZaSearchOption.SERVER_ID = ZaSearchOption.ID ++ ;
ZaSearchOption.ADVANCED_ID = ZaSearchOption.ID ++ ;
ZaSearchOption.COS_ID = ZaSearchOption.ID ++ ;


ZaSearchOption.BASIC_FILTER_ID = ZaSearchOption.ID ++ ;
ZaSearchOption.STATUS_FILTER_ID = ZaSearchOption.ID ++ ;
ZaSearchOption.LASTER_LOGIN_TIME_FILTER_ID = ZaSearchOption.ID ++ ;
ZaSearchOption.EXT_EMAIL_ADDRESS_FILTER_ID = ZaSearchOption.ID ++ ;
ZaSearchOption.COS_FILTER_ID = ZaSearchOption.ID ++ ;
ZaSearchOption.SERVER_FILTER_ID = ZaSearchOption.ID ++ ;
ZaSearchOption.DOMAIN_FILTER_ID = ZaSearchOption.ID ++ ;

//ZaSearchOption.REMOVE_ID = ZaSearchOption.ID ++ ;

//ZaSearchOption.A_basic_query = ZaSearch.A_query ;
ZaSearchOption.A_basic_uid = ZaAccount.A_uid ;
//ZaSearchOption.A_basic_cn =  "cn" ;
ZaSearchOption.A_basic_sn =  "sn" ;
ZaSearchOption.A_basic_displayName = ZaAccount.A_displayname ;
ZaSearchOption.A_basic_zimbraId = ZaItem.A_zimbraId ;
//ZaSearchOption.A_basic_mail = ZaAccount.A_mail ;
ZaSearchOption.A_basic_status = ZaAccount.A_accountStatus ;

ZaSearchOption.A_objTypeAccount = "option_" + ZaSearch.ACCOUNTS ;
ZaSearchOption.A_objTypeAccountAdmin = ZaAccount.A_zimbraIsAdminAccount ;
ZaSearchOption.A_objTypeSystemAccount = ZaAccount.A_zimbraIsSystemAccount;
ZaSearchOption.A_enableAccountLastLoginTime_From = "enable_" + ZaAccount.A_zimbraLastLogonTimestamp + "_From" ;
ZaSearchOption.A_enableAccountLastLoginTime_To = "enable_" + ZaAccount.A_zimbraLastLogonTimestamp + "_To" ;
ZaSearchOption.A_includeNeverLoginedAccounts = "include_never_login_accounts" ;
ZaSearchOption.A_accountLastLoginTime_From = ZaAccount.A_zimbraLastLogonTimestamp + "_From" ;
ZaSearchOption.A_accountLastLoginTime_To = ZaAccount.A_zimbraLastLogonTimestamp + "_To" ;
ZaSearchOption.A_accountLastLoginTime = ZaAccount.A_zimbraLastLogonTimestamp ;
ZaSearchOption.A_zimbraMailForwardingAddress = ZaAccount.A_zimbraMailForwardingAddress ;
ZaSearchOption.A_zimbraPrefMailForwardingAddress = ZaAccount.A_zimbraPrefMailForwardingAddress ;
//ZaSearchOption.A_objTypeAccountRegular = "option_" + ZaSearch.ACCOUNTS + "_regular" ;
ZaSearchOption.A_objTypeDl = "option_" + ZaSearch.DLS ;
ZaSearchOption.A_objTypeAlias = "option_" + ZaSearch.ALIASES;
ZaSearchOption.A_objTypeResource = "option_" + ZaSearch.RESOURCES;
//ZaSearchOption.A_objTypeDomain = "option_" + ZaSearch.DOMAINS ;

//ZaSearchOption.A_domainAll = "option_domain_all";
ZaSearchOption.A_domainFilter = "option_domain_filter";
ZaSearchOption.A_domainList = "option_domain_list" ;
ZaSearchOption.A_domainListChecked = "option_domain_list_checked";

//ZaSearchOption.A_serverAll = "option_server_all" ;
//ZaSearchOption.A_serverFilter = "option_server_filter";
ZaSearchOption.A_serverList = "option_server_list" ;
ZaSearchOption.A_serverListChecked = "option_server_list_checked";

// COS setting
ZaSearchOption.A_cosFilter = "option_cos_filter";
ZaSearchOption.A_cosList = "option_cos_list" ;
ZaSearchOption.A_cosListChecked = "option_cos_list_checked";
ZaSearchOption.A2_cosNotSet = "option_not_set_cosid";


// Status setting
ZaSearchOption.A2_status_active = "status_active";
ZaSearchOption.A2_status_closed = "status_closed";
ZaSearchOption.A2_status_locked = "status_locked";
ZaSearchOption.A2_status_lockout = "status_lockout";
ZaSearchOption.A2_status_pending = "status_pending";
ZaSearchOption.A2_status_maintenance = "status_maintenance";
ZaSearchOption.A2_status_list = "status_list";

ZaSearchOption.getObjectTypeXModel = 
function (optionId){
	var xmodel = {
		items: []
	}

    var basicItems = [
			//{id: ZaSearchOption.A_basic_query, ref: "options/" + ZaSearchOption.A_basic_query, type: _STRING_},
			{id: ZaSearchOption.A_basic_uid, ref: "options/" + ZaSearchOption.A_basic_uid, type: _STRING_},
			{id: ZaSearchOption.A_objTypeAccountAdmin, ref: "options/" + ZaSearchOption.A_objTypeAccountAdmin, type: _STRING_},
			{id: ZaSearchOption.A_objTypeSystemAccount, ref: "options/" + ZaSearchOption.A_objTypeSystemAccount, type: _STRING_},
			//{id: ZaSearchOption.A_basic_cn, ref: "options/" + ZaSearchOption.A_basic_cn, type: _STRING_},
			{id: ZaSearchOption.A_basic_sn, ref: "options/" + ZaSearchOption.A_basic_sn, type: _STRING_},
			{id: ZaSearchOption.A_basic_displayName, ref: "options/" + ZaSearchOption.A_basic_displayName, type: _STRING_},
			{id: ZaSearchOption.A_basic_zimbraId, ref: "options/" + ZaSearchOption.A_basic_zimbraId, type: _STRING_},
			//{id: ZaSearchOption.A_basic_mail, ref: "options/" + ZaSearchOption.A_basic_mail, type: _STRING_}
			//{id: ZaSearchOption.A_accountLastLoginTime, ref: "options/" + ZaSearchOption.A_accountLastLoginTime, type: _STRING_},
			{id: ZaSearchOption.A_basic_status, ref: "options/" + ZaSearchOption.A_basic_status, type: _STRING_}
		];
		
	//network build
	if (ZaSearchOption.A_objTypeAccountDomainAdmin) {
		basicItems.push (
			{id: ZaSearchOption.A_objTypeAccountDomainAdmin, ref: "options/" + ZaSearchOption.A_objTypeAccountDomainAdmin, type: _STRING_}
		);
	}

	var objTypeItems = [
			{id: ZaSearchOption.A_objTypeAccount, ref: "options/" + ZaSearchOption.A_objTypeAccount, type: _STRING_},
			//{id: ZaSearchOption.A_objTypeAccountRegular, ref: "options/" + ZaSearchOption.A_objTypeAccountRegular, type: _STRING_},
			{id: ZaSearchOption.A_objTypeDl, ref: "options/" + ZaSearchOption.A_objTypeDl, type: _STRING_},
			{id: ZaSearchOption.A_objTypeAlias, ref: "options/" + ZaSearchOption.A_objTypeAlias, type: _STRING_},
			{id: ZaSearchOption.A_objTypeResource, ref: "options/" + ZaSearchOption.A_objTypeResource, type: _STRING_},
			{id: ZaSearchOption.A_objTypeDomain, ref: "options/" + ZaSearchOption.A_objTypeDomain, type: _STRING_}
		
		];
	
	var domainItems = [	
			//{id: ZaSearchOption.A_domainAll, ref: "options/" + ZaSearchOption.A_domainAll, type: _STRING_},
			{id: ZaSearchOption.A_domainFilter, ref: "options/" + ZaSearchOption.A_domainFilter, type: _STRING_},
			{id: ZaSearchOption.A_domainListChecked, ref: "options/" + ZaSearchOption.A_domainListChecked, type:_LIST_},
			{id: ZaSearchOption.A_domainList, ref: "options/" + ZaSearchOption.A_domainList, type:_LIST_}
		];
	
	var serverItems = [
			//{id: ZaSearchOption.A_serverAll, ref: "options/" + ZaSearchOption.A_serverAll, type: _STRING_},
			//{id: ZaSearchOption.A_serverFilter, ref: "options/" + ZaSearchOption.A_serverFilter, type: _STRING_},
			{id: ZaSearchOption.A_serverListChecked, ref: "options/" + ZaSearchOption.A_serverListChecked, type:_LIST_},
			{id: ZaSearchOption.A_serverList, ref: "options/" + ZaSearchOption.A_serverList, type:_LIST_}		
		];
	
	var advancedItems = [
			
			//Should not have the options path since they are only flags and will not be included in the ldap search attrs
			{id: ZaSearchOption.A_enableAccountLastLoginTime_From, ref: ZaSearchOption.A_enableAccountLastLoginTime_From, type: _STRING_ },
			{id: ZaSearchOption.A_enableAccountLastLoginTime_To, ref: ZaSearchOption.A_enableAccountLastLoginTime_To, type: _STRING_ },
			{id: ZaSearchOption.A_includeNeverLoginedAccounts, ref: ZaSearchOption.A_includeNeverLoginedAccounts, type: _STRING_ },
			
			//last login time
			{id: ZaSearchOption.A_accountLastLoginTime_From, ref: "options/" + ZaSearchOption.A_accountLastLoginTime_From, type:_DATETIME_},	
			{id: ZaSearchOption.A_accountLastLoginTime_To, ref: "options/" + ZaSearchOption.A_accountLastLoginTime_To, type:_DATETIME_},
            {id: ZaSearchOption.A_zimbraMailForwardingAddress, ref: "options/" + ZaSearchOption.A_zimbraMailForwardingAddress, type:_STRING_}
	];

    var cosItems = [
                    {id: ZaSearchOption.A_cosFilter, ref: "options/" + ZaSearchOption.A_cosFilter, type: _STRING_},
                    {id: ZaSearchOption.A_cosListChecked, ref: "options/" + ZaSearchOption.A_cosListChecked, type:_LIST_},
                    {id: ZaSearchOption.A2_cosNotSet, ref: ZaSearchOption.A2_cosNotSet, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
                    {id: ZaSearchOption.A_cosList, ref: "options/" + ZaSearchOption.A_cosList, type:_LIST_}
    ];

	if (optionId == ZaSearchOption.OBJECT_TYPE_ID) { 
		xmodel.items = objTypeItems ; 
	}else if (optionId == ZaSearchOption.DOMAIN_ID) {
		xmodel.items = domainItems;
	}else if (optionId == ZaSearchOption.SERVER_ID) {
		xmodel.items = serverItems;
	}else if (optionId == ZaSearchOption.BASIC_TYPE_ID) {
		xmodel.items = basicItems ;
	}else if (optionId == ZaSearchOption.ADVANCED_ID) {
		xmodel.items = advancedItems ;
	}else if (optionId == ZaSearchOption.COS_ID) {
                xmodel.items = cosItems ;
    }
	
	return xmodel ;
}

ZaSearchOption.getNewObjectTypeXModel =
function (optionId){
	var xmodel = {
		items: []
	}

    var basicFilterItems = [
			{id: ZaSearchOption.A_basic_uid, ref: "options/" + ZaSearchOption.A_basic_uid, type: _STRING_, minLength:3},
			{id: ZaSearchOption.A_objTypeAccountAdmin, ref: "options/" + ZaSearchOption.A_objTypeAccountAdmin, type: _STRING_},
			{id: ZaSearchOption.A_objTypeSystemAccount, ref: "options/" + ZaSearchOption.A_objTypeSystemAccount, type: _STRING_},
			{id: ZaSearchOption.A_basic_sn, ref: "options/" + ZaSearchOption.A_basic_sn, type: _STRING_, minLength:3},
			{id: ZaSearchOption.A_basic_displayName, ref: "options/" + ZaSearchOption.A_basic_displayName, type: _STRING_, minLength:3},
			{id: ZaSearchOption.A_basic_zimbraId, ref: "options/" + ZaSearchOption.A_basic_zimbraId, type: _STRING_, minLength:3}
		];

	//network build
	if (ZaSearchOption.A_objTypeAccountDomainAdmin) {
		basicFilterItems.push (
			{id: ZaSearchOption.A_objTypeAccountDomainAdmin, ref: "options/" + ZaSearchOption.A_objTypeAccountDomainAdmin, type: _STRING_}
		);
	}

	var domainFilterItems = [
			//{id: ZaSearchOption.A_domainAll, ref: "options/" + ZaSearchOption.A_domainAll, type: _STRING_},
			{id: ZaSearchOption.A_domainFilter, ref: "options/" + ZaSearchOption.A_domainFilter, type: _STRING_, minLength:3},
			{id: ZaSearchOption.A_domainListChecked, ref: "options/" + ZaSearchOption.A_domainListChecked, type:_LIST_},
			{id: ZaSearchOption.A_domainList, ref: "options/" + ZaSearchOption.A_domainList, type:_LIST_}
		];

	var serverFilterItems = [
			//{id: ZaSearchOption.A_serverAll, ref: "options/" + ZaSearchOption.A_serverAll, type: _STRING_},
			//{id: ZaSearchOption.A_serverFilter, ref: "options/" + ZaSearchOption.A_serverFilter, type: _STRING_},
			{id: ZaSearchOption.A_serverListChecked, ref: "options/" + ZaSearchOption.A_serverListChecked, type:_LIST_},
			{id: ZaSearchOption.A_serverList, ref: "options/" + ZaSearchOption.A_serverList, type:_LIST_}
		];

    var loginItem= [
			//Should not have the options path since they are only flags and will not be included in the ldap search attrs
			{id: ZaSearchOption.A_enableAccountLastLoginTime_From, ref: ZaSearchOption.A_enableAccountLastLoginTime_From, type: _STRING_ },
			{id: ZaSearchOption.A_enableAccountLastLoginTime_To, ref: ZaSearchOption.A_enableAccountLastLoginTime_To, type: _STRING_ },
			{id: ZaSearchOption.A_includeNeverLoginedAccounts, ref: ZaSearchOption.A_includeNeverLoginedAccounts, type: _STRING_ },

			//last login time
			{id: ZaSearchOption.A_accountLastLoginTime_From, ref: "options/" + ZaSearchOption.A_accountLastLoginTime_From, type:_DATETIME_},
			{id: ZaSearchOption.A_accountLastLoginTime_To, ref: "options/" + ZaSearchOption.A_accountLastLoginTime_To, type:_DATETIME_}
    ]


    var cosFilterItems = [
                    {id: ZaSearchOption.A_cosFilter, ref: "options/" + ZaSearchOption.A_cosFilter, type: _STRING_, minLength:3},
                    {id: ZaSearchOption.A_cosListChecked, ref: "options/" + ZaSearchOption.A_cosListChecked, type:_LIST_},
                    {id: ZaSearchOption.A2_cosNotSet, ref: ZaSearchOption.A2_cosNotSet, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
                    {id: ZaSearchOption.A_cosList, ref: "options/" + ZaSearchOption.A_cosList, type:_LIST_}
    ];

    var extEmailItem = [
            {id: ZaSearchOption.A_zimbraMailForwardingAddress, ref: "options/" + ZaSearchOption.A_zimbraMailForwardingAddress, type:_STRING_, minLength:3}
    ]
    var accountStatusItem = [
        {id:ZaSearchOption.A2_status_active, ref: "options/" + ZaSearchOption.A2_status_active, type:_STRING_},
        {id:ZaSearchOption.A2_status_closed, ref: "options/" + ZaSearchOption.A2_status_closed, type:_STRING_},
        {id:ZaSearchOption.A2_status_locked, ref: "options/" + ZaSearchOption.A2_status_locked, type:_STRING_},
        {id:ZaSearchOption.A2_status_lockout, ref: "options/" + ZaSearchOption.A2_status_lockout, type:_STRING_},
        {id:ZaSearchOption.A2_status_pending, ref: "options/" + ZaSearchOption.A2_status_pending, type:_STRING_},
        {id:ZaSearchOption.A2_status_maintenance, ref: "options/" + ZaSearchOption.A2_status_maintenance, type:_STRING_},
        {id:ZaSearchOption.A2_status_list, ref: "options/" + ZaSearchOption.A2_status_list, type:_LIST_}
    ];

    if(optionId == ZaSearchOption.BASIC_FILTER_ID) {
        xmodel.items = basicFilterItems;
    }else if (optionId == ZaSearchOption.SERVER_FILTER_ID) {
        xmodel.items = serverFilterItems;
    }else if (optionId == ZaSearchOption.COS_FILTER_ID) {
        xmodel.items = cosFilterItems;
    }else if (optionId == ZaSearchOption.DOMAIN_FILTER_ID) {
        xmodel.items = domainFilterItems;
    }else if (optionId== ZaSearchOption.EXT_EMAIL_ADDRESS_FILTER_ID) {
        xmodel.items = extEmailItem;
    }else if (optionId == ZaSearchOption.LASTER_LOGIN_TIME_FILTER_ID) {
        xmodel.items = loginItem;
    }else if (optionId == ZaSearchOption.STATUS_FILTER_ID) {
        xmodel.items = accountStatusItem;
    }

	return xmodel ;
}

// This XForm object is for old UI (ZCS 7.0 or below)
ZaSearchOption.getObjectTypeXForm = 
function (optionId, height){
	var marginTop = ZaSearchOptionView.HEADER_HEIGHT + 8 ;
    var accountStatusChoices = [
           {value:ZaAccount.ACCOUNT_STATUS_ACTIVE, label:ZaAccount.getAccountStatusMsg(ZaAccount.ACCOUNT_STATUS_ACTIVE)},
           {value:ZaAccount.ACCOUNT_STATUS_CLOSED, label:ZaAccount.getAccountStatusMsg(ZaAccount.ACCOUNT_STATUS_CLOSED)},
           {value:ZaAccount.ACCOUNT_STATUS_LOCKED, label:ZaAccount.getAccountStatusMsg(ZaAccount.ACCOUNT_STATUS_LOCKED)},
           {value:ZaAccount.ACCOUNT_STATUS_LOCKOUT, label:ZaAccount.getAccountStatusMsg(ZaAccount.ACCOUNT_STATUS_LOCKOUT)},
           {value:ZaAccount.ACCOUNT_STATUS_PENDING, label:ZaAccount.getAccountStatusMsg(ZaAccount.ACCOUNT_STATUS_PENDING)},
           {value:ZaAccount.ACCOUNT_STATUS_MAINTENANCE, label:ZaAccount.getAccountStatusMsg(ZaAccount.ACCOUNT_STATUS_MAINTENANCE)}

       ];
	
    var xform = {
			numCols:2, width: 150, cssClass: "ZaSearchOptionOverview",
			cssStyle: "",
			items: []
	}
	
	var basicItems = [
		 { type: _TEXTFIELD_, ref:  ZaSearchOption.A_basic_uid,
			label: ZaMsg.search_option_uid, align: _LEFT_, width: 100, 
			onChange: ZaSearchBuilderController.handleOptions,
		  	toolTipContent: ZaMsg.tt_search_option_uid,
		  	enableDisableChecks:[],visibilityChecks:[]
		 },
		 { type: _TEXTFIELD_, ref:  ZaSearchOption.A_basic_sn,
			label: ZaMsg.search_option_sn, align: _LEFT_, width: 100, 
			onChange: ZaSearchBuilderController.handleOptions,
			enableDisableChecks:[],visibilityChecks:[]
		 },
		 { type: _TEXTFIELD_, ref:  ZaSearchOption.A_basic_displayName,
			label: ZaMsg.search_option_displayName, align: _LEFT_, width: 100, 
			onChange: ZaSearchBuilderController.handleOptions,
			enableDisableChecks:[],visibilityChecks:[]
		 },
		 { type: _TEXTFIELD_, ref:  ZaSearchOption.A_basic_zimbraId,
			label: ZaMsg.search_option_zimbraId, align: _LEFT_, width: 100, 
			onChange: ZaSearchBuilderController.handleOptions,
			enableDisableChecks:[],visibilityChecks:[]
		 },
		 { type:_OSELECT1_, ref:ZaSearchOption.A_basic_status, editable:false, 
		 	msgName:ZaMsg.NAD_AccountStatus,label:ZaMsg.NAD_AccountStatus, 
		 	labelLocation:_LEFT_, choices:accountStatusChoices,
		 	onChange: ZaSearchBuilderController.handleOptions,
		 	enableDisableChecks:[],visibilityChecks:[]
		 },
		 {	type: _GROUP_, name:"special search cases",
		 	 colSpan: "2", numCols:2, width: 150, items: []
		 } /*,
		 { type: _GROUP_, width: 150, numCols: 1, colSpan: "*", items:[
		 		{type:_OUTPUT_, value: "Last Access Time: " },
		 		{ref:ZaSearchOption.A_accountLastLoginTime, type:_DWT_DATETIME_,
		 			label:"", labelLocation:_LEFT_
				}
			]
		 } */
	];
	
	var i = basicItems.length ;
	
	//if (!ZaSettings.isDomainAdmin) {
		var adminOnlyItem =  
			 	{ type: _CHECKBOX_, ref:  ZaSearchOption.A_objTypeAccountAdmin,
					trueValue:"TRUE", falseValue:"FALSE",
					label: ZaMsg.SearchFilter_Accounts_admin, 
					align: _LEFT_, labelLocation:_RIGHT_, 
					onChange: ZaSearchBuilderController.handleOptions,
					bmolsnr:true, enableDisableChecks:[],visibilityChecks:[]
				 };
				 
		basicItems[i-1].items.push (adminOnlyItem) ;
	//}

	if (ZaSearchOption.A_objTypeAccountDomainAdmin) {
			var domainAdminObjTypeItem = { 
					type: _CHECKBOX_, ref:  ZaSearchOption.A_objTypeAccountDomainAdmin,
					trueValue:"TRUE", falseValue:"FALSE",
					label: ZaMsg.SearchFilter_Accounts_domainadmin, 
					align: _LEFT_, labelLocation:_RIGHT_, 
					onChange: ZaSearchBuilderController.handleOptions,
					bmolsnr:true,enableDisableChecks:[],visibilityChecks:[], labelWrap:true
				 } ;
			basicItems[i-1].items.push( domainAdminObjTypeItem ) ;
		}

	var systemAccountOnlyItem =
                                { type: _CHECKBOX_, ref:  ZaSearchOption.A_objTypeSystemAccount,
                                        trueValue:"TRUE", falseValue:"FALSE",
                                        label: ZaMsg.SearchFilter_System_Accounts,
                                        align: _LEFT_, labelLocation:_RIGHT_,
                                        onChange: ZaSearchBuilderController.handleOptions,
                                        bmolsnr:true, enableDisableChecks:[],visibilityChecks:[]
                                 };

    basicItems[i-1].items.push (systemAccountOnlyItem) ;
	
	var objTypeItems = [
		{ type: _CHECKBOX_, ref:  ZaSearchOption.A_objTypeAccount,
			trueValue:"TRUE", falseValue:"FALSE",
			label: ZaMsg.SearchFilter_Accounts, 
			align: _LEFT_, labelLocation:_RIGHT_, 
			onChange: ZaSearchBuilderController.handleOptions,
			enableDisableChecks:[],visibilityChecks:["(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ACCOUNT_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI])"]
		 },
		 { type: _CHECKBOX_, ref:  ZaSearchOption.A_objTypeDl,
			trueValue:"TRUE", falseValue:"FALSE",
			label: ZaMsg.SearchFilter_DLs, 
			align: _LEFT_, labelLocation:_RIGHT_, 
			onChange: ZaSearchBuilderController.handleOptions,
			enableDisableChecks:[],visibilityChecks:["(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.DL_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI])"]
		 },
		 { type: _CHECKBOX_, ref:  ZaSearchOption.A_objTypeAlias,
			trueValue:"TRUE", falseValue:"FALSE",
			label: ZaMsg.SearchFilter_Aliases, 
			align: _LEFT_, labelLocation:_RIGHT_, 
			onChange: ZaSearchBuilderController.handleOptions,
			enableDisableChecks:[],visibilityChecks:["(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ALIAS_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI])"]
		 },
		 { type: _CHECKBOX_, ref:  ZaSearchOption.A_objTypeResource,
			trueValue:"TRUE", falseValue:"FALSE",
			label: ZaMsg.SearchFilter_Resources, 
			align: _RIGHT_, labelLocation:_RIGHT_, 
			onChange: ZaSearchBuilderController.handleOptions,
			enableDisableChecks:[],visibilityChecks:["(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.RESOURCE_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI])"]
		 }/** Hide the domain search for now,
		 { type: _CHECKBOX_, ref:  ZaSearchOption.A_objTypeDomain,
			trueValue:"TRUE", falseValue:"FALSE",
			label: ZaMsg.SearchFilter_Domains, 
			align: _RIGHT_, labelLocation:_RIGHT_, 
			onChange: ZaSearchBuilderController.handleOptions
		 } **/
	] ;

	var domainFilterLabelWidth = 50;

	
	var domainItems = [
	/*
		{ type: _CHECKBOX_, ref:  ZaSearchOption.A_domainAll,
			trueValue:"TRUE", falseValue:"FALSE",
			label: ZaMsg.search_option_all_domain, 
			align: _RIGHT_, labelLocation:_RIGHT_, 
			onChange: ZaSearchBuilderController.handleOptions
		 },
		{ type: _SEPARATOR_ , width: 150 },*/
		{ type: _TEXTFIELD_, ref:  ZaSearchOption.A_domainFilter,
			label: ZaMsg.search_option_filter, align: _LEFT_, width: ZaSearchOptionView.DOMAIN_OPTION_WIDTH - domainFilterLabelWidth, 
			inputHelp: ZaMsg.search_option_filter_input_help_domain,
		  	toolTipContent: ZaMsg.tt_domain_search_option_filter,
			onChange: ZaSearchBuilderController.filterDomains,
			enableDisableChecks:[],visibilityChecks:[]
		 },
		 
		 {type: _OUTPUT_, value: ZaMsg.no_domain_found_msg, colSpan: "*", cssStyle: "white-space: normal",
	 		visibilityChecks:[[XForm.checkInstanceValueEmty,ZaSearchOption.A_domainList]] 
		 },
		 {type: _GROUP_, width: ZaSearchOptionView.WIDTH, colSpan: "*", height: height - 30 - 25 - 5, 
		 	cssStyle: "overflow:auto; position:absolute;margin-top: 5px;",
			visibilityChecks:[[XForm.checkInstanceValueNotEmty,ZaSearchOption.A_domainList]],
		 	items :[
				 
				 {type: _DWT_LIST_, ref: ZaSearchOption.A_domainList,  width: ZaSearchOptionView.WIDTH - 2, height: height - 30 - 25,  
					 forceUpdate: true, widgetClass: ZaOptionList, 
					 multiselect: true, preserveSelection: false, 					 	
					 bmolsnr:true,
					 onSelection: ZaSearchBuilderController.filterSelectionListener
				 }
		 	]
		 }
	];

	var serverItems = [

		 {type: _GROUP_, width: ZaSearchOptionView.WIDTH, colSpan: "*", height: height - 30, 
		 	cssStyle: "overflow:auto; position:absolute;",
		 	items :[
				 {type: _DWT_LIST_, ref: ZaSearchOption.A_serverList,  width: ZaSearchOptionView.WIDTH - 2, height: height - 30,  	
					 forceUpdate: true, widgetClass: ZaOptionList, 
					 multiselect: true, preserveSelection: false, bmolsnr:true,
					 onSelection: ZaSearchBuilderController.filterSelectionListener
				 }
		 	]
		 }
	];

	//COS

        var cosItems = [

                { type: _TEXTFIELD_, ref:  ZaSearchOption.A_cosFilter,
                        label: ZaMsg.search_option_filter, align: _LEFT_, width: ZaSearchOptionView.COS_OPTION_WIDTH - domainFilterLabelWidth,
                        inputHelp: ZaMsg.search_option_filter_input_help_cos,
                        toolTipContent: ZaMsg.tt_cos_search_option_filter,
                        onChange: ZaSearchBuilderController.filterCOSES,
                        enableDisableChecks:[],visibilityChecks:[]
                 },
                {type: _GROUP_, colSpan: "2", numCols:2, width: 150, items: [
                    {ref:ZaSearchOption.A2_cosNotSet, type:_CHECKBOX_, msgName:ZaMsg.search_includeObjectWithoutCosId,
			label:ZaMsg.search_includeObjectWithoutCosId,
                        labelLocation:_RIGHT_,trueValue:"TRUE", falseValue:"FALSE", align: _LEFT_,
                        onChange: ZaSearchBuilderController.handleOptions,
                        enableDisableChecks:[],
                        visibilityChecks:[]
                    }
                ]},
                 {type: _OUTPUT_, value: ZaMsg.no_cos_found_msg, colSpan: "*", cssStyle: "white-space: normal",
                        visibilityChecks:[[XForm.checkInstanceValueEmty,ZaSearchOption.A_cosList]]
                 },
                 {type: _GROUP_, width: ZaSearchOptionView.WIDTH, colSpan: "*", height: height - 30 - 25 - 5,
                        cssStyle: "overflow:auto; position:absolute;margin-top: 5px;",
                        visibilityChecks:[[XForm.checkInstanceValueNotEmty,ZaSearchOption.A_cosList]],
                        items :[

                                 {type: _DWT_LIST_, ref: ZaSearchOption.A_cosList,  width: ZaSearchOptionView.WIDTH - 2, height: height - 30 - 25,
                                         forceUpdate: true, widgetClass: ZaOptionList,
                                         multiselect: true, preserveSelection: false,bmolsnr:true,
                                         onSelection: ZaSearchBuilderController.filterSelectionListener
                                 }
                        ]
                 }
        ];

	var advancedItems = [
		{ type: _GROUP_,  numCols: 2, items:[
		 		{type:_OUTPUT_, colSpan: "*", cssClass: "ZaSearchOptionViewSubHeader", 
		 			value: ZaMsg.search_option_lastAccessTime, width: 280  },
		 		{type: _GROUP_, numCols: 5, colSpan: "*", 
		 			items: [
		 				{type: _CELL_SPACER_, width: 40 },
		 				{type: _CHECKBOX_, ref: ZaSearchOption.A_enableAccountLastLoginTime_From, 
			 				label: ZaMsg.enable_search_option_label_from,
			 				trueValue:"TRUE", falseValue:"FALSE",
			 				align: _LEFT_, labelLocation:_RIGHT_, 
							onChange: ZaSearchBuilderController.handleOptions,
							enableDisableChecks:[],visibilityChecks:[] },
		 				{type: _CHECKBOX_, ref: ZaSearchOption.A_enableAccountLastLoginTime_To, 
			 				label: ZaMsg.enable_search_option_label_to ,
			 				trueValue:"TRUE", falseValue:"FALSE",
			 				align: _LEFT_, labelLocation:_RIGHT_, 
							onChange: ZaSearchBuilderController.handleOptions,
							enableDisableChecks:[],visibilityChecks:[] }
		 			]
		 		},
		 		{type: _GROUP_, numCols: 3, colSpan: "*", 
		 			items: [
		 				{type: _CELL_SPACER_, width: 40 },
		 				{type: _CHECKBOX_, ref: ZaSearchOption.A_includeNeverLoginedAccounts,
			 				label: ZaMsg.includeNeverLoginedAccounts,
			 				trueValue:"TRUE", falseValue:"FALSE",
			 				align: _LEFT_, labelLocation:_RIGHT_, 
							onChange: ZaSearchBuilderController.handleOptions,
							enableDisableChecks:[],visibilityChecks:[], labelWrap: true }
		 			]
		 		},
		 		{type: _GROUP_, colSpan: "*", numCols: 2, colSize: ["60px", "auto"],
		 			items: [
			 		{ref:ZaSearchOption.A_accountLastLoginTime_From, colSpan: "*", type:_DWT_DATETIME_,
			 			onChange: ZaSearchBuilderController.handleOptions,
			 			visibilityChecks:[[XForm.checkInstanceValue,ZaSearchOption.A_enableAccountLastLoginTime_From,"TRUE"]],
			 			bmolsnr:true,firstDayOfWeek:ZaZimbraAdmin.FIRST_DAY_OF_WEEK,
                        visibilityChangeEventSources: [ZaSearchOption.A_enableAccountLastLoginTime_From] ,
			 			label:ZaMsg.search_option_label_from, labelLocation:_LEFT_
					},
					{ref:ZaSearchOption.A_accountLastLoginTime_To, colSpan: "*", type:_DWT_DATETIME_,
			 			onChange: ZaSearchBuilderController.handleOptions,	
			 			visibilityChecks:[[XForm.checkInstanceValue,ZaSearchOption.A_enableAccountLastLoginTime_To,"TRUE"]],
                        visibilityChangeEventSources: [ZaSearchOption.A_enableAccountLastLoginTime_To] ,			 				 				
			 			bmolsnr:true,firstDayOfWeek:ZaZimbraAdmin.FIRST_DAY_OF_WEEK,
                        label:ZaMsg.search_option_label_to, labelLocation:_LEFT_
					}]
		 		},
				{type:_SPACER_}, //used to avoid the missing border of the calendar
                {
                    type: _TEXTFIELD_, ref:  ZaSearchOption.A_zimbraMailForwardingAddress,
                    label: ZaMsg.LB_External_mail, align: _LEFT_, width: 150, 
                    onChange: ZaSearchBuilderController.handleOptions,
                    toolTipContent: ZaMsg.LB_External_mail_tt,
                    enableDisableChecks:[],visibilityChecks:[]
                }
			]
		 }
	]

	if (optionId == ZaSearchOption.OBJECT_TYPE_ID) { 
		xform.items = objTypeItems ; 
	}else if (optionId == ZaSearchOption.DOMAIN_ID) {
		xform.items = domainItems;
	}else if (optionId == ZaSearchOption.SERVER_ID) {
		xform.items = serverItems;
	}else if (optionId == ZaSearchOption.BASIC_TYPE_ID) {
		xform.items = basicItems ;
		xform.width = ZaSearchOptionView.BASIC_OPTION_WIDTH ;
	}else if (optionId == ZaSearchOption.ADVANCED_ID) {
		xform.items = advancedItems ;
		xform.width = ZaSearchOptionView.ADVANCED_OPTION_WIDTH ;
	}else if (optionId == ZaSearchOption.COS_ID) {
		xform.items = cosItems;
	}
	
	return xform ;
}

// This is for new UI (ZCS 8.0+)
ZaSearchOption.getNewObjectTypeXForm =
function (optionId, height){

    var xform = {
			numCols:2, cssClass: "ZaSearchOptionOverview", //"width" attribute not work here
			items: []
	}

    var basicFilterItem =  [
        {type: _GROUP_, colSizes:["90px","120px"],
            items:[
                { type: _TEXTFIELD_, ref:  ZaSearchOption.A_basic_uid,
			    label: ZaMsg.search_option_uid, align: _LEFT_, width: 100,
		  	    toolTipContent: ZaMsg.tt_search_option_uid,
		  	    enableDisableChecks:[],visibilityChecks:[]
		        },
                {type: _CELL_SPACER_, height: 10, colSpan: "*" },
		        { type: _TEXTFIELD_, ref:  ZaSearchOption.A_basic_sn,
			    label: ZaMsg.search_option_sn, align: _LEFT_, width: 100,
			    enableDisableChecks:[],visibilityChecks:[]
		        },
                {type: _CELL_SPACER_, height: 10, colSpan: "*" },
		        { type: _TEXTFIELD_, ref:  ZaSearchOption.A_basic_displayName,
			    label: ZaMsg.search_option_displayName, align: _LEFT_, width: 100,
			    enableDisableChecks:[],visibilityChecks:[]
		        },
                {type: _CELL_SPACER_, height: 10, colSpan: "*" },
		        { type: _TEXTFIELD_, ref:  ZaSearchOption.A_basic_zimbraId,
			    label: ZaMsg.search_option_zimbraId, align: _LEFT_, width: 100,
			    enableDisableChecks:[],visibilityChecks:[]
		        },
                {type: _CELL_SPACER_, height: 10, colSpan: "*" },
		        {type: _GROUP_, name:"special search cases",
		 	    colSpan: "2", numCols:2, colSizes:["30px","180px"], items: []
		        }
            ]
        }

	];

	var i = basicFilterItem[0].items.length ;

    var adminOnlyItem = {
            type: _WIZ_CHECKBOX_, ref:  ZaSearchOption.A_objTypeAccountAdmin,
            trueValue:"TRUE", falseValue:"FALSE", valign: _TOP_,
            label: ZaMsg.SearchFilter_Accounts_admin,
            onChange: ZaSearchBuilderController.newHandleOptions,
            bmolsnr:true, enableDisableChecks:[],visibilityChecks:[]
        };

    basicFilterItem[0].items[i-1].items.push (adminOnlyItem) ;

	if (ZaSearchOption.A_objTypeAccountDomainAdmin) {
        var domainAdminObjTypeItem = {
                type: _WIZ_CHECKBOX_, ref:  ZaSearchOption.A_objTypeAccountDomainAdmin,
                trueValue:"TRUE", falseValue:"FALSE", valign: _TOP_,
                onChange: ZaSearchBuilderController.newHandleOptions,
                label: ZaMsg.SearchFilter_Accounts_domainadmin,
                bmolsnr:true,enableDisableChecks:[],visibilityChecks:[], labelWrap:true
             } ;
        basicFilterItem[0].items[i-1].items.push( domainAdminObjTypeItem ) ;
	}

	var systemAccountOnlyItem = {
        type: _WIZ_CHECKBOX_, ref:  ZaSearchOption.A_objTypeSystemAccount,
        trueValue:"TRUE", falseValue:"FALSE", valign: _TOP_,
        onChange: ZaSearchBuilderController.newHandleOptions,
        label: ZaMsg.SearchFilter_System_Accounts,
        bmolsnr:true, enableDisableChecks:[],visibilityChecks:[]
    };

    basicFilterItem[0].items[i-1].items.push (systemAccountOnlyItem) ;

    var domainFilterItems = [

		{ type: _TEXTFIELD_, ref:  ZaSearchOption.A_domainFilter,
			label: ZaMsg.search_option_filter, align: _LEFT_, width: ZaSearchOptionView.WIDTH - 35,
			inputHelp: ZaMsg.search_option_filter_input_help_domain,
		  	toolTipContent: ZaMsg.tt_domain_search_option_filter,
                        labelCssStyle: "white-space:nowrap",
            		onChange: ZaSearchBuilderController.filterDomains,
			enableDisableChecks:[],visibilityChecks:[]
		 },

		 {type: _OUTPUT_, value: ZaMsg.no_domain_found_msg, colSpan: "*", cssStyle: "white-space: normal",
	 		visibilityChecks:[[XForm.checkInstanceValueEmty,ZaSearchOption.A_domainList]]
		 },
		 {type: _GROUP_, width: ZaSearchOptionView.WIDTH, colSpan: "*", height: height - 30 - 25 - 5,
		 	cssStyle: "overflow:auto; margin-top: 5px;",
			visibilityChecks:[[XForm.checkInstanceValueNotEmty,ZaSearchOption.A_domainList]],
		 	items :[

				 {type: _DWT_LIST_, ref: ZaSearchOption.A_domainList,  width: ZaSearchOptionView.WIDTH - 2, height: height - 30 - 25,
					 forceUpdate:true, widgetClass: ZaOptionList,
					 multiselect:true, preserveSelection:true, 
					 onSelection: ZaSearchBuilderController.filterSelectionListener
				 }
		 	]
		 }
	];

	var serverFilterItems = [

		 {type: _GROUP_, width: ZaSearchOptionView.WIDTH, colSpan: "*", height: height - 30,
		 	cssStyle: "overflow:auto;",
		 	items :[
				 {type: _DWT_LIST_, ref: ZaSearchOption.A_serverList,  width: ZaSearchOptionView.WIDTH - 2, height: height - 30,
					 forceUpdate: true, widgetClass: ZaOptionList,
					 multiselect: true, preserveSelection: true,
					 onSelection: ZaSearchBuilderController.filterSelectionListener
				 }
		 	]
		 }
	];

    var cosFilterItems = [
            { type: _TEXTFIELD_, ref:  ZaSearchOption.A_cosFilter,
                    label: ZaMsg.search_option_filter, align: _LEFT_, width: ZaSearchOptionView.WIDTH - 50,
                    inputHelp: ZaMsg.search_option_filter_input_help_cos,
                    toolTipContent: ZaMsg.tt_cos_search_option_filter,
                    onChange: ZaSearchBuilderController.filterCOSES,
		    labelCssStyle: "white-space:nowrap",
                    enableDisableChecks:[],visibilityChecks:[]
             },
             {type: _GROUP_, colSpan: "2", numCols:2, items: [
                    {ref:ZaSearchOption.A2_cosNotSet, type:_CHECKBOX_, msgName:ZaMsg.search_includeObjectWithoutCosId,
			            label:ZaMsg.search_includeObjectWithoutCosId,
                        labelLocation:_RIGHT_,trueValue:"TRUE", falseValue:"FALSE", align: _LEFT_,
                        onChange: ZaSearchBuilderController.handleOptions,
                        enableDisableChecks:[],
                        visibilityChecks:[]
                    }
             ]},
             {type: _OUTPUT_, value: ZaMsg.no_cos_found_msg, colSpan: "*", cssStyle: "white-space: normal",
                    visibilityChecks:[[XForm.checkInstanceValueEmty,ZaSearchOption.A_cosList]]
             },
             {type: _GROUP_, width: ZaSearchOptionView.WIDTH, colSpan: "*", height: height - 30 - 25 - 5,
                    cssStyle: "overflow:auto; margin-top: 5px;",
                    visibilityChecks:[[XForm.checkInstanceValueNotEmty,ZaSearchOption.A_cosList]],
                    items :[

                             {type: _DWT_LIST_, ref: ZaSearchOption.A_cosList,  width: ZaSearchOptionView.WIDTH - 2, height: height - 30 - 25,
                                     forceUpdate: true, widgetClass: ZaOptionList,
                                     multiselect: true, preserveSelection: true,
                                     onSelection: ZaSearchBuilderController.filterSelectionListener
                             }
                    ]
             }
        ];

    var loginFilterItems = 	[
        { type: _GROUP_,  numCols: 2, items:[
		 		{type: _GROUP_, numCols: 5, colSpan: "*",
		 			items: [
		 				{type: _CELL_SPACER_, width: 40 },
		 				{type: _CHECKBOX_, ref: ZaSearchOption.A_enableAccountLastLoginTime_From,
			 				label: ZaMsg.enable_search_option_label_from,
			 				trueValue:"TRUE", falseValue:"FALSE",   subLabel: "",
			 				align: _LEFT_, labelLocation:_RIGHT_,
                            onChange: ZaSearchBuilderController.newHandleOptions,
							enableDisableChecks:[],visibilityChecks:[] },
		 				{type: _CHECKBOX_, ref: ZaSearchOption.A_enableAccountLastLoginTime_To,
			 				label: ZaMsg.enable_search_option_label_to ,
			 				trueValue:"TRUE", falseValue:"FALSE",   subLabel: "",
			 				align: _LEFT_, labelLocation:_RIGHT_,
                            onChange: ZaSearchBuilderController.newHandleOptions,
							enableDisableChecks:[],visibilityChecks:[] }
		 			]
		 		},
		 		{type: _GROUP_, numCols: 3, colSpan: "*",
		 			items: [
		 				{type: _CELL_SPACER_, width: 40 },
		 				{type: _CHECKBOX_, ref: ZaSearchOption.A_includeNeverLoginedAccounts,
			 				label: ZaMsg.includeNeverLoginedAccounts,  subLabel: "",
			 				trueValue:"TRUE", falseValue:"FALSE",
			 				align: _LEFT_, labelLocation:_RIGHT_,
                            onChange: ZaSearchBuilderController.newHandleOptions,
							enableDisableChecks:[],visibilityChecks:[], labelWrap: true }
		 			]
		 		},
		 		{type: _GROUP_, colSpan: "*", numCols: 2, colSize: ["60px", "auto"],
		 			items: [
			 		{ref:ZaSearchOption.A_accountLastLoginTime_From, colSpan: "*", type:_DWT_DATETIME_,
			 			visibilityChecks:[[XForm.checkInstanceValue,ZaSearchOption.A_enableAccountLastLoginTime_From,"TRUE"]],
			 			bmolsnr:true,firstDayOfWeek:ZaZimbraAdmin.FIRST_DAY_OF_WEEK,
                        visibilityChangeEventSources: [ZaSearchOption.A_enableAccountLastLoginTime_From] ,
			 			label:ZaMsg.search_option_label_from, labelLocation:_LEFT_
					},
					{ref:ZaSearchOption.A_accountLastLoginTime_To, colSpan: "*", type:_DWT_DATETIME_,
			 			visibilityChecks:[[XForm.checkInstanceValue,ZaSearchOption.A_enableAccountLastLoginTime_To,"TRUE"]],
                        visibilityChangeEventSources: [ZaSearchOption.A_enableAccountLastLoginTime_To] ,
			 			bmolsnr:true,firstDayOfWeek:ZaZimbraAdmin.FIRST_DAY_OF_WEEK,
                        label:ZaMsg.search_option_label_to, labelLocation:_LEFT_
					}]
		 		}
			]
		 }
	];

    var extMailFilterItem = [
        {type:_OUTPUT_, value: ZaMsg.LBL_New_External_mail, colSpan: 2},
        {type:_TEXTFIELD_, colSpan: 2, ref: ZaSearchOption.A_zimbraMailForwardingAddress, enableDisableChecks:[],
             visibilityChecks:[]}
    ]

    var statusFilterItem = [
        {type: _CHECKBOX_, ref: ZaSearchOption.A2_status_active,  subLabel: "",
            label: ZaAccount.getAccountStatusMsg(ZaAccount.ACCOUNT_STATUS_ACTIVE),
            trueValue:"TRUE", falseValue:"FALSE",
            align: _LEFT_, labelLocation:_RIGHT_,
            onChange: ZaSearchBuilderController.newHandleOptions,
            enableDisableChecks:[],visibilityChecks:[], labelWrap: true },
        {type: _CHECKBOX_, ref: ZaSearchOption.A2_status_closed,  subLabel: "",
            label: ZaAccount.getAccountStatusMsg(ZaAccount.ACCOUNT_STATUS_CLOSED),
            trueValue:"TRUE", falseValue:"FALSE",
            align: _LEFT_, labelLocation:_RIGHT_,
            onChange: ZaSearchBuilderController.newHandleOptions,
            enableDisableChecks:[],visibilityChecks:[], labelWrap: true },
        {type: _CHECKBOX_, ref: ZaSearchOption.A2_status_locked,  subLabel: "",
            label: ZaAccount.getAccountStatusMsg(ZaAccount.ACCOUNT_STATUS_LOCKED),
            trueValue:"TRUE", falseValue:"FALSE",
            align: _LEFT_, labelLocation:_RIGHT_,
            onChange: ZaSearchBuilderController.newHandleOptions,
            enableDisableChecks:[],visibilityChecks:[], labelWrap: true },
        {type: _CHECKBOX_, ref: ZaSearchOption.A2_status_lockout,  subLabel: "",
            label: ZaAccount.getAccountStatusMsg(ZaAccount.ACCOUNT_STATUS_LOCKOUT),
            trueValue:"TRUE", falseValue:"FALSE",
            align: _LEFT_, labelLocation:_RIGHT_,
            onChange: ZaSearchBuilderController.newHandleOptions,
            enableDisableChecks:[],visibilityChecks:[], labelWrap: true },
        {type: _CHECKBOX_, ref: ZaSearchOption.A2_status_pending,  subLabel: "",
            label: ZaAccount.getAccountStatusMsg(ZaAccount.ACCOUNT_STATUS_PENDING),
            trueValue:"TRUE", falseValue:"FALSE",
            align: _LEFT_, labelLocation:_RIGHT_,
            onChange: ZaSearchBuilderController.newHandleOptions,
            enableDisableChecks:[],visibilityChecks:[], labelWrap: true },
        {type: _CHECKBOX_, ref: ZaSearchOption.A2_status_maintenance,  subLabel: "",
            label: ZaAccount.getAccountStatusMsg(ZaAccount.ACCOUNT_STATUS_MAINTENANCE),
            trueValue:"TRUE", falseValue:"FALSE",
            align: _LEFT_, labelLocation:_RIGHT_,
            onChange: ZaSearchBuilderController.newHandleOptions,
            enableDisableChecks:[],visibilityChecks:[], labelWrap: true }
    ]

    if (optionId == ZaSearchOption.BASIC_FILTER_ID) {
        xform.items = basicFilterItem;
    }else if (optionId == ZaSearchOption.SERVER_FILTER_ID) {
        xform.items = serverFilterItems;
    }else if (optionId == ZaSearchOption.COS_FILTER_ID) {
        xform.items = cosFilterItems;
    }else if (optionId == ZaSearchOption.DOMAIN_FILTER_ID) {
        xform.items = domainFilterItems;
    }else if (optionId == ZaSearchOption.EXT_EMAIL_ADDRESS_FILTER_ID) {
        xform.items = extMailFilterItem;
    }else if (optionId == ZaSearchOption.LASTER_LOGIN_TIME_FILTER_ID) {
        xform.items = loginFilterItems;
    }else if (optionId == ZaSearchOption.STATUS_FILTER_ID) {
        xform.items = statusFilterItem;
    }

	return xform ;
}

ZaSearchOption.getDefaultInstance =
function (optionId) {
	var optionInstance = {} ;
	optionInstance["options"] = {} ;
	
	if (optionId == ZaSearchOption.OBJECT_TYPE_ID) { 
		optionInstance["options"][ZaSearchOption.A_objTypeAccount] = "TRUE" ;
		optionInstance["options"][ZaSearchOption.A_objTypeAlias] = "TRUE" ;
		optionInstance["options"][ZaSearchOption.A_objTypeDl] = "TRUE" ;
		optionInstance["options"][ZaSearchOption.A_objTypeResource] = "TRUE" ;
		//optionInstance["options"][ZaSearchOption.A_accountLastLoginTime_From] = 
		//optionInstance["options"][ZaSearchOption.A_objTypeDomain] = "FALSE" ;
	}else if (optionId == ZaSearchOption.DOMAIN_ID) {
		//optionInstance["options"][ZaSearchOption.A_domainAll] = "TRUE" ;
	}else if (optionId == ZaSearchOption.SERVER_ID) {
		//optionInstance["options"][ZaSearchOption.A_serverAll] = "TRUE" ;
	}else if (optionId == ZaSearchOption.BASIC_TYPE_ID) {
		//no default value
	}else if (optionId == ZaSearchOption.COS_ID) {
		optionInstance[ZaSearchOption.A2_cosNotSet] = "FALSE" ;
	}else if (optionId == ZaSearchOption.ADVANCED_ID) {
		optionInstance[ZaSearchOption.A_enableAccountLastLoginTime_From] = "FALSE" ;
		optionInstance[ZaSearchOption.A_enableAccountLastLoginTime_To] = "FALSE" ;
		optionInstance[ZaSearchOption.A_includeNeverLoginedAccounts] = "FALSE" ;
	}
	
	return optionInstance ;
}

ZaSearchOption.getDefaultObjectTypes =
function () {
	var searchTypes = [];
	searchTypes[0]= [ZaSearch.ACCOUNTS, ZaSearch.ALIASES, ZaSearch.DLS,  ZaSearch.RESOURCES]
	return searchTypes ;
}

/////////////////////////////////////////////////////////////////////////////////////
//the list view for the domain and server filter
ZaOptionList = function(parent,className) {
    DwtListView.call(this, parent, null, Dwt.STATIC_STYLE);
}

ZaOptionList.prototype = new DwtListView;
ZaOptionList.prototype.constructor = ZaOptionList;

ZaOptionList.prototype.toString = 
function() {
	return "ZaOptionList";
}

ZaOptionList.prototype._createItemHtml =
function(item) {
	var html = new Array(10);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(item, div, DwtListView.TYPE_LIST_ITEM);
	
	var idx = 0;
	html[idx++] = "<table width='100%' cellspacing='0' cellpadding='0'><tr><td width=20>"
	html[idx++] = "<input type=checkbox value='" + item + "' /></td>" ;
	html[idx++] = "<td>"+ item + "</td></tr></table>";
	
	div.innerHTML = html.join("");
	return div;
}

}
if (AjxPackage.define("zimbraAdmin.servers.model.ZaServer")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaServer
* This class represents zimbraServer objects. ZaServer extends ZaItem
* @author Greg Solovyev
* @contructor ZaServer
* @param app reference to the application instance
**/
ZaServer = function() {
	ZaItem.call(this, "ZaServer");
	this._init();
	//The type is required. The application tab uses it to show the right icon
	this.type = ZaItem.SERVER ; 
}
ZaServer.modelExtensions = [];
ZaServer.prototype = new ZaItem;
ZaServer.prototype.constructor = ZaServer;
ZaItem.loadMethods["ZaServer"] = new Array();
ZaItem.initMethods["ZaServer"] = new Array();
ZaItem.modifyMethods["ZaServer"] = new Array();
ZaItem.modelExtensions["ZaServer"] = new Array();
//attribute name constants, this values are taken from carbonio.schema
ZaServer.A_name = "cn";
ZaServer.A_description = "description";
ZaServer.A_notes = "zimbraNotes";
ZaServer.A_Service = "zimbraService";
ZaServer.A_ServiceHostname = "zimbraServiceHostname";
ZaServer.A_zimbraMailPort = "zimbraMailPort";
ZaServer.A_zimbraMailSSLPort = "zimbraMailSSLPort";
ZaServer.A_zimbraMailMode = "zimbraMailMode";
ZaServer.A_zimbraMailReferMode = "zimbraMailReferMode";
// services
ZaServer.A_zimbraServiceInstalled = "zimbraServiceInstalled";
ZaServer.A_zimbraLdapServiceInstalled = "_"+ZaServer.A_zimbraServiceInstalled+"_ldap";
ZaServer.A_zimbraMailboxServiceInstalled = "_"+ZaServer.A_zimbraServiceInstalled+"_mailbox";
ZaServer.A_zimbraMtaServiceInstalled = "_"+ZaServer.A_zimbraServiceInstalled+"_mta";
ZaServer.A_zimbraSnmpServiceInstalled = "_"+ZaServer.A_zimbraServiceInstalled+"_snmp";
ZaServer.A_zimbraAntiVirusServiceInstalled = "_"+ZaServer.A_zimbraServiceInstalled+"_antivirus";
ZaServer.A_zimbraAntiSpamServiceInstalled = "_"+ZaServer.A_zimbraServiceInstalled+"_antispam";
ZaServer.A_zimbraOpenDKIMServiceInstalled = "_"+ZaServer.A_zimbraServiceInstalled+"_opendkim";
ZaServer.A_zimbraSpellServiceInstalled = "_"+ZaServer.A_zimbraServiceInstalled+"_spell";
ZaServer.A_zimbraLoggerServiceInstalled = "_"+ZaServer.A_zimbraServiceInstalled+"_logger";
ZaServer.A_zimbraMailProxyServiceInstalled = "_"+ZaServer.A_zimbraServiceInstalled+"_proxy";
ZaServer.A_zimbraVmwareHAServiceInstalled = "_"+ ZaServer.A_zimbraServiceInstalled+"_vmwareha";
ZaServer.A_zimbraPolicydServiceInstalled = "_"+ ZaServer.A_zimbraServiceInstalled+"_cbpolicyd";

ZaServer.A_zimbraReverseProxyHttpEnabled = "zimbraReverseProxyHttpEnabled";
ZaServer.A_zimbraServiceEnabled = "zimbraServiceEnabled";
ZaServer.A_zimbraPolicydServiceEnabled = "_"+ZaServer.A_zimbraServiceEnabled+"_cbpolicyd";
ZaServer.A_zimbraLdapServiceEnabled = "_"+ZaServer.A_zimbraServiceEnabled+"_ldap";
ZaServer.A_zimbraMailboxServiceEnabled = "_"+ZaServer.A_zimbraServiceEnabled+"_mailbox";
ZaServer.A_zimbraMtaServiceEnabled = "_"+ZaServer.A_zimbraServiceEnabled+"_mta";
ZaServer.A_zimbraSnmpServiceEnabled = "_"+ZaServer.A_zimbraServiceEnabled+"_snmp";
ZaServer.A_zimbraAntiVirusServiceEnabled = "_"+ZaServer.A_zimbraServiceEnabled+"_antivirus";
ZaServer.A_zimbraAntiSpamServiceEnabled = "_"+ZaServer.A_zimbraServiceEnabled+"_antispam";
ZaServer.A_zimbraOpenDKIMServiceEnabled = "_"+ZaServer.A_zimbraServiceEnabled+"_opendkim";
ZaServer.A_zimbraSpellServiceEnabled = "_"+ZaServer.A_zimbraServiceEnabled+"_spell";
ZaServer.A_zimbraLoggerServiceEnabled = "_"+ZaServer.A_zimbraServiceEnabled+"_logger";
ZaServer.A_zimbraMailProxyServiceEnabled = "_"+ZaServer.A_zimbraServiceEnabled+"_proxy";
ZaServer.A_zimbraVmwareHAServiceEnabled = "_"+ZaServer.A_zimbraServiceEnabled+"_vmwareha";

// servlets
ZaServer.A_zimbraWebClientServiceEnabled = "_"+ZaServer.A_zimbraServiceEnabled+"_zimbra";
ZaServer.A_zimbraAdminClientServiceEnabled = "_"+ZaServer.A_zimbraServiceEnabled+"_zimbraAdmin";
ZaServer.A_zimbraMailClientServiceEnabled = "_"+ZaServer.A_zimbraServiceEnabled+"_service";
ZaServer.A_zimbraZimletServiceEnabled = "_"+ZaServer.A_zimbraServiceEnabled+"_zimlet";

ZaServer.servlets = ["zimbra","zimbraAdmin","service","zimlet"];
// MTA
ZaServer.A_zimbraMtaSaslAuthEnable = "zimbraMtaSaslAuthEnable";
ZaServer.A_zimbraMtaSmtpDnsSupportLevel = "zimbraMtaSmtpDnsSupportLevel";
ZaServer.A_zimbraMtaRelayHost = "zimbraMtaRelayHost";
ZaServer.A_zimbraMtaFallbackRelayHost = "zimbraMtaFallbackRelayHost";
ZaServer.A_zimbraMtaTlsAuthOnly = "zimbraMtaTlsAuthOnly";
ZaServer.A_zimbraMtaMyNetworks = "zimbraMtaMyNetworks";
//milter server
ZaServer.A_zimbraMilterBindPort = "zimbraMilterBindPort";
ZaServer.A_zimbraMilterBindAddress = "zimbraMilterBindAddress";
ZaServer.A_zimbraMilterServerEnabled = "zimbraMilterServerEnabled";

//smtp
ZaServer.A_zimbraSmtpHostname  = "zimbraSmtpHostname";
ZaServer.A_SmtpPort = "zimbraSmtpPort";
ZaServer.A_SmtpTimeout = "zimbraSmtpTimeout";
//Lmtp
ZaServer.A_LmtpAdvertisedName = "zimbraLmtpAdvertisedName";
ZaServer.A_LmtpBindAddress = "zimbraLmtpBindAddress";
ZaServer.A_LmtpBindPort = "zimbraLmtpBindPort";
//pop3
ZaServer.A_zimbraPop3NumThreads = "zimbraPop3NumThreads";
ZaServer.A_Pop3AdvertisedName ="zimbraPop3AdvertisedName";
ZaServer.A_Pop3BindAddress = "zimbraPop3BindAddress";
ZaServer.A_zimbraPop3BindPort = "zimbraPop3BindPort";
ZaServer.A_zimbraPop3SSLBindPort = "zimbraPop3SSLBindPort";
ZaServer.A_Pop3SSLServerEnabled = "zimbraPop3SSLServerEnabled";
ZaServer.A_Pop3ServerEnabled = "zimbraPop3ServerEnabled"
ZaServer.A_Pop3CleartextLoginEnabled = "zimbraPop3CleartextLoginEnabled";
//imap
ZaServer.A_zimbraImapNumThreads="zimbraImapNumThreads";
ZaServer.A_zimbraImapBindPort="zimbraImapBindPort";
ZaServer.A_ImapServerEnabled="zimbraImapServerEnabled";
ZaServer.A_ImapSSLBindPort="zimbraImapSSLBindPort";
ZaServer.A_ImapSSLServerEnabled="zimbraImapSSLServerEnabled";
ZaServer.A_ImapCleartextLoginEnabled="zimbraImapCleartextLoginEnabled";

//proxy lookup target
ZaServer.A_zimbraReverseProxyLookupTarget = "zimbraReverseProxyLookupTarget";

//redo log
ZaServer.A_RedologEnabled = "zimbraRedologEnabled";
ZaServer.A_RedologLogPath = "zimbraRedologLogPath";
ZaServer.A_RedologArchiveDir = "zimbraRedologArchiveDir";
ZaServer.A_RedologBacklogDir = "zimbraRedologBacklogDir";
ZaServer.A_RedologRolloverFileSizeKB = "zimbraRedologRolloverFileSizeKB";
ZaServer.A_RedologFsyncIntervalMS = "zimbraRedologFsyncIntervalMS";
//master role settings
ZaServer.A_MasterRedologClientConnections = "zimbraMasterRedologClientConnections";
ZaServer.A_MasterRedologClientTimeoutSec = "zimbraMasterRedologClientTimeoutSec";
ZaServer.A_MasterRedologClientTcpNoDelay = "zimbraMasterRedologClientTcpNoDelay";
//slave role settings
ZaServer.A_zimbraUserServicesEnabled = "zimbraUserServicesEnabled";

//Volume Management
ZaServer.A_RemovedVolumes = "removed_volumes";
ZaServer.A_Volumes = "volumes";
ZaServer.A_VolumeId = "id";
ZaServer.A_VolumeName = "name";
ZaServer.A_VolumeRootPath = "rootpath";
ZaServer.A_VolumeCompressBlobs = "compressBlobs";
ZaServer.A_VolumeCompressionThreshold = "compressionThreshold";
ZaServer.A_VolumeType = "type";
ZaServer.A_CurrentIndexVolumeId = "current_index_volume_id";
ZaServer.A_CurrentMsgVolumeId = "current_msg_volume_id";
ZaServer.A_isCurrent = "isCurrent";

//VAMI Appliance Update
ZaServer.A_zimbraApplianceVendor = "zimbraApplianceVendor";
ZaServer.A_zimbraApplianceName = "zimbraApplianceName";
ZaServer.A_zimbraApplianceVersion = "zimbraApplianceVersion";
ZaServer.A_zimbraApplianceFullVersion = "zimbraApplianceFullVersion";
ZaServer.A_zimbraApplianceDetails = "zimbraApplianceDetails";
ZaServer.A_zimbraApplianceDefaultRepUrl = "zimbraApplianceDefaultRepUrl";
ZaServer.A_zimbraApplianceCustomRepUrl = "zimbraApplianceCustomRepUrl";
ZaServer.A_zimbraApplianceCustomRepUrlUser = "zimbraApplianceCustomRepUrlUser";
ZaServer.A_zimbraApplianceCustomRepUrlPass = "zimbraApplianceCustomRepUrlPass";
ZaServer.A_zimbraApplianceUpdateOption = "zimbraApplianceUpdateOption";
ZaServer.A_zimbraApplianceUpdateType = "zimbraApplianceUpdateType";
ZaServer.A_zimbraApplianceUpdatehourofrun = "zimbraApplianceUpdatehourofrun";

//bind ip address
ZaServer.A_zimbraMailBindAddress = "zimbraMailBindAddress";
ZaServer.A_zimbraMailSSLBindAddress = "zimbraMailSSLBindAddress";
ZaServer.A_zimbraMailSSLClientCertBindAddress = "zimbraMailSSLClientCertBindAddress";
ZaServer.A_zimbraAdminBindAddress = "zimbraAdminBindAddress";

//spnego
ZaServer.A_zimbraSpnegoAuthPrincipal = "zimbraSpnegoAuthPrincipal";
ZaServer.A_zimbraSpnegoAuthTargetName = "zimbraSpnegoAuthTargetName";

// Auto provision
ZaServer.A_zimbraAutoProvPollingInterval = "zimbraAutoProvPollingInterval";
ZaServer.A_zimbraAutoProvScheduledDomains = "zimbraAutoProvScheduledDomains";

// web client authentication
ZaServer.A_zimbraMailSSLClientCertMode = "zimbraMailSSLClientCertMode";
ZaServer.A_zimbraMailSSLClientCertPort = "zimbraMailSSLClientCertPort";
ZaServer.A_zimbraMailSSLProxyClientCertPort = "zimbraMailSSLProxyClientCertPort";
ZaServer.A_zimbraReverseProxyMailMode = "zimbraReverseProxyMailMode";
ZaServer.A_zimbraReverseProxyClientCertMode = "zimbraReverseProxyClientCertMode";
ZaServer.A_zimbraReverseProxyClientCertCA = "zimbraReverseProxyClientCertCA";

// other
ZaServer.A_zimbraScheduledTaskNumThreads = "zimbraScheduledTaskNumThreads" ;
ZaServer.A_zimbraMailPurgeSleepInterval = "zimbraMailPurgeSleepInterval" ;
ZaServer.A_zimbraIsMonitorHost = "zimbraIsMonitorHost";
ZaServer.A_showVolumes = "show_volumes"; //this attribute is immutable
ZaServer.A_zimbraLogHostname = "zimbraLogHostname";
ZaServer.A_isCurrentVolume = "isCurrentVolume";
ZaServer.STANDALONE = "standalone";
ZaServer.MASTER = "master";
ZaServer.SLAVE = "slave";
ZaServer.A2_volume_selection_cache = "volume_selection_cache";

ZaServer.MSG = 1;
ZaServer.INDEX = 10;
ZaServer.currentkeys = {};
ZaServer.currentkeys[ZaServer.MSG] = ZaServer.A_CurrentMsgVolumeId;
ZaServer.currentkeys[ZaServer.INDEX] = ZaServer.A_CurrentIndexVolumeId;
ZaServer.volumeTypes =[ZaServer.MSG,ZaServer.INDEX];

ZaServer.updateoptions = {};
ZaServer.updateoptions[0] = ZaMsg.NONE = 111;
ZaServer.updateoptions[2] = ZaMsg.EVERYDAY = 112;
ZaServer.updateoptions[3] = ZaMsg.EVERYSUNDAY = 113;
ZaServer.updateoptions[4] = ZaMsg.EVERYMONDAY =114;
ZaServer.updateoptions[5] = ZaMsg.EVERYTUESDAY = 115;
ZaServer.updateoptions[6] = ZaMsg.EVERYWEDNESDAY = 116;
ZaServer.updateoptions[7] = ZaMsg.EVERYTHURSDAY = 117;
ZaServer.updateoptions[8] = ZaMsg.EVERYFRIDAY = 118;
ZaServer.updateoptions[9] = ZaMsg.EVERYSATURDAY = 119;

ZaServer.updatehourofrun = {};
ZaServer.updatehourofrun[0] = ZaMsg.ONEAM = 201;
ZaServer.updatehourofrun[1] = ZaMsg.TWOAM = 202;
ZaServer.updatehourofrun[2] = ZaMsg.THREEAM = 203;
ZaServer.updatehourofrun[3] = ZaMsg.FOURAM = 204;
ZaServer.updatehourofrun[4] = ZaMsg.FIVEAM = 205;
ZaServer.updatehourofrun[5] = ZaMsg.SIXAM = 206;
ZaServer.updatehourofrun[6] = ZaMsg.SEVENAM = 207;
ZaServer.updatehourofrun[7] = ZaMsg.EIGHTAM = 208;
ZaServer.updatehourofrun[8] = ZaMsg.NINEAM = 209;
ZaServer.updatehourofrun[9] = ZaMsg.TENAM = 210;
ZaServer.updatehourofrun[10] = ZaMsg.ELEVENAM = 211;
ZaServer.updatehourofrun[11] = ZaMsg.TWELVEAM = 212;
ZaServer.updatehourofrun[12] = ZaMsg.TWELVEPM = 312;
ZaServer.updatehourofrun[13] = ZaMsg.ELEVENPM = 311; 
ZaServer.updatehourofrun[14] = ZaMsg.TENPM = 310;
ZaServer.updatehourofrun[15] = ZaMsg.NINEPM = 309;
ZaServer.updatehourofrun[16] = ZaMsg.EIGHTPM = 308;
ZaServer.updatehourofrun[17] = ZaMsg.SEVENPM = 307;
ZaServer.updatehourofrun[18] = ZaMsg.SIXPM = 306;
ZaServer.updatehourofrun[19] = ZaMsg.FIVEPM = 305;
ZaServer.updatehourofrun[20] = ZaMsg.FOURPM = 304;
ZaServer.updatehourofrun[21] = ZaMsg.THREEPM = 303;
ZaServer.updatehourofrun[22] = ZaMsg.TWOPM = 302;
ZaServer.updatehourofrun[23] = ZaMsg.ONEPM =301;

ZaServer.APPLIANCEUPDATE_CD = 2;
ZaServer.APPLIANCEUPDATE_DEFAULTREP = 1;
ZaServer.APPLIANCEUPDATE_CUSTOMREP = 3;

ZaServer.DEFAULT_IMAP_PORT=143;
ZaServer.DEFAULT_IMAP_SSL_PORT=993;
ZaServer.DEFAULT_POP3_PORT=110;
ZaServer.DEFAULT_POP3_SSL_PORT=995;

ZaServer.DEFAULT_IMAP_PORT_ZCS=7143;
ZaServer.DEFAULT_IMAP_SSL_PORT_ZCS=7993;
ZaServer.DEFAULT_POP3_PORT_ZCS=7110;
ZaServer.DEFAULT_POP3_SSL_PORT_ZCS=7995;

ZaServer.ERR_NOT_CIDR = 1;
ZaServer.ERR_NOT_STARTING_ADDR = 2;

ZaServer.DOT_TO_CIDR = {};
ZaServer.DOT_TO_CIDR["0x80000000"] = ZaServer.DOT_TO_CIDR["128.0.0.0"] = 1;
ZaServer.DOT_TO_CIDR["0xc0000000"] = ZaServer.DOT_TO_CIDR["192.0.0.0"] = 2;
ZaServer.DOT_TO_CIDR["0xe0000000"] = ZaServer.DOT_TO_CIDR["224.0.0.0"] = 3;
ZaServer.DOT_TO_CIDR["0xf0000000"] = ZaServer.DOT_TO_CIDR["240.0.0.0"] = 4;
ZaServer.DOT_TO_CIDR["0xf8000000"] = ZaServer.DOT_TO_CIDR["248.0.0.0"] = 5;
ZaServer.DOT_TO_CIDR["0xfc000000"] = ZaServer.DOT_TO_CIDR["252.0.0.0"] = 6;
ZaServer.DOT_TO_CIDR["0xfe000000"] = ZaServer.DOT_TO_CIDR["254.0.0.0"] = 7;
ZaServer.DOT_TO_CIDR["0xff000000"] = ZaServer.DOT_TO_CIDR["255.0.0.0"] = 8;

ZaServer.DOT_TO_CIDR["0xff800000"] = ZaServer.DOT_TO_CIDR["255.128.0.0"] = 9;
ZaServer.DOT_TO_CIDR["0xffc00000"] = ZaServer.DOT_TO_CIDR["255.192.0.0"] = 10;
ZaServer.DOT_TO_CIDR["0xffe00000"] = ZaServer.DOT_TO_CIDR["255.224.0.0"] = 11;
ZaServer.DOT_TO_CIDR["0xfff00000"] = ZaServer.DOT_TO_CIDR["255.240.0.0"] = 12;
ZaServer.DOT_TO_CIDR["0xfff80000"] = ZaServer.DOT_TO_CIDR["255.248.0.0"] = 13;
ZaServer.DOT_TO_CIDR["0xfffc0000"] = ZaServer.DOT_TO_CIDR["255.252.0.0"] = 14;
ZaServer.DOT_TO_CIDR["0xfffe0000"] = ZaServer.DOT_TO_CIDR["255.254.0.0"] = 15;
ZaServer.DOT_TO_CIDR["0xffff0000"] = ZaServer.DOT_TO_CIDR["255.255.0.0"] = 16;

ZaServer.DOT_TO_CIDR["0xffff8000"] = ZaServer.DOT_TO_CIDR["255.255.128.0"] = 17;
ZaServer.DOT_TO_CIDR["0xffffc000"] = ZaServer.DOT_TO_CIDR["255.255.192.0"] = 16;
ZaServer.DOT_TO_CIDR["0xffffe000"] = ZaServer.DOT_TO_CIDR["255.255.224.0"] = 19;
ZaServer.DOT_TO_CIDR["0xfffff000"] = ZaServer.DOT_TO_CIDR["255.255.240.0"] = 20;
ZaServer.DOT_TO_CIDR["0xfffff800"] = ZaServer.DOT_TO_CIDR["255.255.248.0"] = 21;
ZaServer.DOT_TO_CIDR["0xfffffc00"] = ZaServer.DOT_TO_CIDR["255.255.252.0"] = 22;
ZaServer.DOT_TO_CIDR["0xfffffe00"] = ZaServer.DOT_TO_CIDR["255.255.254.0"] = 23;
ZaServer.DOT_TO_CIDR["0xffffff00"] = ZaServer.DOT_TO_CIDR["255.255.255.0"] = 24;

ZaServer.DOT_TO_CIDR["0xffffff80"] = ZaServer.DOT_TO_CIDR["255.255.255.128"] = 25;
ZaServer.DOT_TO_CIDR["0xffffffc0"] = ZaServer.DOT_TO_CIDR["255.255.255.192"] = 26;
ZaServer.DOT_TO_CIDR["0xffffffe0"] = ZaServer.DOT_TO_CIDR["255.255.255.224"] = 27;
ZaServer.DOT_TO_CIDR["0xfffffff0"] = ZaServer.DOT_TO_CIDR["255.255.255.240"] = 28;
ZaServer.DOT_TO_CIDR["0xfffffff8"] = ZaServer.DOT_TO_CIDR["255.255.255.248"] = 29;
ZaServer.DOT_TO_CIDR["0xfffffffc"] = ZaServer.DOT_TO_CIDR["255.255.255.252"] = 30;
ZaServer.DOT_TO_CIDR["0xfffffffe"] = ZaServer.DOT_TO_CIDR["255.255.255.254"] = 31;
ZaServer.DOT_TO_CIDR["0xffffffff"] = ZaServer.DOT_TO_CIDR["255.255.255.255"] = 32;

ZaServer.FLUSH_CACHE_RIGHT = "flushCache";
ZaServer.MANAGE_VOLUME_RIGHT = "manageVolume";
ZaServer.RIGHT_GET_SESSIONS="getSessions";

ZaServer.isValidPostfixSubnetString = function(mask) {
	//is this a CIDR
	var pos = mask.indexOf("/");
	var lastPos = mask.lastIndexOf("/");
	if(pos==-1 || pos!=lastPos) {
		//error! this is not a valid CIDR
		return ZaServer.ERR_NOT_CIDR;
	}
	var numNetworkBits = parseInt(mask.substr(lastPos+1,(mask.length-lastPos-1)));
	if(isNaN(numNetworkBits) || numNetworkBits=="" || numNetworkBits == null || numNetworkBits < 1) {
		return ZaServer.ERR_NOT_CIDR;
	}

	//convert the address to a number
	var addrString = mask.substr(0,lastPos);
	var addrNumber = ZaServer.octetsToLong(addrString);
	if(addrNumber < 0) {
		return ZaServer.ERR_NOT_CIDR;
	}

	//do we have a starting address?
	var maskNumber = 0;
	var lastIndex = 32 - numNetworkBits;
	for(var j=31; j>=lastIndex;j-- ) {
		maskNumber += Math.pow(2,j);
	}
	if(addrNumber != ZaServer.applyMask(addrNumber, maskNumber)) {
		return ZaServer.ERR_NOT_STARTING_ADDR;
	}
	return 0;
}

/**
 * extract number of network bits from CIDR string
 * @return integer
 */
ZaServer.iGetNumNetBits = function(mask) {
	var pos = mask.indexOf("/");
	var lastPos = mask.lastIndexOf("/");
	var numNetworkBits = parseInt(mask.substr(lastPos+1,(mask.length-lastPos-1)));
	return numNetworkBits;
}
/**
 * @member ZaServer.oGetStartingAddress
 * @argument mask - CIDR representation of a network (A.B.C.D/E)
 * @return octet string that represents the last address of the network segment
 */
ZaServer.oGetStartingAddress = function (mask) {
	return ZaServer.longToOctets(ZaServer.lGetStartingAddress(mask));
}

/**
 * @member ZaServer.lGetStartingAddress
 * @argument mask - CIDR representation of a network (A.B.C.D/E)
 * @return long number represents the first address of the network segment
 */
ZaServer.lGetStartingAddress = function (mask) {
	var numNetworkBits = ZaServer.iGetNumNetBits(mask);
	var lastPos = mask.lastIndexOf("/");
	//convert the address to a number
	var addrString = mask.substr(0,lastPos);
	var addrNumber = ZaServer.octetsToLong(addrString);
	var maskNumber = 0;
	var lastIndex = 32 - numNetworkBits;
	for(var j=31; j>=lastIndex;j-- ) {
		maskNumber += Math.pow(2,j);
	}	
	var firstAddr = ZaServer.applyMask(addrNumber, maskNumber);
	return firstAddr;
}

/**
 * @member ZaServer.lGetEndingAddress
 * @argument firstAddr - long
 * @argument numNetBits - int
 * @return long number represents the last address of the network segment
 */
ZaServer.lGetEndingAddress = function (firstAddr, numNetBits) {
	var lLastAddr = firstAddr + Math.pow(2,(32 - numNetBits))-1;
	return lLastAddr;
}

/**
 * @member ZaServer.applyMask
 * @argument addr1 - long address
 * @argument netMask - long network mask
 * @return long number that represents the starting address of the network defined by addr1 and netMask
 */

ZaServer.applyMask = function (addr1, netMask) {
	var val = (addr1 & netMask);
	if(val >= 0) {
		return val;
	} else 	{
		return (4294967296+val);
	}
}

ZaServer.octetsToLong = function (addrString) {
        var patrn=/^[A-Fa-f0-9:.]+$/;
   if(patrn.test(addrString)){
        var temp1= addrString.indexOf(".");
        var temp2= addrString.indexOf(":");
        var temp3= addrString.indexOf("::");

	   if(temp3!=-1){
        var octets = addrString.split("::");
        if(octets.length !=2) {
                return -1;
        }
         else if(temp1==-1&&temp2>-1){
        octetsub0=octets[0].split(":");
        octetsub1=octets[1].split(":");
          if (octetsub0.length+octetsub1.length>7)
           return -1;
           else{
                   for(var j=0;j<octetsub0.length;j++){
                     if(octetsub0[j].length>4)
                     return -1;
                   }
                   for(var j=0;j<octetsub1.length;j++){
                     if(octetsub1[j].length>4)
                     return -1;
                   }

           }
        }else if((temp1>-1)){
                      if(octets[0]!="")
                      return -1;
                      else{
                          octetsub=octets[1].split(".");
                          for(var j=0;j<octetsub.length;j++){
                          if(octetsub[j]>parseInt("255"))
                          return -1;
                          }
             }
            }
                   return 0;
    }

        if(temp1!=-1){
              var  octets = addrString.split(".");
              if(octets.length !=4) {
                return -1;
              } else{
                    for(var i=0;i<octets.length;i++){
                    var j=octets[i];
                    if(j>parseInt("255")){
                    return -1;
              }
}
        var addrNumber = Math.pow(256,3)*parseInt(octets[0]) + Math.pow(256,2)*parseInt(octets[1]) + Math.pow(256,1)*parseInt(octets[2]) + parseInt(octets[3]);
        return addrNumber;
             }
     }

        if(temp2!=-1){
        var octets = addrString.split(":");
        if(octets.length !=8) {
                return -1;
       } else {
        for(var i=0;i<octets.length;i++){
        if(octets[i].length>4)
        return -1;
        }
 return 0;
    }
        }
}
return -1;
}



ZaServer.longToOctets = function(addrNumber) {
	var ip1 = Math.floor(addrNumber/Math.pow(256,3));
    var ip2 = Math.floor((addrNumber%Math.pow(256,3))/Math.pow(256,2));
    var ip3 = Math.floor(((addrNumber%Math.pow(256,3))%Math.pow(256,2))/Math.pow(256,1));
    var ip4 = Math.floor((((addrNumber%Math.pow(256,3))%Math.pow(256,2))%Math.pow(256,1))/Math.pow(256,0));
    return [ip1,ip2,ip3,ip4].join(".");
}

ZaServer.volumeTypeChoices = new XFormChoices({1:ZaMsg.VM_VOLUME_Msg, 10:ZaMsg.VM_VOLUME_Index}, XFormChoices.HASH);
ZaServer.volumeObjModel = {
	items: [
		{id:ZaServer.A_isCurrentVolume, type: _ENUM_, choices: [false,true]	},
		{id:ZaServer.A_VolumeId, type:_NUMBER_},
		{id:ZaServer.A_VolumeName, type:_STRING_},
		{id:ZaServer.A_VolumeType, type:_ENUM_, choices:ZaServer.volumeTypes,defaultValue:ZaServer.MSG},
		{id:ZaServer.A_VolumeRootPath, type:_STRING_},
		{id:ZaServer.A_VolumeCompressBlobs, type:_ENUM_, choices:[false,true], defaultValue:true},
		{id:ZaServer.A_VolumeCompressionThreshold, type:_NUMBER_,defaultValue:4096},
		{id:"_index", type:_NUMBER_}				
	],
	type:_OBJECT_
}
		
ZaServer.myXModel = {
	items: [
		{id:ZaItem.A_zimbraId, type:_STRING_, ref:"attrs/" + ZaItem.A_zimbraId},
		{id:ZaItem.A_zimbraCreateTimestamp, ref:"attrs/" + ZaItem.A_zimbraCreateTimestamp},
		{id:ZaServer.A_name, ref:"attrs/" + ZaServer.A_name, type:_STRING_},
//		{id:ZaServer.A_description, ref:"attrs/" +  ZaServer.A_description, type:_STRING_},
         ZaItem.descriptionModelItem,   
        {id:ZaServer.A_notes, ref:"attrs/" +  ZaServer.A_notes, type:_STRING_, maxLength:1024},
		{id:ZaServer.A_Service, ref:"attrs/" +  ZaServer.A_Service, type:_STRING_, maxLength: 256 },
		{id:ZaServer.A_ServiceHostname, ref:"attrs/" +  ZaServer.A_ServiceHostname, type:_HOSTNAME_OR_IP_, maxLength: 256 },
		// Services
		{id:ZaServer.A_zimbraPolicydServiceEnabled, ref:"attrs/"+ZaServer.A_zimbraPolicydServiceEnabled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraLdapServiceEnabled, ref:"attrs/"+ZaServer.A_zimbraLdapServiceEnabled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraMailboxServiceEnabled, ref:"attrs/"+ZaServer.A_zimbraMailboxServiceEnabled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraWebClientServiceEnabled, ref:"attrs/"+ZaServer.A_zimbraWebClientServiceEnabled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraAdminClientServiceEnabled, ref:"attrs/"+ZaServer.A_zimbraAdminClientServiceEnabled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraMailClientServiceEnabled, ref:"attrs/"+ZaServer.A_zimbraMailClientServiceEnabled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraZimletServiceEnabled, ref:"attrs/"+ZaServer.A_zimbraZimletServiceEnabled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraMtaServiceEnabled, ref:"attrs/"+ZaServer.A_zimbraMtaServiceEnabled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraSnmpServiceEnabled, ref:"attrs/"+ZaServer.A_zimbraSnmpServiceEnabled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraAntiVirusServiceEnabled, ref:"attrs/"+ZaServer.A_zimbraAntiVirusServiceEnabled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraAntiSpamServiceEnabled, ref:"attrs/"+ZaServer.A_zimbraAntiSpamServiceEnabled, type: _ENUM_, choices: [false,true] },
        {
            id: ZaServer.A_zimbraOpenDKIMServiceEnabled,
            ref: "attrs/" + ZaServer.A_zimbraOpenDKIMServiceEnabled,
            type: _ENUM_,
            choices: [false, true]
        },
		{id:ZaServer.A_zimbraSpellServiceEnabled, ref:"attrs/"+ZaServer.A_zimbraSpellServiceEnabled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraLoggerServiceEnabled, ref:"attrs/"+ZaServer.A_zimbraLoggerServiceEnabled, type: _ENUM_, choices: [false,true] },
        {id:ZaServer.A_zimbraVmwareHAServiceEnabled, ref:"attrs/"+ZaServer.A_zimbraVmwareHAServiceEnabled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraMailProxyServiceEnabled, ref:"attrs/"+ZaServer.A_zimbraMailProxyServiceEnabled, type: _ENUM_, choices: [false,true] },		
		{id:ZaServer.A_zimbraReverseProxyLookupTarget, ref:"attrs/"+ZaServer.A_zimbraReverseProxyLookupTarget, type: _COS_ENUM_, choices: ZaModel.BOOLEAN_CHOICES},
		{id:ZaServer.A_zimbraLdapServiceInstalled, ref:"attrs/"+ZaServer.A_zimbraLdapServiceInstalled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraMailboxServiceInstalled, ref:"attrs/"+ZaServer.A_zimbraMailboxServiceInstalled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraMtaServiceInstalled, ref:"attrs/"+ZaServer.A_zimbraMtaServiceInstalled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraSnmpServiceInstalled, ref:"attrs/"+ZaServer.A_zimbraSnmpServiceInstalled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraAntiVirusServiceInstalled, ref:"attrs/"+ZaServer.A_zimbraAntiVirusServiceInstalled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraAntiSpamServiceInstalled, ref:"attrs/"+ZaServer.A_zimbraAntiSpamServiceInstalled, type: _ENUM_, choices: [false,true] },
        {
            id: ZaServer.A_zimbraOpenDKIMServiceInstalled,
            ref: "attrs/" + ZaServer.A_zimbraOpenDKIMServiceInstalled,
            type: _ENUM_,
            choices: [false, true]
        },
		{id:ZaServer.A_zimbraSpellServiceInstalled, ref:"attrs/"+ZaServer.A_zimbraSpellServiceInstalled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraLoggerServiceInstalled, ref:"attrs/"+ZaServer.A_zimbraLoggerServiceInstalled, type: _ENUM_, choices: [false,true] },
		{id:ZaServer.A_zimbraMailProxyServiceInstalled, ref:"attrs/"+ZaServer.A_zimbraMailProxyServiceInstalled, type: _ENUM_, choices: [false,true] },
        {id:ZaServer.A_zimbraVmwareHAServiceInstalled, ref:"attrs/"+ZaServer.A_zimbraVmwareHAServiceInstalled, type: _ENUM_, choices: [false,true] },
        {id:ZaServer.A_zimbraPolicydServiceInstalled, ref:"attrs/"+ZaServer.A_zimbraPolicydServiceInstalled, type: _ENUM_, choices: [false,true] },
		// MTA
		{id:ZaServer.A_zimbraMtaSaslAuthEnable, ref:"attrs/" +  ZaServer.A_zimbraMtaSaslAuthEnable, type: _COS_ENUM_, choices: ["yes", "no"] },
		{id:ZaServer.A_zimbraMtaTlsAuthOnly, ref:"attrs/" +  ZaServer.A_zimbraMtaTlsAuthOnly, type: _COS_ENUM_, choices: ZaModel.BOOLEAN_CHOICES },
		{id:ZaServer.A_zimbraMtaRelayHost, ref:"attrs/" +  ZaServer.A_zimbraMtaRelayHost,  type: _COS_HOSTNAME_OR_IP_, maxLength: 256 },
        {id:ZaServer.A_zimbraMtaFallbackRelayHost, ref:"attrs/" + ZaServer.A_zimbraMtaFallbackRelayHost, type: _COS_HOSTNAME_OR_IP_, maxLength: 256 },
		{id:ZaServer.A_zimbraMtaMyNetworks, ref:"attrs/" +  ZaServer.A_zimbraMtaMyNetworks, type:_COS_STRING_, maxLength: 10240 },
		{id:ZaServer.A_zimbraMtaSmtpDnsSupportLevel, ref:"attrs/" +  ZaServer.A_zimbraMtaSmtpDnsSupportLevel, type: _COS_ENUM_, choices: ZaSettings.smtpDnsSupportLevel },
		//milter server
		{id:ZaServer.A_zimbraMilterBindAddress, ref:"attrs/" +  ZaServer.A_zimbraMilterBindAddress, type:_LIST_, listItem:{type:_HOSTNAME_OR_IP_, maxLength: 128} },
		{id:ZaServer.A_zimbraMilterBindPort, ref:"attrs/" +  ZaServer.A_zimbraMilterBindPort, type:_COS_PORT_},
		{id:ZaServer.A_zimbraMilterServerEnabled, ref:"attrs/" +  ZaServer.A_zimbraMilterServerEnabled, type: _COS_ENUM_, choices: ZaModel.BOOLEAN_CHOICES },
        //spnego
		{id:ZaServer.A_zimbraSpnegoAuthTargetName, ref:"attrs/" +  ZaServer.A_zimbraSpnegoAuthTargetName, type:_STRING_},
        {id:ZaServer.A_zimbraSpnegoAuthPrincipal, ref:"attrs/" +  ZaServer.A_zimbraSpnegoAuthPrincipal, type:_STRING_},
        {id:ZaServer.A_zimbraMailSSLClientCertMode, ref:"attrs/" +  ZaServer.A_zimbraMailSSLClientCertMode, type:_COS_STRING_, choices:["Disabled","NeedClientAuth","WantClientAuth"]},
        {id:ZaServer.A_zimbraMailSSLClientCertPort, ref:"attrs/" +  ZaServer.A_zimbraMailSSLClientCertPort, type:_COS_PORT_},
        {id:ZaServer.A_zimbraMailSSLProxyClientCertPort, ref:"attrs/" +  ZaServer.A_zimbraMailSSLProxyClientCertPort, type:_COS_PORT_},
        {id:ZaServer.A_zimbraReverseProxyMailMode, ref:"attrs/" +  ZaServer.A_zimbraReverseProxyMailMode, type:_COS_STRING_, choices:["http","https","both","mixed","redirect"]},
        {id:ZaServer.A_zimbraReverseProxyClientCertMode, ref:"attrs/" +  ZaServer.A_zimbraReverseProxyClientCertMode, type:_COS_STRING_, choices:["on","off","optional"]},
        {id:ZaServer.A_zimbraReverseProxyClientCertCA, ref:"attrs/" + ZaServer.A_zimbraReverseProxyClientCertCA, type:_STRING_},
		// ...other...
		{id:ZaServer.A_zimbraSmtpHostname, ref:"attrs/" +  ZaServer.A_zimbraSmtpHostname, type:_COS_LIST_, listItem:{type:_HOSTNAME_OR_IP_, maxLength: 256} },
		{id:ZaServer.A_SmtpPort, ref:"attrs/" +  ZaServer.A_SmtpPort, type:_COS_PORT_},
		{id:ZaServer.A_SmtpTimeout, ref:"attrs/" + ZaServer.A_SmtpTimeout, type:_COS_NUMBER_, minInclusive: 0, maxInclusive:2147483647 },
		{id:ZaServer.A_LmtpAdvertisedName, ref:"attrs/" +  ZaServer.A_LmtpAdvertisedName, type:_STRING_, maxLength: 128 },
		{id:ZaServer.A_LmtpBindAddress, ref:"attrs/" +  ZaServer.A_LmtpBindAddress, type:_HOSTNAME_OR_IP_, maxLength: 256 },
		{id:ZaServer.A_LmtpBindPort, ref:"attrs/" +  ZaServer.A_LmtpBindPort, type:_COS_PORT_},		
		{id:ZaServer.A_zimbraScheduledTaskNumThreads, ref:"attrs/" +  ZaServer.A_zimbraScheduledTaskNumThreads, type:_COS_INT_, minInclusive: 1, maxInclusive:2147483647 },
		{id:ZaServer.A_zimbraMailPurgeSleepInterval, ref:"attrs/" +  ZaServer.A_zimbraMailPurgeSleepInterval, type:_COS_MLIFETIME_, minInclusive: 0, maxInclusive:2147483647 },
		{id:ZaServer.A_zimbraPop3NumThreads, ref:"attrs/" +  ZaServer.A_zimbraPop3NumThreads, type:_COS_INT_, minInclusive: 0, maxInclusive:2147483647 },		
		{id:ZaServer.A_zimbraImapNumThreads, ref:"attrs/" +  ZaServer.A_zimbraImapNumThreads, type:_COS_INT_, minInclusive: 0, maxInclusive:2147483647 },		
		{id:ZaServer.A_Pop3AdvertisedName, ref:"attrs/" +  ZaServer.A_Pop3AdvertisedName, type:_STRING_, maxLength: 128 },
		{id:ZaServer.A_Pop3BindAddress, ref:"attrs/" +  ZaServer.A_Pop3BindAddress, type:_HOSTNAME_OR_IP_, maxLength: 128 },
		{id:ZaServer.A_Pop3AdvertisedName, ref:"attrs/" +  ZaServer.A_Pop3AdvertisedName, type:_STRING_, maxLength: 128 },
		{id:ZaServer.A_Pop3BindAddress, ref:"attrs/" +  ZaServer.A_Pop3BindAddress, type:_HOSTNAME_OR_IP_, maxLength: 128 },
		{id:ZaServer.A_zimbraPop3BindPort, ref:"attrs/" +  ZaServer.A_zimbraPop3BindPort, type:_COS_PORT_ },
		{id:ZaServer.A_zimbraPop3SSLBindPort, ref:"attrs/" +  ZaServer.A_zimbraPop3SSLBindPort, type:_COS_PORT_ },
		{id:ZaServer.A_Pop3SSLServerEnabled, ref:"attrs/" + ZaServer.A_Pop3SSLServerEnabled, type:_COS_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},		
		{id:ZaServer.A_Pop3ServerEnabled, ref:"attrs/" + ZaServer.A_Pop3ServerEnabled, type:_COS_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},		
		{id:ZaServer.A_Pop3CleartextLoginEnabled, ref:"attrs/" + ZaServer.A_Pop3CleartextLoginEnabled, type:_COS_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},		
		{id:ZaServer.A_zimbraImapBindPort, ref:"attrs/" + ZaServer.A_zimbraImapBindPort, type:_COS_PORT_ },
		{id:ZaServer.A_ImapServerEnabled, ref:"attrs/" + ZaServer.A_ImapServerEnabled, type:_COS_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},		
		{id:ZaServer.A_ImapSSLBindPort, ref:"attrs/" + ZaServer.A_ImapSSLBindPort, type:_COS_PORT_ },
		{id:ZaServer.A_ImapSSLServerEnabled, ref:"attrs/" + ZaServer.A_ImapSSLServerEnabled, type:_COS_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},		
		
		//ip address bindings
		{id:ZaServer.A_zimbraMailBindAddress, ref:"attrs/" +  ZaServer.A_zimbraMailBindAddress, type:_IP_},
		{id:ZaServer.A_zimbraMailSSLBindAddress, ref:"attrs/" +  ZaServer.A_zimbraMailSSLBindAddress, type:_IP_ },
		{id:ZaServer.A_zimbraMailSSLClientCertBindAddress, ref:"attrs/" +  ZaServer.A_zimbraMailSSLClientCertBindAddress, type:_IP_ },
		{id:ZaServer.A_zimbraAdminBindAddress, ref:"attrs/" +  ZaServer.A_zimbraAdminBindAddress, type:_IP_ },

        // auto provision
        {id:ZaServer.A_zimbraAutoProvPollingInterval, ref:"attrs/" + ZaServer.A_zimbraAutoProvPollingInterval, type: _COS_MLIFETIME_, minInclusive: 0 },
        {id:ZaServer.A_zimbraAutoProvScheduledDomains, ref:"attrs/" +  ZaServer.A_zimbraAutoProvScheduledDomains, type:_LIST_, listItem:{type:_STRING_, maxLength: 256} },
		{id:ZaServer.A_ImapCleartextLoginEnabled, ref:"attrs/" + ZaServer.A_ImapCleartextLoginEnabled, type:_COS_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},		
		{id:ZaServer.A_RedologEnabled, ref:"attrs/" + ZaServer.A_RedologEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},		
		{id:ZaServer.A_RedologLogPath, ref:"attrs/" + ZaServer.A_RedologLogPath, type:_STRING_},		
		{id:ZaServer.A_RedologArchiveDir, ref:"attrs/" + ZaServer.A_RedologArchiveDir, type:_STRING_},		
		{id:ZaServer.A_RedologBacklogDir, ref:"attrs/" + ZaServer.A_RedologBacklogDir, type:_STRING_},		
		{id:ZaServer.A_RedologRolloverFileSizeKB, ref:"attrs/" + ZaServer.A_RedologRolloverFileSizeKB, type:_NUMBER_, minInclusive: 0, maxInclusive:2147483647 },
		{id:ZaServer.A_RedologFsyncIntervalMS, ref:"attrs/" + ZaServer.A_RedologFsyncIntervalMS, type:_NUMBER_, minInclusive: 0, maxInclusive:2147483647 },
		{id:ZaServer.A_MasterRedologClientConnections, ref:"attrs/" + ZaServer.A_MasterRedologClientConnections, type:_STRING_},		
		{id:ZaServer.A_MasterRedologClientTimeoutSec, ref:"attrs/" + ZaServer.A_MasterRedologClientTimeoutSec, type:_STRING_},		
		{id:ZaServer.A_MasterRedologClientTcpNoDelay, ref:"attrs/" + ZaServer.A_MasterRedologClientTcpNoDelay, type:_STRING_},		
		{id:ZaServer.A_zimbraUserServicesEnabled, ref:"attrs/" + ZaServer.A_zimbraUserServicesEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
		//volumes
		{id:ZaServer.A_Volumes,ref:ZaServer.A_Volumes, type:_LIST_, listItem:ZaServer.volumeObjModel},
		{id:ZaServer.A_showVolumes, ref:ZaServer.A_showVolumes, type: _ENUM_, choices: [false,true]},
		{id:ZaServer.A2_volume_selection_cache, ref:ZaServer.A2_volume_selection_cache, type:_LIST_},
		{id:ZaServer.A_CurrentIndexVolumeId, ref:ZaServer.A_CurrentIndexVolumeId, type:_NUMBER_},
		{id:ZaServer.A_CurrentMsgVolumeId, ref:ZaServer.A_CurrentMsgVolumeId, type:_NUMBER_},
		//VAMI update
		{id:ZaServer.A_zimbraApplianceVendor, ref:"attrs/" +  ZaServer.A_zimbraApplianceVendor, type:_STRING_, maxLength: 256 },
		{id:ZaServer.A_zimbraApplianceName, ref:"attrs/" +  ZaServer.A_zimbraApplianceName, type:_STRING_, maxLength: 256 },
		{id:ZaServer.A_zimbraApplianceVersion, ref:"attrs/" +  ZaServer.A_zimbraApplianceVersion, type:_STRING_, maxLength: 256 },
		{id:ZaServer.A_zimbraApplianceFullVersion, ref:"attrs/" +  ZaServer.A_zimbraApplianceFullVersion, type:_STRING_, maxLength: 256 },
		{id:ZaServer.A_zimbraApplianceDetails, ref:"attrs/" +  ZaServer.A_zimbraApplianceDetails, type:_STRING_, maxLength: 256 },
		{id:ZaServer.A_zimbraApplianceDefaultRepUrl, ref:"attrs/" +  ZaServer.A_zimbraApplianceDefaultRepUrl, type:_STRING_, maxLength: 256 },
		{id:ZaServer.A_zimbraApplianceCustomRepUrl, ref:"attrs/" +  ZaServer.A_zimbraApplianceCustomRepUrl, type:_STRING_, maxLength: 256 },
		{id:ZaServer.A_zimbraApplianceCustomRepUrlUser, ref:"attrs/" +  ZaServer.A_zimbraApplianceCustomRepUrlUser, type:_STRING_, maxLength: 256 },
		{id:ZaServer.A_zimbraApplianceCustomRepUrlPass, ref:"attrs/" +  ZaServer.A_zimbraApplianceCustomRepUrlPass, type:_STRING_, maxLength: 256 },
		{id:ZaServer.A_zimbraApplianceUpdateOption, ref:"attrs/" +  ZaServer.A_zimbraApplianceUpdateOption, type:_LIST_},
		{id:ZaServer.A_zimbraApplianceUpdateType, ref:"attrs/" +  ZaServer.A_zimbraApplianceUpdateType, type:_LIST_},
		{id:ZaServer.A_zimbraApplianceUpdatehourofrun, ref:"attrs/" +  ZaServer.A_zimbraApplianceUpdatehourofrun, type:_LIST_}
    ]
};
		
ZaServer.prototype.toString = function() {
	return this.name;
}

ZaServer.staticServerByNameCacheTable = [];

ZaServer.getServerByName = function (serverName) {
    if (!serverName) {
        return null;
    }

    var server = ZaServer.staticServerByNameCacheTable[serverName];

	if (!server) {
        server = new ZaServer();
		try {
			server.load("name", serverName, false, true);
		} catch (ex) {
            throw (ex);
        }

        ZaServer.staticServerByNameCacheTable[serverName] = server;
	}

	return server;	
}

ZaServer.staticServerByIdCacheTable = [];

ZaServer.getServerById = function (serverId) {
    if(!serverId) {
        return null;
    }

    var server = ZaServer.staticServerByIdCacheTable[serverId];

	if (!server) {
        server = new ZaServer();
        try {
            server.load("id", serverId, false, true);
		} catch (ex) {
            throw (ex);
        }

        ZaServer.staticServerByIdCacheTable[serverId] = server;
	}

	return server;
}

ZaServer.getAllMBSs =
function(attrs, callback) {
	var soapDoc = AjxSoapDoc.create("GetAllServersRequest", ZaZimbraAdmin.URN, null);	
	soapDoc.getMethod().setAttribute("service", "mailbox");
	soapDoc.getMethod().setAttribute("applyConfig", "false");
	var params = new Object();
	params.soapDoc = soapDoc;
	params.asyncMode = callback ? true : false;
	params.callback = callback ? callback : null;
	if(attrs) {
		soapDoc.setMethodAttribute("attrs", attrs.join(","));
	}	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_GET_ALL_SERVER
	}
	if(callback) {
		ZaRequestMgr.invoke(params, reqMgrParams);
	} else {
		var resp = 	ZaRequestMgr.invoke(params, reqMgrParams).Body.GetAllServersResponse;
		var list = new ZaItemList(ZaServer);
		list.loadFromJS(resp);	
		return list;
	}
}

ZaServer.getAll =
function(attrs) {
	var soapDoc = AjxSoapDoc.create("GetAllServersRequest", ZaZimbraAdmin.URN, null);	
	soapDoc.getMethod().setAttribute("applyConfig", "false");
//	var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;
	params.asyncMode = false;
	if(attrs) {
		soapDoc.setMethodAttribute("attrs", attrs.join(","));
	}	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_GET_ALL_SERVER
	}
	var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.GetAllServersResponse;	
	var list = new ZaItemList(ZaServer);
	list.loadFromJS(resp);	
	return list;
}

ZaServer.modifyMethod = function (tmpObj) {
	if(tmpObj.attrs == null) {
		//show error msg
		//ZaApp.getInstance().getCurrentController()._errorDialog.setMessage(ZaMsg.ERROR_UNKNOWN, null, DwtMessageDialog.CRITICAL_STYLE, null);
		//ZaApp.getInstance().getCurrentController()._errorDialog.popup();		
		return;	
	}
	
	if(ZaItem.hasWritePermission(ZaServer.A_zimbraServiceEnabled,tmpObj)) {
		// update zimbraServiceEnabled
		var svcInstalled = AjxUtil.isString(tmpObj.attrs[ZaServer.A_zimbraServiceInstalled])
								? [ tmpObj.attrs[ZaServer.A_zimbraServiceInstalled] ]
								: tmpObj.attrs[ZaServer.A_zimbraServiceInstalled];
		if (svcInstalled) {
			// get list of actually enabled fields
			var enabled = [];
			for (var i = 0; i < svcInstalled.length; i++) {
				var service = svcInstalled[i];
				if (service == "vmware-ha") {
					if (tmpObj.attrs["_"+ZaServer.A_zimbraServiceEnabled+"_"+"vmwareha"]) 
						enabled.push("vmware-ha");
					continue;
				}
				if (tmpObj.attrs["_"+ZaServer.A_zimbraServiceEnabled+"_"+service]) {
					enabled.push(service);
				}			
			}

			//add the servlets
			for(var i = 0; i < ZaServer.servlets.length; i++) {
				var service = ZaServer.servlets[i];
				if(this.attrs["_"+ZaServer.A_zimbraServiceEnabled + "_" + service]) {
					enabled.push(service)
				}
			}
			// see if list of actually enabled fields is same as before
			var dirty = false; 
			
			if (this.attrs[ZaServer.A_zimbraServiceEnabled]) {
				var prevEnabled = AjxUtil.isString(this.attrs[ZaServer.A_zimbraServiceEnabled])
								? [ this.attrs[ZaServer.A_zimbraServiceEnabled] ]
								: this.attrs[ZaServer.A_zimbraServiceEnabled];
								
				dirty = (enabled.length != prevEnabled.length);		
				
				if (!dirty) {
					for (var i = 0; i < prevEnabled.length; i++) {
						var service = prevEnabled[i];
						if (service == "vmware-ha") {
							if(!tmpObj.attrs["_"+ZaServer.A_zimbraServiceEnabled+"_"+"vmware"]){
								dirty = true;
								break;
							} else {
								continue;
							}

						}
						if (!tmpObj.attrs["_"+ZaServer.A_zimbraServiceEnabled+"_"+service]) {
							dirty = true;
							break;
						}
					}
				}
			}
			
			// save new list of enabled fields
			if (dirty) {
				tmpObj.attrs[ZaServer.A_zimbraServiceEnabled] = enabled;
			}
		}	
	}
	//modify volumes
	if(this.attrs[ZaServer.A_zimbraMailClientServiceEnabled] && ZaItem.hasRight(ZaServer.MANAGE_VOLUME_RIGHT,this)) {
		//remove Volumes
		if(tmpObj[ZaServer.A_RemovedVolumes]) {
			var cnt = tmpObj[ZaServer.A_RemovedVolumes].length;
			for(var i = 0; i < cnt; i++) {
				if(tmpObj[ZaServer.A_RemovedVolumes][i][ZaServer.A_VolumeId] > 0) {
					this.deleteVolume(tmpObj[ZaServer.A_RemovedVolumes][i][ZaServer.A_VolumeId]);			
				}
			}
		}
	
		if(tmpObj[ZaServer.A_Volumes]) {			
			var tmpVolumeMap = new Array();
			var cnt = tmpObj[ZaServer.A_Volumes].length;
			for(var i = 0; i < cnt; i++) {
				tmpVolumeMap.push(tmpObj[ZaServer.A_Volumes][i]);
			}
		
			//create new Volumes
			cnt = tmpVolumeMap.length;
			for(var i = 0; i < cnt; i++) {
				//consider only new rows (no VolumeID)
				//ignore empty rows, Bug 4425
				if(!(tmpVolumeMap[i][ZaServer.A_VolumeId]>0) && tmpVolumeMap[i][ZaServer.A_VolumeName] && tmpVolumeMap[i][ZaServer.A_VolumeRootPath]) {
					var newId = this.createVolume(tmpVolumeMap[i]);	
					if(newId>0) {
						//find if we assigned this volume to current volumes
						for(var key in ZaServer.currentkeys) {
							if(tmpObj[ZaServer.currentkeys[key]] == tmpVolumeMap[i][ZaServer.A_VolumeId]) {
								tmpObj[ZaServer.currentkeys[key]] = newId;
							}
						}
					}		
				}
			}
	
			//modify existing volumes
			cnt--;	
			var cnt2 = this[ZaServer.A_Volumes].length;
			for(var i = cnt; i >= 0; i--) {
				var newVolume = tmpVolumeMap[i];
				var oldVolume;
				for (var ix =0; ix < cnt2; ix++) {
					oldVolume = this[ZaServer.A_Volumes][ix];
					if(oldVolume[ZaServer.A_VolumeId] == newVolume[ZaServer.A_VolumeId]) {
						//check attributes
						var modified = false;
						for(var attr in oldVolume) {
							if(oldVolume[attr] != newVolume[attr]) {
								modified = true;
								break;
							}
						}
						
						if(modified) {
							this.modifyVolume(tmpVolumeMap[i]);
						}
						tmpVolumeMap.splice(i,1);
					}
				}
			}
		}

		//set current volumes
		for(var key in ZaServer.currentkeys) {
			if(tmpObj[ZaServer.currentkeys[key]] && (!this[ZaServer.currentkeys[key]] || (this[ZaServer.currentkeys[key]] !=tmpObj[ZaServer.currentkeys[key]]))) {
				this.setCurrentVolume(tmpObj[ZaServer.currentkeys[key]], key);
			}
			
		}
	}	
	
	var hasSomething = false;	
	//create a ModifyServerRequest SOAP request
	var soapDoc = AjxSoapDoc.create("ModifyServerRequest", ZaZimbraAdmin.URN, null);
	soapDoc.set("id", this.id);
	//get the list of changed fields
	var mods = new Object();
	for (var a in tmpObj.attrs) {
		if(a == ZaItem.A_objectClass || /^_/.test(a) || a == ZaServer.A_zimbraServiceInstalled
                || a == ZaItem.A_zimbraACE)
			continue;
		
		if(!ZaItem.hasWritePermission(a,this)) {
			continue;
		}
		
		hasSomething = true;
		if (this.attrs[a] != tmpObj.attrs[a] ) {
			if(tmpObj.attrs[a] instanceof Array) {
				if (!this.attrs[a]) {
					this.attrs[a] = [];
				}

				if (! this.attrs[a] instanceof Array) {
					this.attrs[a] = [this.attrs[a]];
				}

				if (tmpObj.attrs[a].join(",").valueOf() !=  this.attrs[a].join(",").valueOf()) {
					var array = tmpObj.attrs[a];
					if (array.length > 0) {
						for (var i = 0; i < array.length; i++) {
							var attr = soapDoc.set("a", array[i]);
							attr.setAttribute("n", a);
						}
					} else {
						var attr = soapDoc.set("a");
						attr.setAttribute("n", a);
					}
				}	
			} else {
				var attr = soapDoc.set("a", tmpObj.attrs[a]);
				attr.setAttribute("n", a);
			}
		}
	}
	if(hasSomething) {
		//modify the server
		var params = new Object();
		params.soapDoc = soapDoc;	
		var reqMgrParams = {
			controller : ZaApp.getInstance().getCurrentController(),
			busyMsg : ZaMsg.BUSY_MODIFY_SERVER
		}
		var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.ModifyServerResponse;		
		this.initFromJS(resp.server[0]);		
	}
}
ZaItem.modifyMethods["ZaServer"].push(ZaServer.modifyMethod);


/**
* Returns HTML for a tool tip for this domain.
*/
ZaServer.prototype.getToolTip =
function() {
	// update/null if modified
	if (!this._toolTip) {
		var html = new Array(20);
		var idx = 0;
		html[idx++] = "<table cellpadding='0' cellspacing='0' border='0'>";
		html[idx++] = "<tr valign='center'><td colspan='2' align='left'>";
		html[idx++] = "<div style='border-bottom: 1px solid black; white-space:nowrap; overflow:hidden;width:350'>";
		html[idx++] = "<table cellpadding='0' cellspacing='0' border='0' style='width:100%;'>";
		html[idx++] = "<tr valign='center'>";
		html[idx++] = "<td><b>" + AjxStringUtil.htmlEncode(this.name) + "</b></td>";
		html[idx++] = "<td align='right'>";
		html[idx++] = AjxImg.getImageHtml("Server");		
		html[idx++] = "</td>";
		html[idx++] = "</table></div></td></tr>";
		html[idx++] = "<tr></tr>";
		idx = this._addAttrRow(ZaItem.A_description, html, idx);	
		idx = this._addAttrRow(ZaItem.A_zimbraId, html, idx);
		html[idx++] = "</table>";
		this._toolTip = html.join("");
	}
	return this._toolTip;
}

ZaServer.loadMethod = 
function(by, val) {
	var _by = by ? by : "id";
	var _val = val ? val : this.id
	var soapDoc = AjxSoapDoc.create("GetServerRequest", ZaZimbraAdmin.URN, null);
	var elBy = soapDoc.set("server", _val);
	elBy.setAttribute("by", _by);
	soapDoc.setMethodAttribute("applyConfig", "false");
	if(!this.getAttrs.all && !AjxUtil.isEmpty(this.attrsToGet)) {
		soapDoc.setMethodAttribute("attrs", this.attrsToGet.join(","));
	}	
	
	//var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;	
	params.asyncMode = false;
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_GET_SERVER
	}
	resp = ZaRequestMgr.invoke(params, reqMgrParams);		
	this.initFromJS(resp.Body.GetServerResponse.server[0]);
	
	//this._defaultValues = ZaApp.getInstance().getGlobalConfig();
	soapDoc = AjxSoapDoc.create("BatchRequest", "urn:zimbra");
	soapDoc.setMethodAttribute("onerror", "continue");	
	
	if(this.attrs[ZaServer.A_zimbraMailClientServiceEnabled] && ZaItem.hasRight(ZaServer.MANAGE_VOLUME_RIGHT,this)) {
		var getAllVols = soapDoc.set("GetAllVolumesRequest", null, null, ZaZimbraAdmin.URN);
		var getCurrentVols = soapDoc.set("GetCurrentVolumesRequest", null, null, ZaZimbraAdmin.URN);
	}				
	var getAllVols = soapDoc.set("GetServerNIfsRequest", null, null, ZaZimbraAdmin.URN);
	getAllVols.setAttribute("type", "both");
	var server = soapDoc.set("server", _val, getAllVols);
	server.setAttribute("by", _by);
	try {
		params = new Object();
		params.soapDoc = soapDoc;	
		params.asyncMode = false;
		if(this.attrs && this.attrs[ZaServer.A_zimbraMailClientServiceEnabled]) {
			params.targetServer = this.id;
		}
		var reqMgrParams = {
			controller : ZaApp.getInstance().getCurrentController(),
			busyMsg : ZaMsg.BUSY_GET_SERVER
		}
		
		var respObj = ZaRequestMgr.invoke(params, reqMgrParams);
		this[ZaServer.A_Volumes] = new Array();
		
		if(respObj.isException && respObj.isException()) {
			ZaApp.getInstance().getCurrentController()._handleException(respObj.getException(), "ZaServer.loadMethod", null, false);
		} 
		if (respObj.Body.BatchResponse) {
			if(respObj.Body.BatchResponse.Fault) {
				var fault = respObj.Body.BatchResponse.Fault;
				if(fault instanceof Array)
					fault = fault[0];
			
				if (fault) {
					// JS response with fault
					var ex = ZmCsfeCommand.faultToEx(fault);
					ZaApp.getInstance().getCurrentController()._handleException(ex,"ZaServer.loadMethod", null, false);
				}
			} 
		
			var batchResp = respObj.Body.BatchResponse;
			if(batchResp.GetAllVolumesResponse) {
				resp = batchResp.GetAllVolumesResponse[0];
				this.parseMyVolumes(resp);
			}
				
			if(batchResp.GetCurrentVolumesResponse) {
				resp = batchResp.GetCurrentVolumesResponse[0];
				this.parseCurrentVolumesResponse(resp);
			}
				
			if(batchResp.GetServerNIfsResponse) {
				resp = batchResp.GetServerNIfsResponse[0];
				this.parseNIFsResponse(resp);
			}
		}
	} catch (ex) {
		//show the error and go on
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaServer.loadMethod", null, false);
	}		
}

ZaItem.loadMethods["ZaServer"].push(ZaServer.loadMethod);

ZaServer.prototype.parseNIFsResponse = 
function(resp) {
	if(resp && resp.ni) {
		var NIs = resp.ni;
		var cnt = NIs.length;
		this.nifs = [];
		for(var i=0;i<cnt;i++) {
			var ni = {};
			ZaItem.prototype.initFromJS.call(ni, NIs[i]);
			this.nifs.push(ni);
		}
	}
}
//ZaItem.loadMethods["ZaServer"].push(ZaServer.loadNIFS);

ZaServer.prototype.initFromJS = function(server) {
	ZaItem.prototype.initFromJS.call(this, server);
	// convert installed/enabled services to hidden fields for xform binding
	var installed = this.attrs[ZaServer.A_zimbraServiceInstalled];
	if (installed) {
		if (AjxUtil.isString(installed)) {
			installed = [ installed ];
		}
		for (var i = 0; i < installed.length; i++) {
			var service = installed[i];
			if(service == "vmware-ha"){
				this.attrs["_"+ZaServer.A_zimbraServiceInstalled+"_"+"vmwareha"] = true;
                        	this.attrs["_"+ZaServer.A_zimbraServiceEnabled+"_"+"vmwareha"] = false;
				continue;
			}
			this.attrs["_"+ZaServer.A_zimbraServiceInstalled+"_"+service] = true;
			this.attrs["_"+ZaServer.A_zimbraServiceEnabled+"_"+service] = false;
		}
	}
	
	var enabled = this.attrs[ZaServer.A_zimbraServiceEnabled];
	if (enabled) {
		if (AjxUtil.isString(enabled)) {
			enabled = [ enabled ];
		}
		for (var i = 0; i < enabled.length; i++) {
			var service = enabled[i];
			if (service == "vmware-ha") {
				this.attrs["_"+ZaServer.A_zimbraServiceEnabled+"_"+"vmwareha"] = true;
				continue;
			}

			this.attrs["_"+ZaServer.A_zimbraServiceEnabled+"_"+service] = true;
		}
	}
	this[ZaServer.A_ServiceHostname] = this.attrs[ZaServer.A_ServiceHostname]; // a hack for New Account Wizard	
	this[ZaServer.A_showVolumes] = this.attrs[ZaServer.A_zimbraMailClientServiceEnabled];
	if(this.attrs[ZaServer.A_zimbraSmtpHostname] && !(this.attrs[ZaServer.A_zimbraSmtpHostname] instanceof Array)) {
		this.attrs[ZaServer.A_zimbraSmtpHostname] = [this.attrs[ZaServer.A_zimbraSmtpHostname]];
	}
	
	if(this._defaultValues && this._defaultValues.attrs[ZaServer.A_zimbraSmtpHostname] && !(this._defaultValues.attrs[ZaServer.A_zimbraSmtpHostname]  instanceof Array)) {
		this._defaultValues.attrs[ZaServer.A_zimbraSmtpHostname]  = [this._defaultValues.attrs[ZaServer.A_zimbraSmtpHostname]];
	}
	
	if(this.attrs[ZaServer.A_zimbraMilterBindAddress] && !(this.attrs[ZaServer.A_zimbraMilterBindAddress] instanceof Array)) {
                this.attrs[ZaServer.A_zimbraMilterBindAddress] = [this.attrs[ZaServer.A_zimbraMilterBindAddress]];
        }

        if(this._defaultValues && this._defaultValues.attrs[ZaServer.A_zimbraMilterBindAddress] && !(this._defaultValues.attrs[ZaServer.A_zimbraMilterBindAddress]  instanceof Array)) {
                this._defaultValues.attrs[ZaServer.A_zimbraMilterBindAddress]  = [this._defaultValues.attrs[ZaServer.A_zimbraMilterBindAddress]];
        }

	if(this.attrs[ZaServer.A_zimbraAutoProvScheduledDomains] && !(this.attrs[ZaServer.A_zimbraAutoProvScheduledDomains] instanceof Array)) {
        this.attrs[ZaServer.A_zimbraAutoProvScheduledDomains] = [this.attrs[ZaServer.A_zimbraAutoProvScheduledDomains]];
    }

}

ZaServer.prototype.parseCurrentVolumesResponse =
function (resp) {
	var volumes = resp.volume;
	if(volumes) {
		var cnt = volumes.length;
		for (var i=0; i< cnt;  i++) {
			var volume = volumes[i];
			for(var key in ZaServer.currentkeys) {
				if(volume[ZaServer.A_VolumeType]==key) {
					this[ZaServer.currentkeys[key]] = volume[ZaServer.A_VolumeId];
				}
			}			
		}
	}
}

ZaServer.prototype.parseMyVolumes = 
function(resp) {
	var volumes = resp.volume;
	if(volumes) {
		var cnt = volumes.length;
		for (var i=0; i< cnt;  i++) {
			this[ZaServer.A_Volumes].push(volumes[i]);	
		}
	}
}

ZaServer.compareVolumesByName = function (a,b) {
	
	if(a[ZaServer.A_VolumeName]>b[ZaServer.A_VolumeName])
		return 1;
	if(a[ZaServer.A_VolumeName]<b[ZaServer.A_VolumeName])
		return -1;
	return 0;
	
}

ZaServer.prototype.loadVolumes = function (callback) {
	var soapDoc = AjxSoapDoc.create("GetAllVolumesRequest", ZaZimbraAdmin.URN, null);
	var params = {
		soapDoc: soapDoc,
		targetServer: this.id,
		asyncMode: callback ? true : false,
		callback: callback ? callback : null		
	}
	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_LOADING_VOL
	}
	ZaRequestMgr.invoke(params, reqMgrParams) ;
}

ZaServer.prototype.deleteVolume =
function (id, callback) {
	if(!id)
		return false;
		
	var soapDoc = AjxSoapDoc.create("DeleteVolumeRequest", ZaZimbraAdmin.URN, null);		
	soapDoc.getMethod().setAttribute(ZaServer.A_VolumeId, id);	
	var params = {
		soapDoc: soapDoc,
		targetServer: this.id,
		asyncMode: callback ? true : false,
		callback: callback ? callback : null		
	}
	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_DELETE_VOL
	}
	ZaRequestMgr.invoke(params, reqMgrParams) ;
}

ZaServer.prototype.createVolume =
function (volume) {
	if(!volume)
		return false;
	var soapDoc = AjxSoapDoc.create("CreateVolumeRequest", ZaZimbraAdmin.URN, null);		
	var elVolume = soapDoc.set("volume", null);
	elVolume.setAttribute("type", volume[ZaServer.A_VolumeType]);
	elVolume.setAttribute("name", volume[ZaServer.A_VolumeName]);	
	elVolume.setAttribute("rootpath", volume[ZaServer.A_VolumeRootPath]);		
	elVolume.setAttribute("compressBlobs", volume[ZaServer.A_VolumeCompressBlobs]);		
	elVolume.setAttribute("compressionThreshold", volume[ZaServer.A_VolumeCompressionThreshold]);			
	var params = {
		soapDoc: soapDoc,
		targetServer: this.id,
		asyncMode: false
	}
	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_CREATE_VOL
	}
	var response = ZaRequestMgr.invoke(params, reqMgrParams) ;
	if(response.Body && response.Body.CreateVolumeResponse && response.Body.CreateVolumeResponse.volume) {
		return response.Body.CreateVolumeResponse.volume[0][ZaServer.A_VolumeId];
	}
	
}

ZaServer.prototype.modifyVolume =
function (volume) {
	if(!volume)
		return false;
	var soapDoc = AjxSoapDoc.create("ModifyVolumeRequest", ZaZimbraAdmin.URN, null);		
	soapDoc.getMethod().setAttribute(ZaServer.A_VolumeId, volume[ZaServer.A_VolumeId]);	
	var elVolume = soapDoc.set("volume", null);
	elVolume.setAttribute("type", volume[ZaServer.A_VolumeType]);
	elVolume.setAttribute("name", volume[ZaServer.A_VolumeName]);	
	elVolume.setAttribute("rootpath", volume[ZaServer.A_VolumeRootPath]);		
	elVolume.setAttribute("compressBlobs", volume[ZaServer.A_VolumeCompressBlobs]);		
	elVolume.setAttribute("compressionThreshold", volume[ZaServer.A_VolumeCompressionThreshold]);			
	var params = {
		soapDoc: soapDoc,
		targetServer: this.id,
		asyncMode: false
	}
	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_MODIFY_VOL
	}
	ZaRequestMgr.invoke(params, reqMgrParams) ;
}

ZaServer.prototype.setCurrentVolume = function (id, type) {
	if(!id || !type)
		return false;	
	var soapDoc = AjxSoapDoc.create("SetCurrentVolumeRequest", ZaZimbraAdmin.URN, null);		
	soapDoc.getMethod().setAttribute(ZaServer.A_VolumeType, type);		
	soapDoc.getMethod().setAttribute(ZaServer.A_VolumeId, id);	
	var params = {
		soapDoc: soapDoc,
		targetServer: this.id,
		asyncMode: false
	}
	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_SET_VOL
	}
	ZaRequestMgr.invoke(params, reqMgrParams) ;
}

ZaServer.initMethod = function () {
	this.attrs = new Object();
	this.id = "";
	this.name="";
}
ZaItem.initMethods["ZaServer"].push(ZaServer.initMethod);

ZaServer.flushCache = function (params) {
	var soapDoc = AjxSoapDoc.create("FlushCacheRequest", ZaZimbraAdmin.URN, null);
	var elCache = soapDoc.set("cache", null);
	
	var type = [];
	if(params.flushSkin)
		type.push("skin")
	if(params.flushLocale)	
		type.push("locale");
	if(params.flushZimlet)	
		type.push("zimlet");
		
	elCache.setAttribute("type", type.join(","));		
	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : params.busyMsg ? params.busyMsg : ZaMsg.BUSY_FLUSH_CACHE,
		busyId:params.busyId
	}
	
	var reqParams = {
		soapDoc: soapDoc,
		targetServer: params.serverId ? params.serverId : params.serverList[params.ix].attrs[ZaItem.A_zimbraId],
		asyncMode: params.callback ? true : false,
		callback: params.callback ? params.callback : null
	}
	ZaRequestMgr.invoke(reqParams, reqMgrParams) ;
}
}
if (AjxPackage.define("zimbraAdmin.zimlets.model.ZaZimlet")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
* @class ZaZimlet
* @contructor ZaZimlet
* @param ZaApp app
* this class is a model for managing Zimlets
* @author Greg Solovyev
**/
ZaZimlet = function() {
	ZaItem.call(this, "ZaZimlet");
	this.label = "";
	this.type = ZaItem.ZIMLET;
	this[ZaModel.currentStep] = 1;
}
ZaZimlet.prototype = new ZaItem;
ZaZimlet.prototype.constructor = ZaZimlet;
ZaItem.loadMethods["ZaZimlet"] = new Array();
ZaItem.initMethods["ZaZimlet"] = new Array();
ZaZimlet.NULL_ZIMLET="com_zimbra_noop";
ZaZimlet.A_name = "name";
ZaZimlet.A_zimbraZimletEnabled = "zimbraZimletEnabled";
ZaZimlet.A_zimbraZimletPriority = "zimbraZimletPriority";
ZaZimlet.A_zimbraZimletIsExtension = "zimbraZimletIsExtension";
ZaZimlet.A_zimbraZimletKeyword = "zimbraZimletKeyword";
ZaZimlet.A_zimbraZimletVersion = "zimbraZimletVersion";
ZaZimlet.A_zimbraZimletDescription = "zimbraZimletDescription";
ZaZimlet.A_zimbraZimletIndexingEnabled = "zimbraZimletIndexingEnabled";
ZaZimlet.A_zimbraZimletStoreMatched = "zimbraZimletStoreMatched";
ZaZimlet.A_zimbraZimletHandlerClass = "zimbraZimletHandlerClass";
ZaZimlet.A_zimbraZimletHandlerConfig = "zimbraZimletHandlerConfig";
ZaZimlet.A_zimbraZimletContentObject = "zimbraZimletContentObject";
ZaZimlet.A_zimbraZimletPanelItem = "zimbraZimletPanelItem";
ZaZimlet.A_zimbraCreateTimestamp = "zimbraCreateTimestamp";
ZaZimlet.A_zimbraZimletScript = "zimbraZimletScript";
ZaZimlet.A_zimbraZimletServerIndexRegex = "zimbraZimletServerIndexRegex";
ZaZimlet.A_zimbraAdminExtDisableUIUndeploy = "zimbraAdminExtDisableUIUndeploy";
ZaZimlet.A_attachmentId = "attId";
ZaZimlet.A_uploadStatus = "uploadStatus";
ZaZimlet.A_deployStatus = "deployStatus";
ZaZimlet.A_uploadStatusMsg = "uploadStatusMsg";
ZaZimlet.A_deployStatusMsg = "deployStatusMsg";
ZaZimlet.A_statusMsg = "statusMsg";
ZaZimlet.EXCLUDE_MAIL = "mail";
ZaZimlet.EXCLUDE_EXTENSIONS = "extension";
ZaZimlet.EXCLUDE_NONE = "none";	
ZaZimlet.STATUS_FAILED = "failed";
ZaZimlet.STATUS_SUCCEEDED = "succeeded";
ZaZimlet.STATUS_PENDING = "pending";
ZaZimlet.ACTION_DEPLOY_ALL = "deployAll";
ZaZimlet.ACTION_DEPLOY_LOCAL = "deployLocal";
ZaZimlet.ACTION_DEPLOY_STATUS = "status";
ZaZimlet.A_progress = "progress";
ZaZimlet.A_flushCache = "flushCache";
ZaZimlet.prototype.toString = function() {
	return this.name;
}

ZaZimlet.getAll =
function(exclude, callback) {
	var exc = exclude ? exclude : "none";
	var soapDoc = AjxSoapDoc.create("GetAllZimletsRequest", ZaZimbraAdmin.URN, null);	
	soapDoc.getMethod().setAttribute("exclude", exc);	
	//var command = new ZmCsfeCommand();
	var params = {
        soapDoc: soapDoc,
        asyncMode: Boolean(callback),
        callback: callback && new AjxCallback(ZaZimlet._handleGetAllResponse, [callback])
    };
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_GET_ZIMLET
	}
	var resp = ZaRequestMgr.invoke(params, reqMgrParams);
    return resp && ZaZimlet._handleGetAllResponse(null, resp);
}

ZaZimlet._handleGetAllResponse = function(callback, resp) {
    var list = new ZaItemList(ZaZimlet);
    resp = resp instanceof ZmCsfeResult ? resp.getResponse() : resp;
    list.loadFromJS(resp.Body.GetAllZimletsResponse);
    
    // cache all the zimlets information, so we can them in other pages
    // format: zimlet-name --> ZaZimlet object
    if (ZaZimlet.zimlets == null) {
    	ZaZimlet.zimlets = new Object();
    }
    var newZimlets = new Object();
    var zimlets = list.getVector()._array;
    for(var i in zimlets) {
    	var z = zimlets[i];
    	newZimlets[z[ZaZimlet.A_name]] = z;
    }
    
    // compare and decide which zimlets to include
    var incList;

	incList = new ZaItemList(ZaZimlet);
	for (var zimletName in newZimlets) {
		var oz = ZaZimlet.zimlets[zimletName];
		var nz = newZimlets[zimletName];
		
		if(!oz) {
			// put the new zimlet into cache
			ZaZimlet.zimlets[zimletName] = nz;
			incList.add(nz);
		} else {
			if (nz.attrs[ZaZimlet.A_zimbraCreateTimestamp] !=
    			oz.attrs[ZaZimlet.A_zimbraCreateTimestamp]) {
    			// the zimlet has been updated
				ZaZimlet.zimlets[zimletName] = nz;
				incList.add(nz);
    		}
		}
	}
    
    if (callback) {
    	var args = callback.args;
        args = args ? (args instanceof Array ? args : [args]) : [];
   		callback = new AjxCallback(callback.obj, callback.func, args.concat(list));
    	if (incList.size() == 0) {
    		callback.run();
    	} else {
    		  // callback need to know the whole list, 
    		  // but _handleGetAllResouce need only know what are to be included
    	    ZaZimlet._handleGetAllResources(incList, callback);
    	}     
    } else {
    	if (incList.size() > 0) {
    		ZaZimlet._handleGetAllResources(incList);
    	}
    }
    return list;
};

ZaZimlet._handleGetAllResources = function(list, callback) {
    var includes = [];
    for (var id in list.getIdHash()) {
        var zimlet = list.getItemById(id);
        // NOTE: Setting an ID on the includes will replace the old SCRIPT
        // NOTE: tags with the new ones when the resources are requested
        // NOTE: again.
        includes.push( { src:["/res/",zimlet.name,".js?v=",appVers,ZaZimbraAdmin.LOCALE_QS].join(""),id:"res_"+zimlet.name } );
    }
    var baseurl = appContextPath;
    var proxy = null;
    AjxInclude(includes, baseurl, callback, proxy);
};

ZaZimlet.prototype.isEnabled =
function () {
	var status = this.attrs[ZaZimlet.A_zimbraZimletEnabled];
	if (status != null && status == "TRUE") {
		return true;
	}else {
		return false ;
	}
}

ZaZimlet.__RE_MSG = /\$\{msg\.(.*?)\}/g;
ZaZimlet.prototype.getDescription = 
function () {
	var des = null;
	var name = null;
	if(this.attrs && this.attrs[ZaZimlet.A_zimbraZimletDescription]){
		name =this[ZaZimlet.A_name];
		des = this.attrs[ZaZimlet.A_zimbraZimletDescription];
		des = (des ||"").replace(ZaZimlet.__RE_MSG, function($0, $1) {
        		var res = window[name];
        		return (res && res[$1]) || $0;
    			});	
	}
	return des;
}

/**
 * Searches for display name for the zimlet, and if not present, just returns an empty string
 * Needed to provide information as to which zimlets are missing the Display Names
 *
 * @return {*|string}
 *
 */
ZaZimlet.prototype.getDisplayName = function () {
    var name = this[ZaZimlet.A_name];
    var obj = window[name];
    var displayName = (obj && (obj["label"] || obj["zimletLabel"])) || "";
    return displayName;
}

ZaZimlet.prototype.getLabel = 
function (){
	var label = null;
	var name = this[ZaZimlet.A_name];

	if(this.label){
		label = this.label;
                label = (label ||"").replace(ZaZimlet.__RE_MSG, function($0, $1) {
                        var res = window[name];
                        return (res && res[$1]) || $0;
                        });

	}
	
	if(!label){
		var res = window[name];
		label = (res && (res["label"] || res["zimletLabel"])) || name;
	}
	return label;
}

ZaZimlet.prototype.enable = function (enabled, callback) {
	var soapDoc = AjxSoapDoc.create("ModifyZimletRequest", ZaZimbraAdmin.URN, null);
	var zimletEl = soapDoc.set("zimlet", "");
	zimletEl.setAttribute("name", this.name);
	var statusEl = soapDoc.set("status", "",zimletEl);	
	if(enabled)	 {
		statusEl.setAttribute("value","enabled");
		this.attrs[ZaZimlet.A_zimbraZimletEnabled] = "TRUE";
	} else {
		statusEl.setAttribute("value","disabled");
		this.attrs[ZaZimlet.A_zimbraZimletEnabled] = "FALSE";		
	}
	//var asynCommand = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;	
	if(callback) {
		params.asyncMode = true;
		params.callback = callback;
	}
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_MODIFY_ZIMLET
	}
	ZaRequestMgr.invoke(params, reqMgrParams);	
}

/**
* @param mods - map of modified attributes
* modifies object's information in the database
**/
ZaZimlet.prototype.modify =
function(mods) {
	/*var soapDoc = AjxSoapDoc.create("ModifyZimletRequest", ZaZimbraAdmin.URN, null);
	soapDoc.set("id", this.id);
	for (var aname in mods) {
		if (mods[aname] instanceof Array) {
			var array = mods[aname];
			if (array.length > 0) {
				for (var i = 0; i < array.length; i++) {
					var attr = soapDoc.set("a", array[i]);
					attr.setAttribute("n", aname);
				}
			}
			else {
				var attr = soapDoc.set("a");
				attr.setAttribute("n", aname);
			}
		}
		else {
			var attr = soapDoc.set("a", mods[aname]);
			attr.setAttribute("n", aname);
		}
	}
	var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;	
	var resp = command.invoke(params).Body.ModifyZimletResponse;*/		
}

/**
* Returns HTML for a tool tip for this domain.
*/
ZaZimlet.prototype.getToolTip =
function() {
	// update/null if modified
	if (!this._toolTip) {
		var html = new Array(20);
		var idx = 0;
		html[idx++] = "<table cellpadding='0' cellspacing='0' border='0'>";
		html[idx++] = "<tr valign='center'><td colspan='2' align='left'>";
		html[idx++] = "<div style='border-bottom: 1px solid black; white-space:nowrap; overflow:hidden;width:350'>";
		html[idx++] = "<table cellpadding='0' cellspacing='0' border='0' style='width:100%;'>";
		html[idx++] = "<tr valign='center'>";
		html[idx++] = "<td><b>" + AjxStringUtil.htmlEncode(this.name) + "</b></td>";
		html[idx++] = "<td align='right'>";
		html[idx++] = AjxImg.getImageHtml("ZaZimlet");		
		html[idx++] = "</td>";
		html[idx++] = "</table></div></td></tr>";
		html[idx++] = "<tr></tr>";
		idx = this._addAttrRow(ZaItem.A_description, html, idx);		
		idx = this._addAttrRow(ZaItem.A_zimbraId, html, idx);
		html[idx++] = "</table>";
		this._toolTip = html.join("");
	}
	return this._toolTip;
}

ZaZimlet.prototype.remove = 
function() {
	var soapDoc = AjxSoapDoc.create("UndeployZimletRequest", ZaZimbraAdmin.URN, null);
	soapDoc.getMethod().setAttribute("name", this.name);	
	//soapDoc.set("id", this.id);
	//var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_UNDEPLOY_ZIMLET
	}
	var resp = ZaRequestMgr.invoke(params, reqMgrParams);	
}

ZaZimlet.prototype.refresh = 
function() {
	this.load();	
}
/**
 * @param attrs {action:deployall|deploylocal|status,attId:"",flushCache:true|false}
 */
ZaZimlet.deploy = function (params,callback) {
	var action = params.action ? params.action : ZaZimlet.ACTION_DEPLOY_ALL;
	var attId = params.attId ? params.attId : null;
	var flushCache = params.flushCache ? params.flushCache : "0";
	var soapDoc = AjxSoapDoc.create("DeployZimletRequest", ZaZimbraAdmin.URN, null);
	soapDoc.getMethod().setAttribute("action", action);	
	
	if(action != ZaZimlet.ACTION_DEPLOY_STATUS)	
		soapDoc.getMethod().setAttribute("flush", flushCache);
	
	var contentEl = soapDoc.set("content", "");
	if(attId) {
		contentEl.setAttribute("aid", attId);
	}
	//var asynCommand = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;	
	if(callback) {
		params.asyncMode = true;
		params.callback = callback;
	}
	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_DEPLOY_ZIMLET
	}
	
	ZaRequestMgr.invoke(params, reqMgrParams);	
}

ZaZimlet.loadMethod = 
function(by, val) {
	var _val = val ? val : this.name ;
	var soapDoc = AjxSoapDoc.create("GetZimletRequest", ZaZimbraAdmin.URN, null);
	var elZimlet = soapDoc.set("zimlet", "");
	elZimlet.setAttribute("name", _val);
	if(!this.getAttrs.all && !AjxUtil.isEmpty(this.attrsToGet)) {
		soapDoc.setMethodAttribute("attrs", this.attrsToGet.join(","));
	}	
	var params = {};
	params.soapDoc = soapDoc;	
	params.asyncMode = false;
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_GET_ZIMLET
	}
	resp = ZaRequestMgr.invoke(params, reqMgrParams);
	this.initFromJS(resp.Body.GetZimletResponse.zimlet[0]);
}
ZaItem.loadMethods["ZaZimlet"].push(ZaZimlet.loadMethod);

ZaZimlet.myXModel = { 
	items:[
        { id:ZaZimlet.A_name, ref:ZaZimlet.A_name, type: _STRING_ },
        {id:ZaItem.A_zimbraId, type:_STRING_, ref:"attrs/" + ZaItem.A_zimbraId},
        {id:ZaItem.A_zimbraCreateTimestamp, ref:"attrs/" + ZaItem.A_zimbraCreateTimestamp},
        { id:ZaZimlet.A_flushCache,ref:ZaZimlet.A_flushCache,type: _ENUM_, choices:ZaModel.BOOLEAN_CHOICES2},
        { id:ZaZimlet.A_zimbraZimletDescription, ref:"attrs/" + ZaZimlet.A_zimbraZimletDescription, type: _STRING_ },
        { id:ZaZimlet.A_zimbraZimletEnabled, ref:"attrs/" + ZaZimlet.A_zimbraZimletEnabled, type: _ENUM_,  choices:ZaModel.BOOLEAN_CHOICES} 
    ]
}
}
if (AjxPackage.define("zimbraAdmin.rp.model.ZaRetentionPolicy")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
 * @author Dongwei Feng
 **/
ZaRetentionPolicy =
function(name, id, lifetime, type) {
    this.id = id;
    this.name = name;

    if (!lifetime) {
        this.lifetime = "1d";
    } else {
        var number = lifetime.substr(0, lifetime.length - 1);
        if (number % ZaRetentionPolicy.YEAR == 0) {
            this.lifetime = (number / ZaRetentionPolicy.YEAR) + "y";
        } else if (number % ZaRetentionPolicy.MONTH == 0) {
            this.lifetime = (number / ZaRetentionPolicy.MONTH) + "m";
        } else if (number % ZaRetentionPolicy.WEEK == 0) {
            this.lifetime = (number / ZaRetentionPolicy.WEEK) + "w";
        } else {
            this.lifetime = lifetime;
        }
    }
    this.type = type ? type: ZaRetentionPolicy.TYPE_KEEP;
}

ZaRetentionPolicy.prototype = new ZaItem;
ZaRetentionPolicy.prototype.constructor = ZaRetentionPolicy;

ZaRetentionPolicy.POLICY_CUSTOM = "custom";

ZaRetentionPolicy.prototype.toString =
function() {
    return this.name;
}

ZaRetentionPolicy.prototype.toDays = function () {
    var number = this.lifetime.substr(0, this.lifetime.length - 1);
    var unit = this.lifetime.substr(this.lifetime.length - 1, 1);
    if (unit == "y") {
        return number * ZaRetentionPolicy.YEAR + "d";
    }
    if (unit == "m") {
        return number * ZaRetentionPolicy.MONTH + "d";
    }
    if (unit == "w") {
        return number * ZaRetentionPolicy.WEEK + "d";
    }
    return this.lifetime;
}

ZaRetentionPolicy.YEAR = 366;
ZaRetentionPolicy.MONTH = 31;
ZaRetentionPolicy.WEEK = 7;

ZaRetentionPolicy.TYPE_KEEP = "keep";
ZaRetentionPolicy.TYPE_PURGE = "purge";

ZaRetentionPolicy.A2_name = "name";
ZaRetentionPolicy.A2_id = "id";
ZaRetentionPolicy.A2_lifetime = "lifetime";
ZaRetentionPolicy.A2_type = "type";

ZaRetentionPolicy.myXModel = {
    items:[
        {id:ZaRetentionPolicy.A2_id, type:_STRING_, ref:ZaRetentionPolicy.A2_id},
        {id:ZaRetentionPolicy.A2_name, type:_STRING_, ref:ZaRetentionPolicy.A2_name, required:true},
        {id:ZaRetentionPolicy.A2_lifetime, type:_MLIFETIME_, ref:ZaRetentionPolicy.A2_lifetime, minInclusive: 1},
        {id:ZaRetentionPolicy.A2_type, type:_STRING_, ref:ZaRetentionPolicy.A2_type}
    ]
}

ZaRetentionPolicy.getRetentionPolicies =
function(by, val) {
    var soapDoc = AjxSoapDoc.create("GetSystemRetentionPolicyRequest", "urn:zimbraAdmin", null);

    if (by && val) {
        var el = soapDoc.set("cos", val);
        el.setAttribute("by", by);
    }

    var params = new Object();
    params.soapDoc = soapDoc;
    try{
        var reqMgrParams = {
            controller : ZaApp.getInstance().getCurrentController(),
            busyMsg : ZaMsg.BUSY_GET_RETENTION_POLICIES
        };

        var result = {};
        result[ZaRetentionPolicy.TYPE_KEEP] = [];
        result[ZaRetentionPolicy.TYPE_PURGE] = [];

        var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.GetSystemRetentionPolicyResponse;
        if(resp.retentionPolicy && resp.retentionPolicy.length == 1) {
            var policies = resp.retentionPolicy[0];

            var keeps = policies.keep[0].policy;
            var purges = policies.purge[0].policy;
            if (keeps) {
                for (var i = 0; i < keeps.length; i++) {
                    if (keeps[i].id) {
                        var pk = new ZaRetentionPolicy(keeps[i].name, keeps[i].id, keeps[i].lifetime, ZaRetentionPolicy.TYPE_KEEP);
                        result[ZaRetentionPolicy.TYPE_KEEP].push(pk);
                    }
                }
            }

            if (purges) {
                for (var j = 0; j < purges.length; j++) {
                    if (purges[j].id) {
                        var pp = new ZaRetentionPolicy(purges[j].name, purges[j].id, purges[j].lifetime, ZaRetentionPolicy.TYPE_PURGE);
                        result[ZaRetentionPolicy.TYPE_PURGE].push(pp);
                    }
                }
            }

        }
        return result;

    } catch(ex) {
        throw ex;
        return null;
    }
}

ZaRetentionPolicy.prototype.createPolicy =
function(by, val) {
    var soapDoc = AjxSoapDoc.create("CreateSystemRetentionPolicyRequest","urn:zimbraAdmin", null);
    if (by && val) {
        var el = soapDoc.set("cos", val);
        el.setAttribute("by", by);
    }

    if (this[ZaRetentionPolicy.A2_type] !== ZaRetentionPolicy.TYPE_KEEP &&
        this[ZaRetentionPolicy.A2_type] !== ZaRetentionPolicy.TYPE_PURGE){
         return;
    }
    var wrapper = soapDoc.set(this[ZaRetentionPolicy.A2_type], null);
    var policy = soapDoc.set("policy", null, wrapper, "urn:zimbraMail");
    policy.setAttribute("name", this[ZaRetentionPolicy.A2_name]);
    policy.setAttribute("lifetime", this.toDays());

    var params = new Object();
    params.soapDoc = soapDoc;

    try{
        var reqMgrParams = {
            controller : ZaApp.getInstance().getCurrentController(),
            busyMsg : ZaMsg.BUSY_CREATE_RETENTION_POLICIES
        };

        var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.CreateSystemRetentionPolicyResponse;
        if( resp.policy && resp.policy[0]) {
            this.id = resp.policy[0].id;
        }
        return this;
    } catch(ex) {
        throw ex;
        return null;
    }
}

ZaRetentionPolicy.checkLifeTime = function (lifetime) {
    if (!lifetime || lifetime.length < 1) {
        return false;
    }
    var digit = lifetime.substr(0, lifetime.length - 1);
    if (!digit) {
        return false;
    }

    return AjxUtil.isPositiveInt(digit);
}

ZaRetentionPolicy.checkValues = function (tmpObj, list) {
    if (!tmpObj) {
        return false;
    }

    var name = AjxStringUtil.trim(tmpObj[ZaRetentionPolicy.A2_name]);
    if (AjxUtil.isEmpty(name)) {
        ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_EmptyRPName) ;
        return false;
    }

    if (ZaRetentionPolicy.POLICY_CUSTOM == name.toLowerCase()) {
        ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_RPNameCustomDisallowed, [name])) ;
        return false;
    }

    if (!ZaRetentionPolicy.checkLifeTime(tmpObj[ZaRetentionPolicy.A2_lifetime])) {
        ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_InvalidRPLifetime);
        return false;
    }

    if (list && AjxUtil.isArray(list)) {
        for (var i = 0; i < list.length; i++) {
            if (list[i][ZaRetentionPolicy.A2_name] == tmpObj[ZaRetentionPolicy.A2_name] &&
                list[i] != tmpObj) {
                ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_RPExists, [tmpObj[ZaRetentionPolicy.A2_name]])) ;
                return false;
            }
        }
    }
    return true;
}

ZaRetentionPolicy.prototype.modifyPolicy =
function(by, val) {
    var soapDoc = AjxSoapDoc.create("ModifySystemRetentionPolicyRequest", "urn:zimbraAdmin", null);
    if (by && val) {
        var el = soapDoc.set("cos", val);
        el.setAttribute("by", by);
    }

    var policy = soapDoc.set("policy", null, null, "urn:zimbraMail");
    policy.setAttribute("name", this[ZaRetentionPolicy.A2_name]);
    policy.setAttribute("id", this[ZaRetentionPolicy.A2_id]);
    policy.setAttribute("lifetime", this.toDays());
    policy.setAttribute("type", "system");

    var params = new Object();
    params.soapDoc = soapDoc;
    params.skipAuthCheck = false;

    try{
        var reqMgrParams = {
            controller : ZaApp.getInstance().getCurrentController(),
            busyMsg : ZaMsg.BUSY_MODIFY_RETENTION_POLICIES
        };

        ZaRequestMgr.invoke(params, reqMgrParams).Body.ModifySystemRetentionPolicyResponse;

    } catch(ex) {
        throw ex;
        return null;
    }
}


ZaRetentionPolicy.prototype.deletePolicy =
function(by, val) {
    var soapDoc = AjxSoapDoc.create("DeleteSystemRetentionPolicyRequest", "urn:zimbraAdmin", null);
    if (by && val) {
        var el = soapDoc.set("cos", val);
        el.setAttribute("by", by);
    }

    var policy = soapDoc.set("policy", null, null, "urn:zimbraMail");
    policy.setAttribute("id", this.id);

    var params = new Object();
    params.soapDoc = soapDoc;
    params.skipAuthCheck = false;

    try{
        var reqMgrParams = {
            controller : ZaApp.getInstance().getCurrentController(),
            busyMsg : ZaMsg.BUSY_DELETE_RETENTION_POLICIES
        };

        var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.DeleteSystemRetentionPolicyResponse;

    } catch(ex) {
        throw ex;
        return null;
    }
}
}
if (AjxPackage.define("zimbraAdmin.globalconfig.model.ZaGlobalConfig")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

ZaGlobalConfig = function() {
	ZaItem.call(this,"ZaGlobalConfig");
	this.attrs = new Object();
	this.type = ZaItem.GLOBAL_CONFIG;
//	this.attrsInternal = new Object();	
	this.load();
}

ZaGlobalConfig.prototype = new ZaItem;
ZaGlobalConfig.prototype.constructor = ZaGlobalConfig;
ZaItem.loadMethods["ZaGlobalConfig"] = new Array();
ZaItem.modifyMethods["ZaGlobalConfig"] = new Array();
ZaItem.modifyMethodsExt["ZaGlobalConfig"] = new Array();

ZaGlobalConfig.MTA_RESTRICTIONS = [
	"reject_invalid_helo_hostname", "reject_non_fqdn_helo_hostname", "reject_non_fqdn_sender",
	"reject_unknown_client_hostname", "reject_unknown_reverse_client_hostname", "reject_unknown_sender_domain",
	"reject_unknown_helo_hostname"
];

//general
ZaGlobalConfig.A_zimbraLastLogonTimestampFrequency = "zimbraLastLogonTimestampFrequency";
ZaGlobalConfig.A_zimbraDefaultDomainName = "zimbraDefaultDomainName";
ZaGlobalConfig.A_zimbraScheduledTaskNumThreads = "zimbraScheduledTaskNumThreads" ;
ZaGlobalConfig.A_zimbraMailPurgeSleepInterval = "zimbraMailPurgeSleepInterval" ;
		
// attachements
ZaGlobalConfig.A_zimbraAttachmentsBlocked = "zimbraAttachmentsBlocked";
ZaGlobalConfig.A_zimbraMtaBlockedExtensionWarnRecipient = "zimbraMtaBlockedExtensionWarnRecipient";
ZaGlobalConfig.A_zimbraMtaBlockedExtension = "zimbraMtaBlockedExtension";
ZaGlobalConfig.A_zimbraMtaCommonBlockedExtension = "zimbraMtaCommonBlockedExtension";

// MTA
ZaGlobalConfig.A_zimbraMtaSaslAuthEnable = "zimbraMtaSaslAuthEnable";
ZaGlobalConfig.A_zimbraMtaTlsAuthOnly = "zimbraMtaTlsAuthOnly";
ZaGlobalConfig.A_zimbraMtaSmtpDnsSupportLevel  = "zimbraMtaSmtpDnsSupportLevel";
ZaGlobalConfig.A_zimbraMtaMaxMessageSize = "zimbraMtaMaxMessageSize";
ZaGlobalConfig.A_zimbraMtaRelayHost = "zimbraMtaRelayHost";
ZaGlobalConfig.A_zimbraMtaFallbackRelayHost = "zimbraMtaFallbackRelayHost";
ZaGlobalConfig.A_zimbraMtaMyNetworks = "zimbraMtaMyNetworks";
//ZaGlobalConfig.A_zimbraMtaRelayHostInternal = "__zimbraMtaRelayHost";
//ZaGlobalConfig.A_zimbraMtaRelayPortInternal = "__zimbraMtaRelayPort";
ZaGlobalConfig.A_zimbraComponentAvailable = "zimbraComponentAvailable";
ZaGlobalConfig.A_zimbraSmtpSendAddOriginatingIP = "zimbraSmtpSendAddOriginatingIP";
ZaGlobalConfig.A_zimbraDNSCheckHostname = "zimbraDNSCheckHostname";
ZaGlobalConfig.A_zimbraBasicAuthRealm = "zimbraBasicAuthRealm";
ZaGlobalConfig.A_zimbraAdminConsoleDNSCheckEnabled = "zimbraAdminConsoleDNSCheckEnabled";
ZaGlobalConfig.A_zimbraAdminConsoleCatchAllAddressEnabled = "zimbraAdminConsoleCatchAllAddressEnabled";
ZaGlobalConfig.A_zimbraAdminConsoleSkinEnabled = "zimbraAdminConsoleSkinEnabled";
ZaGlobalConfig.A_zimbraAdminConsoleLDAPAuthEnabled = "zimbraAdminConsoleLDAPAuthEnabled" ;

ZaGlobalConfig.A_zimbraMilterBindPort = "zimbraMilterBindPort";
ZaGlobalConfig.A_zimbraMilterServerEnabled = "zimbraMilterServerEnabled";


ZaGlobalConfig.A_zimbraMtaRestriction = "zimbraMtaRestriction";

// --policy service checks
ZaGlobalConfig.A_zimbraMtaPolicyService = "_"+ZaGlobalConfig.A_zimbraMtaRestriction+"_policy_service";
// --protocol checks
ZaGlobalConfig.A_zimbraMtaRejectInvalidHeloHostname = "_"+ZaGlobalConfig.A_zimbraMtaRestriction+"_reject_invalid_helo_hostname";
ZaGlobalConfig.A_zimbraMtaRejectNonFqdnHeloHostname = "_"+ZaGlobalConfig.A_zimbraMtaRestriction+"_reject_non_fqdn_helo_hostname";
ZaGlobalConfig.A_zimbraMtaRejectNonFqdnSender = "_"+ZaGlobalConfig.A_zimbraMtaRestriction+"_reject_non_fqdn_sender";
// -- dns checks
ZaGlobalConfig.A_zimbraMtaRejectUnknownClientHostname = "_"+ZaGlobalConfig.A_zimbraMtaRestriction+"_reject_unknown_client_hostname";
ZaGlobalConfig.A_zimbraMtaRejectUnknownReverseClientHostname = "_"+ZaGlobalConfig.A_zimbraMtaRestriction+"_reject_unknown_reverse_client_hostname";
ZaGlobalConfig.A_zimbraMtaRejectUnknownSenderDomain = "_"+ZaGlobalConfig.A_zimbraMtaRestriction+"_reject_unknown_sender_domain";
ZaGlobalConfig.A_zimbraMtaRejectUnknownHeloHostname = "_"+ZaGlobalConfig.A_zimbraMtaRestriction+"_reject_unknown_helo_hostname";
//rbl check
ZaGlobalConfig.A_zimbraMtaRejectRblClient = "_"+ZaGlobalConfig.A_zimbraMtaRestriction+"_reject_rbl_client";
ZaGlobalConfig.A_zimbraMtaRejectRHSblClient = "_"+ZaGlobalConfig.A_zimbraMtaRestriction+"_reject_rhsbl_client";
ZaGlobalConfig.A_zimbraMtaRejectRHSblReverseClient = "_"+ZaGlobalConfig.A_zimbraMtaRestriction+"_reject_rhsbl_reverse_client";
ZaGlobalConfig.A_zimbraMtaRejectRHSblSender = "_"+ZaGlobalConfig.A_zimbraMtaRestriction+"_reject_rhsbl_sender";

//Domain
ZaGlobalConfig.A_zimbraGalLdapFilterDef = "zimbraGalLdapFilterDef";
ZaGlobalConfig.A_zimbraGalMaxResults = "zimbraGalMaxResults";
ZaGlobalConfig.A_zimbraNotebookAccount = "zimbraNotebookAccount";
//Server
ZaGlobalConfig.A_zimbraLmtpNumThreads = "zimbraLmtpNumThreads";
ZaGlobalConfig.A_zimbraLmtpBindPort = "zimbraLmtpBindPort";
ZaGlobalConfig.A_zimbraPop3NumThreads = "zimbraPop3NumThreads";
ZaGlobalConfig.A_zimbraPop3BindPort = "zimbraPop3BindPort";
ZaGlobalConfig.A_zimbraRedologEnabled = "zimbraRedologEnabled";
ZaGlobalConfig.A_zimbraRedologLogPath = "zimbraRedologLogPath";
ZaGlobalConfig.A_zimbraRedologArchiveDir = "zimbraRedologArchiveDir";
ZaGlobalConfig.A_zimbraRedologBacklogDir = "zimbraRedologBacklogDir";
ZaGlobalConfig.A_zimbraRedologRolloverFileSizeKB = "zimbraRedologRolloverFileSizeKB";
ZaGlobalConfig.A_zimbraRedologFsyncIntervalMS = "zimbraRedologFsyncIntervalMS";
ZaGlobalConfig.A_zimbraFileUploadMaxSize = "zimbraFileUploadMaxSize"

// smtp
ZaGlobalConfig.A_zimbraSmtpHostname = "zimbraSmtpHostname";
ZaGlobalConfig.A_zimbraSmtpPort = "zimbraSmtpPort";
ZaGlobalConfig.A_zimbraSmtpTimeout = "zimbraSmtpTimeout";
// pop
ZaGlobalConfig.A_zimbraPop3BindPort="zimbraPop3BindPort";
ZaGlobalConfig.A_zimbraPop3ServerEnabled = "zimbraPop3ServerEnabled";
ZaGlobalConfig.A_zimbraPop3SSLBindPort = "zimbraPop3SSLBindPort";
ZaGlobalConfig.A_zimbraPop3SSLServerEnabled = "zimbraPop3SSLServerEnabled";
ZaGlobalConfig.A_zimbraPop3CleartextLoginEnabled = "zimbraPop3CleartextLoginEnabled";
// imap
ZaGlobalConfig.A_zimbraImapBindPort = "zimbraImapBindPort";
ZaGlobalConfig.A_zimbraImapServerEnabled = "zimbraImapServerEnabled";
ZaGlobalConfig.A_zimbraImapNumThreads = "zimbraImapNumThreads"
ZaGlobalConfig.A_zimbraImapSSLBindPort = "zimbraImapSSLBindPort";
ZaGlobalConfig.A_zimbraImapSSLServerEnabled = "zimbraImapSSLServerEnabled";
ZaGlobalConfig.A_zimbraImapCleartextLoginEnabled = "zimbraImapCleartextLoginEnabled";
// anti-spam
ZaGlobalConfig.A_zimbraSpamKillPercent = "zimbraSpamKillPercent";
ZaGlobalConfig.A_zimbraSpamTagPercent = "zimbraSpamTagPercent";
ZaGlobalConfig.A_zimbraSpamSubjectTag = "zimbraSpamSubjectTag";
ZaGlobalConfig.A_zimbraSpamAccount = "zimbraSpamIsSpamAccount";
ZaGlobalConfig.A_zimbraHamAccount = "zimbraSpamIsNotSpamAccount";
//wiki account
ZaGlobalConfig.A_zimbraWikiAccount = "zimbraNotebookAccount";
//Amavis account
ZaGlobalConfig.A_zimbraAmavisQAccount = "zimbraAmavisQuarantineAccount";
// anti-virus
ZaGlobalConfig.A_zimbraVirusWarnRecipient = "zimbraVirusWarnRecipient";
ZaGlobalConfig.A_zimbraVirusWarnAdmin = "zimbraVirusWarnAdmin";
ZaGlobalConfig.A_zimbraVirusDefinitionsUpdateFrequency = "zimbraVirusDefinitionsUpdateFrequency";
ZaGlobalConfig.A_zimbraVirusBlockEncryptedArchive = "zimbraVirusBlockEncryptedArchive";
//immutable attrs
ZaGlobalConfig.A_zimbraAccountClientAttr = "zimbraAccountClientAttr";
ZaGlobalConfig.A_zimbraServerInheritedAttr = "zimbraServerInheritedAttr";
ZaGlobalConfig.A_zimbraDomainInheritedAttr = "zimbraDomainInheritedAttr";
ZaGlobalConfig.A_zimbraCOSInheritedAttr = "zimbraCOSInheritedAttr";
ZaGlobalConfig.A_zimbraGalLdapAttrMap = "zimbraGalLdapAttrMap";
ZaGlobalConfig.A_zimbraGalLdapFilterDef = "zimbraGalLdapFilterDef";

//security
ZaGlobalConfig.A_zimbraMailMode = "zimbraMailMode"  ;

//mailproxy
ZaGlobalConfig.A_zimbraImapProxyBindPort="zimbraImapProxyBindPort";
ZaGlobalConfig.A_zimbraImapSSLProxyBindPort="zimbraImapSSLProxyBindPort";
ZaGlobalConfig.A_zimbraPop3ProxyBindPort="zimbraPop3ProxyBindPort";
ZaGlobalConfig.A_zimbraPop3SSLProxyBindPort="zimbraPop3SSLProxyBindPort";
ZaGlobalConfig.A_zimbraReverseProxyLookupTarget = "zimbraReverseProxyLookupTarget";

// mail validation
ZaGlobalConfig.A_zimbraMailAddressValidationRegex = "zimbraMailAddressValidationRegex";

// others
ZaGlobalConfig.A_zimbraInstalledSkin = "zimbraInstalledSkin";
ZaGlobalConfig.A_zimbraNewExtension = "_zimbraNewExtension";

ZaGlobalConfig.A_originalMonitorHost = "_originalMonitorHost";
ZaGlobalConfig.A_currentMonitorHost = "_currentMonitorHost";

//interop
ZaGlobalConfig.A_zimbraFreebusyExchangeAuthUsername = "zimbraFreebusyExchangeAuthUsername" ;
ZaGlobalConfig.A_zimbraFreebusyExchangeAuthPassword = "zimbraFreebusyExchangeAuthPassword" ;
ZaGlobalConfig.A_zimbraFreebusyExchangeAuthScheme  = "zimbraFreebusyExchangeAuthScheme" ;
ZaGlobalConfig.A_zimbraFreebusyExchangeServerType  = "zimbraFreebusyExchangeServerType" ;
ZaGlobalConfig.A_zimbraFreebusyExchangeURL ="zimbraFreebusyExchangeURL";
ZaGlobalConfig.A_zimbraFreebusyExchangeUserOrg = "zimbraFreebusyExchangeUserOrg"  ;

//spnego
ZaGlobalConfig.A_zimbraSpnegoAuthEnabled = "zimbraSpnegoAuthEnabled";
ZaGlobalConfig.A_zimbraSpnegoAuthRealm = "zimbraSpnegoAuthRealm";
ZaGlobalConfig.A_zimbraSpnegoAuthErrorURL = "zimbraSpnegoAuthErrorURL";

//sso
ZaGlobalConfig.A_zimbraWebClientLoginURL = "zimbraWebClientLoginURL";
ZaGlobalConfig.A_zimbraWebClientLogoutURL = "zimbraWebClientLogoutURL";
ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedUA = "zimbraWebClientLoginURLAllowedUA";
ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedUA = "zimbraWebClientLogoutURLAllowedUA";
ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedIP = "zimbraWebClientLoginURLAllowedIP";
ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedIP = "zimbraWebClientLogoutURLAllowedIP";
ZaGlobalConfig.A_zimbraForceClearCookies = "zimbraForceClearCookies";

// Auto provision
ZaGlobalConfig.A_zimbraAutoProvBatchSize = "zimbraAutoProvBatchSize";
ZaGlobalConfig.A_zimbraAutoProvPollingInterval = "zimbraAutoProvPollingInterval";

// web client authentication
ZaGlobalConfig.A_zimbraMailSSLClientCertMode = "zimbraMailSSLClientCertMode";
ZaGlobalConfig.A_zimbraMailSSLClientCertPort = "zimbraMailSSLClientCertPort";
ZaGlobalConfig.A_zimbraMailSSLClientCertPrincipalMap = "zimbraMailSSLClientCertPrincipalMap";
ZaGlobalConfig.A_zimbraReverseProxyClientCertMode = "zimbraReverseProxyClientCertMode";
ZaGlobalConfig.A_zimbraMailSSLProxyClientCertPort = "zimbraMailSSLProxyClientCertPort";
ZaGlobalConfig.A_zimbraReverseProxyMailMode = "zimbraReverseProxyMailMode";
ZaGlobalConfig.A_zimbraReverseProxyAdminIPAddress = "zimbraReverseProxyAdminIPAddress";
ZaGlobalConfig.A_zimbraReverseProxyClientCertCA = "zimbraReverseProxyClientCertCA";
ZaGlobalConfig.A_zimbraAutoProvNotificationSubject = "zimbraAutoProvNotificationSubject";
ZaGlobalConfig.A_zimbraAutoProvNotificationBody = "zimbraAutoProvNotificationBody";

//Skin Properties
ZaGlobalConfig.A_zimbraSkinForegroundColor = "zimbraSkinForegroundColor" ;
ZaGlobalConfig.A_zimbraSkinBackgroundColor = "zimbraSkinBackgroundColor" ;
ZaGlobalConfig.A_zimbraSkinSecondaryColor = "zimbraSkinSecondaryColor" ;
ZaGlobalConfig.A_zimbraSkinSelectionColor  = "zimbraSkinSelectionColor" ;
ZaGlobalConfig.A_zimbraSkinLogoURL ="zimbraSkinLogoURL" ;
ZaGlobalConfig.A_zimbraSkinLogoLoginBanner = "zimbraSkinLogoLoginBanner" ;
ZaGlobalConfig.A_zimbraSkinLogoAppBanner = "zimbraSkinLogoAppBanner" ;
ZaGlobalConfig.A2_blocked_extension_selection = "blocked_extension_selection";
ZaGlobalConfig.A2_common_extension_selection = "common_extension_selection";
ZaGlobalConfig.A2_retentionPoliciesKeep = "retentionPolicyKeep";
ZaGlobalConfig.A2_retentionPoliciesPurge = "retentionPolicyPurge";
ZaGlobalConfig.A2_retentionPoliciesKeep_Selection = "retentionPoliciesKeep_Selection";
ZaGlobalConfig.A2_retentionPoliciesPurge_Selection = "retentionPoliciesPurge_Selection";

// help URL
ZaGlobalConfig.A_zimbraHelpAdminURL = "zimbraHelpAdminURL";
ZaGlobalConfig.A_zimbraHelpDelegatedURL = "zimbraHelpDelegatedURL";

//Ephemeral Backend
ZaGlobalConfig.A_zimbraEphemeralBackendURL = "zimbraEphemeralBackendURL";

ZaGlobalConfig.__configInstance = null;
ZaGlobalConfig.isDirty = true;

ZaGlobalConfig.CHECK_EXCHANGE_AUTH_CONFIG_RIGHT = "checkExchangeAuthConfig"
ZaGlobalConfig.getInstance = function(refresh) {
	if(refresh || ZaGlobalConfig.isDirty || !ZaGlobalConfig.__configInstance) {
		ZaGlobalConfig.__configInstance = new ZaGlobalConfig();
		ZaGlobalConfig.isDirty = false;
	}
	return ZaGlobalConfig.__configInstance;
}

ZaGlobalConfig.loadMethod = 
function(by, val) {
	var soapDoc = AjxSoapDoc.create("GetAllConfigRequest", ZaZimbraAdmin.URN, null);
	if(!this.getAttrs.all && !AjxUtil.isEmpty(this.attrsToGet)) {
		soapDoc.setMethodAttribute("attrs", this.attrsToGet.join(","));
	}	
	//var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;
	params.noAuthToken = true;	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_GET_ALL_CONFIG
	}
	var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.GetAllConfigResponse;
	this.initFromJS(resp);	
}
ZaItem.loadMethods["ZaGlobalConfig"].push(ZaGlobalConfig.loadMethod);

ZaGlobalConfig.prototype.initFromJS = function(obj) {
	ZaItem.prototype.initFromJS.call(this, obj);
	
	if(AjxUtil.isString(this.attrs[ZaGlobalConfig.A_zimbraMtaBlockedExtension])) {
		this.attrs[ZaGlobalConfig.A_zimbraMtaBlockedExtension] = [this.attrs[ZaGlobalConfig.A_zimbraMtaBlockedExtension]];
	}
	
	if(AjxUtil.isString(this.attrs[ZaGlobalConfig.A_zimbraMtaCommonBlockedExtension])) {
		this.attrs[ZaGlobalConfig.A_zimbraMtaCommonBlockedExtension] = [this.attrs[ZaGlobalConfig.A_zimbraMtaCommonBlockedExtension]];
	}
	
	if(AjxUtil.isString(this.attrs[ZaGlobalConfig.A_zimbraSmtpHostname])) {
		this.attrs[ZaGlobalConfig.A_zimbraSmtpHostname] = [this.attrs[ZaGlobalConfig.A_zimbraSmtpHostname]];
	}

        if(AjxUtil.isString(this.attrs[ZaGlobalConfig.A_zimbraMailAddressValidationRegex])) {
                this.attrs[ZaGlobalConfig.A_zimbraMailAddressValidationRegex] = [this.attrs[ZaGlobalConfig.A_zimbraMailAddressValidationRegex]];
        }	
    if(AjxUtil.isString(this.attrs[ZaGlobalConfig.A_zimbraReverseProxyAdminIPAddress])) {
		this.attrs[ZaGlobalConfig.A_zimbraReverseProxyAdminIPAddress] = [this.attrs[ZaGlobalConfig.A_zimbraReverseProxyAdminIPAddress]];
	}

	if(AjxUtil.isString(this.attrs[ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedUA])) {
		this.attrs[ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedUA] = [this.attrs[ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedUA]];
	}

    if(AjxUtil.isString(this.attrs[ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedUA])) {
		this.attrs[ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedUA] = [this.attrs[ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedUA]];
	}

    if(AjxUtil.isString(this.attrs[ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedIP])) {
        this.attrs[ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedIP] = [this.attrs[ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedIP]];
    }

    if(AjxUtil.isString(this.attrs[ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedIP])) {
        this.attrs[ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedIP] = [this.attrs[ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedIP]];
    }
	// convert available components to hidden fields for xform binding
	var components = this.attrs[ZaGlobalConfig.A_zimbraComponentAvailable];
	if (components) {
		if (AjxUtil.isString(components)) {
			components = [ components ];
		}
		for (var i = 0; i < components.length; i++) {
			var component = components[i];
			this.attrs["_"+ZaGlobalConfig.A_zimbraComponentAvailable+"_"+component] = true;
		}
	}

    // init reject_rbl_client - List of Client RBLs
    this.attrs[ZaGlobalConfig.A_zimbraMtaRejectRblClient] = [];
    // init reject_rhsbl_client - List of Client RHSBLs
    this.attrs[ZaGlobalConfig.A_zimbraMtaRejectRHSblClient] = [];
    // init reject_rhsbl_reverse_client - List of Reverse Client RHSBLs
    this.attrs[ZaGlobalConfig.A_zimbraMtaRejectRHSblReverseClient] = [];
    // init reject_rhsbl_sender - List of Sender RHSBLs
    this.attrs[ZaGlobalConfig.A_zimbraMtaRejectRHSblSender] = [];

    this.attrs[ZaGlobalConfig.A_zimbraMtaPolicyService] = [];

    // convert restrictions to hidden fields for xform binding
    var restrictions = this.attrs[ZaGlobalConfig.A_zimbraMtaRestriction];

    if (restrictions) {
        if (AjxUtil.isString(restrictions)) {
            restrictions = [ restrictions ];
        }

        for (var i = 0; i < restrictions.length; i++) {
            if (restrictions[i].indexOf("reject_rbl_client") > -1) {
                var restriction = restrictions[i];
                var chunks = restriction.split(" ");
                if(chunks && chunks.length>0) {
                    this.attrs[ZaGlobalConfig.A_zimbraMtaRejectRblClient].push(chunks[1]);
                }
            } else if (restrictions[i].indexOf("reject_rhsbl_client") > -1) {
                var restriction = restrictions[i];
                var chunks = restriction.split(" ");
                if(chunks && chunks.length>0) {
                    this.attrs[ZaGlobalConfig.A_zimbraMtaRejectRHSblClient].push(chunks[1]);
                }
            } else if (restrictions[i].indexOf("reject_rhsbl_reverse_client") > -1) {
                var restriction = restrictions[i];
                var chunks = restriction.split(" ");
                if(chunks && chunks.length>0) {
                    this.attrs[ZaGlobalConfig.A_zimbraMtaRejectRHSblReverseClient].push(chunks[1]);
                }
            } else if (restrictions[i].indexOf("reject_rhsbl_sender") > -1) {
                var restriction = restrictions[i];
                var chunks = restriction.split(" ");
                if(chunks && chunks.length>0) {
                    this.attrs[ZaGlobalConfig.A_zimbraMtaRejectRHSblSender].push(chunks[1]);
                }
            } else if (restrictions[i].indexOf("check_policy_service") > -1){
                var restriction = restrictions[i];
                var chunks = restriction.split(" ");
                if(chunks && chunks.length>0) {
                    this.attrs[ZaGlobalConfig.A_zimbraMtaPolicyService].push(chunks[1]);
                }
            } else {
                var restriction = restrictions[i];
                this.attrs["_" + ZaGlobalConfig.A_zimbraMtaRestriction + "_" + restriction] = true;
            }
        }
    }

    if(this.attrs[ZaGlobalConfig.A_zimbraInstalledSkin] != null && !(this.attrs[ZaGlobalConfig.A_zimbraInstalledSkin] instanceof Array)) {
        this.attrs[ZaGlobalConfig.A_zimbraInstalledSkin] = [this.attrs[ZaGlobalConfig.A_zimbraInstalledSkin]];
    }

    if(this.attrs[ZaDomain.A_zimbraFreebusyExchangeAuthPassword] &&
        (this.attrs[ZaDomain.A_zimbraFreebusyExchangeAuthPassword] == "VALUE-BLOCKED")) {
        /* Value was replaced in SOAP response - treat as empty string so that it is clear it needs to be typed again
         * before using "Check the settings" */
        this.attrs[ZaDomain.A_zimbraFreebusyExchangeAuthPassword] = "";
    }
}

//ZaGlobalConfig.prototype.modify = 
ZaGlobalConfig.modifyMethod = function (tmods, tmpObj) {
        var soapDoc = AjxSoapDoc.create("BatchRequest", "urn:zimbra");
        soapDoc.setMethodAttribute("onerror", "stop");

        // S/MIME
        var mods = tmods;
        if(ZaItem.modifyMethodsExt["ZaGlobalConfig"]) {
                var methods = ZaItem.modifyMethodsExt["ZaGlobalConfig"];
                var cnt = methods.length;
                for(var i = 0; i < cnt; i++) {
                        if(typeof(methods[i]) == "function")
                               methods[i].call(this, mods, tmpObj, soapDoc);
                }

        }

        var modifyConfDoc = soapDoc.set("ModifyConfigRequest", null, null, ZaZimbraAdmin.URN);
        for (var aname in mods) {
                //multy value attribute
                if(mods[aname] instanceof Array) {
                        var cnt = mods[aname].length;
                        if(cnt > 0) {
                                for(var ix=0; ix <cnt; ix++) {
                                        if(mods[aname][ix] instanceof String)
                                                var attr = soapDoc.set("a", mods[aname][ix].toString(), modifyConfDoc);
                                        else if(mods[aname][ix] instanceof Object)
                                                var attr = soapDoc.set("a", mods[aname][ix].toString(), modifyConfDoc);
                                        else 
                                                var attr = soapDoc.set("a", mods[aname][ix], modifyConfDoc);
                                                
                                        attr.setAttribute("n", aname);
                                }
                        } 
                        else {
                                var attr = soapDoc.set("a", "", modifyConfDoc);
                                attr.setAttribute("n", aname);
                        }
                } else {
                        //bug fix 10354: ingnore the changed ZaLicense Properties
                        if ((typeof ZaLicense == "function") && (ZaSettings.LICENSE_ENABLED)){
                                if (ZaUtil.findValueInObjArrByPropertyName (ZaLicense.myXModel.items, aname, "id") > -1 ){
                                        continue ;
                                }
                        }
                        var attr = soapDoc.set("a", mods[aname], modifyConfDoc);
                        attr.setAttribute("n", aname);
                }
        }

	var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;
	params.noAuthToken = true;	
	command.invoke(params);
	ZaGlobalConfig.isDirty = true;
}
ZaItem.modifyMethods["ZaGlobalConfig"].push(ZaGlobalConfig.modifyMethod);

// REVISIT: Move to a common location if needed by others
LifetimeNumber_XFormItem = function() {}
XModelItemFactory.createItemType("_LIFETIME_NUMBER_", "lifetime_number", LifetimeNumber_XFormItem, Number_XModelItem);
LifetimeNumber_XFormItem.prototype.validateType = function(value) {
	// strip off lifetime char (e.g. 's', 'h', 'd', ...)
	var number = value.substring(0, value.length - 1);
	this.validateNumber(number);
	return value;
}

ZaGlobalConfig.myXModel = {
    items: [
        // ...other...
        {
            id: ZaGlobalConfig.A_zimbraGalMaxResults,
            ref: "attrs/" + ZaGlobalConfig.A_zimbraGalMaxResults,
            type: _NUMBER_,
            minInclusive: 0,
            maxInclusive: 2147483647,
            defaultValue: 100
        },
		{ id:ZaGlobalConfig.A_zimbraDefaultDomainName, ref:"attrs/" + ZaGlobalConfig.A_zimbraDefaultDomainName, type:_STRING_, maxLength: 256},
		{ id:ZaGlobalConfig.A_zimbraScheduledTaskNumThreads, ref:"attrs/" + ZaGlobalConfig.A_zimbraScheduledTaskNumThreads , type:_NUMBER_, minInclusive: 1 },
		{ id:ZaGlobalConfig.A_zimbraMailPurgeSleepInterval, type:_MINTERVAL_, ref:"attrs/"+ZaGlobalConfig.A_zimbraMailPurgeSleepInterval},
		
		{ id:ZaGlobalConfig.A_currentMonitorHost, ref: "attrs/"+ZaGlobalConfig.A_currentMonitorHost, type: _STRING_ },
		// attachments
		{ id:ZaGlobalConfig.A_zimbraAttachmentsBlocked, ref:"attrs/" + ZaGlobalConfig.A_zimbraAttachmentsBlocked, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
		{ id:ZaGlobalConfig.A_zimbraMtaBlockedExtensionWarnRecipient, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaBlockedExtensionWarnRecipient, type: _ENUM_, choices: ZaModel.BOOLEAN_CHOICES},
		{ id:ZaGlobalConfig.A_zimbraMtaBlockedExtension, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaBlockedExtension, type: _LIST_, dataType: _STRING_ },
		{ id:ZaGlobalConfig.A_zimbraMtaCommonBlockedExtension, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaCommonBlockedExtension, type: _LIST_, dataType: _STRING_ },
		// MTA
		{ id:ZaGlobalConfig.A_zimbraMtaSaslAuthEnable, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaSaslAuthEnable, type: _ENUM_, choices: ["yes", "no"] },
		{ id:ZaGlobalConfig.A_zimbraMtaTlsAuthOnly, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaTlsAuthOnly, type: _ENUM_, choices: ZaModel.BOOLEAN_CHOICES },
                { id:ZaGlobalConfig.A_zimbraMailAddressValidationRegex, ref:"attrs/" + ZaGlobalConfig.A_zimbraMailAddressValidationRegex, type:_LIST_, listItem:{ type:_STRING_, maxLength: 512} },
		{ id:ZaGlobalConfig.A_zimbraSmtpHostname, ref:"attrs/" + ZaGlobalConfig.A_zimbraSmtpHostname, type:_LIST_, listItem:{ type:_HOSTNAME_OR_IP_, maxLength: 256} },
		{ id:ZaGlobalConfig.A_zimbraSmtpPort, ref:"attrs/" + ZaGlobalConfig.A_zimbraSmtpPort, type:_PORT_ },
		{ id:ZaGlobalConfig.A_zimbraMtaMaxMessageSize, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaMaxMessageSize, type: _FILE_SIZE_, units: AjxUtil.SIZE_KILOBYTES, required: true },
		{ id:ZaGlobalConfig.A_zimbraFileUploadMaxSize, ref:"attrs/" + ZaGlobalConfig.A_zimbraFileUploadMaxSize, type: _FILE_SIZE_, units: AjxUtil.SIZE_KILOBYTES },
		{id:ZaGlobalConfig.A_zimbraMtaMyNetworks, ref:"attrs/" +  ZaGlobalConfig.A_zimbraMtaMyNetworks, type:_STRING_, maxLength: 10240 },
		{ id:ZaGlobalConfig.A_zimbraMtaRelayHost, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaRelayHost, type: _HOSTNAME_OR_IP_, maxLength: 256 },
        { id:ZaGlobalConfig.A_zimbraMtaFallbackRelayHost, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaFallbackRelayHost, type: _HOSTNAME_OR_IP_, maxLength: 256 },
		{ id:ZaGlobalConfig.A_zimbraSmtpSendAddOriginatingIP, ref: "attrs/" + ZaGlobalConfig.A_zimbraSmtpSendAddOriginatingIP, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
		
		{ id:ZaGlobalConfig.A_zimbraMtaSmtpDnsSupportLevel, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaSmtpDnsSupportLevel, type: _ENUM_, choices: ZaSettings.smtpDnsSupportLevel },
		{ id:ZaGlobalConfig.A_zimbraMilterServerEnabled, ref:"attrs/" + ZaGlobalConfig.A_zimbraMilterServerEnabled, type: _ENUM_, choices: ZaModel.BOOLEAN_CHOICES },
                { id:ZaGlobalConfig.A_zimbraMilterBindPort, ref:"attrs/" + ZaGlobalConfig.A_zimbraMilterBindPort, type:_PORT_ },

		// -- protocol checks
		{ id:ZaGlobalConfig.A_zimbraMtaRejectInvalidHeloHostname, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaRejectInvalidHeloHostname, type: _ENUM_, choices: [false,true] },
		{ id:ZaGlobalConfig.A_zimbraMtaRejectNonFqdnHeloHostname, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaRejectNonFqdnHeloHostname, type: _ENUM_, choices: [false,true] },
		{ id:ZaGlobalConfig.A_zimbraMtaRejectNonFqdnSender, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaRejectNonFqdnSender, type: _ENUM_, choices: [false,true] },
		// -- dns checks
		{ id:ZaGlobalConfig.A_zimbraMtaRejectUnknownClientHostname, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaRejectUnknownClientHostname, type: _ENUM_, choices: [false,true] },
		{ id:ZaGlobalConfig.A_zimbraMtaRejectUnknownReverseClientHostname, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaRejectUnknownReverseClientHostname, type: _ENUM_, choices: [false,true] },
		{ id:ZaGlobalConfig.A_zimbraMtaRejectUnknownSenderDomain, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaRejectUnknownSenderDomain, type: _ENUM_, choices: [false,true] },
		{ id:ZaGlobalConfig.A_zimbraMtaRejectUnknownHeloHostname, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaRejectUnknownHeloHostname, type: _ENUM_, choices: [false,true] },
		{id:ZaGlobalConfig.A_zimbraDNSCheckHostname, type:_STRING_, ref:"attrs/" + ZaGlobalConfig.A_zimbraDNSCheckHostname, maxLength:255},		
		{id:ZaGlobalConfig.A_zimbraBasicAuthRealm, type:_STRING_, ref:"attrs/" + ZaGlobalConfig.A_zimbraBasicAuthRealm, maxLength:255},
		{id:ZaGlobalConfig.A_zimbraAdminConsoleDNSCheckEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/" + ZaGlobalConfig.A_zimbraAdminConsoleDNSCheckEnabled},

        {id:ZaGlobalConfig.A_zimbraAdminConsoleCatchAllAddressEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/" + ZaGlobalConfig.A_zimbraAdminConsoleCatchAllAddressEnabled},
		{id:ZaGlobalConfig.A_zimbraAdminConsoleSkinEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/" + ZaGlobalConfig.A_zimbraAdminConsoleSkinEnabled},
        {id:ZaGlobalConfig.A_zimbraAdminConsoleLDAPAuthEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:"attrs/" + ZaGlobalConfig.A_zimbraAdminConsoleLDAPAuthEnabled},    
                //check policy service
                { id:ZaGlobalConfig.A_zimbraMtaPolicyService, ref:"attrs/" + ZaGlobalConfig.A_zimbraMtaPolicyService, type: _LIST_, listItem:{type:_STRING_}},

        // reject_rbl_client - List of Client RBLs
        {
            id: ZaGlobalConfig.A_zimbraMtaRejectRblClient,
            ref: "attrs/" + ZaGlobalConfig.A_zimbraMtaRejectRblClient,
            type: _LIST_,
            listItem: {
                type: _STRING_
            }
        },
        // reject_rhsbl_client - List of Client RHSBLs
        {
            id: ZaGlobalConfig.A_zimbraMtaRejectRHSblClient,
            ref: "attrs/" + ZaGlobalConfig.A_zimbraMtaRejectRHSblClient,
            type: _LIST_,
            listItem: {
                type: _STRING_
            }
        },
        // reject_rhsbl_reverse_client - List of Reverse Client RHSBLs
        {
            id: ZaGlobalConfig.A_zimbraMtaRejectRHSblReverseClient,
            ref: "attrs/" + ZaGlobalConfig.A_zimbraMtaRejectRHSblReverseClient,
            type: _LIST_,
            listItem: {
                type: _STRING_
            }
        },
        // reject_rhsbl_sender - List of Sender RHSBLs
        {
            id: ZaGlobalConfig.A_zimbraMtaRejectRHSblSender,
            ref: "attrs/" + ZaGlobalConfig.A_zimbraMtaRejectRHSblSender,
            type: _LIST_,
            listItem: {
                type: _STRING_
            }
        },

		// smtp
		{ id:ZaGlobalConfig.A_zimbraSmtpTimeout, ref:"attrs/" + ZaGlobalConfig.A_zimbraSmtpTimeout, type:_NUMBER_, minInclusive: 0 },
		// pop
		{ id:ZaGlobalConfig.A_zimbraPop3ServerEnabled, ref:"attrs/" + ZaGlobalConfig.A_zimbraPop3ServerEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
		{ id:ZaGlobalConfig.A_zimbraPop3SSLServerEnabled, ref:"attrs/" + ZaGlobalConfig.A_zimbraPop3SSLServerEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},		
		{ id:ZaGlobalConfig.A_zimbraPop3CleartextLoginEnabled, ref:"attrs/" + ZaGlobalConfig.A_zimbraPop3CleartextLoginEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},				
		{ id:ZaGlobalConfig.A_zimbraPop3BindPort, ref:"attrs/" + ZaGlobalConfig.A_zimbraPop3BindPort, type:_PORT_ },
		{ id:ZaGlobalConfig.A_zimbraPop3SSLBindPort, ref:"attrs/" + ZaGlobalConfig.A_zimbraPop3SSLBindPort, type:_PORT_ },
		// imap
		{ id:ZaGlobalConfig.A_zimbraImapServerEnabled, ref:"attrs/" + ZaGlobalConfig.A_zimbraImapServerEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},						
		{ id:ZaGlobalConfig.A_zimbraImapSSLServerEnabled, ref:"attrs/" + ZaGlobalConfig.A_zimbraImapSSLServerEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},								
		{ id:ZaGlobalConfig.A_zimbraImapCleartextLoginEnabled, ref:"attrs/" + ZaGlobalConfig.A_zimbraImapCleartextLoginEnabled, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},										
        { id:ZaGlobalConfig.A_zimbraImapNumThreads, ref:"attrs/" + ZaGlobalConfig.A_zimbraImapNumThreads, type:_INT_,  minInclusive: 0, maxInclusive:2147483647  },
		{ id:ZaGlobalConfig.A_zimbraImapBindPort, ref:"attrs/" + ZaGlobalConfig.A_zimbraImapBindPort, type:_PORT_ },
		{ id:ZaGlobalConfig.A_zimbraImapSSLBindPort, ref:"attrs/" + ZaGlobalConfig.A_zimbraImapSSLBindPort, type:_PORT_ },
		// anti-spam
	  	{ id:ZaGlobalConfig.A_zimbraSpamCheckEnabled, ref:"attrs/" + ZaGlobalConfig.A_zimbraSpamCheckEnabled, type: _ENUM_, choices: ZaModel.BOOLEAN_CHOICES },
	  	{ id:ZaGlobalConfig.A_zimbraSpamKillPercent, ref:"attrs/" + ZaGlobalConfig.A_zimbraSpamKillPercent, type: _PERCENT_, fractionDigits: 0 },
	  	{ id:ZaGlobalConfig.A_zimbraSpamTagPercent, ref:"attrs/" + ZaGlobalConfig.A_zimbraSpamTagPercent, type: _PERCENT_, fractionDigits: 0 },
	  	{ id:ZaGlobalConfig.A_zimbraSpamSubjectTag, ref:"attrs/" + ZaGlobalConfig.A_zimbraSpamSubjectTag, type: _STRING_, whiteSpace: 'collapse', maxLength: 32 },
	  	// anti-virus
	  	{ id:ZaGlobalConfig.A_zimbraVirusCheckEnabled, ref:"attrs/" + ZaGlobalConfig.A_zimbraVirusCheckEnabled, type: _ENUM_, choices: ZaModel.BOOLEAN_CHOICES },
	  	{ id:ZaGlobalConfig.A_zimbraVirusDefinitionsUpdateFrequency, ref:"attrs/" + ZaGlobalConfig.A_zimbraVirusDefinitionsUpdateFrequency, type: _STRING_, whiteSpace: 'collapse' },
	  	{ id:ZaGlobalConfig.A_zimbraVirusBlockEncryptedArchive, ref:"attrs/" + ZaGlobalConfig.A_zimbraVirusBlockEncryptedArchive, type: _ENUM_, choices: ZaModel.BOOLEAN_CHOICES},
	  	{ id:ZaGlobalConfig.A_zimbraVirusWarnAdmin, ref:"attrs/" + ZaGlobalConfig.A_zimbraVirusWarnAdmin, type: _ENUM_, choices: ZaModel.BOOLEAN_CHOICES},
	  	{ id:ZaGlobalConfig.A_zimbraVirusWarnRecipient, ref:"attrs/" + ZaGlobalConfig.A_zimbraVirusWarnRecipient, type: _ENUM_, choices: ZaModel.BOOLEAN_CHOICES},
	  	//proxy
		{ id:ZaGlobalConfig.A_zimbraImapProxyBindPort, ref:"attrs/" + ZaGlobalConfig.A_zimbraImapProxyBindPort, type:_PORT_ },
		{ id:ZaGlobalConfig.A_zimbraImapSSLProxyBindPort, ref:"attrs/" + ZaGlobalConfig.A_zimbraImapSSLProxyBindPort, type:_PORT_ },
		{ id:ZaGlobalConfig.A_zimbraPop3ProxyBindPort, ref:"attrs/" + ZaGlobalConfig.A_zimbraPop3ProxyBindPort, type:_PORT_ },
		{ id:ZaGlobalConfig.A_zimbraPop3SSLProxyBindPort, ref:"attrs/" + ZaGlobalConfig.A_zimbraPop3SSLProxyBindPort, type:_PORT_ },
		{ id:ZaGlobalConfig.A_zimbraLmtpBindPort, ref:"attrs/" + ZaGlobalConfig.A_zimbraLmtpBindPort, type:_PORT_ },
		{ id:ZaGlobalConfig.A_zimbraPop3NumThreads, ref:"attrs/" + ZaGlobalConfig.A_zimbraPop3NumThreads, type:_INT_, minInclusive: 0, maxInclusive:2147483647 },		
		{ id:ZaGlobalConfig.A_zimbraInstalledSkin, ref:"attrs/" + ZaGlobalConfig.A_zimbraInstalledSkin, type:_LIST_, listItem:{type:_STRING_}},
        //spnego
        { id:ZaGlobalConfig.A_zimbraSpnegoAuthEnabled, ref:"attrs/" + ZaGlobalConfig.A_zimbraSpnegoAuthEnabled, type: _ENUM_, choices: ZaModel.BOOLEAN_CHOICES },
        { id:ZaGlobalConfig.A_zimbraSpnegoAuthRealm, ref:"attrs/" + ZaGlobalConfig.A_zimbraSpnegoAuthRealm, type: _STRING_ },
        { id:ZaGlobalConfig.A_zimbraSpnegoAuthErrorURL, ref:"attrs/" + ZaGlobalConfig.A_zimbraSpnegoAuthErrorURL, type: _STRING_ },
        //web client
        { id:ZaGlobalConfig.A_zimbraWebClientLoginURL, ref:"attrs/" + ZaGlobalConfig.A_zimbraWebClientLoginURL, type:_STRING_, maxLength:255 },
        { id:ZaGlobalConfig.A_zimbraWebClientLogoutURL, ref:"attrs/" + ZaGlobalConfig.A_zimbraWebClientLogoutURL, type:_STRING_, maxLength:255 },
		{ id:ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedUA, ref:"attrs/" + ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedUA, type:_LIST_, listItem:{type:_STRING_}},
		{ id:ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedUA, ref:"attrs/" + ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedUA, type:_LIST_, listItem:{type:_STRING_}},
		{ id:ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedIP, ref:"attrs/" + ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedIP, type:_LIST_, listItem:{type:_STRING_}},
        { id:ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedIP, ref:"attrs/" + ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedIP, type:_LIST_, listItem:{type:_STRING_}},
        // Clear Cookies
        {
            id: ZaGlobalConfig.A_zimbraForceClearCookies,
            ref: "attrs/" + ZaGlobalConfig.A_zimbraForceClearCookies,
            type: _ENUM_,
            choices: ZaModel.BOOLEAN_CHOICES
        },
        // web client authentication
        { id:ZaGlobalConfig.A_zimbraMailSSLClientCertMode, ref:"attrs/" +  ZaGlobalConfig.A_zimbraMailSSLClientCertMode, type:_STRING_, choices:["Disabled","NeedClientAuth","WantClientAuth"]},
        { id:ZaGlobalConfig.A_zimbraMailSSLClientCertPort, ref:"attrs/" +  ZaGlobalConfig.A_zimbraMailSSLClientCertPort, type:_PORT_},
        { id:ZaGlobalConfig.A_zimbraMailSSLProxyClientCertPort, ref:"attrs/" +  ZaGlobalConfig.A_zimbraMailSSLProxyClientCertPort, type:_PORT_},
        { id:ZaGlobalConfig.A_zimbraReverseProxyMailMode, ref:"attrs/" +  ZaGlobalConfig.A_zimbraReverseProxyMailMode, type:_STRING_, choices:["http","https","both","mixed","redirect"]},
        { id:ZaGlobalConfig.A_zimbraReverseProxyClientCertMode, ref:"attrs/" +  ZaGlobalConfig.A_zimbraReverseProxyClientCertMode, type:_STRING_, choices:["on","off","optional"]},
        { id:ZaGlobalConfig.A_zimbraMailSSLClientCertPrincipalMap, ref:"attrs/" + ZaGlobalConfig.A_zimbraMailSSLClientCertPrincipalMap, type:_STRING_ },
        { id:ZaGlobalConfig.A_zimbraReverseProxyAdminIPAddress, ref:"attrs/" + ZaGlobalConfig.A_zimbraReverseProxyAdminIPAddress, type:_LIST_, listItem:{type:_STRING_}},
        { id:ZaGlobalConfig.A_zimbraReverseProxyClientCertCA, ref:"attrs/" + ZaGlobalConfig.A_zimbraReverseProxyClientCertCA, type:_STRING_},
        //skin properties
        { id:ZaGlobalConfig.A_zimbraSkinForegroundColor, ref:"attrs/" + ZaGlobalConfig.A_zimbraSkinForegroundColor, type: _STRING_ },
        { id:ZaGlobalConfig.A_zimbraSkinBackgroundColor, ref:"attrs/" + ZaGlobalConfig.A_zimbraSkinBackgroundColor, type: _STRING_ },
        { id:ZaGlobalConfig.A_zimbraSkinSecondaryColor, ref:"attrs/" + ZaGlobalConfig.A_zimbraSkinSecondaryColor, type: _STRING_ },
        { id:ZaGlobalConfig.A_zimbraSkinSelectionColor, ref:"attrs/" + ZaGlobalConfig.A_zimbraSkinSelectionColor, type: _STRING_ },

        { id:ZaGlobalConfig.A_zimbraSkinLogoURL, ref:"attrs/" + ZaGlobalConfig.A_zimbraSkinLogoURL, type:_STRING_ },
        { id:ZaGlobalConfig.A_zimbraSkinLogoLoginBanner, ref:"attrs/" + ZaGlobalConfig.A_zimbraSkinLogoLoginBanner, type:_STRING_ },
        { id:ZaGlobalConfig.A_zimbraSkinLogoAppBanner, ref:"attrs/" + ZaGlobalConfig.A_zimbraSkinLogoAppBanner, type:_STRING_ },

        // auto provision
        { id:ZaGlobalConfig.A_zimbraAutoProvBatchSize, type:_NUMBER_, ref:"attrs/" + ZaGlobalConfig.A_zimbraAutoProvBatchSize, maxInclusive:2147483647, minInclusive:0},
        { id:ZaGlobalConfig.A_zimbraAutoProvPollingInterval, ref:"attrs/" + ZaGlobalConfig.A_zimbraAutoProvPollingInterval, type: _LIFETIME_NUMBER_, minInclusive: 0, fractionDigits: 0 },
        { id:ZaGlobalConfig.A_zimbraAutoProvNotificationSubject, ref:"attrs/" + ZaGlobalConfig.A_zimbraAutoProvNotificationSubject, type:_STRING_ },
        { id:ZaGlobalConfig.A_zimbraAutoProvNotificationBody, ref:"attrs/" + ZaGlobalConfig.A_zimbraAutoProvNotificationBody, type:_STRING_ },

	// help URL
        { id:ZaGlobalConfig.A_zimbraHelpAdminURL, ref:"attrs/" + ZaGlobalConfig.A_zimbraHelpAdminURL, type:_STRING_ },
        { id:ZaGlobalConfig.A_zimbraHelpDelegatedURL, ref:"attrs/" + ZaGlobalConfig.A_zimbraHelpDelegatedURL, type:_STRING_ },
         //interop
        { id:ZaGlobalConfig.A_zimbraFreebusyExchangeAuthUsername, ref:"attrs/" + ZaGlobalConfig.A_zimbraFreebusyExchangeAuthUsername, type: _STRING_ },
        { id:ZaGlobalConfig.A_zimbraFreebusyExchangeAuthPassword, ref:"attrs/" + ZaGlobalConfig.A_zimbraFreebusyExchangeAuthPassword, type: _STRING_ },
        { id:ZaGlobalConfig.A_zimbraFreebusyExchangeAuthScheme, ref:"attrs/" + ZaGlobalConfig.A_zimbraFreebusyExchangeAuthScheme,
            type: _ENUM_, choices: ZaSettings.authorizationScheme },
        { id:ZaGlobalConfig.A_zimbraFreebusyExchangeServerType, ref:"attrs/" + ZaGlobalConfig.A_zimbraFreebusyExchangeServerType,
            type: _ENUM_, choices: ZaSettings.exchangeServerType },
	    { id:ZaGlobalConfig.A_zimbraFreebusyExchangeURL, ref:"attrs/" + ZaGlobalConfig.A_zimbraFreebusyExchangeURL, type: _STRING_ },
        { id:ZaGlobalConfig.A_zimbraFreebusyExchangeUserOrg, ref:"attrs/" + ZaGlobalConfig.A_zimbraFreebusyExchangeUserOrg, type: _STRING_ },
        {id:ZaGlobalConfig.A2_blocked_extension_selection, type:_LIST_},
        {id:ZaGlobalConfig.A2_common_extension_selection, type:_LIST_},
        {id:ZaGlobalConfig.A2_retentionPoliciesKeep, type:_LIST_},
        {id:ZaGlobalConfig.A2_retentionPoliciesPurge, type:_LIST_},
        {id:ZaGlobalConfig.A2_retentionPoliciesKeep_Selection, type:_LIST_},
        {id:ZaGlobalConfig.A2_retentionPoliciesPurge_Selection, type:_LIST_},

        //Ephemeral Backend
        { id:ZaGlobalConfig.A_zimbraEphemeralBackendURL, ref:"attrs/" + ZaGlobalConfig.A_zimbraEphemeralBackendURL, type:_STRING_, maxLength: 128 }

    ]
}
}
if (AjxPackage.define("zimbraAdmin.status.model.ZaStatus")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaStatus 
* @contructor ZaStatus
* @param app
* @author Greg Solovyev
**/
ZaStatus = function() {
	ZaItem.call(this,"ZaStatus");
	this._init();	
}

ZaStatus.prototype = new ZaItem;
ZaStatus.prototype.constructor = ZaStatus;
ZaItem.loadMethods["ZaStatus"] = new Array();
ZaItem.initMethods["ZaStatus"] = new Array();

ZaStatus.A_server = "server";
ZaStatus.A_service = "service";
ZaStatus.A_timestamp = "t";
ZaStatus.PRFX_Server = "status_server";
ZaStatus.PRFX_Service = "status_service";
ZaStatus.PRFX_Time = "status_time";
ZaStatus.PRFX_Status = "status_status";
ZaStatus.SVC_SPELL = "spell";
ZaStatus.SVC_LOGGER = "logger";
ZaStatus.SVC_MTA = "mta";
ZaStatus.SVC_LDAP = "ldap";
ZaStatus.SVC_MEMCACHED = "memcached";
ZaStatus.SVC_MAILBOX = "mailbox";
ZaStatus.SVC_CONVERTD = "convertd";
ZaStatus.SVC_IMAPPROXY = "proxy";
ZaStatus.SVC_STATS = "stats";
ZaStatus.SVC_SNMP = "snmp";
ZaStatus.SVC_AS = "antispam";
ZaStatus.SVC_AV = "antivirus";


ZaStatus.prototype.load = function (by, val) {
	ZaItem.prototype.load.call(this,by,val,true, false);
}

ZaStatus.loadMethod = 
function() {
	try {
		var logHost = ZaApp.getInstance().getGlobalConfig().attrs[ZaServer.A_zimbraLogHostname];		
		//if zimbraLogHostname is set
		if (logHost) {
			var soapDoc = AjxSoapDoc.create("GetServiceStatusRequest", ZaZimbraAdmin.URN, null);
			var command = new ZmCsfeCommand();
			var params = new Object();
			params.noAuthToken = true;
			params.soapDoc = soapDoc;	
			var resp = command.invoke(params).Body.GetServiceStatusResponse;			
			this.initFromJS(resp);
		}	
	} catch (ex) {
			ZaApp.getInstance().getStatusViewController()._handleException(ex, "ZaStatus.loadMethod", null, false);		
	}	
}

ZaItem.loadMethods["ZaStatus"].push(ZaStatus.loadMethod);

ZaStatus.initMethod = function () {
	this.serverMap = new Object();
	this.statusVector = new AjxVector();
	this.id = Dwt.getNextId();
}
ZaItem.initMethods["ZaStatus"].push(ZaStatus.initMethod);

ZaStatus.prototype.initFromJS =
function(obj) {
    var tzId = obj.timezone[0].id;
    if(obj.status && obj.status instanceof Array) {
		var statusArray = obj.status;
        var cnt = statusArray.length;
        var formatter = AjxDateFormat.getDateTimeInstance(AjxDateFormat.MEDIUM, AjxDateFormat.SHORT);
        for(var i=0; i < cnt; i++) {
        	var serverName = statusArray[i].server;
            if(!this.serverMap[serverName]) {
            	this.serverMap[serverName] = new Object();
                this.serverMap[serverName].name = serverName;
                this.serverMap[serverName].id = Dwt.getNextId();
                this.serverMap[serverName].serviceMap = null;
                this.serverMap[serverName].status = 1;
                this.statusVector.add(this.serverMap[serverName]);
            }
            var serviceName = statusArray[i].service;
            if(serviceName) {
            	if(!this.serverMap[serverName].serviceMap)
                  	this.serverMap[serverName].serviceMap = new Object();
                var seconds = Number(statusArray[i].t);
                var millis = seconds*1000;                   
                var gmtSeconds = seconds - AjxTimezone.getOffset(AjxTimezone.DEFAULT_RULE)*60;                                
                var serverSeconds = gmtSeconds+AjxTimezone.getOffset(tzId,(new Date(millis)))*60;                                
                this.serverMap[serverName].serviceMap[serviceName] = new Object();
                this.serverMap[serverName].serviceMap[serviceName].status = statusArray[i]._content;
                this.serverMap[serverName].serviceMap[serviceName].timestamp = millis;
                var serverMillis = serverSeconds*1000;
                this.serverMap[serverName].serviceMap[serviceName].time = formatter.format(new Date(serverMillis));
                //this.serverMap[serverName].serviceMap[serviceName].time = formatter.format(new Date(Number(statusArray[i].t)*1000));
                if(this.serverMap[serverName].serviceMap[serviceName].status != 1) {
                	this.serverMap[serverName].status = 0;
                }
            }
		}
    }
}

ZaStatus.prototype.getStatusVector = 
function() {
	return this.statusVector;
}

ZaStatus.compare = function (a,b) {
	return (a.serverName < b.serverName)? -1: ((a.serverName > b.serverName)? 1: 0);
};
}
if (AjxPackage.define("zimbraAdmin.mta.model.ZaMTA")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaMTA
* This class represents Postfix Queue object
* @author Greg Solovyev
* @contructor
* @param app reference to the application instance
**/
ZaMTA = function() {
	ZaItem.call(this, "ZaMTA");
	this._init();
}


ZaMTA.prototype = new ZaItem;
ZaMTA.prototype.constructor = ZaMTA;
ZaItem.loadMethods["ZaMTA"] = new Array();
ZaItem.initMethods["ZaMTA"] = new Array();

ZaMTA.RESULTSPERPAGE = 25;
ZaMTA.POLL_INTERVAL = 1000;
ZaMTA.STATUS_IDLE = 0;
ZaMTA.STATUS_SCANNING = 1;
ZaMTA.STATUS_SCAN_COMPLETE = 2;
ZaMTA.STATUS_STALE = 3;
ZaMTA.ID_ALL = "ALL";

ZaMTA.SCANNER_STATUS_CHOICES = [{value:ZaMTA.STATUS_IDLE, label:ZaMsg.PQ_ScannerIdle}, 
	{value:ZaMTA.STATUS_SCANNING, label:ZaMsg.PQ_ScannerScanning},
	{value:ZaMTA.STATUS_SCAN_COMPLETE, label:ZaMsg.PQ_ScannerScanComplete},
	{value:ZaMTA.STATUS_STALE, label:ZaMsg.PQ_ScannerStaleData}];

/**
* attribute names
**/
ZaMTA.A_Servername = "servername";
ZaMTA.A_Status = "status";
ZaMTA.A_Stale = "stale";
ZaMTA.A_LastError = "lasterror";
ZaMTA.A_MTAName = "mtaname";
ZaMTA.A_refreshTime = "time";
ZaMTA.A_totalComplete = "total";
/**
* names of queues
**/
ZaMTA.A_DeferredQ = "deferred";
ZaMTA.A_IncomingQ = "incoming";
ZaMTA.A_ActiveQ = "active";
ZaMTA.A_CorruptQ = "corrupt";
ZaMTA.A_HoldQ = "hold";
/**
* names of summary fields
**/
ZaMTA.A_rdomain = "todomain";
ZaMTA.A_sdomain = "fromdomain";
ZaMTA.A_origip = "received";
ZaMTA.A_raddress = "to";
ZaMTA.A_saddress = "from";
ZaMTA.A_error = "reason";
ZaMTA.A_host = "host";
ZaMTA.A_messages = "messages";
/**
* names of attributes in summary fields fields
**/
ZaMTA.A_pageNum = "pagenum";
ZaMTA.A_name = "name";
ZaMTA.A_count = "n";
ZaMTA.A_Qid = "qid";
ZaMTA.A_query = "query";
ZaMTA.A_more = "more";
ZaMTA.A_scan = "scan";
ZaMTA.A_selection_cache = "_selection_cache";
ZaMTA.A_queue_filter_name = "_queue_filter_name";
ZaMTA.A_queue_filter_value = "_queue_filter_value";
ZaMTA.MsgIDS = "message_ids";

ZaMTA._quecountsArr = new Array();
ZaMTA.threashHold;
ZaMTA.ActionRequeue = "requeue";
ZaMTA.ActionDelete = "delete";
ZaMTA.ActionHold = "hold";
ZaMTA.ActionRelease = "release";

ZaMTA.MANAGE_MAIL_QUEUE_RIGHT = "manageMailQueue";

ZaMTA.prototype.getTabToolTip =
function () {
	return ZaMsg.tt_tab_MTA + " " + this.type + " " + this.name ;
}

ZaMTA.prototype.getTabIcon = 
function () {
	return "Queue" ;
}

ZaMTA.prototype.QCountsCallback = function (resp) {
	try {
		if(!resp) {
			var ex = new ZmCsfeException(ZMsg.errorEmptyResponse,ZmCsfeException.CSFE_SVC_ERROR,"ZaMTA.prototype.QCountsCallback");
			throw ex;
		}
		if(resp.isException && resp.isException()) {
			var details = {obj:this,qName:null,poll:false};
			ZaApp.getInstance().getMTAController(this._viewInternalId).fireChangeEvent(details);		
			throw (resp.getException());
		} 	
		var response = resp.getResponse();
		var body = response.Body;
		//update my fields
		if(body && body.GetMailQueueInfoResponse.server && body.GetMailQueueInfoResponse.server[0]) {
			this.initFromJS(body.GetMailQueueInfoResponse.server[0], true);
			ZaMTA._quecountsArr.sort();
			ZaMTA.threashHold = ZaMTA._quecountsArr[Math.round(ZaMTA._quecountsArr.length/2)];
			var details = {obj:this,qName:null,poll:false};
			ZaApp.getInstance().getMTAController(this._viewInternalId).fireChangeEvent(details);
		} else {
			var ex = new ZmCsfeException(ZMsg["service.UNKNOWN_DOCUMENT"],ZmCsfeException.SVC_UNKNOWN_DOCUMENT,"ZaMTA.prototype.QCountsCallback");
			throw(ex);
			//ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaMTA.prototype.QCountsCallback");
		}
	} catch (ex) {
		this[ZaMTA.A_DeferredQ] = {n:ZaMsg.PQ_Error};
		this[ZaMTA.A_IncomingQ] = {n:ZaMsg.PQ_Error};
		this[ZaMTA.A_ActiveQ] = {n:ZaMsg.PQ_Error};	
		this[ZaMTA.A_HoldQ] = {n:ZaMsg.PQ_Error};	
		this[ZaMTA.A_CorruptQ] = {n:ZaMsg.PQ_Error};		
			
		this[ZaMTA.A_DeferredQ][ZaMTA.A_refreshTime] = ZaMsg.PQ_Error;
		this[ZaMTA.A_IncomingQ][ZaMTA.A_refreshTime] = ZaMsg.PQ_Error;	
		this[ZaMTA.A_ActiveQ][ZaMTA.A_refreshTime] = ZaMsg.PQ_Error;
		this[ZaMTA.A_HoldQ][ZaMTA.A_refreshTime] = ZaMsg.PQ_Error;
		this[ZaMTA.A_CorruptQ][ZaMTA.A_refreshTime] = ZaMsg.PQ_Error;	
		var details = {obj:this,qName:null,poll:false};
		ZaApp.getInstance().getMTAController(this._viewInternalId).fireChangeEvent(details);		
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaMTA.prototype.QCountsCallback");				
	}
}

/**
* @param callback {AjxCallback}
* @return {ZaItemList} a list of ZaMTA objects {@link ZaItemList}
**/
ZaMTA.getAll = function (callback) {
	var soapDoc = AjxSoapDoc.create("GetAllServersRequest", ZaZimbraAdmin.URN, null);	
	soapDoc.getMethod().setAttribute("service", "mta");
	soapDoc.getMethod().setAttribute("applyConfig", "false");
	//var command = new ZmCsfeCommand();
	var params = new Object();
	params.asyncMode = callback ? true : false;
	params.callback = callback ? callback : null;
	params.soapDoc = soapDoc;
	soapDoc.setMethodAttribute("attrs", [ZaServer.A_ServiceHostname, ZaServer.A_description, ZaServer.A_zimbraServiceEnabled, ZaServer.A_zimbraServiceInstalled, ZaItem.A_zimbraId].join(","));	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_GET_ALL_SERVER
	}
	if(callback) {
		ZaRequestMgr.invoke(params, reqMgrParams);
	} else {
		var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.GetAllServersResponse;	
		var list = new ZaItemList(ZaMTA);
		var retVal = new ZaItemList(ZaMTA);
		list.loadFromJS(resp);	
		
		var servers = list.getArray();
		var cnt = servers.length;
		for(var i = 0; i < cnt; i++) {
			if(ZaItem.hasRight(ZaMTA.MANAGE_MAIL_QUEUE_RIGHT, servers[i])) {
				retVal.add(servers[i]);
			}
		}
		
		retVal.loadedRights = list.loadedRights;
		return retVal;
	}
}


ZaMTA.prototype.refresh = 
function() {
	this.load();	
}

ZaMTA.prototype.initFromJS = function (obj, summary) {
	if(obj.a) {
		ZaItem.prototype.initFromJS.call(this,obj);
	}
	var idCounter = 100;
	if(obj.queue) {
		var cnt = obj.queue.length;
		for (var ix=0; ix < cnt; ix++) {
			
			var queue = obj.queue[ix];
			var qName = queue.name;

			if(!this[qName])
				this[qName] = new Object();
				

			if(queue[ZaMTA.A_count] != undefined) {
				this[qName][ZaMTA.A_count] = queue[ZaMTA.A_count];
				ZaMTA._quecountsArr.push(queue[ZaMTA.A_count]);
			}
			if(queue[ZaMTA.A_refreshTime] != undefined) {
				this[qName][ZaMTA.A_refreshTime] = AjxDateUtil.computeDateStr(new Date(), parseInt(queue[ZaMTA.A_refreshTime]));
			}
			if(summary)
				continue;
				
			this[qName][ZaMTA.MsgIDS] = null;
			try {
				if(queue[ZaMTA.A_totalComplete] != undefined) {
					this[qName][ZaMTA.A_totalComplete] = parseInt(queue[ZaMTA.A_totalComplete]);
				}
			} catch (ex) {
				this[qName][ZaMTA.A_totalComplete] = 0;
			}
							
			if(queue[ZaMTA.A_scan] != undefined) {
				if(queue[ZaMTA.A_scan]) {
					this[qName][ZaMTA.A_Status] = ZaMTA.STATUS_SCANNING;
				} else {
					this[qName][ZaMTA.A_Status] = ZaMTA.STATUS_SCAN_COMPLETE;						 
					this[qName][ZaMTA.A_count] = this[qName][ZaMTA.A_totalComplete];
				}
			}	

			if(queue[ZaMTA.A_Stale]) {
				this[qName][ZaMTA.A_Status] = ZaMTA.STATUS_STALE;
			} 
			
			this[qName][ZaMTA.A_more] = queue[ZaMTA.A_more];

			this[qName][ZaMTA.A_rdomain] = [];
			this[qName][ZaMTA.A_sdomain]  = [];
			this[qName][ZaMTA.A_origip] = [];
			this[qName][ZaMTA.A_raddress] = [];
			this[qName][ZaMTA.A_saddress] = [];
			this[qName][ZaMTA.A_error] = [];
			this[qName][ZaMTA.A_host] = [];
			this[qName][ZaMTA.A_messages] = [];
			if(queue.qs) {
				var qs = obj.queue[ix].qs;
				var cnt2 = qs.length;
				for (var j = 0; j < cnt2; j++) {
					if(!this[qName][qs[j].type])
						this[qName][qs[j].type] = [];

					if(qs[j].qsi) {
						
						var item = qs[j].qsi;
						var cnt3 = item.length;
						for (var k = 0; k < cnt3; k++) {
						//	var item = qs[j].item[k];
							item[k].prototype = new ZaMTAQSummaryItem;
							item[k].getToolTip = ZaMTAQSummaryItem.prototype.getToolTip;
							item[k].toString = ZaMTAQSummaryItem.prototype.toString;
							item[k].id = idCounter++;
							//this[qName][qs[j].type].push(item);
							//this[qName][qs[j].type].push(new ZaMTAQSummaryItem( item[ZaMTAQSummaryItem.A_description], item[ZaMTAQSummaryItem.A_text], item[ZaMTAQSummaryItem.A_count]));
						}
						this[qName][qs[j].type] = item;
					}
				}	
			}	
			this[qName][ZaMTA.A_messages] = [];
			if(queue.qi) {
				var qi = obj.queue[ix].qi;
				var cnt4 = qi.length;
				for (var j = 0; j < cnt4; j++) {
					qi[j].prototype = new ZaMTAQMsgItem;
					qi[j].getToolTip = ZaMTAQMsgItem.prototype.getToolTip;
					qi[j].toString = ZaMTAQMsgItem.prototype.toString;					
				}	
				this[qName][ZaMTA.A_messages] = qi;
			}			
		}
	}

}
/**
* Make a SOAP call to get file counts in queue folders
**/
ZaMTA.loadMethod = 
function(by, val) {
	var soapDoc = AjxSoapDoc.create("GetMailQueueInfoRequest", ZaZimbraAdmin.URN, null);
	var attr = soapDoc.set("server", "");
	attr.setAttribute("name", this.name);		
	var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;
	params.noAuthToken = true;	
	params.asyncMode = true;
	var callback = new AjxCallback(this, this.QCountsCallback);	
	params.callback = callback;
	command.invoke(params);		
}
ZaItem.loadMethods["ZaMTA"].push(ZaMTA.loadMethod);

ZaMTA.luceneEscape = function (str) {
	return String(str).replace(/([\-\+\&\\!\(\)\{\}\[\]\^\"\~\*\?\:\\])/g, "\\$1");
}
/**
* send a MailQStatusRequest 
**/
ZaMTA.prototype.getMailQStatus = function (qName,query,offset,limit,force) {
	if(force) {
		var cnt = this[qName].n;
		this[qName] = {n:cnt};
	}
	limit = (limit != null) ? limit: ZaMTA.RESULTSPERPAGE;
	offset = (offset != null) ? offset: "0";
	//query = (query != null) ? query: "";	
	
	var soapDoc = AjxSoapDoc.create("GetMailQueueRequest", ZaZimbraAdmin.URN, null);

	var serverEl = soapDoc.set("server", "");
	serverEl.setAttribute("name", this.name);		

	var qEl = soapDoc.getDoc().createElement("queue");
	qEl.setAttribute("name", qName);		
	
	if(force) {
		qEl.setAttribute("scan", 1);	
		this[qName][ZaMTA.A_Status] = ZaMTA.STATUS_SCANNING;	
	}
		
	serverEl.appendChild(qEl);
	
	var queryEl = soapDoc.getDoc().createElement("query");
	if( !AjxUtil.isEmpty(query) ) {
		for (var key in query) {
			var arr = query[key];
			if(arr) {
				var cnt = arr.length;	
				if(cnt) {
					var fieldEl = soapDoc.getDoc().createElement("field");
					fieldEl.setAttribute("name", key);			
					for(var i=0;i<cnt;i++) {
						var matchEl = soapDoc.getDoc().createElement("match");
						matchEl.setAttribute("value", arr[i][ZaMTAQSummaryItem.A_text]);
						fieldEl.appendChild(matchEl);	
					}	
					queryEl.appendChild	(fieldEl);	
				}
			}
		}
	}
	
	if (offset != null) {
		queryEl.setAttribute("offset", offset);
	}
	
	if (limit != null) {
		queryEl.setAttribute("limit", limit);
	}


	qEl.appendChild(queryEl);
	
	var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;
	params.noAuthToken = true;	
	params.asyncMode = true;
	var callback = new AjxCallback(this, this.mailQStatusCallback,{qName:qName,query:query,offset:offset,limit:limit,force:force});	
	params.callback = callback;

	command.invoke(params);		
}

/**
* this method is called when the server returns MailQStatusResponse 
**/
ZaMTA.prototype.mailQStatusCallback = function (arg,resp) {
	//update my fields
	//ZaMTA.makeTestData1(this);
	var qName = arg.qName;
	if(!resp) {
		var ex = new ZmCsfeException(ZMsg.errorEmptyResponse,ZmCsfeException.CSFE_SVC_ERROR,"ZaMTA.prototype.mailQStatusCallback");
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaMTA.prototype.mailQStatusCallback");
		//this.goPrev();
		return;		
	}
	if(resp.isException && resp.isException()) {
		if(resp.getException().code == ZmCsfeException.SVC_ALREADY_IN_PROGRESS) {
			var details = {obj:this,qName:qName,poll:true};
			ZaApp.getInstance().getMTAController(this._viewInternalId).fireChangeEvent(details);				
		} else if (resp.getException().code == ZmCsfeException.SVC_TEMPORARILY_UNAVAILABLE) {
			ZaApp.getInstance().getCurrentController().popupMsgDialog(ZaMsg.ERROR_PQ_SERVICE_UNAVAILABLE);
		} else {
			ZaApp.getInstance().getCurrentController()._handleException(resp.getException(), "ZaMTA.prototype.mailQStatusCallback");
		}
		return;
	} 	
	var response = resp.getResponse();
	var body = response.Body;
	//update my fields
	if(body && body.GetMailQueueResponse.server && body.GetMailQueueResponse.server[0]) {
		this.initFromJS(body.GetMailQueueResponse.server[0], false);
		var details = {obj:this,poll:true};
		for(var ix in arg) {
			details[ix] = arg[ix];
		}

		ZaApp.getInstance().getMTAController(this._viewInternalId).fireChangeEvent(details);
	} else {
		var ex = new ZmCsfeException(ZMsg["service.UNKNOWN_DOCUMENT"],ZmCsfeException.SVC_UNKNOWN_DOCUMENT,"ZaMTA.prototype.mailQStatusCallback");
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaMTA.prototype.mailQStatusCallback");
		return;	
	}	
}

ZaMTA.prototype.mailQueueAction = function (qName, action, by, val) {
	var soapDoc = AjxSoapDoc.create("MailQueueActionRequest", ZaZimbraAdmin.URN, null);
	var serverEl = soapDoc.set("server", "");
	serverEl.setAttribute("name", this.name);		
	var qEl = soapDoc.getDoc().createElement("queue");
	qEl.setAttribute("name", qName);		
	serverEl.appendChild(qEl);
	
	//var actionEl = 	soapDoc.getDoc().createElement("action");
	var actionEl;
	if(by == "id") {
		actionEl = soapDoc.set("action", val,qEl);
	} else {
		actionEl = soapDoc.getDoc().createElement("action");
		var queryEl = soapDoc.getDoc().createElement("query");
		if(val != null) {
			for (var key in val) {
				var arr = val[key];
				if(arr) {
					var cnt = arr.length;	
					if(cnt) {
						var fieldEl = soapDoc.getDoc().createElement("field");
						fieldEl.setAttribute("name", key);				
						for(var i=0;i<cnt;i++) {
							var matchEl = soapDoc.getDoc().createElement("match");
							matchEl.setAttribute("value", arr[i][ZaMTAQSummaryItem.A_text]);
							fieldEl.appendChild(matchEl);	
						}	
						queryEl.appendChild	(fieldEl);	
					}
				}
			}
		}
		actionEl.appendChild(queryEl);	
		qEl.appendChild(actionEl);	
	}
	
	actionEl.setAttribute("op", action);
	actionEl.setAttribute("by", by);
	


	//qEl.appendChild(actionEl);
	
	var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;	
	params.asyncMode = true;
	params.noAuthToken = true;
	var callback = new AjxCallback(this, this.mailQueueActionClbck, qName);	
	params.callback = callback;

	command.invoke(params);		
}

ZaMTA.prototype.mailQueueActionClbck = function (qName, resp) {
	this[qName][ZaMTA.A_DeferredQ] = ZaMTA.STATUS_STALE;
	this[qName][ZaMTA.A_IncomingQ] = ZaMTA.STATUS_STALE;
	this[qName][ZaMTA.A_ActiveQ] = ZaMTA.STATUS_STALE;
	this[qName][ZaMTA.A_CorruptQ] = ZaMTA.STATUS_STALE;
	this[qName][ZaMTA.A_HoldQ] = ZaMTA.STATUS_STALE;				

	if(resp.isException && resp.isException()) {
		if(resp.getException().code == ZmCsfeException.SVC_ALREADY_IN_PROGRESS) {
			var details = {obj:this,qName:qName};
			ZaApp.getInstance().getMTAController(this._viewInternalId).fireChangeEvent(details);				
		} else if (resp.getException().code == ZmCsfeException.SVC_TEMPORARILY_UNAVAILABLE) {
			ZaApp.getInstance().getCurrentController().popupMsgDialog(ZaMsg.ERROR_PQ_SERVICE_UNAVAILABLE);
		} else {
			ZaApp.getInstance().getCurrentController()._handleException(resp.getException(), "ZaMTA.prototype.mailQueueActionClbck");
		}
	} else {
		this.getMailQStatus(qName);
	}	
}

ZaMTA.prototype.flushQueues = function () {
	var soapDoc = AjxSoapDoc.create("MailQueueFlushRequest", ZaZimbraAdmin.URN, null);
	var serverEl = soapDoc.set("server", "");
	serverEl.setAttribute("name", this.name);		

	//var command = new ZmCsfeCommand();
	var params = new Object();
	params.soapDoc = soapDoc;	
	params.asyncMode = false;
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_FLUSH_QUEUE
	}
	ZaRequestMgr.invoke(params, reqMgrParams);		
}

ZaMTA.initMethod = function () {
	this.attrs = new Object();
	this.id = "";
	this.name="";
	this[ZaItem.A_zimbraId] = "000"
	this[ZaMTA.A_DeferredQ] = {n:ZaMsg.PQ_Loading};
	this[ZaMTA.A_IncomingQ] = {n:ZaMsg.PQ_Loading};
	this[ZaMTA.A_ActiveQ] = {n:ZaMsg.PQ_Loading};	
	this[ZaMTA.A_HoldQ] = {n:ZaMsg.PQ_Loading};	
	this[ZaMTA.A_CorruptQ] = {n:ZaMsg.PQ_Loading};		
		
	this[ZaMTA.A_DeferredQ][ZaMTA.A_refreshTime] = ZaMsg.PQ_Loading;
	this[ZaMTA.A_IncomingQ][ZaMTA.A_refreshTime] = ZaMsg.PQ_Loading;	
	this[ZaMTA.A_ActiveQ][ZaMTA.A_refreshTime] = ZaMsg.PQ_Loading;
	this[ZaMTA.A_HoldQ][ZaMTA.A_refreshTime] = ZaMsg.PQ_Loading;
	this[ZaMTA.A_CorruptQ][ZaMTA.A_refreshTime] = ZaMsg.PQ_Loading;	
	
	this[ZaMTA.A_DeferredQ][ZaMTA.A_pageNum] = 0;
	this[ZaMTA.A_IncomingQ][ZaMTA.A_pageNum] = 0;	
	this[ZaMTA.A_ActiveQ][ZaMTA.A_pageNum] = 0;
	this[ZaMTA.A_HoldQ][ZaMTA.A_pageNum] = 0;
	this[ZaMTA.A_CorruptQ][ZaMTA.A_pageNum] = 0;		
	
	this[ZaMTA.A_DeferredQ][ZaMTA.A_Status] = ZaMTA.STATUS_IDLE;	
	this[ZaMTA.A_IncomingQ][ZaMTA.A_Status] = ZaMTA.STATUS_IDLE;	
	this[ZaMTA.A_ActiveQ][ZaMTA.A_Status] = ZaMTA.STATUS_IDLE;	
	this[ZaMTA.A_HoldQ][ZaMTA.A_Status] = ZaMTA.STATUS_IDLE;	
	this[ZaMTA.A_CorruptQ][ZaMTA.A_Status] = ZaMTA.STATUS_IDLE;					
}
ZaItem.initMethods["ZaMTA"].push(ZaMTA.initMethod);

ZaMTAQSummaryItem = function (d, t, n) {
	if (arguments.length == 0) return;
	ZaItem.call(this,"ZaMTAQSummaryItem");
	this._init();
	if(d) 
		this[ZaMTAQSummaryItem.A_description] = d;
	if(t)
		this[ZaMTAQSummaryItem.A_text] = t;
	if(n)
		this[ZaMTAQSummaryItem.A_count] = n;

}


ZaMTAQSummaryItem.A_text = "t";
ZaMTAQSummaryItem.A_text_col = "textColumn";
ZaMTAQSummaryItem.A_description = "d";
ZaMTAQSummaryItem.A_count = "n";
ZaMTAQSummaryItem.A_count_col = "countColumn";

ZaMTAQSummaryItem.prototype = new ZaItem;
ZaMTAQSummaryItem.prototype.constructor = ZaMTAQSummaryItem;
ZaItem.loadMethods["ZaMTAQSummaryItem"] = new Array();
ZaItem.initMethods["ZaMTAQSummaryItem"] = new Array();

ZaMTAQSummaryItem.prototype.toString = function () {
	return this[ZaMTAQSummaryItem.A_text]+this[ZaMTAQSummaryItem.A_count];
}

/**
* Returns HTML for a tool tip for this account.
*/
ZaMTAQSummaryItem.prototype.getToolTip =
function() {

	// update/null if modified
	if (!this._toolTip) {
		var html = new Array(20);
		var idx = 0;
		html[idx++] = AjxStringUtil.trimHtml(AjxStringUtil.wordWrap({text: AjxStringUtil.htmlEncode(this[ZaMTAQSummaryItem.A_text]), prefix: "<br/>&nbsp;&nbsp;&nbsp;"})).replace(/^&nbsp;&nbsp;&nbsp;/,"");
		html[idx++] = "<br>";
		html[idx++] = this[ZaMTAQSummaryItem.A_count];
		html[idx++] = " ";
		html[idx++] = ZaMsg.PQV_Messages;
		this._toolTip = html.join("");
	}
	return this._toolTip;
}


ZaMTAQMsgItem = function () {
	if (arguments.length == 0) return;
	ZaItem.call(this, "ZaMTAQMsgItem");
	this._init();
}


ZaMTAQMsgItem.A_time = "time";
ZaMTAQMsgItem.A_content_filter = "filter";
ZaMTAQMsgItem.A_origin_host = "host";
ZaMTAQMsgItem.A_sender = "from";
ZaMTAQMsgItem.A_fromdomain = "fromdomain";
ZaMTAQMsgItem.A_todomain = "todomain";
ZaMTAQMsgItem.A_id = "id";
ZaMTAQMsgItem.A_recipients = "to";
ZaMTAQMsgItem.A_size = "size";
ZaMTAQMsgItem.A_origin_ip = "received";
ZaMTAQMsgItem.A_error = "reason";

ZaMTAQMsgItem.prototype = new ZaItem;
ZaMTAQMsgItem.prototype.constructor = ZaMTAQMsgItem;
ZaItem.loadMethods["ZaMTAQMsgItem"] = new Array();
ZaItem.initMethods["ZaMTAQMsgItem"] = new Array();

ZaMTAQMsgItem.prototype.toString = function () {
	return this[ZaMTAQMsgItem.A_id];
}

ZaMTAQMsgItem.prototype.initFromJS = function (obj) {
	this[ZaMTAQMsgItem.A_time] = obj[ZaMTAQMsgItem.A_time];
	this[ZaMTAQMsgItem.A_content_filter] = obj[ZaMTAQMsgItem.A_content_filter];
	this[ZaMTAQMsgItem.A_origin_host] = obj[ZaMTAQMsgItem.A_origin_host];
	this[ZaMTAQMsgItem.A_sender] = obj[ZaMTAQMsgItem.A_sender];
	this[ZaMTAQMsgItem.A_id] = obj[ZaMTAQMsgItem.A_id];
	this[ZaMTAQMsgItem.A_recipients] = obj[ZaMTAQMsgItem.A_recipients];
	this[ZaMTAQMsgItem.A_origin_ip] = obj[ZaMTAQMsgItem.A_origin_ip];
}

/**
* Returns HTML for a tool tip for this account.
*/
ZaMTAQMsgItem.prototype.getToolTip =
function() {
	// update/null if modified
	if (!this._toolTip) {
		var html = new Array(20);
		var idx = 0;
		html[idx++] = AjxStringUtil.htmlEncode(ZaMsg.PQ_Sender + " " + this[ZaMTAQMsgItem.A_sender]);		
		html[idx++] = "<br/>";
		html[idx++] = AjxStringUtil.htmlEncode(ZaMsg.PQ_OriginHost + " " + this[ZaMTAQMsgItem.A_origin_host]);		
		html[idx++] = "<br/>";
		html[idx++] = AjxStringUtil.htmlEncode(ZaMsg.PQ_OriginDomain + " " + this[ZaMTAQMsgItem.A_fromdomain]);		
		html[idx++] = "<br/>";
		html[idx++] = AjxStringUtil.htmlEncode(ZaMsg.PQ_OriginIP + " " + this[ZaMTAQMsgItem.A_origin_ip]);		
		html[idx++] = "<br/>";
		html[idx++] = AjxStringUtil.htmlEncode(ZaMsg.PQ_Recipients + " " + this[ZaMTAQMsgItem.A_recipients]);
		html[idx++] = "<br/>";
		var arr = this[ZaMTAQMsgItem.A_todomain] instanceof Array ? this[ZaMTAQMsgItem.A_todomain] : [this[ZaMTAQMsgItem.A_todomain]];
		html[idx++] = AjxStringUtil.htmlEncode(ZaMsg.PQ_DestinationDomain + " " + ZaUtil.getUniqueArrayElements(arr));		
		html[idx++] = "<br/>";
		html[idx++] = AjxStringUtil.htmlEncode(ZaMsg.PQ_ContentFilter + " " + this[ZaMTAQMsgItem.A_content_filter]);		
		html[idx++] = "<br/>";
		html[idx++] = AjxStringUtil.htmlEncode(ZaMsg.PQ_Size + " " + this[ZaMTAQMsgItem.A_size]);		
		html[idx++] = "<br/>";
		if(this[ZaMTAQMsgItem.A_error] !=null && this[ZaMTAQMsgItem.A_error] != undefined && this[ZaMTAQMsgItem.A_error].length>0)
			html[idx++] = AjxStringUtil.trimHtml(AjxStringUtil.wordWrap({text: AjxStringUtil.htmlEncode(ZaMsg.PQ_Reason + " " + this[ZaMTAQMsgItem.A_error]), prefix: "<br/>&nbsp;&nbsp;&nbsp;"})).replace(/^&nbsp;&nbsp;&nbsp;/,"");

		this._toolTip = html.join("");
	}
	return this._toolTip;
}



PostQSummary_XModelItem = function (){}
XModelItemFactory.createItemType("_POSTQSUMMARY_", "postqsummary", PostQSummary_XModelItem);
PostQSummary_XModelItem.prototype.items = [
				{id:ZaMTA.A_count, type:_NUMBER_},
				{id:ZaMTA.A_pageNum, type:_NUMBER_},
				{id:ZaMTA.A_query, type:_STRING_},
				{id:ZaMTA.A_Status, type:_NUMBER_,choices:ZaMTA.SCANNER_STATUS_CHOICES},
				{id:ZaMTA.A_refreshTime, type:_STRING_}
			];
ZaMTA.myXModel = {
	items: [
		{id:ZaMTA.A_Status, type:_STRING_, ref:ZaMTA.A_Status},
		{id:ZaMTA.A_MTAName, type:_STRING_, ref:ZaMTA.A_MTAName},
		{id:ZaMTA.A_LastError, type:_STRING_, ref:ZaMTA.A_LastError},
		{id:ZaMTA.A_DeferredQ , type:_POSTQSUMMARY_},
		{id:ZaMTA.A_IncomingQ , type:_POSTQSUMMARY_},
		{id:ZaMTA.A_ActiveQ , type:_POSTQSUMMARY_},
		{id:ZaMTA.A_CorruptQ , type:_POSTQSUMMARY_}, 
		{id:ZaMTA.A_HoldQ , type:_POSTQSUMMARY_}		
	]
};
}
if (AjxPackage.define("zimbraAdmin.task.model.ZaTask")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 9/5/11
 * Time: 1:38 AM
 * To change this template use File | Settings | File Templates.
 */
ZaTask = function(noInit) {
	if (noInit) return;
	ZaItem.call(this, "ZaTask");
	this._init();
	this.type = "Task";
}

ZaTask.prototype = new ZaItem;
ZaTask.prototype.constructor = ZaTask;

ZaItem.loadMethods["ZaTask"] = new Array();
ZaItem.initMethods["ZaTask"] = new Array();

//object attributes
ZaTask.A_workingInProcess = "workingInProcess";
ZaTask.A_runningTask = "runningTask";
ZaTask.A2_isExpanded = "expanded";
ZaTask.A2_isWIPExpanded = "WIPExpanded";
ZaTask.A2_isRTExpanded = "RTExpaneded";
ZaTask.A2_isServerExpaned = "ServerExpaned";
ZaTask.A2_notificationCount = "notificationCount";

ZaTask.postLoadDataFunction = new Array();

ZaTask.loadMethod =
function(by, val) {
    this.attrs = new Object();
    this.attrs[ZaTask.A_workingInProcess] = [];
    this.attrs[ZaTask.A_runningTask] = [];
    this.schedulePostLoading();
}
ZaItem.loadMethods["ZaTask"].push(ZaTask.loadMethod);

ZaTask.initMethod = function () {
	this[ZaTask.A2_isExpanded] = false;
    this[ZaTask.A2_isWIPExpanded] = true;
    this[ZaTask.A2_isRTExpanded] = true;
    this[ZaTask.A2_isServerExpaned] = true;
}
ZaItem.initMethods["ZaTask"].push(ZaTask.initMethod);

ZaTask.myXModel = {
    items: [
        {id:ZaTask.A_workingInProcess, ref:"attrs/" + ZaTask.A_workingInProcess, type:_LIST_, listItem:{type:_OBJECT_}},
        {id:ZaTask.A_runningTask, ref:"attrs/" + ZaTask.A_runningTask, type:_LIST_},
        {id:ZaTask.A2_isExpanded, ref:ZaTask.A2_isExpanded, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaTask.A2_isWIPExpanded, ref:ZaTask.A2_isWIPExpanded, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaTask.A2_isRTExpanded, ref:ZaTask.A2_isRTExpanded, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaTask.A2_isServerExpaned, ref:ZaTask.A2_isServerExpaned, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
        {id:ZaTask.A2_notificationCount, ref:ZaTask.A2_notificationCount, type:_NUMBER_, defaultValue:0}
    ]
};

// type 1: for working in process, 2 for running task
ZaTaskItem = function(viewForPopup, cacheName, title, data, position, type, displayName, finishCallback, cacheDialog, dialogType, editData) {
    this.viewForPopup = viewForPopup;
    this.cacheName = cacheName;
    this._title = title;
    this.data = data;
    this.position = position;
    this.type = type || 1;
    this.displayName = displayName;
    this.finishCallback = finishCallback;
    this.cacheDialog = cacheDialog;
}

ZaTaskItem.minDisplayName = new Object();
ZaTaskItem.prototype.getMinDisplayName =
function (title) {
    var ret ;
    if (!ZaTaskItem.minDisplayName[title]) {
        ZaTaskItem.minDisplayName[title] = 1;
        ret = title;
    } else {
        ret  = title + " " + ZaTaskItem.minDisplayName[title];
        ZaTaskItem.minDisplayName[title] ++;
    }
    return ret;
}

ZaTaskItem.prototype.toString = function() {
    if (!this.displayName)
        this.displayName = this.getMinDisplayName(this._title);
    return this.displayName;
}

ZaTaskItem.prototype.getData = function() {
    return this.data._uuid;
}

ZaTask.prototype.schedulePostLoading = function () {
    // Don't disturbe the task view rendering process, when view is realy, start to update data.
    var act = new AjxTimedAction(this, ZaTask.prototype.startPostLoading);
	AjxTimedAction.scheduleAction(act, 100);
}

ZaTask.prototype.startPostLoading = function () {
    for (var i = 0; i < ZaTask.postLoadDataFunction.length; i++) {
        ZaTask.postLoadDataFunction[i].call(this);
    }
}
}

// view
if (AjxPackage.define("zimbraAdmin.home.view.ZaHomeXFormView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 8/26/11
 * Time: 3:47 AM
 * To change this template use File | Settings | File Templates.
 */
ZaHomeXFormView = function(parent, entry) {
	ZaTabView.call(this, {
		parent:parent,
        cssClassName:"ZaHomeTabView DwtTabView",
		iKeyName:"ZaHomeXFormView",
		contextId:ZaId.VIEW_HOME
	});
	this.initForm(ZaHome.myXModel,this.getMyXForm(entry), null);
	this._localXForm.setController(ZaApp.getInstance());
}

ZaHomeXFormView.prototype = new ZaTabView();
ZaHomeXFormView.prototype.constructor = ZaHomeXFormView;
ZaTabView.XFormModifiers["ZaHomeXFormView"] = new Array();

ZaHomeXFormView.prototype.setObject =
function(entry) {

    this._containedObject = new Object();
	this._containedObject.attrs = new Object();

    for (var a in entry.attrs) {
		var modelItem = this._localXForm.getModel().getItem(a) ;
        if ((modelItem != null && modelItem.type == _LIST_) || (entry.attrs[a] != null && entry.attrs[a] instanceof Array)) {
        	//need deep clone
            this._containedObject.attrs [a] =
                    ZaItem.deepCloneListItem (entry.attrs[a]);
        } else {
            this._containedObject.attrs[a] = entry.attrs[a];
        }
	}
	this._containedObject.name = entry.name;
	this._containedObject.type = entry.type;

	if(entry.rights)
		this._containedObject.rights = entry.rights;

	if(entry.setAttrs)
		this._containedObject.setAttrs = entry.setAttrs;

	if(entry.getAttrs)
		this._containedObject.getAttrs = entry.getAttrs;

	if(entry._defaultValues)
		this._containedObject._defaultValues = entry._defaultValues;

	if(entry.id)
		this._containedObject.id = entry.id;

	if(!entry[ZaModel.currentTab])
		this._containedObject[ZaModel.currentTab] = "1";
	else
		this._containedObject[ZaModel.currentTab] = entry[ZaModel.currentTab];

    this._localXForm.setInstance(this._containedObject);
}

ZaHomeXFormView.onCreateDomain = function(ev) {
    var domainListController =  ZaApp.getInstance().getDomainListController();
    ZaDomainListController.prototype._newButtonListener.call(domainListController, ev);
}

ZaHomeXFormView.onConfigGAL = function(ev) {
    var domainList = ZaApp.getInstance().getDomainList();
    if (domainList.size() > 0) {
        var lastDomain = domainList.getVector().getLast();
        var domainListController = ZaApp.getInstance().getDomainListController();
        ZaDomainListController.prototype._openConfigGAL.call(domainListController, lastDomain);
    }
}

ZaHomeXFormView.canConfigGAL =function (ev) {
    var domainList = ZaApp.getInstance().getDomainList();
    var canConfigGAL = false;
    if (domainList.size() > 0) {
        var currentDomain;
        var vector = domainList.getVector();
        for (var i = vector.size() -1; i >= 0; i--) {
            currentDomain = vector.get(i);
            if (ZaDomain.canConfigureGal(currentDomain)) {
                canConfigGAL = true;
                break;
            }
        }
    }
    return canConfigGAL;
}

ZaHomeXFormView.onConfigAuth = function(ev) {
    var domainList = ZaApp.getInstance().getDomainList();
    if (domainList.size() > 0) {
        var lastDomain = domainList.getVector().getLast();
        var domainListController = ZaApp.getInstance().getDomainListController();
        ZaDomainListController.prototype._openAuthWiz.call(domainListController, lastDomain);
    }
}

ZaHomeXFormView.canConfigAuth =function (ev) {
    var domainList = ZaApp.getInstance().getDomainList();
    var canConfigAuth = false;
    if (domainList.size() > 0) {
		canConfigAuth = ZaDomain.canConfigureAuth(domainList.getVector().getLast());
    }
    return canConfigAuth;
}

ZaHomeXFormView.onConfigDefaultCos = function() {
    var cosList = ZaApp.getInstance().getCosList();
    if (cosList.size() > 0) {
        var vector = cosList.getVector();
        var cos;
        for(var i = 0; i < vector.size(); i++) {
            cos = vector.get(i);
            if (cos.name == "default")
                break;
        }
        if (i != vector.size()) {
            ZaApp.getInstance().getCosController().show(cos);
            var parentPath = ZaTree.getPathByArray([ZaMsg.OVP_home, ZaMsg.OVP_configure, ZaMsg.OVP_cos]);
            ZaZimbraAdmin.getInstance().getOverviewPanelController().addObjectItem(parentPath, cos.name, null, true, false, cos);
        }
    }
}

ZaHomeXFormView.onCreateAccount = function(ev) {
    ZaAccountListController.prototype._newAccountListener.call(ZaApp.getInstance().getAccountListController(), ev);
}

ZaHomeXFormView.onManageAccount = function(ev) {
    var tree = ZaZimbraAdmin.getInstance().getOverviewPanelController().getOverviewPanel().getFolderTree();
    var path = ZaTree.getPathByArray([ZaMsg.OVP_home, ZaMsg.OVP_manageAccounts]);
    tree.setSelectionByPath(path, false);
}

ZaHomeXFormView.onViewService = function(ev) {
    var tree = ZaZimbraAdmin.getInstance().getOverviewPanelController().getOverviewPanel().getFolderTree();
    var path = ZaTree.getPathByArray([ZaMsg.OVP_home, ZaMsg.OVP_monitor, ZaMsg.OVP_status]);
    tree.setSelectionByPath(path, false);
}

ZaHomeXFormView.onSearchZimbraHelp = function(ev) {
    var url = "http://support.zimbra.com/help/index.php";
    window.open(url, "_blank");
}

ZaHomeXFormView.onDownloadGuide = function(ev) {
    ZaZimbraAdmin.prototype._dwListener.call(ZaZimbraAdmin.getInstance());
}

ZaHomeXFormView.onHelpLink = function (ev) {
    ZaZimbraAdmin.prototype._helpListener.call(ZaZimbraAdmin.getInstance());
}

ZaHomeXFormView.onCloseSetup = function(ev) {
    var form =this.getForm();
    var setupGroupItem = form.getItemById(form.getId() + "_homeSetupGroup");
    setupGroupItem.hide();
}

ZaHomeXFormView.getWarningPanelItem = function (xFormObject) {
    return xFormObject.items[0].items[0].items[0];
}

ZaHomeXFormView.getHomeMaintenanceItem = function (xFormObject) {
    return xFormObject.items[0].items[0].items[1].items[1];
}

ZaHomeXFormView.getHomeSetupItem = function (xFormObject) {
    return xFormObject.items[0].items[0].items[2].items[0].items[1];
}

ZaHomeXFormView.getWarningPanelCol = function () {
    return ["20px", "*", "120px"];
}

ZaHomeXFormView.showStatusInfo = function () {
    return (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.GLOBAL_STATUS_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]);
}

ZaHomeXFormView.showStaticsInfo = function () {
    return (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.SERVER_STATS_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]);
}

ZaHomeXFormView.showRunTime = function () {
    return (ZaHomeXFormView.showStatusInfo() || ZaHomeXFormView.showStaticsInfo());
}

ZaHomeXFormView.showMT = function() {
    var value = this.getInstanceValue(ZaHome.A2_maintenanceItemNum);
    return value > 1;
}

ZaHomeXFormView.myXFormModifier = function(xFormObject, entry) {
    var cases = [];

    var labelChoices = [];
    var contentChoices = [];

    labelChoices.push(ZaMsg.LBL_HomeGetStared);
    contentChoices.push([]);
    var startContentChoices = contentChoices[contentChoices.length - 1];
    startContentChoices.push({});
    startContentChoices.push({});
    startContentChoices.push({});
    startContentChoices.push({});

    if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.COS_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
        startContentChoices[3] = {value:ZaMsg.LBL_HomeConfigureCos, onClick: ZaHomeXFormView.onConfigDefaultCos};
    }

    if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.DOMAIN_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
        var domainContentChoices = [];
	    if(ZaZimbraAdmin.canCreateTopDomain()) {
            domainContentChoices.push({value:ZaMsg.LBL_HomeCreateDomain, onClick: ZaHomeXFormView.onCreateDomain});
        }

        if (ZaHomeXFormView.canConfigGAL()) {
            domainContentChoices.push({value:ZaMsg.LBL_HomeConfigureGAL, onClick: ZaHomeXFormView.onConfigGAL});
        }

        if (ZaHomeXFormView.canConfigAuth()) {
            domainContentChoices.push({value:ZaMsg.LBL_HomeCOnfigureAuth, onClick: ZaHomeXFormView.onConfigAuth});
        }

        if (domainContentChoices.length > 0) {
            labelChoices.push(ZaMsg.LBL_HomeSetupDomain);
            contentChoices.push(domainContentChoices);
        }
    }

    if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ACCOUNT_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
        var addAccountChoices = [];
        if(ZaZimbraAdmin.canCreateAccount()) {
        	labelChoices.push(ZaMsg.LBL_HomeAddAccounts);
        	addAccountChoices.push({value:ZaMsg.LBL_HomeAddAccount, onClick: ZaHomeXFormView.onCreateAccount});
        } else if(ZaZimbraAdmin.canListAccounts()) {
        	labelChoices.push(ZaMsg.LBL_HomeManageAccount);
        }
        if(ZaZimbraAdmin.canListAccounts()) {
        	addAccountChoices.push({value:ZaMsg.LBL_HomeManageAccount, onClick: ZaHomeXFormView.onManageAccount});
        }
        if(addAccountChoices.length > 0) {
        	contentChoices.push(addAccountChoices);	
        }
    }

    var case1 = {type:_ZATABCASE_, numCols: 3,  colSizes:["37%", "34%", "29%"], caseKey:1,
        paddingStyle: "", width: "100%",
//      cellpadding: 0, height:"400px",  align:_LEFT_, valign:_TOP_,
        items:[
            {type:_GROUP_, colSpan: "*", numCols:1, containerCssClass:"ZaHomeWarningPanel",
                visibilityChecks:[[XForm.checkInstanceValue, ZaHome.A2_showWarningPanel, true]],
                visibilityChangeEventSources: [ZaHome.A2_showWarningPanel],
                items:[
                    {type:_GROUP_, numCols:3,  width:"100%", colSizes:ZaHomeXFormView.getWarningPanelCol(), containerCssClass:"ZaHomeWarningItem",
                        visibilityChecks:[[XForm.checkInstanceValueNot,ZaHome.A2_serviceStatus,true],[ZaHomeXFormView.showStatusInfo]],
                        visibilityChangeEventSources: [ZaHome.A2_serviceStatus],
                        items:[
                            {type:_OUTPUT_, ref: ZaHome.A2_serviceStatus, bmolsnr: true,
                                getDisplayValue: function (value){
                                    if (this.getInstanceValue(ZaHome.A2_serviceDetailedMessage) == ZaMsg.MSG_HomeLoading) {
                                        return "";
                                    }
                                    if (value === undefined) {
                                        return AjxImg.getImageHtml ("UnKnownStatus");
                                    }else if (value === false) {
                                        return AjxImg.getImageHtml ("Critical");
                                    } else {
                                        return AjxImg.getImageHtml ("Check");
                                    }
                                },
                                valueChangeEventSources:[ZaHome.A2_serviceDetailedMessage]
                            },
                            {type:_OUTPUT_, ref: ZaHome.A2_serviceDetailedMessage, bmolsnr: true},
                            {type:_OUTPUT_, value:ZaMsg.LBL_HomeLinkServerStatus, containerCssClass:"ZaLinkedItem",onClick: ZaHomeXFormView.onViewService}
                    ]}
            ]},
            {type:_GROUP_, colSpan: "*", numCols:3,  width:"100%", colSizes:["33%", "34%", "33%"],
                containerCssClass:"ZaHomeInfoPanel",items:[
                {type:_GROUP_, containerCssClass:"ZaHomePanelPage", cssStyle:"overflow:hidden", colSizes:["auto"], items:[
                    {type:_OUTPUT_, colSpan:"2", value:ZaMsg.LBL_HomeSummary, cssClass:"ZaHomeInfoTitle"},
                    {type:_OUTPUT_, label:ZabMsg.LBL_HomeVersion, cssStyle:"word-wrap:break-word;word-break:break-all;",ref: ZaHome.A2_version},
                    {type:_OUTPUT_, label:ZaMsg.LBL_HomeServerNum, ref: ZaHome.A2_serverNum, bmolsnr: true,
                         visibilityChecks:["(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.SERVER_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]);"]
                    },
                    {type:_OUTPUT_, label:ZaMsg.LBL_HomeAccountNum, ref: ZaHome.A2_accountNum, bmolsnr: true,
                         visibilityChecks:["(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ACCOUNT_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]);"]
                    },
                    {type:_OUTPUT_, label:ZaMsg.LBL_HomeDomainNum, ref: ZaHome.A2_domainNum, bmolsnr: true,
                         visibilityChecks:["(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.DOMAIN_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]);"]
                    },
                    {type:_OUTPUT_, label:ZaMsg.LBL_HomeCosNum, ref: ZaHome.A2_cosNum, bmolsnr: true,
                         visibilityChecks:["(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.COS_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]);"]
                    }
                ]},
                {type:_GROUP_, id:"maintenance_grp", containerCssClass:"ZaHomePanelPage", items:[
                    {type:_OUTPUT_, colSpan:"*", value:ZaMsg.LBL_HomeMaintenance, cssClass:"ZaHomeInfoTitle",
                        visibilityChangeEventSources:[ZaHome.A2_maintenanceItemNum],
                        visibilityChecks:[[ZaHomeXFormView.showMT]]
                    } /*
                    {type:_GROUP_, colSpan:"*", numCols:3, width: "100%", colSizes:["*", "20px", "120px"],items:[
                        {type:_OUTPUT_, value:ZaMsg.LBL_HomeLastCleanup},
                        {type:_OUTPUT_, ref: ZaHome.A2_lastCleanup,
                            getDisplayValue: function (value){
                                if (value) {
                                    return AjxImg.getImageHtml ("Check");
                                } else {
                                    return AjxImg.getImageHtml ("Cancel");
                                }
                            }
                        },
                        {type:_OUTPUT_, ref: ZaHome.A2_lastCleanupTime}
                    ]},
                    {type:_GROUP_, colSpan:"*", numCols:3, width: "100%", colSizes:["*", "20px", "120px"],items:[
                        {type:_OUTPUT_, value:ZaMsg.LBL_HomeLastLogPurge},
                        {type:_OUTPUT_, ref: ZaHome.A2_lastLogPurge,
                            getDisplayValue: function (value){
                                if (value) {
                                    return AjxImg.getImageHtml ("Check");
                                } else {
                                    return AjxImg.getImageHtml ("Cancel");
                                }
                            }
                        },
                        {type:_OUTPUT_, ref: ZaHome.A2_lastLogPurgeTime}
                    ]},
                    {type:_GROUP_, colSpan:"*", numCols:3, width: "100%", colSizes:["*", "20px", "120px"],items:[
                        {type:_OUTPUT_, value: ZaMsg.LBL_HomeDBCheck},
                        {type:_OUTPUT_, ref: ZaHome.A2_DBCheckType,
                            getDisplayValue: function (value){
                                if (value) {
                                    return AjxImg.getImageHtml ("Check");
                                } else {
                                    return AjxImg.getImageHtml ("Cancel");
                                }
                            }
                        },
                        {type:_OUTPUT_, ref: ZaHome.A2_DBCheckMessage}
                    ]} */
                ]},
                {type:_GROUP_, containerCssClass:"ZaHomePanelPage",
                    visibilityChecks:[[ZaHomeXFormView.showRunTime]],
                    items:[
                    {type:_OUTPUT_, colSpan:"2", value:ZaMsg.LBL_HomeRuntime, cssClass:"ZaHomeInfoTitle"},
                    {type:_OUTPUT_, label:ZaMsg.LBL_HomeService, ref: ZaHome.A2_serviceStatus, bmolsnr: true,
                        visibilityChecks:[[ZaHomeXFormView.showStatusInfo]],
                        valueChangeEventSources:[ZaHome.A2_serviceStatusMessage],
                        cssStyle:"position:relative;",
                        getDisplayValue: function (value){
                            var imgStr = "";
                            var serviceStatusMsg = this.getInstanceValue(ZaHome.A2_serviceStatusMessage);
                             var imgCssStyle;
                            if (serviceStatusMsg != ZaMsg.MSG_HomeLoading) {
                                imgCssStyle = "position:absolute;left:0px;"
                                if (value === undefined) {
                                    imgStr = AjxImg.getImageHtml ("UnKnownStatus", imgCssStyle);
                                }else if (value === false) {
                                    imgStr =  AjxImg.getImageHtml ("Critical", imgCssStyle);
                                } else {
                                    imgStr =  AjxImg.getImageHtml ("Check", imgCssStyle);
                                }
                            }

                            var textStr = "";
                            if (serviceStatusMsg != "") {
                                textStr = ["<span style='margin-left:16px;'>", serviceStatusMsg, "</span>"].join("");
                            }

                            return imgStr + textStr;

                        }
                    },
                    {type:_OUTPUT_, label:ZaMsg.LBL_HomeActiveSession, align:_LEFT_, ref: ZaHome.A2_activeSession,
                         bmolsnr: true,
                        visibilityChecks:[[ZaHomeXFormView.showStaticsInfo]]},
                    {type:_OUTPUT_, label:ZaMsg.LBL_HomeQueueLength, ref: ZaHome.A2_queueLength, bmolsnr: true,
                        visibilityChecks:[[ZaHomeXFormView.showStaticsInfo]]}
                    /*
                    {type:_OUTPUT_, label:ZabMsg.LBL_HomeMsgCount, ref: ZaHome.A2_messageCount},
                    {type:_OUTPUT_, label:ZabMsg.LBL_HomeMsgVolume, ref: ZaHome.A2_messageVolume} */
                ]}
            ]},
            {type:_GROUP_, colSpan: "*", id:"homeSetupGroup", containerCssClass:"ZaHomeSetupPanelContainer", cssClass:"ZaHomeSetupPanel", numCols:1, items:[
                {type:_GROUP_, colSpan: "*", numCols: 3,  width:"100%", colSizes:["37%", "34%", "29%"],
                    containerCssClass:"ZaHomeSetupPanelContent", items:[
                    {type:_GROUP_, colSpan: "*", width:"100%", numCols:2, colSizes:["100%", "20px"], items:[
                        {type:_CELL_SPACER_},
                        {type:_DWT_IMAGE_, value: "ImgRemoveLineUp", containerCssStyle:"cursor: pointer;", cssStyle:"position:static;display:none;",  onClick:ZaHomeXFormView.onCloseSetup}
                    ]},
                    {type:_SETUPGROUP_, colSpan: "*", headerLabels: labelChoices, contentItems: contentChoices}
                ]}
            ]}
        ]
    };

    cases.push(case1);

    xFormObject.tableCssStyle="width:100%;";
	xFormObject.items = [
			{type:_SWITCH_, align:_LEFT_, valign:_TOP_, items:cases}
	];
};
ZaTabView.XFormModifiers["ZaHomeXFormView"].push(ZaHomeXFormView.myXFormModifier);

ZaHomeXFormView.prototype.getBarImage = function () {
    return "Home";
}
}
if (AjxPackage.define("zimbraAdmin.accounts.view.ZaAccountXFormView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* This class describes a view of a single email Account
* @class ZaAccountXFormView
* @contructor
* @param parent {DwtComposite}
* @param app {ZaApp}
* @author Greg Solovyev
**/
ZaAccountXFormView = function(parent, entry) {
    ZaTabView.call(this, {
        parent:parent,
        iKeyName:"ZaAccountXFormView",
        contextId:ZaId.TAB_ACCT_EDIT
    });
    this.accountStatusChoices = [
        {value:ZaAccount.ACCOUNT_STATUS_ACTIVE, label:ZaAccount.getAccountStatusMsg (ZaAccount.ACCOUNT_STATUS_ACTIVE)},
        {value:ZaAccount.ACCOUNT_STATUS_CLOSED, label:ZaAccount.getAccountStatusMsg (ZaAccount.ACCOUNT_STATUS_CLOSED)},
        {value:ZaAccount.ACCOUNT_STATUS_LOCKED, label: ZaAccount.getAccountStatusMsg (ZaAccount.ACCOUNT_STATUS_LOCKED)},
        {value:ZaAccount.ACCOUNT_STATUS_LOCKOUT, label: ZaAccount.getAccountStatusMsg (ZaAccount.ACCOUNT_STATUS_LOCKOUT), visible: false},
        {value:ZaAccount.ACCOUNT_STATUS_PENDING, label: ZaAccount.getAccountStatusMsg (ZaAccount.ACCOUNT_STATUS_PENDING)},
        {value:ZaAccount.ACCOUNT_STATUS_MAINTENANCE, label:ZaAccount.getAccountStatusMsg(ZaAccount.ACCOUNT_STATUS_MAINTENANCE)}
    ];
    this.cosChoices = new XFormChoices([], XFormChoices.OBJECT_LIST, "id", "name");
    this.TAB_INDEX = 0;
    this._domains = {} ;
    //console.time("ZaAccountXFormView.initForm");
    //DBG.timePt(AjxDebug.PERF, "started initForm");
    this.initForm(ZaAccount.myXModel,this.getMyXForm(entry), null);
    this._localXForm._setAllowSelection();//bug13705,allow account copyable
    //console.timeEnd("ZaAccountXFormView.initForm");
    //DBG.timePt(AjxDebug.PERF, "finished initForm");
}

ZaAccountXFormView.prototype = new ZaTabView();
ZaAccountXFormView.prototype.constructor = ZaAccountXFormView;
ZaTabView.XFormModifiers["ZaAccountXFormView"] = new Array();
ZaTabView.ObjectModifiers["ZaAccountXFormView"] = [] ;
ZaAccountXFormView.zimletChoices = new XFormChoices([], XFormChoices.SIMPLE_LIST);
ZaAccountXFormView.themeChoices = new XFormChoices([], XFormChoices.OBJECT_LIST);

/**
 * * Get Tab's Icon according to different account's type
 * **/
ZaAccountXFormView.prototype.getTabIcon =
function () {
    if (this._containedObject && this._containedObject.attrs) {
        var resultType;
                var account = this._containedObject;
        if(account.attrs[ZaAccount.A_zimbraIsAdminAccount]=="TRUE" ) {
                       resultType = "AdminUser";
                } else if (account.attrs[ZaAccount.A_zimbraIsDelegatedAdminAccount] == "TRUE") {
                       resultType = "DomainAdminUser";
                } else if (account.attrs[ZaAccount.A_zimbraIsSystemResource] == "TRUE") {
                       resultType = "SystemResource";
                } else {
                       resultType = "Account";
                }
        return resultType;
    }else{
        return "Account" ;
    }
}

/**
* Sets the object contained in the view
* @param entry - {ZaAccount} object to display
**/
ZaAccountXFormView.prototype.setObject =
function(entry) {
    //handle the special attributes to be displayed in xform
    //TODO  manageSpecialAttrs can be part of ZaItem.ObjectModifiers ;
    entry.manageSpecialAttrs();
    entry.modifyObject();

    this._containedObject = new ZaAccount();
    this._containedObject.attrs = new Object();

    for (var a in entry.attrs) {
        var modelItem = this._localXForm.getModel().getItem(a) ;
        if ((modelItem != null && modelItem.type == _LIST_) || (entry.attrs[a] != null && entry.attrs[a] instanceof Array)) {
            //need deep clone
            this._containedObject.attrs [a] =
                    ZaItem.deepCloneListItem (entry.attrs[a]);
        } else {
            this._containedObject.attrs[a] = entry.attrs[a];
        }
    }
    this._containedObject.name = entry.name;
    this._containedObject.type = entry.type;

    if(entry.rights)
        this._containedObject.rights = entry.rights;

    if(entry.setAttrs)
        this._containedObject.setAttrs = entry.setAttrs;
    else this._containedObject.setAttrs = {};

    if(entry.getAttrs)
        this._containedObject.getAttrs = entry.getAttrs;

    if(entry._defaultValues)
        this._containedObject._defaultValues = entry._defaultValues;

    if(entry.id)
        this._containedObject.id = entry.id;

    for (var a in entry.attrs) {
        var modelItem = this._localXForm.getModel().getItem(a) ;
        if ((modelItem != null && modelItem.type == _LIST_)
           || (entry.attrs[a] != null && entry.attrs[a] instanceof Array))
        {  //need deep clone
            this._containedObject.attrs [a] =
                    ZaItem.deepCloneListItem (entry.attrs[a]);
        } else {
            this._containedObject.attrs[a] = entry.attrs[a];
        }
     }

    //add the member group, need a deep clone
//    this._containedObject[ZaAccount.A2_memberOf] = entry [ZaAccount.A2_memberOf];
//    this._containedObject[ZaAccount.A2_memberOf] = {};
    this._containedObject[ZaAccount.A2_memberOf] =
                ZaAccountMemberOfListView.cloneMemberOf(entry);

    //add the memberList page information
    this._containedObject[ZaAccount.A2_directMemberList + "_offset"] = entry[ZaAccount.A2_directMemberList + "_offset"];
    this._containedObject[ZaAccount.A2_directMemberList + "_more"] = entry[ZaAccount.A2_directMemberList + "_more"];
    this._containedObject[ZaAccount.A2_indirectMemberList + "_offset"] = entry[ZaAccount.A2_indirectMemberList + "_offset"];
    this._containedObject[ZaAccount.A2_indirectMemberList + "_more"] = entry[ZaAccount.A2_indirectMemberList + "_more"];
    this._containedObject[ZaAccount.A2_nonMemberList + "_offset"] = entry[ZaAccount.A2_nonMemberList + "_offset"];
    this._containedObject[ZaAccount.A2_nonMemberList + "_more"] = entry[ZaAccount.A2_nonMemberList + "_more"];

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.ALIASES_TAB_ATTRS, ZaAccountXFormView.ALIASES_TAB_RIGHTS)) {
        if(this._containedObject.attrs[ZaAccount.A_zimbraMailAlias]) {
            if(!this._containedObject.attrs[ZaAccount.A_zimbraMailAlias] instanceof Array) {
                this._containedObject.attrs[ZaAccount.A_zimbraMailAlias] = [this._containedObject.attrs[ZaAccount.A_zimbraMailAlias]];
            }
        }
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.FORWARDING_TAB_ATTRS, ZaAccountXFormView.FORWARDING_TAB_RIGHTS)) {
        if(this._containedObject.attrs[ZaAccount.A_zimbraMailForwardingAddress]) {
            if(!this._containedObject.attrs[ZaAccount.A_zimbraMailForwardingAddress] instanceof Array) {
                this._containedObject.attrs[ZaAccount.A_zimbraMailForwardingAddress] = [this._containedObject.attrs[ZaAccount.A_zimbraMailForwardingAddress]];
            }
        }
    }

    if(this._containedObject.attrs[ZaAccount.A_COSId]) {
        this._containedObject[ZaAccount.A2_autoCos] = "FALSE" ;
    }
    if(!this._containedObject.attrs[ZaAccount.A_COSId]) {
        this._containedObject[ZaAccount.A2_autoCos] = "TRUE" ;
    }
    if(this._containedObject.attrs[ZaAccount.A_manager]) {
        this._containedObject.attrs[ZaAccount.A_manager] = ZaAccountXFormView.getEmailFromUid(this._containedObject.attrs[ZaAccount.A_manager]);
    }
    if(this._containedObject.setAttrs[ZaAccount.A_COSId]) {
        var cos = ZaCos.getCosById(this._containedObject.attrs[ZaAccount.A_COSId]);
        this.cosChoices.setChoices([cos]);
        this.cosChoices.dirtyChoices();
    }

    this._containedObject[ZaAccount.A2_autodisplayname] = entry[ZaAccount.A2_autodisplayname];
    this._containedObject[ZaAccount.A2_confirmPassword] = entry[ZaAccount.A2_confirmPassword];

    if(!entry[ZaModel.currentTab])
        this._containedObject[ZaModel.currentTab] = "1";
    else
        this._containedObject[ZaModel.currentTab] = entry[ZaModel.currentTab];

    //check the account type here
    var domainName = ZaAccount.getDomain (this._containedObject.name) ;
    var domainObj =  ZaDomain.getDomainByName (domainName) ;
    this._containedObject[ZaAccount.A2_accountTypes] = domainObj.getAccountTypes () ;
    this._containedObject[ZaAccount.A2_currentAccountType] = entry[ZaAccount.A2_currentAccountType]  ;
//    ZaAccountXFormView.themeChoices = new XFormChoices([], XFormChoices.SIMPLE_LIST);
    if(!entry.getAttrs || entry.getAttrs[ZaAccount.A_zimbraAvailableSkin] || entry.getAttrs.all) {
        var skins = ZaApp.getInstance().getInstalledSkins();

        if(AjxUtil.isEmpty(skins)) {

            if(domainObj && domainObj.attrs && !AjxUtil.isEmpty(domainObj.attrs[ZaDomain.A_zimbraAvailableSkin])) {
                //if we cannot get all zimlets try getting them from domain
                skins = domainObj.attrs[ZaDomain.A_zimbraAvailableSkin];
            } else if(entry._defaultValues && entry._defaultValues.attrs && !AjxUtil.isEmpty(entry._defaultValues.attrs[ZaAccount.A_zimbraAvailableSkin])) {
                //if we cannot get all zimlets from domain either, just use whatever came in "defaults" which would be what the COS value is
                skins = entry._defaultValues.attrs[ZaAccount.A_zimbraAvailableSkin];
            } else {
                skins = [];
            }
        } else {
            if (AjxUtil.isString(skins))     {
                skins = [skins];
            }
        }

        var skinsChoices = ZaApp.getInstance().getSkinChoices(skins);
        ZaAccountXFormView.themeChoices.setChoices(skinsChoices);
        ZaAccountXFormView.themeChoices.dirtyChoices();

    }

    if(!entry.getAttrs || entry.getAttrs[ZaAccount.A_zimbraZimletAvailableZimlets] || entry.getAttrs.all) {
        //get sll Zimlets
        var allZimlets = ZaZimlet.getAll("extension");

        if(!AjxUtil.isEmpty(allZimlets) && allZimlets instanceof ZaItemList || allZimlets instanceof AjxVector)
            allZimlets = allZimlets.getArray();

        if(AjxUtil.isEmpty(allZimlets)) {

            if(domainObj && domainObj.attrs && !AjxUtil.isEmpty(domainObj.attrs[ZaDomain.A_zimbraZimletDomainAvailableZimlets])) {
                //if we cannot get all zimlets try getting them from domain
                allZimlets = domainObj.attrs[ZaDomain.A_zimbraZimletDomainAvailableZimlets];
            } else if(entry._defaultValues && entry._defaultValues.attrs && !AjxUtil.isEmpty(entry._defaultValues.attrs[ZaAccount.A_zimbraZimletAvailableZimlets])) {
                //if we cannot get all zimlets from domain either, just use whatever came in "defaults" which would be what the COS value is
                allZimlets = entry._defaultValues.attrs[ZaAccount.A_zimbraZimletAvailableZimlets];
            } else {
                allZimlets = [];
            }
            ZaAccountXFormView.zimletChoices.setChoices(allZimlets);
            ZaAccountXFormView.zimletChoices.dirtyChoices();

        } else {
            //convert objects to strings
            var cnt = allZimlets.length;
            var _tmpZimlets = [];
            for(var i=0; i<cnt; i++) {
                var zimlet = allZimlets[i];
                _tmpZimlets.push(zimlet.name);
            }
            ZaAccountXFormView.zimletChoices.setChoices(_tmpZimlets);
            ZaAccountXFormView.zimletChoices.dirtyChoices();
        }
    }

    if (domainObj && domainObj.attrs &&
        domainObj.attrs[ZaDomain.A_AuthMech] &&
        (domainObj.attrs[ZaDomain.A_AuthMech] != ZaDomain.AuthMech_zimbra) ) {
        this._containedObject[ZaAccount.A2_isExternalAuth] = true;
    } else {
        this._containedObject[ZaAccount.A2_isExternalAuth] = false;
    }

    if(ZaItem.modelExtensions["ZaAccount"]) {
        for(var i = 0; i< ZaItem.modelExtensions["ZaAccount"].length;i++) {
            var ext = ZaItem.modelExtensions["ZaAccount"][i];
            if(entry[ext]) {
                if (entry[ext] instanceof Array) {
                    this._containedObject[ext] = ZaItem.deepCloneListItem (entry[ext]);
                    if (entry[ext]._version) {
                        this._containedObject[ext]._version = entry[ext]._version;
                    }

                } else {
                    this._containedObject[ext] = {};
                    for (var a in entry[ext]) {
                        var modelItem = this._localXForm.getModel().getItem(a) ;
                        if ((modelItem != null && modelItem.type == _LIST_)
                           || (entry[ext][a] != null && entry[ext][a] instanceof Array))
                        {  //need deep clone
                            this._containedObject[ext][a] =
                                    ZaItem.deepCloneListItem (entry[ext][a]);
                        } else {
                            this._containedObject[ext][a] = entry[ext][a];
                        }
                    }
                }
            }

        }
    }

    this.modifyContainedObject () ;

    this._localXForm.setInstance(this._containedObject);

    this.formDirtyLsnr = new AjxListener(ZaApp.getInstance().getCurrentController(), ZaXFormViewController.prototype.handleXFormChange);
    this._localXForm.addListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, this.formDirtyLsnr);
    this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, this.formDirtyLsnr);

}

ZaAccountXFormView.gotNoSkins = function() {
    return !ZaAccountXFormView.gotSkins.call(this);
}

ZaAccountXFormView.gotSkins = function () {
    return (
            ( (ZaApp.getInstance() != null)
              && (ZaApp.getInstance().getInstalledSkins() != null)
              && (ZaApp.getInstance().getInstalledSkins().length > 0)
             )
             || !AjxUtil.isEmpty(this.getInstanceValue(ZaAccount.A_zimbraAvailableSkin))
             || !AjxUtil.isEmpty(this.getInstance()._defaultValues.attrs[ZaAccount.A_zimbraAvailableSkin])
           );
}

ZaAccountXFormView.preProcessCOS =
function(value,  form) {
    var val = value;
    if(ZaItem.ID_PATTERN.test(value))  {
        val = value;
    } else {
        var cos = ZaCos.getCosByName(value);
        if(cos)
            val = cos.id;
    }
    return val;
}

//update the account type output and it is called when the domain name is changed.
ZaAccountXFormView.accountTypeItemId = "account_type_output_" + Dwt.getNextId();
ZaAccountXFormView.prototype.updateAccountType =
function ()  {
    var item = this._localXForm.getItemsById (ZaAccountXFormView.accountTypeItemId) [0] ;
    item.updateElement(ZaAccount.getAccountTypeOutput.call(item, true)) ;
}

ZaAccountXFormView.cosGroupItemId = "cos_grouper_" + Dwt.getNextId();
ZaAccountXFormView.prototype.updateCosGrouper =
function () {
    var item = this._localXForm.getItemsById (ZaAccountXFormView.cosGroupItemId) [0] ;
    item.items[0].setElementEnabled(true);
    item.updateElement() ;
}
/*
ZaAccountXFormView.onRepeatRemove =
function (index, form) {
    var path = this.getRefPath();
    this.getModel().removeRow(this.getInstance(), path, index);
    this.items[index].clearError();
    this.getForm().setIsDirty(true,this);
    //form.parent.setDirty(true);
}*/


ZaAccountXFormView.isSendingFromAnyAddressDisAllowed = function () {
    return (this.getInstanceValue(ZaAccount.A_zimbraAllowAnyFromAddress) != 'TRUE');
}

ZaAccountXFormView.aliasSelectionListener =
function (ev) {
    var arr = this.widget.getSelection();
    if(arr && arr.length) {
        arr.sort();
        //the selection values are HTML encoded, need to decode them before saving to cache.
        arr =  AjxUtil.htmlDecode(arr);
        this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_alias_selection_cache, arr);
    } else {
        this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_alias_selection_cache, null);
    }
    if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
        ZaAccountXFormView.editAliasButtonListener.call(this);
    }
}

ZaAccountXFormView.nonMemberOfSelectionListener =
function (ev) {
    var arr = this.widget.getSelection();
    if(arr && arr.length) {
        arr.sort();
        this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_nonMemberListSelected, arr);
    } else {
        this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_nonMemberListSelected, null);
    }

    if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
        ZaAccountMemberOfListView._addSelectedLists(this.getForm(), arr);
    }
}

ZaAccountXFormView.directMemberOfSelectionListener =
function (ev) {
    var arr = this.widget.getSelection();
    if(arr && arr.length) {
        arr.sort();
        this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_directMemberListSelected, arr);
    } else {
        this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_directMemberListSelected, null);
    }

    if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
        ZaAccountMemberOfListView._removeSelectedLists(this.getForm(), arr);
    }
}


ZaAccountXFormView.indirectMemberOfSelectionListener =
function (ev) {
    var arr = this.widget.getSelection();
    if(arr && arr.length) {
        arr.sort();
        this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_indirectMemberListSelected, arr);
    } else {
        this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_indirectMemberListSelected, null);
    }
}


ZaAccountXFormView.isEditAliasEnabled = function () {
    return (!AjxUtil.isEmpty(this.getInstanceValue(ZaAccount.A2_alias_selection_cache)) && this.getInstanceValue(ZaAccount.A2_alias_selection_cache).length==1);
}

ZaAccountXFormView.isDeleteAliasEnabled = function () {
    return (!AjxUtil.isEmpty(this.getInstanceValue(ZaAccount.A2_alias_selection_cache)));
}

ZaAccountXFormView.deleteAliasButtonListener = function () {
    var instance = this.getInstance();
    if(instance[ZaAccount.A2_alias_selection_cache] != null) {
        var cnt = instance[ZaAccount.A2_alias_selection_cache].length;
        if(cnt && instance.attrs[ZaAccount.A_zimbraMailAlias]) {
            var aliasArr = instance.attrs[ZaAccount.A_zimbraMailAlias];
            for(var i=0;i<cnt;i++) {
                var cnt2 = aliasArr.length-1;
                for(var k=cnt2;k>=0;k--) {
                    if(aliasArr[k]==instance[ZaAccount.A2_alias_selection_cache][i]) {
                        aliasArr.splice(k,1);
                        break;
                    }
                }
            }
            this.getModel().setInstanceValue(instance, ZaAccount.A_zimbraMailAlias, aliasArr);
        }
    }
    this.getModel().setInstanceValue(instance, ZaAccount.A2_alias_selection_cache, []);
    this.getForm().parent.setDirty(true);
}

ZaAccountXFormView.editAliasButtonListener =
function () {
    var instance = this.getInstance();
    if(instance.alias_selection_cache && instance.alias_selection_cache[0]) {
        var formPage = this.getForm().parent;
        if(!formPage.editAliasDlg) {
            formPage.editAliasDlg = new ZaEditAliasXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "550px", "150px",ZaMsg.Edit_Alias_Title);
            formPage.editAliasDlg.registerCallback(DwtDialog.OK_BUTTON, ZaAccountXFormView.updateAlias, this.getForm(), null);
        }
        var obj = {};
        obj[ZaAccount.A_name] = instance[ZaAccount.A2_alias_selection_cache][0];
        var cnt = instance.attrs[ZaAccount.A_zimbraMailAlias].length;
        for(var i=0;i<cnt;i++) {
            if(instance[ZaAccount.A2_alias_selection_cache][0]==instance.attrs[ZaAccount.A_zimbraMailAlias][i]) {
                obj[ZaAlias.A_index] = i;
                break;
            }
        }

        formPage.editAliasDlg.setObject(obj);
        formPage.editAliasDlg.popup();
    }
}

ZaAccountXFormView.updateAlias = function () {
    if(this.parent.editAliasDlg) {
        this.parent.editAliasDlg.popdown();
        var obj = this.parent.editAliasDlg.getObject();
        var instance = this.getInstance();
        var arr = instance.attrs[ZaAccount.A_zimbraMailAlias];
        if(obj[ZaAlias.A_index] >=0 && arr[obj[ZaAlias.A_index]] != obj[ZaAccount.A_name] ) {
            //get domain name
            var domain;
            var domainName = ZaAccount.getDomain(obj[ZaAccount.A_name]);
            try {
                domain = ZaDomain.getDomainByName(domainName);
            } catch (ex) {

            }
            //check if have access to create aliases in this domain
            if(!domain || !ZaItem.hasRight(ZaDomain.RIGHT_CREATE_ALIAS, domain)) {
                ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_NO_PERMISSION_CREATE_ALIAS, [domainName])) ;
            } else {
                var viewController = null;
                viewController = ZaApp.getInstance().getControllerById (this.parent.__internalId);

                var account = null;
                if(viewController) {
                    account = viewController._findAlias(obj[ZaAccount.A_name]);
                }

                if(account) {
                    var warning = null;
                    switch(account.type) {
                            case ZaItem.DL:
                                if(account.name == obj[ZaAccount.A_name]) {
                                    warning = AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS3,[account.name]);
                                } else {
                                    warning = AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS4,[account.name, obj[ZaAccount.A_name]]);
                                }
                            break;
                            case ZaItem.ACCOUNT:
                                if(account.name == obj[ZaAccount.A_name]) {
                                    warning= AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS2,[account.name]);
                                } else {
                                    warning= AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS1,[account.name, obj[ZaAccount.A_name]]);
                                }
                            break;
                            case ZaItem.RESOURCE:
                                if(account.name == obj[ZaAccount.A_name]) {
                                    warning = AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS5,[account.name]);
                                } else {
                                    warning = AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS6,[account.name, obj[ZaAccount.A_name]]);
                                }
                            break;
                            default:
                                warning = AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS0,[obj[ZaAccount.A_name]]);
                            break;
                    }
                    ZaApp.getInstance().getCurrentController().popupErrorDialog(warning);
                } else {
                    arr[obj[ZaAlias.A_index]] = obj[ZaAccount.A_name];
                    this.getModel().setInstanceValue(this.getInstance(),ZaAccount.A_zimbraMailAlias, arr);
                    this.getModel().setInstanceValue(this.getInstance(),ZaAccount.A2_alias_selection_cache, new Array());
                    this.parent.setDirty(true);
                }
            }
        }
    }
}

ZaAccountXFormView.addAliasButtonListener =
function () {
    var instance = this.getInstance();
    var formPage = this.getForm().parent;
    if(!formPage.addAliasDlg) {
        formPage.addAliasDlg = new ZaEditAliasXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "550px", "150px",ZaMsg.Add_Alias_Title);
        formPage.addAliasDlg.registerCallback(DwtDialog.OK_BUTTON, ZaAccountXFormView.addAlias, this.getForm(), null);
    }

    var obj = {};
    obj[ZaAccount.A_name] = "";
    obj[ZaAlias.A_index] = - 1;
    formPage.addAliasDlg.setObject(obj);
    formPage.addAliasDlg.popup();
}

ZaAccountXFormView.addAlias  = function () {
    if(this.parent.addAliasDlg) {
        this.parent.addAliasDlg.popdown();
        var obj = this.parent.addAliasDlg.getObject();
        if(obj[ZaAccount.A_name] && obj[ZaAccount.A_name].length>1) {
            //get domain name
            var domain;
            var domainName = ZaAccount.getDomain(obj[ZaAccount.A_name]);
            try {
                domain = ZaDomain.getDomainByName(domainName);
            } catch (ex) {

            }
            //check if have access to create aliases in this domain
            if(!domain || !ZaItem.hasRight(ZaDomain.RIGHT_CREATE_ALIAS, domain)) {
                ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_NO_PERMISSION_CREATE_ALIAS, [domainName])) ;
            } else {
                var viewController = null;
                viewController = ZaApp.getInstance().getControllerById (this.parent.__internalId);

                var account = null;
                if(viewController) {
                    account = viewController._findAlias(obj[ZaAccount.A_name]);
                }

                if(account) {
                    var warning = null;
                    switch(account.type) {
                            case ZaItem.DL:
                                if(account.name == obj[ZaAccount.A_name]) {
                                    warning = AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS3,[account.name]);
                                } else {
                                    warning = AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS4,[account.name, obj[ZaAccount.A_name]]);
                                }
                            break;
                            case ZaItem.ACCOUNT:
                                if(account.name == obj[ZaAccount.A_name]) {
                                    warning= AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS2,[account.name]);
                                } else {
                                    warning= AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS1,[account.name, obj[ZaAccount.A_name]]);
                                }
                            break;
                            case ZaItem.RESOURCE:
                                if(account.name == obj[ZaAccount.A_name]) {
                                    warning = AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS5,[account.name]);
                                } else {
                                    warning = AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS6,[account.name, obj[ZaAccount.A_name]]);
                                }
                            break;
                            default:
                                warning = AjxMessageFormat.format(ZaMsg.WARNING_EACH_ALIAS0,[obj[ZaAccount.A_name]]);
                            break;
                    }
                    ZaApp.getInstance().getCurrentController().popupErrorDialog(warning);
                }
                else {
                    var instance = this.getInstance();
                    var arr = instance.attrs[ZaAccount.A_zimbraMailAlias];
                    arr.push(obj[ZaAccount.A_name]);
                    this.getModel().setInstanceValue(this.getInstance(),ZaAccount.A_zimbraMailAlias, arr);
                    this.getModel().setInstanceValue(this.getInstance(),ZaAccount.A2_alias_selection_cache, new Array());
                    this.parent.setDirty(true);
                }

            }
        }
    }
}


ZaAccountXFormView.isAuthfromInternal =
function(acctName) {
    var res = true;
    var domainName = null
    var acct = acctName.split("@");
    if (acct.length == 2) domainName = acct[1];
    else domainName = acct[0];

    if(domainName) {
        var domainObj = ZaDomain.getDomainByName(domainName);
        if(domainObj.attrs[ZaDomain.A_AuthMech] != ZaDomain.AuthMech_zimbra){
            res = false;;
        }
        if(!res && domainObj.attrs[ZaDomain.A_zimbraAuthFallbackToLocal] == "TRUE")
            res = true;
    }
    return res;
}

ZaAccountXFormView.isAuthfromInternalSync =
function(domainName, attrName) {

        var acctName = null;
        if(attrName) {
                var instance = this.getInstance();
                if(instance)
                        acctName = this.getInstanceValue(attrName);

        }
        if(!acctName) acctName = domainName;
        return ZaAccountXFormView.isAuthfromInternal(acctName);
}


ZaAccountXFormView.isEditFwdAddrEnabled = function () {
    return (!AjxUtil.isEmpty(this.getInstanceValue(ZaAccount.A2_fwdAddr_selection_cache)) && this.getInstanceValue(ZaAccount.A2_fwdAddr_selection_cache).length==1);
}

ZaAccountXFormView.isDeleteFwdAddrEnabled = function () {
    return (!AjxUtil.isEmpty(this.getInstanceValue(ZaAccount.A2_fwdAddr_selection_cache)));
}

ZaAccountXFormView.isEditCalFwdAddrEnabled = function () {
    return (!AjxUtil.isEmpty(this.getInstanceValue(ZaAccount.A2_calFwdAddr_selection_cache)) && this.getInstanceValue(ZaAccount.A2_calFwdAddr_selection_cache).length==1);
}

ZaAccountXFormView.isDeleteCalFwdAddrEnabled = function () {
    return (!AjxUtil.isEmpty(this.getInstanceValue(ZaAccount.A2_calFwdAddr_selection_cache)));
}

ZaAccountXFormView.deleteFwdAddrButtonListener = function () {
    var instance = this.getInstance();
    if(instance[ZaAccount.A2_fwdAddr_selection_cache] != null) {
        var cnt = instance[ZaAccount.A2_fwdAddr_selection_cache].length;
        if(cnt && instance.attrs[ZaAccount.A_zimbraMailForwardingAddress]) {
            var arr = instance.attrs[ZaAccount.A_zimbraMailForwardingAddress];
            for(var i=0;i<cnt;i++) {
                var cnt2 = arr.length-1;
                for(var k=cnt2;k>=0;k--) {
                    if(arr[k]==instance[ZaAccount.A2_fwdAddr_selection_cache][i]) {
                        arr.splice(k,1);
                        break;
                    }
                }
            }
            this.getModel().setInstanceValue(instance, ZaAccount.A_zimbraMailForwardingAddress, arr);
            this.getModel().setInstanceValue(instance, ZaAccount.A2_fwdAddr_selection_cache, []);
        }
    }
    this.getForm().parent.setDirty(true);
}

ZaAccountXFormView.deleteCalFwdAddrButtonListener = function () {
    var instance = this.getInstance();
    if(instance[ZaAccount.A2_calFwdAddr_selection_cache] != null) {
        var cnt = instance[ZaAccount.A2_calFwdAddr_selection_cache].length;
        if(cnt && instance.attrs[ZaAccount.A_zimbraPrefCalendarForwardInvitesTo]) {
            var arr = instance.attrs[ZaAccount.A_zimbraPrefCalendarForwardInvitesTo];
            for(var i=0;i<cnt;i++) {
                var cnt2 = arr.length-1;
                for(var k=cnt2;k>=0;k--) {
                    if(arr[k]==instance[ZaAccount.A2_calFwdAddr_selection_cache][i]) {
                        arr.splice(k,1);
                        break;
                    }
                }
            }
            this.getModel().setInstanceValue(instance, ZaAccount.A_zimbraPrefCalendarForwardInvitesTo, arr);
            this.getModel().setInstanceValue(instance, ZaAccount.A2_calFwdAddr_selection_cache, []);
        }
    }
    this.getForm().parent.setDirty(true);
}

ZaAccountXFormView.fwdAddrSelectionListener =
function (ev) {
    var arr = this.widget.getSelection();
    if(arr && arr.length) {
        arr.sort();
        // When retrieving data from view make sure to html decode it
        arr = AjxUtil.htmlDecode(arr);
        this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_fwdAddr_selection_cache, arr);
    } else {
        this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_fwdAddr_selection_cache, []);
    }
    if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
        ZaAccountXFormView.editFwdAddrButtonListener.call(this);
    }
}

ZaAccountXFormView.calFwdAddrSelectionListener =
function (ev) {
    var arr = this.widget.getSelection();
    if(arr && arr.length) {
        arr.sort();
        // When retrieving data from view make sure to html decode it
        arr = AjxUtil.htmlDecode(arr);
        this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_calFwdAddr_selection_cache, arr);
    } else {
        this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_calFwdAddr_selection_cache, []);
    }
    if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
        ZaAccountXFormView.editCalFwdAddrButtonListener.call(this);
    }
}

ZaAccountXFormView.editFwdAddrButtonListener =
function () {
    var instance = this.getInstance();
    if(instance[ZaAccount.A2_fwdAddr_selection_cache] && instance[ZaAccount.A2_fwdAddr_selection_cache][0]) {
        var formPage = this.getForm().parent;
        if(!formPage.editFwdAddrDlg) {
            formPage.editFwdAddrDlg = new ZaEditFwdAddrXDialog(ZaApp.getInstance().getAppCtxt().getShell(),"400px", "150px",ZaMsg.Edit_FwdAddr_Title);
            formPage.editFwdAddrDlg.registerCallback(DwtDialog.OK_BUTTON, ZaAccountXFormView.updateFwdAddr, this.getForm(), null);
        }
        var obj = {};
        obj[ZaAccount.A_name] = instance[ZaAccount.A2_fwdAddr_selection_cache][0];
        var cnt = instance.attrs[ZaAccount.A_zimbraMailForwardingAddress].length;
        for(var i=0;i<cnt;i++) {
            if(instance.fwdAddr_selection_cache[0]==instance.attrs[ZaAccount.A_zimbraMailForwardingAddress][i]) {
                obj[ZaAlias.A_index] = i;
                break;
            }
        }

        formPage.editFwdAddrDlg.setObject(obj);
        formPage.editFwdAddrDlg.popup();
    }
}

ZaAccountXFormView.editCalFwdAddrButtonListener =
function () {
    var instance = this.getInstance();
    if(instance[ZaAccount.A2_calFwdAddr_selection_cache] && instance[ZaAccount.A2_calFwdAddr_selection_cache][0]) {
        var formPage = this.getForm().parent;
        if(!formPage.editCalFwdAddrDlg) {
            formPage.editCalFwdAddrDlg = new ZaEditFwdAddrXDialog(ZaApp.getInstance().getAppCtxt().getShell(),"400px", "150px",ZaMsg.Edit_FwdAddr_Title);
            formPage.editCalFwdAddrDlg.registerCallback(DwtDialog.OK_BUTTON, ZaAccountXFormView.updateCalFwdAddr, this.getForm(), null);
        }
        var obj = {};
        obj[ZaAccount.A_name] = instance[ZaAccount.A2_calFwdAddr_selection_cache][0];
        var cnt = instance.attrs[ZaAccount.A_zimbraPrefCalendarForwardInvitesTo].length;
        for(var i=0;i<cnt;i++) {
            if(instance[ZaAccount.A2_calFwdAddr_selection_cache][0]==instance.attrs[ZaAccount.A_zimbraPrefCalendarForwardInvitesTo][i]) {
                obj[ZaAlias.A_index] = i;
                break;
            }
        }

        formPage.editCalFwdAddrDlg.setObject(obj);
        formPage.editCalFwdAddrDlg.popup();
    }
}
ZaAccountXFormView.updateFwdAddr = function () {
    if(this.parent.editFwdAddrDlg) {
        this.parent.editFwdAddrDlg.popdown();
        var obj = this.parent.editFwdAddrDlg.getObject();
        var instance = this.getInstance();
        var arr = instance.attrs[ZaAccount.A_zimbraMailForwardingAddress];
        if(obj[ZaAlias.A_index] >=0 && arr[obj[ZaAlias.A_index]] != obj[ZaAccount.A_name] ) {
            this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_fwdAddr_selection_cache, []);
            arr[obj[ZaAlias.A_index]] = obj[ZaAccount.A_name];
            this.getModel().setInstanceValue(instance, ZaAccount.A_zimbraMailForwardingAddress, arr);
            this.parent.setDirty(true);
        }
    }
}

ZaAccountXFormView.updateCalFwdAddr = function () {
    if(this.parent.editCalFwdAddrDlg) {
        this.parent.editCalFwdAddrDlg.popdown();
        var obj = this.parent.editCalFwdAddrDlg.getObject();
        var instance = this.getInstance();
        var arr = instance.attrs[ZaAccount.A_zimbraPrefCalendarForwardInvitesTo];
        if(obj[ZaAlias.A_index] >=0 && arr[obj[ZaAlias.A_index]] != obj[ZaAccount.A_name] ) {
            this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_calFwdAddr_selection_cache, []);
            arr[obj[ZaAlias.A_index]] = obj[ZaAccount.A_name];
            this.getModel().setInstanceValue(instance, ZaAccount.A_zimbraPrefCalendarForwardInvitesTo, arr);
            this.parent.setDirty(true);
        }
    }
}

ZaAccountXFormView.addFwdAddrButtonListener =
function () {
    var instance = this.getInstance();
    var formPage = this.getForm().parent;
    if(!formPage.addFwdAddrDlg) {
        formPage.addFwdAddrDlg = new ZaEditFwdAddrXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "400px", "150px",ZaMsg.Add_FwdAddr_Title);
        formPage.addFwdAddrDlg.registerCallback(DwtDialog.OK_BUTTON, ZaAccountXFormView.addFwdAddr, this.getForm(), null);
    }

    var obj = {};
    obj[ZaAccount.A_name] = "";
    obj[ZaAlias.A_index] = - 1;
    formPage.addFwdAddrDlg.setObject(obj);
    formPage.addFwdAddrDlg.popup();
}

ZaAccountXFormView.addCalFwdAddrButtonListener =
function () {
    var instance = this.getInstance();
    var formPage = this.getForm().parent;
    if(!formPage.addCalFwdAddrDlg) {
        formPage.addCalFwdAddrDlg = new ZaEditFwdAddrXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "400px", "150px",ZaMsg.Add_FwdAddr_Title);
        formPage.addCalFwdAddrDlg.registerCallback(DwtDialog.OK_BUTTON, ZaAccountXFormView.addCalFwdAddr, this.getForm(), null);
    }

    var obj = {};
    obj[ZaAccount.A_name] = "";
    obj[ZaAlias.A_index] = - 1;
    formPage.addCalFwdAddrDlg.setObject(obj);
    formPage.addCalFwdAddrDlg.popup();
}

ZaAccountXFormView.addFwdAddr  = function () {
    if(this.parent.addFwdAddrDlg) {
        this.parent.addFwdAddrDlg.popdown();
        var obj = this.parent.addFwdAddrDlg.getObject();
        if(obj[ZaAccount.A_name] && obj[ZaAccount.A_name].length>1) {
            var arr = this.getInstance().attrs[ZaAccount.A_zimbraMailForwardingAddress];
            arr.push(obj[ZaAccount.A_name]);
            this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A_zimbraMailForwardingAddress, arr);
            this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_fwdAddr_selection_cache, []);
            this.parent.setDirty(true);
        }
    }
}

ZaAccountXFormView.addCalFwdAddr  = function () {
    if(this.parent.addCalFwdAddrDlg) {
        this.parent.addCalFwdAddrDlg.popdown();
        var obj = this.parent.addCalFwdAddrDlg.getObject();
        if(obj[ZaAccount.A_name] && obj[ZaAccount.A_name].length>1) {
            var arr = this.getInstance().attrs[ZaAccount.A_zimbraPrefCalendarForwardInvitesTo];
            arr.push(obj[ZaAccount.A_name]);
            this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A_zimbraPrefCalendarForwardInvitesTo, arr);
            this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_calFwdAddr_selection_cache, []);
            this.parent.setDirty(true);
        }
    }
}

//interop account
ZaAccountXFormView.fpSelectionListener =
function (ev) {
    var arr = this.widget.getSelection();
    if(arr && arr.length) {
        arr.sort();
        // When getting data from view always html decode it
        arr = AjxUtil.htmlDecode(arr);
        this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_fp_selection_cache, arr);
    } else
        this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_fp_selection_cache, []);

    if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
        ZaAccountXFormView.editFpButtonListener.call(this);
    }
}

ZaAccountXFormView.isEditFpEnabled = function () {
    return (!AjxUtil.isEmpty(this.getInstanceValue(ZaAccount.A2_fp_selection_cache)) && this.getInstanceValue(ZaAccount.A2_fp_selection_cache).length==1
            && !AjxUtil.isEmpty(this.getInstanceValue(ZaAccount.A_zimbraForeignPrincipal)));
}

ZaAccountXFormView.isDeleteFpEnabled = function () {
    return (!AjxUtil.isEmpty(this.getInstanceValue(ZaAccount.A2_fp_selection_cache)));
}

ZaAccountXFormView.isPushFpEnabled = function () {
    return (!AjxUtil.isEmpty(this.getInstanceValue(ZaAccount.A_zimbraForeignPrincipal)));
}

ZaAccountXFormView.deleteFpButtonListener = function () {
    var instance = this.getInstance();
    if(!AjxUtil.isEmpty(instance.fp_selection_cache)) {
        var cnt = instance.fp_selection_cache.length;
        var arr = instance.attrs[ZaAccount.A_zimbraForeignPrincipal];
        if(cnt && !AjxUtil.isEmpty(arr)) {
            for(var i=0;i<cnt;i++) {
                var cnt2 = arr.length-1;
                for(var k=cnt2;k>=0;k--) {
                    if(arr[k]==instance.fp_selection_cache[i]) {
                        arr.splice(k,1);
                        break;
                    }
                }
            }
            this.getModel().setInstanceValue(instance, ZaAccount.A_zimbraForeignPrincipal, arr);
            this.getModel().setInstanceValue(instance, ZaAccount.A2_fp_selection_cache, []);
        }
    }
    this.getForm().parent.setDirty(true);
}

ZaAccountXFormView.editFpButtonListener =
function () {
    var instance = this.getInstance();
    if(instance.fp_selection_cache && instance.fp_selection_cache[0]) {
        var formPage = this.getForm().parent;
        if(!formPage.editFpDlg) {
            formPage.editFpDlg = new ZaEditFpXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "550px", "150px",ZaMsg.Edit_Fp_Title);
            formPage.editFpDlg.registerCallback(DwtDialog.OK_BUTTON, ZaAccountXFormView.updateFp, this.getForm(), null);
        }
        var obj = ZaFp.getObject (instance.fp_selection_cache[0]) ;
        var cnt = instance.attrs[ZaAccount.A_zimbraForeignPrincipal].length;
        for(var i=0;i<cnt;i++) {
            if(instance.fp_selection_cache[0]==instance.attrs[ZaAccount.A_zimbraForeignPrincipal][i]) {
                obj[ZaFp.A_index] = i;
                break;
            }
        }

        formPage.editFpDlg.setObject(obj);
        formPage.editFpDlg.popup();
    }
}

ZaAccountXFormView.pushFpButtonListener = function () {
    var instance = this.getInstance();

    if (this.getForm().parent.isDirty()) {
       ZaApp.getInstance().getCurrentController().popupMsgDialog (ZaMsg.DIRTY_SAVE_ACCT, true);
    } else if (instance.attrs[ZaAccount.A_zimbraForeignPrincipal].length > 0) {
       ZaFp.push (instance.id);
      }
}

ZaAccountXFormView.updateFp = function () {
    if(this.parent.editFpDlg) {
        this.parent.editFpDlg.popdown();
        var obj = this.parent.editFpDlg.getObject();
        var arr = this.getInstance().attrs[ZaAccount.A_zimbraForeignPrincipal];
        if(obj[ZaFp.A_index] >=0 && arr[obj[ZaFp.A_index]] != ZaFp.getEntry (obj) ) {
            this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_fp_selection_cache, []);
            arr[obj[ZaFp.A_index]] = ZaFp.getEntry (obj);
            this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A_zimbraForeignPrincipal, arr);
            this.parent.setDirty(true);
        }
    }
}

ZaAccountXFormView.addFpButtonListener =
function () {
    var instance = this.getInstance();
    var formPage = this.getForm().parent;

    if(!formPage.addFpDlg) {
        formPage.addFpDlg = new ZaEditFpXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "550px", "150px",ZaMsg.Add_Fp_Title);
        formPage.addFpDlg.registerCallback(DwtDialog.OK_BUTTON, ZaAccountXFormView.addFp, this.getForm(), null);
    }

    var obj = {};
    obj [ZaFp.A_prefix] = "" ;
    obj [ZaFp.A_name] = "";
    obj [ZaFp.A_index] = -1 ;

    formPage.addFpDlg.setObject(obj);
    formPage.addFpDlg.popup();
}

ZaAccountXFormView.addFp  = function () {
    if(this.parent.addFpDlg) {
        var obj = this.parent.addFpDlg.getObject();
        var app = this.parent._app ;
        var currentFps =  this.getInstance().attrs[ZaAccount.A_zimbraForeignPrincipal] ;
        if (ZaFp.findDupPrefixFp(currentFps, obj[ZaFp.A_prefix])){
            ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_ONE_FP_PREFIX_ALLOWED, null);
        }  else {
            this.parent.addFpDlg.popdown();
            if(ZaFp.getEntry(obj).length > 0) {
                currentFps.push(ZaFp.getEntry(obj));
                this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A_zimbraForeignPrincipal, currentFps);
                this.getModel().setInstanceValue(this.getInstance(), ZaAccount.A2_fp_selection_cache, []);
                this.parent.setDirty(true);
            }
        }
    }
}

ZaAccountXFormView.isDomainLeftAccountsAlertVisible = function () {
    var val1 = this.getInstanceValue(ZaAccount.A2_domainLeftAccounts);
    var val2 = this.getInstanceValue(ZaAccount.A2_accountTypes);
    return (!AjxUtil.isEmpty(val1) && AjxUtil.isEmpty(val2));
}

ZaAccountXFormView.isAccountTypeGrouperVisible = function () {
     return !AjxUtil.isEmpty(this.getInstanceValue(ZaAccount.A2_accountTypes));
}

ZaAccountXFormView.isAccountsTypeAlertInvisible = function () {
        var val = this.getInstanceValue(ZaAccount.A2_showAccountTypeMsg);
        return (AjxUtil.isEmpty(val));
}

ZaAccountXFormView.isAccountTypeSet = function () {
     return !ZaAccount.isAccountTypeSet(this.getInstance());
}

ZaAccountXFormView.isAttributeDefined = function(attribute) {
    return this.getInstanceValue(attribute) != undefined;
}

ZaAccountXFormView.CONTACT_TAB_ATTRS = [ZaAccount.A_telephoneNumber,
        ZaAccount.A_homePhone,
        ZaAccount.A_mobile,
        ZaAccount.A_pager ,
        ZaAccount.A_company,
        ZaAccount.A_title,
        ZaAccount.A_manager,
        ZaAccount.A_facsimileTelephoneNumber,
        ZaAccount.A_street,
        ZaAccount.A_city,
        ZaAccount.A_state,
        ZaAccount.A_zip,
        ZaAccount.A_country];
ZaAccountXFormView.CONTACT_TAB_RIGHTS = [];

ZaAccountXFormView.ACCOUNT_NAME_GROUP_ATTRS = [ZaAccount.A_name,
        ZaAccount.A_firstName,
        ZaAccount.A_initials,
        ZaAccount.A_lastName,
        ZaAccount.A_displayname,
    ZaAccount.A_zimbraHideInGal
];

ZaAccountXFormView.MEMBEROF_TAB_ATTRS = [];
ZaAccountXFormView.MEMBEROF_TAB_RIGHTS = [ZaAccount.GET_ACCOUNT_MEMBERSHIP_RIGHT];

ZaAccountXFormView.FEATURE_TAB_ATTRS = [ZaAccount.A_zimbraFeatureManageZimlets,
    ZaAccount.A_zimbraFeatureReadReceiptsEnabled,
    ZaAccount.A_zimbraFeatureMailEnabled,
    ZaAccount.A_zimbraFeatureContactsEnabled,
    ZaAccount.A_zimbraFeatureDistributionListFolderEnabled,
    ZaAccount.A_zimbraFeatureCalendarEnabled,
    ZaAccount.A_zimbraFeatureTasksEnabled,
    //ZaAccount.A_zimbraFeatureNotebookEnabled,
    ZaAccount.A_zimbraFeatureBriefcasesEnabled,
    //ZaAccount.A_zimbraFeatureBriefcaseDocsEnabled,
    ZaAccount.A_zimbraFeatureOptionsEnabled,
    ZaAccount.A_zimbraFeatureTaggingEnabled,
    ZaAccount.A_zimbraFeatureSharingEnabled,
    ZaAccount.A_zimbraExternalSharingEnabled,
    ZaAccount.A_zimbraSharingEnabled,
    ZaAccount.A_zimbraFeatureChangePasswordEnabled,
    ZaAccount.A_zimbraFeatureSkinChangeEnabled,
    ZaAccount.A_zimbraFeatureHtmlComposeEnabled,
    //ZaAccount.A_zimbraFeatureShortcutAliasesEnabled,
    ZaAccount.A_zimbraFeatureGalEnabled,
    ZaAccount.A_zimbraFeatureMAPIConnectorEnabled,
    ZaAccount.A_zimbraFeatureEwsEnabled,
    ZaAccount.A_zimbraFeatureTouchClientEnabled,
    ZaAccount.A_zimbraFeatureWebClientOfflineAccessEnabled,
    ZaAccount.A_zimbraFeatureGalAutoCompleteEnabled,
    ZaAccount.A_zimbraFeatureMailPriorityEnabled,
    ZaAccount.A_zimbraFeatureFlaggingEnabled,
    ZaAccount.A_zimbraImapEnabled,
    ZaAccount.A_zimbraPop3Enabled,
    ZaAccount.A_zimbraFeatureWebClientEnabled,
    ZaAccount.A_zimbraFeatureImapDataSourceEnabled,
    ZaAccount.A_zimbraFeaturePop3DataSourceEnabled,
    ZaAccount.A_zimbraFeatureMailSendLaterEnabled,
    //ZaAccount.A_zimbraFeatureFreeBusyViewEnabled,
    ZaAccount.A_zimbraFeatureConversationsEnabled,
    ZaAccount.A_zimbraFeatureFiltersEnabled,
    ZaAccount.A_zimbraFeatureOutOfOfficeReplyEnabled,
    ZaAccount.A_zimbraFeatureNewMailNotificationEnabled,
    ZaAccount.A_zimbraFeatureIdentitiesEnabled,
    ZaAccount.A_zimbraFeatureGroupCalendarEnabled,
  ZaAccount.A_zimbraFeaturePeopleSearchEnabled,
  ZaAccount.A_zimbraFeatureAdvancedSearchEnabled,
    ZaAccount.A_zimbraFeatureSavedSearchesEnabled,
    ZaAccount.A_zimbraFeatureInitialSearchPreferenceEnabled,
    ZaAccount.A_zimbraFeatureImportFolderEnabled,
    ZaAccount.A_zimbraFeatureExportFolderEnabled,
    ZaAccount.A_zimbraDumpsterEnabled,
    ZaAccount.A_zimbraDumpsterPurgeEnabled,
    ZaAccount.A_zimbraFeatureSMIMEEnabled,
    ZaAccount.A_zimbraFeatureCalendarReminderDeviceEmailEnabled
];

ZaAccountXFormView.FEATURE_TAB_RIGHTS = [];
ZaAccountXFormView.PREFERENCES_TAB_ATTRS = [
    ZaAccount.A_zimbraPrefReadReceiptsToAddress,
    ZaAccount.A_zimbraPrefMailSendReadReceipts,
    ZaAccount.A_zimbraPrefUseTimeZoneListInCalendar,
    ZaAccount.A_zimbraPrefCalendarUseQuickAdd,
    ZaAccount.A_zimbraPrefCalendarAlwaysShowMiniCal,
    ZaAccount.A_zimbraPrefCalendarApptReminderWarningTime,
    ZaAccount.A_zimbraPrefTimeZoneId,
    ZaAccount.A_zimbraPrefGalAutoCompleteEnabled,
    ZaAccount.A_zimbraPrefAutoAddAddressEnabled,
    ZaAccount.A_zimbraPrefMailSignature,
    ZaAccount.A_zimbraMailSignatureMaxLength,
    //ZaAccount.A_zimbraPrefMailSignatureStyle,
    ZaAccount.A_zimbraPrefMailSignatureEnabled,
    ZaAccount.A_zimbraPrefForwardReplyInOriginalFormat,
    ZaAccount.A_zimbraPrefHtmlEditorDefaultFontColor,
    ZaAccount.A_zimbraPrefHtmlEditorDefaultFontFamily,
    ZaAccount.A_zimbraPrefHtmlEditorDefaultFontSize,
    ZaAccount.A_zimbraPrefComposeFormat,
    ZaAccount.A_zimbraPrefComposeInNewWindow,
    ZaAccount.A_zimbraAllowFromAddress,
    ZaAccount.A_zimbraAllowAnyFromAddress,
    ZaAccount.A_zimbraPrefSaveToSent,
    ZaAccount.A_zimbraPrefOutOfOfficeReply,
    ZaAccount.A_zimbraPrefNewMailNotificationAddress,
    ZaAccount.A_zimbraPrefNewMailNotificationEnabled,
    ZaAccount.A_zimbraMailMinPollingInterval,
    ZaAccount.A_zimbraPrefMailPollingInterval,
    ZaAccount.A_zimbraPrefAutoSaveDraftInterval,
    ZaAccount.A_zimbraPrefMailSoundsEnabled,
    ZaAccount.A_zimbraPrefMailFlashIcon,
    ZaAccount.A_zimbraPrefMailFlashTitle,
    ZaAccount.A_zimbraPrefMailDefaultCharset,
    ZaAccount.A_zimbraMaxMailItemsPerPage,
    ZaAccount.A_zimbraPrefMailItemsPerPage,
    ZaAccount.A_zimbraPrefGroupMailBy,
    ZaAccount.A_zimbraPrefDisplayExternalImages,
    ZaAccount.A_zimbraPrefMessageViewHtmlPreferred,
    ZaAccount.A_zimbraPrefLocale,
    ZaAccount.A_zimbraJunkMessagesIndexingEnabled,
    ZaAccount.A_zimbraPrefShowSelectionCheckbox,
    ZaAccount.A_zimbraPrefWarnOnExit,
    ZaAccount.A_zimbraPrefAdminConsoleWarnOnExit,
    ZaAccount.A_zimbraPrefUseKeyboardShortcuts,
    ZaAccount.A_zimbraPrefImapSearchFoldersEnabled,
    ZaAccount.A_zimbraPrefShowSearchString,
    ZaAccount.A_zimbraPrefMailInitialSearch,
    ZaAccount.A_zimbraPrefClientType,
    ZaAccount.A_zimbraPrefCalendarInitialView,
    ZaAccount.A_zimbraPrefCalendarFirstDayOfWeek,
    ZaAccount.A_zimbraPrefCalendarNotifyDelegatedChanges,
    ZaAccount.A_zimbraPrefCalendarApptVisibility,
    ZaAccount.A_zimbraPrefCalendarAutoAddInvites,
    ZaAccount.A_zimbraPrefCalendarReminderSoundsEnabled,
    ZaAccount.A_zimbraPrefCalendarReminderFlashTitle,
    ZaAccount.A_zimbraPrefCalendarAllowForwardedInvite,
    ZaAccount.A_zimbraPrefCalendarAllowPublishMethodInvite,
    ZaAccount.A_zimbraPrefCalendarAllowCancelEmailToSelf,
    ZaAccount.A_zimbraPrefCalendarToasterEnabled,
    ZaAccount.A_zimbraPrefCalendarShowPastDueReminders,
    ZaAccount.A_zimbraPrefAppleIcalDelegationEnabled,
    ZaAccount.A_zimbraPrefMandatorySpellCheckEnabled,
    ZaAccount.A_zimbraPrefImapEnabled,
    ZaAccount.A_zimbraPrefPop3Enabled
];
ZaAccountXFormView.PREFERENCES_TAB_RIGHTS = [];

ZaAccountXFormView.ALIASES_TAB_ATTRS = [ZaAccount.A_zimbraMailAlias];
ZaAccountXFormView.ALIASES_TAB_RIGHTS = [ZaAccount.ADD_ACCOUNT_ALIAS_RIGHT, ZaAccount.REMOVE_ACCOUNT_ALIAS_RIGHT];

ZaAccountXFormView.FORWARDING_TAB_ATTRS = [ZaAccount.A_zimbraFeatureMailForwardingEnabled,
    ZaAccount.A_zimbraPrefMailLocalDeliveryDisabled,
    ZaAccount.A_zimbraMailForwardingAddress,
    ZaAccount.A_zimbraPrefCalendarForwardInvitesTo];
ZaAccountXFormView.FORWARDING_TAB_RIGHTS = [];

ZaAccountXFormView.INTEROP_TAB_ATTRS = [ZaAccount.A_zimbraForeignPrincipal];
ZaAccountXFormView.INTEROP_TAB_RIGHTS = [];

ZaAccountXFormView.SKIN_TAB_ATTRS = [ZaAccount.A_zimbraPrefSkin,ZaAccount.A_zimbraAvailableSkin];
ZaAccountXFormView.SKIN_TAB_RIGHTS = [];

ZaAccountXFormView.ZIMLET_TAB_ATTRS = [ZaAccount.A_zimbraZimletAvailableZimlets];
ZaAccountXFormView.ZIMLET_TAB_RIGHTS = [];

ZaAccountXFormView.ADVANCED_TAB_ATTRS = [ZaAccount.A_zimbraAttachmentsBlocked,
    ZaAccount.A_zimbraMailQuota,
    ZaAccount.A_zimbraContactMaxNumEntries,
    ZaAccount.A_zimbraQuotaWarnPercent,
    ZaAccount.A_zimbraQuotaWarnInterval,
    ZaAccount.A_zimbraQuotaWarnMessage,
    ZaAccount.A_zimbraPasswordLocked,
    ZaAccount.A_zimbraPasswordBlockCommonEnabled,
    ZaAccount.A_zimbraMinPwdLength,
    ZaAccount.A_zimbraMaxPwdLength,
    ZaAccount.A_zimbraPasswordMinUpperCaseChars,
    ZaAccount.A_zimbraPasswordMinLowerCaseChars,
    ZaAccount.A_zimbraPasswordMinPunctuationChars,
    ZaAccount.A_zimbraPasswordMinNumericChars,
    ZaAccount.A_zimbraPasswordMinDigitsOrPuncs,
    ZaAccount.A_zimbraMinPwdAge,
    ZaAccount.A_zimbraMaxPwdAge,
    ZaAccount.A_zimbraEnforcePwdHistory,
    ZaAccount.A_zimbraPasswordLockoutEnabled,
    ZaAccount.A_zimbraPasswordLockoutMaxFailures,
    ZaAccount.A_zimbraPasswordLockoutDuration,
    ZaAccount.A_zimbraPasswordLockoutFailureLifetime,
    ZaAccount.A_zimbraAdminAuthTokenLifetime,
    ZaAccount.A_zimbraAuthTokenLifetime,
    ZaAccount.A_zimbraMailIdleSessionTimeout,
    ZaAccount.A_zimbraMailMessageLifetime,
    ZaAccount.A_zimbraMailTrashLifetime,
    ZaAccount.A_zimbraMailSpamLifetime,
    ZaAccount.A_zimbraDumpsterUserVisibleAge,
    ZaAccount.A_zimbraMailDumpsterLifetime,
    ZaAccount.A_zimbraFreebusyExchangeUserOrg,
    ZaAccount.A_zimbraMailCanonicalAddress,
    ZaAccount.A_zimbraMailTransport
    ];
ZaAccountXFormView.ADVANCED_TAB_RIGHTS = [];

ZaAccountXFormView.addressItemsPool = null;
ZaAccountXFormView.addressItemsPoolForDialog = null;
ZaAccountXFormView.getAddressFormItem = function(){
    // the subItems of Address Items only init once;
    if(AjxUtil.isEmpty(ZaAccountXFormView.addressItemsPool)){
        ZaAccountXFormView.addressItemsPool = new Object();
        ZaAccountXFormView.addressItemsPool[ZaAccount.A_zip] =  {ref:ZaAccount.A_zip, type:_TEXTFIELD_, msgName:ZaMsg.NAD_zip,label:ZaMsg.NAD_zip,
            labelLocation:_LEFT_, width:100};
        ZaAccountXFormView.addressItemsPool[ZaAccount.A_state] = {ref:ZaAccount.A_state, type:_TEXTFIELD_, msgName:ZaMsg.NAD_state,label:ZaMsg.NAD_state,
            labelLocation:_LEFT_, width:250};
        ZaAccountXFormView.addressItemsPool[ZaAccount.A_street] = {ref:ZaAccount.A_street, type:_TEXTAREA_, msgName:ZaMsg.NAD_street,label:ZaMsg.NAD_street,
            labelLocation:_LEFT_, width:250};
        ZaAccountXFormView.addressItemsPool[ZaAccount.A_city] = {ref:ZaAccount.A_city, type:_TEXTFIELD_, msgName:ZaMsg.NAD_city,label:ZaMsg.NAD_city,
            labelLocation:_LEFT_, width:250};
        ZaAccountXFormView.addressItemsPool[ZaAccount.A_country] = {ref:ZaAccount.A_country, type:_TEXTFIELD_, msgName:ZaMsg.NAD_country,label:ZaMsg.NAD_country,
            labelLocation:_LEFT_, width:250};

    }
    var addressFormItems = new Array();
    var addressFormItemsOrders = new Array();
    if(ZaZimbraAdmin.isLanguage("ja")){
        addressFormItemsOrders = [ZaAccount.A_zip, ZaAccount.A_state, ZaAccount.A_city, ZaAccount.A_street, ZaAccount.A_country];
    }
    else{
        addressFormItemsOrders = [ZaAccount.A_street, ZaAccount.A_city, ZaAccount.A_state, ZaAccount.A_zip, ZaAccount.A_country];
    }

    for(var i = 0; i < addressFormItemsOrders.length; i++){
        addressFormItems.push(ZaAccountXFormView.addressItemsPool[addressFormItemsOrders[i]]);
    }
    return addressFormItems;
}
ZaAccountXFormView.getAddressFormItemForDialog = function(){
    // the subItems of Address Items only init once;
    if(AjxUtil.isEmpty(ZaAccountXFormView.addressItemsPoolForDialog)){
        ZaAccountXFormView.addressItemsPoolForDialog = new Object();
        ZaAccountXFormView.addressItemsPoolForDialog[ZaAccount.A_zip] =  {ref:ZaAccount.A_zip, type:_TEXTFIELD_, msgName:ZaMsg.NAD_zip,label:ZaMsg.NAD_zip,
            labelLocation:_LEFT_, width:100};
        ZaAccountXFormView.addressItemsPoolForDialog[ZaAccount.A_state] = {ref:ZaAccount.A_state, type:_TEXTFIELD_, msgName:ZaMsg.NAD_state,label:ZaMsg.NAD_state,
            labelLocation:_LEFT_, width:250};
        ZaAccountXFormView.addressItemsPoolForDialog[ZaAccount.A_street] = {ref:ZaAccount.A_street, type:_TEXTAREA_, msgName:ZaMsg.NAD_street,label:ZaMsg.NAD_street,
            labelLocation:_LEFT_, width:250};
        ZaAccountXFormView.addressItemsPoolForDialog[ZaAccount.A_city] = {ref:ZaAccount.A_city, type:_TEXTFIELD_, msgName:ZaMsg.NAD_city,label:ZaMsg.NAD_city,
            labelLocation:_LEFT_, width:250};
        ZaAccountXFormView.addressItemsPoolForDialog[ZaAccount.A_country] = {ref:ZaAccount.A_country, type:_TEXTFIELD_, msgName:ZaMsg.NAD_country,label:ZaMsg.NAD_country,
            labelLocation:_LEFT_, width:250};

    }
    var addressFormItems = new Array();
    var addressFormItemsOrders = new Array();
    if(ZaZimbraAdmin.isLanguage("ja")){
        addressFormItemsOrders = [ZaAccount.A_zip, ZaAccount.A_state, ZaAccount.A_city, ZaAccount.A_street, ZaAccount.A_country];
    }
    else{
        addressFormItemsOrders = [ZaAccount.A_street, ZaAccount.A_city, ZaAccount.A_state, ZaAccount.A_zip, ZaAccount.A_country];
    }

    for(var i = 0; i < addressFormItemsOrders.length; i++){
        addressFormItems.push(ZaAccountXFormView.addressItemsPoolForDialog[addressFormItemsOrders[i]]);
    }
    return addressFormItems;
}

ZaAccountXFormView.accountNameInfoPool = null;
ZaAccountXFormView.getAccountNameInfoItem = function(){
    if(AjxUtil.isEmpty(ZaAccountXFormView.accountNameInfoPool)){
        ZaAccountXFormView.accountNameInfoPool = new Object();
        ZaAccountXFormView.accountNameInfoPool[ZaAccount.A_name] = {ref:ZaAccount.A_name, type:_EMAILADDR_,
                     msgName:ZaMsg.NAD_AccountName,label:ZaMsg.NAD_AccountName, bmolsnr:false,
                     getDisplayValue: AjxUtil.htmlEncode,
                                        labelLocation:_LEFT_,onChange:ZaAccount.setDomainChanged,forceUpdate:true,
                                        enableDisableChecks:[[ZaItem.hasRight,ZaAccount.RENAME_ACCOUNT_RIGHT]],
                                        visibilityChecks:[]
            ,domainPartWidth:"100%", domainContainerWidth: "100%"
                                },
        ZaAccountXFormView.accountNameInfoPool[ZaAccount.A_firstName] = {ref:ZaAccount.A_firstName, type:_TEXTFIELD_,
                    msgName:ZaMsg.NAD_FirstName,label:ZaMsg.NAD_FirstName,
                    labelLocation:_LEFT_, cssClass:"admin_xform_name_input", width:150,
                    elementChanged: function(elementValue,instanceValue, event) {
                        if(this.getInstance()[ZaAccount.A2_autodisplayname]=="TRUE") {
                            ZaAccount.generateDisplayName.call(this, this.getInstance(), elementValue, this.getInstance().attrs[ZaAccount.A_lastName],this.getInstance().attrs[ZaAccount.A_initials] );
                        }
                        this.getForm().itemChanged(this, elementValue, event);
                    }
                };
        ZaAccountXFormView.accountNameInfoPool[ZaAccount.A_initials] = {ref:ZaAccount.A_initials, type:_TEXTFIELD_,
                    msgName:ZaMsg.NAD_Initials,label:ZaMsg.NAD_Initials, labelLocation:_LEFT_,
                    cssClass:"admin_xform_name_input", width:50,
                    elementChanged: function(elementValue,instanceValue, event) {
                        if(this.getInstance()[ZaAccount.A2_autodisplayname]=="TRUE") {
                            ZaAccount.generateDisplayName.call(this, this.getInstance(), this.getInstanceValue(ZaAccount.A_firstName), this.getInstanceValue(ZaAccount.A_lastName),elementValue);
                        }
                        this.getForm().itemChanged(this, elementValue, event);
                    }
                };
        ZaAccountXFormView.accountNameInfoPool[ZaAccount.A_lastName] = {ref:ZaAccount.A_lastName, type:_TEXTFIELD_,
                    msgName:ZaMsg.NAD_LastName,label:ZaMsg.NAD_LastName, labelLocation:_LEFT_,
                    cssClass:"admin_xform_name_input", width:150,
                    elementChanged: function(elementValue,instanceValue, event) {
                        if(this.getInstance()[ZaAccount.A2_autodisplayname]=="TRUE") {
                            ZaAccount.generateDisplayName.call(this, this.getInstance(),  this.getInstanceValue(ZaAccount.A_firstName), elementValue ,this.getInstanceValue(ZaAccount.A_initials));
                        }
                        this.getForm().itemChanged(this, elementValue, event);
                    }
                };
        ZaAccountXFormView.accountNameInfoPool["ZaAccountDisplayInfoGroup"] = {type:_GROUP_, numCols:3, nowrap:true,
                    attributeName: ZaAccount.A_displayname,
                    width:200, msgName:ZaMsg.NAD_DisplayName,label:ZaMsg.NAD_DisplayName, labelLocation:_LEFT_,
                                        visibilityChecks:[[ZaItem.hasReadPermission,ZaAccount.A_displayname]],
                                        items: [
                                                {ref:ZaAccount.A_displayname, type:_TEXTFIELD_, label:null,     cssClass:"admin_xform_name_input", width:150,
                                                        enableDisableChecks:[ [XForm.checkInstanceValue,ZaAccount.A2_autodisplayname,"FALSE"],ZaItem.hasWritePermission],
                                                        enableDisableChangeEventSources:[ZaAccount.A2_autodisplayname],bmolsnr:true,
                                                        visibilityChecks:[]
                                                },
                                                {ref:ZaAccount.A2_autodisplayname, type:_CHECKBOX_, msgName:ZaMsg.NAD_Auto,label:ZaMsg.NAD_Auto,labelLocation:_RIGHT_,trueValue:"TRUE", falseValue:"FALSE", subLabel:"", helpTooltip: false,
                                                        elementChanged: function(elementValue,instanceValue, event) {
                                                                if(elementValue=="TRUE") {
                                                                        if(ZaAccount.generateDisplayName.call(this, this.getInstance(), this.getInstanceValue(ZaAccount.A_firstName), this.getInstanceValue(ZaAccount.A_lastName),this.getInstanceValue(ZaAccount.A_initials))) {
                                                                                this.getForm().parent.setDirty(true);
                                                                        }
                                                                }
                                                                this.getForm().itemChanged(this, elementValue, event);
                                                        },
                                                        enableDisableChecks:[[ZaItem.hasWritePermission,ZaAccount.A_displayname]],
                            visibilityChecks:[[ZaItem.hasWritePermission,ZaAccount.A_displayname]]

                                                }
                                        ]
                                },
        ZaAccountXFormView.accountNameInfoPool[ZaAccount.A_zimbraHideInGal]={ref:ZaAccount.A_zimbraHideInGal, type:_CHECKBOX_,
                              msgName:ZaMsg.LBL_zimbraHideInGal,
                              label:ZaMsg.LBL_zimbraHideInGal, trueValue:"TRUE", falseValue:"FALSE"
                },
        ZaAccountXFormView.accountNameInfoPool[ZaAccount.A_zimbraPhoneticFirstName] = {
                    ref:ZaAccount.A_zimbraPhoneticFirstName, type:_TEXTFIELD_,
                    msgName:ZaMsg.NAD_zimbraPhoneticFirstName,label:ZaMsg.NAD_zimbraPhoneticFirstName,
                                        labelLocation:_LEFT_, cssClass:"admin_xform_name_input",width:150
                                };
        ZaAccountXFormView.accountNameInfoPool[ZaAccount.A_zimbraPhoneticLastName] = {
                                        ref:ZaAccount.A_zimbraPhoneticLastName, type:_TEXTFIELD_,
                                        msgName:ZaMsg.NAD_zimbraPhoneticLastName,label:ZaMsg.NAD_zimbraPhoneticLastName,
                                        labelLocation:_LEFT_, cssClass:"admin_xform_name_input",width:150
                                };

    }

    var accountNameFormItems = new Array();
        var accountNameItemsOrders = new Array();
        if(ZaZimbraAdmin.isLanguage("ja")){
        accountNameItemsOrders = [ZaAccount.A_name, ZaAccount.A_zimbraPhoneticLastName, ZaAccount.A_lastName, ZaAccount.A_initials, ZaAccount.A_zimbraPhoneticFirstName, ZaAccount.A_firstName, "ZaAccountDisplayInfoGroup", ZaAccount.A_zimbraHideInGal];
        }
        else{
        accountNameItemsOrders = [ZaAccount.A_name, ZaAccount.A_firstName, ZaAccount.A_initials, ZaAccount.A_lastName,"ZaAccountDisplayInfoGroup", ZaAccount.A_zimbraHideInGal];
        }

        for(var i = 0; i < accountNameItemsOrders.length; i++){
                accountNameFormItems.push(ZaAccountXFormView.accountNameInfoPool[accountNameItemsOrders[i]]);
        }
        return accountNameFormItems;
}

ZaAccountXFormView.validatePollingInterval = function(value, event, form) {
    var instance = form.getInstance ();
    this.setInstanceValue(value);
    var prefPollingInterval = instance.attrs[ZaAccount.A_zimbraPrefMailPollingInterval];
    if (!prefPollingInterval) {
        prefPollingInterval = instance._defaultValues.attrs[ZaAccount.A_zimbraPrefMailPollingInterval];
    }
    var minPollingInterval = instance.attrs[ZaAccount.A_zimbraMailMinPollingInterval];
    if (!minPollingInterval) {
        minPollingInterval = instance._defaultValues.attrs[ZaAccount.A_zimbraMailMinPollingInterval];
    }
    var prefPollingIntervalItem = form.getItemsById (ZaAccount.A_zimbraPrefMailPollingInterval)[0];
    try {
        var prefPollingInNum = parseInt(ZaUtil.getLifeTimeInSeconds(prefPollingInterval));
        var minPollingNum = parseInt(ZaUtil.getLifeTimeInSeconds(minPollingInterval));
        if (prefPollingInNum < minPollingNum){
            prefPollingIntervalItem.setError (ZaMsg.tt_mailPollingIntervalError + minPollingInterval) ;
            form.parent.setDirty(false);
        }else{
            prefPollingIntervalItem.clearError();
            form.parent.setDirty(true);
        }
    }catch (e){
        prefPollingIntervalItem.setError (e.message);
        form.parent.setDirty(false);
    }
}

/**
* This method is added to the map {@link ZaTabView#XFormModifiers}
* @param xFormObject {Object} a definition of the form. This method adds/removes/modifies xFormObject to construct
* an Account view.
**/
ZaAccountXFormView.myXFormModifier = function(xFormObject, entry) {

    var domainName;
    try {
        domainName = ZaApp.getInstance().getGlobalConfig().attrs[ZaGlobalConfig.A_zimbraDefaultDomainName];
        if(!domainName && ZaApp.getInstance().getDomainList().size() > 0)
            domainName = ZaApp.getInstance().getDomainList().getArray()[0].name;
    } catch (ex) {
        domainName = ZaSettings.myDomainName;
        if(ex.code != ZmCsfeException.SVC_PERM_DENIED) {
            throw(ex);
        }
    }

    var emptyAlias = " @" + domainName;
    var headerItems = [{type:_AJX_IMAGE_, src:"Person_32", label:null, rowSpan:3, cssStyle:"margin:auto;"},
        {type:_OUTPUT_, ref:ZaAccount.A_displayname, label:null,cssClass:"AdminTitle", height:"auto", width:350, rowSpan:3,
            cssStyle:"word-wrap:break-word;overflow:hidden;",
            visibilityChecks:[ZaItem.hasReadPermission],
            getDisplayValue:function(newValue) {
            return AjxStringUtil.htmlEncode(newValue);
        }
    }];
    /*headerItems.push({type:_OUTPUT_, ref:ZaAccount.A_COSId,valueChangeEventSources:[ZaAccount.A_COSId], labelLocation:_LEFT_, label:ZaMsg.NAD_ClassOfService, choices:this.cosChoices,getDisplayValue:function(newValue) {
            if(ZaItem.ID_PATTERN.test(newValue)) {
                var cos = ZaCos.getCosById(newValue, this.getForm().parent._app);
                if(cos)
                    newValue = cos.name;
                }
                if (newValue == null) {
                    newValue = "";
                } else {
                    newValue = "" + newValue;
                }
                return newValue;
            },
            visibilityChecks:[ZaItem.hasReadPermission]
    });*/

    if (ZaItem.hasReadPermission(ZaItem.A_zimbraId, entry)) {
        headerItems.push({type:_OUTPUT_,ref:ZaItem.A_zimbraId, label:ZaMsg.NAD_ZimbraID});
    }

    if (ZaItem.hasReadPermission(ZaItem.A_zimbraCreateTimestamp, entry))    {
        headerItems.push(
                         {
                         type:_OUTPUT_, ref:ZaItem.A_zimbraCreateTimestamp,
                         label:ZaMsg.LBL_zimbraCreateTimestamp, labelLocation:_LEFT_,
                         getDisplayValue:function() {
                         var val = ZaItem.formatServerTime(this.getInstanceValue());
                         if(!val)
                         return ZaMsg.Server_Time_NA;
                         else
                         return val;
                         }
                         });
    }

    if (!entry.isExternal && ZaItem.hasReadPermission(ZaAccount.A_mailHost, entry)) {
            headerItems.push({type:_OUTPUT_, ref:ZaAccount.A_mailHost, labelLocation:_LEFT_,label:ZabMsg.attrDesc_mailHost});
    } else if(entry.isExternal && ZaItem.hasReadPermission(ZaAccount.A_zimbraMailTransport, entry)) {
        headerItems.push({type:_OUTPUT_, ref:ZaAccount.A_zimbraMailTransport, labelLocation:_LEFT_,label:ZabMsg.attrDesc_mailHost});
    }

    if (AjxUtil.isEmailAddress(entry[ZaAccount.A_name], false)) {
        headerItems.push({type:_OUTPUT_,ref:ZaAccount.A_name, label:ZaMsg.NAD_Email, labelLocation:_LEFT_, required:false, cssStyle:"word-wrap:break-word;overflow:hidden;",
    		getDisplayValue: AjxUtil.htmlEncode
    	});
    }

    if (ZaItem.hasReadPermission(ZaAccount.A_accountStatus, entry)) {
        headerItems.push({type:_OUTPUT_,ref:ZaAccount.A_accountStatus, label:ZaMsg.NAD_AccountStatus, labelLocation:_LEFT_, choices:this.accountStatusChoices});
    }

    if (!entry.isExternal) {
        if(ZaItem.hasReadPermission(ZaAccount.A_zimbraMailQuota,entry) && ZaItem.hasRight(ZaAccount.GET_MAILBOX_INFO_RIGHT,entry)) {
                headerItems.push(
                    {type:_OUTPUT_,ref:ZaAccount.A2_mbxsize,
                        label:ZaMsg.LBL_quota,
                        getDisplayValue:function() {
                            var usedVal = this.getInstanceValue();
                            var formatter = AjxNumberFormat.getNumberInstance();
                            if(!usedVal)
                                usedVal = "0";
                            else {
                                usedVal = Number(usedVal / 1048576).toFixed(3);
                                usedVal = formatter.format(usedVal);
                            }

                            var quotaLimit = this.getInstanceValue(ZaAccount.A_zimbraMailQuota);
                            if(!quotaLimit || quotaLimit == "0") {
                                quotaLimit = ZaMsg.Unlimited;
                            } else {
                                quotaLimit = formatter.format(quotaLimit);
                            }

                            if(quotaLimit == ZaMsg.Unlimited) {
                                return AjxMessageFormat.format (ZaMsg.unlimitedQuotaValueTemplate,[usedVal,quotaLimit]);
                            } else {
                                return AjxMessageFormat.format (ZaMsg.quotaValueTemplate,[usedVal,quotaLimit]);
                            }
                        },
                        valueChangeEventSources:[ZaAccount.A_zimbraMailQuota,ZaAccount.A2_mbxsize]
                    });
        } else if(ZaItem.hasReadPermission(ZaAccount.A_zimbraMailQuota,entry)) {
                //assigned quota
            headerItems.push ({type:_OUTPUT_,ref:ZaAccount.A_zimbraMailQuota, label:ZaMsg.LBL_assignedQuota,
                getDisplayValue:function() {
                    var val = this.getInstanceValue();
                    if(!val || val == "0")
                        val = ZaMsg.Unlimited;

                    if(val == ZaMsg.Unlimited) {
                        return AjxMessageFormat.format (ZaMsg.unlimitedAssignedQuotaValueTemplate,[val]);
                    } else {
                        return AjxMessageFormat.format (ZaMsg.assignedQuotaTemplate,[val]);
                    }
                },
                bmolsnr:true
            });
        } else if(ZaItem.hasRight(ZaAccount.GET_MAILBOX_INFO_RIGHT,entry)) {
            headerItems.push({type:_OUTPUT_,ref:ZaAccount.A2_mbxsize, label:ZaMsg.LBL_usedQuota,
                getDisplayValue:function() {
                    var val = this.getInstanceValue();
                    if(!val)
                        val = "0";
                    else {
                        val = Number(val / 1048576).toFixed(3);
                    }
                    return AjxMessageFormat.format (ZaMsg.usedQuotaTemplate,[val]);
                },
                bmolsnr:true
            });
        }
    }

    if (ZaItem.hasReadPermission(ZaAccount.A_zimbraLastLogonTimestamp, entry))    {
        headerItems.push(
            {type:_OUTPUT_, ref:ZaAccount.A_zimbraLastLogonTimestamp,
                label:ZaMsg.LBL_Last_Login, labelLocation:_LEFT_,
                getDisplayValue:function() {
                    var val = this.getInstanceValue();
                    return ZaAccount.getLastLoginTime(val) ;
                }
             });
    }

    this.tabChoices = new Array();
    var _tab1, _tab2, _tab3, _tab4, _tab5, _tab6, _tab7, _tab8, _tab9, _tab10, _tab11;
    this.helpMap = {};
    _tab1 = ++this.TAB_INDEX;
    this.tabChoices.push({value:_tab1, label:ZaMsg.TABT_GeneralPage});
    this.helpMap[_tab1] = ZaUtil.HELP_URL;
    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.CONTACT_TAB_ATTRS, ZaAccountXFormView.CONTACT_TAB_RIGHTS)) {
        _tab2 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab2, label:ZaMsg.TABT_ContactInfo});
        this.helpMap[_tab2] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.MEMBEROF_TAB_ATTRS, ZaAccountXFormView.MEMBEROF_TAB_RIGHTS)) {
        _tab3 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab3, label:ZaMsg.TABT_MemberOf});
        this.helpMap[_tab3] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.FEATURE_TAB_ATTRS, ZaAccountXFormView.FEATURE_TAB_RIGHTS)) {
        _tab4 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab4, label:ZaMsg.TABT_Features});
        this.helpMap[_tab4] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.PREFERENCES_TAB_ATTRS, ZaAccountXFormView.PREFERENCES_TAB_RIGHTS)) {
        _tab5 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab5, label:ZaMsg.TABT_Preferences});
        this.helpMap[_tab5] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.ALIASES_TAB_ATTRS, ZaAccountXFormView.ALIASES_TAB_RIGHTS)) {
        _tab6 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab6, label:ZaMsg.TABT_Aliases});
        this.helpMap[_tab6] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.FORWARDING_TAB_ATTRS, ZaAccountXFormView.FORWARDING_TAB_RIGHTS)) {
        _tab7 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab7, label:ZaMsg.TABT_Forwarding});
        this.helpMap[_tab7] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.INTEROP_TAB_ATTRS, ZaAccountXFormView.INTEROP_TAB_RIGHTS)) {
        _tab8 = ++this.TAB_INDEX;
        this.tabChoices.push({value: _tab8, label: ZaMsg.TABT_Interop}) ;
        this.helpMap[_tab8] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.SKIN_TAB_ATTRS, ZaAccountXFormView.SKIN_TAB_RIGHTS)) {
        _tab9 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab9, label:ZaMsg.TABT_Themes});
        this.helpMap[_tab9] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.ZIMLET_TAB_ATTRS, ZaAccountXFormView.ZIMLET_TAB_RIGHTS)) {
        _tab10 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab10, label:ZaMsg.TABT_Zimlets});
        this.helpMap[_tab10] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.ADVANCED_TAB_ATTRS, ZaAccountXFormView.ADVANCED_TAB_RIGHTS)) {
        _tab11 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab11, label:ZaMsg.TABT_Advanced});
        this.helpMap[_tab11] = ZaUtil.HELP_URL;
    }

    var cases = [];

        var case1 = {type:_ZATABCASE_,caseKey:_tab1,
            paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
            numCols:1};

        var case1Items = [
             {type: _DWT_ALERT_, ref: ZaAccount.A2_domainLeftAccounts,
                 visibilityChecks:[ZaAccountXFormView.isDomainLeftAccountsAlertVisible],
                 visibilityChangeEventSources:[ZaAccount.A2_domainLeftAccounts,ZaAccount.A_name, ZaAccount.A2_accountTypes],
                containerCssStyle: "width:400px;",
                bmolsnr:true,
                style: DwtAlert.WARNING, iconVisible: false
             },

            //account types group
            {type:_TOP_GROUPER_, label:ZaMsg.NAD_AccountTypeGrouper, id:"account_type_group",
                    colSpan: "*", numCols: 1, colSizes: ["100%"],
                    visibilityChecks:[ZaAccountXFormView.isAccountTypeGrouperVisible, ZaAccount.isShowAccountType],
                    visibilityChangeEventSources:[ZaAccount.A2_accountTypes,ZaAccount.A_COSId, ZaAccount.A_name, ZaAccount.A2_showAccountTypeMsg],
                    items: [
                        {type: _DWT_ALERT_,
                            visibilityChecks:[ZaAccountXFormView.isAccountTypeSet, ZaAccountXFormView.isAccountsTypeAlertInvisible],
                            visibilityChangeEventSources:[ZaAccount.A2_accountTypes,ZaAccount.A_COSId, ZaAccount.A_name,ZaAccount.A2_showAccountTypeMsg],
                            containerCssStyle: "width:400px;",
                            style: DwtAlert.CRITICAL, iconVisible: false ,
                            content: ZaMsg.ERROR_ACCOUNT_TYPE_NOT_SET
                        },
                            {type: _DWT_ALERT_, ref: ZaAccount.A2_showAccountTypeMsg,
                            visibilityChecks:[[XForm.checkInstanceValueNotEmty,ZaAccount.A2_showAccountTypeMsg]],
                            visibilityChangeEventSources:[ZaAccount.A2_showAccountTypeMsg, ZaAccount.A_name],
                            bmolsnr:true,
                            containerCssStyle: "width:400px;",
                            style: DwtAlert.WARNING, iconVisible: false
                            },
                        { type: _OUTPUT_, id: ZaAccountXFormView.accountTypeItemId ,
                            getDisplayValue: ZaAccount.getAccountTypeOutput,
                            //center the elements
                            cssStyle: "margin-left:auto;margin-right:auto;width:600px;"
                        }
                   ]
            },

            {type:_TOP_GROUPER_, label:ZaMsg.NAD_AccountNameGrouper, id:"account_form_name_group",
                colSizes:["275px","*"],numCols:2,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                    ZaAccountXFormView.ACCOUNT_NAME_GROUP_ATTRS]],
                items:ZaAccountXFormView.getAccountNameInfoItem()

            }
        ];

        var setupGroup = {type:_TOP_GROUPER_, label:ZaMsg.NAD_AccountSetupGrouper, id:"account_form_setup_group",
            colSizes:["275px","*"],numCols:2,
            items: [
                {ref:ZaAccount.A_accountStatus, type:_OSELECT1_, msgName:ZaMsg.NAD_AccountStatus,
                    label:ZaMsg.NAD_AccountStatus, bmolsnr:true,
                    labelLocation:_LEFT_, choices:this.accountStatusChoices
                }
            ],
            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                    [ZaAccount.A_accountStatus,
                                    ZaAccount.A_COSId,
                                    ZaAccount.A_zimbraIsAdminAccount]]]
        }


        setupGroup.items.push(
            {type:_GROUP_, numCols:3,colSizes:["156px","22px","100px"], nowrap:true, label:ZaMsg.NAD_ClassOfService, labelLocation:_LEFT_,
                visibilityChecks:[[ZaItem.hasReadPermission,ZaAccount.A_COSId]], attributeName: ZaAccount.A_COSId,
                id: ZaAccountXFormView.cosGroupItemId,
                items: [
                    {ref:ZaAccount.A_COSId,
                        type : _INPUT_,
                        onChange:ZaAccount.setCosChanged,
                        enableDisableChecks:[[ZaNewAccountXWizard.isAutoCos], [ZaItem.hasWritePermission,ZaAccount.A_COSId]],
                        enableDisableChangeEventSources:[ZaAccount.A2_autoCos],
                        getDisplayValue: function(newValue) {
							this.createDataList(ZaApp.getInstance().getCosListName());
                            if (newValue) {
                                var cos = ZaCos.getCosById(newValue);
                                return cos && cos.name;
                            }
                        }
                    },
                    {ref:ZaAccount.A2_autoCos, type:_CHECKBOX_,
                        visibilityChecks:[], subLabel:"",
                        enableDisableChecks:[ [ZaItem.hasWritePermission,ZaAccount.A_COSId]],
                        msgName:ZaMsg.NAD_Auto,label:ZaMsg.NAD_Auto,labelLocation:_RIGHT_,
                        trueValue:"TRUE", falseValue:"FALSE" , helpTooltip: false,
                        elementChanged: function(elementValue,instanceValue, event) {
                            this.getForm().parent.setDirty(true);
                            if(elementValue=="TRUE") {
                                var defaultCos = ZaCos.getDefaultCos4Account(this.getInstance()[ZaAccount.A_name], this.getInstance().attrs[ZaAccount.A_zimbraIsExternalVirtualAccount] == "TRUE");
                                if(defaultCos && defaultCos.id) {
                                    this.getInstance()._defaultValues = defaultCos;
                                    this.getModel().setInstanceValue(this.getInstance(),ZaAccount.A_COSId,defaultCos.id);
                                    //instance.attrs[ZaAccount.A_COSId] = defaultCos.id;
                                }
                                //ZaAccount.setDefaultCos(this.getInstance());
                                this.getParentItem().getItems()[0].updateElement(null);
                            }
                            this.getForm().itemChanged(this, elementValue, event);
                        }
                    }
                ]
            });


    setupGroup.items.push({ref:ZaAccount.A_zimbraIsAdminAccount, type:_CHECKBOX_,
            msgName:ZaMsg.NAD_IsSystemAdminAccount,label:ZaMsg.NAD_IsSystemAdminAccount,
            bmolsnr:true, trueValue:"TRUE", falseValue:"FALSE",
            visibilityChecks:[[XForm.checkInstanceValueNot,ZaAccount.A_zimbraIsExternalVirtualAccount,"TRUE"],[ZaItem.hasReadPermission,ZaAccount.A_zimbraIsAdminAccount]],
            visibilityChangeEventSources:[ZaAccount.A_zimbraIsExternalVirtualAccount,ZaAccount.A_zimbraIsAdminAccount]
    });
    case1Items.push(setupGroup);

    var passwordGroup = {type:_TOP_GROUPER_, label:ZaMsg.NAD_PasswordGrouper,id:"account_form_password_group",
        visibilityChecks:[[ZaItem.hasAnyRight,[ZaAccount.SET_PASSWORD_RIGHT, ZaAccount.CHANGE_PASSWORD_RIGHT]],
                          [XForm.checkInstanceValueNot,ZaAccount.A2_isExternalAuth,true]
            ],
        visibilityChangeEventSources:[ZaAccount.A2_isExternalAuth],
        colSizes:["275px","*"],numCols:2,
        items:[
                { type: _DWT_ALERT_, containerCssStyle: "padding-bottom:0;",
                      //style: DwtAlert.INFO,iconVisible: (!ZaAccountXFormView.isAuthfromInternal(entry.name)),
                      //content: ((ZaAccountXFormView.isAuthfromInternal(entry.name))?ZaMsg.Alert_InternalPassword:ZaMsg.Alert_ExternalPassword)
                      style: DwtAlert.INFO,iconVisible: false,
                      content: ZaMsg.Alert_InternalPassword

                },
        {ref:ZaAccount.A_password, type:_SECRET_, msgName:ZaMsg.NAD_Password,
            label:ZaMsg.NAD_Password, labelLocation:_LEFT_,
            visibilityChecks:[],enableDisableChecks:[[ZaAccountXFormView.isAuthfromInternalSync, entry.name, ZaAccount.A_name]],
            cssClass:"admin_xform_name_input"
        },
        {ref:ZaAccount.A2_confirmPassword, type:_SECRET_, msgName:ZaMsg.NAD_ConfirmPassword,
            label:ZaMsg.NAD_ConfirmPassword, labelLocation:_LEFT_,
            visibilityChecks:[], enableDisableChecks:[[ZaAccountXFormView.isAuthfromInternalSync, entry.name, ZaAccount.A_name]],
            cssClass:"admin_xform_name_input"
        },
        {ref:ZaAccount.A_zimbraPasswordMustChange,  type:_CHECKBOX_,
            msgName:ZaMsg.NAD_MustChangePwd,label:ZaMsg.NAD_MustChangePwd,
            trueValue:"TRUE", falseValue:"FALSE",
            visibilityChecks:[], enableDisableChecks:[[ZaAccountXFormView.isAuthfromInternalSync, entry.name, ZaAccount.A_name]]
        }
        ]
    };
    case1Items.push(passwordGroup);

    var externalAuthGroup = {type:_TOP_GROUPER_, label:ZaMsg.NAD_ExternalAuthGrouper,id:"account_form_ext_auth_group",
        visibilityChecks:[
            [XForm.checkInstanceValue,ZaAccount.A2_isExternalAuth,true],
            [ZaItem.hasReadPermission,ZaAccount.A_zimbraAuthLdapExternalDn]
        ],
        visibilityChangeEventSources:[ZaAccount.A2_isExternalAuth],
        colSizes:["275px","*"],numCols:2,
        items:[
            {ref:ZaAccount.A_zimbraAuthLdapExternalDn,type:_TEXTFIELD_,width:256,
                msgName:ZaMsg.NAD_AuthLdapExternalDn,label:ZaMsg.NAD_AuthLdapExternalDn, labelLocation:_LEFT_,
                align:_LEFT_, toolTipContent: ZaMsg.tt_AuthLdapExternalDn
            }
        ]
    };
    case1Items.push(externalAuthGroup);

    var notesGroup = {type:_TOP_GROUPER_, label:ZaMsg.NAD_NotesGrouper, id:"account_form_notes_group",
        colSizes:["275px","*"],numCols:2,
        visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible, [ZaAccount.A_notes, ZaAccount.A_description]]],
         items:[
            ZaItem.descriptionXFormItem,
            {ref:ZaAccount.A_notes, type:_TEXTAREA_, msgName:ZaMsg.NAD_Notes,
                label:ZaMsg.NAD_Notes, labelLocation:_LEFT_, labelCssStyle:"vertical-align:top;", width:"30em"
            }
        ]
    };

    case1Items.push(notesGroup);
    case1.items = case1Items;
    cases.push(case1);

    if(_tab2) {
        var case2={type:_ZATABCASE_, numCols:1, caseKey:_tab2,
            paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,  align:_CENTER_,
                    items: [
                        {type:_ZA_TOP_GROUPER_, label:ZaMsg.LBL_phone, id:"contact_form_phone_group",
                            width:"100%", numCols:2,colSizes: ["275px","100%"],
                            items:[
                                {ref:ZaAccount.A_telephoneNumber, type:_TEXTFIELD_, msgName:ZaMsg.NAD_telephoneNumber,label:ZaMsg.NAD_telephoneNumber,
                                 labelLocation:_LEFT_, width:250} ,
                                {ref:ZaAccount.A_homePhone, type:_TEXTFIELD_, msgName:ZaMsg.NAD_homePhone,label:ZaMsg.NAD_homePhone,
                                 labelLocation:_LEFT_, width:250} ,
                                {ref:ZaAccount.A_mobile, type:_TEXTFIELD_, msgName:ZaMsg.NAD_mobile,label:ZaMsg.NAD_mobile,
                                 labelLocation:_LEFT_, width:250} ,
                                {ref:ZaAccount.A_pager, type:_TEXTFIELD_, msgName:ZaMsg.NAD_pager,label:ZaMsg.NAD_pager,
                                 labelLocation:_LEFT_, width:250},
                                 {ref:ZaAccount.A_facsimileTelephoneNumber, type:_TEXTFIELD_, msgName:ZaMsg.NAD_facsimileTelephoneNumber,
                                 label:ZaMsg.NAD_facsimileTelephoneNumber, labelLocation:_LEFT_, width:250}

                            ]
                        },
                        {type:_ZA_TOP_GROUPER_, label:ZaMsg.LBL_company, id:"contact_form_company_group",
                            width:"100%", numCols:2,colSizes: ["275px","100%"],
                            items:[
                                {ref:ZaAccount.A_zimbraPhoneticCompany, type:_TEXTFIELD_, msgName:ZaMsg.NAD_zimbraPhoneticCompany,
                                 label:ZaMsg.NAD_zimbraPhoneticCompany, labelLocation:_LEFT_, width:250, visibilityChecks:[[ZaZimbraAdmin.isLanguage, "ja"]]},
                                {ref:ZaAccount.A_company, type:_TEXTFIELD_, msgName:ZaMsg.NAD_company,label:ZaMsg.NAD_company, labelLocation:_LEFT_,
                                 width:250} ,
                                {ref:ZaAccount.A_title,  type:_TEXTFIELD_, msgName:ZaMsg.NAD_title,label:ZaMsg.NAD_title, labelLocation:_LEFT_,
                                 width:250},
                                {type:_DYNSELECT_, ref:ZaAccount.A_manager, dataFetcherClass:ZaSearch,
                                    dataFetcherMethod:ZaSearch.prototype.dynSelectSearch,
                                    dataFetcherTypes:[ZaSearch.ACCOUNTS, ZaSearch.RESOURCES, ZaSearch.DLS],
                                    dataFetcherAttrs:[ZaItem.A_zimbraId, ZaItem.A_cn, ZaAccount.A_name, ZaAccount.A_displayname, ZaAccount.A_mail],
                                    label:ZaMsg.NAD_manager,labelLocation:_LEFT_,
                                    width:"100%", inputWidth:"250px", editable:true, forceUpdate:true,
                                    choices:new XFormChoices([], XFormChoices.OBJECT_LIST, "name", "name"),
                                    visibilityChecks:[],enableDisableChecks:[],
                                    onChange: function(value, event, form){
                                        if (value instanceof ZaItem ) {
                                            this.setInstanceValue(value.name);
                                        } else {
                                            this.setInstanceValue(value);
                                        }
                                    },
                                    autoCompleteEnabled : true
                                }
                            ]
                        },
                        {type:_ZA_TOP_GROUPER_, label:ZaMsg.LBL_address, id:"contact_form_address_group",
                            width:"100%", numCols:2,colSizes: ["275px","100%"],
                            items: ZaAccountXFormView.getAddressFormItem()
                        }
                    ]
                };
        cases.push(case2);
    }
    var directMemberOfHeaderList = new ZaAccountMemberOfsourceHeaderList(ZaAccountMemberOfsourceHeaderList.DIRECT);
    var indirectMemberOfHeaderList = new ZaAccountMemberOfsourceHeaderList(ZaAccountMemberOfsourceHeaderList.INDIRECT);
    var nonMemberOfHeaderList = new ZaAccountMemberOfsourceHeaderList(ZaAccountMemberOfsourceHeaderList.NON);

    if(_tab3) {
        //MemberOf Tab
        var case3={type:_ZATABCASE_, numCols:2, caseKey:_tab3, colSizes: ["390px","390px"],
            paddingStyle:"padding-left:15px;", cellpadding:2,
                    items: [
                        {type:_SPACER_, height:"10"},
                        //layout rapper around the direct/indrect list
                        {type: _GROUP_, width: "98%", numCols: 1, //colSizes: ["auto", 20],
                            items: [
                                //direct member group
                                {type:_ZALEFT_GROUPER_, numCols:1, width: "100%",
                                    label:ZaMsg.Account_DirectGroupLabel,
                                    containerCssStyle: "padding-top:5px;",
                                    items:[
                                        {ref: ZaAccount.A2_directMemberList, type: _S_DWT_LIST_, width: "98%", height: 200,
                                            cssClass: "DLSource", widgetClass: ZaAccountMemberOfListView,
                                            headerList: directMemberOfHeaderList, defaultColumnSortable: 0,
                                            onSelection:ZaAccountXFormView.directMemberOfSelectionListener,
                                            forceUpdate: true }    ,
                                        {type:_SPACER_, height:"5"},
                                        {type:_GROUP_, width:"100%", numCols:8, colSizes:[85,5, 85,"100%",80,5,80,5],
                                            items:[
                                                {type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonRemoveAll, width:80,
                                                    enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableAllButton,ZaAccount.A2_directMemberList]],
                                                    enableDisableChangeEventSources:[ZaAccount.A2_directMemberList],
                                                       onActivate:"ZaAccountMemberOfListView.removeAllGroups.call(this,event, ZaAccount.A2_directMemberList)"
                                                },
                                                {type:_CELLSPACER_, height:"100%"},
                                                {type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonRemove, width:80, id:"removeButton",
                                                    enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableAddRemoveButton,ZaAccount.A2_directMemberList]],
                                                      enableDisableChangeEventSources:[ZaAccount.A2_directMemberListSelected],
                                                      onActivate:"ZaAccountMemberOfListView.removeGroups.call(this,event, ZaAccount.A2_directMemberList)"
                                                },
                                                {type:_CELLSPACER_,height:"100%"},
                                                {type:_DWT_BUTTON_, label:ZaMsg.Previous, width:75, id:"backButton", icon:"LeftArrow", disIcon:"LeftArrowDis",
                                                    onActivate:"ZaAccountMemberOfListView.backButtonHndlr.call(this,event, ZaAccount.A2_directMemberList)",
                                                    enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableBackButton,ZaAccount.A2_directMemberList]],
                                                      enableDisableChangeEventSources:[ZaAccount.A2_directMemberList +"_offset"]
                                                },
                                                {type:_CELLSPACER_, height:"100%"},
                                                {type:_DWT_BUTTON_, label:ZaMsg.Next, width:75, id:"fwdButton", icon:"RightArrow", disIcon:"RightArrowDis",
                                                    onActivate:"ZaAccountMemberOfListView.fwdButtonHndlr.call(this,event, ZaAccount.A2_directMemberList)",
                                                    enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableForwardButton,ZaAccount.A2_directMemberList]],
                                                      enableDisableChangeEventSources:[ZaAccount.A2_directMemberList + "_more"]
                                                },
                                                {type:_CELLSPACER_, height:"100%"}
                                            ]
                                        }
                                    ]
                                },
                                {type:_SPACER_, height:"10"},
                                //indirect member group
                                {type:_ZALEFT_GROUPER_, numCols:1,  width: "100%", label:ZaMsg.Account_IndirectGroupLabel,
                                    containerCssStyle: "padding-top:5px;",
                                    items:[
                                        {ref: ZaAccount.A2_indirectMemberList, type: _S_DWT_LIST_, width: "98%", height: 200,
                                            cssClass: "DLSource", widgetClass: ZaAccountMemberOfListView,
                                            headerList: indirectMemberOfHeaderList, defaultColumnSortable: 0,
                                            onSelection:ZaAccountXFormView.indirectMemberOfSelectionListener,
                                            forceUpdate: true }    ,
                                        {type:_SPACER_, height:"5"},
                                        {type:_GROUP_, width:"100%", numCols:8, colSizes:[85,5, 85,"100%",80,5,80,5],
                                            items:[
                                                {type:_CELLSPACER_, height:"100%"},
                                                {type:_CELLSPACER_, height:"100%"},
                                                {type:_CELLSPACER_, height:"100%"},
                                                {type:_CELLSPACER_, height:"100%"},
                                                {type:_DWT_BUTTON_, label:ZaMsg.Previous, width:75, id:"backButton", icon:"LeftArrow", disIcon:"LeftArrowDis",
                                                    onActivate:"ZaAccountMemberOfListView.backButtonHndlr.call(this,event, ZaAccount.A2_indirectMemberList)",
                                                    enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableBackButton,ZaAccount.A2_indirectMemberList]],
                                                      enableDisableChangeEventSources:[ZaAccount.A2_indirectMemberList + "_offset"]
                                                },
                                                {type:_CELLSPACER_, height:"100%"},
                                                {type:_DWT_BUTTON_, label:ZaMsg.Next, width:75, id:"fwdButton", icon:"RightArrow", disIcon:"RightArrowDis",
                                                    onActivate:"ZaAccountMemberOfListView.fwdButtonHndlr.call(this,event, ZaAccount.A2_indirectMemberList)",
                                                    enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableForwardButton,ZaAccount.A2_indirectMemberList]],
                                                      enableDisableChangeEventSources:[ZaAccount.A2_indirectMemberList + "_more"]
                                                },
                                                {type:_CELLSPACER_, height:"100%"}
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },

                        //non member group
                        {type:_ZARIGHT_GROUPER_, numCols:1, width: "100%", label:ZaMsg.Account_NonGroupLabel,
                            containerCssStyle: "padding-top:5px;",
                            items:[
                                {type:_GROUP_, numCols:5, colSizes:[55, "auto",10,80, 120,20], width:"100%",
                                   items:[
                                           {type:_OUTPUT_, value:ZaMsg.DLXV_LabelFind, nowrap:true},
                                        {ref:"query", type:_TEXTFIELD_, width:"100%", label:null,
                                          elementChanged: function(elementValue,instanceValue, event) {
                                              var charCode = event.charCode;
                                              if (charCode == 13 || charCode == 3) {
                                                  ZaAccountMemberOfListView.prototype.srchButtonHndlr.call(this);
                                              } else {
                                                  this.getForm().itemChanged(this, elementValue, event);
                                              }
                                              },
                                              visibilityChecks:[],
                                              enableDisableChecks:[]
                                        },
                                        {type:_CELLSPACER_},
                                        {type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonSearch, width:80,
                                           onActivate:ZaAccountMemberOfListView.prototype.srchButtonHndlr
                                        },
                                        {ref: ZaAccount.A2_showSameDomain, type: _CHECKBOX_, align:_RIGHT_, msgName:ZaMsg.NAD_SearchSameDomain,
                                                label:AjxMessageFormat.format (ZaMsg.NAD_SearchSameDomain),
                                                subLabel:"",
                                                labelCssClass:"xform_label",
                                                labelLocation:_LEFT_, trueValue:"TRUE", falseValue:"FALSE",
                                                enableDisableChecks:[],
                                                visibilityChecks:[]
                                        }
                                    ]
                                 },
                                {type:_SPACER_, height:"5"},

                                {ref: ZaAccount.A2_nonMemberList, type: _S_DWT_LIST_, width: "98%", height: 455,
                                    cssClass: "DLSource", widgetClass: ZaAccountMemberOfListView,
                                    headerList: nonMemberOfHeaderList, defaultColumnSortable: 0,
                                    onSelection:ZaAccountXFormView.nonMemberOfSelectionListener,
                                    forceUpdate: true },

                                {type:_SPACER_, height:"5"},
                                //add action buttons
                                {type:_GROUP_, width:"100%", numCols:8, colSizes:[85,5, 85,"100%",80,5,80,5],
                                    items: [
                                           {type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonAddFromList, width:80,
                                            enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableAddRemoveButton,ZaAccount.A2_nonMemberList]],
                                            enableDisableChangeEventSources:[ZaAccount.A2_nonMemberListSelected],
                                            onActivate:"ZaAccountMemberOfListView.addGroups.call(this,event, ZaAccount.A2_nonMemberList)"
                                        },
                                           {type:_CELLSPACER_, height:"100%"},
                                           {type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonAddAll, width:80,
                                            enableDisableChangeEventSources:[ZaAccount.A2_nonMemberList],
                                            enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableAllButton,ZaAccount.A2_nonMemberList]],
                                            onActivate:"ZaAccountMemberOfListView.addAllGroups.call(this,event, ZaAccount.A2_nonMemberList)"
                                        },
                                        {type:_CELLSPACER_, height:"100%"},
                                        {type:_DWT_BUTTON_, label:ZaMsg.Previous, width:75, id:"backButton", icon:"LeftArrow", disIcon:"LeftArrowDis",
                                            enableDisableChangeEventSources:[ZaAccount.A2_nonMemberList + "_offset"],
                                            enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableBackButton,ZaAccount.A2_nonMemberList]],
                                            onActivate:"ZaAccountMemberOfListView.backButtonHndlr.call(this,event, ZaAccount.A2_nonMemberList)"
                                        },
                                        {type:_CELLSPACER_, height:"100%"},
                                        {type:_DWT_BUTTON_, label:ZaMsg.Next, width:75, id:"fwdButton", icon:"RightArrow", disIcon:"RightArrowDis",
                                             enableDisableChangeEventSources:[ZaAccount.A2_nonMemberList + "_more"],
                                            enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableForwardButton,ZaAccount.A2_nonMemberList]],
                                            onActivate:"ZaAccountMemberOfListView.fwdButtonHndlr.call(this,event, ZaAccount.A2_nonMemberList)"
                                        },
                                        {type:_CELLSPACER_, height:"100%"}
                                      ]
                                }
                            ]
                        },
                        {type: _GROUP_, width: "100%", items: [
                                {type:_CELLSPACER_}
                            ]
                        }
                    ]
                };

        cases.push(case3);
    }
    if(_tab4) {
        cases.push({type:_ZATABCASE_,id:"account_form_features_tab",  numCols:1, width:"100%", caseKey:_tab4,
        paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
                items: [
                    { type: _DWT_ALERT_,
                      containerCssStyle: "padding-top:20px;width:400px;",
                      style: DwtAlert.INFO,
                      iconVisible: false,
                      content: ZaMsg.NAD_CheckFeaturesInfo
                    },
                    {type:_ZA_TOP_GROUPER_, label: ZaMsg.NAD_zimbraMajorFeature, id:"account_form_features_major", colSizes:["auto"],numCols:1,
                        visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                            [ZaAccount.A_zimbraFeatureMailEnabled,
                             ZaAccount.A_zimbraFeatureContactsEnabled,
                             ZaAccount.A_zimbraFeatureCalendarEnabled,
                             ZaAccount.A_zimbraFeatureTasksEnabled,
                             ZaAccount.A_zimbraFeatureBriefcasesEnabled,
                             ZaAccount.A_zimbraFeatureOptionsEnabled
                             ]]
                        ],
                        items:[
                            {ref:ZaAccount.A_zimbraFeatureMailEnabled,
                                type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                msgName:ZaMsg.LBL_zimbraFeatureMailEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureMailEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"
                            },
                            {ref:ZaAccount.A_zimbraFeatureContactsEnabled,
                                type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                msgName:ZaMsg.LBL_zimbraFeatureContactsEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureContactsEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureCalendarEnabled,
                                type:_SUPER_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                msgName:ZaMsg.LBL_zimbraFeatureCalendarEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureCalendarEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureTasksEnabled,
                                type:_SUPER_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                msgName:ZaMsg.LBL_zimbraFeatureTaskEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureTaskEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"},
                            //{ref:ZaAccount.A_zimbraFeatureNotebookEnabled, type:_SUPER_CHECKBOX_,
                            //    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                            //    msgName:ZaMsg.LBL_zimbraFeatureNotebookEnabled,
                            //    checkBoxLabel:ZaMsg.LBL_zimbraFeatureNotebookEnabled,
                            //    trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureBriefcasesEnabled, type:_SUPER_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                msgName:ZaMsg.LBL_zimbraFeatureBriefcasesEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureBriefcasesEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureOptionsEnabled, type:_SUPER_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                msgName:ZaMsg.LBL_zimbraFeatureOptionsEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureOptionsEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"}
                        ]
                    },
                    {type:_ZA_TOP_GROUPER_, label: ZaMsg.NAD_zimbraGeneralFeature, id:"account_form_features_general", colSizes:["auto"],numCols:1,
                        visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                            [ZaAccount.A_zimbraFeatureTaggingEnabled,
                             ZaAccount.A_zimbraFeatureSharingEnabled,
                             ZaAccount.A_zimbraFeatureChangePasswordEnabled,
                             ZaAccount.A_zimbraFeatureSkinChangeEnabled,
                             ZaAccount.A_zimbraFeatureManageZimlets,
                             ZaAccount.A_zimbraFeatureHtmlComposeEnabled,
                             ZaAccount.A_zimbraFeatureGalEnabled,
                             ZaAccount.A_zimbraFeatureMAPIConnectorEnabled,
                             ZaAccount.A_zimbraFeatureEwsEnabled,
                             ZaAccount.A_zimbraFeatureTouchClientEnabled,
                             ZaAccount.A_zimbraFeatureWebClientOfflineAccessEnabled,
                             ZaAccount.A_zimbraFeatureBriefcasesEnabled,
                             ZaAccount.A_zimbraFeatureGalAutoCompleteEnabled,
                             ZaAccount.A_zimbraFeatureImportFolderEnabled,
                             ZaAccount.A_zimbraFeatureExportFolderEnabled,
                             ZaAccount.A_zimbraDumpsterEnabled,
                             ZaAccount.A_zimbraDumpsterPurgeEnabled
                             ]]
                        ],
                        items:[
                            {ref:ZaAccount.A_zimbraFeatureTaggingEnabled, type:_SUPER_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                msgName:ZaMsg.LBL_zimbraFeatureTaggingEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureTaggingEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureSharingEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureSharingEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureSharingEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraExternalSharingEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraExternalSharingEnabled,checkBoxLabel:ZaMsg.LBL_zimbraExternalSharingEnabled,trueValue:"TRUE", falseValue:"FALSE",
                                visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaAccount.A_zimbraFeatureSharingEnabled, "TRUE"]], visibilityChangeEventSources:[ZaAccount.A_zimbraFeatureSharingEnabled]
                            },
                            {ref:ZaAccount.A_zimbraPublicSharingEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPublicSharingEnabled,checkBoxLabel:ZaMsg.LBL_zimbraPublicSharingEnabled,trueValue:"TRUE", falseValue:"FALSE",
                                visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaAccount.A_zimbraFeatureSharingEnabled, "TRUE"]], visibilityChangeEventSources:[ZaAccount.A_zimbraFeatureSharingEnabled]
                            },
                            {ref:ZaAccount.A_zimbraFeatureChangePasswordEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureChangePasswordEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureChangePasswordEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureSkinChangeEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureSkinChangeEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureSkinChangeEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureManageZimlets, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureManageZimlets,checkBoxLabel:ZaMsg.LBL_zimbraFeatureManageZimlets, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureHtmlComposeEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureHtmlComposeEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureHtmlComposeEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            //{ref:ZaAccount.A_zimbraFeatureShortcutAliasesEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureShortcutAliasesEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureShortcutAliasesEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureGalEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureGalEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureGalEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureMAPIConnectorEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureMAPIConnectorEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureMAPIConnectorEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureEwsEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureEwsEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureEwsEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureTouchClientEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureTouchClientEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureTouchClientEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureWebClientOfflineAccessEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureWebClientOfflineAccessEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureWebClientOfflineAccessEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureGalAutoCompleteEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureGalAutoCompleteEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureGalAutoCompleteEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureImportFolderEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureImportFolderEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureImportFolderEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureExportFolderEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureExportFolderEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureExportFolderEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraDumpsterEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.MSG_zimbraDumpsterEnabled, checkBoxLabel:ZaMsg.LBL_zimbraDumpsterEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraDumpsterPurgeEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.MSG_zimbraDumpsterPurgeEnabled, checkBoxLabel:ZaMsg.LBL_zimbraDumpsterPurgeEnabled, trueValue:"TRUE", falseValue:"FALSE",
                                visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaAccount.A_zimbraDumpsterEnabled, "TRUE"]], visibilityChangeEventSources:[ZaAccount.A_zimbraDumpsterEnabled]
                            }

                        ]
                    },
                    {type:_ZA_TOP_GROUPER_, label: ZaMsg.NAD_zimbraMailFeature, id:"account_form_features_mail", colSizes:["auto"],numCols:1,
                        visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                            [ZaAccount.A_zimbraFeatureMailPriorityEnabled,
                             ZaAccount.A_zimbraFeatureFlaggingEnabled,
                             ZaAccount.A_zimbraImapEnabled,
                             ZaAccount.A_zimbraPop3Enabled,
                             ZaAccount.A_zimbraFeatureWebClientEnabled,
                             ZaAccount.A_zimbraFeatureImapDataSourceEnabled,
                             ZaAccount.A_zimbraFeaturePop3DataSourceEnabled,
                             ZaAccount.A_zimbraFeatureMailSendLaterEnabled,
                             ZaAccount.A_zimbraFeatureConversationsEnabled,
                             ZaAccount.A_zimbraFeatureFiltersEnabled,
                             ZaAccount.A_zimbraFeatureOutOfOfficeReplyEnabled,
                             ZaAccount.A_zimbraFeatureNewMailNotificationEnabled,
                             ZaAccount.A_zimbraFeatureIdentitiesEnabled,
                             ZaAccount.A_zimbraFeatureReadReceiptsEnabled
                             ]]
                        ],
                        enableDisableChecks:[[XForm.checkInstanceValue,ZaAccount.A_zimbraFeatureMailEnabled,"TRUE"]],
                        enableDisableChangeEventSources:[ZaAccount.A_zimbraFeatureMailEnabled, ZaAccount.A_COSId],
                        items:[
                            {ref:ZaAccount.A_zimbraFeatureMailPriorityEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureMailPriorityEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureMailPriorityEnabled, trueValue:"TRUE", falseValue:"FALSE"}    ,
                            {ref:ZaAccount.A_zimbraFeatureFlaggingEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureFlaggingEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureFlaggingEnabled, trueValue:"TRUE", falseValue:"FALSE"}    ,
                            {ref:ZaAccount.A_zimbraImapEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraImapEnabled,checkBoxLabel:ZaMsg.LBL_zimbraImapEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraPop3Enabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPop3Enabled,checkBoxLabel:ZaMsg.LBL_zimbraPop3Enabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureWebClientEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureWebClientEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureWebClientEnabled,  trueValue:"TRUE", falseValue:"FALSE",
                                visibilityChecks : [ function() {
                                    return ZaAccountXFormView.isAttributeDefined.call(this, ZaAccount.A_zimbraFeatureWebClientEnabled);
                                }]
                            },
                            {ref:ZaAccount.A_zimbraFeatureImapDataSourceEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraExternalImapEnabled,checkBoxLabel:ZaMsg.LBL_zimbraExternalImapEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeaturePop3DataSourceEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraExternalPop3Enabled,checkBoxLabel:ZaMsg.LBL_zimbraExternalPop3Enabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureMailSendLaterEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureMailSendLaterEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureMailSendLaterEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureConversationsEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureConversationsEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureConversationsEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureFiltersEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureFiltersEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureFiltersEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureOutOfOfficeReplyEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureOutOfOfficeReplyEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureOutOfOfficeReplyEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureNewMailNotificationEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureNewMailNotificationEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureNewMailNotificationEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureIdentitiesEnabled,
                                type:_SUPER_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                msgName:ZaMsg.LBL_zimbraFeatureIdentitiesEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureIdentitiesEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"
                            },
                            {ref:ZaAccount.A_zimbraFeatureReadReceiptsEnabled,
                                type:_SUPER_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureReadReceiptsEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"
                            }
                        ]
                    },
                    {
                        type: _ZA_TOP_GROUPER_,
                        label: ZaMsg.NAD_zimbraContactFeature,
                        id: "account_form_features_contact",
                        enableDisableChecks: [
                            [
                                XForm.checkInstanceValue,
                                ZaAccount.A_zimbraFeatureContactsEnabled,
                                "TRUE"
                            ]
                        ],
                        enableDisableChangeEventSources: [ZaAccount.A_zimbraFeatureContactsEnabled, ZaAccount.A_COSId],
                        visibilityChecks: [
                            [
                                ZATopGrouper_XFormItem.isGroupVisible,
                                [
                                    ZaAccount.A_zimbraFeatureDistributionListFolderEnabled
                                ]
                            ]
                        ],
                        items: [
                            {
                                ref: ZaAccount.A_zimbraFeatureDistributionListFolderEnabled,
                                type: _SUPER_CHECKBOX_,
                                resetToSuperLabel: ZaMsg.NAD_ResetToCOS,
                                msgName: ZaMsg.MSG_zimbraFeatureDistributionListFolderEnabled,
                                checkBoxLabel: ZaMsg.LBL_zimbraFeatureDistributionListFolderEnabled,
                                trueValue: "TRUE",
                                falseValue: "FALSE"
                            }
                        ]
                    },
                    {type:_ZA_TOP_GROUPER_, label: ZaMsg.NAD_zimbraCalendarFeature, id:"account_form_features_calendar",colSizes:["auto"],numCols:1,
                        visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                            [ZaAccount.A_zimbraFeatureGroupCalendarEnabled,
                             //ZaAccount.A_zimbraFeatureFreeBusyViewEnabled,
                             ZaAccount.A_zimbraFeatureCalendarReminderDeviceEmailEnabled
                             ]]
                        ],
                        enableDisableChecks:[[XForm.checkInstanceValue,ZaAccount.A_zimbraFeatureCalendarEnabled,"TRUE"]],
                        enableDisableChangeEventSources:[ZaAccount.A_zimbraFeatureCalendarEnabled,ZaAccount.A_COSId],
                        items:[
                            {ref:ZaAccount.A_zimbraFeatureGroupCalendarEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureGroupCalendarEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureGroupCalendarEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            //{ref:ZaAccount.A_zimbraFeatureFreeBusyViewEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureFreeBusyViewEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureFreeBusyViewEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureCalendarReminderDeviceEmailEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureCalendarReminderDeviceEmailEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureCalendarReminderDeviceEmailEnabled,  trueValue:"TRUE", falseValue:"FALSE"}
                        ]
                    },
                    {type:_ZA_TOP_GROUPER_, label: ZaMsg.NAD_zimbraSearchFeature, id:"account_form_features_search", colSizes:["auto"],numCols:1,
                        visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                            [ZaAccount.A_zimbraFeatureAdvancedSearchEnabled,
                            ZaAccount.A_zimbraFeatureSavedSearchesEnabled,
                            ZaAccount.A_zimbraFeatureInitialSearchPreferenceEnabled,
                            ZaAccount.A_zimbraFeaturePeopleSearchEnabled
                            ]]
                        ],
                        items:[
                            {ref:ZaAccount.A_zimbraFeatureAdvancedSearchEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureAdvancedSearchEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureAdvancedSearchEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureSavedSearchesEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureSavedSearchesEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureSavedSearchesEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureInitialSearchPreferenceEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureInitialSearchPreferenceEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureInitialSearchPreferenceEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                          {ref:ZaAccount.A_zimbraFeaturePeopleSearchEnabled, type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeaturePeopleSearchEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeaturePeopleSearchEnabled, trueValue:"TRUE", falseValue:"FALSE"}
                        ]
                    },
                                        {type:_ZA_TOP_GROUPER_, label: ZaMsg.NAD_zimbraSMIMEFeature, id:"account_form_features_smime", colSizes:["auto"],numCols:1,
                                                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                              [ ZaAccount.A_zimbraFeatureSMIMEEnabled]]],
                                                items:[
                                                 {ref:ZaAccount.A_zimbraFeatureSMIMEEnabled,
                                                        type:_SUPER_CHECKBOX_,
                                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                                        msgName:ZaMsg.LBL_zimbraFeatureSMIMEEnabled,
                                                        checkBoxLabel:ZaMsg.LBL_zimbraFeatureSMIMEEnabled,
                                                        trueValue:"TRUE", falseValue:"FALSE"}
                                                ]
                                        }
                ]
            });
    }
    if(_tab5) {
        var prefItems = [
                        {type:_ZA_TOP_GROUPER_, id:"account_prefs_general",colSizes:["275px","auto"],numCols:2,
                            label: ZaMsg.NAD_GeneralOptions,
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                    [ZaAccount.A_zimbraPrefClientType,
                                    ZaAccount.A_zimbraPrefMailInitialSearch,
                                    ZaAccount.A_zimbraPrefShowSearchString,
                                    ZaAccount.A_zimbraPrefImapSearchFoldersEnabled,
                                    ZaAccount.A_zimbraPrefUseKeyboardShortcuts,
                                    ZaAccount.A_zimbraPrefWarnOnExit,
                                    ZaAccount.A_zimbraPrefAdminConsoleWarnOnExit,
                                    ZaAccount.A_zimbraPrefShowSelectionCheckbox,
                                    ZaAccount.A_zimbraJunkMessagesIndexingEnabled,
                                    ZaAccount.A_zimbraPrefLocale
                                    ]]
                            ],
                            items :[
                                {ref:ZaAccount.A_zimbraPrefClientType,
                                    type:_SUPER_SELECT1_,
                                    colSpan:2,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPrefClientType,
                                    label:ZaMsg.LBL_zimbraPrefClientType,
                                    labelLocation:_LEFT_
                                },
                                {ref:ZaAccount.A_zimbraPrefMailInitialSearch, type:_SUPER_TEXTFIELD_,
                                    msgName:ZaMsg.LBL_zimbraPrefMailInitialSearch,
                                    txtBoxLabel:ZaMsg.LBL_zimbraPrefMailInitialSearch,
                                    labelCssClass:"gridGroupBodyLabel",
                                    labelCssStyle:"border-right:1px solid;",
                                    labelLocation:_LEFT_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                },
                                {ref:ZaAccount.A_zimbraPrefShowSearchString,
                                    type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefShowSearchString,checkBoxLabel:ZaMsg.LBL_zimbraPrefShowSearchString,trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefImapSearchFoldersEnabled,
                                    type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefImapSearchFoldersEnabled,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefImapSearchFoldersEnabled,
                                    trueValue:"TRUE", falseValue:"FALSE"
                                },
                                {ref:ZaAccount.A_zimbraPrefUseKeyboardShortcuts,
                                    type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,checkBoxLabel:ZaMsg.LBL_zimbraPrefUseKeyboardShortcuts, trueValue:"TRUE", falseValue:"FALSE"},

                                {ref:ZaAccount.A_zimbraPrefWarnOnExit, type:_SUPER_CHECKBOX_, nowrap:false,labelWrap:true,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,checkBoxLabel:ZaMsg.LBL_zimbraPrefWarnOnExit,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefAdminConsoleWarnOnExit, type:_SUPER_CHECKBOX_, nowrap:false,labelWrap:true,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,checkBoxLabel:ZabMsg.LBL_zimbraPrefAdminConsoleWarnOnExit,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefShowSelectionCheckbox, type:_SUPER_CHECKBOX_,
                                    labelWrap: true,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS, checkBoxLabel:ZaMsg.LBL_zimbraPrefShowSelectionCheckbox,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraJunkMessagesIndexingEnabled,
                                    type:_SUPER_CHECKBOX_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraJunkMessagesIndexingEnabled,
                                    checkBoxLabel:ZaMsg.LBL_zimbraJunkMessagesIndexingEnabled,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefLocale, type:_SUPER_SELECT1_,
                                    colSpan:2,
                                    choices: ZaSettings.getLocaleChoices(),
                                    msgName:ZaMsg.LBL_zimbraPrefLocale,label:ZaMsg.LBL_zimbraPrefLocale,
                                    labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS}
                            ]
                        },
                        {type:_ZA_TOP_GROUPER_, id:"account_prefs_standard_client",colSizes:["275px","auto"],numCols:2,
                            label:ZaMsg.NAD_MailOptionsStandardClient,
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                [
                                    ZaAccount.A_zimbraMaxMailItemsPerPage,
                                    ZaAccount.A_zimbraPrefMailItemsPerPage
                                ]]
                            ],
                            items :[
                                {ref:ZaAccount.A_zimbraMaxMailItemsPerPage,
                                    type:_SUPER_SELECT1_,
                                    editable:true,
                                    inputSize:4,
                                    choices:[10,25,50,100,250,500,1000],
                                    msgName:ZaMsg.MSG_zimbraMaxMailItemsPerPage,
                                    label:ZaMsg.LBL_zimbraMaxMailItemsPerPage, labelLocation:_LEFT_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS, valueLabel:null},
                                {ref:ZaAccount.A_zimbraPrefMailItemsPerPage,
                                    type:_SUPER_SELECT1_,
                                    editable:false,
                                    msgName:ZaMsg.MSG_zimbraPrefMailItemsPerPage,
                                    label:ZaMsg.LBL_zimbraPrefMailItemsPerPage, labelLocation:_LEFT_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS, valueLabel:null}
                            ]
                        },
                        {type:_ZA_TOP_GROUPER_, id:"account_prefs_mail_general",
                            label: ZaMsg.NAD_MailOptions,
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                [
                                    ZaAccount.A_zimbraPrefMessageViewHtmlPreferred,
                                    ZaAccount.A_zimbraPrefDisplayExternalImages,
                                    ZaAccount.A_zimbraPrefGroupMailBy,
                                    ZaAccount.A_zimbraPrefMailDefaultCharset,
                                    ZaAccount.A_zimbraPrefMailToasterEnabled,
                                    ZaAccount.A_zimbraPrefMessageIdDedupingEnabled,
                                    ZaAccount.A_zimbraPrefItemsPerVirtualPage,
                                ]]
                            ],
                            items :[
                                {ref:ZaAccount.A_zimbraPrefMessageViewHtmlPreferred,
                                    type:_SUPER_CHECKBOX_,  colSpan:2,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefMessageViewHtmlPreferred,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefMessageViewHtmlPreferred,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefDisplayExternalImages,
                                    type:_SUPER_CHECKBOX_,  colSpan:2,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefDisplayExternalImages,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefDisplayExternalImages,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefGroupMailBy,
                                    type:_SUPER_SELECT1_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefGroupMailBy,
                                    label:ZaMsg.LBL_zimbraPrefGroupMailBy,
                                    labelLocation:_LEFT_},

                                {ref:ZaAccount.A_zimbraPrefMailDefaultCharset, type:_SUPER_SELECT1_,
                                    msgName:ZaMsg.LBL_zimbraPrefMailDefaultCharset,label:ZaMsg.LBL_zimbraPrefMailDefaultCharset,
                                     labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS},
                                {ref:ZaAccount.A_zimbraPrefMailToasterEnabled,
                                     type:_SUPER_CHECKBOX_,  colSpan:2,
                                     resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                     msgName:ZaMsg.MSG_zimbraPrefMailToasterEnabled,
                                     checkBoxLabel:ZaMsg.LBL_zimbraPrefMailToasterEnabled,
                                     trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefMessageIdDedupingEnabled,
                                    type:_SUPER_CHECKBOX_,  colSpan:2,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPrefMessageIdDedupingEnabled,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefMessageIdDedupingEnabled,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefItemsPerVirtualPage, type:_SUPER_TEXTFIELD_,
                                     colSizes:["275px", "275px", "*"],colSpan:2,
                     msgName:ZaMsg.LBL_zimbraPrefItemsPerVirtualPage,
                                     txtBoxLabel:ZaMsg.LBL_zimbraPrefItemsPerVirtualPage,
                     labelLocation:_LEFT_,
resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
textFieldCssClass:"admin_xform_number_input"}
                            ]
                        },
                        {type:_ZA_TOP_GROUPER_,colSizes:["275px","100%"], id:"account_prefs_mail_receiving", numCols: 2,
                            label:ZaMsg.NAD_MailOptionsReceiving,
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                [ZaAccount.A_zimbraPrefMailPollingInterval,
                                ZaAccount.A_zimbraMailMinPollingInterval,
                                ZaAccount.A_zimbraPrefMailSoundsEnabled,
                                ZaAccount.A_zimbraPrefMailFlashIcon,
                                ZaAccount.A_zimbraPrefMailFlashTitle,
                                ZaAccount.A_zimbraPrefNewMailNotificationEnabled,
                                ZaAccount.A_zimbraPrefNewMailNotificationAddress,
                                ZaAccount.A_zimbraPrefOutOfOfficeReplyEnabled,
                                ZaAccount.A_zimbraPrefOutOfOfficeCacheDuration,
                                ZaAccount.A_zimbraPrefOutOfOfficeReply,
                                ZaAccount.A_zimbraPrefMailSendReadReceipts,
                                ZaAccount.A_zimbraPrefReadReceiptsToAddress]]
                            ],
                            items :[

                                {ref:ZaAccount.A_zimbraPrefMailPollingInterval, type:_SUPER_SELECT1_,
                                    labelCssClass:"gridGroupBodyLabel",
                                    msgName:ZaMsg.MSG_zimbraPrefMailPollingInterval,
                                    label:ZaMsg.LBL_zimbraPrefMailPollingInterval,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    onChange:ZaAccountXFormView.validatePollingInterval,
                                    nowrap:false,labelWrap:true
                                },
                                {ref:ZaAccount.A_zimbraMailMinPollingInterval,
                                    labelCssClass:"gridGroupBodyLabel",
                                    type:_SUPER_LIFETIME_,
                                    msgName:ZaMsg.MSG_zimbraMailMinPollingInterval,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailMinPollingInterval,
                                    onChange:ZaAccountXFormView.validatePollingInterval,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    colSpan:2
                                },
                                {ref:ZaAccount.A_zimbraPrefMailSoundsEnabled,
                                    type:_SUPER_CHECKBOX_, colSpan:2,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_playSound,
                                    checkBoxLabel:ZaMsg.LBL_playSound,
                                    trueValue:"TRUE", falseValue:"FALSE"
                                },
                                {ref:ZaAccount.A_zimbraPrefMailFlashIcon,
                                    type:_SUPER_CHECKBOX_,  colSpan:2,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_flashIcon,
                                    checkBoxLabel:ZaMsg.LBL_flashIcon,
                                    trueValue:"TRUE", falseValue:"FALSE"
                                },
                                {ref:ZaAccount.A_zimbraPrefMailFlashTitle,
                                    type:_SUPER_CHECKBOX_, colSpan:2,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_flashTitle,
                                    checkBoxLabel:ZaMsg.LBL_flashTitle,
                                    trueValue:"TRUE", falseValue:"FALSE"
                                },
                                {ref:ZaAccount.A_zimbraPrefNewMailNotificationEnabled,
                                    type:_ZA_CHECKBOX_,
                                    msgName:ZaMsg.LBL_zimbraPrefNewMailNotificationEnabled,
                                    label:ZaMsg.LBL_zimbraPrefNewMailNotificationEnabled,
                                    trueValue:"TRUE", falseValue:"FALSE"
                                },
                                {ref:ZaAccount.A_zimbraPrefNewMailNotificationAddress,
                                    type:_TEXTFIELD_,
                                    msgName:ZaMsg.LBL_zimbraPrefNewMailNotificationAddress,
                                    label:ZaMsg.LBL_zimbraPrefNewMailNotificationAddress,
                                    labelLocation:_LEFT_,
                                    enableDisableChecks:[[XForm.checkInstanceValue,ZaAccount.A_zimbraPrefNewMailNotificationEnabled,"TRUE"],
                                        [ZaItem.hasWritePermission,ZaAccount.A_zimbraPrefNewMailNotificationAddress]],
                                    enableDisableChangeEventSources:[ZaAccount.A_zimbraPrefNewMailNotificationEnabled],
                                    nowrap:false,labelWrap:true
                                },
                                {ref:ZaAccount.A_zimbraPrefOutOfOfficeReplyEnabled,
                                    type:_ZA_CHECKBOX_, msgName:ZaMsg.LBL_zimbraPrefOutOfOfficeReplyEnabled,
                                    label:ZaMsg.LBL_zimbraPrefOutOfOfficeReplyEnabled, trueValue:"TRUE",
                                    falseValue:"FALSE"
                                },
                                {ref:ZaAccount.A_zimbraPrefOutOfOfficeCacheDuration,
                                    type:_SUPER_LIFETIME_,
                                    msgName:ZaMsg.MSG_zimbraPrefOutOfOfficeCacheDuration,
                                    txtBoxLabel:ZaMsg.LBL_zimbraPrefOutOfOfficeCacheDuration,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    colSpan:2
                                },
                                {ref:ZaAccount.A_zimbraPrefOutOfOfficeReply,
                                    type:_TEXTAREA_, msgName:ZaMsg.LBL_zimbraPrefOutOfOfficeReply,
                                    label:ZaMsg.LBL_zimbraPrefOutOfOfficeReply, labelLocation:_LEFT_,
                                    labelCssStyle:"vertical-align:top;",
                                    width:"30em",
                                    enableDisableChecks:[[XForm.checkInstanceValue,ZaAccount.A_zimbraPrefOutOfOfficeReplyEnabled,"TRUE"],
                                        [ZaItem.hasWritePermission,ZaAccount.A_zimbraPrefOutOfOfficeReply]],
                                    enableDisableChangeEventSources:[ZaAccount.A_zimbraPrefOutOfOfficeReplyEnabled]
                                },
                                {ref:ZaAccount.A_zimbraPrefMailSendReadReceipts,
                                    type:_SUPER_SELECT1_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    label:ZaMsg.LBL_zimbraPrefMailSendReadReceipts,
                                    enableDisableChecks:[[XForm.checkInstanceValue,ZaAccount.A_zimbraFeatureReadReceiptsEnabled,"TRUE"],
                                        [ZaItem.hasWritePermission,ZaAccount.A_zimbraPrefMailSendReadReceipts]],
                                    enableDisableChangeEventSources:[ZaAccount.A_zimbraFeatureReadReceiptsEnabled]
                                },
                                {ref:ZaAccount.A_zimbraPrefReadReceiptsToAddress,
                                    type:_TEXTFIELD_,
                                    msgName:ZaMsg.MSG_zimbraPrefReadReceiptsToAddress,
                                    label:ZaMsg.LBL_zimbraPrefReadReceiptsToAddress,
                                    labelLocation:_LEFT_,
                                    enableDisableChecks:[[XForm.checkInstanceValue,ZaAccount.A_zimbraFeatureReadReceiptsEnabled,"TRUE"],
                                        [ZaItem.hasWritePermission,ZaAccount.A_zimbraPrefReadReceiptsToAddress]],
                                    enableDisableChangeEventSources:[ZaAccount.A_zimbraFeatureReadReceiptsEnabled],
                                    nowrap:false,labelWrap:true
                                }
                            ]
                        },
                        {type:_ZA_TOP_GROUPER_, colSizes:["275px","100%"], id:"account_prefs_mail_sending",borderCssClass:"LowPaddedTopGrouperBorder",
                            label:ZaMsg.NAD_MailOptionsSending,
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                [ZaAccount.A_zimbraPrefSaveToSent,
                                 ZaAccount.A_zimbraAllowAnyFromAddress,
                                 ZaAccount.A_zimbraAllowFromAddress
                                ]]
                            ],
                            items :[
                                {ref:ZaAccount.A_zimbraPrefSaveToSent,
                                    colSpan:2,
                                    type:_SUPER_CHECKBOX_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefSaveToSent,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefSaveToSent,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraAllowAnyFromAddress,
                                    colSpan:2,
                                    type:_SUPER_CHECKBOX_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraAllowAnyFromAddress,
                                    checkBoxLabel:ZaMsg.LBL_zimbraAllowAnyFromAddress,
                                    trueValue:"TRUE", falseValue:"FALSE"},

                                {ref:ZaAccount.A_zimbraAllowFromAddress,
                                    type:_REPEAT_,
                                    nowrap:false,labelWrap:true,
                                    label:ZaMsg.LBL_zimbraAllowFromAddress,
                                    msgName:ZaMsg.MSG_zimbraAllowFromAddress,
                                    labelLocation:_LEFT_,
                                    addButtonLabel:ZaMsg.NAD_AddAddress,
                                    align:_LEFT_,
                                    repeatInstance:emptyAlias,
                                    showAddButton:true,
                                    showRemoveButton:true,
                                    showAddOnNextRow:true,
                                    removeButtonLabel:ZaMsg.NAD_RemoveAddress,
                                    items: [
                                        {
                                            ref:".", type:_TEXTFIELD_, label:null,width:"200px",
                                            enableDisableChecks:[[ZaItem.hasWritePermission,ZaAccount.A_zimbraAllowFromAddress]],
                                            visibilityChecks:[[ZaItem.hasReadPermission,ZaAccount.A_zimbraAllowFromAddress]]
                                        }
                                    ],
                                    //onRemove:ZaAccountXFormView.onRepeatRemove,
                                    visibilityChecks:[ZaAccountXFormView.isSendingFromAnyAddressDisAllowed,[ZaItem.hasReadPermission,ZaAccount.A_zimbraAllowFromAddress]],
                                    visibilityChangeEventSources:[ZaAccount.A_zimbraAllowAnyFromAddress, ZaAccount.A_zimbraAllowFromAddress, ZaAccount.A_COSId]
                                }
                            ]
                        },
                        {type:_ZA_TOP_GROUPER_,colSizes:["275px","100%"], id:"account_prefs_mail_composing",borderCssClass:"LowPaddedTopGrouperBorder",
                            label:ZaMsg.NAD_MailOptionsComposing,
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                [
                                    ZaAccount.A_zimbraPrefComposeInNewWindow,
                                     ZaAccount.A_zimbraPrefComposeFormat,
                                     ZaAccount.A_zimbraPrefHtmlEditorDefaultFontSize,
                                     ZaAccount.A_zimbraPrefHtmlEditorDefaultFontFamily,
                                     ZaAccount.A_zimbraPrefHtmlEditorDefaultFontColor,
                                     ZaAccount.A_zimbraPrefForwardReplyInOriginalFormat,
                                     ZaAccount.A_zimbraPrefMandatorySpellCheckEnabled,
                                     ZaAccount.A_zimbraMailSignatureMaxLength,
                                     ZaAccount.A_zimbraPrefMailSignature,
                                    ZaAccount.A_zimbraPrefAutoSaveDraftInterval
                                ]]
                            ],
                            items :[
                                {ref:ZaAccount.A_zimbraPrefComposeInNewWindow,
                                    colSpan:2,
                                    type:_SUPER_CHECKBOX_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefComposeInNewWindow,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefComposeInNewWindow,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefComposeFormat,
                                    //colSpan:2,
                                    type:_SUPER_SELECT1_,
                                    nowrap:false,labelWrap:true,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefComposeFormat,
                                    label:ZaMsg.LBL_zimbraPrefComposeFormat},

                                {ref:ZaAccount.A_zimbraPrefHtmlEditorDefaultFontSize,
                                    //colSpan:2,
                                    type:_SUPER_SELECT1_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontSize,
                                    label:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontSize},
                                {ref:ZaAccount.A_zimbraPrefHtmlEditorDefaultFontFamily,
                                    //colSpan:2,
                                    type:_SUPER_SELECT1_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontFamily,
                                    label:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontFamily},
                                {ref:ZaAccount.A_zimbraPrefHtmlEditorDefaultFontColor,
                                    type:_SUPER_DWT_COLORPICKER_,
                                    labelCssStyle:"width:269px;",
                                    msgName:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontColor,
                                    label:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontColor,
                                    labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                },
                                {ref:ZaAccount.A_zimbraPrefForwardReplyInOriginalFormat,
                                    colSpan:2,
                                    type:_SUPER_CHECKBOX_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefForwardReplyInOriginalFormat,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefForwardReplyInOriginalFormat,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefMandatorySpellCheckEnabled,
                                    colSpan:2,
                                    type:_SUPER_CHECKBOX_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefMandatorySpellCheckEnabled,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefMandatorySpellCheckEnabled,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefMailSignatureEnabled,
                                    type:_ZA_CHECKBOX_, msgName:ZaMsg.LBL_zimbraPrefMailSignatureEnabled,
                                    label:ZaMsg.LBL_zimbraPrefMailSignatureEnabled,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                /*{ref:ZaAccount.A_zimbraPrefMailSignatureStyle,
                                    //colSpan:2,
                                    type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    colSizes:["195px","375px","190px"],
                                    msgName:ZaMsg.MSG_zimbraPrefMailSignatureStyle,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefMailSignatureStyle,
                                    trueValue:"internet", falseValue:"outlook"},*/
                                {ref:ZaAccount.A_zimbraMailSignatureMaxLength,
                                    colSpan:2,
                                    type:_SUPER_TEXTFIELD_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    labelLocation:_LEFT_,
                                    msgName:ZaMsg.MSG_zimbraMailSignatureMaxLength,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailSignatureMaxLength,
                                    textFieldCssClass:"admin_xform_number_input"},
                                {ref:ZaAccount.A_zimbraPrefMailSignature, type:_TEXTAREA_,
                                    msgName:ZaMsg.MSG_zimbraPrefMailSignature,
                                    label:ZaMsg.LBL_zimbraPrefMailSignature, labelLocation:_LEFT_,
                                    labelCssStyle:"vertical-align:top;", width:"30em",
                                    enableDisableChangeEventSources:[ZaAccount.A_zimbraPrefMailSignatureEnabled],
                                    enableDisableChecks:[[XForm.checkInstanceValue,ZaAccount.A_zimbraPrefMailSignatureEnabled,"TRUE"]]
                                },
                                {ref:ZaAccount.A_zimbraPrefAutoSaveDraftInterval, type:_SUPER_LIFETIME_,
                                    msgName:ZaMsg.MSG_zimbraPrefAutoSaveDraftInterval,
                                    txtBoxLabel:ZaMsg.LBL_zimbraPrefAutoSaveDraftInterval,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,colSpan:2,
                                    nowrap:false,labelWrap:true
                                }

                            ]
                        },
                        {type:_ZA_TOP_GROUPER_, id:"account_prefs_pop_imap",
                            label:ZaMsg.NAD_PopImapOptions,
                            visibilityChecks:[function() {
                                return (ZaAccountXFormView.isAttributeDefined.call(this, ZaAccount.A_zimbraPrefImapEnabled) || ZaAccountXFormView.isAttributeDefined.call(this, ZaAccount.A_zimbraPrefPop3Enabled));
                            }],
                            items :[
                                {ref:ZaAccount.A_zimbraPrefImapEnabled, type:_SUPER_CHECKBOX_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefImapEnabled,checkBoxLabel:ZaMsg.LBL_zimbraPrefImapEnabled,
                                    trueValue:"TRUE", falseValue:"FALSE",
                                    colSpan:2,
                                    visibilityChecks : [ function() {
                                        return ZaAccountXFormView.isAttributeDefined.call(this, ZaAccount.A_zimbraPrefImapEnabled);
                                    }]},
                                {ref:ZaAccount.A_zimbraPrefPop3Enabled,colSpan:2,
                                    type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefPop3Enabled,checkBoxLabel:ZaMsg.LBL_zimbraPrefPop3Enabled, trueValue:"TRUE", falseValue:"FALSE", 
                                    visibilityChecks : [ function() {
                                        return ZaAccountXFormView.isAttributeDefined.call(this, ZaAccount.A_zimbraPrefPop3Enabled);
                                    }]},
                            ]
                        },
                        {type:_ZA_TOP_GROUPER_, id:"account_prefs_contacts_general",
                            label:ZaMsg.NAD_ContactsOptions,
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                [
                                    ZaAccount.A_zimbraPrefAutoAddAddressEnabled,
                                    ZaAccount.A_zimbraPrefGalAutoCompleteEnabled
                                ]]
                            ],
                            items :[
                                {ref:ZaAccount.A_zimbraPrefAutoAddAddressEnabled, type:_SUPER_CHECKBOX_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefAutoAddAddressEnabled,checkBoxLabel:ZaMsg.LBL_zimbraPrefAutoAddAddressEnabled,
                                    trueValue:"TRUE", falseValue:"FALSE",
                                    colSpan:2
                                },
                                {ref:ZaAccount.A_zimbraPrefGalAutoCompleteEnabled,colSpan:2,
                                    type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefGalAutoCompleteEnabled,checkBoxLabel:ZaMsg.LBL_zimbraPrefGalAutoCompleteEnabled, trueValue:"TRUE", falseValue:"FALSE"}
                            ]
                        },
                        {type:_ZA_TOP_GROUPER_, id:"account_prefs_calendar_general",
                            label:ZaMsg.NAD_CalendarOptions,
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                [
                                    ZaAccount.A_zimbraPrefTimeZoneId,
                                    ZaAccount.A_zimbraPrefCalendarApptReminderWarningTime,
                                    ZaAccount.A_zimbraPrefCalendarInitialView,
                                    ZaAccount.A_zimbraPrefCalendarFirstDayOfWeek,
                                    ZaAccount.A_zimbraPrefCalendarApptVisibility,
                                    ZaAccount.A_zimbraPrefAppleIcalDelegationEnabled,
                                    ZaAccount.A_zimbraPrefCalendarShowPastDueReminders,
                                    ZaAccount.A_zimbraPrefCalendarToasterEnabled,
                                    ZaAccount.A_zimbraPrefCalendarAllowCancelEmailToSelf,
                                    ZaAccount.A_zimbraPrefCalendarAllowPublishMethodInvite,
                                    ZaAccount.A_zimbraPrefCalendarAllowForwardedInvite,
                                    ZaAccount.A_zimbraPrefCalendarReminderFlashTitle,
                                    ZaAccount.A_zimbraPrefCalendarReminderSoundsEnabled,
                                    ZaAccount.A_zimbraPrefCalendarSendInviteDeniedAutoReply,
                                    ZaAccount.A_zimbraPrefCalendarAutoAddInvites,
                                    ZaAccount.A_zimbraPrefCalendarNotifyDelegatedChanges,
                                    ZaAccount.A_zimbraPrefCalendarAlwaysShowMiniCal,
                                    ZaAccount.A_zimbraPrefCalendarUseQuickAdd,
                                    ZaAccount.A_zimbraPrefUseTimeZoneListInCalendar
                                ]]
                            ],
                            items :[
                                {ref:ZaAccount.A_zimbraPrefTimeZoneId, type:_SUPER_SELECT1_,
                                    valueWidth: "220px",
                                    msgName:ZaMsg.MSG_zimbraPrefTimeZoneId,label:ZaMsg.LBL_zimbraPrefTimeZoneId, labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS},
                                {ref:ZaAccount.A_zimbraPrefCalendarApptReminderWarningTime,
                                    type:_SUPER_SELECT1_, msgName:ZaMsg.MSG_zimbraPrefCalendarApptReminderWarningTime,label:ZaMsg.LBL_zimbraPrefCalendarApptReminderWarningTime, labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS},
                                {ref:ZaAccount.A_zimbraPrefCalendarInitialView,
                                    type:_SUPER_SELECT1_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPrefCalendarInitialView,
                                    label:ZaMsg.LBL_zimbraPrefCalendarInitialView,
                                    labelLocation:_LEFT_
                                },
                                {ref:ZaAccount.A_zimbraPrefCalendarFirstDayOfWeek,
                                    type:_SUPER_SELECT1_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPrefCalendarFirstDayOfWeek,
                                    label:ZaMsg.LBL_zimbraPrefCalendarFirstDayOfWeek,
                                    labelLocation:_LEFT_
                                },
                                {ref:ZaAccount.A_zimbraPrefCalendarApptVisibility,
                                    type:_SUPER_SELECT1_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPrefCalendarApptVisibility,
                                    label:ZaMsg.LBL_zimbraPrefCalendarApptVisibility,
                                    labelLocation:_LEFT_
                                },
                                {ref:ZaAccount.A_zimbraPrefAppleIcalDelegationEnabled,
                                    type:_SUPER_CHECKBOX_,
                                     colSpan:2, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPrefAppleIcalDelegationEnabled,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefAppleIcalDelegationEnabled,
                                    trueValue:"TRUE", falseValue:"FALSE",
                                    nowrap:false,labelWrap:true
                                },
                                {ref:ZaAccount.A_zimbraPrefCalendarShowPastDueReminders, type:_SUPER_CHECKBOX_,
                                     colSpan:2,resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPrefCalendarShowPastDueReminders,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarShowPastDueReminders,
                                    trueValue:"TRUE", falseValue:"FALSE",
                                    nowrap:false,labelWrap:true
                                },
                                {ref:ZaAccount.A_zimbraPrefCalendarToasterEnabled, type:_SUPER_CHECKBOX_,
                                     colSpan:2, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPrefCalendarToasterEnabled,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarToasterEnabled,
                                    trueValue:"TRUE", falseValue:"FALSE",
                                    nowrap:false,labelWrap:true
                                },
                                {ref:ZaAccount.A_zimbraPrefCalendarAllowCancelEmailToSelf, type:_SUPER_CHECKBOX_,
                                     colSpan:2, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPrefCalendarAllowCancelEmailToSelf,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarAllowCancelEmailToSelf,
                                    trueValue:"TRUE", falseValue:"FALSE",
                                    nowrap:false,labelWrap:true
                                },
                                {ref:ZaAccount.A_zimbraPrefCalendarAllowPublishMethodInvite, type:_SUPER_CHECKBOX_,
                                    colSpan:2, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPrefCalendarAllowPublishMethodInvite,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarAllowPublishMethodInvite,
                                    trueValue:"TRUE", falseValue:"FALSE",
                                    nowrap:false,labelWrap:true
                                },
                                {ref:ZaAccount.A_zimbraPrefCalendarAllowForwardedInvite, type:_SUPER_CHECKBOX_,
                                     colSpan:2,resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPrefCalendarAllowForwardedInvite,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarAllowForwardedInvite,
                                    trueValue:"TRUE", falseValue:"FALSE",
                                    nowrap:false,labelWrap:true
                                },
                                {ref:ZaAccount.A_zimbraPrefCalendarReminderFlashTitle, type:_SUPER_CHECKBOX_,
                                     colSpan:2, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPrefCalendarReminderFlashTitle,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarReminderFlashTitle,
                                    trueValue:"TRUE", falseValue:"FALSE",
                                    nowrap:false,labelWrap:true
                                },
                                {ref:ZaAccount.A_zimbraPrefCalendarReminderSoundsEnabled, type:_SUPER_CHECKBOX_,
                                     colSpan:2, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefCalendarReminderSoundsEnabled,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarReminderSoundsEnabled,
                                    trueValue:"TRUE", falseValue:"FALSE",
                                    nowrap:false,labelWrap:true
                                },
                                {ref:ZaAccount.A_zimbraPrefCalendarSendInviteDeniedAutoReply, type:_SUPER_CHECKBOX_,
                                     colSpan:2, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefCalendarSendInviteDeniedAutoReply,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarSendInviteDeniedAutoReply,
                                    trueValue:"TRUE", falseValue:"FALSE",
                                    nowrap:false,labelWrap:true
                                },
                                {ref:ZaAccount.A_zimbraPrefCalendarAutoAddInvites, type:_SUPER_CHECKBOX_,
                                 colSpan:2, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefCalendarAutoAddInvites,checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarAutoAddInvites, trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefCalendarNotifyDelegatedChanges, type:_SUPER_CHECKBOX_,
                                 colSpan:2,resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefCalendarNotifyDelegatedChanges,checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarNotifyDelegatedChanges, trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefCalendarAlwaysShowMiniCal, type:_SUPER_CHECKBOX_,
                                 colSpan:2, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefCalendarAlwaysShowMiniCal,checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarAlwaysShowMiniCal, trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefCalendarUseQuickAdd,
                                 colSpan:2,type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefCalendarUseQuickAdd,checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarUseQuickAdd, trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefUseTimeZoneListInCalendar,
                                 colSpan:2,type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefUseTimeZoneListInCalendar,checkBoxLabel:ZaMsg.LBL_zimbraPrefUseTimeZoneListInCalendar,trueValue:"TRUE", falseValue:"FALSE"}
                            ]
                        }
                    ];
        cases.push({type:_ZATABCASE_, id:"account_form_prefs_tab", numCols:1,
            paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
                     caseKey:_tab5,
                    /*colSizes:["275px","275px","150px"],*/ items :prefItems});
    }


    if(_tab6) {
        cases.push({type:_ZATABCASE_, id:"account_form_aliases_tab", width:"100%", numCols:1,colSizes:["auto"],
            paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
                    caseKey:_tab6,
                    items: [
                        {type:_ZA_TOP_GROUPER_, id:"account_form_aliases_group",borderCssClass:"LowPaddedTopGrouperBorder",
                            width:"100%", numCols:1,colSizes:["auto"],
                            label:ZaMsg.NAD_EditAliasesGroup,
                            items :[
                                {ref:ZaAccount.A_zimbraMailAlias, type:_DWT_LIST_, height:"200", width:"350px",
                                    forceUpdate: true, preserveSelection:false, multiselect:true,cssClass: "DLSource",
                                    headerList:null,onSelection:ZaAccountXFormView.aliasSelectionListener,
                                    getDisplayValue: AjxUtil.htmlEncode
                                },
                                {type:_GROUP_, numCols:5, width:"350px", colSizes:["100px","auto","100px","auto","100px"],
                                    cssStyle:"margin:10px;padding-bottom:0;",
                                    items: [
                                        {type:_DWT_BUTTON_, label:ZaMsg.TBB_Delete,width:"100px",
                                            onActivate:"ZaAccountXFormView.deleteAliasButtonListener.call(this);",id:"deleteAliasButton",
                                            enableDisableChecks:[ZaAccountXFormView.isDeleteAliasEnabled,[ZaItem.hasRight,ZaAccount.REMOVE_ACCOUNT_ALIAS_RIGHT]],
                                            enableDisableChangeEventSources:[ZaAccount.A2_alias_selection_cache]
                                        },
                                        {type:_CELLSPACER_},
                                        {type:_DWT_BUTTON_, label:ZaMsg.TBB_Edit,width:"100px",
                                            onActivate:"ZaAccountXFormView.editAliasButtonListener.call(this);",id:"editAliasButton",
                                            enableDisableChangeEventSources:[ZaAccount.A2_alias_selection_cache],
                                            enableDisableChecks:[ZaAccountXFormView.isEditAliasEnabled,[ZaItem.hasRight,ZaAccount.ADD_ACCOUNT_ALIAS_RIGHT],[ZaItem.hasRight,ZaAccount.REMOVE_ACCOUNT_ALIAS_RIGHT]]
                                        },
                                        {type:_CELLSPACER_},
                                        {type:_DWT_BUTTON_, label:ZaMsg.NAD_Add,width:"100px",
                                            enableDisableChecks:[[ZaItem.hasRight,ZaAccount.ADD_ACCOUNT_ALIAS_RIGHT]],
                                            enableDisableChangeEventSources:[ZaAccount.A2_alias_selection_cache],
                                            onActivate:"ZaAccountXFormView.addAliasButtonListener.call(this);"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                });
    }

    if(_tab7) {
        cases.push({type:_ZATABCASE_,id:"account_form_forwarding_tab", width:"100%", numCols:1,colSizes:["auto"],
                    caseKey:_tab7, paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
                    items: [
                        {type:_ZA_TOP_GROUPER_, label:ZaMsg.NAD_EditFwdTopGroupGrouper,
                            id:"account_form_user_forwarding_addr",colSizes:["275px","100%"],
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                [
                                    ZaAccount.A_zimbraFeatureMailForwardingEnabled
                                ]]
                            ],
                            items :[
                            {
                                ref:ZaAccount.A_zimbraFeatureMailForwardingEnabled,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                type:_SUPER_CHECKBOX_, colSpan: 2,
                                colSizes:["275", "275", "*"],
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureMailForwardingEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"
                            },
                                    {ref:ZaAccount.A_zimbraPrefMailLocalDeliveryDisabled,
                                        type:_ZA_CHECKBOX_,
                                        msgName:ZaMsg.LBL_zimbraPrefMailLocalDeliveryDisabled,
                                        label:ZaMsg.LBL_zimbraPrefMailLocalDeliveryDisabled,
                                        trueValue:"TRUE", falseValue:"FALSE"
                                    },
                                    {ref:ZaAccount.A_zimbraPrefMailForwardingAddress, type:_TEXTFIELD_,width:"350px",
                                        labelCssClass:"xform_label", cssClass:"admin_xform_name_input",
                                        label:ZaMsg.LBL_zimbraPrefMailForwardingAddress,
                                        msgName:ZaMsg.LBL_zimbraPrefMailForwardingAddressMsg,
                                        nowrap:false, labelWrap:true,
                                        labelLocation:_LEFT_,
                                        labelCssStyle:"text-align:left;",
                                        align:_LEFT_,
                                        visibilityChecks:[ZaItem.hasReadPermission],
                                        enableDisableChecks:[[XForm.checkInstanceValue,ZaAccount.A_zimbraFeatureMailForwardingEnabled,"TRUE"]],
                                        enableDisableChangeEventSources:[ZaAccount.A_zimbraFeatureMailForwardingEnabled, ZaAccount.A_COSId]
                                    },
                                {type:_GROUP_, colSizes:["275px", "*"], numCols: 2, width: "100%", colSpan:2,items:[
                                {ref:ZaAccount.A_zimbraPrefCalendarForwardInvitesTo, type:_DWT_LIST_, height:"100", width:"350px",
                                    getDisplayValue: AjxUtil.htmlEncode,
                                    forceUpdate: true, preserveSelection:false, multiselect:true,cssClass: "DLSource",
                                    nowrap:false, labelWrap:true,
                                    headerList:null,onSelection:ZaAccountXFormView.calFwdAddrSelectionListener,label:ZaMsg.zimbraPrefCalendarForwardInvitesTo,
                                    labelCssClass:"gridGroupBodyLabel",
                                    labelCssStyle:"text-align:left;border-right:1px solid;",
                                    visibilityChecks:[ZaItem.hasReadPermission]
                                },
                                {type:_GROUP_, numCols:6, width:"625px",colSizes:["275","100px","auto","100px","auto","100px"], colSpan:2,
                                    visibilityChecks:[[ZaItem.hasWritePermission,ZaAccount.A_zimbraPrefCalendarForwardInvitesTo]],
                                    cssStyle:"margin:10px;padding-bottom:0;",
                                    items: [
                                        {type:_CELLSPACER_},
                                        {type:_DWT_BUTTON_, label:ZaMsg.TBB_Delete,width:"100px",
                                            onActivate:"ZaAccountXFormView.deleteCalFwdAddrButtonListener.call(this);",
                                            enableDisableChecks:[ZaAccountXFormView.isDeleteCalFwdAddrEnabled,[ZaItem.hasWritePermission,ZaAccount.A_zimbraPrefCalendarForwardInvitesTo]],
                                            enableDisableChangeEventSources:[ZaAccount.A2_calFwdAddr_selection_cache]
                                        },
                                        {type:_CELLSPACER_},
                                        {type:_DWT_BUTTON_, label:ZaMsg.TBB_Edit,width:"100px",
                                            onActivate:"ZaAccountXFormView.editCalFwdAddrButtonListener.call(this);",
                                            enableDisableChecks:[ZaAccountXFormView.isEditCalFwdAddrEnabled,[ZaItem.hasWritePermission,ZaAccount.A_zimbraPrefCalendarForwardInvitesTo]],
                                            enableDisableChangeEventSources:[ZaAccount.A2_calFwdAddr_selection_cache]
                                        },
                                        {type:_CELLSPACER_},
                                           {type:_DWT_BUTTON_, label:ZaMsg.NAD_Add,width:"100px",
                                            enableDisableChecks:[[ZaItem.hasWritePermission,ZaAccount.A_zimbraPrefCalendarForwardInvitesTo]],
                                            onActivate:"ZaAccountXFormView.addCalFwdAddrButtonListener.call(this);"
                                        }
                                    ]
                                },
                               {type: _DWT_ALERT_, colSpan: 2,
                                   containerCssStyle: "padding:0 10px 10px;width:100%;",
                                   style: DwtAlert.WARNING,
                                   iconVisible: true,
                                   content: ZaMsg.Alert_Bouncing_Reveal_Hidden_Adds
                                },
                                {ref:ZaAccount.A_zimbraMailForwardingAddress, type:_DWT_LIST_, height:"100", width:"350px",
                                    getDisplayValue: AjxUtil.htmlEncode,
                                    forceUpdate: true, preserveSelection:false, multiselect:true,cssClass: "DLSource",
                                    headerList:null,onSelection:ZaAccountXFormView.fwdAddrSelectionListener,label:ZaMsg.NAD_EditFwdGroup,
                                    labelCssClass:"gridGroupBodyLabel", nowrap:false, labelWrap:true,
                                    labelCssStyle:"text-align:left;border-right:1px solid;",
                                    visibilityChecks:[ZaItem.hasReadPermission]
                                },
                                {type:_GROUP_, numCols:6, width:"625px",colSizes:["275","100px","auto","100px","auto","100px"], colSpan:2,
                                    cssStyle:"margin:10px;padding-bottom:0;",
                                    items: [
                                        {type:_CELLSPACER_},
                                        {type:_DWT_BUTTON_, label:ZaMsg.TBB_Delete,width:"100px",
                                            onActivate:"ZaAccountXFormView.deleteFwdAddrButtonListener.call(this);",
                                            enableDisableChecks:[ZaAccountXFormView.isDeleteFwdAddrEnabled,[ZaItem.hasWritePermission,ZaAccount.A_zimbraMailForwardingAddress]],
                                            enableDisableChangeEventSources:[ZaAccount.A2_fwdAddr_selection_cache]
                                        },
                                        {type:_CELLSPACER_},
                                        {type:_DWT_BUTTON_, label:ZaMsg.TBB_Edit,width:"100px",
                                            onActivate:"ZaAccountXFormView.editFwdAddrButtonListener.call(this);",
                                            enableDisableChecks:[ZaAccountXFormView.isEditFwdAddrEnabled,[ZaItem.hasWritePermission,ZaAccount.A_zimbraMailForwardingAddress]],
                                            enableDisableChangeEventSources:[ZaAccount.A2_fwdAddr_selection_cache]
                                        },
                                        {type:_CELLSPACER_},
                                        {type:_DWT_BUTTON_, label:ZaMsg.NAD_Add,width:"100px",
                                            enableDisableChecks:[[ZaItem.hasWritePermission,ZaAccount.A_zimbraMailForwardingAddress]],
                                            onActivate:"ZaAccountXFormView.addFwdAddrButtonListener.call(this);"
                                        }
                                    ]
                                }
                            ]
                        }
                        ]}
                    ]
                });
    }

    if(_tab8) {
        cases.push({type:_ZATABCASE_, id:"account_form_interop_tab", width:"100%", numCols:1,colSizes:["auto"],
                    paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
                    caseKey:_tab8,
                    items: [
                        {type:_ZA_TOP_GROUPER_, id:"account_form_interop_group",
                            borderCssClass:"LowPaddedTopGrouperBorder",
                             width:"100%", numCols:1,colSizes:["auto"],
                            label:ZaMsg.NAD_EditFpGroup,
                            items :[
                                {ref:ZaAccount.A_zimbraForeignPrincipal, type:_DWT_LIST_, height:"200", width:"350px",
                                    forceUpdate: true, preserveSelection:false, multiselect:true,cssClass: "DLSource",
                                    headerList:null,onSelection:ZaAccountXFormView.fpSelectionListener,
                                    getDisplayValue: AjxUtil.htmlEncode
                                },
                                {type:_GROUP_, numCols:7, width:"350px", colSizes:["100px","auto","100px","auto","100px", "auto","100px"],
                                    cssStyle:"margin:10px;padding-bottom:0;",
                                    items: [
                                        {type:_DWT_BUTTON_, label:ZaMsg.TBB_Push,width:"100px",
                                            onActivate:"ZaAccountXFormView.pushFpButtonListener.call(this);",
                                            enableDisableChecks:[ZaAccountXFormView.isPushFpEnabled,[ZaItem.hasWritePermission,ZaAccount.A_zimbraForeignPrincipal]],
                                            enableDisableChangeEventSources:[ZaAccount.A_zimbraForeignPrincipal]
                                        },
                                        {type:_CELLSPACER_},
                                        {type:_DWT_BUTTON_, label:ZaMsg.TBB_Delete,width:"100px",
                                            onActivate:"ZaAccountXFormView.deleteFpButtonListener.call(this);",
                                            enableDisableChecks:[ZaAccountXFormView.isDeleteFpEnabled,[ZaItem.hasWritePermission,ZaAccount.A_zimbraForeignPrincipal]],
                                            enableDisableChangeEventSources:[ZaAccount.A2_fp_selection_cache]
                                        },
                                        {type:_CELLSPACER_},
                                        {type:_DWT_BUTTON_, label:ZaMsg.TBB_Edit,width:"100px",
                                            onActivate:"ZaAccountXFormView.editFpButtonListener.call(this);",
                                            enableDisableChecks:[ZaAccountXFormView.isEditFpEnabled,[ZaItem.hasWritePermission,ZaAccount.A_zimbraForeignPrincipal]],
                                            enableDisableChangeEventSources:[ZaAccount.A2_fp_selection_cache]
                                        },
                                        {type:_CELLSPACER_},
                                        {type:_DWT_BUTTON_, label:ZaMsg.NAD_Add,width:"100px",
                                            enableDisableChecks:[[ZaItem.hasWritePermission,ZaAccount.A_zimbraForeignPrincipal]],
                                            onActivate:"ZaAccountXFormView.addFpButtonListener.call(this);"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                });
    }

    if(_tab9) {
        cases.push({type:_ZATABCASE_, id:"account_form_themes_tab", numCols:1,
            caseKey:_tab9,
            items:[
                {type:_SPACER_},
                {type:_GROUP_,
                    items:[
                        {ref:ZaAccount.A_zimbraPrefSkin, type:_SUPER_SELECT1_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                            msgName:ZaMsg.LBL_zimbraPrefSkin,label:ZaMsg.LBL_zimbraPrefSkin, labelLocation:_LEFT_,
                            choices:ZaAccountXFormView.themeChoices,
                            visibilityChecks:[ZaAccountXFormView.gotSkins]
                        },
                        {type:_OUTPUT_,ref:ZaAccount.A_zimbraPrefSkin,label:ZaMsg.LBL_zimbraPrefSkin, labelLocation:_LEFT_,
                             visibilityChecks:[ZaAccountXFormView.gotNoSkins]
                        }
                    ]
                },
                {type:_SPACER_},
                {type:_SUPER_SELECT_CHECK_,
                    selectRef:ZaAccount.A_zimbraAvailableSkin,
                    ref:ZaAccount.A_zimbraAvailableSkin,
                    choices:ZaAccountXFormView.themeChoices,
                    visibilityChecks:[Case_XFormItem.prototype.isCurrentTab,ZaAccountXFormView.gotSkins],
                    visibilityChangeEventSources:[ZaModel.currentTab],
                    caseKey:_tab9, caseVarRef:ZaModel.currentTab,
                    limitLabel:ZaMsg.NAD_LimitThemesTo
                },
                {type:_DWT_ALERT_,colSpan:2,style: DwtAlert.WARNING, iconVisible:true,
                    visibilityChecks:[ZaAccountXFormView.gotNoSkins],
                    value:ZaMsg.ERROR_CANNOT_FIND_SKINS_FOR_ACCOUNT
                }
            ]
        });
    }

    if(_tab10) {
        cases.push({type:_ZATABCASE_, id:"account_form_zimlets_tab", numCols:1,
            caseKey:_tab10,
            items:[
                {type:_GROUP_, numCols:1,colSizes:["auto"],
                    items: [
                        {type:_SUPER_ZIMLET_SELECT_,
                            selectRef:ZaAccount.A_zimbraZimletAvailableZimlets,
                            ref:ZaAccount.A_zimbraZimletAvailableZimlets,
                            choices:ZaAccountXFormView.zimletChoices,
                            visibilityChecks:[Case_XFormItem.prototype.isCurrentTab],
                            visibilityChangeEventSources:[ZaModel.currentTab],
                            caseKey:_tab10, caseVarRef:ZaModel.currentTab,
                            limitLabel:ZaMsg.NAD_LimitZimletsTo
                        },
                        {type: _DWT_ALERT_,
                            containerCssStyle: "padding-bottom:0",
                            style: DwtAlert.INFO,
                            iconVisible: false,
                            content: ZaMsg.Zimlet_Note
                        }
                    ]
                }
            ]
        });
    }
    if(_tab11) {
        cases.push({type:_ZATABCASE_, id:"account_form_advanced_tab", numCols:1,
        paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
                    caseKey:_tab11,
                    items: [
                        {type:_ZA_TOP_GROUPER_, id:"account_attachment_settings",colSizes:["auto"],numCols:1,
                            label:ZaMsg.NAD_AttachmentsGrouper,
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                    [ZaAccount.A_zimbraAttachmentsBlocked]]],
                            items :[
                                {ref:ZaAccount.A_zimbraAttachmentsBlocked, type:_SUPER_CHECKBOX_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.NAD_RemoveAllAttachments,
                                    checkBoxLabel:ZaMsg.NAD_RemoveAllAttachments,
                                    trueValue:"TRUE", falseValue:"FALSE"
                                }
                            ]
                        },

                        {type:_ZA_TOP_GROUPER_, id:"account_quota_settings",colSizes:["auto"],numCols:1,
                            label:ZaMsg.NAD_QuotaGrouper,
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                    [ZaAccount.A_zimbraMailForwardingAddressMaxLength,
                                    ZaAccount.A_zimbraMailForwardingAddressMaxNumAddrs,
                                    ZaAccount.A_zimbraMailQuota,
                                    ZaAccount.A_zimbraContactMaxNumEntries,
                                    ZaAccount.A_zimbraQuotaWarnPercent,
                                    ZaAccount.A_zimbraQuotaWarnInterval,
                                    ZaAccount.A_zimbraQuotaWarnMessage]],
                                    [XForm.checkInstanceValueNot,ZaAccount.A_zimbraIsExternalVirtualAccount,"TRUE"]],
                            items: [
                                {ref:ZaAccount.A_zimbraMailForwardingAddressMaxLength, type:_SUPER_TEXTFIELD_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraMailForwardingAddressMaxLength,
                                     colSpan:1,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailForwardingAddressMaxLength, labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input"
                                },
                                {ref:ZaAccount.A_zimbraMailForwardingAddressMaxNumAddrs, type:_SUPER_TEXTFIELD_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraMailForwardingAddressMaxNumAddrs,
                                     colSpan:1,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailForwardingAddressMaxNumAddrs, labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input"
                                },
                                {ref:ZaAccount.A_zimbraMailQuota, type:_SUPER_TEXTFIELD_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                     colSpan:1,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailQuota, msgName:ZaMsg.MSG_zimbraMailQuota,labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input",
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                },
                                {ref:ZaAccount.A_zimbraContactMaxNumEntries, type:_SUPER_TEXTFIELD_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraContactMaxNumEntries,
                                     colSpan:1,
                                    txtBoxLabel:ZaMsg.LBL_zimbraContactMaxNumEntries, labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input"
                                },
                                {ref:ZaAccount.A_zimbraQuotaWarnPercent, type:_SUPER_TEXTFIELD_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    txtBoxLabel:ZaMsg.LBL_zimbraQuotaWarnPercent,
                                     colSpan:1,
                                    msgName:ZaMsg.MSG_zimbraQuotaWarnPercent,labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input",
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                },
                                {ref:ZaAccount.A_zimbraQuotaWarnInterval, type:_SUPER_LIFETIME_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                     colSpan:1,
                                    txtBoxLabel:ZaMsg.LBL_zimbraQuotaWarnInterval,
                                    msgName:ZaMsg.MSG_zimbraQuotaWarnInterval,labelLocation:_LEFT_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                },
                                {ref:ZaAccount.A_zimbraQuotaWarnMessage, type:_SUPER_TEXTAREA_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    txtBoxLabel:ZaMsg.MSG_zimbraQuotaWarnMessage,
                                    msgName:ZaMsg.LBL_zimbraQuotaWarnMessage,
                                    colSpan:1,
                                    labelCssStyle:"vertical-align:top;", textAreaWidth:"250px",
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                }

                            ]
                        },

                        {type:_ZA_TOP_GROUPER_, id:"account_datasourcepolling_settings",colSizes:["auto"],numCols:1,
                            label:ZaMsg.NAD_DataSourcePolling,
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                    [ZaAccount.A_zimbraDataSourceMinPollingInterval,
                            ZaAccount.A_zimbraDataSourcePop3PollingInterval,
                            ZaAccount.A_zimbraDataSourceImapPollingInterval,
                            ZaAccount.A_zimbraDataSourceCalendarPollingInterval,
                            ZaAccount.A_zimbraDataSourceRssPollingInterval,
                            ZaAccount.A_zimbraDataSourceCaldavPollingInterval
                            ]]],
                            items: [
                                                                {ref:ZaAccount.A_zimbraDataSourceMinPollingInterval, type:_SUPER_LIFETIME_,
                                                                        msgName:ZaMsg.MSG_zimbraDataSourceMinPollingInterval,
                                                                        txtBoxLabel:ZaMsg.LBL_zimbraDataSourceMinPollingInterval,
                                                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,colSpan:1,
                                                                        nowrap:false,labelWrap:true
                                                                },
                                                                {ref:ZaAccount.A_zimbraDataSourcePop3PollingInterval, type:_SUPER_LIFETIME_,
                                                                        sgName:ZaMsg.MSG_zimbraDataSourcePop3PollingInterval,
                                                                        txtBoxLabel:ZaMsg.LBL_zimbraDataSourcePop3PollingInterval,
                                                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,colSpan:1,
                                                                        nowrap:false,labelWrap:true
                                                                },
                                                                {ref:ZaAccount.A_zimbraDataSourceImapPollingInterval, type:_SUPER_LIFETIME_,
                                                                        msgName:ZaMsg.MSG_zimbraDataSourceImapPollingInterval,
                                                                        txtBoxLabel:ZaMsg.LBL_zimbraDataSourceImapPollingInterval,
                                                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,colSpan:1,
                                                                        nowrap:false,labelWrap:true
                                                                },
                                                                {ref:ZaAccount.A_zimbraDataSourceCalendarPollingInterval, type:_SUPER_LIFETIME_,
                                                                        msgName:ZaMsg.MSG_zimbraDataSourceCalendarPollingInterval,
                                                                        txtBoxLabel:ZaMsg.LBL_zimbraDataSourceCalendarPollingInterval,
                                                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,colSpan:1,
                                                                        nowrap:false,labelWrap:true
                                                                },
                                                                {ref:ZaAccount.A_zimbraDataSourceRssPollingInterval, type:_SUPER_LIFETIME_,
                                                                        msgName:ZaMsg.MSG_zimbraDataSourceRssPollingInterval,
                                                                        txtBoxLabel:ZaMsg.LBL_zimbraDataSourceRssPollingInterval,
                                                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,colSpan:1,
                                                                        nowrap:false,labelWrap:true
                                                                },
                                                                {ref:ZaAccount.A_zimbraDataSourceCaldavPollingInterval, type:_SUPER_LIFETIME_,
                                                                        msgName:ZaMsg.MSG_zimbraDataSourceCaldavPollingInterval,
                                                                        txtBoxLabel:ZaMsg.LBL_zimbraDataSourceCaldavPollingInterval,
                                                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,colSpan:1,
                                                                        nowrap:false,labelWrap:true
                                                                }
                            ]
                        },

                                                {type:_ZA_TOP_GROUPER_, id:"account_proxyalloweddomain_settings",
                                        label: ZaMsg.NAD_ProxyAllowedDomains,
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                            [ZaAccount.A_zimbraProxyAllowedDomains]]],
                                       items:[
                                       {
                                               ref: ZaAccount.A_zimbraProxyAllowedDomains,
                                               label:ZaMsg.LBL_zimbraProxyAllowedDomains,
                                               labelCssStyle:"vertical-align:top;",
                                               type:_SUPER_REPEAT_,
                                               resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                               repeatInstance:"",
                                            colSizes:["275px", "*"],
                                               addButtonLabel:ZaMsg.NAD_ProxyAddAllowedDomain ,
                                               removeButtonLabel: ZaMsg.NAD_ProxyRemoveAllowedDomain,
                                               showAddButton:true,
                                               showRemoveButton:true,
                                               showAddOnNextRow:true,
                                               repeatItems: [
                                                   {ref:".", type:_TEXTFIELD_,
                                                enableDisableChecks:[ZaItem.hasWritePermission] ,
                                                  visibilityChecks:[[ZaItem.hasReadPermission,ZaAccount.A_zimbraProxyAllowedDomains]],
                                                  enableDisableChecks:[[ZaItem.hasWritePermission,ZaAccount.A_zimbraProxyAllowedDomains]],
                                                  width: "15em"}
                                                ]
                                         }
                                       ]
                                 },

						{type:_ZA_TOP_GROUPER_,id:"account_password_settings",colSizes:["auto"],numCols:1,
							label:ZaMsg.NAD_PasswordGrouper,
							visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                        			[ZaAccount.A_zimbraPasswordLocked,
                        			ZaAccount.A_zimbraMinPwdLength,
                        			ZaAccount.A_zimbraMaxPwdLength,
                        			ZaAccount.A_zimbraPasswordMinUpperCaseChars,
                        			ZaAccount.A_zimbraPasswordMinLowerCaseChars,
                        			ZaAccount.A_zimbraPasswordMinPunctuationChars,
                        			ZaAccount.A_zimbraPasswordMinNumericChars,
                        			ZaAccount.A_zimbraPasswordMinDigitsOrPuncs,
                        			ZaAccount.A_zimbraMinPwdAge,
                        			ZaAccount.A_zimbraMaxPwdAge,
                        			ZaAccount.A_zimbraEnforcePwdHistory,
                        			ZaAccount.A_zimbraPasswordBlockCommonEnabled]]],
							items: [ 
						                { type: _DWT_ALERT_, containerCssStyle: "padding-bottom:0;", colSpan:3,
						                      style: DwtAlert.INFO,iconVisible: (!ZaAccountXFormView.isAuthfromInternal(entry.name)),
						                      content: ((ZaAccountXFormView.isAuthfromInternal(entry.name))?ZaMsg.Alert_InternalPassword:ZaMsg.Alert_ExternalPassword)
						                },
								{ref:ZaAccount.A_zimbraPasswordLocked, type:_SUPER_CHECKBOX_, 
									resetToSuperLabel:ZaMsg.NAD_ResetToCOS, 
									msgName:ZaMsg.NAD_PwdLocked,
									checkBoxLabel:ZaMsg.NAD_PwdLocked, 
								 	trueValue:"TRUE", falseValue:"FALSE",
									visibilityChecks:[],enableDisableChecks:[[ZaAccountXFormView.isAuthfromInternalSync, entry.name, ZaAccount.A_name]]
								},
								{ref:ZaAccount.A_zimbraMinPwdLength, 
									type:_SUPER_TEXTFIELD_,
									resetToSuperLabel:ZaMsg.NAD_ResetToCOS, 
									msgName:ZaMsg.MSG_zimbraMinPwdLength,
									txtBoxLabel:ZaMsg.LBL_zimbraMinPwdLength, 
									labelLocation:_LEFT_, 
									textFieldCssClass:"admin_xform_number_input",
									visibilityChecks:[],enableDisableChecks:[[ZaAccountXFormView.isAuthfromInternalSync, entry.name, ZaAccount.A_name]]
								},
								{ref:ZaAccount.A_zimbraMaxPwdLength, type:_SUPER_TEXTFIELD_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, 
									msgName:ZaMsg.MSG_zimbraMaxPwdLength,txtBoxLabel:ZaMsg.LBL_zimbraMaxPwdLength,
									labelLocation:_LEFT_, textFieldCssClass:"admin_xform_number_input",
									visibilityChecks:[],enableDisableChecks:[[ZaAccountXFormView.isAuthfromInternalSync, entry.name, ZaAccount.A_name]]
								},
								{ref:ZaAccount.A_zimbraPasswordMinUpperCaseChars, 
									type:_SUPER_TEXTFIELD_,
									resetToSuperLabel:ZaMsg.NAD_ResetToCOS, 
									msgName:ZaMsg.MSG_zimbraPasswordMinUpperCaseChars,
									txtBoxLabel:ZaMsg.LBL_zimbraPasswordMinUpperCaseChars, labelLocation:_LEFT_, 
									textFieldCssClass:"admin_xform_number_input",
									visibilityChecks:[],enableDisableChecks:[[ZaAccountXFormView.isAuthfromInternalSync, entry.name, ZaAccount.A_name]]
								},
								{ref:ZaAccount.A_zimbraPasswordMinLowerCaseChars, 
									type:_SUPER_TEXTFIELD_,
									resetToSuperLabel:ZaMsg.NAD_ResetToCOS, 
									msgName:ZaMsg.MSG_zimbraPasswordMinLowerCaseChars,
									txtBoxLabel:ZaMsg.LBL_zimbraPasswordMinLowerCaseChars, labelLocation:_LEFT_, 
									textFieldCssClass:"admin_xform_number_input",
									visibilityChecks:[],enableDisableChecks:[[ZaAccountXFormView.isAuthfromInternalSync, entry.name, ZaAccount.A_name]]
								},
								{ref:ZaAccount.A_zimbraPasswordMinPunctuationChars, 
									type:_SUPER_TEXTFIELD_,
									resetToSuperLabel:ZaMsg.NAD_ResetToCOS, 
									msgName:ZaMsg.MSG_zimbraPasswordMinPunctuationChars,
									txtBoxLabel:ZaMsg.LBL_zimbraPasswordMinPunctuationChars, labelLocation:_LEFT_, 
									textFieldCssClass:"admin_xform_number_input",
									visibilityChecks:[],enableDisableChecks:[[ZaAccountXFormView.isAuthfromInternalSync, entry.name, ZaAccount.A_name]]
								},
								{ref:ZaAccount.A_zimbraPasswordMinNumericChars, 
									type:_SUPER_TEXTFIELD_,
									resetToSuperLabel:ZaMsg.NAD_ResetToCOS, 
									msgName:ZaMsg.MSG_zimbraPasswordMinNumericChars,
									txtBoxLabel:ZaMsg.LBL_zimbraPasswordMinNumericChars, labelLocation:_LEFT_, 
									textFieldCssClass:"admin_xform_number_input",
									visibilityChecks:[],enableDisableChecks:[[ZaAccountXFormView.isAuthfromInternalSync, entry.name, ZaAccount.A_name]]
								},
								{ref:ZaAccount.A_zimbraPasswordMinDigitsOrPuncs, 
									type:_SUPER_TEXTFIELD_,
									resetToSuperLabel:ZaMsg.NAD_ResetToCOS, 
									msgName:ZaMsg.MSG_zimbraPasswordMinDigitsOrPuncs,
									txtBoxLabel:ZaMsg.LBL_zimbraPasswordMinDigitsOrPuncs, labelLocation:_LEFT_, 
									textFieldCssClass:"admin_xform_number_input",
									visibilityChecks:[],enableDisableChecks:[[ZaAccountXFormView.isAuthfromInternalSync, entry.name, ZaAccount.A_name]]
								},																
								{ref:ZaAccount.A_zimbraMinPwdAge, 
									type:_SUPER_TEXTFIELD_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, 
									msgName:ZaMsg.MSG_passMinAge,txtBoxLabel:ZaMsg.LBL_passMinAge, labelLocation:_LEFT_,
									textFieldCssClass:"admin_xform_number_input",
									visibilityChecks:[],enableDisableChecks:[[ZaAccountXFormView.isAuthfromInternalSync, entry.name, ZaAccount.A_name]]
								},
								{ref:ZaAccount.A_zimbraMaxPwdAge, 
									type:_SUPER_TEXTFIELD_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, 
									msgName:ZaMsg.MSG_passMaxAge,txtBoxLabel:ZaMsg.LBL_passMaxAge, labelLocation:_LEFT_, 
									textFieldCssClass:"admin_xform_number_input",
									visibilityChecks:[],enableDisableChecks:[[ZaAccountXFormView.isAuthfromInternalSync, entry.name, ZaAccount.A_name]]
								},
								{ref:ZaAccount.A_zimbraEnforcePwdHistory, 
									type:_SUPER_TEXTFIELD_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, 
									msgName:ZaMsg.MSG_zimbraEnforcePwdHistory,
									txtBoxLabel:ZaMsg.LBL_zimbraEnforcePwdHistory, labelLocation:_LEFT_, 
									textFieldCssClass:"admin_xform_number_input",
									visibilityChecks:[],enableDisableChecks:[[ZaAccountXFormView.isAuthfromInternalSync, entry.name, ZaAccount.A_name]]
								},
								{ref:ZaAccount.A_zimbraPasswordBlockCommonEnabled, type:_SUPER_CHECKBOX_, 
									resetToSuperLabel:ZaMsg.NAD_ResetToCOS, 
									msgName:ZaMsg.NAD_RejectCommonPwd,
									checkBoxLabel:ZaMsg.NAD_RejectCommonPwd, 
									trueValue:"TRUE", falseValue:"FALSE",
									visibilityChecks:[],enableDisableChecks:[[ZaAccountXFormView.isAuthfromInternalSync, entry.name, ZaAccount.A_name]]
								}
							]
						},
                        {type:_ZA_TOP_GROUPER_, id:"password_lockout_settings",colSizes:["auto"],numCols:1,
                            label:ZaMsg.NAD_FailedLoginGrouper,
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                    [ZaAccount.A_zimbraPasswordLockoutEnabled,
                                    ZaAccount.A_zimbraPasswordLockoutMaxFailures,
                                    ZaAccount.A_zimbraPasswordLockoutDuration,
                                    ZaAccount.A_zimbraPasswordLockoutFailureLifetime]]],
                            items :[
                                {ref:ZaAccount.A_zimbraPasswordLockoutEnabled,
                                    type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPasswordLockoutEnabled, colSpan:1,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPasswordLockoutEnabled,
                                    trueValue:"TRUE", falseValue:"FALSE"
                                },
                                {ref:ZaAccount.A_zimbraPasswordLockoutMaxFailures, type:_SUPER_TEXTFIELD_,
                                    enableDisableChecks: [[XForm.checkInstanceValue,ZaAccount.A_zimbraPasswordLockoutEnabled,"TRUE"]],
                                     enableDisableChangeEventSources:[ZaAccount.A_zimbraPasswordLockoutEnabled,ZaAccount.A_COSId],
                                    txtBoxLabel:ZaMsg.LBL_zimbraPasswordLockoutMaxFailures,
                                    toolTipContent:ZaMsg.TTP_zimbraPasswordLockoutMaxFailuresSub,
                                    msgName:ZaMsg.MSG_zimbraPasswordLockoutMaxFailures,
                                    labelLocation:_LEFT_,
                                    colSpan:1,
                                    textFieldCssClass:"admin_xform_number_input",
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                },
                                {ref:ZaAccount.A_zimbraPasswordLockoutDuration, type:_SUPER_LIFETIME_,
                                    colSpan:1,
                                    enableDisableChecks: [[XForm.checkInstanceValue,ZaAccount.A_zimbraPasswordLockoutEnabled,"TRUE"]],
                                     enableDisableChangeEventSources:[ZaAccount.A_zimbraPasswordLockoutEnabled,ZaAccount.A_COSId],
                                    txtBoxLabel:ZaMsg.LBL_zimbraPasswordLockoutDuration,
                                    toolTipContent:ZaMsg.TTP_zimbraPasswordLockoutDurationSub,
                                    msgName:ZaMsg.MSG_zimbraPasswordLockoutDuration,
                                    textFieldCssClass:"admin_xform_number_input",
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                },
                                {ref:ZaAccount.A_zimbraPasswordLockoutFailureLifetime, type:_SUPER_LIFETIME_,
                                    colSpan:1,
                                    enableDisableChecks: [[XForm.checkInstanceValue,ZaAccount.A_zimbraPasswordLockoutEnabled,"TRUE"]],
                                     enableDisableChangeEventSources:[ZaAccount.A_zimbraPasswordLockoutEnabled,ZaAccount.A_COSId],
                                    txtBoxLabel:ZaMsg.LBL_zimbraPasswordLockoutFailureLifetime,
                                    toolTipContent:ZaMsg.TTP_zimbraPasswordLockoutFailureLifetimeSub,
                                    msgName:ZaMsg.MSG_zimbraPasswordLockoutFailureLifetime,
                                    textFieldCssClass:"admin_xform_number_input",
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    labelCssStyle:"white-space:normal;border-right:1px solid;",
                                    nowrap:false,labelWrap:true
                                }

                            ]
                        },
                        {type:_ZA_TOP_GROUPER_, colSizes:["auto"],numCols:1,
                            label:ZaMsg.NAD_TimeoutGrouper,id:"timeout_settings",
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                    [ZaAccount.A_zimbraAdminAuthTokenLifetime,
                                    ZaAccount.A_zimbraAuthTokenLifetime,
                                    ZaAccount.A_zimbraMailIdleSessionTimeout,
                                    ZaAccount.A_zimbraDumpsterUserVisibleAge]]],
                            items: [
                                {ref:ZaAccount.A_zimbraAdminAuthTokenLifetime,
                                    type:_SUPER_LIFETIME_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraAdminAuthTokenLifetime,
                                    txtBoxLabel:ZaMsg.LBL_zimbraAdminAuthTokenLifetime,
                                    //enableDisableChecks:[ZaAccountXFormView.isAdminAccount],
                                    enableDisableChecks:[ZaAccount.isAdminAccount],
                                    enableDisableChangeEventSources:[ZaAccount.A_zimbraIsAdminAccount, ZaAccount.A_zimbraIsDelegatedAdminAccount]
                                },
                                {ref:ZaAccount.A_zimbraAuthTokenLifetime,
                                    type:_SUPER_LIFETIME_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraAuthTokenLifetime,
                                    txtBoxLabel:ZaMsg.LBL_zimbraAuthTokenLifetime},
                                {ref:ZaAccount.A_zimbraMailIdleSessionTimeout,
                                    type:_SUPER_LIFETIME_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraMailIdleSessionTimeout,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailIdleSessionTimeout},
                                {ref:ZaAccount.A_zimbraDumpsterUserVisibleAge,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    type:_SUPER_LIFETIME_,
                                    msgName:ZaMsg.MSG_zimbraDumpsterUserVisibleAge,
                                    txtBoxLabel:ZaMsg.LBL_zimbraDumpsterUserVisibleAge,
                                    visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaAccount.A_zimbraDumpsterEnabled, "TRUE"]],
                                    visibilityChangeEventSources:[ZaAccount.A_zimbraDumpsterEnabled]
                                }
                            ]
                        },
                        { type:_ZA_TOP_GROUPER_, colSizes:["auto"], numCols:1,
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                    [ZaAccount.A_zimbraMailMessageLifetime,
                                    ZaAccount.A_zimbraMailTrashLifetime,
                                    ZaAccount.A_zimbraMailSpamLifetime,
                                    ZaAccount.A_zimbraMailDumpsterLifetime
                                    ]],[XForm.checkInstanceValueNot,ZaAccount.A_zimbraIsExternalVirtualAccount,"TRUE"],
                                    [ZaAccount.isEmailRetentionPolicyEnabled]],
                            label:ZaMsg.NAD_MailRetentionGrouper, id: "mailretention_settings",
                            items: [
                                { type: _DWT_ALERT_,
                                  containerCssStyle: "padding:0 10px 10px;width:100%;",
                                  style: DwtAlert.INFO,
                                  iconVisible: false,
                                  content: ZaMsg.Alert_EnableMailRetention
                                },
                                {ref:ZaAccount.A_zimbraMailMessageLifetime, type:_SUPER_LIFETIME2_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraMailMessageLifetime,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailMessageLifetime,
                                    visibilityChecks:[[ZaItem.hasReadPermission], [ZaAccount.isEmailRetentionPolicyEnabled]],
                                    visibilityChangeEventSources:[ZaAccount.A_mailHost],
                                    labelCssStyle:"border-right:1px solid;",
                                    labelCssClass:"gridGroupBodyLabel"
                                },
                                {ref:ZaAccount.A_zimbraMailTrashLifetime, type:_SUPER_LIFETIME1_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.MSG_zimbraMailTrashLifetime,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailTrashLifetime,
                                    visibilityChecks:[[ZaItem.hasReadPermission], [ZaAccount.isEmailRetentionPolicyEnabled]],
                                    visibilityChangeEventSources:[ZaAccount.A_mailHost],
                                    labelCssStyle:"padding-left:10px; text-align:left; border-right:1px solid;",
                                    labelCssClass:"gridGroupBodyLabel"
                                },
                                {ref:ZaAccount.A_zimbraMailSpamLifetime, type:_SUPER_LIFETIME1_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraMailSpamLifetime,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailSpamLifetime,
                                    visibilityChecks:[[ZaItem.hasReadPermission], [ZaAccount.isEmailRetentionPolicyEnabled]],
                                    visibilityChangeEventSources:[ZaAccount.A_mailHost],
                                    labelCssStyle:"padding-left:10px; text-align:left; border-right:1px solid;",
                                    labelCssClass:"gridGroupBodyLabel"
                                },
                                {ref:ZaAccount.A_zimbraMailDumpsterLifetime,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    type:_SUPER_LIFETIME1_,
                                    msgName:ZaMsg.MSG_zimbraMailDumpsterLifetime,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailDumpsterLifetime,
                                    labelCssStyle:"padding-left:10px; text-align:left;border-right:1px solid;",
                                    labelCssClass:"gridGroupBodyLabel",
                                    visibilityChecks:[[ZaItem.hasReadPermission], [ZaAccount.isEmailRetentionPolicyEnabled], [XForm.checkInstanceValue, ZaAccount.A_zimbraDumpsterEnabled, "TRUE"], [XForm.checkInstanceValue, ZaAccount.A_zimbraDumpsterPurgeEnabled, "TRUE"]],
                                    visibilityChangeEventSources:[ZaAccount.A_zimbraDumpsterEnabled, ZaAccount.A_zimbraDumpsterPurgeEnabled]
                                }
                            ]
                        },
                        {type:_ZA_TOP_GROUPER_, //colSizes:["auto"],numCols:1,
                                label:ZaMsg.NAD_InteropGrouper,   id: "interop_settings",
                                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                    [ZaAccount.A_zimbraFreebusyExchangeUserOrg]]],
                            items: [
                                { ref: ZaAccount.A_zimbraFreebusyExchangeUserOrg, type: _SUPER_TEXTFIELD_,
                                    textFieldWidth: "220px",
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraFreebusyExchangeUserOrg,
                                    txtBoxLabel:ZaMsg.LBL_zimbraFreebusyExchangeUserOrg, labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input"
                                }
                            ]
                        },
                        {type:_ZA_TOP_GROUPER_, label:ZaMsg.NAD_MailTransportGrouper, id:"mailtransport_setting",
                                    colSizes:["275px","*"],numCols:2,
                                    visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                                    [ZaAccount.A_zimbraMailTransport, ZaAccount.A_zimbraMailCanonicalAddress]]],
                               items:[
                                    {type:_OUTPUT_,ref:".",label:"", labelLocation:_LEFT_, value: ZaMsg.MSG_MailTransportMessage},
                                    {ref:ZaAccount.A_zimbraMailTransport, type:_TEXTFIELD_, msgName:ZaMsg.NAD_MailTransport,label:ZaMsg.NAD_MailTransport,
                                            labelLocation:_LEFT_, cssClass:"admin_xform_name_input", width:220
                                    },
                                    {type: _DWT_ALERT_,
                                        content:ZaMsg.CannonicalWarning,
                                         visibilityChecks:[[ZaItem.hasWritePermission,ZaAccount.A_zimbraMailCanonicalAddress]],
                                         visibilityChangeEventSources:[ZaAccount.A_zimbraMailCanonicalAddress],
                                        containerCssStyle: "width:400px;",
                                        style: DwtAlert.WARNING, iconVisible: true
                                    },
                                    {ref:ZaAccount.A_zimbraMailCanonicalAddress, type:_TEXTFIELD_, msgName:ZaMsg.NAD_CanonicalFrom,label:ZaMsg.NAD_CanonicalFrom,
                                        labelLocation:_LEFT_, cssClass:"admin_xform_name_input", width:220
                                    }

                                ]
                        },
                        {type: _SPACER_ , height: "10px" }  //add some spaces at the bottom of the page
                    ]
                });
    }

    xFormObject.tableCssStyle="width:100%;";

        xFormObject.items = [
                {type:_GROUP_, cssClass:"ZmSelectedHeaderBg", colSpan:"*", id:"xform_header",
                    items: [
                        {type:_GROUP_, numCols:4, width:"100%", colSizes:["60px","*","80px","*"],items:headerItems}
                    ]
                },
                {type:_TAB_BAR_,  ref:ZaModel.currentTab,choices:this.tabChoices,cssClass:"ZaTabBar", cssStyle:"display:none;", id:"xform_tabbar"},
                {type:_SWITCH_, align:_LEFT_, valign:_TOP_, items:cases}
        ];
};
ZaTabView.XFormModifiers["ZaAccountXFormView"].push(ZaAccountXFormView.myXFormModifier);

ZaAccountXFormView.prototype.getTabChoices =
function() {
    return this.tabChoices;
}

ZaAccountXFormView.getEmailFromUid = 
function(managerField) {
	if (managerField) {
		let email = '';
		let managerLdapArray = managerField.split(',');
		const usernameArray = managerLdapArray[0].split('uid=');
		if (usernameArray.length !== 2) return '';
		email = usernameArray[1];
		managerLdapArray = managerLdapArray.filter(function(item) {
			return item.includes('dc=');
		});
		managerLdapArray = managerLdapArray.map(function(item) {
			const dcValueArray = item.split('=');
			return dcValueArray.length === 2 ? item.split('=')[1] : '';
		});
		email = email + '@' + managerLdapArray.join('.');
		return email;
	}
}
}
if (AjxPackage.define("zimbraAdmin.accounts.view.ZaAccChangePwdXDlg")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaAccChangePwdXDlg
* @contructor ZaAccChangePwdXDlg
* @author Greg Solovyev
* @param parent
* param app
**/
ZaAccChangePwdXDlg = function(parent,   w, h) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.CANCEL_BUTTON,DwtDialog.OK_BUTTON];
	ZaXDialog.call(this, parent, null, ZaMsg.CHNP_Title, w, h,"ZaAccChangePwdXDlg");
	this.initForm(ZaAccount.myXModel,this.getMyXForm());
	this._helpURL = ZaUtil.HELP_URL;
}

ZaAccChangePwdXDlg.prototype = new ZaXDialog;
ZaAccChangePwdXDlg.prototype.constructor = ZaAccChangePwdXDlg;
ZaAccChangePwdXDlg.helpURL = "passwords/setting_passwords.htm";

ZaAccChangePwdXDlg.prototype.getPassword = 
function() {
	return this._localXForm.getInstance().attrs[ZaAccount.A_password];
}

ZaAccChangePwdXDlg.prototype.getConfirmPassword = 
function() {
	return this._localXForm.getInstance()[ZaAccount.A2_confirmPassword];
}

ZaAccChangePwdXDlg.prototype.getMustChangePassword = 
function() {
	return this._localXForm.getInstance().attrs[ZaAccount.A_zimbraPasswordMustChange];
}

ZaAccChangePwdXDlg.prototype.getMyXForm = 
function() {	
	var xFormObject = {
		numCols:2,
		items:[
			{type:_GROUP_,isTabGroup:true,
			items:[
			{ref:ZaAccount.A_password, type:_SECRET_, msgName:ZaMsg.NAD_Password,
				label:ZaMsg.NAD_Password, labelLocation:_LEFT_, 
				cssClass:"admin_xform_name_input",visibilityChecks:[],enableDisableChecks:[]
			},
			{ref:ZaAccount.A2_confirmPassword, type:_SECRET_, msgName:ZaMsg.NAD_ConfirmPassword,
				label:ZaMsg.NAD_ConfirmPassword, labelLocation:_LEFT_, 
				cssClass:"admin_xform_name_input",visibilityChecks:[],enableDisableChecks:[]
			},
			{ref:ZaAccount.A_zimbraPasswordMustChange,  type:_WIZ_CHECKBOX_,
				msgName:ZaMsg.NAD_MustChangePwd,label:ZaMsg.NAD_MustChangePwd,trueValue:"TRUE", falseValue:"FALSE"}
			]
		} ]
	}
	return xFormObject;
}
}
if (AjxPackage.define("zimbraAdmin.accounts.view.ZaEditAliasXDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaEditAliasXDialog
* @contructor ZaEditAliasXDialog
* @author Greg Solovyev
* @param parent
* param app
**/

ZaEditAliasXDialog = function(parent,   w, h, title) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];	
	ZaXDialog.call(this, parent, null, title, w, h, null, ZaId.DLG_EDIT_ALIAS);
	this._containedObject = {};
	this.initForm(ZaAlias.myXModel,this.getMyXForm());
	this._helpURL = ZaEditAliasXDialog.helpURL;
}

ZaEditAliasXDialog.prototype = new ZaXDialog;
ZaEditAliasXDialog.prototype.constructor = ZaEditAliasXDialog;
ZaEditAliasXDialog.helpURL = ZaUtil.HELP_URL;



ZaEditAliasXDialog.prototype.getMyXForm = 
function() {	
	var xFormObject = {
		numCols:1,
		items:[
            {type:_GROUP_,isTabGroup:true, 
            	items: [ //allows tab key iteration
                	{ref:ZaAccount.A_name, type:_EMAILADDR_, label:null,visibilityChecks:[],enableDisableChecks:[]}
                ]
            }
        ]
	};
	return xFormObject;
}


/**
* @class ZaNewAliasXDialog
* @contructor ZaNewAliasXDialog
* @author Charles Cao
* @param parent
* param app
**/
ZaNewAliasXDialog = function(parent,   w, h, title) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];	
	ZaXDialog.call(this, parent, null, title, w, h,null,ZaId.DLG_NEW_ALIAS);
	this._containedObject = {};
	this.initForm(ZaAlias.myXModel,this.getMyXForm());
    this._helpURL = ZaNewAliasXDialog.helpURL;
}

ZaNewAliasXDialog.prototype = new ZaXDialog;
ZaNewAliasXDialog.prototype.constructor = ZaNewAliasXDialog;
ZaNewAliasXDialog.prototype.supportMinimize = true;
ZaNewAliasXDialog.helpURL = ZaUtil.HELP_URL;
ZaNewAliasXDialog.prototype.getCacheName = function(){
      return "newAliasDialog";
}

ZaNewAliasXDialog.prototype.setObject =
function(entry) {
      this._containedObject = entry;
      this._containedObject._uuid = this._containedObject._uuid || ZaUtil.getItemUUid();
      this._localXForm.setInstance(this._containedObject);
}

ZaNewAliasXDialog.prototype.getMyXForm = 
function() {	
	var xFormObject = {
		numCols:1,
		items:[
          {type:_GROUP_,isTabGroup:true, items: [ //allows tab key iteration
                {ref:ZaAccount.A_name, type:_EMAILADDR_, label:ZaMsg.Alias_Dlg_label_alias,visibilityChecks:[],enableDisableChecks:[]},
                {type:_DYNSELECT_, ref:ZaAlias.A_targetAccount, dataFetcherClass:ZaSearch,
                    dataFetcherMethod:ZaSearch.prototype.dynSelectSearch,
                    dataFetcherTypes:[ZaSearch.ACCOUNTS, ZaSearch.RESOURCES, ZaSearch.DLS],
                    dataFetcherAttrs:[ZaItem.A_zimbraId, ZaItem.A_cn, ZaAccount.A_name, ZaAccount.A_displayname, ZaAccount.A_mail],
                    label:ZaMsg.Alias_Dlg_label_target_acct,labelLocation:_LEFT_,
                    width:"100%", inputWidth:"100%", editable:true, forceUpdate:true,
                    choices:new XFormChoices([], XFormChoices.OBJECT_REFERENCE_LIST, "name", "name"),
                    visibilityChecks:[],enableDisableChecks:[],
                    onChange: function(value, event, form){
                        if (value instanceof ZaItem ) {
                            this.setInstanceValue(value.name);
                        } else {
                            this.setInstanceValue(value);
                        }
					},
					autoCompleteEnabled : true
                }
            ]
          }
        ]
	};
	return xFormObject;
}
}
if (AjxPackage.define("zimbraAdmin.accounts.view.ZaEditFwdAddrXDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaEditAliasXDialog
* @contructor ZaEditAliasXDialog
* @author Greg Solovyev
* @param parent
* param app
**/
ZaEditFwdAddrXDialog = function(parent,  w, h, title) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];	
	ZaXDialog.call(this, parent, null, title, w, h);
    this._helpURL = ZaUtil.HELP_URL;
    this._containedObject = {};
	this.initForm(ZaAlias.myXModel,this.getMyXForm());
}

ZaEditFwdAddrXDialog.prototype = new ZaXDialog;
ZaEditFwdAddrXDialog.prototype.constructor = ZaEditFwdAddrXDialog;

ZaEditFwdAddrXDialog.prototype.getMyXForm = 
function() {	
	var xFormObject = {
		numCols:1,
		items:[
            {type:_GROUP_,isTabGroup:true, items: [ //allows tab key iteration
                {ref:ZaAccount.A_name, type:_TEXTFIELD_, label:ZaMsg.Enter_EmailAddr,width:230,visibilityChecks:[],enableDisableChecks:[]}
                ]
            }
        ]
	};
	return xFormObject;
}
}
if (AjxPackage.define("zimbraAdmin.accounts.view.ZaEditFpXDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaEditFpXDialog
* @contructor ZaEditFpXDialog
* @author Charles Cao
* @param parent
* param app
**/
ZaEditFpXDialog = function(parent, w, h, title) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];
	ZaXDialog.call(this, parent,null, title, w, h);
    this._helpURL = ZaUtil.HELP_URL;
    //get the provider first
    ZaFp.getProviders();
    this._containedObject = {};
	this.initForm(ZaFp.getXModel(),this.getMyXForm());
}

ZaEditFpXDialog.prototype = new ZaXDialog;
ZaEditFpXDialog.prototype.constructor = ZaEditFpXDialog;

ZaEditFpXDialog.prototype.getMyXForm =
function() {
	var xFormObject = {
		numCols:1,
		items:[
            {type:_GROUP_,isTabGroup:true, items: [ //allows tab key iteration
                {ref:ZaFp.A_prefix, type:_OSELECT1_, choices: ZaFp.INTEROP_PROVIDER_CHOICES,
                    label:ZaMsg.Select_Interop_Provider, width:230,visibilityChecks:[],enableDisableChecks:[]} ,
                {ref:ZaFp.A_name, type:_TEXTFIELD_, label:ZaMsg.Enter_ForeignAccount,width:230,visibilityChecks:[],enableDisableChecks:[]}
		       ]
            }
        ]
    };
	return xFormObject;
}
}
if (AjxPackage.define("zimbraAdmin.accounts.view.ZaAccountListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaAccountListView
* @param parent
* @param listType: the account type of the list: alias or other types
* @author Roland Schemers
* @author Greg Solovyev
**/
ZaAccountListView = function(parent,listType) {
	var className = null;
	var posStyle = DwtControl.ABSOLUTE_STYLE;
	this._listType = listType ;
	var headerList = this._getHeaderList();
	
	var listViewId;
	if(!this._listType || this._listType == ZaItem.ACCOUNT)
		listViewId = ZaId.TAB_ACCT_MANAGE;
	else if(this._listType == ZaItem.ALIAS)
		listViewId = ZaId.TAB_ALIAS_MANAGE;
	else if(this._listType == ZaItem.DL)
		listViewId = ZaId.TAB_DL_MANAGE;
	else if(this._listType == ZaItem.RESOURCE)
		listViewId = ZaId.TAB_RES_MANAGE;
	else listViewId = ZaId.TAB_UNDEF;

	ZaListView.call(this, {
		parent:parent, 
		className:className, 
		posStyle:posStyle, 
		headerList:headerList, 
		id:listViewId,
		scrollLoading:true
	});

	this._appCtxt = this.shell.getData(ZaAppCtxt.LABEL);
	
	this._domains = {} ;
}

ZaAccountListView.prototype = new ZaListView;
ZaAccountListView.prototype.constructor = ZaAccountListView;

ZaAccountListView.prototype.toString = 
function() {
	return "ZaAccountListView";
}

ZaAccountListView.prototype.getTitle = 
function () {
	var title = ZaMsg.Addresses_view_title ;
	var cc = ZaApp.getInstance().getControllerById (this.__internalId) ;
	switch (cc._defaultType) {
		case ZaItem.DL :
			title = ZaMsg.DL_view_title; break ;
		case ZaItem.ALIAS :
			title = ZaMsg.Aliases_view_title; break ;
		case ZaItem.RESOURCE : 
			title = ZaMsg.Resourse_view_title; break ;	
		default :
			title = ZaMsg.Accounts_view_title ;
	}	
	
	return title;
}

ZaAccountListView.prototype.getTabIcon =
function () {
	var icon = null ;
	var cc = ZaApp.getInstance().getControllerById (this.__internalId) ;
	switch (cc._defaultType) {
		case ZaItem.DL :
			icon = "DistributionList"; break ;
		case ZaItem.ALIAS :
			icon = "AccountAlias" ; break ;
		case ZaItem.RESOURCE :
			icon = "Resource" ; break ;
		default :
			icon = "Account" ;
	}

	return icon ;
}

/**
* Renders a single item as a DIV element.
*/
ZaAccountListView.prototype._createItemHtml =
function(account, now, isDragProxy) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(account, div, DwtListView.TYPE_LIST_ITEM);

	var idx = 0;
	html[idx++] = "<table width='100%' cellspacing='0' cellpadding='0'>";

	html[idx++] = "<tr>";

	var cnt = this._headerList.length;
		var dwtId = Dwt.getNextId();
	var rowId = this._listType;
	for(var i = 0; i < cnt; i++) {
		var field = this._headerList[i]._field;
		var cellWidth = this._getCellWidth(i, {});

		if(field == "type") {
			// type
			html[idx++] = "<td id=\"" + rowId + "_data_type_" + dwtId + "\" width=" + cellWidth + ">";
			switch(account.type) {
				case ZaItem.ACCOUNT:
					if(account.attrs[ZaAccount.A_zimbraIsAdminAccount]=="TRUE" ) {
						html[idx++] = AjxImg.getImageHtml("AdminUser");
					} else if (account.attrs[ZaAccount.A_zimbraIsDelegatedAdminAccount] == "TRUE") {
						html[idx++] = AjxImg.getImageHtml("DomainAdminUser");
					} else if (account.attrs[ZaAccount.A_zimbraIsSystemAccount] == "TRUE") {
						html[idx++] = AjxImg.getImageHtml("SpecialAccount");
					} else if (account.attrs[ZaAccount.A_zimbraIsSystemResource] == "TRUE") {
						html[idx++] = AjxImg.getImageHtml("SystemResource");
					} else if (account.attrs[ZaAccount.A_zimbraIsExternalVirtualAccount] == "TRUE") {
						html[idx++] = AjxImg.getImageHtml("AccountExternalVirtual");
					} else {
						if(account.isExternal) {
							html[idx++] = AjxImg.getImageHtml("AccountIMAP");	
						} else {
							html[idx++] = AjxImg.getImageHtml("Account");
						}
					}
				break;
				case ZaItem.DL:
					if (account.attrs[ZaDistributionList.A_isAdminGroup] == "TRUE") {
						html[idx++] = AjxImg.getImageHtml("DistributionListGroup");
					} else {
						html[idx++] = AjxImg.getImageHtml("DistributionList");
					}
				break;
				case ZaItem.ALIAS:
					html[idx++] = AjxImg.getImageHtml("AccountAlias");
				break;
				case ZaItem.RESOURCE:
					if (account.attrs[ZaResource.A_zimbraCalResType] == ZaResource.RESOURCE_TYPE_LOCATION){
						html[idx++] = AjxImg.getImageHtml("Location");
					}else {//equipment or other resource types
						html[idx++] = AjxImg.getImageHtml("Resource");
					}
				break;
				default:
					html[idx++] = account.type;
				break;
			}
			html[idx++] = "</td>";
		} else if(field == ZaAccount.A_name) {
			// name
			html[idx++] = "<td id=\"" + rowId + "_data_emailaddress_" + dwtId + "\" nowrap width=" + cellWidth + "><nobr>";
			html[idx++] = AjxStringUtil.htmlEncode(account.name);
			html[idx++] = "</nobr></td>";
		} else if (field == ZaAccount.A_displayname) {
			// display name
			html[idx++] = "<td id=\"" + rowId + "_data_displayname_" + dwtId + "\" nowrap width=" + cellWidth + "><nobr>";
			html[idx++] = AjxStringUtil.htmlEncode(account.attrs[ZaAccount.A_displayname]);
			html[idx++] = "</nobr></td>";	
		} else if(field == ZaAccount.A_accountStatus) {
			// status
			html[idx++] = "<td id=\"" + rowId + "_data_status_" + dwtId + "\" width=" + cellWidth + "><nobr>";
			var status = "";
			if (account.type == ZaItem.ACCOUNT) {
				status = ZaAccount._accountStatus(account.attrs[ZaAccount.A_accountStatus]);
			} else if (account.type == ZaItem.DL) {
				status = ZaDistributionList.getDLStatus (account.attrs.zimbraMailStatus);
			}else if ( account.type == ZaItem.RESOURCE) {
				status = ZaResource.getAccountStatusLabel(account.attrs[ZaAccount.A_accountStatus]);
			} 
			html[idx++] = status;
			html[idx++] = "</nobr></td>";		
		} else if (field == ZaAccount.A_zimbraLastLogonTimestamp) {
			// display last login time for accounts only
			html[idx++] = "<td id=\"" + rowId + "_data_lastlogontime_" + dwtId + "\" nowrap width=" + cellWidth + "><nobr>";
			html[idx++] = AjxStringUtil.htmlEncode(ZaAccount.getLastLoginTime(account.attrs[ZaAccount.A_zimbraLastLogonTimestamp]));
			html[idx++] = "</nobr></td>";	
		} else if (field == ZaAccount.A_description) {
			// description
			html[idx++] = "<td id=\"" + rowId + "_data_description_" + dwtId + "\" width=" + cellWidth + "><nobr>";
			html[idx++] = AjxStringUtil.htmlEncode(
				ZaItem.getDescriptionValue(account.attrs[ZaAccount.A_description] ));
			html[idx++] = "</nobr></td>";	
		} else if (field == "target" + ZaAlias.A_targetType) {
			html[idx++] = "<td id=\"" + rowId + "_data_targettype_" + dwtId + "\" width=" + cellWidth + "><nobr>";
			var targetType = account.attrs[ZaAlias.A_targetType] ;
			var targetType_desc ;
			if (targetType == ZaItem.ACCOUNT ) {
				targetType_desc = ZaMsg.aliasTargetTypeAccount ;
			}else if (targetType == ZaItem.DL) {
				targetType_desc = ZaMsg.aliasTargetTypeDL ;
			}else if (targetType = ZaItem.RESOURCE) {
				targetType_desc = ZaMsg.aliasTargetTypeResource ;
			}
			html[idx++] = AjxStringUtil.htmlEncode(targetType_desc);
			html[idx++] = "</nobr></td>";
		} else if (field == ZaAlias.A_targetAccount) {
			html[idx++] = "<td id=\"" + rowId + "_data_targetaccount_" + dwtId + "\" width=" + cellWidth + "><nobr>";
			html[idx++] = AjxStringUtil.htmlEncode(account.attrs[ZaAlias.A_targetAccount]);
			html[idx++] = "</nobr></td>";
		}
	}
		html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}

ZaAccountListView.prototype._getHeaderList =
function(listType) {

	var headerList = new Array();
	var sortable = 1;
	var i = 0 ;
	headerList[i++] = new ZaListHeaderItem("type", null, null, "22px", null, "objectClass", false, true);
	this._defaultColumnSortable = sortable ;
	headerList[i++] = new ZaListHeaderItem(ZaAccount.A_name, ZaMsg.ALV_Name_col, null, "210px", sortable++, ZaAccount.A_name, true, true);

    // TODO: Optimise the if...else ladder
    if (this._listType) {
        if (this._listType == ZaItem.ALIAS) {
            headerList[i++] = new ZaListHeaderItem(ZaAlias.A_targetAccount, ZaMsg.ALV_TargetName_col, null, "210px", sortable++,ZaAlias.A_targetAccount, true, true);
            headerList[i++] = new ZaListHeaderItem("target" + ZaAlias.A_targetType, ZaMsg.ALV_TargetType_col, null, "200px", sortable++,ZaAlias.A_targetType, true, true);
        } else {
            headerList[i++] = new ZaListHeaderItem(ZaAccount.A_displayname, ZaMsg.ALV_DspName_col, null, "210px", sortable++,ZaAccount.A_displayname, true, true);

            if (this._listType == ZaItem.DL) {
                headerList[i++] = new ZaListHeaderItem(ZaAccount.A_accountStatus, ZaMsg.ALV_Status_col, null, "120px", null, ZaAccount.A_accountStatus, true, true);
            } else {
                headerList[i++] = new ZaListHeaderItem(ZaAccount.A_accountStatus, ZaMsg.ALV_Status_col, null, "120px", sortable++,ZaAccount.A_accountStatus, true, true);
            }

            headerList[i++] = new ZaListHeaderItem(ZaAccount.A_zimbraLastLogonTimestamp, ZaMsg.ALV_Last_Login, null, "195px", sortable++, ZaAccount.A_zimbraLastLogonTimestamp, true, true);
        }
    } else{
		//idPrefix, label, iconInfo, width, sortable, sortField, resizeable, visible	
		headerList[i++] = new ZaListHeaderItem(ZaAccount.A_displayname, ZaMsg.ALV_DspName_col, null, "210px", sortable++,ZaAccount.A_displayname, true, true);
		headerList[i++] = new ZaListHeaderItem(ZaAccount.A_accountStatus, ZaMsg.ALV_Status_col, null, "120px", sortable++,ZaAccount.A_accountStatus, true, true);
		headerList[i++] = new ZaListHeaderItem(ZaAccount.A_zimbraLastLogonTimestamp, ZaMsg.ALV_Last_Login, null, "195px", sortable++, ZaAccount.A_zimbraLastLogonTimestamp, true, true);
	}
	headerList[i++] = new ZaListHeaderItem(ZaAccount.A_description, ZaMsg.ALV_Description_col, null, "auto", null, null,false, true );
	
	return headerList;
}


ZaAccountListView.prototype._sortColumn = 
function(columnItem, bSortAsc) {
	try {

		if(this._listType == ZaItem.DL) {
			viewId=ZaZimbraAdmin._DISTRIBUTION_LISTS_LIST_VIEW;
		} else if (this._listType == ZaItem.RESOURCE){
			viewId=ZaZimbraAdmin._RESOURCE_LIST_VIEW;
		} else if(this._listType == ZaItem.ALIAS) {
			viewId=ZaZimbraAdmin._ALIASES_LIST_VIEW;
		} else {
			viewId=ZaZimbraAdmin._ACCOUNTS_LIST_VIEW;
		}	
		
		var acctListController = ZaApp.getInstance().getAccountListController(viewId);
			
		acctListController.setSortOrder(bSortAsc);
		acctListController.setSortField(columnItem.getSortField());
		acctListController.show();
	} catch (ex) {
		ZaApp.getInstance().getCurrentController()._handleException(ex);
	}
}
}
if (AjxPackage.define("zimbraAdmin.accounts.view.ZaNewAccountXWizard")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

ZaNewAccountXWizard = function(parent, entry) {
    ZaXWizardDialog.call(this, parent, null, ZaMsg.NCD_NewAccTitle, "720px", "300px","ZaNewAccountXWizard",null,ZaId.DLG_NEW_ACCT);
    this.accountStatusChoices = [
        {value:ZaAccount.ACCOUNT_STATUS_ACTIVE, label:ZaAccount.getAccountStatusMsg (ZaAccount.ACCOUNT_STATUS_ACTIVE)},
        {value:ZaAccount.ACCOUNT_STATUS_CLOSED, label:ZaAccount.getAccountStatusMsg (ZaAccount.ACCOUNT_STATUS_CLOSED)},
        {value:ZaAccount.ACCOUNT_STATUS_LOCKED, label: ZaAccount.getAccountStatusMsg (ZaAccount.ACCOUNT_STATUS_LOCKED)},
        {value:ZaAccount.ACCOUNT_STATUS_PENDING, label: ZaAccount.getAccountStatusMsg (ZaAccount.ACCOUNT_STATUS_PENDING)},
        {value:ZaAccount.ACCOUNT_STATUS_MAINTENANCE, label:ZaAccount.getAccountStatusMsg(ZaAccount.ACCOUNT_STATUS_MAINTENANCE)}
    ];

    this.initForm(ZaAccount.myXModel,this.getMyXForm(entry), null);

    this._localXForm.setController();
    this._localXForm.addListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, new AjxListener(this, ZaNewAccountXWizard.prototype.handleXFormChange));
    this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, new AjxListener(this, ZaNewAccountXWizard.prototype.handleXFormChange));
    this._helpURL = ZaNewAccountXWizard.helpURL;

    this._domains = {} ;
}


ZaNewAccountXWizard.zimletChoices = new XFormChoices([], XFormChoices.SIMPLE_LIST);
ZaNewAccountXWizard.themeChoices = new XFormChoices([], XFormChoices.OBJECT_LIST);
ZaNewAccountXWizard.prototype = new ZaXWizardDialog;
ZaNewAccountXWizard.prototype.constructor = ZaNewAccountXWizard;
ZaNewAccountXWizard.prototype.toString = function() {
    return "ZaNewAccountXWizard";
}
ZaXDialog.XFormModifiers["ZaNewAccountXWizard"] = new Array();
ZaNewAccountXWizard.helpURL = ZaUtil.HELP_URL;
ZaNewAccountXWizard.prototype.handleXFormChange =
function () {
    if(this._localXForm.hasErrors()) {
        var isNeeded = true;

/*
 *Bug 49662 If it is alias step, we check the error'root. If the error is thrown
 *for the username is null, we reset this error's status. For emailaddr item's
 *OnChange() function is called after item value validation. At the stage of
 *value validation, an error is thrown and OnChange can't be called. If we
 *modify the email-address's validation method, it will effect the first stage
 *of account creatin. So we reset the error status here
 */
            if(this._containedObject[ZaModel.currentStep] == ZaNewAccountXWizard.ALIASES_STEP){
            var args = arguments[0];
            if(args && args.formItem && (args.formItem.type == "emailaddr")){
                isNeeded = !args.formItem.clearNameNullError();
            }
        }

        if(isNeeded){
            this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
            this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
            this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
        }
    } else {
        if(this._containedObject.attrs[ZaAccount.A_lastName]
                && this._containedObject[ZaAccount.A_name].indexOf("@") > 0
                && ZaAccount.isAccountTypeSet(this._containedObject)
                ) {
            this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(true);
            if(this._containedObject[ZaModel.currentStep] != this._lastStep) {
                this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
            }
            if(this._containedObject[ZaModel.currentStep] != ZaNewAccountXWizard.GENERAL_STEP) {
                this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
            }
        }
    }
}

//update the account type output with the right available/used account counts
//and not default account type choices displayed
ZaNewAccountXWizard.accountTypeItemId = "account_type_output_" + Dwt.getNextId();
ZaNewAccountXWizard.prototype.updateAccountType =
function ()  {
    var item = this._localXForm.getItemsById (ZaNewAccountXWizard.accountTypeItemId) [0] ;
    item.updateElement(ZaAccount.getAccountTypeOutput.call(item, true)) ;
}

ZaNewAccountXWizard.cosGroupItemId = "cos_grouper_" + Dwt.getNextId();
ZaNewAccountXWizard.prototype.updateCosGrouper =
function () {
    var item = this._localXForm.getItemsById (ZaNewAccountXWizard.cosGroupItemId) [0] ;
    item.items[0].setElementEnabled(true);
    item.updateElement() ;
}

/*
ZaNewAccountXWizard.onNameFieldChanged =
function (value, event, form) {
    if(value && value.length > 0) {
        form.parent._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(true);
    } else {
        form.parent._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
    }
    this.setInstanceValue(value);
    return value;
}*/

/**
* Overwritten methods that control wizard's flow (open, go next,go previous, finish)
**/
ZaNewAccountXWizard.prototype.popup =
function (loc) {
    ZaXWizardDialog.prototype.popup.call(this, loc);
    this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
    this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
    this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
}

ZaNewAccountXWizard.prototype.createDomainAndAccount = function(domainName) {
    try {
        var newDomain = new ZaDomain();
        newDomain.name=domainName;
        newDomain.attrs[ZaDomain.A_domainName] = domainName;
        var domain = ZaItem.create(newDomain,ZaDomain,"ZaDomain");
        if(domain != null) {
            ZaApp.getInstance().getCurrentController().closeCnfrmDelDlg();
            this.finishWizard();
        }
    } catch(ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaNewAccountXWizard.prototype.createDomainAndAccount", null, false);
    }
}

ZaNewAccountXWizard.prototype.finishWizard =
function() {
    try {
        if(this._containedObject.attrs[ZaAccount.A_password]) {
            if(this._containedObject.attrs[ZaAccount.A_password] != this._containedObject[ZaAccount.A2_confirmPassword]) {
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_MISMATCH);
                return false;
            }
        }

        if (AjxUtil.isEmailAddress(this._containedObject.attrs[ZaAccount.A_manager], false)){
            this._containedObject.attrs[ZaAccount.A_manager] = ZaApp.getInstance().getAccountViewController()._getLDAPAttr(this._containedObject.attrs[ZaAccount.A_manager]);
        }

        if(!ZaAccount.checkValues(this._containedObject)) {
            return false;
        }
        var account = ZaItem.create(this._containedObject,ZaAccount,"ZaAccount");
        if(account != null) {
            //if creation took place - fire an change event
            ZaApp.getInstance().getAccountListController().fireCreationEvent(account);
            this.popdown();
            ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.AccountCreated,[account.name]));
            //ZaApp.getInstance().getCurrentController().popupMsgDialog(AjxMessageFormat.format(ZaMsg.AccountCreated,[account.name]));
        }
    } catch (ex) {
        switch(ex.code) {
            case ZmCsfeException.ACCT_EXISTS:
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_ACCOUNT_EXISTS);
            break;
            case ZmCsfeException.NO_SUCH_COS:
                ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_NO_SUCH_COS,[this._containedObject.attrs[ZaAccount.A_COSId]]), ex);
            break;
            case ZmCsfeException.ACCT_INVALID_PASSWORD:
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_INVALID, ex);
                ZaApp.getInstance().getAppCtxt().getErrorDialog().showDetail(true);
            break;
            case ZmCsfeException.NO_SUCH_DOMAIN:
                ZaApp.getInstance().dialogs["confirmMessageDialog2"].setMessage(AjxMessageFormat.format(ZaMsg.CreateDomain_q,[ZaAccount.getDomain(this._containedObject.name)]), DwtMessageDialog.WARNING_STYLE);
                ZaApp.getInstance().dialogs["confirmMessageDialog2"].registerCallback(DwtDialog.YES_BUTTON, this.createDomainAndAccount, this, [ZaAccount.getDomain(this._containedObject.name)]);
                ZaApp.getInstance().dialogs["confirmMessageDialog2"].registerCallback(DwtDialog.NO_BUTTON, ZaController.prototype.closeCnfrmDelDlg, ZaApp.getInstance().getCurrentController(), null);
                ZaApp.getInstance().dialogs["confirmMessageDialog2"].popup();
            break;
            default:
                ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaNewAccountXWizard.prototype.finishWizard", null, false);
            break;
        }
    }
}

ZaNewAccountXWizard.prototype.goNext =
function() {
    if (this._containedObject[ZaModel.currentStep] == 1) {
        //check if passwords match
        if(this._containedObject.attrs[ZaAccount.A_password]) {
            if(this._containedObject.attrs[ZaAccount.A_password] != this._containedObject[ZaAccount.A2_confirmPassword]) {
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_MISMATCH);
                return false;
            }
        }
        //check if account exists
        if (ZaSearch.isAccountExist.call(this, {name: this._containedObject[ZaAccount.A_name], popupError: true})) {
            return false ;
        }
        this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);

    }
    this.goPage(this._containedObject[ZaModel.currentStep] + 1);
    if(this._containedObject[ZaModel.currentStep] == this._lastStep) {
        this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
    }
}

ZaNewAccountXWizard.prototype.goPrev =
function() {
    if (this._containedObject[ZaModel.currentStep] == 2) {
        this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
        this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
    } else if(this._containedObject[ZaModel.currentStep] == this._lastStep) {
        this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
    }
    this.goPage(this._containedObject[ZaModel.currentStep] - 1);
}

/**
* @method setObject sets the object contained in the view
* @param entry - ZaAccount object to display
**/
ZaNewAccountXWizard.prototype.setObject =
function(entry) {
    this._containedObject = new ZaAccount();
    this._containedObject.attrs = new Object();

    for (var a in entry.attrs) {
        this._containedObject.attrs[a] = entry.attrs[a];
    }
    this._containedObject.name = entry.name || "";

    if(entry._uuid) {
        this._containedObject._uuid = entry._uuid;
    }

    if(entry.rights) {
        this._containedObject.rights = entry.rights;
    } else {
        this._containedObject.rights = [];
    }
    if(this._containedObject.rights[ZaAccount.RENAME_ACCOUNT_RIGHT] === undefined)
        this._containedObject.rights[ZaAccount.RENAME_ACCOUNT_RIGHT] = true; //since this is a new account, we should be able to give it a name

    if(entry.setAttrs)
        this._containedObject.setAttrs = entry.setAttrs;

    if(entry.getAttrs)
        this._containedObject.getAttrs = entry.getAttrs;

    if(entry._defaultValues)
        this._containedObject._defaultValues = entry._defaultValues;

    this._containedObject.id = entry.id || null;

    this.cosChoices.setChoices([this._containedObject.cos]);
    this.cosChoices.dirtyChoices();

    this._containedObject.attrs[ZaAccount.A_accountStatus] =  ZaAccount.ACCOUNT_STATUS_ACTIVE;
    this._containedObject[ZaAccount.A2_autodisplayname] = entry[ZaAccount.A2_autodisplayname] || "TRUE";
    this._containedObject[ZaAccount.A2_autoMailServer] = entry[ZaAccount.A2_autoMailServer] || "TRUE";
    this._containedObject[ZaAccount.A2_autoCos] = entry[ZaAccount.A2_autoCos] || "TRUE";
    this._containedObject[ZaAccount.A2_confirmPassword] = entry[ZaAccount.A2_confirmPassword] || null;
    this._containedObject[ZaModel.currentStep] = entry[ZaModel.currentStep] || 1;
    this._containedObject.attrs[ZaAccount.A_zimbraMailAlias] = entry.attrs[ZaAccount.A_zimbraMailAlias] || new Array();
    this._containedObject[ZaAccount.A2_errorMessage] = entry[ZaAccount.A2_errorMessage] || "";
    var domainName;
    if(!domainName) {
        //find out what is the default domain
        try {
            domainName = ZaApp.getInstance().getGlobalConfig().attrs[ZaGlobalConfig.A_zimbraDefaultDomainName];
        } catch (ex) {
            if(ex.code != ZmCsfeException.SVC_PERM_DENIED) {
                throw(ex);
            }
        }

    }
    //this._containedObject.globalConfig = ZaApp.getInstance().getGlobalConfig();

    if(!domainName) {
        domainName =  ZaSettings.myDomainName;
    }
    this._containedObject[ZaAccount.A_name] = "@" + domainName;
    if (entry[ZaAccount.A_name])
        this._containedObject[ZaAccount.A_name] = entry[ZaAccount.A_name];
    EmailAddr_XFormItem.domainChoices.setChoices([]);
    EmailAddr_XFormItem.domainChoices.dirtyChoices();

    var domainName = ZaAccount.getDomain (this._containedObject.name) ;
    try {
            var domainObj = ZaDomain.getDomainByName(domainName) ;
        this._containedObject[ZaAccount.A2_accountTypes] = domainObj.getAccountTypes () ;
    } catch (ex) {
        if(ex.code == ZmCsfeException.SVC_PERM_DENIED) {
            this._containedObject[ZaAccount.A2_errorMessage] = AjxMessageFormat.format(ZaMsg.CANNOT_CREATE_ACCOUNTS_IN_THIS_DOMAIN,[domainName]);
            //ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.CANNOT_CREATE_ACCOUNTS_IN_THIS_DOMAIN,[domainName])    , ex);
        } else {
            this._containedObject[ZaAccount.A2_errorMessage] = "";
             throw(ex);
        }
    }

    this._containedObject[ZaAccount.A2_memberOf] = ZaAccountMemberOfListView.cloneMemberOf(entry);

    //add the memberList page information
    this._containedObject[ZaAccount.A2_directMemberList + "_offset"] = entry[ZaAccount.A2_directMemberList + "_offset"];
    this._containedObject[ZaAccount.A2_directMemberList + "_more"] = entry[ZaAccount.A2_directMemberList + "_more"];
    this._containedObject[ZaAccount.A2_indirectMemberList + "_offset"] = entry[ZaAccount.A2_indirectMemberList + "_offset"];
    this._containedObject[ZaAccount.A2_indirectMemberList + "_more"] = entry[ZaAccount.A2_indirectMemberList + "_more"];
    this._containedObject[ZaAccount.A2_nonMemberList + "_offset"] = entry[ZaAccount.A2_nonMemberList + "_offset"];
    this._containedObject[ZaAccount.A2_nonMemberList + "_more"] = entry[ZaAccount.A2_nonMemberList + "_more"];
    if(entry.getAttrs[ZaAccount.A_zimbraAvailableSkin] || entry.getAttrs.all) {
        var skins = ZaApp.getInstance().getInstalledSkins();

        if(AjxUtil.isEmpty(skins)) {
            if(entry._defaultValues && entry._defaultValues.attrs && !AjxUtil.isEmpty(entry._defaultValues.attrs[ZaAccount.A_zimbraAvailableSkin])) {
                //if we cannot get all zimlets from domain either, just use whatever came in "defaults" which would be what the COS value is
                skins = entry._defaultValues.attrs[ZaAccount.A_zimbraAvailableSkin];
            } else {
                skins = [];
            }
        } else {
            if (AjxUtil.isString(skins))     {
                skins = [skins];
            }
        }

        var skinsChoices = ZaApp.getInstance().getSkinChoices(skins);
        ZaNewAccountXWizard.themeChoices.setChoices(skinsChoices);
        ZaNewAccountXWizard.themeChoices.dirtyChoices();

    }

    if(entry.getAttrs[ZaAccount.A_zimbraZimletAvailableZimlets] || entry.getAttrs.all) {
        //get sll Zimlets
        var allZimlets = ZaZimlet.getAll("extension");

        if(!AjxUtil.isEmpty(allZimlets) && allZimlets instanceof ZaItemList || allZimlets instanceof AjxVector)
            allZimlets = allZimlets.getArray();

        if(AjxUtil.isEmpty(allZimlets)) {

            if(entry._defaultValues && entry._defaultValues.attrs && !AjxUtil.isEmpty(entry._defaultValues.attrs[ZaAccount.A_zimbraZimletAvailableZimlets])) {
                allZimlets = entry._defaultValues.attrs[ZaAccount.A_zimbraZimletAvailableZimlets];
            } else {
                allZimlets = [];
            }
            ZaNewAccountXWizard.zimletChoices.setChoices(allZimlets);
            ZaNewAccountXWizard.zimletChoices.dirtyChoices();

        } else {
            //convert objects to strings
            var cnt = allZimlets.length;
            var _tmpZimlets = [];
            for(var i=0; i<cnt; i++) {
                var zimlet = allZimlets[i];
                _tmpZimlets.push(zimlet.name);
            }
            ZaNewAccountXWizard.zimletChoices.setChoices(_tmpZimlets);
            ZaNewAccountXWizard.zimletChoices.dirtyChoices();
        }
    }

    if (domainObj && domainObj.attrs &&
        domainObj.attrs[ZaDomain.A_AuthMech] &&
        (domainObj.attrs[ZaDomain.A_AuthMech] != ZaDomain.AuthMech_zimbra) ) {
        this._containedObject[ZaAccount.A2_isExternalAuth] = true;
    } else {
        this._containedObject[ZaAccount.A2_isExternalAuth] = false;
    }

    //check the account type here
    this._localXForm.setInstance(this._containedObject);
    var nameFields = this._localXForm.getItemsById(ZaAccount.A_name);
    if(!AjxUtil.isEmpty(nameFields) && nameFields[0] && nameFields[0].resetEditedState)
        nameFields[0].resetEditedState();
}

ZaNewAccountXWizard.isAuthfromInternal =
function(domainName, attrName) {

    var acctName = null;
    if(attrName) {
            var instance = this.getInstance();
            if(instance)
                    acctName = this.getInstanceValue(attrName);

    }
    if(!acctName) acctName = domainName;
    return ZaAccountXFormView.isAuthfromInternal(acctName);
}

ZaNewAccountXWizard.isDomainLeftAccountsAlertVisible = function () {
    var val1 = this.getInstanceValue(ZaAccount.A2_domainLeftAccounts);
    var val2 = this.getInstanceValue(ZaAccount.A2_accountTypes);
    return (!AjxUtil.isEmpty(val1) && AjxUtil.isEmpty(val2));
}

ZaNewAccountXWizard.isAccountsTypeAlertInvisible = function () {
        var val = this.getInstanceValue(ZaAccount.A2_showAccountTypeMsg);
        return (AjxUtil.isEmpty(val));
}

ZaNewAccountXWizard.isAccountTypeGrouperVisible = function () {
    return !AjxUtil.isEmpty(this.getInstanceValue(ZaAccount.A2_accountTypes));
}

ZaNewAccountXWizard.isAccountTypeSet = function () {
    return !ZaAccount.isAccountTypeSet(this.getInstance());
}

ZaNewAccountXWizard.isAutoDisplayname = function () {
    return (this.getInstanceValue(ZaAccount.A2_autodisplayname)=="FALSE");
}

ZaNewAccountXWizard.isAutoCos = function () {
    return (this.getInstanceValue(ZaAccount.A2_autoCos)=="FALSE");
}

ZaNewAccountXWizard.isContactsFeatureEnabled = function () {
    return this.getInstanceValue(ZaAccount.A_zimbraFeatureDistributionListFolderEnabled) == "TRUE";
}

ZaNewAccountXWizard.isCalendarFeatureEnabled = function () {
    return this.getInstanceValue(ZaAccount.A_zimbraFeatureCalendarEnabled)=="TRUE";
}

ZaNewAccountXWizard.isMailForwardingEnabled = function () {
    return (this.getInstanceValue(ZaAccount.A_zimbraFeatureMailForwardingEnabled) == "TRUE");
}

ZaNewAccountXWizard.onCOSChanged =
function(value, event, form) {
    if(ZaItem.ID_PATTERN.test(value))  {
        form.getInstance()._defaultValues = ZaCos.getCosById(value, form.parent._app);
        this.setInstanceValue(value);
    } else {
        form.getInstance()._defaultValues = ZaCos.getCosByName(value, form.parent._app);
        if(form.getInstance().cos) {
            //value = form.getInstance()._defaultValues.id;
            value = form.getInstance()._defaultValues.id;
        }
    }
    this.setInstanceValue(value);
    form.parent._isCosChanged = true ;

    //if cos is changed,  update the account type information
    form.parent.updateAccountType();

    return value;
}

ZaNewAccountXWizard.getAccountNameInfoItem = function(){
    if(AjxUtil.isEmpty(ZaNewAccountXWizard.accountNameInfoPool)){
        ZaNewAccountXWizard.accountNameInfoPool = new Object();
        ZaNewAccountXWizard.accountNameInfoPool[ZaAccount.A_name] = {ref:ZaAccount.A_name, type:_EMAILADDR_,
                     msgName:ZaMsg.NAD_AccountName,label:ZaMsg.NAD_AccountName, bmolsnr:false,
                                        domainPartWidth:"100%",
                                        labelLocation:_LEFT_,onChange:ZaAccount.setDomainChanged,forceUpdate:true,
                                        enableDisableChecks:[],
                                        visibilityChecks:[]
                                },
        ZaNewAccountXWizard.accountNameInfoPool[ZaAccount.A_firstName] = {ref:ZaAccount.A_firstName, type:_TEXTFIELD_,
                    msgName:ZaMsg.NAD_FirstName,label:ZaMsg.NAD_FirstName,
                    labelLocation:_LEFT_, cssClass:"admin_xform_name_input", width:150,
                    elementChanged: function(elementValue,instanceValue, event) {
                        if(this.getInstance()[ZaAccount.A2_autodisplayname]=="TRUE") {
                            ZaAccount.generateDisplayName.call(this, this.getInstance(), elementValue, this.getInstance().attrs[ZaAccount.A_lastName],this.getInstance().attrs[ZaAccount.A_initials] );
                        }
                        this.getForm().itemChanged(this, elementValue, event);
                    }
                };
        ZaNewAccountXWizard.accountNameInfoPool[ZaAccount.A_initials] = {ref:ZaAccount.A_initials, type:_TEXTFIELD_,
                    msgName:ZaMsg.NAD_Initials,label:ZaMsg.NAD_Initials, labelLocation:_LEFT_,
                    cssClass:"admin_xform_name_input", width:50,
                    elementChanged: function(elementValue,instanceValue, event) {
                        if(this.getInstance()[ZaAccount.A2_autodisplayname]=="TRUE") {
                            ZaAccount.generateDisplayName.call(this, this.getInstance(), this.getInstanceValue(ZaAccount.A_firstName), this.getInstanceValue(ZaAccount.A_lastName),elementValue);
                        }
                        this.getForm().itemChanged(this, elementValue, event);
                    }
                };
        ZaNewAccountXWizard.accountNameInfoPool[ZaAccount.A_lastName] = {ref:ZaAccount.A_lastName, type:_TEXTFIELD_,
                    msgName:ZaMsg.NAD_LastName,label:ZaMsg.NAD_LastName, labelLocation:_LEFT_,
                    cssClass:"admin_xform_name_input", width:150,
                    elementChanged: function(elementValue,instanceValue, event) {
                        if(this.getInstance()[ZaAccount.A2_autodisplayname]=="TRUE") {
                            ZaAccount.generateDisplayName.call(this, this.getInstance(),  this.getInstanceValue(ZaAccount.A_firstName), elementValue ,this.getInstanceValue(ZaAccount.A_initials));
                        }
                        this.getForm().itemChanged(this, elementValue, event);
                    }
                };
        ZaNewAccountXWizard.accountNameInfoPool["ZaAccountDisplayInfoGroup"] = {type:_GROUP_, numCols:3, nowrap:true,
                    width:200, msgName:ZaMsg.NAD_DisplayName,label:ZaMsg.NAD_DisplayName, labelLocation:_LEFT_,
                                        visibilityChecks:[[ZaItem.hasReadPermission,ZaAccount.A_displayname]],
                                        items: [
                                                {ref:ZaAccount.A_displayname, type:_TEXTFIELD_, label:null,     cssClass:"admin_xform_name_input", width:150,
                                                        enableDisableChecks:[ [XForm.checkInstanceValue,ZaAccount.A2_autodisplayname,"FALSE"],ZaItem.hasWritePermission],
                                                        enableDisableChangeEventSources:[ZaAccount.A2_autodisplayname],bmolsnr:true,
                                                        visibilityChecks:[]
                                                },
                                                {ref:ZaAccount.A2_autodisplayname, type:_WIZ_CHECKBOX_, msgName:ZaMsg.NAD_Auto,label:ZaMsg.NAD_Auto,labelLocation:_RIGHT_,trueValue:"TRUE", falseValue:"FALSE", subLabel:"",
                                                        elementChanged: function(elementValue,instanceValue, event) {
                                                                if(elementValue=="TRUE") {
                                                                        if(ZaAccount.generateDisplayName.call(this, this.getInstance(), this.getInstanceValue(ZaAccount.A_firstName), this.getInstanceValue(ZaAccount.A_lastName),this.getInstanceValue(ZaAccount.A_initials))) {
                                                                                this.getForm().parent.setDirty(true);
                                                                        }
                                                                }
                                                                this.getForm().itemChanged(this, elementValue, event);
                                                        },
                                                        enableDisableChecks:[[ZaItem.hasWritePermission,ZaAccount.A_displayname]],
                            visibilityChecks:[[ZaItem.hasWritePermission,ZaAccount.A_displayname]]

                                                }
                                        ]
                                },
        ZaNewAccountXWizard.accountNameInfoPool[ZaAccount.A_zimbraHideInGal]={ref:ZaAccount.A_zimbraHideInGal, type:_WIZ_CHECKBOX_,
                              msgName:ZaMsg.LBL_zimbraHideInGal, subLabel:"", labelLocation:_RIGHT_,align:_RIGHT_,
                              label:ZaMsg.LBL_zimbraHideInGal, trueValue:"TRUE", falseValue:"FALSE"
                },
        ZaNewAccountXWizard.accountNameInfoPool[ZaAccount.A_zimbraPhoneticFirstName] = {
                    ref:ZaAccount.A_zimbraPhoneticFirstName, type:_TEXTFIELD_,
                    msgName:ZaMsg.NAD_zimbraPhoneticFirstName,label:ZaMsg.NAD_zimbraPhoneticFirstName,
                                        labelLocation:_LEFT_, cssClass:"admin_xform_name_input",width:150
                                };
        ZaNewAccountXWizard.accountNameInfoPool[ZaAccount.A_zimbraPhoneticLastName] = {
                                        ref:ZaAccount.A_zimbraPhoneticLastName, type:_TEXTFIELD_,
                                        msgName:ZaMsg.NAD_zimbraPhoneticLastName,label:ZaMsg.NAD_zimbraPhoneticLastName,
                                        labelLocation:_LEFT_, cssClass:"admin_xform_name_input",width:150
                                };

    }

    var accountNameFormItems = new Array();
        var accountNameItemsOrders = new Array();
        if(ZaZimbraAdmin.isLanguage("ja")){
        accountNameItemsOrders = [ZaAccount.A_name, ZaAccount.A_zimbraPhoneticLastName, ZaAccount.A_lastName, ZaAccount.A_initials, ZaAccount.A_zimbraPhoneticFirstName, ZaAccount.A_firstName, "ZaAccountDisplayInfoGroup", ZaAccount.A_zimbraHideInGal];
        }
        else{
        accountNameItemsOrders = [ZaAccount.A_name, ZaAccount.A_firstName, ZaAccount.A_initials, ZaAccount.A_lastName,"ZaAccountDisplayInfoGroup", ZaAccount.A_zimbraHideInGal];
        }

        for(var i = 0; i < accountNameItemsOrders.length; i++){
                accountNameFormItems.push(ZaNewAccountXWizard.accountNameInfoPool[accountNameItemsOrders[i]]);
        }
        return accountNameFormItems;
}

ZaNewAccountXWizard.myXFormModifier = function(xFormObject, entry) {
    var domainName = ZaSettings.myDomainName;

    var emptyAlias = "@" + domainName;
    var cases = new Array();

    this.stepChoices = [];
    this.TAB_INDEX = 0;
    ZaNewAccountXWizard.GENERAL_STEP = ++this.TAB_INDEX;
    this.stepChoices.push({value:ZaNewAccountXWizard.GENERAL_STEP, label:ZaMsg.TABT_GeneralPage});
    this.cosChoices = new XFormChoices([], XFormChoices.OBJECT_LIST, "id", "name");
    var case1 = {type:_CASE_, tabGroupKey:ZaNewAccountXWizard.GENERAL_STEP, caseKey:ZaNewAccountXWizard.GENERAL_STEP, numCols:1,  align:_LEFT_, valign:_TOP_};
    var case1Items = [
         {type: _DWT_ALERT_, ref: ZaAccount.A2_domainLeftAccounts,
                visibilityChecks:[ZaNewAccountXWizard.isDomainLeftAccountsAlertVisible],
                visibilityChangeEventSources:[ZaAccount.A2_domainLeftAccounts,ZaAccount.A2_accountTypes, ZaAccount.A_name],
                bmolsnr:true,
                containerCssStyle: "width:400px;",
                style: DwtAlert.WARNING, iconVisible: false
         },
        {type: _DWT_ALERT_, ref: ZaAccount.A2_warningMessage,
                visibilityChecks:[[XForm.checkInstanceValueNotEmty,ZaAccount.A2_warningMessage]],
                visibilityChangeEventSources:[ZaAccount.A2_warningMessage],
                bmolsnr:true,
                containerCssStyle: "width:400px;",
                style: DwtAlert.WARNING, iconVisible: false
         },
        {type: _DWT_ALERT_, ref: ZaAccount.A2_errorMessage,
                visibilityChecks:[[XForm.checkInstanceValueNotEmty,ZaAccount.A2_errorMessage]],
                visibilityChangeEventSources:[ZaAccount.A2_errorMessage],
                bmolsnr:true,
                containerCssStyle: "width:400px;",
                style: DwtAlert.CRITICAL, iconVisible: false
         },
        //account types group
        {type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_AccountTypeGrouper, id:"account_wiz_type_group",
                colSpan: "*", numCols: 1, colSizes: ["100%"],
                visibilityChecks:[ZaNewAccountXWizard.isAccountTypeGrouperVisible,ZaAccount.isShowAccountType],
                visibilityChangeEventSources:[ZaAccount.A2_accountTypes,ZaAccount.A_COSId,ZaAccount.A_name, ZaAccount.A2_showAccountTypeMsg],
                items: [
                    {type: _DWT_ALERT_,
                        visibilityChecks:[ZaNewAccountXWizard.isAccountTypeSet, ZaNewAccountXWizard.isAccountsTypeAlertInvisible],
                        visibilityChangeEventSources:[ZaAccount.A2_accountTypes,ZaAccount.A_COSId, ZaAccount.A_name, ZaAccount.A2_showAccountTypeMsg],
                        containerCssStyle: "width:400px;",
                        style: DwtAlert.CRITICAL, iconVisible: false ,
                        content: ZaMsg.ERROR_ACCOUNT_TYPE_NOT_SET
                    },
                    {type: _DWT_ALERT_, ref: ZaAccount.A2_showAccountTypeMsg,
                        visibilityChecks:[[XForm.checkInstanceValueNotEmty,ZaAccount.A2_showAccountTypeMsg]],
                    visibilityChangeEventSources:[ZaAccount.A2_showAccountTypeMsg, ZaAccount.A_name],
                    bmolsnr:true,
                        containerCssStyle: "width:400px;",
                        style: DwtAlert.WARNING, iconVisible: false
                    },
                    { type: _OUTPUT_, id: ZaNewAccountXWizard.accountTypeItemId,
                        getDisplayValue: ZaAccount.getAccountTypeOutput,
                        valueChangeEventSources:[ZaAccount.A_name,ZaAccount.A_COSId,ZaAccount.A2_accountTypes,ZaAccount.A2_currentAccountType],
                        //center the elements
                        cssStyle: "margin-left:auto;margin-right:auto;width:600px;"
                    }
               ]
        },
        {type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_AccountNameGrouper, id:"account_wiz_name_group",numCols:2,
            items:ZaNewAccountXWizard.getAccountNameInfoItem(),
                displayLabelItem: true, headerLabelWidth:"100px",
                headerItems:[
                    {ref:ZaAccount.A_name, type:_EMAILADDR_,
                     msgName:ZaMsg.NAD_AccountName,
                                        labelLocation:_LEFT_,onChange:ZaAccount.setDomainChanged,forceUpdate:true,
                                        enableDisableChecks:[[ZaItem.hasRight,ZaAccount.RENAME_ACCOUNT_RIGHT]],
                                        visibilityChecks:[]
                     }
                ]
        }
    ];
    if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,
        [ZaAccount.A_accountStatus, ZaAccount.A_COSId, ZaAccount.A_zimbraIsAdminAccount,ZaAccount.A_mailHost],[])) {
        var setupGroup = {type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_AccountSetupGrouper, id:"account_wiz_setup_group",
            numCols:2,colSizes:["200px","400px"],
            items: [
                {ref:ZaAccount.A_accountStatus, type:_OSELECT1_, msgName:ZaMsg.NAD_AccountStatus,
                    label:ZaMsg.NAD_AccountStatus,
                    labelLocation:_LEFT_, choices:this.accountStatusChoices
                }
            ],
            headerItems: [
                    {ref:ZaAccount.A_accountStatus, type:_OSELECT1_,
                        bmolsnr:true,
                        labelLocation:_LEFT_, choices:this.accountStatusChoices
                    }
            ], displayLabelItem: true, headerLabelWidth:"100px"
        }


        setupGroup.items.push(
            {type:_GROUP_, numCols:3, nowrap:true, label:ZaMsg.NAD_ClassOfService, labelLocation:_LEFT_,
                visibilityChecks:[[ZaItem.hasWritePermission,ZaAccount.A_COSId]],
                id: ZaNewAccountXWizard.cosGroupItemId,
                items: [
                    {ref:ZaAccount.A_COSId, label: null,
                        type : _INPUT_,
                        onChange:ZaAccount.setCosChanged,
                        enableDisableChecks:[[ZaNewAccountXWizard.isAutoCos], [ZaItem.hasWritePermission,ZaAccount.A_COSId]],
                        enableDisableChangeEventSources:[ZaAccount.A2_autoCos],
                        getDisplayValue: function(newValue) {
                            if (newValue) {
                                var cos = ZaCos.getCosById(newValue);
                                return cos && cos.name;
                            }
                        }
                    },
                    {ref:ZaAccount.A2_autoCos, type:_WIZ_CHECKBOX_,
                        msgName:ZaMsg.NAD_Auto,label:ZaMsg.NAD_Auto,labelLocation:_RIGHT_,
                        trueValue:"TRUE", falseValue:"FALSE" , subLabel:"",
                        elementChanged: function(elementValue,instanceValue, event) {
                            var cositem = this.getParentItem().getItems()[0];
                            var form = this.getForm();
                            if(elementValue=="TRUE") {
                                cositem.updateElement(null);
                                ZaAccount.setDefaultCos(this.getInstance(), form.parent._app);
                            }
                            else {
                                cositem.createDataList(ZaApp.getInstance().getCosListName());
                            }
                            form.itemChanged(this, elementValue, event);
                        },
                        enableDisableChecks:[ [ZaItem.hasWritePermission,ZaAccount.A_COSId]],
                        visibilityChecks:[]
                    }
                ]
            });

        setupGroup.items.push({ref:ZaAccount.A_zimbraIsAdminAccount, type:_WIZ_CHECKBOX_, labelLocation:_RIGHT_,align:_RIGHT_,subLabel:"",
                                visibilityChecks:[[ZaItem.hasWritePermission,ZaAccount.A_zimbraIsAdminAccount]],
                                msgName:ZaMsg.NAD_IsSystemAdminAccount,label:ZaMsg.NAD_IsSystemAdminAccount,
                                bmolsnr:true, trueValue:"TRUE", falseValue:"FALSE"
                            });

        setupGroup.items.push({type:_GROUP_, numCols:3, nowrap:true, label:ZabMsg.attrDesc_mailHost, labelLocation:_LEFT_,
                            visibilityChecks:[[ZaItem.hasWritePermission,ZaAccount.A_mailHost]],
                            items: [
                                { ref: ZaAccount.A_mailHost, type: _OSELECT1_, label: null, editable:false, choices: ZaApp.getInstance().getServerListChoices(),
                                    enableDisableChecks:[ZaAccount.isAutoMailServer],
                                    enableDisableChangeEventSources:[ZaAccount.A2_autoMailServer],
                                    visibilityChecks:[],
                                    tableCssStyle: "height:15px;"
                                  },
                                {ref:ZaAccount.A2_autoMailServer, type:_WIZ_CHECKBOX_, msgName:ZaMsg.NAD_Auto,label:ZaMsg.NAD_Auto,labelLocation:_RIGHT_,trueValue:"TRUE", falseValue:"FALSE",
                                    visibilityChecks:[], labelLocation:_RIGHT_,align:_RIGHT_, subLabel:"",
                                    enableDisableChecks:[]
                                }
                            ]
                        });

        case1Items.push(setupGroup);
    }
    var passwordGroup = {type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_PasswordGrouper,id:"account_wiz_password_group",
        numCols:2,visibilityChecks:[
            [ZaItem.adminHasAnyRight,[ZaAccount.SET_PASSWORD_RIGHT, ZaAccount.CHANGE_PASSWORD_RIGHT]],
            [XForm.checkInstanceValueNot,ZaAccount.A2_isExternalAuth,true]],
        visibilityChangeEventSources:[ZaAccount.A2_isExternalAuth],
        items:[
                   { type: _DWT_ALERT_, containerCssStyle: "padding-bottom:0;",
                        style: DwtAlert.WARNING,iconVisible: false,
                        content: ZaMsg.Alert_InternalPassword
                },
        {ref:ZaAccount.A_password, type:_SECRET_, msgName:ZaMsg.NAD_Password,
            label:ZaMsg.NAD_Password, labelLocation:_LEFT_,
            visibilityChecks:[],enableDisableChecks:[[ZaNewAccountXWizard.isAuthfromInternal, domainName,ZaAccount.A_name]],
            cssClass:"admin_xform_name_input"
        },
        {ref:ZaAccount.A2_confirmPassword, type:_SECRET_, msgName:ZaMsg.NAD_ConfirmPassword,
            label:ZaMsg.NAD_ConfirmPassword, labelLocation:_LEFT_,
            visibilityChecks:[],enableDisableChecks:[[ZaNewAccountXWizard.isAuthfromInternal, domainName,ZaAccount.A_name]],
            cssClass:"admin_xform_name_input"
        },
        {ref:ZaAccount.A_zimbraPasswordMustChange,  type:_WIZ_CHECKBOX_, labelLocation:_RIGHT_,align:_RIGHT_, subLabel:"",
            msgName:ZaMsg.NAD_MustChangePwd,label:ZaMsg.NAD_MustChangePwd,trueValue:"TRUE", falseValue:"FALSE",
            visibilityChecks:[], enableDisableChecks:[[ZaNewAccountXWizard.isAuthfromInternal, domainName,ZaAccount.A_name]]
        }
        ]
    };
    case1Items.push(passwordGroup);

    var externalAuthGroup = {type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_ExternalAuthGrouper,id:"account_wiz_ext_auth_group",
        numCols:2,
        visibilityChecks:[
            [XForm.checkInstanceValue,ZaAccount.A2_isExternalAuth,true],
            [ZaItem.hasReadPermission,ZaAccount.A_zimbraAuthLdapExternalDn]],
        visibilityChangeEventSources:[ZaAccount.A2_isExternalAuth],
        items:[
            {ref:ZaAccount.A_zimbraAuthLdapExternalDn,type:_TEXTFIELD_,width:256,
                msgName:ZaMsg.NAD_AuthLdapExternalDn,label:ZaMsg.NAD_AuthLdapExternalDn, labelLocation:_LEFT_,
                align:_LEFT_, toolTipContent: ZaMsg.tt_AuthLdapExternalDn
            }
        ]
    };
    case1Items.push(externalAuthGroup);

    var new_acct_timezone_group = {
         type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_TimezoneGrouper, id: "account_wiz_timezone_group",
         visibilityChecks:[[ZaItem.hasWritePermission,ZaAccount.A_zimbraPrefTimeZoneId]],
         numCols: 2,
         items: [
                   /*
                {ref:"default_timezone", type:_CHECKBOX_, msgName:"default",
                    label:ZaMsg.NAD_Auto,labelLocation:_RIGHT_,trueValue:"TRUE", falseValue:"FALSE",
                    elementChanged: function(elementValue,instanceValue, event) {
                        if(elementValue=="TRUE") {
                            ZaAccount.generateDisplayName(this.getInstance(), this.getInstance().attrs[ZaAccount.A_firstName], this.getInstance().attrs[ZaAccount.A_lastName],this.getInstance().attrs[ZaAccount.A_initials]);
                        }
                        this.getForm().itemChanged(this, elementValue, event);
                    }
              }     */
            {ref:ZaAccount.A_zimbraPrefTimeZoneId, type:_SELECT1_, msgName:ZaMsg.LBL_zimbraPrefTimeZoneId,
                 label:ZaMsg.LBL_zimbraPrefTimeZoneId, labelLocation:_LEFT_ }
         ]
    }

    case1Items.push (new_acct_timezone_group) ;


    if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_description,ZaAccount.A_notes],[])) {
        var notesGroup = {type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_NotesGrouper, id:"account_wiz_notes_group",

            numCols:2,
             items:[
                {ref:ZaAccount.A_description, type:_INPUT_, msgName:ZaMsg.NAD_Description,
                    label:ZaMsg.NAD_Description, labelLocation:_LEFT_, cssClass:"admin_xform_name_input",
                     visibilityChecks:[[ZaItem.hasWritePermission,ZaAccount.A_description]],
                     enableDisableChecks:[]
                },
                {ref:ZaAccount.A_notes, type:_TEXTAREA_, msgName:ZaMsg.NAD_Notes,
                    label:ZaMsg.NAD_Notes, labelLocation:_LEFT_, labelCssStyle:"vertical-align:top;", width:"30em",
                    visibilityChecks:[[ZaItem.hasWritePermission,ZaAccount.A_notes]],
                    enableDisableChecks:[]
                }
            ]
        };

        case1Items.push(notesGroup);
    }
    case1.items = case1Items;
    cases.push(case1);

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.CONTACT_TAB_ATTRS, ZaAccountXFormView.CONTACT_TAB_RIGHTS) &&
        !ZaSettings.isOctopus()) {
        ZaNewAccountXWizard.CONTACT_STEP = ++this.TAB_INDEX;
        this.stepChoices.push({value:ZaNewAccountXWizard.CONTACT_STEP, label:ZaMsg.TABT_ContactInfo});
        var case2={type:_CASE_, caseKey:ZaNewAccountXWizard.CONTACT_STEP, tabGroupKey:ZaNewAccountXWizard.CONTACT_STEP, numCols:1,
                        items: [
                            {type:_ZAWIZGROUP_,
                                items:[
                                    {ref:ZaAccount.A_telephoneNumber, type:_TEXTFIELD_, msgName:ZaMsg.NAD_telephoneNumber,label:ZaMsg.NAD_telephoneNumber, labelLocation:_LEFT_, width:250},
                                    {ref:ZaAccount.A_homePhone, type:_TEXTFIELD_, msgName:ZaMsg.NAD_homePhone,label:ZaMsg.NAD_homePhone, labelLocation:_LEFT_, width:250} ,
                                    {ref:ZaAccount.A_mobile, type:_TEXTFIELD_, msgName:ZaMsg.NAD_mobile,label:ZaMsg.NAD_mobile, labelLocation:_LEFT_, width:250} ,
                                    {ref:ZaAccount.A_pager, type:_TEXTFIELD_, msgName:ZaMsg.NAD_pager,label:ZaMsg.NAD_pager, labelLocation:_LEFT_, width:250} ,
                                    {ref:ZaAccount.A_facsimileTelephoneNumber, type:_TEXTFIELD_, msgName:ZaMsg.NAD_facsimileTelephoneNumber,label:ZaMsg.NAD_facsimileTelephoneNumber, labelLocation:_LEFT_, width:250}
                                ]
                            },
                            {type:_ZAWIZGROUP_,
                                items:[
                                    {ref:ZaAccount.A_zimbraPhoneticCompany, type:_TEXTFIELD_, msgName:ZaMsg.NAD_zimbraPhoneticCompany, label:ZaMsg.NAD_zimbraPhoneticCompany, labelLocation:_LEFT_, width:250, visibilityChecks:[[ZaZimbraAdmin.isLanguage, "ja"]]},
                                    {ref:ZaAccount.A_company, type:_TEXTFIELD_, msgName:ZaMsg.NAD_company,label:ZaMsg.NAD_company, labelLocation:_LEFT_, width:250} ,
                                    {ref:ZaAccount.A_title,  type:_TEXTFIELD_, msgName:ZaMsg.NAD_title,label:ZaMsg.NAD_title, labelLocation:_LEFT_, width:250},
                                    {type:_DYNSELECT_, ref:ZaAccount.A_manager, dataFetcherClass:ZaSearch,
                                        dataFetcherMethod:ZaSearch.prototype.dynSelectSearch,
                                        dataFetcherTypes:[ZaSearch.ACCOUNTS, ZaSearch.RESOURCES, ZaSearch.DLS],
                                        dataFetcherAttrs:[ZaItem.A_zimbraId, ZaItem.A_cn, ZaAccount.A_name, ZaAccount.A_displayname, ZaAccount.A_mail],
                                        label:ZaMsg.NAD_manager,labelLocation:_LEFT_,
                                        width:"100%", inputWidth:"250px", editable:true, forceUpdate:true,
                                        choices:new XFormChoices([], XFormChoices.OBJECT_LIST, "name", "name"),
                                        visibilityChecks:[],enableDisableChecks:[],
                                        onChange: function(value, event, form){
                                            if (value instanceof ZaItem ) {
                                                this.setInstanceValue(value.name);
                                            } else {
                                                this.setInstanceValue(value);
                                            }
                                        },
                                        autoCompleteEnabled : true
                                    }
                                    /*,
                                    {ref:ZaAccount.A_orgUnit, type:_TEXTFIELD_, msgName:ZaMsg.NAD_orgUnit,label:ZaMsg.NAD_orgUnit, labelLocation:_LEFT_, width:250},
                                    {ref:ZaAccount.A_office, type:_TEXTFIELD_, msgName:ZaMsg.NAD_office,label:ZaMsg.NAD_office, labelLocation:_LEFT_, width:250}    */
                                ]
                            },
                            {type:_ZAWIZGROUP_,
                                items:ZaAccountXFormView.getAddressFormItemForDialog()
                            }
                        ]
                    };
        cases.push(case2);
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.ALIASES_TAB_ATTRS, ZaAccountXFormView.ALIASES_TAB_RIGHTS)) {
        ZaNewAccountXWizard.ALIASES_STEP = ++this.TAB_INDEX;
        this.stepChoices.push({value:ZaNewAccountXWizard.ALIASES_STEP, label:ZaMsg.TABT_Aliases});
        cases.push({type:_CASE_, tabGroupKey:ZaNewAccountXWizard.ALIASES_STEP, caseKey:ZaNewAccountXWizard.ALIASES_STEP, numCols:1,
                    items: [
                        {type:_OUTPUT_, value:ZaMsg.NAD_AccountAliases},
                        {ref:ZaAccount.A_zimbraMailAlias, type:_REPEAT_, label:null, repeatInstance:emptyAlias, showAddButton:true,
                            showRemoveButton:true,
                            addButtonLabel:ZaMsg.NAD_AddAlias,
                            showAddOnNextRow:true,
                            removeButtonLabel:ZaMsg.NAD_RemoveAlias,
                            removeButtonCSSStyle: "margin-left:50px;",
                            visibilityChecks:[
                                [ZaItem.hasWritePermission, ZaAccount.A_zimbraMailAlias]
                            ],
                            items: [
                                {ref:".", type:_EMAILADDR_, label:null, enableDisableChecks:[],
                                    visibilityChecks:[
                                        [ZaItem.hasWritePermission, ZaAccount.A_zimbraMailAlias]
                                    ]
                                }
                            ]
                        }
                    ]
                });
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.MEMBEROF_TAB_ATTRS, ZaAccountXFormView.MEMBEROF_TAB_RIGHTS)) {
        var directMemberOfHeaderList = new ZaAccountMemberOfsourceHeaderList(ZaAccountMemberOfsourceHeaderList.DIRECT);
        var indirectMemberOfHeaderList = new ZaAccountMemberOfsourceHeaderList(ZaAccountMemberOfsourceHeaderList.INDIRECT, 150);
        var nonMemberOfHeaderList = new ZaAccountMemberOfsourceHeaderList(ZaAccountMemberOfsourceHeaderList.NON);
        ZaNewAccountXWizard.MEMBEROF_STEP = ++this.TAB_INDEX;
        this.stepChoices.push({value:ZaNewAccountXWizard.MEMBEROF_STEP, label:ZaMsg.TABT_MemberOf});
        var memberofCase = {type:_CASE_, caseKey:ZaNewAccountXWizard.MEMBEROF_STEP, tabGroupKey:ZaNewAccountXWizard.MEMBEROF_STEP,
                            numCols:2, colSizes: ["50%","50%"], id:"memberof_step",
                            items: [
                                //layout rapper around the direct/indrect list
                                {type: _GROUP_, width: "98%", numCols: 1, //colSizes: ["auto", 20],
                                    items: [
                                        //direct member group
                                        {type:_ZALEFT_GROUPER_, numCols:1, width: "100%",
                                            label:ZaMsg.Account_DirectGroupLabel,
                                            containerCssStyle: "padding-top:5px;",
                                            items:[
                                                {ref: ZaAccount.A2_directMemberList, type: _S_DWT_LIST_, width: "98%", height: 208,
                                                    cssClass: "DLSource", widgetClass: ZaAccountMemberOfListView,
                                                    headerList: directMemberOfHeaderList, defaultColumnSortable: 0,
                                                    onSelection:ZaAccountXFormView.directMemberOfSelectionListener,
                                                    forceUpdate: true }    ,
                                                {type:_SPACER_, height:"5"},
                                                {type:_GROUP_, width:"100%", numCols:8, colSizes:[90,5,90, "auto",30,5, 30,5],
                                                    items:[
                                                        {type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonRemoveAll, width:90,
                                                            enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableAllButton,ZaAccount.A2_directMemberList]],
                                                            enableDisableChangeEventSources:[ZaAccount.A2_directMemberList],
                                                            onActivate:"ZaAccountMemberOfListView.removeAllGroups.call(this,event, ZaAccount.A2_directMemberList)"
                                                        },
                                                        {type:_CELLSPACER_, height:"100%"},
                                                        {type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonRemove, width:90, id:"removeButton",
                                                            enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableAddRemoveButton,ZaAccount.A2_directMemberList]],
                                                            enableDisableChangeEventSources:[ZaAccount.A2_directMemberListSelected],
                                                            onActivate:"ZaAccountMemberOfListView.removeGroups.call(this,event, ZaAccount.A2_directMemberList)"
                                                        },
                                                        {type:_CELLSPACER_,height:"100%"},
                                                        {type:_DWT_BUTTON_, label:"", width:30, id:"backButton", icon:"LeftArrow", disIcon:"LeftArrowDis",
                                                            onActivate:"ZaAccountMemberOfListView.backButtonHndlr.call(this,event, ZaAccount.A2_directMemberList)",
                                                            enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableBackButton,ZaAccount.A2_directMemberList]],
                                                            enableDisableChangeEventSources:[ZaAccount.A2_directMemberList +"_offset"]
                                                        },
                                                        {type:_CELLSPACER_, height:"100%"},
                                                        {type:_DWT_BUTTON_, label:"", width:30, id:"fwdButton", icon:"RightArrow", disIcon:"RightArrowDis",
                                                            onActivate:"ZaAccountMemberOfListView.fwdButtonHndlr.call(this,event, ZaAccount.A2_directMemberList)",
                                                            enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableForwardButton,ZaAccount.A2_directMemberList]],
                                                            enableDisableChangeEventSources:[ZaAccount.A2_directMemberList + "_more"]
                                                        },
                                                        {type:_CELLSPACER_, height:"100%"}
                                                    ]
                                                }
                                            ]
                                        },
                                        {type:_SPACER_, height:"5"},
                                        //indirect member group
                                        {type:_ZALEFT_GROUPER_, numCols:1,  width: "100%", label:ZaMsg.Account_IndirectGroupLabel,
                                            containerCssStyle: "padding-top:5px;",
                                            items:[
                                                {ref: ZaAccount.A2_indirectMemberList, type: _S_DWT_LIST_, width: "98%", height: 208,
                                                    cssClass: "DLSource", widgetClass: ZaAccountMemberOfListView,
                                                    headerList: indirectMemberOfHeaderList, defaultColumnSortable: 0,
                                                    onSelection:ZaAccountXFormView.indirectMemberOfSelectionListener,
                                                    forceUpdate: true }    ,
                                                {type:_SPACER_, height:"5"},
                                                {type:_GROUP_, width:"100%", numCols:5, colSizes:["auto",30,5,30,5],
                                                    items:[
                                                        {type:_CELLSPACER_, height:"100%"},
                                                        {type:_DWT_BUTTON_, label:"", width:30, id:"backButton", icon:"LeftArrow", disIcon:"LeftArrowDis",
                                                            onActivate:"ZaAccountMemberOfListView.backButtonHndlr.call(this,event, ZaAccount.A2_indirectMemberList)",
                                                            enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableBackButton,ZaAccount.A2_indirectMemberList]],
                                                            enableDisableChangeEventSources:[ZaAccount.A2_indirectMemberList + "_offset"]
                                                        },
                                                        {type:_CELLSPACER_, height:"100%"},
                                                        {type:_DWT_BUTTON_, label:"", width:30, id:"fwdButton", icon:"RightArrow", disIcon:"RightArrowDis",
                                                            onActivate:"ZaAccountMemberOfListView.fwdButtonHndlr.call(this,event, ZaAccount.A2_indirectMemberList)",
                                                            enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableForwardButton,ZaAccount.A2_indirectMemberList]],
                                                            enableDisableChangeEventSources:[ZaAccount.A2_indirectMemberList + "_more"]
                                                        },
                                                        {type:_CELLSPACER_, height:"100%"}
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },

                                {type: _GROUP_, width: "98%", numCols: 1, //colSizes: ["auto", 20],
                                items: [
                                    {type:_ZARIGHT_GROUPER_, numCols:1, width: "100%", label:ZaMsg.Account_NonGroupLabel,
                                        containerCssStyle: "padding-top:5px;",
                                        items:[
                                            {type:_GROUP_, numCols:3, colSizes:["40", "auto", "80"], width:"98%",
                                               items:[
                                                    {ref:"query", type:_TEXTFIELD_, width:"100%", cssClass:"admin_xform_name_input",
                                                        nowrap:false,labelWrap:true,
                                                        label:ZaMsg.DLXV_LabelFind,
                                                        visibilityChecks:[],enableDisableChecks:[],
                                                        elementChanged: function(elementValue,instanceValue, event) {
                                                          var charCode = event.charCode;
                                                          if (charCode == 13 || charCode == 3) {
                                                              ZaAccountMemberOfListView.prototype.srchButtonHndlr.call(this);
                                                          } else {
                                                              this.getForm().itemChanged(this, elementValue, event);
                                                          }
                                                        }
                                                    },
                                                    {type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonSearch, width:80,
                                                       onActivate:ZaAccountMemberOfListView.prototype.srchButtonHndlr
                                                    },
                                                    {ref: ZaAccount.A2_showSameDomain, type: _WIZ_CHECKBOX_, labelLocation:_RIGHT_,align:_RIGHT_, subLabel:"",
                                                            label:null,labelLocation:_NONE_, trueValue:"TRUE", falseValue:"FALSE",
                                                            visibilityChecks:[]
                                                    },
                                                    {type:_OUTPUT_, value:ZaMsg.NAD_SearchSameDomain,colSpan:2}
                                                ]
                                            },

                                            {ref: ZaAccount.A2_nonMemberList, type: _S_DWT_LIST_, width: "98%", height: 460,
                                                cssClass: "DLSource", widgetClass: ZaAccountMemberOfListView,
                                                headerList: nonMemberOfHeaderList, defaultColumnSortable: 0,
                                                onSelection:ZaAccountXFormView.nonMemberOfSelectionListener,
                                                forceUpdate: true },

                                            {type:_SPACER_, height:"5"},
                                            //add action buttons
                                            {type:_GROUP_, width:"100%", numCols:8, colSizes:[90,5,90,"auto",30,5,30,5],
                                                items: [
                                                    {type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonAddFromList, width:90,
                                                        enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableAddRemoveButton,ZaAccount.A2_nonMemberList]],
                                                        enableDisableChangeEventSources:[ZaAccount.A2_nonMemberListSelected],
                                                        onActivate:"ZaAccountMemberOfListView.addGroups.call(this,event, ZaAccount.A2_nonMemberList)"
                                                    },
                                                    {type:_CELLSPACER_, height:"100%"},
                                                    {type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonAddAll, width:90,
                                                        enableDisableChangeEventSources:[ZaAccount.A2_nonMemberList],
                                                        enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableAllButton,ZaAccount.A2_nonMemberList]],
                                                        onActivate:"ZaAccountMemberOfListView.addAllGroups.call(this,event, ZaAccount.A2_nonMemberList)"
                                                    },
                                                    {type:_CELLSPACER_, height:"100%"},
                                                    {type:_DWT_BUTTON_, label:"", width:30, id:"backButton", icon:"LeftArrow", disIcon:"LeftArrowDis",
                                                        enableDisableChangeEventSources:[ZaAccount.A2_nonMemberList + "_offset"],
                                                        enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableBackButton,ZaAccount.A2_nonMemberList]],
                                                        onActivate:"ZaAccountMemberOfListView.backButtonHndlr.call(this,event, ZaAccount.A2_nonMemberList)"
                                                    },
                                                    {type:_CELLSPACER_, height:"100%"},
                                                    {type:_DWT_BUTTON_, label:"", width:30, id:"fwdButton", icon:"RightArrow", disIcon:"RightArrowDis",
                                                        enableDisableChangeEventSources:[ZaAccount.A2_nonMemberList + "_more"],
                                                        enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableForwardButton,ZaAccount.A2_nonMemberList]],
                                                        onActivate:"ZaAccountMemberOfListView.fwdButtonHndlr.call(this,event, ZaAccount.A2_nonMemberList)"
                                                    },
                                                    {type:_CELLSPACER_, height:"100%"}
                                                  ]
                                            }
                                        ]
                                    }
                                 ]
                                },
                                {type: _GROUP_, width: "100%", items: [
                                        {type:_CELLSPACER_}
                                    ]
                                }
                            ]
                };
        cases.push(memberofCase);
    }
    var zimbraFeatureMailForwardingEnabledItem =
                {ref:ZaAccount.A_zimbraFeatureMailForwardingEnabled,
                    msgName:ZaMsg.LBL_zimbraFeatureMailForwardingEnabled,
                    trueValue:"TRUE", falseValue:"FALSE"
                }


    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.FORWARDING_TAB_ATTRS, ZaAccountXFormView.FORWARDING_TAB_RIGHTS)) {
        ZaNewAccountXWizard.FORWARDING_STEP = ++this.TAB_INDEX;
        this.stepChoices.push({value:ZaNewAccountXWizard.FORWARDING_STEP, label:ZaMsg.TABT_Forwarding});

        cases.push({type:_CASE_, caseKey:ZaNewAccountXWizard.FORWARDING_STEP, tabGroupKey:ZaNewAccountXWizard.FORWARDING_STEP, numCols:2,colSizes:["250px","auto"],
                    id:"account_form_forwarding_step",
                    items: [
                        {
                            ref:ZaAccount.A_zimbraFeatureMailForwardingEnabled,
                            resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                            type:_SUPER_WIZ_CHECKBOX_, colSpan:2,
                            checkBoxLabel:ZaMsg.LBL_zimbraFeatureMailForwardingEnabled,
                            trueValue:"TRUE", falseValue:"FALSE",
                            colSizes:["250px","250px","auto"]
                        },
                        {ref:ZaAccount.A_zimbraPrefMailLocalDeliveryDisabled,
                            type:_WIZ_CHECKBOX_,
                            msgName:ZaMsg.LBL_zimbraPrefMailLocalDeliveryDisabled,
                            label:ZaMsg.LBL_zimbraPrefMailLocalDeliveryDisabled,
                            trueValue:"TRUE", falseValue:"FALSE"
                        },
                        {ref:ZaAccount.A_zimbraPrefMailForwardingAddress,width:250,
                            labelCssClass:"xform_label",
                            type:_TEXTFIELD_, msgName:ZaMsg.LBL_zimbraPrefMailForwardingAddress,
                            label:ZaMsg.LBL_zimbraPrefMailForwardingAddress, labelLocation:_LEFT_,
                            cssClass:"admin_xform_name_input",
                            nowrap:false,labelWrap:true,
                            enableDisableChecks:[ZaAccountXFormView.isMailForwardingEnabled],
                            enableDisableChangeEventSources:[ZaAccount.A_zimbraFeatureMailForwardingEnabled, ZaAccount.A_COSId]
                        },
                        {type:_SEPARATOR_,colSpan:2},
                        {type: _DWT_ALERT_, colSpan: 2,
                                            containerCssStyle: "padding:0 10px 10px;width:100%;",
                                            style: DwtAlert.WARNING,
                                            iconVisible: true,
                                            content: ZaMsg.Alert_Bouncing_Reveal_Hidden_Adds
                                        },
                        {ref:ZaAccount.A_zimbraMailForwardingAddress, type:_REPEAT_,
                            label:ZaMsg.NAD_EditFwdGroup, labelLocation:_LEFT_,labelCssClass:"xform_label",
                            repeatInstance:emptyAlias,
                            showAddButton:true, showRemoveButton:true,
                            addButtonLabel:ZaMsg.NAD_AddAddress,
                            showAddOnNextRow:true,
                            removeButtonLabel:ZaMsg.NAD_RemoveAddress,
                            nowrap:false,labelWrap:true,
                            items: [
                                {ref:".", type:_TEXTFIELD_, label:null, width:250, enableDisableChecks:[],
                                visibilityChecks:[[ZaItem.hasWritePermission, ZaAccount.A_zimbraMailForwardingAddress]]}
                            ]
                        },
                        {ref:ZaAccount.A_zimbraPrefCalendarForwardInvitesTo, type:_REPEAT_,
                            label:ZaMsg.zimbraPrefCalendarForwardInvitesTo, labelLocation:_LEFT_,labelCssClass:"xform_label",
                            repeatInstance:emptyAlias,
                            showAddButton:true, showRemoveButton:true,
                            addButtonLabel:ZaMsg.NAD_AddAddress,
                            showAddOnNextRow:true,
                            removeButtonLabel:ZaMsg.NAD_RemoveAddress,
                            nowrap:false,labelWrap:true,
                            items: [
                                {ref:".", type:_TEXTFIELD_, label:null, width:250, enableDisableChecks:[],
                                visibilityChecks:[[ZaItem.hasWritePermission, ZaAccount.A_zimbraPrefCalendarForwardInvitesTo]]}
                            ]
                        }
                    ]
                });
    };

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.FEATURE_TAB_ATTRS, ZaAccountXFormView.FEATURE_TAB_RIGHTS) &&
        !ZaSettings.isOctopus()) {
        ZaNewAccountXWizard.FEATURES_STEP = ++this.TAB_INDEX;
        this.stepChoices.push({value:ZaNewAccountXWizard.FEATURES_STEP, label:ZaMsg.TABT_Features});
        var featuresCase = {type:_CASE_,caseKey:ZaNewAccountXWizard.FEATURES_STEP, tabGroupKey:ZaNewAccountXWizard.FEATURES_STEP,id:"account_form_features_step",
                numCols:1, width:"100%",
                items: [
                    { type: _DWT_ALERT_,
                      containerCssStyle: "padding-top:20px;width:400px;",
                      style: DwtAlert.WARNING,
                      iconVisible: false,
                      content: ZaMsg.NAD_CheckFeaturesInfo
                    }
                ]
        };
        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_zimbraFeatureMailEnabled,ZaAccount.A_zimbraFeatureContactsEnabled,
            ZaAccount.A_zimbraFeatureCalendarEnabled,ZaAccount.A_zimbraFeatureTasksEnabled,ZaAccount.A_zimbraFeatureTasksEnabled,
            /*ZaAccount.A_zimbraFeatureNotebookEnabled, */ ZaAccount.A_zimbraFeatureBriefcasesEnabled,
            ZaAccount.A_zimbraFeatureOptionsEnabled],[])) {
            featuresCase.items.push({type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_zimbraMajorFeature, id:"account_wiz_features_major", colSizes:["auto"],numCols:1,
                        items:[
                            {ref:ZaAccount.A_zimbraFeatureMailEnabled,
                                type:_SUPER_WIZ_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                msgName:ZaMsg.LBL_zimbraFeatureMailEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureMailEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureContactsEnabled,type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureContactsEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureContactsEnabled, labelLocation:_LEFT_, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureCalendarEnabled,
                                type:_SUPER_WIZ_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                msgName:ZaMsg.LBL_zimbraFeatureCalendarEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureCalendarEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureTasksEnabled,
                                type:_SUPER_WIZ_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                msgName:ZaMsg.LBL_zimbraFeatureTaskEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureTaskEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"},
                            //{ref:ZaAccount.A_zimbraFeatureNotebookEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureNotebookEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureNotebookEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureBriefcasesEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureBriefcasesEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureBriefcasesEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureOptionsEnabled,
                                type:_SUPER_WIZ_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                msgName:ZaMsg.LBL_zimbraFeatureOptionsEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureOptionsEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"}
                        ]
                    });
        };
        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[
            ZaAccount.A_zimbraFeatureTaggingEnabled,
            ZaAccount.A_zimbraFeatureSharingEnabled,
            ZaAccount.A_zimbraFeatureChangePasswordEnabled,
            ZaAccount.A_zimbraFeatureSkinChangeEnabled,
            ZaAccount.A_zimbraFeatureManageZimlets,
            //ZaAccount.A_zimbraFeatureHtmlComposeEnabled,
            //ZaAccount.A_zimbraFeatureShortcutAliasesEnabled,
            ZaAccount.A_zimbraFeatureGalEnabled,
            ZaAccount.A_zimbraFeatureMAPIConnectorEnabled,
            ZaAccount.A_zimbraFeatureEwsEnabled,
            ZaAccount.A_zimbraFeatureTouchClientEnabled,
            ZaAccount.A_zimbraFeatureWebClientOfflineAccessEnabled,
            ZaAccount.A_zimbraFeatureGalAutoCompleteEnabled,
            ZaAccount.A_zimbraFeatureImportFolderEnabled,
            ZaAccount.A_zimbraFeatureExportFolderEnabled,
            ZaAccount.A_zimbraDumpsterEnabled
        ],[])) {
            featuresCase.items.push({type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_zimbraGeneralFeature, id:"account_wiz_features_general",
                         colSizes:["auto"],numCols:1,
                        items:[
                            {ref:ZaAccount.A_zimbraFeatureTaggingEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureTaggingEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureTaggingEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureSharingEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureSharingEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureSharingEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraExternalSharingEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraExternalSharingEnabled,checkBoxLabel:ZaMsg.LBL_zimbraExternalSharingEnabled,trueValue:"TRUE", falseValue:"FALSE",
                                visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaAccount.A_zimbraFeatureSharingEnabled, "TRUE"]], visibilityChangeEventSources:[ZaAccount.A_zimbraFeatureSharingEnabled]
                            },
                            {ref:ZaAccount.A_zimbraPublicSharingEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPublicSharingEnabled,checkBoxLabel:ZaMsg.LBL_zimbraPublicSharingEnabled,trueValue:"TRUE", falseValue:"FALSE",
                                visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaAccount.A_zimbraFeatureSharingEnabled, "TRUE"]], visibilityChangeEventSources:[ZaAccount.A_zimbraFeatureSharingEnabled]
                            },
                            {ref:ZaAccount.A_zimbraFeatureChangePasswordEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureChangePasswordEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureChangePasswordEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureSkinChangeEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureSkinChangeEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureSkinChangeEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureManageZimlets, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureManageZimlets,checkBoxLabel:ZaMsg.LBL_zimbraFeatureManageZimlets, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureHtmlComposeEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                msgName:ZaMsg.LBL_zimbraFeatureHtmlComposeEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureHtmlComposeEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"},
                            /*{ref:ZaAccount.A_zimbraFeatureShortcutAliasesEnabled,
                                type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                msgName:ZaMsg.LBL_zimbraFeatureShortcutAliasesEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureShortcutAliasesEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"},*/
                            {ref:ZaAccount.A_zimbraFeatureGalEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureGalEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureGalEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureMAPIConnectorEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureMAPIConnectorEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureMAPIConnectorEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureEwsEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureEwsEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureEwsEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureTouchClientEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureTouchClientEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureTouchClientEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureWebClientOfflineAccessEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureWebClientOfflineAccessEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureWebClientOfflineAccessEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureGalAutoCompleteEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureGalAutoCompleteEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureGalAutoCompleteEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureImportFolderEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureImportFolderEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureImportFolderEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureExportFolderEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureExportFolderEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureExportFolderEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraDumpsterEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.MSG_zimbraDumpsterEnabled,checkBoxLabel:ZaMsg.LBL_zimbraDumpsterEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraDumpsterPurgeEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.MSG_zimbraDumpsterPurgeEnabled,checkBoxLabel:ZaMsg.LBL_zimbraDumpsterPurgeEnabled,  trueValue:"TRUE", falseValue:"FALSE",
                                visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaAccount.A_zimbraDumpsterEnabled, "TRUE"]], visibilityChangeEventSources:[ZaAccount.A_zimbraDumpsterEnabled]
                            }
                        ]
                    });

        };
        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_zimbraFeatureMailPriorityEnabled,ZaAccount.A_zimbraFeatureFlaggingEnabled,
            ZaAccount.A_zimbraImapEnabled,ZaAccount.A_zimbraPop3Enabled,
            ZaAccount.A_zimbraFeatureWebClientEnabled,
            ZaAccount.A_zimbraFeatureImapDataSourceEnabled,
            ZaAccount.A_zimbraFeaturePop3DataSourceEnabled,ZaAccount.A_zimbraFeatureConversationsEnabled,ZaAccount.A_zimbraFeatureFiltersEnabled,
            ZaAccount.A_zimbraFeatureOutOfOfficeReplyEnabled,ZaAccount.A_zimbraFeatureNewMailNotificationEnabled,
            ZaAccount.A_zimbraFeatureMailSendLaterEnabled,ZaAccount.A_zimbraFeatureIdentitiesEnabled,ZaAccount.A_zimbraFeatureReadReceiptsEnabled],[])) {
            featuresCase.items.push({type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_zimbraMailFeature, id:"account_wiz_features_mail",
                        colSizes:["auto"],numCols:1,
                         enableDisableChecks:[ZaAccountXFormView.isMailFeatureEnabled],
                        enableDisableChangeEventSources:[ZaAccount.A_zimbraFeatureMailEnabled, ZaAccount.A_COSId],
                        items:[
                            {ref:ZaAccount.A_zimbraFeatureMailPriorityEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureMailPriorityEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureMailPriorityEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureFlaggingEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureFlaggingEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureFlaggingEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraImapEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraImapEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraImapEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraPop3Enabled, type:_SUPER_WIZ_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPop3Enabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraPop3Enabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureWebClientEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureWebClientEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureWebClientEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureImapDataSourceEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraExternalImapEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraExternalImapEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeaturePop3DataSourceEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraExternalPop3Enabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraExternalPop3Enabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureMailSendLaterEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureMailSendLaterEnabled,
                                                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureMailSendLaterEnabled,  trueValue:"TRUE", falseValue:"FALSE"},

                            {ref:ZaAccount.A_zimbraFeatureConversationsEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureConversationsEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureConversationsEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureFiltersEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureFiltersEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureFiltersEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureOutOfOfficeReplyEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureOutOfOfficeReplyEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureOutOfOfficeReplyEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureNewMailNotificationEnabled,
                                type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                msgName:ZaMsg.LBL_zimbraFeatureNewMailNotificationEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureNewMailNotificationEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureIdentitiesEnabled,
                                type:_SUPER_WIZ_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                msgName:ZaMsg.LBL_zimbraFeatureIdentitiesEnabled,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureIdentitiesEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"
                            },
                            {ref:ZaAccount.A_zimbraFeatureReadReceiptsEnabled,
                                type:_SUPER_WIZ_CHECKBOX_,
                                resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                checkBoxLabel:ZaMsg.LBL_zimbraFeatureReadReceiptsEnabled,
                                trueValue:"TRUE", falseValue:"FALSE"
                            }
                        ]
                    });

        };
        if (ZAWizTopGrouper_XFormItem.isGroupVisible(
                entry,
                [
                    ZaAccount.A_zimbraFeatureContactsEnabled,
                    ZaAccount.A_zimbraFeatureDistributionListFolderEnabled
                ],
                []
            )
            ) {
            featuresCase.items.push(
                {
                    type: _ZAWIZ_TOP_GROUPER_,
                    label: ZaMsg.NAD_zimbraContactFeature,
                    id: "account_wiz_features_contact",
                    enableDisableChecks: [ZaNewAccountXWizard.isContactsFeatureEnabled],
                    enableDisableChangeEventSources: [
                        ZaAccount.A_zimbraFeatureContactsEnabled,
                        ZaAccount.A_COSId
                    ],
                    items: [
                        {
                            ref: ZaAccount.A_zimbraFeatureDistributionListFolderEnabled,
                            type: _SUPER_WIZ_CHECKBOX_,
                            resetToSuperLabel: ZaMsg.NAD_ResetToCOS,
                            msgName: ZaMsg.MSG_zimbraFeatureDistributionListFolderEnabled,
                            checkBoxLabel: ZaMsg.LBL_zimbraFeatureDistributionListFolderEnabled,
                            trueValue: "TRUE",
                            falseValue: "FALSE"
                        }
                    ]
                }
            );
        }
        if  (ZAWizTopGrouper_XFormItem.isGroupVisible(
                    entry,
                    [ZaAccount.A_zimbraFeatureGroupCalendarEnabled,
                        //ZaAccount.A_zimbraFeatureFreeBusyViewEnabled,
                        ZaAccount.A_zimbraFeatureCalendarReminderDeviceEmailEnabled
                    ],
                    []
                )
            )
        {
            featuresCase.items.push(
                {type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_zimbraCalendarFeature, id:"account_wiz_features_calendar",
                     colSizes:["auto"],numCols:1,
                     enableDisableChecks:[ZaAccountXFormView.isCalendarFeatureEnabled],
                    enableDisableChangeEventSources:[ZaAccount.A_zimbraFeatureCalendarEnabled,ZaAccount.A_COSId],
                    items:[
                        {ref:ZaAccount.A_zimbraFeatureGroupCalendarEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureGroupCalendarEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureGroupCalendarEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                        //{ref:ZaAccount.A_zimbraFeatureFreeBusyViewEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureFreeBusyViewEnabled, checkBoxLabel:ZaMsg.LBL_zimbraFeatureFreeBusyViewEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaAccount.A_zimbraFeatureCalendarReminderDeviceEmailEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureCalendarReminderDeviceEmailEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureCalendarReminderDeviceEmailEnabled, trueValue:"TRUE", falseValue:"FALSE"}
                    ]
                }
            );
        };

        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ //ZaAccount.A_zimbraFeatureAdvancedSearchEnabled,
            ZaAccount.A_zimbraFeatureAdvancedSearchEnabled,
            ZaAccount.A_zimbraFeatureSavedSearchesEnabled,
            ZaAccount.A_zimbraFeatureInitialSearchPreferenceEnabled,
            ZaAccount.A_zimbraFeaturePeopleSearchEnabled
            ],[])) {
            featuresCase.items.push(
                {type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_zimbraSearchFeature, id:"account_wiz_features_search",
                     colSizes:["auto"],numCols:1,
                        items:[
                            {ref:ZaAccount.A_zimbraFeatureAdvancedSearchEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureAdvancedSearchEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureAdvancedSearchEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureSavedSearchesEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureSavedSearchesEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureSavedSearchesEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeatureInitialSearchPreferenceEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeatureInitialSearchPreferenceEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeatureInitialSearchPreferenceEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                            {ref:ZaAccount.A_zimbraFeaturePeopleSearchEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraFeaturePeopleSearchEnabled,checkBoxLabel:ZaMsg.LBL_zimbraFeaturePeopleSearchEnabled, trueValue:"TRUE", falseValue:"FALSE"}
                        ]
                }
            );
        };
        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_zimbraFeatureSMIMEEnabled],[])) {
                 featuresCase.items.push(
                        {type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_zimbraSMIMEFeature, id:"account_wiz_features_smime",
                                colSizes:["auto"],numCols:1,
                                items:[
                                    {ref:ZaAccount.A_zimbraFeatureSMIMEEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                        msgName:ZaMsg.LBL_zimbraFeatureSMIMEEnabled,
                                        checkBoxLabel:ZaMsg.LBL_zimbraFeatureSMIMEEnabled,
                                        trueValue:"TRUE", falseValue:"FALSE"}
                                ]
                        }
            );
        };

        cases.push(featuresCase);
    }



    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.PREFERENCES_TAB_ATTRS, ZaAccountXFormView.PREFERENCES_TAB_RIGHTS)) {
        ZaNewAccountXWizard.PREFS_STEP = ++this.TAB_INDEX;
        this.stepChoices.push({value:ZaNewAccountXWizard.PREFS_STEP, label:ZaMsg.TABT_Preferences});

        var prefItems = [ ];
        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_zimbraPrefImapSearchFoldersEnabled,ZaAccount.A_zimbraPrefShowSearchString,
            ZaAccount.A_zimbraPrefUseKeyboardShortcuts,ZaAccount.A_zimbraPrefMailInitialSearch,
            ZaAccount.A_zimbraPrefWarnOnExit,ZaAccount.A_zimbraPrefAdminConsoleWarnOnExit, ZaAccount.A_zimbraPrefShowSelectionCheckbox,
            ZaAccount.A_zimbraJunkMessagesIndexingEnabled,ZaAccount.A_zimbraPrefLocale],[])) {


            prefItems.push({type:_ZAWIZ_TOP_GROUPER_, id:"account_prefs_general",
                            label:ZaMsg.NAD_GeneralOptions,
                            items :[
                                    {ref:ZaAccount.A_zimbraPrefImapSearchFoldersEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefImapSearchFoldersEnabled,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefImapSearchFoldersEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                                    {ref:ZaAccount.A_zimbraPrefShowSearchString, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefShowSearchString,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefShowSearchString,trueValue:"TRUE", falseValue:"FALSE"},
                                    {ref:ZaAccount.A_zimbraPrefUseKeyboardShortcuts, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,checkBoxLabel:ZaMsg.LBL_zimbraPrefUseKeyboardShortcuts,
                                        trueValue:"TRUE", falseValue:"FALSE"},
                                    {ref:ZaAccount.A_zimbraPrefClientType, type:_SUPERWIZ_SELECT1_,
                                        colSizes:["300px", "*"],
                                        msgName:ZaMsg.MSG_zimbraPrefClientType,
                                        label:ZaMsg.LBL_zimbraPrefClientType, labelLocation:_LEFT_,
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                    },
                                    {ref:ZaAccount.A_zimbraPrefMailInitialSearch, type:_SUPERWIZ_TEXTFIELD_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        msgName:ZaMsg.LBL_zimbraPrefMailInitialSearch,
                                        txtBoxLabel:ZaMsg.LBL_zimbraPrefMailInitialSearch,
                                        labelLocation:_LEFT_,
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                    },
                                    {ref:ZaAccount.A_zimbraPrefWarnOnExit, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,checkBoxLabel:ZaMsg.LBL_zimbraPrefWarnOnExit,
                                        labelWrap: true,trueValue:"TRUE", falseValue:"FALSE"},
                                    {ref:ZaAccount.A_zimbraPrefAdminConsoleWarnOnExit, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,checkBoxLabel:ZabMsg.LBL_zimbraPrefAdminConsoleWarnOnExit,
                                        labelWrap: true,trueValue:"TRUE", falseValue:"FALSE"},
                                    {ref:ZaAccount.A_zimbraPrefShowSelectionCheckbox, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,checkBoxLabel:ZaMsg.LBL_zimbraPrefShowSelectionCheckbox,
                                        trueValue:"TRUE", falseValue:"FALSE"},
                                    {ref:ZaAccount.A_zimbraJunkMessagesIndexingEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,checkBoxLabel:ZaMsg.LBL_zimbraJunkMessagesIndexingEnabled,
                                        trueValue:"TRUE", falseValue:"FALSE"}    ,
                                    {ref:ZaAccount.A_zimbraPrefLocale, type:_SUPERWIZ_SELECT1_, msgName:ZaMsg.LBL_zimbraPrefMailLocale,
                                        choices: ZaSettings.getLocaleChoices(),
                                        colSizes:["300px", "*"],
                                        label:ZaMsg.LBL_zimbraPrefLocale, labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS}
                                    ]
                        });
        }
        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_zimbraPrefMailItemsPerPage,ZaAccount.A_zimbraMaxMailItemsPerPage],[])) {
            prefItems.push({type:_ZAWIZ_TOP_GROUPER_, id:"account_prefs_standard_client",borderCssClass:"LowPaddedTopGrouperBorder",
                            label:ZaMsg.NAD_MailOptionsStandardClient,
                            items :[
                                {ref:ZaAccount.A_zimbraMaxMailItemsPerPage, type:_SUPERWIZ_SELECT1_,
                                    colSizes:["300px", "*"],
                                    editable:true,inputSize:4,choices:[10,25,50,100,250,500,1000],
                                    msgName:ZaMsg.MSG_zimbraMaxMailItemsPerPage,label:ZaMsg.LBL_zimbraMaxMailItemsPerPage,
                                    labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, valueLabel:null
                                },
                                {ref:ZaAccount.A_zimbraPrefMailItemsPerPage, type:_SUPERWIZ_SELECT1_,
                                    colSizes:["300px", "*"],
                                    msgName:ZaMsg.MSG_zimbraPrefMailItemsPerPage,label:ZaMsg.LBL_zimbraPrefMailItemsPerPage,
                                    labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, valueLabel:null
                                }
                            ]
            });
            prefItems.push({type: _SPACER_ , height: "10px" });
        }
        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_zimbraPrefMessageViewHtmlPreferred,ZaAccount.A_zimbraPrefDisplayExternalImages,ZaAccount.A_zimbraPrefMailToasterEnabled,
            ZaAccount.A_zimbraPrefMessageIdDedupingEnabled,
            ZaAccount.A_zimbraPrefGroupMailBy,ZaAccount.A_zimbraPrefMailDefaultCharset,ZaAccount.A_zimbraPrefItemsPerVirtualPage],[])) {

            prefItems.push({type:_ZAWIZ_TOP_GROUPER_, id:"account_prefs_mail_general",
                            label:ZaMsg.NAD_MailOptions,
                            items: [
                                     {ref:ZaAccount.A_zimbraPrefMessageViewHtmlPreferred,
                                        type:_SUPER_WIZ_CHECKBOX_, colSpan:2,
                                        colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                        msgName:ZaMsg.LBL_zimbraPrefMessageViewHtmlPreferred,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefMessageViewHtmlPreferred,
                                        trueValue:"TRUE", falseValue:"FALSE"},
                                    {ref:ZaAccount.A_zimbraPrefDisplayExternalImages,
                                        type:_SUPER_WIZ_CHECKBOX_, colSpan:2,
                                        colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                        msgName:ZaMsg.LBL_zimbraPrefDisplayExternalImages,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefDisplayExternalImages,
                                        trueValue:"TRUE", falseValue:"FALSE"},
                                    {ref:ZaAccount.A_zimbraPrefGroupMailBy, type:_SUPERWIZ_SELECT1_,
                                        colSizes:["300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefGroupMailBy,
                                        label:ZaMsg.LBL_zimbraPrefGroupMailBy, labelLocation:_LEFT_
                                    },
                                    {ref:ZaAccount.A_zimbraPrefMailDefaultCharset, type:_SUPERWIZ_SELECT1_,
                                        colSizes:["300px", "*"],
                                        msgName:ZaMsg.LBL_zimbraPrefMailDefaultCharset,
                                        label:ZaMsg.LBL_zimbraPrefMailDefaultCharset, labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS},
                                    {ref:ZaAccount.A_zimbraPrefMailToasterEnabled,
                                        type:_SUPER_WIZ_CHECKBOX_, colSpan:2,
                                        colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                        msgName:ZaMsg.MSG_zimbraPrefMailToasterEnabled,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefMailToasterEnabled,
                                        trueValue:"TRUE", falseValue:"FALSE"},
                                    {ref:ZaAccount.A_zimbraPrefMessageIdDedupingEnabled,
                                        type:_SUPER_WIZ_CHECKBOX_, colSpan:2,
                                        colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                        msgName:ZaMsg.MSG_zimbraPrefMessageIdDedupingEnabled,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefMessageIdDedupingEnabled,
                                        trueValue:"TRUE", falseValue:"FALSE"},
{ref:ZaAccount.A_zimbraPrefItemsPerVirtualPage,
         type:_SUPERWIZ_TEXTFIELD_,
         colSizes:["200px", "*"],    colSpan:2,nowrap:false,labelWrap:true,
         resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
         msgName:ZaMsg.LBL_zimbraPrefItemsPerVirtualPage,
         txtBoxLabel:ZaMsg.LBL_zimbraPrefItemsPerVirtualPage

}

                                ]
                        });
        }

        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_zimbraPrefMailPollingInterval,ZaAccount.A_zimbraMailMinPollingInterval,
            ZaAccount.A_zimbraPrefNewMailNotificationEnabled,ZaAccount.A_zimbraPrefNewMailNotificationAddress,ZaAccount.A_zimbraPrefOutOfOfficeReplyEnabled,
            ZaAccount.A_zimbraPrefOutOfOfficeReplyEnabled,ZaAccount.A_zimbraPrefOutOfOfficeCacheDuration,
            ZaAccount.A_zimbraPrefOutOfOfficeReply,ZaAccount.A_zimbraPrefReadReceiptsToAddress,ZaAccount.A_zimbraPrefMailSendReadReceipts],[])) {
            prefItems.push(
                        {type:_ZAWIZ_TOP_GROUPER_, id:"account_prefs_mail_receiving",
                            label:ZaMsg.NAD_MailOptionsReceiving,
                            items :[
                                {ref:ZaAccount.A_zimbraPrefMailPollingInterval, type:_SUPERWIZ_SELECT1_,
                                    colSizes:["300px","*"],
                                    msgName:ZaMsg.MSG_zimbraPrefMailPollingInterval,
                                    label:ZaMsg.LBL_zimbraPrefMailPollingInterval,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    onChange:ZaAccountXFormView.validatePollingInterval,
                                    nowrap:false,labelWrap:true
                                },
                                {ref:ZaAccount.A_zimbraMailMinPollingInterval,
                                    type:_SUPERWIZ_LIFETIME_, colSizes:["200px","130px","170px","*"],
                                    msgName:ZaMsg.MSG_zimbraMailMinPollingInterval,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailMinPollingInterval,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    onChange:ZaAccountXFormView.validatePollingInterval,
                                    colSpan:2,nowrap:false,labelWrap:true
                                },
                                {ref:ZaAccount.A_zimbraPrefNewMailNotificationEnabled,
                                    type:_WIZ_CHECKBOX_,
                                    msgName:ZaMsg.LBL_zimbraPrefNewMailNotificationEnabled,
                                    label:ZaMsg.LBL_zimbraPrefNewMailNotificationEnabled,
                                    trueValue:"TRUE", falseValue:"FALSE"
                                },
                                {ref:ZaAccount.A_zimbraPrefNewMailNotificationAddress, type:_TEXTFIELD_,
                                    msgName:ZaMsg.MSG_zimbraPrefNewMailNotificationAddress,
                                    label:ZaMsg.LBL_zimbraPrefNewMailNotificationAddress,
                                    labelLocation:_LEFT_,
                                    enableDisableChecks:[ZaAccountXFormView.isMailNotificationAddressEnabled],
                                    enableDisableChangeEventSources:[ZaAccount.A_zimbraPrefNewMailNotificationEnabled]
                                },
                                {ref:ZaAccount.A_zimbraPrefOutOfOfficeReplyEnabled,
                                    type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraPrefOutOfOfficeReplyEnabled,label:ZaMsg.LBL_zimbraPrefOutOfOfficeReplyEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefOutOfOfficeCacheDuration,
                                    type:_SUPERWIZ_LIFETIME_, colSizes:["200px","130px","170px","*"],
                                    msgName:ZaMsg.LBL_zimbraPrefOutOfOfficeCacheDuration,
                                    txtBoxLabel:ZaMsg.LBL_zimbraPrefOutOfOfficeCacheDuration,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    colSpan:2,nowrap:false,labelWrap:true
                                },
                                {ref:ZaAccount.A_zimbraPrefOutOfOfficeReply, type:_TEXTAREA_,
                                    msgName:ZaMsg.LBL_zimbraPrefOutOfOfficeReply,
                                    label:ZaMsg.LBL_zimbraPrefOutOfOfficeReply,
                                    labelLocation:_LEFT_, labelCssStyle:"vertical-align:top;", width:"30em",
                                    enableDisableChecks:[ZaAccountXFormView.isOutOfOfficeReplyEnabled],
                                    enableDisableChangeEventSources:[ZaAccount.A_zimbraPrefOutOfOfficeReplyEnabled]
                                },
                                {ref:ZaAccount.A_zimbraPrefMailSendReadReceipts,
                                    type:_SUPERWIZ_SELECT1_,
                                    colSizes:["300px", "*"],
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    label:ZaMsg.LBL_zimbraPrefMailSendReadReceipts,
                                    nowrap:false,labelWrap:true,
                                    enableDisableChecks:[[XForm.checkInstanceValue,ZaAccount.A_zimbraFeatureReadReceiptsEnabled,"TRUE"],
                                        [ZaItem.hasWritePermission,ZaAccount.A_zimbraPrefMailSendReadReceipts]],
                                    enableDisableChangeEventSources:[ZaAccount.A_zimbraFeatureReadReceiptsEnabled]
                                },
                                {ref:ZaAccount.A_zimbraPrefReadReceiptsToAddress, type:_TEXTFIELD_,
                                    label:ZaMsg.LBL_zimbraPrefReadReceiptsToAddress,
                                    nowrap:false,labelWrap:true,
                                    msgName:ZaMsg.LBL_zimbraPrefReadReceiptsToAddress,
                                    labelLocation:_LEFT_, cssClass:"admin_xform_name_input", width:150,
                                    enableDisableChecks:[[XForm.checkInstanceValue,ZaAccount.A_zimbraFeatureReadReceiptsEnabled,"TRUE"],
                                        [ZaItem.hasWritePermission,ZaAccount.A_zimbraPrefReadReceiptsToAddress]],
                                    enableDisableChangeEventSources:[ZaAccount.A_zimbraFeatureReadReceiptsEnabled]
                                }
                            ]
                        });
        }
        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_prefSaveToSent,ZaAccount.A_zimbraAllowAnyFromAddress,
            ZaAccount.A_zimbraAllowFromAddress],[])) {
            prefItems.push({type:_ZAWIZ_TOP_GROUPER_, id:"account_prefs_mail_sending",borderCssClass:"LowPaddedTopGrouperBorder",
                            label:ZaMsg.NAD_MailOptionsSending,
                            items :[
                                {ref:ZaAccount.A_zimbraPrefSaveToSent,
                                    colSpan:2, colSizes:["200px","300px","*"],
                                    type:_SUPER_WIZ_CHECKBOX_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefSaveToSent,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefSaveToSent,
                                    trueValue:"TRUE", falseValue:"FALSE"},

                                {ref:ZaAccount.A_zimbraAllowAnyFromAddress,
                                    colSpan:2, colSizes:["200px","300px","*"],
                                    type:_SUPER_WIZ_CHECKBOX_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraAllowAnyFromAddress,
                                    checkBoxLabel:ZaMsg.LBL_zimbraAllowAnyFromAddress,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraAllowFromAddress,
                                    type:_REPEAT_,
                                    label:ZaMsg.LBL_zimbraAllowFromAddress,
                                    labelLocation:_LEFT_,
                                    addButtonLabel:ZaMsg.NAD_AddAddress,
                                    align:_LEFT_,
                                    repeatInstance:emptyAlias,
                                    showAddButton:true,
                                    showRemoveButton:true,
                                    showAddOnNextRow:true,
                                    removeButtonLabel:ZaMsg.NAD_RemoveAddress,
                                    items: [
                                        {ref:".", type:_TEXTFIELD_, label:null, width:"200px", enableDisableChecks:[],visibilityChecks:[]}
                                    ],
                                    nowrap:false,labelWrap:true,
                                    enableDisableChecks:[],
                                    visibilityChecks:[ZaAccountXFormView.isSendingFromAnyAddressDisAllowed,[ZaItem.hasWritePermission,ZaAccount.A_zimbraAllowFromAddress]],
                                    visibilityChangeEventSources:[ZaAccount.A_zimbraAllowAnyFromAddress, ZaAccount.A_zimbraAllowFromAddress, ZaAccount.A_COSId]
                                }
                            ]
                        });
        }
        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_zimbraPrefComposeInNewWindow,ZaAccount.A_zimbraPrefComposeFormat,
            ZaAccount.A_zimbraPrefHtmlEditorDefaultFontFamily,ZaAccount.A_zimbraPrefHtmlEditorDefaultFontSize,
            ZaAccount.A_zimbraPrefHtmlEditorDefaultFontColor,ZaAccount.A_zimbraPrefForwardReplyInOriginalFormat,
            ZaAccount.A_zimbraPrefMailSignatureEnabled,/*ZaAccount.A_zimbraPrefMailSignatureStyle,*/
            ZaAccount.A_zimbraMailSignatureMaxLength,ZaAccount.A_zimbraPrefMailSignature,
            ZaAccount.A_zimbraPrefMandatorySpellCheckEnabled, ZaAccount.A_zimbraPrefAutoSaveDraftInterval],[])) {
            prefItems.push({type:_ZAWIZ_TOP_GROUPER_, id:"account_prefs_mail_composing",borderCssClass:"LowPaddedTopGrouperBorder",
                            label:ZaMsg.NAD_MailOptionsComposing,
                            items :[
                                {ref:ZaAccount.A_zimbraPrefComposeInNewWindow,
                                    colSpan:2,
                                    type:_SUPER_WIZ_CHECKBOX_,
                                    colSizes:["200px","300px","*"],
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefComposeInNewWindow,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefComposeInNewWindow,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefComposeFormat,
                                    type:_SUPERWIZ_SELECT1_,
                                    colSizes:["300px", "*"],
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefComposeFormat,
                                    label:ZaMsg.LBL_zimbraPrefComposeFormat},
                                {ref:ZaAccount.A_zimbraPrefHtmlEditorDefaultFontFamily, type:_SUPERWIZ_SELECT1_,
                                    colSizes:["300px", "*"],
                                    msgName:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontFamily,label:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontFamily,
                                    labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, valueLabel:null
                                },
                                {ref:ZaAccount.A_zimbraPrefHtmlEditorDefaultFontSize, type:_SUPERWIZ_SELECT1_,
                                    colSizes:["300px", "*"],
                                    msgName:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontSize, label:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontSize,
                                    labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS, valueLabel:null
                                },
                                {ref:ZaAccount.A_zimbraPrefHtmlEditorDefaultFontColor, type:_SUPERWIZ_DWT_COLORPICKER_,
                                    msgName:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontColor, label:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontColor,
                                    labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                },
                                {ref:ZaAccount.A_zimbraPrefForwardReplyInOriginalFormat,
                                    colSpan:2,
                                    type:_SUPER_WIZ_CHECKBOX_,
                                    colSizes:["200px", "300px", "*"],
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefForwardReplyInOriginalFormat,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefForwardReplyInOriginalFormat,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefMandatorySpellCheckEnabled,
                                    colSpan:2,
                                    type:_SUPER_WIZ_CHECKBOX_,
                                    colSizes:["200px", "300px", "*"],
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefMandatorySpellCheckEnabled,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefMandatorySpellCheckEnabled,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                {ref:ZaAccount.A_zimbraPrefMailSignatureEnabled,
                                    colSizes:["200px", "300px", "*"],
                                    type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraPrefMailSignatureEnabled,
                                    label:ZaMsg.LBL_zimbraPrefMailSignatureEnabled,
                                    trueValue:"TRUE", falseValue:"FALSE"},
                                /*{ref:ZaAccount.A_zimbraPrefMailSignatureStyle,
                                    //colSpan:2,
                                    type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPrefMailSignatureStyle,
                                    checkBoxLabel:ZaMsg.LBL_zimbraPrefMailSignatureStyle,
                                    trueValue:"internet", falseValue:"outlook"
                                },*/
                                {ref:ZaAccount.A_zimbraMailSignatureMaxLength, type:_SUPERWIZ_TEXTFIELD_,
                                    colSpan:2,
                                    colSizes:["200px", "300px", "*"],
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailSignatureMaxLength,
                                    msgName:ZaMsg.MSG_zimbraMailSignatureMaxLength,
                                    labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input",
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                },
                                {ref:ZaAccount.A_zimbraPrefMailSignature, type:_TEXTAREA_,
                                    colSizes:["200px", "300px", "*"],
                                    msgName:ZaMsg.MSG_zimbraPrefMailSignature,
                                    label:ZaMsg.LBL_zimbraPrefMailSignature, labelLocation:_LEFT_,
                                    labelCssStyle:"vertical-align:top;", width:"30em",
                                    enableDisableChangeEventSources:[ZaAccount.A_zimbraPrefMailSignatureEnabled],
                                    enableDisableChecks:[ZaAccountXFormView.isMailSignatureEnabled]
                                },
                                {ref:ZaAccount.A_zimbraPrefAutoSaveDraftInterval, type:_SUPERWIZ_LIFETIME_,
                                    colSizes:["200px","80px","220px","*"],
                                    msgName:ZaMsg.MSG_zimbraPrefAutoSaveDraftInterval,
                                    txtBoxLabel:ZaMsg.LBL_zimbraPrefAutoSaveDraftInterval,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,colSpan:2,
                                    nowrap:false,labelWrap:true
                                }
                            ]
                        });
        }
        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_zimbraPrefImapEnabled,ZaAccount.A_zimbraPrefPop3Enabled],[])) {
            prefItems.push(
                        {type:_ZAWIZ_TOP_GROUPER_, id:"account_prefs_pop_imap",
                            label:ZaMsg.NAD_PopImapOptions,
                            items :[
                                    {ref:ZaAccount.A_zimbraPrefImapEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2,
                                        colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                        msgName:ZaMsg.LBL_zimbraPrefImapEnabled,checkBoxLabel:ZaMsg.LBL_zimbraPrefImapEnabled,
                                        trueValue:"TRUE", falseValue:"FALSE"
                                    },
                                    {ref:ZaAccount.A_zimbraPrefPop3Enabled, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2,
                                        colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                        msgName:ZaMsg.LBL_zimbraPrefPop3Enabled,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefPop3Enabled,
                                        trueValue:"TRUE", falseValue:"FALSE"}
                                    ]
                        });
        }
        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_zimbraPrefAutoAddAddressEnabled,ZaAccount.A_zimbraPrefGalAutoCompleteEnabled],[])) {
            prefItems.push(
                        {type:_ZAWIZ_TOP_GROUPER_, id:"account_prefs_contacts_general",
                            label:ZaMsg.NAD_ContactsOptions,
                            items :[
                                    {ref:ZaAccount.A_zimbraPrefAutoAddAddressEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2,
                                        colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                        msgName:ZaMsg.LBL_zimbraPrefAutoAddAddressEnabled,checkBoxLabel:ZaMsg.LBL_zimbraPrefAutoAddAddressEnabled,
                                        trueValue:"TRUE", falseValue:"FALSE"
                                    },
                                    {ref:ZaAccount.A_zimbraPrefGalAutoCompleteEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2,
                                        colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                        msgName:ZaMsg.LBL_zimbraPrefGalAutoCompleteEnabled,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefGalAutoCompleteEnabled,
                                        trueValue:"TRUE", falseValue:"FALSE"}
                                    ]
                        });
        }
        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_zimbraPrefTimeZoneId,ZaAccount.A_zimbraPrefCalendarApptReminderWarningTime,
            ZaAccount.A_zimbraPrefCalendarAlwaysShowMiniCal,ZaAccount.A_zimbraPrefCalendarUseQuickAdd,ZaAccount.A_zimbraPrefUseTimeZoneListInCalendar,
            ZaAccount.A_zimbraPrefCalendarInitialView,ZaAccount.A_zimbraPrefCalendarFirstDayOfWeek,ZaAccount.A_zimbraPrefCalendarNotifyDelegatedChanges,
            ZaAccount.A_zimbraPrefCalendarApptVisibility,ZaAccount.A_zimbraPrefCalendarReminderSoundsEnabled,
            ZaAccount.A_zimbraPrefCalendarSendInviteDeniedAutoReply,ZaAccount.A_zimbraPrefCalendarAutoAddInvites,
            ZaAccount.A_zimbraPrefCalendarAllowForwardedInvite,ZaAccount.A_zimbraPrefCalendarReminderFlashTitle,
            ZaAccount.A_zimbraPrefCalendarAllowCancelEmailToSelf,ZaAccount.A_zimbraPrefCalendarToasterEnabled,
            ZaAccount.A_zimbraPrefCalendarShowPastDueReminders,ZaAccount.A_zimbraPrefAppleIcalDelegationEnabled],[])) {
            prefItems.push(
                        {type:_ZAWIZ_TOP_GROUPER_, id:"account_prefs_calendar_general",
                          label:ZaMsg.NAD_CalendarOptions,
                            items :[
                                    {ref:ZaAccount.A_zimbraPrefTimeZoneId, type:_SUPERWIZ_SELECT1_,
                                        msgName:ZaMsg.LBL_zimbraPrefTimeZoneId, valueWidth: "280px",
                                        colSizes:["300px", "*"],
                                        label:ZaMsg.LBL_zimbraPrefTimeZoneId, labelLocation:_LEFT_,
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS},
                                    {ref:ZaAccount.A_zimbraPrefCalendarApptReminderWarningTime, type:_SUPERWIZ_SELECT1_,
                                        colSizes:["300px", "*"],
                                        msgName:ZaMsg.LBL_zimbraPrefCalendarApptReminderWarningTime,
                                        label:ZaMsg.LBL_zimbraPrefCalendarApptReminderWarningTime, labelLocation:_LEFT_,
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS},
                                    {ref:ZaAccount.A_zimbraPrefCalendarInitialView, type:_SUPERWIZ_SELECT1_,
                                        colSizes:["300px", "*"],
                                        msgName:ZaMsg.MSG_zimbraPrefCalendarInitialView,
                                        label:ZaMsg.LBL_zimbraPrefCalendarInitialView, labelLocation:_LEFT_,
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                    },
                                    {ref:ZaAccount.A_zimbraPrefCalendarFirstDayOfWeek,
                                        type:_SUPERWIZ_SELECT1_,
                                        colSizes:["300px", "*"],
                                        msgName:ZaMsg.LBL_zimbraPrefCalendarFirstDayOfWeek,
                                        label:ZaMsg.LBL_zimbraPrefCalendarFirstDayOfWeek, labelLocation:_LEFT_,
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                    },
                                    {ref:ZaAccount.A_zimbraPrefCalendarApptVisibility,
                                        type:_SUPERWIZ_SELECT1_,
                                        colSizes:["300px", "*"],
                                        msgName:ZaMsg.LBL_zimbraPrefCalendarApptVisibility,
                                        label:ZaMsg.LBL_zimbraPrefCalendarApptVisibility, labelLocation:_LEFT_,
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                    },
                                    {ref:ZaAccount.A_zimbraPrefAppleIcalDelegationEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.MSG_zimbraPrefAppleIcalDelegationEnabled,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefAppleIcalDelegationEnabled,
                                        trueValue:"TRUE", falseValue:"FALSE",
                                        nowrap:false,labelWrap:true
                                    },
                                    {ref:ZaAccount.A_zimbraPrefCalendarShowPastDueReminders, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.MSG_zimbraPrefCalendarShowPastDueReminders,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarShowPastDueReminders,
                                        trueValue:"TRUE", falseValue:"FALSE",
                                        nowrap:false,labelWrap:true
                                    },
                                    {ref:ZaAccount.A_zimbraPrefCalendarToasterEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.MSG_zimbraPrefCalendarToasterEnabled,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarToasterEnabled,
                                        trueValue:"TRUE", falseValue:"FALSE",
                                        nowrap:false,labelWrap:true
                                    },
                                    {ref:ZaAccount.A_zimbraPrefCalendarAllowCancelEmailToSelf, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.MSG_zimbraPrefCalendarAllowCancelEmailToSelf,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarAllowCancelEmailToSelf,
                                        trueValue:"TRUE", falseValue:"FALSE",
                                        nowrap:false,labelWrap:true
                                    },
                                    {ref:ZaAccount.A_zimbraPrefCalendarAllowPublishMethodInvite, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.MSG_zimbraPrefCalendarAllowPublishMethodInvite,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarAllowPublishMethodInvite,
                                        trueValue:"TRUE", falseValue:"FALSE",
                                        nowrap:false,labelWrap:true
                                    },
                                    {ref:ZaAccount.A_zimbraPrefCalendarAllowForwardedInvite, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.MSG_zimbraPrefCalendarAllowForwardedInvite,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarAllowForwardedInvite,
                                        trueValue:"TRUE", falseValue:"FALSE",
                                        nowrap:false,labelWrap:true
                                    },
                                    {ref:ZaAccount.A_zimbraPrefCalendarReminderFlashTitle, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.MSG_zimbraPrefCalendarReminderFlashTitle,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarReminderFlashTitle,
                                        trueValue:"TRUE", falseValue:"FALSE",
                                        nowrap:false,labelWrap:true
                                    },
                                    {ref:ZaAccount.A_zimbraPrefCalendarReminderSoundsEnabled, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefCalendarReminderSoundsEnabled,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarReminderSoundsEnabled,
                                        trueValue:"TRUE", falseValue:"FALSE",
                                        nowrap:false,labelWrap:true
                                    },
                                    {ref:ZaAccount.A_zimbraPrefCalendarSendInviteDeniedAutoReply, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefCalendarSendInviteDeniedAutoReply,
                                        checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarSendInviteDeniedAutoReply,
                                        trueValue:"TRUE", falseValue:"FALSE",
                                        nowrap:false,labelWrap:true
                                    },
                                    {ref:ZaAccount.A_zimbraPrefCalendarAutoAddInvites, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefCalendarAutoAddInvites,checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarAutoAddInvites, trueValue:"TRUE", falseValue:"FALSE"},
                                    {ref:ZaAccount.A_zimbraPrefCalendarNotifyDelegatedChanges, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefCalendarNotifyDelegatedChanges,checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarNotifyDelegatedChanges, trueValue:"TRUE", falseValue:"FALSE"},
                                    {ref:ZaAccount.A_zimbraPrefCalendarAlwaysShowMiniCal, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefCalendarAlwaysShowMiniCal,checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarAlwaysShowMiniCal, trueValue:"TRUE", falseValue:"FALSE"},
                                    {ref:ZaAccount.A_zimbraPrefCalendarUseQuickAdd, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefCalendarUseQuickAdd,checkBoxLabel:ZaMsg.LBL_zimbraPrefCalendarUseQuickAdd, trueValue:"TRUE", falseValue:"FALSE"},
                                    {ref:ZaAccount.A_zimbraPrefUseTimeZoneListInCalendar, type:_SUPER_WIZ_CHECKBOX_,
                                        colSpan:2, colSizes:["200px", "300px", "*"],
                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.LBL_zimbraPrefUseTimeZoneListInCalendar,checkBoxLabel:ZaMsg.LBL_zimbraPrefUseTimeZoneListInCalendar,trueValue:"TRUE", falseValue:"FALSE"}
                            ]
                        });
        }
        cases.push({type:_CASE_, caseKey:ZaNewAccountXWizard.PREFS_STEP, tabGroupKey:ZaNewAccountXWizard.PREFS_STEP,
                    numCols:1, width:"680", items :prefItems});
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.SKIN_TAB_ATTRS, ZaAccountXFormView.SKIN_TAB_RIGHTS) &&
        !ZaSettings.isOctopus()) {
        ZaNewAccountXWizard.SKINS_STEP = ++this.TAB_INDEX;
        this.stepChoices.push({value:ZaNewAccountXWizard.SKINS_STEP, label:ZaMsg.TABT_Themes});

        cases.push({type:_CASE_, caseKey:ZaNewAccountXWizard.SKINS_STEP, tabGroupKey:ZaNewAccountXWizard.SKINS_STEP, id:"account_form_themes_step", numCols:1, width:"100%",
                        items: [
                            {type:_GROUP_,
                                items:[
                                  {ref:ZaAccount.A_zimbraPrefSkin, type:_SUPERWIZ_SELECT1_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPrefSkin,label:ZaMsg.LBL_zimbraPrefSkin, labelLocation:_LEFT_,
                                    choices:ZaNewAccountXWizard.themeChoices,
                                    visibilityChecks:[ZaAccountXFormView.gotSkins]
                                  },
                                  {type:_OUTPUT_,ref:ZaAccount.A_zimbraPrefSkin,label:ZaMsg.LBL_zimbraPrefSkin, labelLocation:_LEFT_,
                                       visibilityChecks:[ZaAccountXFormView.gotNoSkins]
                                  }
                                ]
                            },
                            {type:_SPACER_},
                            {type:_SUPER_WIZ_SELECT_CHECK_,
                                selectRef:ZaAccount.A_zimbraAvailableSkin,
                                ref:ZaAccount.A_zimbraAvailableSkin,
                                choices:ZaNewAccountXWizard.themeChoices,
                                visibilityChecks:[Case_XFormItem.prototype.isCurrentTab,ZaAccountXFormView.gotSkins],
                                visibilityChangeEventSources:[ZaModel.currentStep],
                                caseKey:ZaNewAccountXWizard.SKINS_STEP, caseVarRef:ZaModel.currentStep,
                                limitLabel:ZaMsg.NAD_LimitThemesTo
                            },
                            {type:_DWT_ALERT_,colSpan:2,style: DwtAlert.WARNING, iconVisible:true,
                                visibilityChecks:[ZaAccountXFormView.gotNoSkins],
                                value:ZaMsg.ERROR_CANNOT_FIND_SKINS_FOR_ACCOUNT
                            }
                        ]
        });
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.ZIMLET_TAB_ATTRS, ZaAccountXFormView.ZIMLET_TAB_RIGHTS)) {
        ZaNewAccountXWizard.ZIMLETS_STEP = ++this.TAB_INDEX;
        this.stepChoices.push({value:ZaNewAccountXWizard.ZIMLETS_STEP, label:ZaMsg.TABT_Zimlets});

        cases.push({type:_CASE_, caseKey:ZaNewAccountXWizard.ZIMLETS_STEP, tabGroupKey:ZaNewAccountXWizard.ZIMLETS_STEP, id:"account_form_zimlets_step", numCols:1, width:"100%",
                        items: [
                            {type:_ZAWIZGROUP_, numCols:1,colSizes:["auto"],
                                items: [
                                    {type:_SUPER_WIZ_ZIMLET_SELECT_,
                                        selectRef:ZaAccount.A_zimbraZimletAvailableZimlets,
                                        ref:ZaAccount.A_zimbraZimletAvailableZimlets,
                                        choices:ZaNewAccountXWizard.zimletChoices,
                                        limitLabel:ZaMsg.NAD_LimitZimletsTo
                                    }
                                ]
                            }
                        ]
        });
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaAccountXFormView.ADVANCED_TAB_ATTRS, ZaAccountXFormView.ADVANCED_TAB_RIGHTS) &&
        !ZaSettings.isOctopus()) {
        ZaNewAccountXWizard.ADVANCED_STEP = ++this.TAB_INDEX;
        this.stepChoices.push({value:ZaNewAccountXWizard.ADVANCED_STEP, label:ZaMsg.TABT_Advanced});
        advancedCaseItems = [];
        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_zimbraAttachmentsBlocked],[])) {
            advancedCaseItems.push({type:_ZAWIZ_TOP_GROUPER_, id:"account_attachment_settings",colSizes:["auto"],numCols:1,
                            label:ZaMsg.NAD_AttachmentsGrouper,
                            items :[
                                {ref:ZaAccount.A_zimbraAttachmentsBlocked, type:_SUPER_WIZ_CHECKBOX_,
                                    colSizes:["200px", "300px", "*"], colSpan:3,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.NAD_RemoveAllAttachments,
                                    checkBoxLabel:ZaMsg.NAD_RemoveAllAttachments,
                                    trueValue:"TRUE", falseValue:"FALSE"
                                }
                            ]
                        });
        }
        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_zimbraMailQuota,ZaAccount.A_zimbraContactMaxNumEntries,
            ZaAccount.A_zimbraQuotaWarnPercent,ZaAccount.A_zimbraQuotaWarnInterval,ZaAccount.A_zimbraQuotaWarnMessage],[])) {
            advancedCaseItems.push({type:_ZAWIZ_TOP_GROUPER_, id:"account_quota_settings",colSizes:["auto"],numCols:1,
                            label:ZaMsg.NAD_QuotaGrouper,
                            items: [
                                {ref:ZaAccount.A_zimbraMailForwardingAddressMaxLength, type:_SUPERWIZ_TEXTFIELD_,
                                    colSizes:["200px", "300px", "*"], colSpan: 1,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraMailForwardingAddressMaxLength,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailForwardingAddressMaxLength, labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input"
                                },
                                {ref:ZaAccount.A_zimbraMailForwardingAddressMaxNumAddrs, type:_SUPERWIZ_TEXTFIELD_,
                                    colSizes:["200px", "300px", "*"], colSpan: 1,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraMailForwardingAddressMaxNumAddrs,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailForwardingAddressMaxNumAddrs, labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input"
                                },
                                {ref:ZaAccount.A_zimbraMailQuota, type:_SUPERWIZ_TEXTFIELD_,
                                    colSizes:["200px", "300px", "*"],colSpan: 1,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailQuota, msgName:ZaMsg.MSG_zimbraMailQuota,labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input",
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                },
                                {ref:ZaAccount.A_zimbraContactMaxNumEntries, type:_SUPERWIZ_TEXTFIELD_,
                                    colSizes:["200px", "300px", "*"], colSpan: 1,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraContactMaxNumEntries,
                                    txtBoxLabel:ZaMsg.LBL_zimbraContactMaxNumEntries, labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input"
                                },
                                {ref:ZaAccount.A_zimbraQuotaWarnPercent, type:_SUPERWIZ_TEXTFIELD_,
                                    colSizes:["200px", "300px", "*"], colSpan: 1,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    txtBoxLabel:ZaMsg.LBL_zimbraQuotaWarnPercent, msgName:ZaMsg.MSG_zimbraQuotaWarnPercent,labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input",
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                },
                                {ref:ZaAccount.A_zimbraQuotaWarnInterval, type:_SUPERWIZ_LIFETIME_,
                                    colSizes:["200px", "80px", "220px", "*"], colSpan: 1,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    textFieldCssClass:"admin_xform_number_input",
                                    txtBoxLabel:ZaMsg.LBL_zimbraQuotaWarnInterval, msgName:ZaMsg.MSG_zimbraQuotaWarnInterval,labelLocation:_LEFT_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                },
                                {ref:ZaAccount.A_zimbraQuotaWarnMessage, type:_SUPERWIZ_TEXTAREA_,
                                    colSizes:["200px", "300px", "*"], colSpan: 1,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    txtBoxLabel:ZaMsg.LBL_zimbraQuotaWarnMessage,
                                    msgName:ZaMsg.MSG_zimbraQuotaWarnMessage,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                }
                            ]
                        });
        }

        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[
                                ZaAccount.A_zimbraDataSourceMinPollingInterval,
                                ZaAccount.A_zimbraDataSourcePop3PollingInterval,
                                ZaAccount.A_zimbraDataSourceImapPollingInterval,
                                ZaAccount.A_zimbraDataSourceCalendarPollingInterval,
                                ZaAccount.A_zimbraDataSourceRssPollingInterval,
                                ZaAccount.A_zimbraDataSourceCaldavPollingInterval],[])) {
            advancedCaseItems.push({type:_ZAWIZ_TOP_GROUPER_, id:"account_datasourcepolling_settings",colSizes:["auto"],numCols:1,
                            label:ZaMsg.NAD_DataSourcePolling,
                            items: [
                                                                {ref:ZaAccount.A_zimbraDataSourceMinPollingInterval, type:_SUPERWIZ_LIFETIME_,
                                                                        colSizes:["200px","80px","220px","*"],
                                                                        msgName:ZaMsg.MSG_zimbraDataSourceMinPollingInterval,
                                                                        txtBoxLabel:ZaMsg.LBL_zimbraDataSourceMinPollingInterval,
                                                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                                                        nowrap:false,labelWrap:true
                                                                },
                                                                {ref:ZaAccount.A_zimbraDataSourcePop3PollingInterval, type:_SUPERWIZ_LIFETIME_,
                                                                        colSizes:["200px","80px","220px","*"],
                                                                        msgName:ZaMsg.MSG_zimbraDataSourcePop3PollingInterval,
                                                                        txtBoxLabel:ZaMsg.LBL_zimbraDataSourcePop3PollingInterval,
                                                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                                                        nowrap:false,labelWrap:true
                                                                },
                                                                {ref:ZaAccount.A_zimbraDataSourceImapPollingInterval, type:_SUPERWIZ_LIFETIME_,
                                                                        colSizes:["200px","80px","220px","*"],
                                                                        msgName:ZaMsg.MSG_zimbraDataSourceImapPollingInterval,
                                                                        txtBoxLabel:ZaMsg.LBL_zimbraDataSourceImapPollingInterval,
                                                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                                                        nowrap:false,labelWrap:true
                                                                },
                                                                {ref:ZaAccount.A_zimbraDataSourceCalendarPollingInterval, type:_SUPERWIZ_LIFETIME_,
                                                                        colSizes:["200px","80px","220px","*"],
                                                                        msgName:ZaMsg.MSG_zimbraDataSourceCalendarPollingInterval,
                                                                        txtBoxLabel:ZaMsg.LBL_zimbraDataSourceCalendarPollingInterval,
                                                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                                                        nowrap:false,labelWrap:true
                                                                },
                                                                {ref:ZaAccount.A_zimbraDataSourceRssPollingInterval, type:_SUPERWIZ_LIFETIME_,
                                                                        colSizes:["200px","80px","220px","*"],
                                                                        msgName:ZaMsg.MSG_zimbraDataSourceRssPollingInterval,
                                                                        txtBoxLabel:ZaMsg.LBL_zimbraDataSourceRssPollingInterval,
                                                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                                                        nowrap:false,labelWrap:true
                                                                },
                                                                {ref:ZaAccount.A_zimbraDataSourceCaldavPollingInterval, type:_SUPERWIZ_LIFETIME_,
                                                                        colSizes:["200px","80px","220px","*"],
                                                                        msgName:ZaMsg.MSG_zimbraDataSourceCaldavPollingInterval,
                                                                        txtBoxLabel:ZaMsg.LBL_zimbraDataSourceCaldavPollingInterval,
                                                                        resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                                                        nowrap:false,labelWrap:true
                                                                }

                            ]
                        });
        }

                if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_zimbraProxyAllowedDomains],[])) {
                      advancedCaseItems.push({type:_ZAWIZ_TOP_GROUPER_, id:"account_proxyalloweddomains_settings",colSizes:["200px","auto"],numCols:2,
                            label:ZaMsg.NAD_ProxyAllowedDomains,
                            items: [
                                          { ref: ZaAccount.A_zimbraProxyAllowedDomains,
                                               label:ZaMsg.LBL_zimbraProxyAllowedDomains,
                                               labelCssStyle:"vertical-align:top;",
                                               type:_SUPER_REPEAT_,
                                               colSizes:["300px", "*"],
                                               resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                               repeatInstance:"",
                                               addButtonLabel:ZaMsg.NAD_ProxyAddAllowedDomain ,
                                               removeButtonLabel: ZaMsg.NAD_ProxyRemoveAllowedDomain,
                                               showAddButton:true,
                                               showRemoveButton:true,
                                               showAddOnNextRow:true,
                                               repeatItems: [
                                                  { ref:".", type:_TEXTFIELD_,
                                                    enableDisableChecks:[ZaItem.hasWritePermission] ,
                                                    visibilityChecks:[ZaItem.hasReadPermission],
                                                    width: "15em"
                                                  }
                                               ]
                                        }
                            ]
                        });
        }
        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_zimbraPasswordLocked,ZaAccount.A_zimbraMinPwdLength,
            ZaAccount.A_zimbraMaxPwdLength,ZaAccount.A_zimbraPasswordMinUpperCaseChars,ZaAccount.A_zimbraPasswordMinLowerCaseChars,
            ZaAccount.A_zimbraPasswordMinPunctuationChars,ZaAccount.A_zimbraPasswordMinNumericChars,ZaAccount.A_zimbraPasswordMinDigitsOrPuncs,
            ZaAccount.A_zimbraMinPwdAge,ZaAccount.A_zimbraMaxPwdAge,ZaAccount.A_zimbraEnforcePwdHistory, ZaAccount.A_zimbraPasswordBlockCommonEnabled],[])) {
            advancedCaseItems.push({type:_ZAWIZ_TOP_GROUPER_,id:"account_password_settings",colSizes:["auto"],numCols:1,
                            label:ZaMsg.NAD_PasswordGrouper,
                            items: [
                                { type: _DWT_ALERT_, containerCssStyle: "padding-bottom:0;",
                                    style: DwtAlert.WARNING,iconVisible: false,
                                    content: ZaMsg.Alert_InternalPassword, colSpan:3
                                },

                                {ref:ZaAccount.A_zimbraPasswordLocked,
                                    type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.NAD_PwdLocked,checkBoxLabel:ZaMsg.NAD_PwdLocked,
                                    trueValue:"TRUE", falseValue:"FALSE",
                                    colSizes:["200px", "300px", "*"],
                                    visibilityChecks:[],enableDisableChecks:[[ZaNewAccountXWizard.isAuthfromInternal, domainName,ZaAccount.A_name]]
                                },
                                {ref:ZaAccount.A_zimbraMinPwdLength,
                                    type:_SUPERWIZ_TEXTFIELD_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraMinPwdLength,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMinPwdLength,
                                    labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input",
                                    colSizes:["200px", "300px", "*"],
                                    visibilityChecks:[],enableDisableChecks:[[ZaNewAccountXWizard.isAuthfromInternal, domainName,ZaAccount.A_name]]
                                },
                                {ref:ZaAccount.A_zimbraMaxPwdLength, type:_SUPERWIZ_TEXTFIELD_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.MSG_zimbraMaxPwdLength,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMaxPwdLength, labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input",
                                    colSizes:["200px", "300px", "*"],
                                    visibilityChecks:[],enableDisableChecks:[[ZaNewAccountXWizard.isAuthfromInternal, domainName,ZaAccount.A_name]]
                                },
                                {ref:ZaAccount.A_zimbraPasswordMinUpperCaseChars,
                                    type:_SUPERWIZ_TEXTFIELD_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPasswordMinUpperCaseChars,
                                    txtBoxLabel:ZaMsg.LBL_zimbraPasswordMinUpperCaseChars, labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input",
                                    colSizes:["200px", "300px", "*"],
                                    visibilityChecks:[],enableDisableChecks:[[ZaNewAccountXWizard.isAuthfromInternal, domainName,ZaAccount.A_name]]
                                },
                                {ref:ZaAccount.A_zimbraPasswordMinLowerCaseChars,
                                    type:_SUPERWIZ_TEXTFIELD_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPasswordMinLowerCaseChars,
                                    txtBoxLabel:ZaMsg.LBL_zimbraPasswordMinLowerCaseChars, labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input",
                                    colSizes:["200px", "300px", "*"],
                                    visibilityChecks:[],enableDisableChecks:[[ZaNewAccountXWizard.isAuthfromInternal, domainName,ZaAccount.A_name]]
                                },
                                {ref:ZaAccount.A_zimbraPasswordMinPunctuationChars,
                                    type:_SUPERWIZ_TEXTFIELD_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPasswordMinPunctuationChars,
                                    txtBoxLabel:ZaMsg.LBL_zimbraPasswordMinPunctuationChars, labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input",
                                    colSizes:["200px", "300px", "*"],
                                    visibilityChecks:[],enableDisableChecks:[[ZaNewAccountXWizard.isAuthfromInternal, domainName,ZaAccount.A_name]]
                                },
                                {ref:ZaAccount.A_zimbraPasswordMinNumericChars,
                                    type:_SUPERWIZ_TEXTFIELD_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPasswordMinNumericChars,
                                    txtBoxLabel:ZaMsg.LBL_zimbraPasswordMinNumericChars, labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input",
                                    colSizes:["200px", "300px", "*"],
                                    visibilityChecks:[],enableDisableChecks:[[ZaNewAccountXWizard.isAuthfromInternal, domainName,ZaAccount.A_name]]
                                },
                                {ref:ZaAccount.A_zimbraPasswordMinDigitsOrPuncs,
                                    type:_SUPERWIZ_TEXTFIELD_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraPasswordMinDigitsOrPuncs,
                                    txtBoxLabel:ZaMsg.LBL_zimbraPasswordMinDigitsOrPuncs, labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input",
                                    colSizes:["200px", "300px", "*"],
                                    visibilityChecks:[],enableDisableChecks:[[ZaNewAccountXWizard.isAuthfromInternal, domainName,ZaAccount.A_name]]
                                },

                                {ref:ZaAccount.A_zimbraMinPwdAge,
                                    type:_SUPERWIZ_TEXTFIELD_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_passMinAge,txtBoxLabel:ZaMsg.LBL_passMinAge, labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input",
                                    colSizes:["200px", "300px", "*"],
                                    visibilityChecks:[],enableDisableChecks:[[ZaNewAccountXWizard.isAuthfromInternal, domainName,ZaAccount.A_name]]
                                },
                                {ref:ZaAccount.A_zimbraMaxPwdAge,
                                    type:_SUPERWIZ_TEXTFIELD_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_passMaxAge,txtBoxLabel:ZaMsg.LBL_passMaxAge, labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input",
                                    colSizes:["200px", "300px", "*"],
                                    visibilityChecks:[],enableDisableChecks:[[ZaNewAccountXWizard.isAuthfromInternal, domainName,ZaAccount.A_name]]
                                },
                                {ref:ZaAccount.A_zimbraEnforcePwdHistory,
                                    type:_SUPERWIZ_TEXTFIELD_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraEnforcePwdHistory,
                                    txtBoxLabel:ZaMsg.LBL_zimbraEnforcePwdHistory, labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input",
                                    colSizes:["200px", "300px", "*"],
                                    visibilityChecks:[],enableDisableChecks:[[ZaNewAccountXWizard.isAuthfromInternal, domainName,ZaAccount.A_name]]
                                },
                                {ref:ZaAccount.A_zimbraPasswordBlockCommonEnabled,
                                    type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.NAD_RejectCommonPwd,checkBoxLabel:ZaMsg.NAD_RejectCommonPwd,
                                    trueValue:"TRUE", falseValue:"FALSE",
                                    colSizes:["200px", "300px", "*"],
                                    visibilityChecks:[],enableDisableChecks:[[ZaNewAccountXWizard.isAuthfromInternal, domainName,ZaAccount.A_name]]
                                }
                            ]
                        });
        }
            if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,[ZaAccount.A_zimbraPasswordLockoutEnabled,ZaAccount.A_zimbraPasswordLockoutMaxFailures,
            ZaAccount.A_zimbraPasswordLockoutDuration,ZaAccount.A_zimbraPasswordLockoutFailureLifetime],[])) {
            advancedCaseItems.push({type:_ZAWIZ_TOP_GROUPER_, id:"password_lockout_settings",colSizes:["auto"],numCols:1,
                            label:ZaMsg.NAD_FailedLoginGrouper,
                            items :[

                                {ref:ZaAccount.A_zimbraPasswordLockoutEnabled, type:_SUPER_WIZ_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.LBL_zimbraPasswordLockoutEnabled,checkBoxLabel:ZaMsg.LBL_zimbraPasswordLockoutEnabled,
                                    colSizes:["200px", "300px", "*"],colSpan:1, trueValue:"TRUE", falseValue:"FALSE"
                                },
                                {ref:ZaAccount.A_zimbraPasswordLockoutMaxFailures, type:_SUPERWIZ_TEXTFIELD_,
                                    enableDisableChecks: [[ZaAccountXFormView.isPasswordLockoutEnabled],[XForm.checkInstanceValue,ZaAccount.A_zimbraPasswordLockoutEnabled,"TRUE"]],
                                     enableDisableChangeEventSources:[ZaAccount.A_zimbraPasswordLockoutEnabled,ZaAccount.A_COSId, ZaAccount.A_zimbraPasswordLockoutEnabled],
                                    txtBoxLabel:ZaMsg.LBL_zimbraPasswordLockoutMaxFailures,
                                    toolTipContent:ZaMsg.TTP_zimbraPasswordLockoutMaxFailuresSub,
                                    msgName:ZaMsg.MSG_zimbraPasswordLockoutMaxFailures,
                                    labelLocation:_LEFT_,
                                    textFieldCssClass:"admin_xform_number_input",
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    colSizes:["200px", "300px", "*"],colSpan:1
                                },
                                {ref:ZaAccount.A_zimbraPasswordLockoutDuration, type:_SUPERWIZ_LIFETIME_,
                                    enableDisableChecks: [[ZaAccountXFormView.isPasswordLockoutEnabled],[XForm.checkInstanceValue,ZaAccount.A_zimbraPasswordLockoutEnabled,"TRUE"]],
                                     enableDisableChangeEventSources:[ZaAccount.A_zimbraPasswordLockoutEnabled,ZaAccount.A_COSId, ZaAccount.A_zimbraPasswordLockoutEnabled],
                                    txtBoxLabel:ZaMsg.LBL_zimbraPasswordLockoutDuration,
                                    toolTipContent:ZaMsg.TTP_zimbraPasswordLockoutDurationSub,
                                    msgName:ZaMsg.MSG_zimbraPasswordLockoutDuration,
                                    textFieldCssClass:"admin_xform_number_input",
                                    colSizes:["200px", "80px", "220px", "*"],colSpan:1,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                },
                                {ref:ZaAccount.A_zimbraPasswordLockoutFailureLifetime, type:_SUPERWIZ_LIFETIME_,
                                    enableDisableChecks: [[ZaAccountXFormView.isPasswordLockoutEnabled],[XForm.checkInstanceValue,ZaAccount.A_zimbraPasswordLockoutEnabled,"TRUE"]],
                                     enableDisableChangeEventSources:[ZaAccount.A_zimbraPasswordLockoutEnabled,ZaAccount.A_COSId, ZaAccount.A_zimbraPasswordLockoutEnabled],
                                    txtBoxLabel:ZaMsg.LBL_zimbraPasswordLockoutFailureLifetime,
                                    toolTipContent:ZaMsg.TTP_zimbraPasswordLockoutFailureLifetimeSub,
                                    msgName:ZaMsg.MSG_zimbraPasswordLockoutFailureLifetime,
                                    textFieldCssClass:"admin_xform_number_input",
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    labelCssStyle:"white-space:normal;",
                                    colSizes:["200px", "80px", "220px", "*"],colSpan:1,
                                    nowrap:false,labelWrap:true
                                }
                            ]
                        });
        }

        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,
            [
            ZaAccount.A_zimbraAdminAuthTokenLifetime,
            ZaAccount.A_zimbraAuthTokenLifetime,
            ZaAccount.A_zimbraMailIdleSessionTimeout,
            ZaAccount.A_zimbraDumpsterUserVisibleAge
            ],[])) {
            advancedCaseItems.push({type:_ZAWIZ_TOP_GROUPER_, colSizes:["auto"],numCols:1,
                            label:ZaMsg.NAD_TimeoutGrouper,    id:"timeout_settings",
                            items: [
                                {ref:ZaAccount.A_zimbraAdminAuthTokenLifetime,
                                    type:_SUPERWIZ_LIFETIME_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraAdminAuthTokenLifetime,
                                    txtBoxLabel:ZaMsg.LBL_zimbraAdminAuthTokenLifetime,
                                    enableDisableChecks:[ZaAccountXFormView.isAdminAccount],
                                    colSizes:["200px", "80px", "220px", "*"],colSpan:1,
                                    enableDisableChangeEventSources:[ZaAccount.A_zimbraIsAdminAccount]
                                },
                                {ref:ZaAccount.A_zimbraAuthTokenLifetime,
                                    type:_SUPERWIZ_LIFETIME_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraAuthTokenLifetime,
                                    colSizes:["200px", "80px", "220px", "*"],colSpan:1,
                                    txtBoxLabel:ZaMsg.LBL_zimbraAuthTokenLifetime},
                                {ref:ZaAccount.A_zimbraMailIdleSessionTimeout,
                                    type:_SUPERWIZ_LIFETIME_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraMailIdleSessionTimeout,
                                    colSizes:["200px", "80px", "220px", "*"],colSpan:1,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailIdleSessionTimeout},
                                {ref:ZaAccount.A_zimbraDumpsterUserVisibleAge, type:_SUPERWIZ_LIFETIME_,
                                    colSizes:["200px", "80px", "220px", "*"],colSpan:1,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraDumpsterUserVisibleAge,
                                    txtBoxLabel:ZaMsg.LBL_zimbraDumpsterUserVisibleAge,
                                    visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaAccount.A_zimbraDumpsterEnabled, "TRUE"]],
                                    visibilityChangeEventSources:[ZaAccount.A_zimbraDumpsterEnabled]
                                }


                            ]
                        });
        }


        if(ZAWizTopGrouper_XFormItem.isGroupVisible(entry,
            [
                ZaAccount.A_zimbraMailMessageLifetime,
                ZaAccount.A_zimbraMailTrashLifetime,
                ZaAccount.A_zimbraMailSpamLifetime,
                ZaAccount.A_zimbraMailDumpsterLifetime
            ],[])) {
            advancedCaseItems.push({ type:_ZAWIZ_TOP_GROUPER_, colSizes:["auto"], numCols:1,
                            visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                    [ZaAccount.A_zimbraMailMessageLifetime,
                                    ZaAccount.A_zimbraMailTrashLifetime,
                                    ZaAccount.A_zimbraMailSpamLifetime,
                                    ZaAccount.A_zimbraMailDumpsterLifetime
                                    ]],[XForm.checkInstanceValueNot,ZaAccount.A_zimbraIsExternalVirtualAccount,"TRUE"]],
                            label:ZaMsg.NAD_MailRetentionGrouper, id: "mailretention_settings",
                            items: [
                                { type: _DWT_ALERT_,
                                  containerCssStyle: "padding:0 10px 10px;width:100%;",
                                  style: DwtAlert.INFO,
                                  iconVisible: false,
                                  content: ZaMsg.Alert_EnableMailRetention
                                },
                                {ref:ZaAccount.A_zimbraMailMessageLifetime, type:_SUPERWIZ_LIFETIME2_,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraMailMessageLifetime,
                                    colSizes:["200px", "80px", "220px", "*"],colSpan:1,
                                    visibilityChecks:[[ZaItem.hasReadPermission], [ZaAccount.isEmailRetentionPolicyEnabled]],
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailMessageLifetime},
                                {ref:ZaAccount.A_zimbraMailTrashLifetime, type:_SUPERWIZ_LIFETIME1_,
                                    colSizes:["200px", "80px", "220px", "*"],colSpan:1,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS, msgName:ZaMsg.MSG_zimbraMailTrashLifetime,
                                    visibilityChecks:[[ZaItem.hasReadPermission], [ZaAccount.isEmailRetentionPolicyEnabled]],
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailTrashLifetime},
                                {ref:ZaAccount.A_zimbraMailSpamLifetime, type:_SUPERWIZ_LIFETIME1_,
                                    colSizes:["200px", "80px", "220px", "*"],colSpan:1,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraMailSpamLifetime,
                                    visibilityChecks:[[ZaItem.hasReadPermission], [ZaAccount.isEmailRetentionPolicyEnabled]],
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailSpamLifetime},
                                {ref:ZaAccount.A_zimbraMailDumpsterLifetime, type:_SUPERWIZ_LIFETIME1_,
                                    colSizes:["200px", "80px", "220px", "*"],colSpan:1,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,
                                    msgName:ZaMsg.MSG_zimbraMailDumpsterLifetime,
                                    txtBoxLabel:ZaMsg.LBL_zimbraMailDumpsterLifetime,
                                    visibilityChecks:[[ZaItem.hasReadPermission], [ZaAccount.isEmailRetentionPolicyEnabled], [XForm.checkInstanceValue, ZaAccount.A_zimbraDumpsterEnabled, "TRUE"], [XForm.checkInstanceValue, ZaAccount.A_zimbraDumpsterPurgeEnabled, "TRUE"]],
                                    visibilityChangeEventSources:[ZaAccount.A_zimbraDumpsterEnabled, ZaAccount.A_zimbraDumpsterPurgeEnabled]
                                }
                            ]
                        });
        }

        cases.push({type:_CASE_, caseKey:ZaNewAccountXWizard.ADVANCED_STEP, tabGroupKey:ZaNewAccountXWizard.ADVANCED_STEP, id:"account_form_advanced_step", numCols:1, width:"100%",
                items:advancedCaseItems});
    }
    this._lastStep = this.stepChoices.length;
    xFormObject.items = [
            {type:_OUTPUT_, colSpan:2, align:_CENTER_, valign:_TOP_, ref:ZaModel.currentStep, choices:this.stepChoices, valueChangeEventSources:[ZaModel.currentStep]},
            {type:_SEPARATOR_, align:_CENTER_, valign:_TOP_},
            {type:_SPACER_,  align:_CENTER_, valign:_TOP_},
            {type:_SWITCH_, width:680, align:_LEFT_, valign:_TOP_, items:cases}
        ];
};
ZaXDialog.XFormModifiers["ZaNewAccountXWizard"].push(ZaNewAccountXWizard.myXFormModifier);
}
if (AjxPackage.define("zimbraAdmin.accounts.view.MoveAliasXDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class MoveAliasXDialog
* @contructor MoveAliasXDialog
* @author Greg Solovyev
* @param parent
* param app
**/
MoveAliasXDialog = function(parent,   w, h) {
	if (arguments.length == 0) return;

	this._standardButtons = [DwtDialog.CANCEL_BUTTON];
	var helpButton = new DwtDialog_ButtonDescriptor(ZaXWizardDialog.HELP_BUTTON, ZaMsg.TBB_Help, DwtDialog.ALIGN_LEFT, new AjxCallback(this, this._helpButtonListener));
	var moveButton = new DwtDialog_ButtonDescriptor(MoveAliasXDialog.MOVE_BUTTON, ZaMsg._move, DwtDialog.ALIGN_RIGHT, new AjxCallback(this, this.doMove));	
	var closeButton = new DwtDialog_ButtonDescriptor(MoveAliasXDialog.CLOSE_BUTTON, AjxMsg._close, DwtDialog.ALIGN_RIGHT, new AjxCallback(this, this.closeMe));		
	this._extraButtons = [helpButton,moveButton,closeButton];	
	ZaXDialog.call(this, parent,  null, ZaMsg.MoveAlias_Title, w, h,"MoveAliasXDialog");
	if (this._button[MoveAliasXDialog.MOVE_BUTTON]) {
		this._button[MoveAliasXDialog.MOVE_BUTTON].setEnabled (false);
	}
	this._containedObject = new ZaSearch();
	this.initForm(ZaSearch.myXModel,this.getMyXForm());
	this._helpURL = ZaUtil.HELP_URL;
}

MoveAliasXDialog.prototype = new ZaXDialog;
MoveAliasXDialog.prototype.constructor = MoveAliasXDialog;
MoveAliasXDialog.resultChoices = new XFormChoices([], XFormChoices.OBJECT_REFERENCE_LIST, null, "name");
MoveAliasXDialog.MOVE_BUTTON= ++DwtDialog.LAST_BUTTON;
MoveAliasXDialog.CLOSE_BUTTON = ++DwtDialog.LAST_BUTTON;

MoveAliasXDialog.prototype.popup = 
function (loc) {
	this._containedObject[ZaModel.currentStep] = 1;	
	this._containedObject[ZaSearch.A_selected] = null;
	this._localXForm.setInstance(this._containedObject);
	ZaXWizardDialog.prototype.popup.call(this, loc);
	this._button[MoveAliasXDialog.CLOSE_BUTTON].setEnabled(false);	
	
	//reset choices
	var dynItem = this._localXForm.getItemsById(ZaSearch.A_selected)[0];
	if (dynItem) {
		dynItem.resetChoices();
	}
}


MoveAliasXDialog.prototype.closeMe = 
function() {
	this.popdown();	
}

MoveAliasXDialog.prototype.doMove =
function () {
	this._button[MoveAliasXDialog.MOVE_BUTTON].setEnabled(false);
	this._button[MoveAliasXDialog.CLOSE_BUTTON].setEnabled(true);
	if(this.moveAlias())
		this.goPage(2);
}

MoveAliasXDialog.prototype.goPage = 
function(pageKey) {
	this._containedObject[ZaModel.currentStep] = pageKey;
	this._localXForm.refresh(); //run update script
}

MoveAliasXDialog.prototype.setAlias = 
function (alias) {
	this._alias=alias;
}

MoveAliasXDialog.prototype.moveAlias = 
function() {
	//remove alias
	var name;
	try {
		if(this._containedObject[ZaSearch.A_selected] && this._containedObject[ZaSearch.A_selected].addAlias!=null) {	
			try {
				name = this._alias.name;
				ZaAlias.prototype.remove.call(this._alias);
			} catch (ex) {
				ZaApp.getInstance().getCurrentController()._handleException(ex, "MoveAliasXDialog.prototype.moveAlias:_alias.remove", null, false);
				return false;
			}
			if(name) {
				this._containedObject[ZaSearch.A_selected].addAlias(name);
			} else {
				//throw	
				throw (new AjxException(ZaMsg.FAILED_MOVE_ALIAS, AjxException.UNKNOWN_ERROR, "MoveAliasXDialog.prototype.moveAlias", "Alias name is not available"));
			}
			ZaApp.getInstance().getCurrentController().show();	
			this._containedObject[ZaSearch.A_ResultMsg] = String(ZaMsg.Alias_Moved_To).replace("{0}",name).replace("{1}",this._containedObject[ZaSearch.A_selected].name); 
			return true;							
		}else{
			ZaApp.getInstance().getCurrentController().popupErrorDialog( AjxMessageFormat.format(ZaMsg.WARNING_ALIASES_TARGET_NON_EXIST,[this._containedObject[ZaSearch.A_selected]]));
		}
	} catch (ex) {
		ZaApp.getInstance().getCurrentController()._handleException(ex, "MoveAliasXDialog.prototype.moveAlias", null, false);
		return false;
	}
	return false;
}


MoveAliasXDialog.prototype.getMyXForm = 
function() {	
	var xFormObject = {
		numCols:2,
		items:[
			{type: _SWITCH_,
				items: [
					{type:_CASE_, caseKey:1, 
						items: [
							{type:_DWT_ALERT_,
								content:null,ref:"name",
								getDisplayValue: function (itemVal) {
									var name = this.getForm().parent._alias.name;
									return AjxMessageFormat.format(ZaMsg.MoveAlias_HelpMsg, AjxStringUtil.htmlEncode(name));
								},
								iconVisible: false,
								align:_CENTER_,				
								style: DwtAlert.INFORMATION
							},						
							{type:_DYNSELECT_, ref:ZaSearch.A_selected, dataFetcherClass:ZaSearch, 
								dataFetcherMethod:ZaSearch.prototype.dynSelectSearch,
								dataFetcherTypes:[ZaSearch.ACCOUNTS, ZaSearch.RESOURCES, ZaSearch.DLS],
								dataFetcherAttrs:[ZaItem.A_zimbraId, ZaItem.A_cn, ZaAccount.A_name, ZaAccount.A_displayname, ZaAccount.A_mail],
								autoCompleteEnabled: true,
								toolTipContent:ZaMsg.tt_StartTypingAccountName,
								label:ZaMsg.NAD_AccountName,labelLocation:_LEFT_,
								width:"100%", inputSize:30, editable:true, forceUpdate:true,
								choices:new XFormChoices([], XFormChoices.OBJECT_REFERENCE_LIST, "name", "name"),
								visibilityChecks:[],enableDisableChecks:[],
								onChange: function(value, event, form){
									if ((( value instanceof ZaAccount) || value instanceof ZaDistributionList) 
											&& (value.id)){ 
										//an account or DL is selected
										form.parent._button[MoveAliasXDialog.MOVE_BUTTON].setEnabled(true);
									}
									this.setInstanceValue(value);	
								},
								autoCompleteEnabled : true
							}	
						]
					}, 
					{type:_CASE_, caseKey:2, 
						items :[
							{ type: _DWT_ALERT_,
								style: DwtAlert.INFORMATION,
								iconVisible: false, 
								content: null,
								ref:ZaSearch.A_ResultMsg,align:_CENTER_, valign:_MIDDLE_,
								visibilityChecks:[[XForm.checkInstanceValueNotEmty,ZaSearch.A_ResultMsg]],
				  				visibilityChangeEventSources:[ZaSearch.A_ResultMsg]
							}
						]
					}
				]
			}
		]		
	}
	return xFormObject;
}
}
if (AjxPackage.define("zimbraAdmin.accounts.view.ReindexMailboxXDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ReindexMailboxXDialog
* @contructor ReindexMailboxXDialog
* @author Greg Solovyev
* @param parent
* param w (width)
* param h (height)
**/
ReindexMailboxXDialog = function(parent,   w, h) {
	if (arguments.length == 0) return;
	ZaXDialog.call(this, parent,  null, ZaMsg.Reindex_Title, null,null);
	this.initForm(ZaReindexMailbox.myXModel,this.getMyXForm());
	this._button[DwtDialog.OK_BUTTON].setToolTipContent(ZaMsg.Reindex_Mbx_tt);
	this._containedObject = new ZaReindexMailbox();
	this.pollAction = new AjxTimedAction(this, this.getReindexStatus);
	this._pollHandler = null;
	
	this._helpURL = ReindexMailboxXDialog.helpURL;		
}

ReindexMailboxXDialog.prototype = new ZaXDialog;
ReindexMailboxXDialog.prototype.constructor = ReindexMailboxXDialog;
ReindexMailboxXDialog.helpURL = ZaUtil.HELP_URL;

ReindexMailboxXDialog.isStartEnabled = function () {
	return (this.getInstanceValue(ZaReindexMailbox.A_status) != "running" && this.getInstanceValue(ZaReindexMailbox.A_status) != "started")	
}

ReindexMailboxXDialog.isAbortEnabled = function () {
	return (this.getInstanceValue(ZaReindexMailbox.A_status) == "running" || this.getInstanceValue(ZaReindexMailbox.A_status) == "started")	
}

ReindexMailboxXDialog.isStatusNotError = function () {
	return (this.getInstanceValue(ZaReindexMailbox.A_status) != "error");
}
ReindexMailboxXDialog.prototype.popup = 
function () {
	DwtDialog.prototype.popup.call(this);
	//get status
	this._localXForm.setInstance(this._containedObject);
	if(this._containedObject.mbxId) {
		var callback = new AjxCallback(this, ReindexMailboxXDialog.prototype.getReindexStatusCallBack);
		ZaAccount.getReindexStatus(this._containedObject.mbxId,callback);
		//ZaAccount.parseReindexResponse(ZaAccount.getReindexStatus(this._containedObject.mbxId),this._containedObject);
	}
		
	
	//this._localXForm.refresh();
/*	if(this._containedObject.status == "running" || this._containedObject.status == "started") {
		// schedule next poll
		this._pollHandler = AjxTimedAction.scheduleAction(this.pollAction, this._containedObject.pollInterval);		
	} else if(this._pollHandler) {
		//stop polling
		AjxTimedAction.cancelAction(this._pollHandler);
	}
	*/
}

ReindexMailboxXDialog.prototype.popdown = 
function () {
	if(this._pollHandler) {
		//stop polling
		AjxTimedAction.cancelAction(this._pollHandler);
	}
	DwtDialog.prototype.popdown.call(this);
}

ReindexMailboxXDialog.abortReindexMailbox = 
function(evt) {
	try {
		var instance = this.getInstance();
		//abort outstanding status requests
		if(this.getForm().parent.asynCommand)
			this.getForm().parent.asynCommand.cancel();
			
		var callback = new AjxCallback(this.getForm().parent, ReindexMailboxXDialog.prototype.getReindexStatusCallBack);			
		ZaAccount.abortReindexMailbox(instance.mbxId,callback);
		this.getForm().refresh();
	} catch (ex) {
		this.getForm().getController().getCurrentController()._handleException(ex, "ReindexMailboxXDialog.abortReindexMailbox", null, false);
	}
}

ReindexMailboxXDialog.startReindexMailbox = 
function(evt) {
	try {
		var instance = this.getInstance();
		var callback = new AjxCallback(this.getForm().parent, ReindexMailboxXDialog.prototype.getReindexStatusCallBack);		
		ZaAccount.startReindexMailbox(instance.mbxId,callback);
		this.getForm().refresh();	
	} catch (ex) {
		this.getForm().getController().getCurrentController()._handleException(ex, "ReindexMailboxXDialog.startReindexMailbox", null, false);	
	}
}

ReindexMailboxXDialog.prototype.getReindexStatusCallBack = 
function (resp) {
	ZaAccount.parseReindexResponse(resp,this._containedObject,this._localXForm);
	if((this._containedObject.status == "running" || this._containedObject.status == "started") && this.isPoppedUp()) {
		// schedule next poll
		this._pollHandler = AjxTimedAction.scheduleAction(this.pollAction, this._containedObject.pollInterval);		
	} else if(this._pollHandler) {
		//stop polling
		AjxTimedAction.cancelAction(this._pollHandler);
		this._pollHandler = null;		
	}
	
	//this._localXForm.setInstance(this._containedObject);
	//this._localXForm.refresh();	
}

ReindexMailboxXDialog.prototype.getReindexStatus = 
function () {
	var callback = new AjxCallback(this, this.getReindexStatusCallBack);
	this.asynCommand = ZaAccount.getReindexStatus(this._containedObject.mbxId, callback);
	
}

ReindexMailboxXDialog.prototype.getMyXForm = 
function() {	
	var xFormObject = {
		numCols:2, height:"300px",align:_CENTER_,cssStyle:"text-align:center",
		items:[
			{ type: _DWT_ALERT_,
			  style: DwtAlert.WARNING,
			  iconVisible: true, 
			  content: ZaMsg.WARNING_REINDEX,
			  colSpan:"*",
			  align:_CENTER_,
			  valign:_TOP_
			},
			{type: _DWT_ALERT_,
			 style: DwtAlert.CRITICAL,
			 iconVisible: true, 
			 content: null,
			 ref:ZaReindexMailbox.A_resultMsg,
			 visibilityChangeEventSources:[ZaReindexMailbox.A_status],
			 visibilityChecks:[[XForm.checkInstanceValue,ZaReindexMailbox.A_status,"error"],[XForm.checkInstanceValueNotEmty,ZaReindexMailbox.A_resultMsg]],
			 valueChangeEventSources:[ZaReindexMailbox.A_resultMsg],			  
		  	 align:_CENTER_,
		  	 colSpan:"*"
			},	
			{type:_TEXTAREA_,
				visibilityChangeEventSources:[ZaReindexMailbox.A_status],
				visibilityChecks:[[XForm.checkInstanceValue,ZaReindexMailbox.A_status,"error"],[XForm.checkInstanceValueNotEmty,ZaReindexMailbox.A_errorDetail]],
				valueChangeEventSources:[ZaReindexMailbox.A_errorDetail],
				ref:ZaReindexMailbox.A_errorDetail, 
				label:ZaMsg.FAILED_REINDEX_DETAILS,
				height:"100px", width:"200px",
				colSpan:"*"
			},
			{type:_DWT_ALERT_, 
				ref:ZaReindexMailbox.A_progressMsg,content: null,
				colSpan:"*",
 				iconVisible: true,
				align:_CENTER_,				
				style: DwtAlert.INFORMATION,bmolsnr:true
			},
			{type:_DWT_PROGRESS_BAR_, label:ZaMsg.ReindexMbx_Progress,
				maxValue:null,
				maxValueRef:ZaReindexMailbox.A_numTotal, 
				ref:ZaReindexMailbox.A_numDone,
				valign:_CENTER_,
				align:_CENTER_,	
				wholeCssClass:"progressbar",
				progressCssClass:"progressused",bmolsnr:true
			},		
			{type:_SPACER_,
				visibilityChecks:[ReindexMailboxXDialog.isStatusNotError],
				visibilityChangeEventSources:[ZaReindexMailbox.A_status], 
				height:"150px", width:"490px",colSpan:"*"
			},
			{type:_GROUP_, colSpan:"*", numCols:5, width:"490px",cssStyle:"text-align:center; overflow:hidden", align:_CENTER_, items: [
				{type:_SPACER_, width:"30px", colSpan:1},
				{type:_DWT_BUTTON_, 
					onActivate:"ReindexMailboxXDialog.startReindexMailbox.call(this)", label:ZaMsg.NAD_ACC_Start_Reindexing, 
					enableDisableChecks:[ReindexMailboxXDialog.isStartEnabled],
					enableDisableChangeEventSources:[ZaReindexMailbox.A_status],
					visibilityChecks:[],					
					valign:_BOTTOM_,width:"150px"
				},
				{type:_SPACER_, width:"90px", colSpan:1},
				{type:_DWT_BUTTON_, 
					onActivate:"ReindexMailboxXDialog.abortReindexMailbox.call(this)", label:ZaMsg.NAD_ACC_Abort_Reindexing, 
					enableDisableChecks:[ReindexMailboxXDialog.isAbortEnabled],
					enableDisableChangeEventSources:[ZaReindexMailbox.A_status],
					visibilityChecks:[],					
					valign:_BOTTOM_,width:"150px"				
				},
				{type:_SPACER_, width:"30px", colSpan:1}
			]}
		]		
	}
	return xFormObject;
}
}
if (AjxPackage.define("zimbraAdmin.accounts.view.DeleteAcctsPgrsDlg")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class DeleteAcctsPgrsDlg
* @contructor DeleteAcctsPgrsDlg
* @author Greg Solovyev
* @param parent
* param app
**/


DeleteAcctsPgrsDlg = function(parent,  w, h) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.OK_BUTTON];
	var helpButton = new DwtDialog_ButtonDescriptor(ZaXWizardDialog.HELP_BUTTON, ZaMsg.TBB_Help, DwtDialog.ALIGN_LEFT, new AjxCallback(this, this._helpButtonListener));
	var abortButton = new DwtDialog_ButtonDescriptor(DeleteAcctsPgrsDlg.ABORT_BUTTON, ZaMsg.NAD_AbortDeleting, DwtDialog.ALIGN_RIGHT, new AjxCallback(this, this.abortDeletingAccounts));		
	this._extraButtons = [helpButton, abortButton];
	ZaXDialog.call(this, parent,  null, ZaMsg.NAD_DeletingAccTitle, w, h);
	this._containedObject = [];
	this._currentIndex = 0;
	this._currentAccount = null;
	this.initForm(DeleteAcctsPgrsDlg.myXModel,this.getMyXForm());
	this._pollHandler = null;	
	this._aborted = false;
	this._helpURL = ZaUtil.HELP_URL;
}

DeleteAcctsPgrsDlg._ERROR_MSG = "errorMsg";
DeleteAcctsPgrsDlg._STATUS = "status";
DeleteAcctsPgrsDlg._DELETED_ACCTS = "deletedAccounts";
DeleteAcctsPgrsDlg.helpURL = "managing_accounts/provisioning_accounts.htm";

DeleteAcctsPgrsDlg.myXModel = {
	getDeletedAccounts: function (model, instance) {
		return instance.deletedAccounts;
	},
	setDeletedAccounts: function (value, instance, parentValue, ref) {
		instance.deletedAccounts = value;
	},
	items: [
		{ref:DeleteAcctsPgrsDlg._STATUS, type:_STRING_},
		{ref:DeleteAcctsPgrsDlg._ERROR_MSG, type:_STRING_},
		{ref:DeleteAcctsPgrsDlg._DELETED_ACCTS, type:_LIST_,setter:"set", setterScope:_MODEL_, getter: "getDeletedAccounts", getterScope:_MODEL_}
	]
}
DeleteAcctsPgrsDlg.prototype = new ZaXDialog;
DeleteAcctsPgrsDlg.prototype.constructor = DeleteAcctsPgrsDlg;
DeleteAcctsPgrsDlg.prototype.miniType= 2;
DeleteAcctsPgrsDlg.prototype.supportMinimize = true;
DeleteAcctsPgrsDlg.prototype.toString = function() {
    return "DeleteAcctsPgrsDlg";
}

DeleteAcctsPgrsDlg.prototype.getCacheName = function() {
    return "removeProgressDlg";
}
DeleteAcctsPgrsDlg.ABORT_BUTTON = ++DwtDialog.LAST_BUTTON;

/**
* @method setObject sets the object contained in the view
**/
DeleteAcctsPgrsDlg.prototype.setObject =
function(entry) {
	this._containedObject = entry;
	var obj = new Object();
    obj._uuid = entry._uuid || ZaUtil.getItemUUid();
	obj[DeleteAcctsPgrsDlg._DELETED_ACCTS] = entry[DeleteAcctsPgrsDlg._DELETED_ACCTS] || [];
	obj[DeleteAcctsPgrsDlg._STATUS] = entry[DeleteAcctsPgrsDlg._STATUS] ||  "";
	obj[DeleteAcctsPgrsDlg._ERROR_MSG] = entry[DeleteAcctsPgrsDlg._ERROR_MSG] || null;
	this._localXForm.setInstance(obj);
	this._button[DeleteAcctsPgrsDlg.ABORT_BUTTON].setEnabled(false);		
	this._button[DwtDialog.OK_BUTTON].setEnabled(true);	
}

DeleteAcctsPgrsDlg.prototype.getObject =
function () {
    if (this._localXForm)
        return this._localXForm.getInstance();
    else
        return this._containedObject;
}


DeleteAcctsPgrsDlg.prototype.popup = 
function (loc) {
	ZaXWizardDialog.prototype.popup.call(this, loc);
}


DeleteAcctsPgrsDlg.prototype.abortDeletingAccounts = 
function(evt) {
	try {
		var acc = this._containedObject[this._currentIndex];
		//cancelling the command does not prevent the account from being deleted BUG: 5452
		/*if(acc && acc.deleteCommand)
			acc.deleteCommand.cancel();
			
		*/
		this._button[DeleteAcctsPgrsDlg.ABORT_BUTTON].setEnabled(false);
		var obj = this._localXForm.getInstance();
//		ZaApp.getInstance().getAccountListController().fireRemovalEvent(obj[DeleteAcctsPgrsDlg._DELETED_ACCTS]);			
		AjxTimedAction.cancelAction(this._pollHandler);
		this._pollHandler = null;
		this._aborted = true;
		this._localXForm.getInstance().status = ZaMsg.NAD_DeletingCancelled;
		this._localXForm.refresh();
	} catch (ex) {
		ZaApp.getInstance().getCurrentController()._handleException(ex, "DeleteAcctsPgrsDlg.abortDeletingAccounts", null, false);
	}
}

DeleteAcctsPgrsDlg.prototype.startDeletingAccounts = 
function(evt) {
	try {
		this._aborted = false;
		this.pollAction = new AjxTimedAction(this, this.deleteOneAccount);		
		this._currentIndex=0;
		var obj = new Object();
        obj._uuid = ZaUtil.getItemUUid();
		obj[DeleteAcctsPgrsDlg._STATUS] = AjxMessageFormat.format(ZaMsg.NAD_DeleteAccStatus, [AjxStringUtil.htmlEncode(this._containedObject[this._currentIndex][ZaAccount.A_name])]);
		obj[DeleteAcctsPgrsDlg._DELETED_ACCTS] = new Array();
		this._localXForm.setInstance(obj);
		this._pollHandler = AjxTimedAction.scheduleAction(this.pollAction, "50");		
	} catch (ex) {
		ZaApp.getInstance().getCurrentController()._handleException(ex, "DeleteAcctsPgrsDlg.startDeletingAccounts", null, false);	
	}
}

DeleteAcctsPgrsDlg.prototype.deleteOneAccountCallback = 
function (result) {
	var obj = this._localXForm.getInstance();
	var stopForError = false;
	var ex = result.getException();
	if(ex) {
		//ignore  ZmCsfeException.ACCT_NO_SUCH_ACCOUNT, we are removing them anyway
		if(ex.code != ZmCsfeException.ACCT_NO_SUCH_ACCOUNT)
			stopForError = true;
	}
	if(stopForError) {
		//stop deleting
		AjxTimedAction.cancelAction(this._pollHandler);	
		this._pollHandler = null;		
		this._localXForm.refresh();	
		ZaApp.getInstance().getCurrentController()._handleException(ex, "DeleteAcctsPgrsDlg.prototype.deleteOneAccountCallback", null, false);		
	} else {
		obj[DeleteAcctsPgrsDlg._DELETED_ACCTS].push(this._containedObject[this._currentIndex]);
		this._currentIndex++;
		if((this._currentIndex < this._containedObject.length) && !this._aborted) {
			obj.status = AjxMessageFormat.format(ZaMsg.NAD_DeleteAccStatus, [AjxStringUtil.htmlEncode(this._containedObject[this._currentIndex][ZaAccount.A_name])]);
			this._pollHandler = AjxTimedAction.scheduleAction(this.pollAction, "50");				
		} else {
			//done
			this._button[DeleteAcctsPgrsDlg.ABORT_BUTTON].setEnabled(false);			
			ZaApp.getInstance().getCurrentController().fireRemovalEvent(obj[DeleteAcctsPgrsDlg._DELETED_ACCTS]);						
			AjxTimedAction.cancelAction(this._pollHandler);	
			this._pollHandler = null;
			if(!this._aborted) {
				obj.status = ZaMsg.NAD_FinishedDeletingAccounts;
			}
		}	
		this._localXForm.refresh();
	}
}

DeleteAcctsPgrsDlg.prototype.deleteOneAccount = 
function () {
	var callback = new AjxCallback(this, this.deleteOneAccountCallback);
    if (this._containedObject[this._currentIndex] && this._containedObject[this._currentIndex].remove){
        this._containedObject[this._currentIndex].remove(callback);
        this._button[DeleteAcctsPgrsDlg.ABORT_BUTTON].setEnabled(true);
    }

}


DeleteAcctsPgrsDlg.prototype.getMyXForm = 
function() {	
	var sourceHeaderList = new Array();
	var sortable = 1;
	sourceHeaderList[0] = new ZaListHeaderItem("type", ZaMsg.ALV_Type_col, null, 34, null, "objectClass", true, true);
	sourceHeaderList[1] = new ZaListHeaderItem(ZaAccount.A_name, ZaMsg.ALV_NameAddress_col, null, "auto", sortable++, ZaAccount.A_name, true, true);
	//idPrefix, label, iconInfo, width, sortable, sortField, resizeable, visible
//	sourceHeaderList[2] = new ZaListHeaderItem(ZaAccount.A_displayname, ZaMsg.ALV_DspName_col, null, 100, sortable++,ZaAccount.A_displayname, true, true);

	var xFormObject = {
		numCols:1, height:"300px",width: (AjxEnv.isIE ? "490px" : "495px"),align:_CENTER_,cssStyle:"text-align:center",
		items:[
			{ type: _DWT_ALERT_,
				  style: DwtAlert.INFORMATION,
				  iconVisible: true, 
				  content: null,
				  ref:DeleteAcctsPgrsDlg._STATUS,align:_CENTER_, valign:_MIDDLE_,colSpan:"*",width: (AjxEnv.isIE ? "490px" : "495px"),
				  visibilityChecks:[[XForm.checkInstanceValueEmty,DeleteAcctsPgrsDlg._ERROR_MSG]],
				  visibilityChangeEventSources:[DeleteAcctsPgrsDlg._ERROR_MSG]
			},
			{ type: _DWT_ALERT_,
				  style: DwtAlert.CRITICAL,
				  iconVisible: true, 
				  content: null,
				  ref:DeleteAcctsPgrsDlg._ERROR_MSG, align:_CENTER_, valign:_MIDDLE_,colSpan:"*", width: (AjxEnv.isIE ? "490px" : "495px"),
				  visibilityChecks:[[XForm.checkInstanceValueNotEmty,DeleteAcctsPgrsDlg._ERROR_MSG]],
				  visibilityChangeEventSources:[DeleteAcctsPgrsDlg._ERROR_MSG]				  				  
			},			
			{type:_SPACER_, height:"5"},	
			{type:_OUTPUT_,value:ZaMsg.NAD_DeletedAccounts,colSpan:"*", colSpan:"*",align:_LEFT_},
		   	{type:_SPACER_, height:"10"},
		   	{ref:DeleteAcctsPgrsDlg._DELETED_ACCTS, type:_DWT_LIST_, height:(AjxEnv.isIE ? "180px" : "210px"), width:(AjxEnv.isIE ? "490px" : "495px"), colSpan:"*",  cssClass: "DLSource",align:_CENTER_, 
				forceUpdate: true, widgetClass:ZaAccMiniListView, headerList:sourceHeaderList, hideHeader: false
			}			
		]		
	}
	return xFormObject;
}
}
if (AjxPackage.define("zimbraAdmin.servers.view.ZaServerVolumesListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
 
 /**
 * @author Greg Solovyev
 **/
ZaServerVolumesListView = function(parent, className, posStyle, headerList) {
	//var headerList = this._getHeaderList();
	ZaListView.call(this, parent, className, posStyle, headerList);
}

ZaServerVolumesListView.prototype = new ZaListView;
ZaServerVolumesListView.prototype.constructor  = ZaServerVolumesListView;
ZaServerVolumesListView.prototype.toString = function() {
	return "ZaServerVolumesListView";
};

ZaServerVolumesListView.prototype._createItemHtml =
function(item) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(item, div, DwtListView.TYPE_LIST_ITEM);
	
	var idx = 0;
	html[idx++] = "<table width='100%' cellspacing='0' cellpadding='0'>";

	html[idx++] = "<tr>";
	if(this._headerList) {
		var cnt = this._headerList.length;
		for(var i = 0; i < cnt; i++) {
			var field = this._headerList[i]._field;
			if(field == ZaServer.A_isCurrentVolume) {
				html[idx++] = "<td align=left height=20px width=" + this._headerList[i]._width + ">";				
				var isCurrent=false;
				for(a in ZaServer.currentkeys) {
					if(this.parent && this.parent.instance && this.parent.instance[ZaServer.currentkeys[a]]) {
						if(this.parent.instance[ZaServer.currentkeys[a]] == item[ZaServer.A_VolumeId]) {
							isCurrent=true;
							break;
						} 
					} 
					
				}
				
				if(isCurrent)
					html[idx++] = AjxImg.getImageHtml("Check");
					
				html[idx++] = "</td>";
			} else if(field == ZaServer.A_VolumeName) {
				html[idx++] = "<td align=left height=20px width=" + this._headerList[i]._width + ">";
				html[idx++] = AjxStringUtil.htmlEncode(item[ZaServer.A_VolumeName]);
				html[idx++] = "</td>";
			} else if(field == ZaServer.A_VolumeRootPath) {
				html[idx++] = "<td align=left height=20px width=" + this._headerList[i]._width + ">";
				html[idx++] = AjxStringUtil.htmlEncode(item[ZaServer.A_VolumeRootPath]);
				html[idx++] = "</td>";
			} else if(field == ZaServer.A_VolumeType) {
				html[idx++] = "<td align=left height=20px width=" + this._headerList[i]._width + ">";
				html[idx++] = ZaServer.volumeTypeChoices.getChoiceByValue(item[ZaServer.A_VolumeType]);
				html[idx++] = "</td>";
			} else if(field == ZaServer.A_VolumeCompressBlobs) {
				html[idx++] = "<td align=left height=20px width=" + this._headerList[i]._width + ">";
				if(item[ZaServer.A_VolumeCompressBlobs])
					html[idx++] = ZaMsg.Yes;
				else
					html[idx++] = ZaMsg.No;
					
				html[idx++] = "</td>";
			} else if(field == ZaServer.A_VolumeCompressionThreshold) {
				html[idx++] = "<td align=left height=20px width=" + this._headerList[i]._width + ">";
				html[idx++] = AjxMessageFormat.format (ZaMsg.VM_VolumeCompressThresholdBytes, [item[ZaServer.A_VolumeCompressionThreshold]]);
				html[idx++] = "</td>";
			}
		}
	} else {
		html[idx++] = "<td width=100%>";
		html[idx++] = AjxStringUtil.htmlEncode(item);
		html[idx++] = "</td>";
	}
	
	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}


ZaServerVolumesListView.prototype._setNoResultsHtml = function() {
	var buffer = new AjxBuffer();
	var	div = document.createElement("div");
	
	buffer.append("<table width='100%' cellspacing='0' cellpadding='1'>",
				  "<tr><td class='NoResults'><br>&nbsp",
				  "</td></tr></table>");
	
	div.innerHTML = buffer.toString();
	this._addRow(div);
};

ZaServerVolumesListView.prototype._sortColumn = function (columnItem, bSortAsc){
	if (bSortAsc) {
		var comparator = function (a, b) {
			return (a < b)? 1 :((a > b)? -1 : 0);
		};
		this.getList().sort(comparator);
	} else {
		this.getList().sort();
	}
};
}
if (AjxPackage.define("zimbraAdmin.servers.view.ZaEditVolumeXDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaEditVolumeXDialog
* @contructor ZaEditVolumeXDialog
* @author Greg Solovyev
* @param parent
* param app
**/
ZaEditVolumeXDialog = function(parent, w, h, title) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];	
	ZaXDialog.call(this, parent,null, title, w, h);
	this._containedObject = {};
	this.initForm(ZaServer.volumeObjModel,this.getMyXForm());
	this._helpURL = ZaEditVolumeXDialog.helpURL;
}

ZaEditVolumeXDialog.prototype = new ZaXDialog;
ZaEditVolumeXDialog.prototype.constructor = ZaEditVolumeXDialog;
ZaEditVolumeXDialog.helpURL = ZaUtil.HELP_URL;

ZaEditVolumeXDialog.prototype.getMyXForm = 
function() {	
	var xFormObject = {
		numCols:1,
		items:[
			{type:_ZAWIZGROUP_, isTabGroup:true,
				items:[
					{ref:ZaServer.A_VolumeName, type:_TEXTFIELD_, label:ZaMsg.LBL_VM_VolumeName, labelLocation:_LEFT_, width:250, visibilityChecks:[],enableDisableChecks:[]},
					{ref:ZaServer.A_VolumeRootPath, type:_TEXTFIELD_, label:ZaMsg.LBL_VM_VolumeRootPath, labelLocation:_LEFT_, width:250, visibilityChecks:[],enableDisableChecks:[]},
					{ref:ZaServer.A_VolumeType, type:_OSELECT1_, choices:ZaServer.volumeTypeChoices,width:250, label:ZaMsg.LBL_VM_VolumeType, visibilityChecks:[],enableDisableChecks:[]},
					{ref:ZaServer.A_VolumeCompressBlobs,
						type:_WIZ_CHECKBOX_, label:ZaMsg.VM_VolumeCompressBlobs,
						trueValue:true, falseValue:false, visibilityChecks:[],enableDisableChecks:[]
					},
					{type:_GROUP_,numCols:3,colSpan:2,colSizes:["200px","150px","125px"],
						items:[
							{ref:ZaServer.A_VolumeCompressionThreshold, type:_TEXTFIELD_, label:ZaMsg.LBL_VM_VolumeCompressThreshold, labelLocation:_LEFT_, visibilityChecks:[],enableDisableChecks:[]},
							{type:_OUTPUT_,label:null,labelLocation:_NONE_,value:ZaMsg.NAD_bytes,align:_LEFT_, visibilityChecks:[],enableDisableChecks:[]}
						]
					}
					
				]
			}
		]
	};
	return xFormObject;
}
}
if (AjxPackage.define("zimbraAdmin.servers.view.ZaProxyPortWarningXDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaProxyPortWarningXDialog
* @contructor ZaProxyPortWarningXDialog
* @author Greg Solovyev
* @param parent
* param app
**/
ZaProxyPortWarningXDialog = function(parent, w, h, title, instance) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];	
	ZaXDialog.call(this, parent,null, title, w, h);
	this._containedObject = instance ? instance :  {selectedChoice:0, choice1Label:"",choice2Label:"",choice3Label:"",warningMsg:""};
	var objModel = {
		items:[
			{id:"selectedChoice", type:_NUMBER_,defaultValue:0},
			{id:"choice1Label", type:_STRING_,defaultValue:ZaMsg.Server_WrongPortWarning_OP1},
			{id:"choice2Label", type:_STRING_,defaultValue:ZaMsg.Server_WrongPortWarning_OP2},
			{id:"choice3Label", type:_STRING_,defaultValue:ZaMsg.Server_WrongPortWarning_OP3},	
			{id:"warningMsg", type:_STRING_,defaultValue:ZaMsg.Server_WrongPortWarning}
		]
	}
	this.initForm(objModel,this.getMyXForm(),this._containedObject);
}

ZaProxyPortWarningXDialog.prototype = new ZaXDialog;
ZaProxyPortWarningXDialog.prototype.constructor = ZaProxyPortWarningXDialog;

ZaProxyPortWarningXDialog.prototype.getMyXForm = 
function() {	
	var xFormObject = {
		numCols:1,
		items:[
			{type:_ZAWIZGROUP_,numCols:2,colSizes:["100px","400px"],
				items:[
					{ type: _DWT_ALERT_,
					  containerCssStyle: "padding-bottom:0px",
					  style: DwtAlert.WARNING,
					  iconVisible: true, 
					  ref:"warningMsg",
					  forceUpdate: true
					},
					{type:_RADIO_LABEL_,forceUpdate: true, ref:"selectedChoice",labelRef:"choice1Label",label:"N/A",groupname:"proxyChoice", value:0},
					{type:_RADIO_LABEL_,forceUpdate: true, ref:"selectedChoice",labelRef:"choice2Label",label:"N/A",groupname:"proxyChoice", value:1},
					{type:_RADIO_LABEL_,forceUpdate: true, ref:"selectedChoice",labelRef:"choice3Label",label:"N/A",groupname:"proxyChoice", value:2}
				]
			}
		]
	};
	return xFormObject;
}
}
if (AjxPackage.define("zimbraAdmin.servers.view.ZaServerListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaServerListView
* @param parent
* @author Greg Solovyev
**/

ZaServerListView = function(parent) {
	if (arguments.length == 0) return;
	var className = null;
	var posStyle = DwtControl.ABSOLUTE_STYLE;	
	var headerList = ZaServerListView._getHeaderList();
	
	ZaListView.call(this, {
		parent:parent, 
		className:className, 
		posStyle:posStyle, 
		headerList:headerList,
		id:ZaId.TAB_SERVER_MANAGE
	});

	this._appCtxt = this.shell.getData(ZaAppCtxt.LABEL);
}

ZaServerListView.prototype = new ZaListView;
ZaServerListView.prototype.constructor = ZaServerListView;

ZaServerListView.prototype.toString = 
function() {
	return "ZaServerListView";
}

ZaServerListView.prototype.getTitle = 
function () {
	return ZaMsg.Servers_view_title;
}

ZaServerListView.prototype.getTabIcon =
function () {
	return "Server";
}

/**
* Renders a single item as a DIV element.
*/
ZaServerListView.prototype._createItemHtml =
function(server, now, isDragProxy) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(server, div, DwtListView.TYPE_LIST_ITEM);
	
	var idx = 0;
	html[idx++] = "<table width='100%'>";
	html[idx++] = "<tr>";
	var cnt = this._headerList.length;
	for(var i = 0; i < cnt; i++) {
		var field = this._headerList[i]._field;
		if(field == "type") {
			// type
			html[idx++] = "<td width=" + this._headerList[i]._width + ">" + AjxImg.getImageHtml("Server") + "</td>";
		} else if(field == ZaServer.A_ServiceHostname) {	
			// name
			html[idx++] = "<td align='left' width=" + this._headerList[i]._width + "><nobr>";
			html[idx++] = AjxStringUtil.htmlEncode(server.attrs[ZaServer.A_ServiceHostname]);
			html[idx++] = "</nobr></td>";
		} else if(field == ZaServer.A_description) {	
			// description
			html[idx++] = "<td align='left' width=" + this._headerList[i]._width + "><nobr>";
			html[idx++] = AjxStringUtil.htmlEncode(
				ZaItem.getDescriptionValue(server.attrs[ZaServer.A_description]));
			html[idx++] = "</nobr></td>";
		}
	}
	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}

ZaServerListView._getHeaderList =
function() {

	var headerList = new Array();
	var sortable=1;
	var i = 0 ;
	//idPrefix, label, iconInfo, width, sortable, sortField, resizeable, visible
	headerList[i++] = new ZaListHeaderItem("type", null, null, "22px", null, "objectClass", false, true);
	headerList[i++] = new ZaListHeaderItem(ZaServer.A_ServiceHostname, ZaMsg.SLV_ServiceHName_col, null, 200, sortable++, ZaServer.A_ServiceHostname, true, true);
	headerList[i++] = new ZaListHeaderItem(ZaServer.A_description, ZaMsg.DLV_Description_col, null, "auto", null, ZaServer.A_description, true, true);
		
	return headerList;
}


}
if (AjxPackage.define("zimbraAdmin.servers.view.ZaServerMiniListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaServerMiniListView
* @param parent
* @author Greg Solovyev
**/

ZaServerMiniListView = function(parent, className, posStyle, headerList) {
	if (arguments.length == 0) return;
	ZaListView.call(this, parent, className, posStyle, headerList);
	this.hideHeader = false;
}  

ZaServerMiniListView.prototype = new ZaListView;
ZaServerMiniListView.prototype.constructor = ZaServerMiniListView;

ZaServerMiniListView.prototype.toString = 
function() {
	return "ZaServerMiniListView";
}

ZaServerMiniListView.prototype.createHeaderHtml = function (defaultColumnSort) {
	if(!this.hideHeader) {
		DwtListView.prototype.createHeaderHtml.call(this,defaultColumnSort);
	} 
}

/**
* Renders a single item as a DIV element.
*/
ZaServerMiniListView.prototype._createItemHtml =
function(server) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(server, div, DwtListView.TYPE_LIST_ITEM);
	
	var idx = 0;
	html[idx++] = "<table width='100%' cellspacing='0' cellpadding='0'>";
	html[idx++] = "<tr>";
	var cnt = this._headerList.length;
	for(var i = 0; i < cnt; i++) {
		var field = this._headerList[i]._field;
		if(field == ZaServer.A_ServiceHostname) {	
			// name
			html[idx++] = "<td align='left' width=" + this._headerList[i]._width + "><nobr>";
			html[idx++] = AjxStringUtil.htmlEncode(server.attrs[ZaServer.A_ServiceHostname]);
			html[idx++] = "</nobr></td>";
		} else if (field == "status") {
			html[idx++] = "<td width=" + this._headerList[i]._width + ">";
			switch(server.status) {
				case "processing":
					html[idx++] = AjxImg.getImageHtml("DwtWait16Icon");
				break;
				case "error":
					html[idx++] = AjxImg.getImageHtml("Cancel");
				break;
				case "success":
					html[idx++] = AjxImg.getImageHtml("Check");
				break;
				default:
					html[idx++] = AjxImg.getImageHtml("QuestionMark");	
				break;
			}
			
			html[idx++] = "</td>";
		}
	}
	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}
}
if (AjxPackage.define("zimbraAdmin.servers.view.ZaFlushCacheXDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaFlushCacheXDialog
* @contructor ZaFlushCacheXDialog
* @author Greg Solovyev
* @param parent
* @param w
* @param h
* @param title
**/
ZaFlushCacheXDialog = function(parent, server) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.OK_BUTTON];	
	ZaXDialog.call(this, parent,null, ZaMsg.FlushCacheDlgTitle + " (" + server.name + ")", "480px", "380px","ZaFlushCacheXDialog", ZaId.FLUSH_SERVER_CACHE + server.id);
	this._containedObject = {};
	this.initForm(ZaServer.volumeObjModel,this.getMyXForm());
    this._helpURL = ZaUtil.HELP_URL;
    ZaApp.getInstance().dialogs["ZaFlushCacheXDialog_"+ server.id] = this;
}

ZaFlushCacheXDialog.prototype = new ZaXDialog;
ZaFlushCacheXDialog.prototype.supportMinimize = true;
ZaFlushCacheXDialog.prototype.constructor = ZaFlushCacheXDialog;

ZaFlushCacheXDialog.flushingServerModel = {
	type:_OBJECT_,
	items:[
		{id:ZaItem.A_zimbraId, type:_STRING_, ref:"attrs/"+ZaItem.A_zimbraId},
		{id:"status", type:_NUMBER_,ref:"status"},
		{id:ZaServer.A_name, ref:"attrs/" + ZaServer.A_name, type:_STRING_},
		{id:ZaServer.A_ServiceHostname, ref:"attrs/"+ZaServer.A_ServiceHostname, type:_HOSTNAME_OR_IP_, maxLength:256},
		{id:ZaServer.A_zimbraMailProxyServiceEnabled, ref:"attrs/"+ZaServer.A_zimbraMailProxyServiceEnabled, type:_ENUM_, choices:[false,true]},
		{id:ZaServer.A_zimbraMailboxServiceInstalled, ref:"attrs/"+ZaServer.A_zimbraMailboxServiceInstalled, type:_ENUM_, choices:[false,true]}
	]
};

ZaFlushCacheXDialog.xModel = {
	items: [
		{id:"statusMessage", ref:"statusMessage", type:_STRING_},
		{id:"flushZimlet", ref:"flushZimlet", type: _ENUM_, choices: [false,true] },
		{id:"flushSkin", ref:"flushSkin", type: _ENUM_, choices: [false,true] },
		{id:"flushLocale", ref:"flushSkin", type: _ENUM_, choices: [false,true] },
		{id:"serverList", ref:"serverList", type:_LIST_,listItem:ZaFlushCacheXDialog.flushingServerModel},
		{id:"status", type:_NUMBER_,ref:"status"}

	]	
};

ZaFlushCacheXDialog.flushCacheCalback = 
function (params, resp) {
	if(params.busyId)
		ZaApp.getInstance().getAppCtxt().getShell().setBusy(false, params.busyId);	
	
	var ix = params.ix;
	var newServerList = [];
	var serverList = this.getInstanceValue("serverList");
	newServerList._version = serverList._version+1;
	for(var i=0; i< serverList.length; i++) {
		newServerList.push(serverList[i]);
	}	
	if(resp.isException && resp.isException()) {
		this.getModel().setInstanceValue(this.getInstance(),"status",0);
		var msg = AjxMessageFormat.format (ZaMsg.ERROR_FAILED_FLUSH_CACHE,[params.serverList[params.ix].attrs[ZaServer.A_name]]);
		this.getModel().setInstanceValue(this.getInstance(),"statusMessage",msg);
		newServerList[ix].status = "error";		
		this.getModel().setInstanceValue(this.getInstance(),"serverList",newServerList);
		ZaApp.getInstance().getCurrentController()._handleException(resp.getException(),"ZaFlushCacheXDialog.flushCacheCalback", null, false);
	} else if(resp.getResponse() && resp.getResponse().Body && resp.getResponse().Body.BatchResponse && resp.getResponse().Body.BatchResponse.Fault) {
		this.getModel().setInstanceValue(this.getInstance(),"status",0);
		this.getModel().setInstanceValue(this.getInstance(),"statusMessage",msg);
		var fault = resp.getResponse().Body.BatchResponse.Fault;
		if(fault instanceof Array)
			fault = fault[0];
			
		if (fault) {
			// JS response with fault
			var ex = ZmCsfeCommand.faultToEx(fault);
			ZaApp.getInstance().getCurrentController()._handleException(ex,"ZaFlushCacheXDialog.flushCacheCalback", null, false);
		}		
	} else {
		var busyid = Dwt.getNextId ();
		ix++;
		newServerList._version = serverList._version+1;
		newServerList[ix-1].status = "success";
		if(ix >= serverList.length) {
			this.getModel().setInstanceValue(this.getInstance(),"status",0);
			this.getModel().setInstanceValue(this.getInstance(),"statusMessage",ZaMsg.FinishedFlushCache);
			this.getModel().setInstanceValue(this.getInstance(),"serverList",newServerList);	
		} else {
			newServerList[ix].status = "processing";
			this.getModel().setInstanceValue(this.getInstance(),"serverList",newServerList);
			params.busyid = busyid;
			params.ix = ix;
			var callback = new AjxCallback(this, ZaFlushCacheXDialog.flushCacheCalback, params);
			params.callback = callback;
			this.getModel().setInstanceValue(this.getInstance(),"status",1);
			this.getModel().setInstanceValue(this.getInstance(),"statusMessage",AjxMessageFormat.format(ZaMsg.BUSY_FLUSH_CACHE_SERVER,[params.serverList[params.ix].attrs[ZaServer.A_name]]));
			ZaServer.flushCache(params);		
		}
	}
}
ZaFlushCacheXDialog.flushButtonListener = 
function () {
	var busyid = Dwt.getNextId ();
	var params = this.getInstance();
	params.ix = 0;
	params.busyId = busyid;
	var callback = new AjxCallback(this, ZaFlushCacheXDialog.flushCacheCalback, params);
	params.callback = callback;
	this.getModel().setInstanceValue(this.getInstance(),"status",1);
	this.getModel().setInstanceValue(this.getInstance(),"statusMessage",AjxMessageFormat.format(ZaMsg.BUSY_FLUSH_CACHE_SERVER,[params.serverList[params.ix].attrs[ZaServer.A_name]]));
	ZaServer.flushCache(params);
}

ZaFlushCacheXDialog.prototype.isFlushBtnEnabled = 
function () {
	return (
		(this.getInstanceValue("status") < 1) && (this.getInstanceValue("serverList").length > 0) && 
		(this.getInstanceValue("flushZimlet") || this.getInstanceValue("flushSkin") || this.getInstanceValue("flushLocale"))
	);
	
}

ZaFlushCacheXDialog.prototype.getMyXForm = 
function() {	
	var srvHeaderList = []; 
	var sortable=1;
	srvHeaderList[0] = new ZaListHeaderItem(ZaServer.A_ServiceHostname, ZaMsg.SLV_ServiceHName_col, null, "auto", sortable++, ZaServer.A_ServiceHostname, true, true);
	srvHeaderList[1] = new ZaListHeaderItem("status", ZaMsg.STV_Status_col, null, 40, sortable++, "status", true, true);
	
	var xFormObject = {
		numCols:1,
		items:[
			{type:_ZAWIZGROUP_, isTabGroup:true,
                colSizes:["200px", "275px"],
				items:[
					{ type: _DWT_ALERT_,
						  style: DwtAlert.WARNING,
						  iconVisible: true, 
						  content: ZaMsg.Alert_FlushCache,
						  align:_CENTER_, valign:_MIDDLE_,colSpan:2,width:"460px",
						  visibilityChecks:[]
					},
					{ type: _DWT_ALERT_,
						  style: DwtAlert.INFORMATION,
						  iconVisible: true, 
						  content: null,
						  ref:"statusMessage",
						  align:_CENTER_, valign:_MIDDLE_,colSpan:2,width:"460px",
						  visibilityChecks:[[XForm.checkInstanceValueNotEmty,"statusMessage"]],
						  visibilityChangeEventSources:["statusMessage"],bmolsnr:true
					},
					{ref:"serverList", type:_DWT_LIST_, labelLocation:_NONE_, label:null,  height:"120", width:"460",colSpan:2,
						headerList:srvHeaderList,align:_CENTER_,
						visibilityChecks:[],enableDisableChecks:[],widgetClass:ZaServerMiniListView,valueChangeEventSources:["serverList"]
					},
					{ref:"flushZimlet",
						type:_WIZ_CHECKBOX_, label:ZaMsg.Flush_zimlet_cache,
						trueValue:true, falseValue:false, visibilityChecks:[],enableDisableChecks:[]
					},
					{ref:"flushSkin",
						type:_WIZ_CHECKBOX_, label:ZaMsg.Flush_theme_cache,
						trueValue:true, falseValue:false, visibilityChecks:[],enableDisableChecks:[]
					},
					{ref:"flushLocale",
						type:_WIZ_CHECKBOX_, label:ZaMsg.Flush_locale_cache,
						trueValue:true, falseValue:false, visibilityChecks:[],enableDisableChecks:[]
					},					
					{type:_CELLSPACER_},
					{
						type:_DWT_BUTTON_, label:ZaMsg.FlushCacheBtn,width:"100px",
						onActivate:"ZaFlushCacheXDialog.flushButtonListener.call(this);",
						enableDisableChangeEventSources:["status","flushZimlet","flushSkin","flushLocale"],
						enableDisableChecks:[ZaFlushCacheXDialog.prototype.isFlushBtnEnabled]						
					}
				]
			}
		]
	};
	return xFormObject;
}
}
if (AjxPackage.define("zimbraAdmin.servers.view.ZaServerXFormView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaServerXFormView creates an view of one Server object
* @contructor
* @param parent {DwtComposite}
* @param app {@link ZaApp}
* @author Greg Solovyev
**/
ZaServerXFormView = function(parent, entry) {
	ZaTabView.call(this, {
		parent:parent, 
		iKeyName:"ZaServerXFormView",
		contextId:ZaId.TAB_SERVER_EDIT
	});	
	this.TAB_INDEX = 0;
	this.initForm(ZaServer.myXModel,this.getMyXForm(entry), null);
	this._localXForm.setController(ZaApp.getInstance());
}

ZaServerXFormView.prototype = new ZaTabView();
ZaServerXFormView.prototype.constructor = ZaServerXFormView;
ZaTabView.XFormModifiers["ZaServerXFormView"] = new Array();
ZaServerXFormView.setObjectMethods = new Array();
ZaServerXFormView.indexVolChoices = new XFormChoices([], XFormChoices.OBJECT_LIST, ZaServer.A_VolumeId, ZaServer.A_VolumeName);
ZaServerXFormView.messageVolChoices = new XFormChoices([], XFormChoices.OBJECT_LIST,ZaServer.A_VolumeId, ZaServer.A_VolumeName);
ZaServerXFormView.onFormFieldChanged = 
function (value, event, form) {
	//DBG.println (AjxDebug.DBG1, "On Form Field Changed ...");
	
	form.parent.setDirty(true);
	this.setInstanceValue(value);
	return value;
}

ZaServerXFormView.onReverseLookupTargetFieldChanged = 
function (value, event, form) {
	DBG.println (AjxDebug.DBG1, "On Form Field Changed ...");
	
	form.parent.setDirty(true);
	this.setInstanceValue(value);
	if(value=="TRUE") {
		this.setInstanceValue("TRUE","/attrs/"+ZaServer.A_ImapCleartextLoginEnabled);
		this.setInstanceValue("TRUE","/attrs/"+ZaServer.A_Pop3CleartextLoginEnabled);
	}
	return value;
}


ZaServerXFormView.prototype.setObject = 
function (entry) {
    this.entry = entry;
	this._containedObject = new ZaServer();
	this._containedObject.attrs = new Object();
	
	this._containedObject[ZaServer.A_showVolumes] = entry[ZaServer.A_showVolumes];
    this._containedObject[ZaServer.A_ServiceHostname] = entry[ZaServer.A_ServiceHostname];
	this._containedObject.name = entry.name;
	this._containedObject.type = entry.type ;

	if(entry.rights)
		this._containedObject.rights = entry.rights;
	
	if(entry.setAttrs)
		this._containedObject.setAttrs = entry.setAttrs;
	
	if(entry.getAttrs)
		this._containedObject.getAttrs = entry.getAttrs;
		
	if(entry._defaultValues)
		this._containedObject._defaultValues = entry._defaultValues;
		
	if(entry.id) this._containedObject.id = entry.id;

	this._containedObject[ZaServer.A_Volumes] = [];
	if(entry.attrs) {
        for (var a in entry.attrs) {
            var modelItem = this._localXForm.getModel().getItem(a) ;
            if ((modelItem != null && modelItem.type == _LIST_)
               || (entry.attrs[a] != null && entry.attrs[a] instanceof Array))
            {  //need deep clone
                this._containedObject.attrs [a] =
                        ZaItem.deepCloneListItem (entry.attrs[a]);
            } else {
                this._containedObject.attrs[a] = entry.attrs[a];
            }
        }
	}

	if(ZaItem.modelExtensions["ZaServer"]) {
		for(var i = 0; i< ZaItem.modelExtensions["ZaServer"].length;i++) {
			var ext = ZaItem.modelExtensions["ZaServer"][i];
			if(entry[ext]) {
				this._containedObject[ext] = {};
		        for (var a in entry[ext]) {
		            var modelItem = this._localXForm.getModel().getItem(a) ;
		            if ((modelItem != null && modelItem.type == _LIST_)
		               || (entry[ext][a] != null && entry[ext][a] instanceof Array))
		            {  //need deep clone
		                this._containedObject[ext][a] =
		                        ZaItem.deepCloneListItem (entry[ext][a]);
		            } else {
		                this._containedObject[ext][a] = entry[ext][a];
		            }
		        }
			}
			
		}
	}
	
	if(entry[ZaServer.A_Volumes]) {
		for(var a in entry[ZaServer.A_Volumes]) {
			this._containedObject[ZaServer.A_Volumes][a] = {};
			if(entry[ZaServer.A_Volumes][a]) {
				for(var v in entry[ZaServer.A_Volumes][a]) {
					this._containedObject[ZaServer.A_Volumes][a][v] = entry[ZaServer.A_Volumes][a][v];
				}
			}
		}		
	}
	if(!entry[ZaModel.currentTab])
		this._containedObject[ZaModel.currentTab] = "1";
	else
		this._containedObject[ZaModel.currentTab] = entry[ZaModel.currentTab];

	if(entry[ZaServer.A_showVolumes] && this._containedObject[ZaServer.A_Volumes])	{
		this._containedObject[ZaServer.A_Volumes].sort(ZaServer.compareVolumesByName);		
		this._containedObject[ZaServer.A_Volumes]._version=entry[ZaServer.A_Volumes]._version ? entry[ZaServer.A_Volumes]._version : 1;
		var cnt = this._containedObject[ZaServer.A_Volumes].length;
		var indexArr = [];
		var msgArr = [];
		for(var i=0;i<cnt;i++) {
			if(this._containedObject[ZaServer.A_Volumes][i][ZaServer.A_VolumeType]==ZaServer.INDEX) {
				indexArr.push(this._containedObject[ZaServer.A_Volumes][i]);
			} else if(this._containedObject[ZaServer.A_Volumes][i][ZaServer.A_VolumeType] == ZaServer.MSG) {
				msgArr.push(this._containedObject[ZaServer.A_Volumes][i])
			}
		}
	}
	ZaServerXFormView.indexVolChoices.setChoices(indexArr);
	ZaServerXFormView.indexVolChoices.dirtyChoices();	
	
	ZaServerXFormView.messageVolChoices.setChoices(msgArr);
	ZaServerXFormView.messageVolChoices.dirtyChoices();	
	
	//Instrumentation code start
	if(ZaServerXFormView.setObjectMethods) {
		var methods = ZaServerXFormView.setObjectMethods;
		var cnt = methods.length;
		for(var i = 0; i < cnt; i++) {
			if(typeof(methods[i]) == "function") {
				try {
					methods[i].call(this,entry);
				} catch (ex) {
					this._handleException(ex, "ZaServerXFormView.prototype.setObject");
					break;
				}
			}
		}
	}
	//Instrumentation code end	
	
	for(var key in ZaServer.currentkeys) {
		if(entry[ZaServer.currentkeys[key]]) {
			this._containedObject[ZaServer.currentkeys[key]] = entry[ZaServer.currentkeys[key]];
		}
	}
	this._containedObject.newVolID=-1;			

	this._localXForm.setInstance(this._containedObject);	
	
	this.formDirtyLsnr = new AjxListener(ZaApp.getInstance().getCurrentController(), ZaXFormViewController.prototype.handleXFormChange);
	this._localXForm.addListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, this.formDirtyLsnr);
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, this.formDirtyLsnr);	
}


ZaServerXFormView.getTLSEnabled = function () {
	var value = this.getModel().getInstanceValue(this.getInstance(),ZaServer.A_zimbraMtaSaslAuthEnable);
	return value == 'yes';
}

ZaServerXFormView.getIMAPEnabled = function () {
	var value = this.getModel().getInstanceValue(this.getInstance(),ZaServer.A_ImapServerEnabled);
	return value == 'TRUE';
}

ZaServerXFormView.getIMAPSSLEnabled = function () {
	var value = this.getModel().getInstanceValue(this.getInstance(),ZaServer.A_ImapSSLServerEnabled);	
	return (value == 'TRUE' && ZaServerXFormView.getIMAPEnabled.call(this));
}

ZaServerXFormView.getPOP3Enabled = function () {
	var value = this.getModel().getInstanceValue(this.getInstance(),ZaServer.A_Pop3ServerEnabled);
	return value == 'TRUE';
}

ZaServerXFormView.getPOP3SSLEnabled = function () {
	var value = this.getModel().getInstanceValue(this.getInstance(),ZaServer.A_Pop3SSLServerEnabled);
	return (value == 'TRUE' && ZaServerXFormView.getPOP3Enabled.call(this));
}

ZaServerXFormView.getMailClientEnabled = function () {
	var value = this.getModel().getInstanceValue(this.getInstance(),ZaServer.A_showVolumes);
	return value;
}

ZaServerXFormView.getIsReverseProxyLookupTarget = function () {
	return (this.getModel().getInstanceValue(this.getInstance(),ZaServer.A_zimbraReverseProxyLookupTarget) == "TRUE");
}

ZaServerXFormView.volumeSelectionListener = 
function (ev) {
	//var instance = this.getInstance();

	var arr = this.widget.getSelection();	
	if(arr && arr.length) {
		arr.sort(ZaServer.compareVolumesByName);
		this.getModel().setInstanceValue(this.getInstance(), ZaServer.A2_volume_selection_cache, arr);
		//instance.volume_selection_cache = arr;
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaServer.A2_volume_selection_cache, null);
		//instance.volume_selection_cache = null;
	}	

	if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		ZaServerXFormView.editButtonListener.call(this);
	}	
}

ZaServerXFormView.isEditVolumeEnabled = function () {
	return (!AjxUtil.isEmpty(this.getInstanceValue(ZaServer.A2_volume_selection_cache)) && this.getInstanceValue(ZaServer.A2_volume_selection_cache).length==1);
}

ZaServerXFormView.isDeleteVolumeEnabled = function () {
	if(!AjxUtil.isEmpty(this.getInstanceValue(ZaServer.A2_volume_selection_cache))) {
		var arr = this.getInstanceValue(ZaServer.A2_volume_selection_cache);
		for(var i = 0; i < arr.length;i++) {
			for(a in ZaServer.currentkeys) {
				if(arr[i][ZaServer.A_VolumeId]==this.getInstanceValue(ZaServer.currentkeys[a]))
					return false;			
			}
		}
		return true;
	} else 
		return false;
}

ZaServerXFormView.updateVolume = function () {
	if(this.parent.editVolumeDlg) {
		this.parent.editVolumeDlg.popdown();		
		var obj = this.parent.editVolumeDlg.getObject();
		var soapDoc = AjxSoapDoc.create("ModifyVolumeRequest", ZaZimbraAdmin.URN, null);		
		soapDoc.getMethod().setAttribute(ZaServer.A_VolumeId, obj[ZaServer.A_VolumeId]);	
		var elVolume = soapDoc.set("volume", null);
		elVolume.setAttribute("type", obj[ZaServer.A_VolumeType]);
		elVolume.setAttribute("name", obj[ZaServer.A_VolumeName]);	
		elVolume.setAttribute("rootpath", obj[ZaServer.A_VolumeRootPath]);		
		elVolume.setAttribute("compressBlobs", obj[ZaServer.A_VolumeCompressBlobs]);		
		elVolume.setAttribute("compressionThreshold", obj[ZaServer.A_VolumeCompressionThreshold]);
		var callback = new AjxCallback(this,ZaServerXFormView.prototype.modifyVolumeCallback);
		var params = {
			soapDoc: soapDoc,
			targetServer: this.getInstanceValue(ZaItem.A_zimbraId),
			asyncMode: true,
			callback:callback
		}
		
		var reqMgrParams = {
			controller : ZaApp.getInstance().getCurrentController(),
			busyMsg : ZaMsg.BUSY_CREATE_VOL
		}
		ZaRequestMgr.invoke(params, reqMgrParams) ;		

		/*
		var instance = this.getInstance();
		var volumes = [];
		var cnt = instance[ZaServer.A_Volumes].length;
		for (var i=0; i< cnt; i++) {
			volumes[i] = instance[ZaServer.A_Volumes][i];
		}
		var dirty = false;
		
		if(volumes[obj._index]) {
			if(volumes[obj._index][ZaServer.A_VolumeName] != obj[ZaServer.A_VolumeName]) {
				volumes[obj._index][ZaServer.A_VolumeName] = obj[ZaServer.A_VolumeName];
				dirty=true;
			}
			if(volumes[obj._index][ZaServer.A_VolumeRootPath] != obj[ZaServer.A_VolumeRootPath]) {
				volumes[obj._index][ZaServer.A_VolumeRootPath] = obj[ZaServer.A_VolumeRootPath];
				dirty=true;
				if(volumes[obj._index][ZaServer.A_isCurrent]) {
					ZaApp.getInstance().getCurrentController().popupWarningDialog(ZaMsg.VM_Warning_Changing_CurVolumePath);
				}
			}
			if(volumes[obj._index][ZaServer.A_VolumeCompressBlobs] != obj[ZaServer.A_VolumeCompressBlobs]) {
				volumes[obj._index][ZaServer.A_VolumeCompressBlobs] = obj[ZaServer.A_VolumeCompressBlobs];
				dirty=true;
			}
			if(volumes[obj._index][ZaServer.A_VolumeCompressionThreshold] != obj[ZaServer.A_VolumeCompressionThreshold]) {
				volumes[obj._index][ZaServer.A_VolumeCompressionThreshold] = obj[ZaServer.A_VolumeCompressionThreshold];
				dirty=true;
			}
			if(volumes[obj._index][ZaServer.A_VolumeType] != obj[ZaServer.A_VolumeType]) {
				volumes[obj._index][ZaServer.A_VolumeType] = obj[ZaServer.A_VolumeType];
				dirty=true;
			}					
		}

		if(dirty) {
			var indexArr = [];
			var msgArr = [];
			for(var i=0;i<cnt;i++) {
				if(volumes[i][ZaServer.A_VolumeType]==ZaServer.MSG) {
					msgArr.push(volumes[i])
				} else if(volumes[i][ZaServer.A_VolumeType]==ZaServer.INDEX) {
					indexArr.push(volumes[i]);
				}
			}			
			ZaServerXFormView.indexVolChoices.setChoices(indexArr);
			ZaServerXFormView.indexVolChoices.dirtyChoices();	
			ZaServerXFormView.messageVolChoices.setChoices(msgArr);
			ZaServerXFormView.messageVolChoices.dirtyChoices();	
			volumes._version = instance[ZaServer.A_Volumes]+1;
			this.getModel().setInstanceValue(this.getInstance(), ZaServer.A_Volumes, volumes);
			this.getModel().setInstanceValue(this.getInstance(), ZaServer.A2_volume_selection_cache, new Array());
			this.parent.setDirty(dirty);	
		}	*/	
	}
}

ZaServerXFormView.prototype.modifyVolumeCallback = function(resp) {
	if(resp && resp.isException()) {
		ZaApp.getInstance().getCurrentController()._handleException(resp.getException(), "ZaServerXFormView.createVolumeCallback");
	} else {
		ZaApp.getInstance().getCurrentController().popupMsgDialog(ZaMsg.UPDATE_VOLUME_CONFIRMATION);
		var callback = new AjxCallback(this,ZaServerXFormView.loadVolumesCallback);
		ZaServer.prototype.loadVolumes.call(this.parent.getObject(),callback);
	}
}

ZaServerXFormView.prototype.createVolumeCallback = function(resp) {
	if(resp && resp.isException()) {
		ZaApp.getInstance().getCurrentController()._handleException(resp.getException(), "ZaServerXFormView.createVolumeCallback");
	} else {
		this.addVolumeDlg.popdown();
		var response = resp.getResponse().Body.CreateVolumeResponse;
		var volumes = this._localXForm.getInstanceValue(ZaServer.A_Volumes);
		
		var newVolumes = [];
		for(var i=0;i<volumes.length;i++) {
			newVolumes.push(volumes[i]);
		}
		newVolumes.push(response.volume[0]);
		this._localXForm.setInstanceValue(newVolumes,ZaServer.A_Volumes);
		ZaApp.getInstance().getCurrentController().popupMsgDialog(AjxMessageFormat.format(ZaMsg.VolumeCreated,[response.volume[0][ZaServer.A_VolumeRootPath]]));
	}
}

ZaServerXFormView.prototype.doAddVolume = function(obj) {
	ZaApp.getInstance().dialogs["confirmMessageDialog"].popdown();
	var soapDoc = AjxSoapDoc.create("CreateVolumeRequest", ZaZimbraAdmin.URN, null);		
	var elVolume = soapDoc.set("volume", null);
	elVolume.setAttribute("type", obj[ZaServer.A_VolumeType]);
	elVolume.setAttribute("name", obj[ZaServer.A_VolumeName]);	
	elVolume.setAttribute("rootpath", obj[ZaServer.A_VolumeRootPath]);		
	elVolume.setAttribute("compressBlobs", obj[ZaServer.A_VolumeCompressBlobs]);		
	elVolume.setAttribute("compressionThreshold", obj[ZaServer.A_VolumeCompressionThreshold]);
	var callback = new AjxCallback(this,ZaServerXFormView.prototype.createVolumeCallback);
	var params = {
		soapDoc: soapDoc,
		targetServer: this._containedObject.id,
		asyncMode: true,
		callback:callback
	}
	
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_CREATE_VOL
	}
	ZaRequestMgr.invoke(params, reqMgrParams) ;		
}

ZaServerXFormView.addVolume  = function () {
	if(this.parent.addVolumeDlg) {
		var obj = this.parent.addVolumeDlg.getObject();
		ZaApp.getInstance().dialogs["confirmMessageDialog"] = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON], null, ZaId.VIEW_STATUS + "_confirmMessage");
		ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(AjxMessageFormat.format(ZaMsg.Q_CREATE_VOLUME,[obj[ZaServer.A_VolumeRootPath]]),DwtMessageDialog.INFO_STYLE );
		ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, ZaServerXFormView.prototype.doAddVolume, this.parent, [obj]);
		ZaApp.getInstance().dialogs["confirmMessageDialog"].popup();		
		
		/*var instance = this.getInstance();
		var volArr = [];
		var oldArr = this.getModel().getInstanceValue(this.getInstance(),ZaServer.A_Volumes);
		var cnt = oldArr.length;
		for (var i=0; i< cnt; i++) {
			volArr[i] = oldArr[i];
		}		
		this.getModel().setInstanceValue(this.getInstance(),ZaServer.A2_volume_selection_cache,[]);
		
		volArr.push(obj);
		volArr._version = oldArr._version+1;

		volArr.sort(ZaServer.compareVolumesByName);		
		var cnt = volArr.length;
		var indexArr = [];
		var msgArr = [];
		for(var i=0;i<cnt;i++) {
			if(volArr[i][ZaServer.A_VolumeType]==ZaServer.INDEX) {
				indexArr.push(instance[ZaServer.A_Volumes][i]);
			} else if(volArr[i][ZaServer.A_VolumeType] == ZaServer.MSG) {
				msgArr.push(instance[ZaServer.A_Volumes][i]);
			}
		}
				
		ZaServerXFormView.indexVolChoices.setChoices(indexArr);
		ZaServerXFormView.indexVolChoices.dirtyChoices();	
	
		ZaServerXFormView.messageVolChoices.setChoices(msgArr);
		ZaServerXFormView.messageVolChoices.dirtyChoices();
	
		this.getModel().setInstanceValue(this.getInstance(),ZaServer.A_Volumes,volArr);
		this.parent.setDirty(true);*/
	}
}

ZaServerXFormView.editButtonListener =
function () {
	var instance = this.getInstance();
	if(instance.volume_selection_cache && instance.volume_selection_cache[0]) {	
		var formPage = this.getForm().parent;
		if(!formPage.editVolumeDlg) {
			formPage.editVolumeDlg = new ZaEditVolumeXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "550px", "150px",ZaMsg.VM_Edit_Volume_Title);
			formPage.editVolumeDlg.registerCallback(DwtDialog.OK_BUTTON, ZaServerXFormView.updateVolume, this.getForm(), null);						
		}
		var obj = {};
		obj[ZaServer.A_VolumeId] = instance.volume_selection_cache[0][ZaServer.A_VolumeId];
		obj[ZaServer.A_VolumeName] = instance.volume_selection_cache[0][ZaServer.A_VolumeName];
		obj[ZaServer.A_VolumeRootPath] = instance.volume_selection_cache[0][ZaServer.A_VolumeRootPath];
		obj[ZaServer.A_VolumeCompressBlobs] = instance.volume_selection_cache[0][ZaServer.A_VolumeCompressBlobs];
		obj[ZaServer.A_VolumeCompressionThreshold] = instance.volume_selection_cache[0][ZaServer.A_VolumeCompressionThreshold];
		obj[ZaServer.A_VolumeType] = instance.volume_selection_cache[0][ZaServer.A_VolumeType];		
		
		var volArr = this.getModel().getInstanceValue(this.getInstance(),ZaServer.A_Volumes);
		
		var cnt = volArr.length;
		for(var i=0; i < cnt; i++) {
			if(volArr[i][ZaServer.A_VolumeId]==obj[ZaServer.A_VolumeId] || 
				(!volArr[i][ZaServer.A_VolumeId] && (volArr[i][ZaServer.A_VolumeName] == obj[ZaServer.A_VolumeName])
					&& (volArr[i][ZaServer.A_VolumeRootPath] == obj[ZaServer.A_VolumeRootPath]))) {
				obj._index = i;
				break;
			}
		}
		


		formPage.editVolumeDlg.setObject(obj);
		formPage.editVolumeDlg.popup();		
	}
}

ZaServerXFormView.loadVolumesCallback = function(resp) {
	if(resp && resp.isException()) {
		ZaApp.getInstance().getCurrentController()._handleException(resp.getException(), "ZaServerXFormView.loadVolumesCallback");
	} else {
		var response = resp.getResponse().Body.GetAllVolumesResponse;
		var newVolumes = [];
		var volumes = response.volume;
		if(volumes) {
			var cnt = volumes.length;
			for (var i=0; i< cnt;  i++) {
				newVolumes.push(volumes[i]);	
			}
		}
		this.setInstanceValue(newVolumes,ZaServer.A_Volumes);
	}	
}

ZaServerXFormView.doDeleteVolume = function(selArr, deletedVolumes, respObj) {
	ZaApp.getInstance().dialogs["confirmMessageDialog"].popdown();
	if(respObj != null && respObj.isException && respObj.isException()) {
		ZaApp.getInstance().getCurrentController()._handleException(respObj.getException(), "ZaServerXFormView.doDeleteVolume");
	} else {
		if(AjxUtil.isEmpty(selArr)) {
			if(!AjxUtil.isEmpty(deletedVolumes)) {
				ZaApp.getInstance().getCurrentController().popupMsgDialog(ZaMsg.DELETED_VOLUMES_CONFIRMATION);
				var callback = new AjxCallback(this,ZaServerXFormView.loadVolumesCallback);
				ZaServer.prototype.loadVolumes.call(this.getForm().parent.getObject(),callback);
			}
			return;
		}
		var nextVolume = selArr.shift();
		if(!deletedVolumes) {
			deletedVolumes = [];
		}
		deletedVolumes.push(nextVolume);
		var callback = new AjxCallback(this,ZaServerXFormView.doDeleteVolume,[selArr,deletedVolumes]);
		ZaServer.prototype.deleteVolume.call(this.getForm().parent.getObject(),nextVolume[ZaServer.A_VolumeId],callback);
	}
}

ZaServerXFormView.deleteButtonListener = function () {
	var instance = this.getInstance();
	var volArr = [];
	if(!instance.volume_selection_cache) {
		return;
	}
	var selArr = this.getInstanceValue(ZaServer.A2_volume_selection_cache);
	
	ZaApp.getInstance().dialogs["confirmMessageDialog"] = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON], null, ZaId.VIEW_STATUS + "_confirmMessage");
	ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(ZaMsg.Q_DELETE_VOLUMES,  DwtMessageDialog.WARNING_STYLE);
	ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, ZaServerXFormView.doDeleteVolume, this, [selArr,[]]);
	ZaApp.getInstance().dialogs["confirmMessageDialog"].popup();		
	
	
	/*var oldArr = this.getInstanceValue(ZaServer.A_Volumes);
	var cnt2 = oldArr.length;
	for (var i=0; i< cnt2; i++) {
		volArr[i] = oldArr[i];
	}		
	
	var removedArr = this.getInstanceValue(ZaServer.A_RemovedVolumes);
	if(AjxUtil.isEmpty(removedArr))
		removedArr = new Array();
		
	var cnt = selArr.length;
	if(cnt && volArr) {
		for(var i=0;i<cnt;i++) {
			cnt2--;				
			for(var k=cnt2;k>=0;k--) {
				if(volArr[k][ZaServer.A_VolumeId]==selArr[i][ZaServer.A_VolumeId]) {
					removedArr.push(volArr[k]);
					volArr.splice(k,1);
					break;	
				}
			}
		}
			
	}
	
	volArr.sort(ZaServer.compareVolumesByName);	
	volArr._version = oldArr._version+1;	
	var cnt3 = volArr.length;
	var indexArr = [];
	var msgArr = [];
	for(var i=0;i<cnt3;i++) {
		if(volArr[i][ZaServer.A_VolumeType]==ZaServer.INDEX) {
			indexArr.push(volArr[i]);
		} else if(volArr[i][ZaServer.A_VolumeType] == ZaServer.MSG) {
			msgArr.push(volArr[i])
		}
	}

	
	ZaServerXFormView.indexVolChoices.setChoices(indexArr);
	ZaServerXFormView.indexVolChoices.dirtyChoices();	

	ZaServerXFormView.messageVolChoices.setChoices(msgArr);
	ZaServerXFormView.messageVolChoices.dirtyChoices();	
	
	this.setInstanceValue(volArr,ZaServer.A_Volumes);
	this.setInstanceValue([],ZaServer.A2_volume_selection_cache);
	this.setInstanceValue(removedArr,ZaServer.A_RemovedVolumes);
	this.getForm().parent.setDirty(true);*/
}

ZaServerXFormView.addButtonListener =
function () {
	var instance = this.getInstance();
	var formPage = this.getForm().parent;
	if(!formPage.addVolumeDlg) {
		formPage.addVolumeDlg = new ZaEditVolumeXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "550px", "150px",ZaMsg.VM_Add_Volume_Title);
		formPage.addVolumeDlg.registerCallback(DwtDialog.OK_BUTTON, ZaServerXFormView.addVolume, this.getForm(), null);						
	}
	
	var obj = {};
	obj[ZaServer.A_VolumeId] = instance.newVolID--;
	obj[ZaServer.A_VolumeName] = "";
	obj[ZaServer.A_VolumeRootPath] = "/opt/zextras";
	obj[ZaServer.A_VolumeCompressBlobs] = false;
	obj[ZaServer.A_VolumeCompressionThreshold] = 4096;
	obj[ZaServer.A_VolumeType] = ZaServer.MSG;		
	obj.current = false;		
	
	formPage.addVolumeDlg.setObject(obj);
	formPage.addVolumeDlg.popup();		
}

ZaServerXFormView.SERVICE_TAB_ATTRS = [
    ZaServer.A_zimbraLdapServiceEnabled,
    ZaServer.A_zimbraMailboxServiceEnabled,
    ZaServer.A_zimbraMailProxyServiceEnabled,
    ZaServer.A_zimbraMtaServiceEnabled,
    ZaServer.A_zimbraSnmpServiceEnabled,
    ZaServer.A_zimbraAntiSpamServiceEnabled,
    ZaServer.A_zimbraAntiVirusServiceEnabled,
    ZaServer.A_zimbraOpenDKIMServiceEnabled,
    ZaServer.A_zimbraSpellServiceEnabled,
    ZaServer.A_zimbraLoggerServiceEnabled
];
ZaServerXFormView.SERVICE_TAB_RIGHTS = [];

ZaServerXFormView.MTA_TAB_ATTRS = [
    ZaServer.A_zimbraMtaSaslAuthEnable,
    ZaServer.A_zimbraMtaTlsAuthOnly,
    ZaServer.A_zimbraSmtpHostname,
    ZaServer.A_SmtpPort,
    ZaServer.A_zimbraMtaRelayHost,
    ZaServer.A_zimbraMtaFallbackRelayHost,
    ZaServer.A_SmtpTimeout,
    ZaServer.A_zimbraMtaMyNetworks,
	ZaServer.A_zimbraMtaSmtpDnsSupportLevel
];
ZaServerXFormView.MTA_TAB_RIGHTS = [];

ZaServerXFormView.AUTH_TAB_ATTRS = [ZaServer.A_zimbraSpnegoAuthPrincipal, ZaServer.A_zimbraSpnegoAuthTargetName];
ZaServerXFormView.AUTH_TAB_RIGHTS = [];

ZaServerXFormView.IMAP_TAB_ATTRS = [ZaServer.A_ImapServerEnabled, ZaServer.A_ImapSSLServerEnabled, ZaServer.A_ImapCleartextLoginEnabled,
	ZaServer.A_zimbraImapNumThreads, ZaServer.A_zimbraImapBindPort, ZaServer.A_ImapSSLBindPort, ZaServer.A_zimbraImapProxyBindPort,
	ZaServer.A_zimbraImapSSLProxyBindPort];
ZaServerXFormView.IMAP_TAB_RIGHTS = [];

ZaServerXFormView.POP_TAB_ATTRS = [ZaServer.A_Pop3ServerEnabled, ZaServer.A_Pop3SSLServerEnabled, ZaServer.A_Pop3CleartextLoginEnabled,
	ZaServer.A_zimbraPop3NumThreads, ZaServer.A_Pop3AdvertisedName, ZaServer.A_Pop3BindAddress, ZaServer.A_zimbraPop3BindPort,
	ZaServer.A_zimbraPop3SSLBindPort,ZaServer.A_zimbraPop3ProxyBindPort,ZaServer.A_zimbraPop3SSLProxyBindPort];
ZaServerXFormView.POP_TAB_RIGHTS = [];

ZaServerXFormView.VOLUMES_TAB_ATTRS = [];
ZaServerXFormView.VOLUMES_TAB_RIGHTS = [ZaServer.MANAGE_VOLUME_RIGHT];

ZaServerXFormView.MTA_NETWORK_GROUP_ATTRS = [ZaServer.A_zimbraImapBindPort,
								ZaServer.A_ImapSSLBindPort,ZaServer.A_zimbraImapProxyBindPort,ZaServer.A_zimbraImapProxyBindPort,
								ZaServer.A_zimbraImapSSLProxyBindPort];

ZaServerXFormView.MTA_SERVICE_GROUP_ATTRS = [ZaServer.A_ImapServerEnabled, ZaServer.A_ImapSSLServerEnabled,
	ZaServer.A_ImapCleartextLoginEnabled,ZaServer.A_zimbraImapNumThreads];

ZaServerXFormView.BIND_IP_TAB_ATTRS = [ZaServer.A_zimbraMailBindAddress, ZaServer.A_zimbraMailSSLBindAddress,
									ZaServer.A_zimbraMailSSLClientCertBindAddress, ZaServer.A_zimbraAdminBindAddress];
ZaServerXFormView.BIND_IP_TAB_RIGHTS = [];
/**
* This method is added to the map {@link ZaTabView#XFormModifiers}
* @param xFormObject {Object} a definition of the form. This method adds/removes/modifies xFormObject to construct
* a Server view. 
**/
ZaServerXFormView.myXFormModifier = function(xFormObject, entry) {	
	var headerList = new Array();
	headerList[0] = new ZaListHeaderItem(ZaServer.A_VolumeName, ZaMsg.VM_VolumeName, null, "100px", false, null, false, true);
	headerList[1] = new ZaListHeaderItem(ZaServer.A_VolumeRootPath, ZaMsg.VM_VolumeRootPath, null,"200px", false, null, false, true);
	headerList[2] = new ZaListHeaderItem(ZaServer.A_VolumeType, ZaMsg.VM_VolumeType, null, "120px", null, null, false, true);							
	headerList[3] = new ZaListHeaderItem(ZaServer.A_VolumeCompressBlobs, ZaMsg.VM_VolumeCompressBlobs, null, "120px", null, null, false, true);								
	headerList[4] = new ZaListHeaderItem(ZaServer.A_VolumeCompressionThreshold, ZaMsg.VM_VolumeCompressThreshold, null, "120px", null, null, false, true);									
	headerList[5] = new ZaListHeaderItem(ZaServer.A_isCurrentVolume, ZaMsg.VM_CurrentVolume, null, "auto", null, null, false, true);										

	var _tab1, _tab2, _tab3, _tab4, _tab5, _tab6, _tab7, _tab8, _tab9;

    var tabBarChoices = [] ;
    this.helpMap = {};
	_tab1 = ++this.TAB_INDEX;
    tabBarChoices.push ({value:_tab1, label:ZaMsg.TABT_GeneralPage});
    this.helpMap[_tab1] = ZaUtil.HELP_URL;
    
    if(ZaTabView.isTAB_ENABLED(entry,ZaServerXFormView.SERVICE_TAB_ATTRS, ZaServerXFormView.SERVICE_TAB_RIGHTS)) {
    	_tab2 = ++this.TAB_INDEX;
         tabBarChoices.push ({value:_tab2, label:ZaMsg.NAD_Tab_Services});
         this.helpMap[_tab2] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaServerXFormView.MTA_TAB_ATTRS, ZaServerXFormView.MTA_TAB_RIGHTS)) {
    	_tab3 = ++this.TAB_INDEX;
         tabBarChoices.push ({value:_tab3, label:ZaMsg.NAD_Tab_MTA});
         this.helpMap[_tab3] = ZaUtil.HELP_URL;
    }

    /* bug 71233, bug 71234, remove SPNEGO & 2-way SSL
    if(ZaTabView.isTAB_ENABLED(entry,ZaServerXFormView.AUTH_TAB_ATTRS, ZaServerXFormView.AUTH_TAB_RIGHTS)) {
    	_tab4 = ++this.TAB_INDEX;
         tabBarChoices.push ({value:_tab4, label:ZaMsg.NAD_Tab_AUTH});
    } */

    if(ZaTabView.isTAB_ENABLED(entry,ZaServerXFormView.IMAP_TAB_ATTRS, ZaServerXFormView.IMAP_TAB_RIGHTS)) {
        _tab5 = ++this.TAB_INDEX;
        tabBarChoices.push ({value:_tab5, label:ZaMsg.NAD_Tab_IMAP});
        this.helpMap[_tab5] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaServerXFormView.POP_TAB_ATTRS, ZaServerXFormView.POP_TAB_RIGHTS)) {
        _tab6 = ++this.TAB_INDEX;
        tabBarChoices.push ({value:_tab6, label:ZaMsg.NAD_Tab_POP});
        this.helpMap[_tab6] = ZaUtil.HELP_URL;
    }    
        

    if(ZaTabView.isTAB_ENABLED(entry,ZaServerXFormView.VOLUMES_TAB_ATTRS, ZaServerXFormView.VOLUMES_TAB_RIGHTS)) {
    	_tab7 = ++this.TAB_INDEX;
        tabBarChoices.push ({value:_tab7, label:ZaMsg.NAD_Tab_VolumeMgt});
        this.helpMap[_tab7] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaServerXFormView.BIND_IP_TAB_ATTRS, ZaServerXFormView.BIND_IP_TAB_RIGHTS)) {
        _tab8 = ++this.TAB_INDEX;
        tabBarChoices.push ({value:_tab8, label:ZaMsg.NAD_Tab_Bind_IP});
        this.helpMap[_tab8] = ZaUtil.HELP_URL;
    }
    var switchItems = [];

    var case1 =  {
        type:_ZATABCASE_, numCols:1, caseKey:_tab1,
            id:"server_general_tab",
            paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
            items:[
                //{type:_ZAGROUP_, cssStyle:"padding-left:0;padding-right:0;", width:"100%", items:[
                {type:_ZA_TOP_GROUPER_, width:"100%", numCols:2,colSizes: ["275px","100%"],
                    label:ZaMsg.TABT_GeneralPage,
                    items:[
                    {ref:ZaServer.A_name, type:_OUTPUT_, label:ZaMsg.NAD_DisplayName, labelLocation:_LEFT_},
                    ZaItem.descriptionXFormItem,
                    { ref: ZaServer.A_ServiceHostname, type:_OUTPUT_,
                      label:ZaMsg.LBL_ServiceHostname, cssClass:"admin_xform_name_input"
                    },
                    { ref: ZaServer.A_LmtpAdvertisedName, type:_INPUT_,
                      label: ZaMsg.NAD_LmtpAdvertisedName, cssClass:"admin_xform_name_input",
                      onChange: ZaServerXFormView.onFormFieldChanged
                    },
                    { ref: ZaServer.A_LmtpBindAddress, type:_INPUT_,
                      label:ZaMsg.NAD_LmtpBindAddress, cssClass:"admin_xform_name_input",
                      onChange:ZaServerXFormView.onFormFieldChanged
                    },
                    { ref: ZaServer.A_zimbraScheduledTaskNumThreads,
                        labelWrap: true,
                        type:_INPUT_,
                        label:ZaMsg.NAD_zimbraScheduledTaskNumThreads,
                        cssClass:"admin_xform_name_input",
                      onChange:ZaServerXFormView.onFormFieldChanged
                    },
                    {ref:ZaServer.A_zimbraMailPurgeSleepInterval, type:_SUPER_LIFETIME_,
                            labelCssStyle:"text-align:left;background-color:#DEE5F1 !important;padding-left:10px;border-right:1px solid;",
                            resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                            msgName:ZaMsg.MSG_zimbraMailPurgeSleepInterval,
                            txtBoxLabel:ZaMsg.LBL_zimbraMailPurgeSleepInterval,
			                colSpan: 2,
                            onChange:ZaServerXFormView.onFormFieldChanged
                    },
                    {ref:ZaServer.A_zimbraReverseProxyLookupTarget,
                        type:_SUPER_CHECKBOX_, resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
			//bug fix 33189
			//super_lifetime_ has 4 cols, super_checkbox has 3 cols.
			//this table only set two cols in width by _ZA_PLAIN_GROUPER_.
			//It works well in FF or Chrome, each row can extend its cell's width
			//But in IE, the checkbox will be cutoff for only 75%(3/4) of the table's width.
			conSpan: 4,
                        msgName:ZaMsg.NAD_zimbraReverseProxyLookupTarget,
                        checkBoxLabel:ZaMsg.NAD_zimbraReverseProxyLookupTarget,
			colSpan: 2, colSizes: ["275px","275px","*"],
                        trueValue:"TRUE", falseValue:"FALSE", onChange:ZaServerXFormView.onReverseLookupTargetFieldChanged},
                    { ref: ZaServer.A_notes, type:_TEXTAREA_,
                      label: ZaMsg.NAD_Notes, labelCssStyle: "vertical-align:top;", 
		      width: "30em", 
                      onChange:ZaServerXFormView.onFormFieldChanged
                    }
                ]}
            ]
        };
    switchItems.push (case1);

    if(_tab2) {
        var case2 ={type:_ZATABCASE_, colSizes:["auto"],numCols:1, id:"server_services_tab", caseKey:_tab2,
					items:[
						{ type: _ZA_TOP_GROUPER_, label: ZaMsg.NAD_Service_EnabledServices,
						  items: [
						  	{ ref: ZaServer.A_zimbraLdapServiceEnabled, type: _CHECKBOX_,
						  	  enableDisableChangeEventSources:[ZaServer.A_zimbraLdapServiceInstalled],
						  	  enableDisableChecks:[[XForm.checkInstanceValue,ZaServer.A_zimbraLdapServiceInstalled,true],
						  	  [ZaItem.hasWritePermission,ZaServer.A_zimbraServiceEnabled]],
						  	  label: ZaMsg.NAD_Service_LDAP,
					  	      onChange: ZaServerXFormView.onFormFieldChanged
						  	},
						  	{ ref: ZaServer.A_zimbraMailboxServiceEnabled, type: _CHECKBOX_,
						  	  enableDisableChangeEventSources:[ZaServer.A_zimbraMailboxServiceInstalled],
						  	  enableDisableChecks:[[XForm.checkInstanceValue,ZaServer.A_zimbraMailboxServiceInstalled,true],
						  	  [ZaItem.hasWritePermission,ZaServer.A_zimbraServiceEnabled]],
						  	  label: ZaMsg.NAD_Service_Mailbox,
					  	      onChange: ZaServerXFormView.onFormFieldChanged
						  	},
						  	{ ref: ZaServer.A_zimbraMailProxyServiceEnabled, type: _CHECKBOX_,
						  	 // even if proxy is not installed, the server can also be lookup target
						  	 // enableDisableChangeEventSources:[ZaServer.A_zimbraMailProxyServiceInstalled], 
						  	  enableDisableChecks:[/*[XForm.checkInstanceValue,ZaServer.A_zimbraMailProxyServiceInstalled,true], */
						  	  [ZaItem.hasWritePermission,ZaServer.A_zimbraServiceEnabled]],
						  	  label: ZaMsg.NAD_Service_Imapproxy,
					  	      onChange: ZaServerXFormView.onFormFieldChanged
						  	},
						  	{ ref: ZaServer.A_zimbraMtaServiceEnabled, type: _CHECKBOX_,
						  	  enableDisableChangeEventSources:[ZaServer.A_zimbraMtaServiceInstalled],
						  	  enableDisableChecks:[[XForm.checkInstanceValue,ZaServer.A_zimbraMtaServiceInstalled,true],
						  	  [ZaItem.hasWritePermission,ZaServer.A_zimbraServiceEnabled]],
						  	  label: ZaMsg.NAD_Service_MTA,
					  	      onChange: ZaServerXFormView.onMtaServiceChanged
						  	},
						  	{ ref: ZaServer.A_zimbraPolicydServiceEnabled, type: _CHECKBOX_,
							  	  enableDisableChangeEventSources:[ZaServer.A_zimbraPolicydServiceInstalled],
							  	  enableDisableChecks:[[XForm.checkInstanceValue,ZaServer.A_zimbraPolicydServiceInstalled,true],
							  	  [ZaItem.hasWritePermission,ZaServer.A_zimbraServiceEnabled]],
							  	  label: ZaMsg.NAD_Service_Policyd,
						  	      onChange: ZaServerXFormView.onMtaServiceChanged
							 },
						  	{ ref: ZaServer.A_zimbraSnmpServiceEnabled, type: _CHECKBOX_,
						  	  enableDisableChangeEventSources:[ZaServer.A_zimbraSnmpServiceInstalled],
						  	  enableDisableChecks:[[XForm.checkInstanceValue,ZaServer.A_zimbraSnmpServiceInstalled,true],
						  	  [ZaItem.hasWritePermission,ZaServer.A_zimbraServiceEnabled]],
						  	  label: ZaMsg.NAD_Service_SNMP,
					  	      onChange: ZaServerXFormView.onFormFieldChanged
						  	},
						  	{ ref: ZaServer.A_zimbraAntiSpamServiceEnabled, type: _CHECKBOX_,
						  	  enableDisableChangeEventSources:[ZaServer.A_zimbraAntiSpamServiceInstalled],
						  	  enableDisableChecks:[[XForm.checkInstanceValue,ZaServer.A_zimbraAntiSpamServiceInstalled,true],
						  	  [ZaItem.hasWritePermission,ZaServer.A_zimbraServiceEnabled]],
						  	  label: ZaMsg.NAD_Service_AntiSpam,
					  	      onChange: ZaServerXFormView.onFormFieldChanged
						  	},
						  	{ ref: ZaServer.A_zimbraAntiVirusServiceEnabled, type: _CHECKBOX_,
						  	  enableDisableChangeEventSources:[ZaServer.A_zimbraAntiVirusServiceInstalled],
						  	  enableDisableChecks:[[XForm.checkInstanceValue,ZaServer.A_zimbraAntiVirusServiceInstalled,true],
						  	  [ZaItem.hasWritePermission,ZaServer.A_zimbraServiceEnabled]],
						  	  label: ZaMsg.NAD_Service_AntiVirus,
					  	      onChange: ZaServerXFormView.onFormFieldChanged
						  	},
						  	{ ref: ZaServer.A_zimbraSpellServiceEnabled, type: _CHECKBOX_,
						  	  enableDisableChangeEventSources:[ZaServer.A_zimbraSpellServiceInstalled],
						  	  enableDisableChecks:[[XForm.checkInstanceValue,ZaServer.A_zimbraSpellServiceInstalled,true],
						  	  [ZaItem.hasWritePermission,ZaServer.A_zimbraServiceEnabled]],
						  	  label: ZaMsg.NAD_Service_Spell,
					  	      onChange: ZaServerXFormView.onFormFieldChanged
						  	},
						  	{ ref: ZaServer.A_zimbraLoggerServiceEnabled, type: _CHECKBOX_,
						  	  enableDisableChangeEventSources:[ZaServer.A_zimbraLoggerServiceInstalled],
						  	  enableDisableChecks:[[XForm.checkInstanceValue,ZaServer.A_zimbraLoggerServiceInstalled,true],
						  	  [ZaItem.hasWritePermission,ZaServer.A_zimbraServiceEnabled]],
						  	  label: ZaMsg.NAD_Service_Logger,
					  	      onChange: ZaServerXFormView.onFormFieldChanged
						  	},
                            				{ ref: ZaServer.A_zimbraVmwareHAServiceEnabled, type: _CHECKBOX_,
						  	  enableDisableChangeEventSources:[ZaServer.A_zimbraVmwareHAServiceInstalled],
						  	  enableDisableChecks:[[XForm.checkInstanceValue,ZaServer.A_zimbraVmwareHAServiceInstalled,true],
						  	  [ZaItem.hasWritePermission,ZaServer.A_zimbraServiceEnabled]],
						  	  label: ZaMsg.NAD_Service_VmwareHA,
					  	      onChange: ZaServerXFormView.onFormFieldChanged
						  	},
                              {
                                  ref: ZaServer.A_zimbraOpenDKIMServiceEnabled,
                                  type: _CHECKBOX_,
                                  enableDisableChangeEventSources: [ZaServer.A_zimbraOpenDKIMServiceInstalled],
                                  enableDisableChecks: [
                                      [
                                          XForm.checkInstanceValue, ZaServer.A_zimbraOpenDKIMServiceInstalled, true
                                      ],
                                      [
                                          ZaItem.hasWritePermission, ZaServer.A_zimbraOpenDKIMServiceEnabled
                                      ]
                                  ],
                                  label: ZaMsg.NAD_Service_OpenDKIM,
                                  onChange: ZaServerXFormView.onFormFieldChanged
                              }
						]}
					]
				};
        switchItems.push(case2) ;
    }

    if(_tab3) {
     var case3 = { type: _ZATABCASE_, id:"server_mta_tab", caseKey:_tab3,
					colSizes:["auto"],numCols:1,
					items: [
						{type:_ZA_TOP_GROUPER_, colSizes:["auto"],numCols:1,label:ZaMsg.Global_MTA_AuthenticationGrp,
					      items: [
						      	{ ref:ZaServer.A_zimbraMtaSaslAuthEnable, type: _SUPER_CHECKBOX_,
						      	  trueValue: "yes", falseValue: "no",
						      	  onChange: ZaServerXFormView.onFormFieldChanged,
						      	  resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
						      	  checkBoxLabel:ZaMsg.NAD_MTA_Authentication
					      	    },
						      	{ ref:ZaServer.A_zimbraMtaTlsAuthOnly, type: _SUPER_CHECKBOX_,
						      	  enableDisableChangeEventSources:[ZaServer.A_zimbraMtaSaslAuthEnable],
						      	  enableDisableChecks:[ZaServerXFormView.getTLSEnabled],
						      	  trueValue: "TRUE", falseValue: "FALSE",
						      	  onChange: ZaServerXFormView.onFormFieldChanged,
						      	  resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
						      	  checkBoxLabel:ZaMsg.NAD_MTA_TlsAuthenticationOnly
					      	    }
				      	    ]
						},
				      {type:_ZA_TOP_GROUPER_, colSizes:["275", "100%"], numCols:2,label:ZaMsg.Global_MTA_NetworkGrp,
					      items: [
					      	{type:_SUPER_REPEAT_, ref:ZaServer.A_zimbraSmtpHostname, 
					      		label:ZaMsg.LBL_zimbraSmtpHostname,
					            colSizes:["310px","150px","*"], colSpan:2,
								resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
								repeatInstance:"", 
								showAddButton:true, 
								showRemoveButton:true, 
								showAddOnNextRow:true,
								addButtonLabel:ZaMsg.Add_zimbraSmtpHostname, 
								removeButtonLabel:ZaMsg.Remove_zimbraSmtpHostname,
								removeButtonCSSStyle: "margin-left:5px;",
								bmolsnr:true,
					      		repeatItems:[
								{ 
								  type:_TEXTFIELD_,ref:".",
								  toolTipContent: ZaMsg.tt_zimbraSmtpHostname,
								  cssClass:"admin_xform_name_input",
								  enableDisableChecks:[],
								  visibilityChecks:[],
								  bmolsnr:true,
								  elementChanged: function(elementValue,instanceValue, event) {
									this.getForm().itemChanged(this, elementValue, event);
									this.getForm().itemChanged(this.getParentItem(), elementValue, event);
								  }
								}]
					      	},

							{ref:ZaServer.A_SmtpPort, type:_OUTPUT_, label:ZaMsg.NAD_MTA_WebMailPort, width:"4em"},

							{
                                ref: ZaServer.A_zimbraMtaRelayHost,
                                type: _SUPER_HOSTPORT_,
                                label: ZaMsg.NAD_MTA_RelayMTA,
                                colSpan: 1,
                                onClick: "ZaController.showTooltip",
                                toolTipContent: ZaMsg.tt_MTA_RelayMTA,
                                resetToSuperLabel: ZaMsg.NAD_ResetToGlobal,
                                bmolsnr: true,
                                elementChanged: function(elementValue,instanceValue, event) {
                                    this.getForm().itemChanged(this, elementValue, event);
                                    this.getForm().itemChanged(this.getParentItem(), elementValue, event);
                                }
                            },
                              {
                                  ref: ZaServer.A_zimbraMtaFallbackRelayHost,
                                  type: _SUPER_HOSTPORT_,
                                  label: ZaMsg.NAD_MTA_FallbackRelay,
                                  colSpan: 1,
                                  toolTipContent: ZaMsg.tt_MTA_FallbackRelay,
                                  resetToSuperLabel: ZaMsg.NAD_ResetToGlobal,
                                  bmolsnr: true,
                                  elementChanged: function(elementValue,instanceValue, event) {
                                      this.getForm().itemChanged(this, elementValue, event);
                                      this.getForm().itemChanged(this.getParentItem(), elementValue, event);
                                  }
                              },

                            {ref:ZaServer.A_SmtpTimeout, type:_TEXTFIELD_,
                              label:ZaMsg.NAD_MTA_WebMailTimeout, width: "4em",
                              onChange: ZaServerXFormView.onFormFieldChanged
                            },

                           {ref:ZaServer.A_zimbraMtaMyNetworks,
                                txtBoxLabel:ZaMsg.NAD_MTA_MyNetworks,
                                msgName:ZaMsg.NAD_MTA_MyNetworks,
                                type:_SUPER_TEXTAREA_,
                                labelCssClass:"gridGroupBodyLabel",
                                labelCssStyle:"text-align:left;border-right:1px solid;",
                                colSpan: 2,
                                resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                                onChange: ZaServerXFormView.onFormFieldChanged,
                                textAreaWidth:"220px"
                            },

					        {
								ref : ZaServer.A_zimbraMtaSmtpDnsSupportLevel,
								type : _SUPER_SELECT1_,
								colSpan : 2,
								label : ZaMsg.NAD_MTA_SMTP_Dns,
								onChange : ZaServerXFormView.onFormFieldChanged,
								resetToSuperLabel : ZaMsg.NAD_ResetToGlobal,
								labelLocation : _LEFT_
				      	    }
						]
				      },
				  
				     	{type:_ZA_TOP_GROUPER_, colSizes:["275px","100%"], numCols:2, label:ZaMsg.Global_MTA_MilterServer,
                           items: [
                            { ref:ZaServer.A_zimbraMilterServerEnabled, type: _SUPER_CHECKBOX_,
                              trueValue: "TRUE", falseValue: "FALSE",
                              onChange: ZaServerXFormView.onFormFieldChanged,
                              resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                              checkBoxLabel:ZaMsg.NAD_MTA_MilterServerEnabled
                            },
							
							{type:_REPEAT_, ref:ZaServer.A_zimbraMilterBindAddress,
					      		label:ZaMsg.NAD_MTA_MilterBindAddress,
								resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
								repeatInstance:"", 
								showAddButton:true, 
								showRemoveButton:true, 
								showAddOnNextRow:true,
								addButtonLabel:ZaMsg.NAD_MTA_AddBindAddress , 
								removeButtonLabel:ZaMsg.NAD_MTA_RemoveBindAddress ,
								removeButtonCSSStyle: "margin-left:50px;",
								bmolsnr:true,
					      	    items:[
								{ type:_TEXTFIELD_,ref:".",
								   enableDisableChecks:[],
								   visibilityChecks:[],
								   bmolsnr:true,
								   elementChanged: function(elementValue,instanceValue, event) {
									this.getForm().itemChanged(this, elementValue, event);
									this.getForm().itemChanged(this.getParentItem(), elementValue, event);
								   }
								}
								]
					      		},
						
							{ref:ZaServer.A_zimbraMilterBindPort, type:_OUTPUT_, label:ZaMsg.NAD_MTA_MilterBindPort}
                           ]
                        }
                        /*
                        {type:_ZA_TOP_GROUPER_, colSizes:["275px","*"], numCols:2, label:ZaMsg.NAD_AutoProvision_Setting,
                            items:[
                                {ref:ZaServer.A_zimbraAutoProvPollingInterval, type:_SUPER_LIFETIME_,

                                    txtBoxLabel:ZaMsg.LBL_zimbraAutoProvPollingInterval,
                                    resetToSuperLabel:ZaMsg.NAD_ResetToCOS,colSpan:2,
                                    useParentTable: false,
                                    nowrap:false,labelWrap:true
                                },
                                {type:_REPEAT_, ref:ZaServer.A_zimbraAutoProvScheduledDomains,
                                    label:ZaMsg.LBL_zimbraAutoProvScheduledDomains,
                                    repeatInstance:"",
                                    showAddButton:true,
                                    showRemoveButton:true,
                                    showAddOnNextRow:true,
                                    addButtonLabel:ZaMsg.NAD_Add ,
                                    removeButtonLabel:ZaMsg.NAD_Remove ,
                                    removeButtonCSSStyle: "margin-left:50px;",
                                    bmolsnr:true,
                                    items:[
                                    { type:_TEXTFIELD_,ref:".",
                                       enableDisableChecks:[],
                                       visibilityChecks:[],
                                       bmolsnr:true
                                    }
                                    ]
					      		}
                            ]
                        } */
				    ]
				};
        switchItems.push (case3) ;
    }

    /* bug 71234, bug 71233, remove SPNEGO & 2-way SSL
    if(_tab4) {
     var case4 = { type: _ZATABCASE_, id:"server_auth_tab", caseKey:_tab4,
					colSizes:["auto"],numCols:1,
					items: [
                        {type:_ZA_TOP_GROUPER_, colSizes:["275px","*"], numCols:2, label:ZaMsg.NAD_SPNEGO_Configure,
                            items:[
                              {ref:ZaServer.A_zimbraSpnegoAuthPrincipal, type:_TEXTFIELD_,
                               label:ZaMsg.NAD_MTA_SpnegoAuthPrincipal, width: "20em",
                               onChange: ZaServerXFormView.onFormFieldChanged
                              },
                              {ref:ZaServer.A_zimbraSpnegoAuthTargetName, type:_TEXTFIELD_,
                               label:ZaMsg.NAD_MTA_SpnegoAuthTargetName, width: "20em",
                               onChange: ZaServerXFormView.onFormFieldChanged
                              }
                            ]
                        },
                        {type:_ZA_TOP_GROUPER_, colSizes:["275px","*"], numCols:2, label:ZaMsg.NAD_AUTH_ClientConfigure,
                            items:[
                                {ref:ZaServer.A_zimbraMailSSLClientCertMode, type:_SUPER_SELECT1_,
                                  label:ZaMsg.NAD_zimbraMailSSLClientCertMode,
                                  labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                },
                                { ref: ZaServer.A_zimbraMailSSLClientCertPort, type:_TEXTFIELD_,
                                  label: ZaMsg.NAD_zimbraMailSSLClientCertPort,
                                  labelLocation:_LEFT_,
                                  textFieldCssClass:"admin_xform_number_input",
                                  onChange:ZaServerXFormView.onFormFieldChanged
                                },
                                {type: _DWT_ALERT_, cssClass: "DwtTabTable", containerCssStyle: "padding-bottom:0;",
                                  style: DwtAlert.WARNING, iconVisible: false, content: ZaMsg.Alert_Ngnix,
                                  id:"xform_header_ngnix"
                                },
                                {ref:ZaServer.A_zimbraReverseProxyClientCertMode, type:_SUPER_SELECT1_,
                                  label:ZaMsg.NAD_zimbraReverseProxyClientCertMode,
                                  labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                },
                                {ref:ZaServer.A_zimbraReverseProxyMailMode, type:_SUPER_SELECT1_,
                                  label:ZaMsg.NAD_zimbraReverseProxyMailMode,
                                  labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                },
                                { ref: ZaServer.A_zimbraMailSSLProxyClientCertPort, type:_TEXTFIELD_,
                                  label: ZaMsg.NAD_zimbraMailSSLProxyClientCertPort,
                                  labelLocation:_LEFT_,
                                  textFieldCssClass:"admin_xform_number_input",
                                  onChange:ZaServerXFormView.onFormFieldChanged
                                },
                                {ref: ZaServer.A_zimbraReverseProxyClientCertCA, type:_TEXTAREA_,
                                    label:ZaMsg.NAD_zimbraReverseProxyClientCertCA, width: 370,
                                    onChange:ZaServerXFormView.onFormFieldChanged
                                }
                            ]
                        }
				    ]
				};
        switchItems.push (case4) ;
    } */

	if(_tab5) {
		var case5 = {type:_ZATABCASE_, colSizes:["auto"],numCols:1, caseKey:_tab5,
					id:"server_imap_tab",
					items:[
						{ type: _DWT_ALERT_,
						  containerCssStyle: "padding-bottom:0;",
						  style: DwtAlert.INFO,
						  iconVisible: false,
						  content: ZaMsg.Alert_ServerRestart
						}
					]
     	};
     	if(ZAGroup_XFormItem.isGroupVisible(entry,ZaServerXFormView.MTA_SERVICE_GROUP_ATTRS,[])) {
			case5.items.push({type:_ZA_TOP_GROUPER_, colSizes:["auto"],numCols:1,label:ZaMsg.Global_IMAP_ServiceGrp,
					      items: [
						      	{ ref: ZaServer.A_ImapServerEnabled, type: _SUPER_CHECKBOX_,
						      	  checkBoxLabel:ZaMsg.IMAP_Service,
						      	  trueValue: "TRUE", falseValue: "FALSE",
						      	  onChange: ZaServerXFormView.onFormFieldChanged,
						      	  resetToSuperLabel:ZaMsg.NAD_ResetToGlobal
						  	    },
						  	    {ref: ZaServer.A_ImapSSLServerEnabled, type: _SUPER_CHECKBOX_,
								  checkBoxLabel:ZaMsg.IMAP_SSLService,
							      trueValue: "TRUE", falseValue: "FALSE",
							      onChange: ZaServerXFormView.onFormFieldChanged,
							      resetToSuperLabel:ZaMsg.NAD_ResetToGlobal

						      	},
						  	    { ref: ZaServer.A_ImapCleartextLoginEnabled, type: _SUPER_CHECKBOX_,
						      	  checkBoxLabel:ZaMsg.IMAP_CleartextLoginEnabled,
						      	  //enableDisableChangeEventSources:[ZaServer.A_zimbraReverseProxyLookupTarget],
						      	  //enableDisableChecks:[[XForm.checkInstanceValue,ZaServer.A_zimbraReverseProxyLookupTarget,"FALSE"], ZaItem.hasWritePermission],
						      	  trueValue: "TRUE", falseValue: "FALSE",
						      	  onChange: ZaServerXFormView.onFormFieldChanged,
						      	  resetToSuperLabel:ZaMsg.NAD_ResetToGlobal

					      	    },
					      	    { ref: ZaServer.A_zimbraImapNumThreads, type:_SUPER_TEXTFIELD_,
								  txtBoxLabel: ZaMsg.IMAP_NumThreads, width: "5em",
								  onChange: ZaServerXFormView.onFormFieldChanged,
						      	  resetToSuperLabel:ZaMsg.NAD_ResetToGlobal
								}
						   ]
						});
     	}
     	if(ZAGroup_XFormItem.isGroupVisible(entry,ZaServerXFormView.MTA_NETWORK_GROUP_ATTRS,[])) {
			case5.items.push({type:_ZA_TOP_GROUPER_, label:ZaMsg.Global_IMAP_NetworkGrp,
						      items: [
								{ ref: ZaServer.A_zimbraImapBindPort, type:_TEXTFIELD_,
								  enableDisableChecks:[ZaServerXFormView.getIMAPEnabled,ZaItem.hasReadPermission],
								  enableDisableChangeEventSources:[ZaServer.A_ImapServerEnabled],
								  label: ZaMsg.LBL_IMAP_Port, width: "5em",
								  onChange: ZaServerXFormView.onFormFieldChanged/*,
						      	  resetToSuperLabel:ZaMsg.NAD_ResetToGlobal*/
								},
								{ ref: ZaServer.A_ImapSSLBindPort, type:_TEXTFIELD_,
								  enableDisableChecks:[ZaServerXFormView.getIMAPSSLEnabled,ZaItem.hasReadPermission],
								  enableDisableChangeEventSources:[ZaServer.A_ImapServerEnabled, ZaServer.A_ImapSSLServerEnabled],
								  label: ZaMsg.LBL_IMAP_SSLPort, width: "5em",
								  onChange: ZaServerXFormView.onFormFieldChanged
								}
								]
							});
   		}
   	
   		switchItems.push (case5) ;
   }

   if(_tab6) {
       var case6 = 	{type:_ZATABCASE_, caseKey:_tab6,
					id:"server_pop_tab", colSizes:["auto"],numCols:1,
					items:[
						{ type: _DWT_ALERT_,
						  containerCssStyle: "padding-bottom:0;",
						  style: DwtAlert.INFO,
						  iconVisible: false,
						  content: ZaMsg.Alert_ServerRestart
						},
						{type: _ZA_TOP_GROUPER_, label:ZaMsg.Global_POP_ServiceGrp,
						  items: [
					      	{ ref: ZaServer.A_Pop3ServerEnabled, type: _SUPER_CHECKBOX_,
					      	  trueValue: "TRUE", falseValue: "FALSE",
					      	  onChange: ZaServerXFormView.onFormFieldChanged,
					      	  resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
					      	  checkBoxLabel:ZaMsg.NAD_POP_Service
				      	    },
				      	    { ref: ZaServer.A_Pop3SSLServerEnabled, type: _SUPER_CHECKBOX_,
					      	  checkBoxLabel:ZaMsg.NAD_POP_SSL,
					      	  trueValue: "TRUE", falseValue: "FALSE",
					      	  onChange: ZaServerXFormView.onFormFieldChanged,
					      	  resetToSuperLabel:ZaMsg.NAD_ResetToGlobal
				      	    },
				      	    { ref: ZaServer.A_Pop3CleartextLoginEnabled, type: _SUPER_CHECKBOX_,
					      	  checkBoxLabel:ZaMsg.NAD_POP_CleartextLoginEnabled,
					      	  //enableDisableChangeEventSources:[ZaServer.A_zimbraReverseProxyLookupTarget],
					      	  //enableDisableChecks:[ZaItem.hasWritePermission,[XForm.checkInstanceValue,ZaServer.A_zimbraReverseProxyLookupTarget,"FALSE"]],
					      	  trueValue: "TRUE", falseValue: "FALSE",
					      	  onChange: ZaServerXFormView.onFormFieldChanged,
					      	  resetToSuperLabel:ZaMsg.NAD_ResetToGlobal
				      	    },
				      	    { ref: ZaServer.A_zimbraPop3NumThreads, type:_SUPER_TEXTFIELD_,
					      	  //enableDisableChangeEventSources:[ZaServer.A_zimbraReverseProxyLookupTarget],
					      	  //enableDisableChecks:[ZaItem.hasWritePermission,[XForm.checkInstanceValue,ZaServer.A_zimbraReverseProxyLookupTarget,"FALSE"]],
							  labelLocation:_LEFT_,
							  textFieldCssClass:"admin_xform_number_input",
							  txtBoxLabel: ZaMsg.NAD_POP_NumThreads,
							  onChange: ZaServerXFormView.onFormFieldChanged,
					      	  resetToSuperLabel:ZaMsg.NAD_ResetToGlobal
							}
						]
						},
						{type:_ZA_TOP_GROUPER_, label:ZaMsg.Global_POP_NetworkGrp,
						  items: [
						  	{type:_GROUP_,numCols:2,colSpan:2,colSizes:["275px","*"],//["275px","275px","150px"],
						      	enableDisableChangeEventSources:[ZaServer.A_Pop3ServerEnabled],
						      	enableDisableChecks:[ZaServerXFormView.getPOP3Enabled],
						  		items:[
									{ ref: ZaServer.A_Pop3AdvertisedName, type:_TEXTFIELD_,
									  labelLocation:_LEFT_, label: ZaMsg.NAD_POP_AdvertisedName,
									  onChange: ZaServerXFormView.onFormFieldChanged,
                                      labelCssClass:"gridGroupBodyLabel",
                                        labelCssStyle:"text-align:left;border-right:1px solid;"
									}
								]
						  	},
							{type:_GROUP_,numCols:2,colSpan:2,colSizes:["275px","*"],
						      	enableDisableChangeEventSources:[ZaServer.A_Pop3ServerEnabled],
						      	enableDisableChecks:[ZaServerXFormView.getPOP3Enabled],
						  		items:[
									{ ref: ZaServer.A_Pop3BindAddress, type:_TEXTFIELD_,
                                      labelCssClass:"gridGroupBodyLabel",
                                      labelCssStyle:"text-align:left;border-right:1px solid;",
									 	label:ZaMsg.NAD_POP_Address,
									  	onChange:ZaServerXFormView.onFormFieldChanged
								  	},
									{type:_OUTPUT_,ref:".",label:"",
                                         labelCssClass:"gridGroupBodyLabel",
                                        labelCssStyle:"text-align:left;border-right:1px solid;",
                                        labelLocation:_LEFT_, value: ZaMsg.NAD_POP_Address_NOTE}
							  ]
						  	},
							{ ref: ZaServer.A_zimbraPop3BindPort, type:_TEXTFIELD_,
						      enableDisableChangeEventSources:[ZaServer.A_Pop3ServerEnabled],
						      enableDisableChecks:[ZaServerXFormView.getPOP3Enabled,ZaItem.hasWritePermission],

							  label: ZaMsg.LBL_POP_Port,
							  labelLocation:_LEFT_,
							  textFieldCssClass:"admin_xform_number_input",
							  onChange:ZaServerXFormView.onFormFieldChanged
						  	},

							{ ref: ZaServer.A_zimbraPop3SSLBindPort, type:_TEXTFIELD_,
							  visibilityChecks:[ZaServerXFormView.getPOP3SSLEnabled,ZaItem.hasReadPermission],
							  visibilityChangeEventSources:[ZaServer.A_Pop3SSLServerEnabled, ZaServer.A_Pop3ServerEnabled],
							  labelLocation:_LEFT_,
							  label: ZaMsg.LBL_POP_SSL_Port,
							  onChange:ZaServerXFormView.onFormFieldChanged
						  	}
				      	]
						}
					]
				};
       switchItems.push(case6);
   }

   if(_tab7) {
       var case7 = 	{type:_ZATABCASE_,width:"100%", id:"server_form_volumes_tab", caseKey:_tab7,
					visibilityChangeEventSources:[ZaModel.currentTab],
					visibilityChecks:[Case_XFormItem.prototype.isCurrentTab,ZaServerXFormView.getMailClientEnabled],

					numCols:1,
					items:[

						{type:_ZA_TOP_GROUPER_, id:"server_form_volumes_group",width:"98%",
							numCols:1,colSizes:["auto"],label:ZaMsg.VM_VolumesGrpTitle,
							cssStyle:"margin:10px;padding-bottom:0;",
							items: [
								{ref:ZaServer.A_Volumes, type:_DWT_LIST_, height:"200", width:"99%",
									 	preserveSelection:false, multiselect:true,cssClass: "DLSource",
									 	headerList:headerList, widgetClass:ZaServerVolumesListView,
									 	onSelection:ZaServerXFormView.volumeSelectionListener,
									 	valueChangeEventSources:[ZaServer.A_Volumes, ZaServer.A_CurrentMsgVolumeId, ZaServer.A_CurrentIndexVolumeId,ZaServer.A_RemovedVolumes]
								},
								{type:_GROUP_, numCols:5, colSizes:["100px","auto","100px","auto","100px"], width:"350px",
									cssStyle:"margin:10px;padding-bottom:0;",
									items: [
										{type:_DWT_BUTTON_, label:ZaMsg.TBB_Delete,width:"100px",
											onActivate:"ZaServerXFormView.deleteButtonListener.call(this);",
						      				enableDisableChangeEventSources:[ZaServer.A2_volume_selection_cache],
						      				enableDisableChecks:[ZaServerXFormView.isDeleteVolumeEnabled]

										},
										{type:_CELLSPACER_},
										{type:_DWT_BUTTON_, label:ZaMsg.TBB_Edit,width:"100px",
											onActivate:"ZaServerXFormView.editButtonListener.call(this);",
						      				enableDisableChangeEventSources:[ZaServer.A2_volume_selection_cache],
						      				enableDisableChecks:[ZaServerXFormView.isEditVolumeEnabled]

										},
										{type:_CELLSPACER_},
										{type:_DWT_BUTTON_, label:ZaMsg.NAD_Add,width:"100px",
											onActivate:"ZaServerXFormView.addButtonListener.call(this);"
										}
									]
								}
							]
						},
						{type:_ZA_TOP_GROUPER_,label:ZaMsg.VM_CurrentVolumesGrpTitle,id:"server_form_current_vol_group", items:[
							{type:_OSELECT1_, editable:false,
								valueChangeEventSources:[ZaServer.A_Volumes, ZaServer.A_RemovedVolumes],
                                enableDisableChecks:[],
                                visibilityChecks:[],
								ref:ZaServer.A_CurrentMsgVolumeId,
								choices:ZaServerXFormView.messageVolChoices,
								label:ZaMsg.LBL_VM_CurrentMessageVolume
							},
							{type:_OSELECT1_, editable:false,
								valueChangeEventSources:[ZaServer.A_Volumes, ZaServer.A_RemovedVolumes],
                                enableDisableChecks:[],
                                visibilityChecks:[],
								ref:ZaServer.A_CurrentIndexVolumeId,
								choices:ZaServerXFormView.indexVolChoices,
								label:ZaMsg.LBL_VM_CurrentIndexVolume
							}
						]}

					]
				};

       switchItems.push (case7) ;

       var case7_2 = 	{type:_ZATABCASE_, caseKey:_tab7,
					visibilityChangeEventSources:[ZaModel.currentTab],
					visibilityChecks:[Case_XFormItem.prototype.isCurrentTab,[XForm.checkInstanceValue,ZaServer.A_showVolumes,false]],

					items: [
						{ type: _DWT_ALERT_,
						  cssClass: "DwtTabTable",
						  containerCssStyle: "padding-bottom:0;",
						  style: DwtAlert.WARNING,
						  iconVisible: true,
						  content:ZaMsg.Alert_MbxSvcNotInstalled,
						  colSpan:"*"
						}
					]

				};
       switchItems.push (case7_2) ;
   }
	if(_tab8) {
		var case8 = {	type: _ZATABCASE_, id:"server_bind_ip_tab", caseKey:_tab8,
						colSizes:["auto"],numCols:1,
						items: [
							{type: _DWT_ALERT_,
									containerCssStyle: "padding-bottom:0;",
									style: DwtAlert.INFO,
									iconVisible: false,
									content: ZaMsg.MSG_ConfigIpAddressBindings
							},
							{type:_ZA_TOP_GROUPER_, colSizes:["275px","*"], numCols:2, label:ZaMsg.NAD_IpAddressBindingsForWebClient,
								items:[
									{ ref: ZaServer.A_zimbraMailBindAddress, type:_TEXTFIELD_,
										containerCssStyle: "padding-top:6px;padding-bottom:6px;",
										labelLocation:_LEFT_,
										label: ZaMsg.NAD_zimbraMailBindAddress,
										onChange: ZaServerXFormView.onFormFieldChanged
									},
									{ ref: ZaServer.A_zimbraMailSSLBindAddress, type:_TEXTFIELD_,
										containerCssStyle: "padding-top:6px;padding-bottom:6px;",
										labelLocation:_LEFT_,
										label: ZaMsg.NAD_zimbraMailSSLBindAddress,
										onChange: ZaServerXFormView.onFormFieldChanged
									},
									{ ref: ZaServer.A_zimbraMailSSLClientCertBindAddress, type:_TEXTFIELD_,
										containerCssStyle: "padding-top:6px;padding-bottom:6px;",
										labelLocation:_LEFT_,
										label: ZaMsg.NAD_zimbraMailSSLClientCertBindAddress,
										onChange: ZaServerXFormView.onFormFieldChanged
									}
								]
							},
							{type:_ZA_TOP_GROUPER_, colSizes:["275px","*"], numCols:2, label:ZaMsg.NAD_IpAddressBindingsForAdminConsole,
								items:[
									{ ref: ZaServer.A_zimbraAdminBindAddress, type:_TEXTFIELD_,
										containerCssStyle: "padding-top:6px;padding-bottom:6px;",
										labelLocation:_LEFT_,
										label: ZaMsg.NAD_zimbraAdminBindAddress,
										onChange: ZaServerXFormView.onFormFieldChanged
									}
								]
							}
						]
					};
			switchItems.push (case8) ;
		}


    xFormObject.tableCssStyle="width:100%;position:static;overflow:auto;";

    this.tabBarChoices = tabBarChoices;
    xFormObject.items = [
		{type:_GROUP_, cssClass:"ZmSelectedHeaderBg", colSpan:"*", id:"xform_header", 
			items: [
				{type:_GROUP_,	numCols:4,colSizes:["32px","*","80px","*"],
					items: [
						{type:_AJX_IMAGE_, src:"Server_32", label:null, rowSpan:3},
						{type:_OUTPUT_, ref:ZaServer.A_name, label:null,cssClass:"AdminTitle",
                            visibilityChecks:[ZaItem.hasReadPermission], height: 32, rowSpan:3},				
						{type:_OUTPUT_, ref:ZaServer.A_ServiceHostname, label:ZaMsg.NAD_ServiceHostname+":"},
						{type:_OUTPUT_, ref:ZaItem.A_zimbraId, label:ZaMsg.NAD_ZimbraID},
						{type:_OUTPUT_, ref:ZaItem.A_zimbraCreateTimestamp, 
							label:ZaMsg.LBL_zimbraCreateTimestamp, labelLocation:_LEFT_,
							getDisplayValue:function() {
								var val = ZaItem.formatServerTime(this.getInstanceValue());
								if(!val)
									return ZaMsg.Server_Time_NA;
								else
									return val;
							},
							visibilityChecks:[ZaItem.hasReadPermission]	
						}						
					]
				}
			]
		},
		{type:_TAB_BAR_, ref:ZaModel.currentTab,
			containerCssStyle: "padding-top:0;",
			choices: tabBarChoices ,
            cssStyle:"display:none;",
			cssClass:"ZaTabBar", id:"xform_tabbar"
		},
		{type:_SWITCH_, items:switchItems }

    ];
};
ZaTabView.XFormModifiers["ZaServerXFormView"].push(ZaServerXFormView.myXFormModifier);

ZaServerXFormView.prototype.getTabChoices = function () {
    return this.tabBarChoices;
}

ZaServerXFormView.showMtaServiceEnableRelatedNotice = function( isMtaEnable ){
	
	var notice;
	var style;
	if( isMtaEnable ){	
		notice = ZaMsg.NAD_MTA_notice_related_statistics_tabs_enable;
		style  = DwtMessageDialog.WARNING_STYLE;
	}
	else {
		notice = ZaMsg.NAD_MTA_notice_related_statistics_tabs_disable;	
		style  = DwtMessageDialog.INFO_STYLE
	}
	
	//ZaApp.getInstance().dialogs["confirmMessageDialog"] = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.OK_BUTTON]);
		
	ZaApp.getInstance().dialogs["msgDialog"].setMessage( notice, style );
	////ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, ZaServer.FlushMtaServiceData, this);		
	ZaApp.getInstance().dialogs["msgDialog"].popup();
	
	//var msgDialog = appCtxt.getMsgDialog();
	//msgDialog.setMessage(notice, DwtMessageDialog.INFO_STYLE);
	//msgDialog.popup();
}

ZaServerXFormView.onMtaServiceChanged = function (value, event, form) {
	
	ZaServerXFormView.showMtaServiceEnableRelatedNotice( value );
	
	form.parent.setDirty(true);
	this.setInstanceValue(value);
	return value;
	//return ZaServerXFormView.onFormFieldChanged( value, event, form );
}
}
if (AjxPackage.define("zimbraAdmin.adminext.view.ZaAdminExtListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaAdminExtListView
* @param parent
* @author Greg Solovyev
**/

ZaAdminExtListView = function(parent) {

	var className = null;
	var posStyle = DwtControl.ABSOLUTE_STYLE;
	
	var headerList = this._getHeaderList();
	
	ZaListView.call(this, {
		parent:parent, 
		className:className, 
		posStyle:posStyle, 
		headerList:headerList,
		id:ZaId.TAB_AE_MANAGE
	});

	this._appCtxt = this.shell.getData(ZaAppCtxt.LABEL);
	
}

ZaAdminExtListView.prototype = new ZaListView;
ZaAdminExtListView.prototype.constructor = ZaAdminExtListView;

ZaAdminExtListView.prototype.toString = 
function() {
	return "ZaAdminExtListView";
}

ZaAdminExtListView.prototype.getTitle = 
function () {
	return ZaMsg.AdminZimlets_view_title;
}

ZaAdminExtListView.prototype.getTabIcon =
function () {
	return "AdminExtension" ;
}
/**
* Renders a single item as a DIV element.
*/
ZaAdminExtListView.prototype._createItemHtml =
function(zimlet, now, isDragProxy) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(zimlet, div, DwtListView.TYPE_LIST_ITEM);
	
	var idx = 0;
	html[idx++] = "<table width='100%' cellspacing='0' cellpadding='0'>";
	html[idx++] = "<tr>";
	var cnt = this._headerList.length;
	for(var i = 0; i < cnt; i++) {
		var field = this._headerList[i]._field;
		var cellWidth = this._getCellWidth(i, {});
		if(field == ZaZimlet.A_name) {	
			// name
			html[idx++] = "<td align='left' width=" + cellWidth + ">";
			html[idx++] = AjxStringUtil.htmlEncode(zimlet[ZaZimlet.A_name]);
			html[idx++] = "</td>";
        } else if (field == "display") {
            // Display Name
            html[idx++] = "<td align='left' width=" + cellWidth + ">";
            html[idx++] = AjxStringUtil.htmlEncode(zimlet.getDisplayName());
            html[idx++] = "</td>";
		} else if(field == ZaZimlet.A_zimbraZimletDescription) {	
			// description
			html[idx++] = "<td align='left' width=" + cellWidth + ">";
			html[idx++] = AjxStringUtil.htmlEncode(zimlet.getDescription());
			html[idx++] = "</td>";
		} else if (field === "spacer") {
            // spacer
            html[idx++] = "<td align='left' width=" + cellWidth + "></td>";
        } else if (field == ZaZimlet.A_zimbraZimletVersion) {
            // version
            html[idx++] = "<td align='left' width=" + cellWidth + ">";
            var version = zimlet.attrs[ZaZimlet.A_zimbraZimletVersion];
            if (version && version.length > 0) {
                var lastIndexOf_ = version.lastIndexOf("_");
                if (lastIndexOf_ > -1) {
                    version = version.substring(0, lastIndexOf_);
                }
            }
            html[idx++] = AjxStringUtil.htmlEncode(version);
            html[idx++] = "</td>";
        }
	}
	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}

ZaAdminExtListView.prototype._getHeaderList =
function() {

	var headerList = new Array();
//idPrefix, label, iconInfo, width, sortable, sortField, resizeable, visible
	var sortable=1;
	headerList[0] = new ZaListHeaderItem(ZaZimlet.A_name, ZaMsg.CLV_Name_col, null, 250, sortable++, "name", true, true);
    headerList[1] = new ZaListHeaderItem("display", ZaMsg.ALV_DspName_col, null, 250, null, "display", true, true);
	headerList[2] = new ZaListHeaderItem(ZaZimlet.A_zimbraZimletDescription, ZaMsg.DLV_Description_col, null, "auto", null, ZaZimlet.A_zimbraZimletDescription, true, true);
    headerList[3] = new ZaListHeaderItem("spacer", null, null, "5px", null, null, false, false);
    headerList[4] = new ZaListHeaderItem(ZaZimlet.A_zimbraZimletVersion, ZaMsg.CLV_Version_col, null, "80px", null, ZaZimlet.A_zimbraZimletVersion, true, true);
	return headerList;
}


}
if (AjxPackage.define("zimbraAdmin.zimlets.view.ZaZimletListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaZimletListView
* @param parent
* @author Greg Solovyev
**/

ZaZimletListView = function(parent) {

	var className = null;
	var posStyle = DwtControl.ABSOLUTE_STYLE;
	
	var headerList = this._getHeaderList();
	
	ZaListView.call(this, {
		parent:parent, 
		className:className, 
		posStyle:posStyle, 
		headerList:headerList,
		id:ZaId.TAB_ZIM_MANAGE
	});

	this._appCtxt = this.shell.getData(ZaAppCtxt.LABEL);
	
}

ZaZimletListView.prototype = new ZaListView;
ZaZimletListView.prototype.constructor = ZaZimletListView;
ZaZimletListView.prototype.toString = 
function() {
	return "ZaZimletListView";
}

ZaZimletListView.prototype.getTitle = 
function () {
	return ZaMsg.Zimlets_view_title;
}

ZaZimletListView.prototype.getTabIcon = 
function () {
	return "zimlet" ;
}

/**
* Renders a single item as a DIV element.
*/
ZaZimletListView.prototype._createItemHtml =
function(zimlet, now, isDragProxy) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(zimlet, div, DwtListView.TYPE_LIST_ITEM);
	
	var idx = 0;
	html[idx++] = "<table width='100%' cellspacing='0' cellpadding='0'>";
	html[idx++] = "<tr>";
	var cnt = this._headerList.length;
	for(var i = 0; i < cnt; i++) {
		var cellWidth = this._getCellWidth(i, {});
		var field = this._headerList[i]._field;
		if(field == ZaZimlet.A_name) {	
			// name
			html[idx++] = "<td align='left' width=" + cellWidth + ">";
			html[idx++] = AjxStringUtil.htmlEncode(zimlet[ZaZimlet.A_name]);
			html[idx++] = "</td>";
        } else if (field == "display") {
            // Display Name
            html[idx++] = "<td align='left' width=" + cellWidth + ">";
            html[idx++] = AjxStringUtil.htmlEncode(zimlet.getDisplayName());
            html[idx++] = "</td>";
        } else if(field == ZaZimlet.A_zimbraZimletDescription) {
			// description
			html[idx++] = "<td align='left' width=" + cellWidth + ">";
            var desc = ZaZimletListView.__processMessage(zimlet[ZaZimlet.A_name], zimlet.attrs[ZaZimlet.A_zimbraZimletDescription ]);
			html[idx++] = AjxStringUtil.htmlEncode(desc);
			html[idx++] = "</td>";
        } else if (field === "spacer") {
            // spacer
            html[idx++] = "<td align='left' width=" + cellWidth + "></td>";
        } else if (field == ZaZimlet.A_zimbraZimletVersion) {
            // version
            html[idx++] = "<td align='left' width=" + cellWidth + ">";
            var version = zimlet.attrs[ZaZimlet.A_zimbraZimletVersion];
            if (version && version.length > 0) {
                var lastIndexOf_ = version.lastIndexOf("_");
                if (lastIndexOf_ > -1) {
                    version = version.substring(0, lastIndexOf_);
                }
            }
            html[idx++] = AjxStringUtil.htmlEncode(version);
            html[idx++] = "</td>";
		} else if(field == ZaZimlet.A_zimbraZimletEnabled) {
			// status
			html[idx++] = "<td align='left' width=" + cellWidth + ">";
			html[idx++] = (zimlet.attrs[ZaZimlet.A_zimbraZimletEnabled] == "TRUE") ?  AjxStringUtil.htmlEncode(ZaMsg.NAD_Enabled) :AjxStringUtil.htmlEncode(ZaMsg.NAD_Disabled) ;
			html[idx++] = "</td>";
		}
	}
	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}

ZaZimletListView.prototype._getHeaderList =
function() {

	var headerList = new Array();
//idPrefix, label, iconInfo, width, sortable, sortField, resizeable, visible
	var sortable=1;
	headerList[0] = new ZaListHeaderItem(ZaZimlet.A_name, ZaMsg.CLV_Name_col, null, "200px", sortable++, "name", true, true);

    headerList[1] = new ZaListHeaderItem("display", ZaMsg.ALV_DspName_col, null, "200px", null, "display", true, true);

	headerList[2] = new ZaListHeaderItem(ZaZimlet.A_zimbraZimletDescription, ZaMsg.DLV_Description_col, null, "auto", null, ZaZimlet.A_zimbraZimletDescription, true, true);

    headerList[3] = new ZaListHeaderItem("spacer", null, null, "5px", null, null, false, false);

    headerList[4] = new ZaListHeaderItem(ZaZimlet.A_zimbraZimletVersion, ZaMsg.CLV_Version_col, null, "80px", null, ZaZimlet.A_zimbraZimletVersion, true, true);

	headerList[5] = new ZaListHeaderItem(ZaZimlet.A_zimbraZimletEnabled, ZaMsg.ALV_Status_col, null, "120px", null, ZaZimlet.A_zimbraZimletEnabled, true, true);
		
	return headerList;
}

ZaZimletListView.__RE_MSG = /\$\{msg\.(.*?)\}/g;
ZaZimletListView.__processMessage = function(name, message) {
    return (message||"").replace(ZaZimletListView.__RE_MSG, function($0, $1) {
        var res = window[name];
        return (res && res[$1]) || $0;
    });
};
}
if (AjxPackage.define("zimbraAdmin.zimlets.view.ZaZimletXFormView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* This class describes a view of a single Zimlet
* @class ZaZimletXFormView
* @contructor
* @param parent {DwtComposite}
* @param app {ZaApp}
* @author Greg Solovyev
**/
ZaZimletXFormView = function(parent) {
	ZaTabView.call(this, {
		parent:parent,
		iKeyName:"ZaZimletXFormView",
		contextId:ZaId.TAB_ZIM_EDIT
	});	
	this.TAB_INDEX = 0;	
	this.initForm(ZaZimlet.myXModel,this.getMyXForm());
}

ZaZimletXFormView.prototype = new ZaTabView();
ZaZimletXFormView.prototype.constructor = ZaZimletXFormView;
ZaTabView.XFormModifiers["ZaZimletXFormView"] = new Array();

/**
* Sets the object contained in the view
* @param entry - {ZaZimlet} object to display
**/
ZaZimletXFormView.prototype.setObject =
function(entry) {
	this._containedObject = new Object();
	this._containedObject.attrs = new Object();

	for (var a in entry.attrs) {
		if(entry.attrs[a] instanceof Array) {
			this._containedObject.attrs[a] = new Array();
			for(var aa in entry.attrs[a]) {
				this._containedObject.attrs[a][aa] = entry.attrs[a][aa];
			}
		} else {
			this._containedObject.attrs[a] = entry.attrs[a];
		}
	}
	this._containedObject.name = entry.name;
	this._containedObject.type = entry.type ;
	if(entry.id)
		this._containedObject.id = entry.id;

    if(!entry[ZaModel.currentTab])
        this._containedObject[ZaModel.currentTab] = "1";
    else
        this._containedObject[ZaModel.currentTab] = entry[ZaModel.currentTab];

    this._localXForm.setInstance(this._containedObject) ;

}

ZaZimletXFormView.myXFormModifier = function(xFormObject) {
    this.tabChoices = [] ;
    var cases = [] ;
    xFormObject.tableCssStyle="width:100%;";
	xFormObject.items = [
			{type:_GROUP_, cssClass:"ZmSelectedHeaderBg", colSpan: "*", id:"xform_header",
				items: [
					{type:_GROUP_,	numCols:4,colSizes:["90px","350px","100px","200px"],
                        items:[
                            {type:_OUTPUT_, ref:"name", label:ZaMsg.NAD_zimletName},
                            {type:_OUTPUT_, ref:ZaZimlet.A_zimbraZimletEnabled, label:ZaMsg.NAD_zimletStatus,choices:ZaModel.BOOLEAN_CHOICES },
                            {type:_OUTPUT_, ref:ZaZimlet.A_zimbraZimletDescription, label:ZaMsg.NAD_Description, colSpan: "*",
				getDisplayValue:function(itemVal){
				   var name = this.getInstanceValue(ZaZimlet.A_name);				
				   var ret = ZaZimletListView.__processMessage(name, itemVal);
				   return ret;	
				}
			    },
							{type:_OUTPUT_, ref:ZaItem.A_zimbraCreateTimestamp, 
								label:ZaMsg.LBL_zimbraCreateTimestamp, labelLocation:_LEFT_,
								getDisplayValue:function() {
										var val = ZaItem.formatServerTime(this.getInstanceValue());
									if(!val)
										return ZaMsg.Server_Time_NA;
									else
										return val;
								},
								visibilityChecks:[ZaItem.hasReadPermission]	
							}                            
                        ]
                    }
				],
				cssStyle:"padding-top:5px; padding-bottom:5px"
			},
			{type:_TAB_BAR_,  ref:ZaModel.currentTab,choices:this.tabChoices,cssClass:"ZaTabBar", cssStyle:"display:none;", id:"xform_tabbar"},
			{type:_SWITCH_, align:_LEFT_, valign:_TOP_, items:cases}
	];

};
ZaTabView.XFormModifiers["ZaZimletXFormView"].push(ZaZimletXFormView.myXFormModifier);

ZaZimletXFormView.prototype.getTabChoices = function() {
    return this.tabChoices;
}
}
if (AjxPackage.define("zimbraAdmin.zimlets.view.ZaZimletDeployXWizard")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * @class ZaZimletDeployXWizard
 * @contructor ZaZimletDeployXWizard
 * @param ZaApp
 *            parent
 * @param ZaApp
 *            app this is the wizard dialog for deployig a zimlet or an admin
 *            extension
 * @author Greg Solovyev
 */
ZaZimletDeployXWizard = function(parent) {
    ZaXWizardDialog.call(this, parent, null, ZaMsg.ZMLT_DeployZimletWizardTitle, "550px", "300px", "ZaZimletDeployXWizard", null, ZaId.DLG_ZIM_DEPLOY);
    this._app = ZaApp.getInstance();
    this.stepChoices = [ {
        label : ZaMsg.ZMLT_SelectZimletStepTitle,
        value : 1
    }, {
        label : ZaMsg.ZMLT_DeployZimletStepTitle,
        value : 2
    } ];
    this.currentPageNum = 0;
    this.initForm(ZaZimlet.myXModel, this.getMyXForm());
    this._helpURL = ZaZimletDeployXWizard.helpURL;
    this.pollInterval = 500;
    this.pollAction = new AjxTimedAction(this, this.getDeploymentStatus);
    this._pollHandler = null;
}
ZaZimletDeployXWizard.helpURL = ZaUtil.HELP_URL;
ZaZimletDeployXWizard.prototype = new ZaXWizardDialog;
ZaZimletDeployXWizard.prototype.constructor = ZaZimletDeployXWizard;
ZaZimletDeployXWizard.prototype.miniType = 2;
ZaXDialog.XFormModifiers["ZaZimletDeployXWizard"] = new Array();
ZaZimletDeployXWizard.ZimletUploadFormId = null;
ZaZimletDeployXWizard.ZimletUploadAttachmentInputId = null;

ZaZimletDeployXWizard.prototype.getUploadFormHtml = function() {
    ZaZimletDeployXWizard.ZimletUploadFormId = Dwt.getNextId();
    ZaZimletDeployXWizard.ZimletUploadAttachmentInputId = Dwt.getNextId();

    var uri = appContextPath + "/../service/upload";
    DBG.println("upload uri = " + uri);
    var html = new Array();
    var idx = 0;
    html[idx++] = "<div style='overflow:hidden'><form method='POST' action='";
    html[idx++] = uri;
    html[idx++] = "' id='";
    html[idx++] = ZaZimletDeployXWizard.ZimletUploadFormId;
    html[idx++] = "' enctype='multipart/form-data'><input id='";
    html[idx++] = ZaZimletDeployXWizard.ZimletUploadAttachmentInputId;
    html[idx++] = "' type=file  name='zimletFile' size='50' onChange=\"ZaZimletDeployXWizard.changeDeployBtnState(this,event||window.event,'" + this.getHTMLElId() + "')\"></input>";
    html[idx++] = "</form></div>";
    return html.join("");
}

ZaZimletDeployXWizard.changeDeployBtnState = function(obj, ev, DwtObjId) {
    var wiz = DwtControl.ALL_BY_ID[DwtObjId];
    if (wiz) {
        if (obj.value) {
            wiz.getButton(DwtWizardDialog.NEXT_BUTTON).setEnabled(true);
        } else {
            wiz.getButton(DwtWizardDialog.NEXT_BUTTON).setEnabled(false);
        }
    }
}

ZaZimletDeployXWizard.prototype.handleXFormChange = function() {
    if (this._containedObject[ZaModel.currentStep] == 2) {
        this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
        this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
        this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(true);
    }
}
/**
 * @method setObject sets the object contained in the view
 * @param entry -
 *            ZaRestore object to display
 */
ZaZimletDeployXWizard.prototype.setObject = function(entry) {
    this._containedObject = entry;
    this._containedObject[ZaModel.currentStep] = entry[ZaModel.currentStep] || 1;
    this._containedObject[ZaZimlet.A_attachmentId] = entry[ZaZimlet.A_attachmentId] || null;
    this._localXForm.setInstance(this._containedObject);
}
/**
 * Overwritten methods that control wizard's flow (open, go next,go previous,
 * finish)
 */
ZaZimletDeployXWizard.prototype.popup = function(loc) {
    ZaXWizardDialog.prototype.popup.call(this, loc);

    this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
    this._button[DwtWizardDialog.PREV_BUTTON].setText(ZaMsg.ZMLT_ReselectZimlet);

    this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
    this._button[DwtWizardDialog.NEXT_BUTTON].setText(ZaMsg.ZMLT_DeployZimlet);

    this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);

}

ZaZimletDeployXWizard.prototype.getUploadFrameId = function() {
    if (!this._uploadManagerIframeId) {
        var iframeId = Dwt.getNextId();
        var html = [ "<iframe name='", iframeId, "' id='", iframeId, "' src='", (AjxEnv.isIE && location.protocol == "https:") ? appContextPath + "/public/blank.html" : "javascript:\"\"",
                "' style='position: absolute; top: 0; left: 0; visibility: hidden'></iframe>" ];
        var div = document.createElement("div");
        div.innerHTML = html.join("");
        document.body.appendChild(div.firstChild);
        this._uploadManagerIframeId = iframeId;
    }
    return this._uploadManagerIframeId;
};

ZaZimletDeployXWizard.prototype.getUploadManager = function() {
    return this._uploadManager;
};

/**
 * @params uploadManager is the AjxPost object
 */
ZaZimletDeployXWizard.prototype.setUploadManager = function(uploadManager) {
    this._uploadManager = uploadManager;
};

ZaZimletDeployXWizard.prototype.goNext = function() {
    var inputElement = document.getElementById(ZaZimletDeployXWizard.ZimletUploadAttachmentInputId);
    if (inputElement && inputElement.value) {
        var zimletUploadCallback = new AjxCallback(this, this.uploadCallback);
        try {
            ZaUploader.upload.call(this, zimletUploadCallback, [ZaZimletDeployXWizard.ZimletUploadAttachmentInputId], ZaZimletDeployXWizard.ZimletUploadFormId);
        } catch (ex) {
            ZaApp.getInstance().getCurrentController().popupErrorDialog((ex && ex.msg) ? ex.msg : ZaMsg.ZMLT_zimletFileNameError);
        }
        this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
        this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
        this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(true);
        ZaXWizardDialog.prototype.goNext.call(this);
    } else {
        ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ZMLT_zimletFileNameError);
    }
}

ZaZimletDeployXWizard.prototype.goPrev = function() {
    this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
    this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
    this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
    var instance = this._localXForm.getInstance();
    instance[ZaZimlet.A_attachmentId] = null;

    instance[ZaZimlet.A_uploadStatus] = null;
    instance[ZaZimlet.A_deployStatus] = null;

    instance[ZaZimlet.A_uploadStatusMsg] = null;
    instance[ZaZimlet.A_deployStatusMsg] = null;

    this._localXForm.setInstance(instance);
    ZaXWizardDialog.prototype.goPrev.call(this);
}

/**
 * member of ZaXWizardDialog closes the wizard dialog
 */
ZaZimletDeployXWizard.prototype.popdown = function() {
    if (this._pollHandler)
        AjxTimedAction.cancelAction(this._pollHandler);

    ZaXWizardDialog.prototype.popdown.call(this);
}

ZaZimletDeployXWizard.prototype.uploadCallback = function(status, uploadResults) {
    // we use explorer's 'submit form' mechanism to upload the file, so we
    // cannot upload multi files in the same time,
    // but only one after one. thus this function will be called back in
    // sequence.
    try {
        if(uploadResults && uploadResults[0] && uploadResults[0].aid && status == AjxPost.SC_OK) {
            var instance = this._localXForm.getInstance();
            var msgLine = null;
            instance[ZaZimlet.A_attachmentId] = uploadResults[0].aid;
            instance[ZaZimlet.A_uploadStatus] = ZaZimlet.STATUS_SUCCEEDED;
            msgLine = AjxMessageFormat.format(ZaMsg.ZMLT_UploadZimletSuccessMsg);
            ZaZimlet.deploy({
                action : ZaZimlet.ACTION_DEPLOY_ALL,
                attId : uploadResults[0].aid,
                flushCache : instance[ZaZimlet.A_flushCache]
            }, new AjxCallback(this, this.deployZimletClbck));
        } else {
            // handle errors during attachment upload.
            instance[ZaZimlet.A_uploadStatus] = ZaZimlet.STATUS_FAILED;
            msgLine = AjxMessageFormat.format(ZaMsg.ZMLT_UploadZimletErrorMsg, [ status ]);
        }
        instance[ZaZimlet.A_uploadStatusMsg] = msgLine + ("<br/>");
    } catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaZimletDeployXWizard.uploadCallback");
    }

    this._localXForm.setInstance(instance);
}

ZaZimletDeployXWizard.prototype.getDeploymentStatus = function() {
    try {
        var instance = this._localXForm.getInstance();
        ZaZimlet.deploy({
            action : ZaZimlet.ACTION_DEPLOY_STATUS,
            attId : instance[ZaZimlet.A_attachmentId]
        }, new AjxCallback(this, this.deployZimletClbck));
    } catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaZimletDeployXWizard.getDeploymentStatus");
    }

}

ZaZimletDeployXWizard.prototype.deployZimletClbck = function(resp) {
    var instance = this._localXForm.getInstance();
    try {
        if (!resp) {
            throw (new AjxException(ZaMsg.ERROR_EMPTY_RESPONSE_ARG, AjxException.UNKNOWN, "ZaZimletDeployXWizard.deployZimletClbck"));
        }
        if (resp.isException()) {
            throw (resp.getException());
        } else {
            var done = true;
            var hasErrors = false;
            var response = resp.getResponse().Body.DeployZimletResponse;
            var msgLines = [];
            var progress = response[ZaZimlet.A_progress];

            if (progress) {
                if (!(progress instanceof Array)) {
                    progress = [ progress ];
                }

                var cnt = progress.length;
                // cnt may be > 1, if there are multi mailbox servers. so here
                // get the progress in every server
                for (var i = 0; i < cnt; i++) {
                    var serverName = progress[i].server;
                    var status = progress[i].status;
                    if (status == ZaZimlet.STATUS_PENDING) {
                        done = false;
                        msgLines.push(AjxMessageFormat.format(ZaMsg.ZMLT_DeployProgres, [ serverName, ZaMsg.ZMLT_StatusPending ]));
                    } else if (status == ZaZimlet.STATUS_FAILED) {
                        hasErrors = true;
                        msgLines.push(AjxMessageFormat.format(ZaMsg.ZMLT_DeployProgresFail, [ serverName, progress[i].error ]));
                    } else if (status == ZaZimlet.STATUS_SUCCEEDED) {
                        msgLines.push(AjxMessageFormat.format(ZaMsg.ZMLT_DeployProgres, [ serverName, ZaMsg.ZMLT_StatusSuccess ]));
                    }
                    msgLines.push("<br/>");
                }

                if (hasErrors) {
                    instance[ZaZimlet.A_deployStatus] = ZaZimlet.STATUS_FAILED;
                    // msgLines.push(ZaMsg.ZMLT_failedDeployZimlet); //keep
                    // previous msg, let the user be able to track the error.
                } else if (done) {
                    instance[ZaZimlet.A_deployStatus] = ZaZimlet.STATUS_SUCCEEDED;
                    msgLines = [ ZaMsg.ZMLT_DeployZimletComplete ]; // clear up
                                                                    // previous
                                                                    // msg, only
                                                                    // show the
                                                                    // final
                                                                    // succeeded
                                                                    // status;
                } else {
                    instance[ZaZimlet.A_deployStatus] = ZaZimlet.STATUS_PENDING;
                }
                instance[ZaZimlet.A_deployStatusMsg] = msgLines.join("<br/>") + ("<br/>");

                if (!done) {
                    // schedule another request
                    this._pollHandler = AjxTimedAction.scheduleAction(this.pollAction, this.pollInterval);
                } else {
                    AjxTimedAction.cancelAction(this._pollHandler);
                    ZaApp.getInstance().getCurrentController().fireCreationEvent(new ZaZimlet());
                }
            }
        }
    } catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaZimletDeployXWizard.deployZimletClbck");
    }
    this._localXForm.setInstance(instance);
}

ZaZimletDeployXWizard.canShowDeployStatusMsg = function(showItWhenSucceededOrFailed) {
    var uploadStatus = this.getInstanceValue(ZaZimlet.A_uploadStatus);
    if (uploadStatus != ZaZimlet.STATUS_SUCCEEDED) {
        return false; // don't show deploying msg until uploading is succeeded
    }

    var deployStatus = this.getInstanceValue(ZaZimlet.A_deployStatus);
    if (showItWhenSucceededOrFailed) {
        return (deployStatus != ZaZimlet.STATUS_FAILED);
    } else {
        return (deployStatus == ZaZimlet.STATUS_FAILED);
    }
}

ZaZimletDeployXWizard.myXFormModifier = function(xFormObject) {
    var case1 = {
        type : _CASE_,
        numCols : 2,
        caseKey : 1,
        align : _LEFT_,
        valign : _TOP_,
        width : "520px",
        cssStyle : "overflow:hidden",
        items : [ {
            type : _OUTPUT_,
            value : ZaMsg.ZMLT_uploadTitle,
            align : _LEFT_,
            colSpan : 2
        }, {
            type : _OUTPUT_,
            value : this.getUploadFormHtml(),
            colSpan : 2,
            width : "480px"
        }, {
            type : _SPACER_,
            colSpan : 2
        }, {
            ref : ZaZimlet.A_flushCache,
            type : _CHECKBOX_,
            align : _RIGHT_,
            subLabel : "",
            label : ZaMsg.ZMLT_flushCache,
            labelLocation : _RIGHT_,
            visibilityChecks : [],
            enableDisableChecks : []
        }, {
            type : _SPACER_,
            colSpan : 2
        } ]
    };
    var case2 = {
        type : _CASE_,
        numCols : 1,
        caseKey : 2,
        width : "400px",
        items : [ {
            type : _GROUP_,
            numCols : 1,
            items : [ {
                type : _DWT_ALERT_,
                style : DwtAlert.CRITICAL,
                iconVisible : true,
                content : null,
                width : "400px",
                ref : ZaZimlet.A_uploadStatusMsg,
                visibilityChecks : [ [ XForm.checkInstanceValue, ZaZimlet.A_uploadStatus, ZaZimlet.STATUS_FAILED ] ],
                visibilityChangeEventSources : [ ZaZimlet.A_uploadStatus ],
                align : _CENTER_
            }, {
                type : _DWT_ALERT_,
                style : DwtAlert.INFORMATION,
                iconVisible : true,
                content : null,
                width : "400px",
                ref : ZaZimlet.A_uploadStatusMsg,
                visibilityChecks : [ [ XForm.checkInstanceValueNot, ZaZimlet.A_uploadStatus, ZaZimlet.STATUS_FAILED ] ],
                visibilityChangeEventSources : [ ZaZimlet.A_uploadStatus ],
                align : _CENTER_
            }, {
                type : _DWT_ALERT_,
                style : DwtAlert.CRITICAL,
                iconVisible : true,
                content : null,
                width : "400px",
                ref : ZaZimlet.A_deployStatusMsg,
                visibilityChecks : [ [ ZaZimletDeployXWizard.canShowDeployStatusMsg, false ] ],
                visibilityChangeEventSources : [ ZaZimlet.A_deployStatus ],
                align : _CENTER_
            }, {
                type : _DWT_ALERT_,
                style : DwtAlert.INFORMATION,
                iconVisible : true,
                content : null,
                width : "400px",
                ref : ZaZimlet.A_deployStatusMsg,
                visibilityChecks : [ [ ZaZimletDeployXWizard.canShowDeployStatusMsg, true ] ],
                visibilityChangeEventSources : [ ZaZimlet.A_deployStatus ],
                align : _CENTER_
            } ]
        } ]
    };
    xFormObject.items = [ {
        type : _OUTPUT_,
        colSpan : 2,
        valign : _TOP_,
        ref : ZaModel.currentStep,
        choices : this.stepChoices,
        cssStyle : "white-space: normal"
    }, {
        type : _SEPARATOR_,
        align : _CENTER_,
        valign : _TOP_
    }, {
        type : _SPACER_,
        align : _CENTER_,
        valign : _TOP_
    }, {
        type : _SWITCH_,
        width : 450,
        align : _LEFT_,
        valign : _TOP_,
        items : [ case1, case2 ]
    } ];
}
ZaXDialog.XFormModifiers["ZaZimletDeployXWizard"].push(ZaZimletDeployXWizard.myXFormModifier);
}
if (AjxPackage.define("zimbraAdmin.domains.view.ZaDomainListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaDomainListView
* @param parent
* @author Roland Schemers
* @author Greg Solovyev
**/

ZaDomainListView = function(parent, listType) {

//	var className = "ZaDomainListView";
	var className = null;
	var posStyle = DwtControl.ABSOLUTE_STYLE;

    this._listType = listType;

	var headerList = this._getHeaderList();

	ZaListView.call(this, {
		parent:parent, 
		className:className, 
		posStyle:posStyle, 
		headerList:headerList,
		id: ZaId.TAB_DOMAIN_MANAGE,
		scrollLoading:true
	});

	this._appCtxt = this.shell.getData(ZaAppCtxt.LABEL);
	
}

ZaDomainListView.prototype = new ZaListView;
ZaDomainListView.prototype.constructor = ZaDomainListView;

ZaDomainListView.prototype.toString = 
function() {
	return "ZaDomainListView";
}

ZaDomainListView.prototype.getTitle = 
function () {
	return ZaMsg.Domain_view_title;
}

ZaDomainListView.prototype.getTabIcon =
function () {
	return "Domain" ;
}

/**
* Renders a single item as a DIV element.
*/
ZaDomainListView.prototype._createItemHtml =
function(domain, now, isDragProxy) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(domain, div, DwtListView.TYPE_LIST_ITEM);
	
	var idx = 0;
	html[idx++] = "<table width='100%'>";
	html[idx++] = "<tr>";
	var cnt = this._headerList.length;
    var dwtId = Dwt.getNextId();
    var rowId = this._listType;
	for(var i = 0; i < cnt; i++) {
		var field = this._headerList[i]._field;
		var cellWidth = this._getCellWidth(i, {});
		if(field == "type") {
			// type
            var partialClassName = "Domain";
            var domainType = domain.attrs[ZaDomain.A_domainType];
            if (domainType === "alias") {
                partialClassName += "Alias";
            }
			html[idx++] = "<td id=\"" + rowId + "_data_type_" + dwtId + "\" width=" + this._headerList[i]._width + ">" + AjxImg.getImageHtml(partialClassName) + "</td>";
		} else if(field == ZaDomain.A_domainName) {
			// name
			html[idx++] = "<td id=\"" + rowId + "_data_name_" + dwtId + "\" align='left' width=" + cellWidth + ">";
			html[idx++] = AjxStringUtil.htmlEncode(domain.name);
			html[idx++] = "</td>";
		} else if(field == ZaDomain.A_description) {
			// description		
			html[idx++] = "<td id=\"" + rowId + "_data_desc_" + dwtId + "\" align='left' width=" + cellWidth + ">";
			html[idx++] = AjxStringUtil.htmlEncode(
				ZaItem.getDescriptionValue(domain.attrs[ZaDomain.A_description]));
			html[idx++] = "</td>";
		} else if(field == ZaDomain.A_zimbraDomainStatus) {
			// description		
			html[idx++] = "<td id=\"" + rowId + "_data_status_" + dwtId + "\" align='left' width=" + cellWidth + ">";
			html[idx++] = ZaDomain._domainStatus(domain.attrs[ZaDomain.A_zimbraDomainStatus]);
			html[idx++] = "</td>";
		} else if (field == ZaDomain.A_domainType) {
			// domain type
			html[idx++] = "<td id=\"" + rowId + "_data_domain_type_" + dwtId + "\" align='left' width=" + cellWidth + ">";
			html[idx++] = AjxStringUtil.htmlEncode(domain.attrs[ZaDomain.A_domainType]);
			html[idx++] = "</td>";
		}
	}
	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}

ZaDomainListView.prototype._getHeaderList =
function() {

	var headerList = new Array();
	var sortable = 1;
	var i = 0 ;
	//idPrefix, label, iconInfo, width, sortable, sortField, resizeable, visible
	headerList[i++] = new ZaListHeaderItem("type", null, null, "22px", null, "objectClass", false, true);
	headerList[i++] = new ZaListHeaderItem(ZaDomain.A_domainName , ZaMsg.DLV_Name_col, null, "250px", sortable++, ZaDomain.A_domainName, true, true);
	//headerList[0].initialize(ZaMsg.CLV_Name_col, null, "245", true, ZaDomain.A_domainName);
	headerList[i++] = new ZaListHeaderItem(ZaDomain.A_domainType , ZaMsg.DLV_Type_col, null, "100px", null, ZaDomain.A_domainType, true, true);
	headerList[i++] = new ZaListHeaderItem(ZaDomain.A_zimbraDomainStatus , ZaMsg.DLV_Status_col, null, "100px", null, ZaDomain.A_zimbraDomainStatus, true, true);
	headerList[i++] = new ZaListHeaderItem(ZaDomain.A_description, ZaMsg.DLV_Description_col, null, "auto", null, null, true, true);
	//headerList[1].initialize(ZaMsg.CLV_Description_col, null, "245", false, ZaDomain.A_description);
	
	return headerList;
}


}
if (AjxPackage.define("zimbraAdmin.domains.view.ZaDomainXFormView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaDomainXFormView
* @contructor
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaDomainXFormView = function(parent, entry) {
	ZaTabView.call(this, {
		parent:parent,
		iKeyName:"ZaDomainXFormView",
		contextId: ZaId.TAB_DOMAIN_EDIT
	}); 
	this.GALModes = [
		{label:ZaMsg.GALMode_internal, value:ZaDomain.GAL_Mode_internal},
		{label:ZaMsg.GALMode_external, value:ZaDomain.GAL_Mode_external}, 
		{label:ZaMsg.GALMode_both, value:ZaDomain.GAL_Mode_both}
  	];
  	this.GALServerTypes = [
		{label:ZaMsg.GALServerType_ldap, value:ZaDomain.GAL_ServerType_ldap},
		{label:ZaMsg.GALServerType_ad, value:ZaDomain.GAL_ServerType_ad} 
	];	
	
	this.AuthMechs = [
		{label:ZaMsg.AuthMech_zimbra, value:ZaDomain.AuthMech_zimbra},
		{label:ZaMsg.AuthMech_ldap, value:ZaDomain.AuthMech_ldap},
		{label:ZaMsg.AuthMech_ad, value:ZaDomain.AuthMech_ad}		
	];
	this.cosChoices = new XFormChoices([], XFormChoices.OBJECT_LIST, "id", "name");
	this.catchAllChoices = new XFormChoices([], XFormChoices.OBJECT_LIST, "id", "name");
	this.TAB_INDEX = 0;	
	this.initForm(ZaDomain.myXModel,this.getMyXForm(entry), null);
}

ZaDomainXFormView.prototype = new ZaTabView();
ZaDomainXFormView.prototype.constructor = ZaDomainXFormView;
ZaTabView.XFormModifiers["ZaDomainXFormView"] = new Array();

ZaDomainXFormView.zimletChoices = new XFormChoices([], XFormChoices.SIMPLE_LIST);

ZaTabView.XFormSetObjectMethods["ZaDomainXFormView"] = new Array();

/**
* @method setObject sets the object contained in the view
* @param entry - ZaDomain object to display
**/
ZaDomainXFormView.prototype.setObject =
function(entry) {
    ZaAccount.prototype.manageSpecialAttrs.call (entry) ;

    this._containedObject = new ZaDomain();
	this._containedObject.attrs = new Object();
	
	if(entry.rights)
		this._containedObject.rights = entry.rights;
	
	if(entry.setAttrs)
		this._containedObject.setAttrs = entry.setAttrs;
	
	if(entry.getAttrs)
		this._containedObject.getAttrs = entry.getAttrs;
		
	if(entry._defaultValues)
		this._containedObject._defaultValues = entry._defaultValues;
		
	this._containedObject.name = entry.name;
	this._containedObject.id = entry.id;
	this._containedObject.type = entry.type ;
	
	for (var a in entry.attrs) {
        var modelItem = this._localXForm.getModel().getItem(a) ;
        if ((modelItem != null && modelItem.type == _LIST_) || (entry.attrs[a] != null && entry.attrs[a] instanceof Array)) {  
        	//need deep clone
            this._containedObject.attrs [a] = ZaItem.deepCloneListItem (entry.attrs[a]);
        } else {
            this._containedObject.attrs[a] = entry.attrs[a];
        }
    }
	if(!this._containedObject.attrs[ZaDomain.A_zimbraDomainStatus]) {
		this._containedObject.attrs[ZaDomain.A_zimbraDomainStatus] = ZaDomain.DOMAIN_STATUS_ACTIVE;
	}
	this._containedObject[ZaDomain.A_AuthUseBindPassword] = entry[ZaDomain.A_AuthUseBindPassword];
	
	if(!entry[ZaModel.currentTab])
		this._containedObject[ZaModel.currentTab] = "1";
	else
		this._containedObject[ZaModel.currentTab] = entry[ZaModel.currentTab];

	this._containedObject[ZaDomain.A_NotebookTemplateFolder]=entry[ZaDomain.A_NotebookTemplateFolder];
	this._containedObject[ZaDomain.A_NotebookTemplateDir]=entry[ZaDomain.A_NotebookTemplateDir];	


	this._containedObject[ZaDomain.A_allNotebookACLS] = [];
	if(entry[ZaDomain.A_allNotebookACLS])	{
		this._containedObject[ZaDomain.A_allNotebookACLS]._version=entry[ZaDomain.A_allNotebookACLS]._version ? entry[ZaDomain.A_allNotebookACLS]._version : 1;		
		var cnt = entry[ZaDomain.A_allNotebookACLS].length;
		for(var i = 0; i < cnt; i++) {
			var aclObj = entry[ZaDomain.A_allNotebookACLS][i];
			var _newAclObj = {};
			_newAclObj.gt=aclObj.gt;
			_newAclObj.name = aclObj.name;
			_newAclObj.zid = aclObj.zid;
			_newAclObj.acl = {r:0,w:0,i:0,d:0,a:0,x:0};
			for (var a in aclObj.acl) {
				_newAclObj.acl[a] = aclObj.acl[a];
			}					
			this._containedObject[ZaDomain.A_allNotebookACLS][i] = _newAclObj;
		}	
	}

    if(ZaTabView.isTAB_ENABLED(entry,ZaDomainXFormView.ZIMLETS_TAB_ATTRS, ZaDomainXFormView.ZIMLETS_TAB_RIGHTS)) {

		//get all Zimlets
		var allZimlets = ZaZimlet.getAll(ZaZimlet.EXCLUDE_EXTENSIONS);
		if(allZimlets == null) {
			allZimlets = [];
		}

		if(allZimlets instanceof ZaItemList || allZimlets instanceof AjxVector)
			allZimlets = allZimlets.getArray();

		//convert objects to strings
		var cnt = allZimlets.length;
		var _tmpZimlets = [];
		for(var i=0; i<cnt; i++) {
			var zimlet = allZimlets[i];
			_tmpZimlets.push(zimlet.name);
		}
		ZaDomainXFormView.zimletChoices.setChoices(_tmpZimlets);
		ZaDomainXFormView.zimletChoices.dirtyChoices();
	}

    //set the catchAllChoices
    var isCatchAllEnabled = this._containedObject.attrs[ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled] ?
    			this._containedObject.attrs[ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled] : this._containedObject._defaultValues.attrs[ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled] ;
    			
    if (isCatchAllEnabled && isCatchAllEnabled == "TRUE") {
        this._containedObject[ZaAccount.A_zimbraMailCatchAllAddress] = entry [ZaAccount.A_zimbraMailCatchAllAddress] ;
        this.catchAllChoices.setChoices ([entry[ZaAccount.A_zimbraMailCatchAllAddress]]) ;
        this.catchAllChoices.dirtyChoices();
    }
    
 	//if(ZaSettings.COSES_ENABLED) {	
	if(this._containedObject.attrs[ZaDomain.A_domainDefaultCOSId] && this._containedObject.getAttrs[ZaDomain.A_domainDefaultCOSId]) {	
		var cos = ZaCos.getCosById(this._containedObject.attrs[ZaDomain.A_domainDefaultCOSId]);
		this.cosChoices.setChoices([cos]);
		this.cosChoices.dirtyChoices();
	}
	//}

	this._containedObject[ZaDomain.A2_gal_sync_accounts] = [];
	if(entry[ZaDomain.A2_gal_sync_accounts] && entry[ZaDomain.A2_gal_sync_accounts][0]) {
		this._containedObject[ZaDomain.A2_gal_sync_accounts][0] = new ZaAccount();
		this._containedObject[ZaDomain.A2_gal_sync_accounts][0].name = entry[ZaDomain.A2_gal_sync_accounts][0].name;
		this._containedObject[ZaDomain.A2_gal_sync_accounts][0].id = entry[ZaDomain.A2_gal_sync_accounts][0].id;
		this._containedObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_datasources] = entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_datasources]; 
		this._containedObject[ZaDomain.A2_gal_sync_accounts][0].attrs[ZaDomain.A_mailHost] = entry[ZaDomain.A2_gal_sync_accounts][0].attrs[ZaDomain.A_mailHost]; 

		//this._containedObject[ZaDomain.A2_gal_sync_accounts][0].attrs = ZaItem.deepCloneListItem (entry[ZaDomain.A2_gal_sync_accounts][0].attrs);
		if(entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds]) {
			this._containedObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds] = new ZaDataSource();
			this._containedObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].attrs = [];
			this._containedObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].name = entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].name;
			this._containedObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].id = entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].id;
			for (var a in entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].attrs) {
		        var modelItem = this._localXForm.getModel().getItem(a) ;
		        if (entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].attrs[a] != null && entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].attrs[a] instanceof Array) {  
		        	//need deep clone
		            this._containedObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].attrs[a] = ZaItem.deepCloneListItem (entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].attrs[a]);
		        } else {
		            this._containedObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].attrs[a] = entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].attrs[a];
		        }
		    }
		}
		if(entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds]) {
			this._containedObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds] = new ZaDataSource();
			this._containedObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].name = entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].name;
			this._containedObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].id = entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].id; 
			this._containedObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].attrs = [];
			for (var a in entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].attrs) {
		        var modelItem = this._localXForm.getModel().getItem(a) ;
		        if (entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].attrs[a] != null && entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].attrs[a] instanceof Array) {  
		        	//need deep clone
		            this._containedObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].attrs [a] = ZaItem.deepCloneListItem (entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].attrs[a]);
		        } else {
		            this._containedObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].attrs[a] = entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_ldap_ds].attrs[a];
		        }
		    }		    
			//this._containedObject[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].attrs = ZaItem.deepCloneListItem (entry[ZaDomain.A2_gal_sync_accounts][0][ZaAccount.A2_zimbra_ds].attrs); 
		}
	}

    if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvMode]) {
        if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvMode] instanceof Array) {
            for(var mode = 0; mode < this._containedObject.attrs[ZaDomain.A_zimbraAutoProvMode].length; mode ++){
                if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvMode][mode] == "EAGER")
                   this._containedObject[ZaDomain.A2_zimbraAutoProvModeEAGEREnabled] = "TRUE";
                else if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvMode][mode] == "LAZY")
                   this._containedObject[ZaDomain.A2_zimbraAutoProvModeLAZYEnabled] = "TRUE";
                else if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvMode][mode] == "MANUAL")
                   this._containedObject[ZaDomain.A2_zimbraAutoProvModeMANUALEnabled] = "TRUE";
            }
        } else {
            if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvMode] == "EAGER")
               this._containedObject[ZaDomain.A2_zimbraAutoProvModeEAGEREnabled] = "TRUE";
            else if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvMode] == "LAZY")
               this._containedObject[ZaDomain.A2_zimbraAutoProvModeLAZYEnabled] = "TRUE";
            else if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvMode] == "MANUAL")
               this._containedObject[ZaDomain.A2_zimbraAutoProvModeMANUALEnabled] = "TRUE";
        }
    }

    if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvAuthMech]) {
        if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvAuthMech] instanceof Array) {
            for(var mode = 0; mode < this._containedObject.attrs[ZaDomain.A_zimbraAutoProvAuthMech].length; mode ++){
                if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvAuthMech][mode] == "LDAP")
                   this._containedObject[ZaDomain.A2_zimbraAutoProvAuthMechLDAPEnabled] = "TRUE";
                else if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvAuthMech][mode] == "PREAUTH")
                   this._containedObject[ZaDomain.A2_zimbraAutoProvAuthMechPREAUTHEnabled] = "TRUE";
                else if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvAuthMech][mode] == "KRB5")
                   this._containedObject[ZaDomain.A2_zimbraAutoProvAuthMechKRB5Enabled] = "TRUE";
                else if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvAuthMech][mode] == "SPNEGO")
                   this._containedObject[ZaDomain.A2_zimbraAutoProvAuthMechSPNEGOEnabled] = "TRUE";
            }
        } else {
                if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvAuthMech] == "LDAP")
                   this._containedObject[ZaDomain.A2_zimbraAutoProvAuthMechLDAPEnabled] = "TRUE";
                else if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvAuthMech] == "PREAUTH")
                   this._containedObject[ZaDomain.A2_zimbraAutoProvAuthMechPREAUTHEnabled] = "TRUE";
                else if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvAuthMech] == "KRB5")
                   this._containedObject[ZaDomain.A2_zimbraAutoProvAuthMechKRB5Enabled] = "TRUE";
                else if(this._containedObject.attrs[ZaDomain.A_zimbraAutoProvAuthMech] == "SPNEGO")
                   this._containedObject[ZaDomain.A2_zimbraAutoProvAuthMechSPNEGOEnabled] = "TRUE";
        }
    }
    this._containedObject[ZaDomain.A2_zimbraAutoProvServerList] = ZaApp.getInstance().getServerList(true).getArray();
    this._containedObject[ZaDomain.A2_zimbraAutoProvSelectedServerList] = new AjxVector ();
    for(var i = 0; i < this._containedObject[ZaDomain.A2_zimbraAutoProvServerList].length; i++) {
        var server = this._containedObject[ZaDomain.A2_zimbraAutoProvServerList][i];
        var scheduledDomains = server.attrs[ZaServer.A_zimbraAutoProvScheduledDomains];
        for(var j = 0; scheduledDomains && j < scheduledDomains.length; j++) {
            if(scheduledDomains[j] == this._containedObject.name) {
               this._containedObject[ZaDomain.A2_zimbraAutoProvSelectedServerList].add(server.name);
                server["checked"] = true;
            }
        }
    }
    // this will be updated when user click on the account quota tab
    var accountQuota = new Array();
    accountQuota._version = 1;
    this._containedObject[ZaDomain.A2_domain_account_quota] = accountQuota;
	// execute other init methods
	if(ZaTabView.XFormSetObjectMethods["ZaDomainXFormView"]) {
		var methods = ZaTabView.XFormSetObjectMethods["ZaDomainXFormView"];
		var cnt = methods.length;
		var containedObj = this._containedObject;
		for(var i = 0; i < cnt; i++) {
			if(typeof(methods[i]) == "function")
				containedObj = methods[i].call(this, containedObj, entry);
		}
		this._containedObject = containedObj;
	}

    this._localXForm.setInstance(this._containedObject);

}

ZaDomainXFormView.isCatchAllEnabled = function () {
    /*var form = this;
    var instance = form.getInstance () ;
    var isCatchAllEnabled = instance.attrs[ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled]
               || instance._defaultValues.attrs[ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled] ;

    return (isCatchAllEnabled == "TRUE" ? true : false) ;*/
    return (this.getInstanceValue(ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled) == "TRUE");
}

ZaDomainXFormView.aclSelectionListener = 
function (ev) {
	var instance = this.getInstance();

	var arr = this.widget.getSelection();	
	if(arr && arr.length)
		this.getModel().setInstanceValue(this.getInstance(),ZaDomain.A2_acl_selection_cache,arr);
		//instance[ZaDomain.A2_acl_selection_cache].acl_selection_cache = arr;
	else 
		this.getModel().setInstanceValue(this.getInstance(),ZaDomain.A2_acl_selection_cache,null);
		//instance.acl_selection_cache = null;
		
	//this.getForm().refresh();
	if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		ZaDomainXFormView.editButtonListener.call(this);
	}	
}

ZaDomainXFormView.isDeleteAclEnabled = function () {
	var retVal = true;
	if (!AjxUtil.isEmpty(this.getInstanceValue(ZaDomain.A2_acl_selection_cache))) {
		var arr = this.getInstanceValue(ZaDomain.A2_acl_selection_cache);
		var cnt = arr.length;
		for(var i=0; i<cnt;i++) {
			if(arr[i].gt==ZaDomain.A_NotebookPublicACLs || 
				arr[i].gt==ZaDomain.A_NotebookAllACLs || 
				arr[i].gt ==ZaDomain.A_NotebookGuestACLs) {		
				retVal = false;
				break;
			}
		}
	} else {
		retVal = false;
	}
	
	return retVal;
}

ZaDomainXFormView.isEditAclEnabled = function () {
	return (!AjxUtil.isEmpty(this.getInstanceValue(ZaDomain.A2_acl_selection_cache)) && this.getInstanceValue(ZaDomain.A2_acl_selection_cache).length==1);
}

ZaDomainXFormView.hasACEName = function () {
	return (this.getInstanceValue(ZaDomain.A_domainName) != this.getInstanceValue("name"));
}

ZaDomainXFormView.resetAllColorThemes = function () {
    var form = this.getForm() ;
//    var instance = form.getInstance () ;
    this.setInstanceValue (null, ZaDomain.A_zimbraSkinForegroundColor) ;
    this.setInstanceValue (null, ZaDomain.A_zimbraSkinBackgroundColor) ;
    this.setInstanceValue (null, ZaDomain.A_zimbraSkinSecondaryColor) ;
    this.setInstanceValue (null, ZaDomain.A_zimbraSkinSelectionColor) ;

    form.parent.setDirty(true);
    form.refresh () ;        
}

ZaDomainXFormView.isDomainModeNotInternal = function () {
	return (this.getInstanceValue(ZaDomain.A_zimbraGalMode) !=ZaDomain.GAL_Mode_internal);
}

ZaDomainXFormView.addButtonListener =
function () {
	var formPage = this.getForm().parent;
	if(!formPage.addAclDlg) {
		formPage.addAclDlg = new ZaAddDomainAclXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "550px", "150px");
		formPage.addAclDlg.registerCallback(DwtDialog.OK_BUTTON, ZaDomainXFormView.addAcl, this.getForm(), null);						
	}
	var obj = {};
	obj.gt = ZaDomain.A_NotebookUserACLs;
	obj.name = "";
	obj.acl = {r:0,w:0,i:0,d:0,a:0,x:0};	
	formPage.addAclDlg.setObject(obj);
	formPage.addAclDlg.popup();
}

ZaDomainXFormView.modifyAclCallback = 
function (params,resp) {
	try {
		if(params.busyId)
			ZaApp.getInstance().getAppCtxt().getShell().setBusy(false, params.busyId);	
		
		if(!resp && !ZaApp.getInstance().getCurrentController()._currentRequest.cancelled) {
			throw(new AjxException(ZaMsg.ERROR_EMPTY_RESPONSE_ARG, AjxException.UNKNOWN, "ZaDomainController.prototype.modifyAclCallback"));
		} else if(resp.isException && resp.isException()) {
			throw(resp.getException());
		} else if(resp.getResponse().Body && resp.getResponse().Body.BatchResponse && resp.getResponse().Body.BatchResponse.Fault) {
			var fault = resp.getResponse().Body.BatchResponse.Fault;
			if(fault instanceof Array)
				fault = fault[0];
					
			if (fault) {
				// JS response with fault
				var ex = ZmCsfeCommand.faultToEx(fault);
				throw(ex);
			}
		}
			
		var domain = new ZaDomain();
		var instance = this.getInstance();
		domain.attrs[ZaDomain.A_zimbraNotebookAccount] = this.getModel().getInstanceValue(this.getInstance(),ZaDomain.A_zimbraNotebookAccount);
		domain.attrs[ZaDomain.A_zimbraDomainStatus] = this.getModel().getInstanceValue(this.getInstance(),ZaDomain.A_zimbraDomainStatus);
		domain.id = this.getInstance().id;
		domain.attrs[ZaItem.A_zimbraId] = this.getModel().getInstanceValue(this.getInstance(),ZaItem.A_zimbraId);
		domain.name = this.getInstance().name;
		ZaDomain.loadNotebookACLs.call(domain);
		var oldArray = this.getModel().getInstanceValue(this.getInstance(),ZaDomain.A_allNotebookACLS);
		if(oldArray) {
			domain[ZaDomain.A_allNotebookACLS]._version = oldArray._version + 1;
		} else
			domain[ZaDomain.A_allNotebookACLS]._version = 1;
		
		this.getModel().setInstanceValue(this.getInstance(),ZaDomain.A_allNotebookACLS,domain[ZaDomain.A_allNotebookACLS]);	
	} catch (ex) {
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDomainXFormView.modifyAclCallback");
	}
}

ZaDomainXFormView.addAcl = 
function () {
	if(this.parent.addAclDlg) {
		this.parent.addAclDlg.popdown();
		var obj = this.parent.addAclDlg.getObject();

		var accountName = this.getModel().getInstanceValue(this.getInstance(),ZaDomain.A_zimbraNotebookAccount);
		var soapDoc = AjxSoapDoc.create("BatchRequest", "urn:zimbra");
		soapDoc.setMethodAttribute("onerror", "stop");		
		ZaDomain.getGrantNotebookACLsRequest(obj,soapDoc);

		var params = new Object();
	
		if(accountName)
			params.accountName = accountName;
			
		var busyId = Dwt.getNextId();
		params.soapDoc = soapDoc;		
		params.asyncMode = true;	
		params.busyId = busyId;
		params.callback = new AjxCallback(this,ZaDomainXFormView.modifyAclCallback,[params]);	

		var reqMgrParams = {
			showBusy:true,
			busyId:busyId,
			controller : ZaApp.getInstance().getCurrentController(),
			busyMsg : ZaMsg.BUSY_MODIFY_FOLDER_PERMISSIONS
		}	
		ZaRequestMgr.invoke(params, reqMgrParams);		
	}	
}

ZaDomainXFormView.editButtonListener =
function () {
	var instance = this.getInstance();
	if(instance[ZaDomain.A2_acl_selection_cache] && instance[ZaDomain.A2_acl_selection_cache][0]) {	
		var formPage = this.getForm().parent;
		if(!formPage.editAclDlg) {
			formPage.editAclDlg = new ZaEditDomainAclXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "550px", "150px");
			formPage.editAclDlg.registerCallback(DwtDialog.OK_BUTTON, ZaDomainXFormView.updateAcl, this.getForm(), null);						
		}
		var obj = {};
		obj.gt = instance[ZaDomain.A2_acl_selection_cache][0].gt;
		obj.name = instance[ZaDomain.A2_acl_selection_cache][0].name;
		obj.acl = {r:0,w:0,i:0,d:0,a:0,x:0};
		for(var a in instance[ZaDomain.A2_acl_selection_cache][0].acl) {
			obj.acl[a] = instance[ZaDomain.A2_acl_selection_cache][0].acl[a];
		}
		formPage.editAclDlg.setObject(obj);
		formPage.editAclDlg.popup();		
	}
}


ZaDomainXFormView.updateAcl = 
function () {
	if(this.parent.editAclDlg) {
		this.parent.editAclDlg.popdown();
		var obj = this.parent.editAclDlg.getObject();
		var aclSelection = this.getModel().getInstanceValue(this.getInstance(),ZaDomain.A2_acl_selection_cache);
		var dirty = false;
		for(var a in obj.acl) {
			if(obj.acl[a] != aclSelection[0].acl[a]) {
				dirty = true;
				break;
			}
		}
		if(dirty) {
			var accountName = this.getModel().getInstanceValue(this.getInstance(),ZaDomain.A_zimbraNotebookAccount);
			var soapDoc = AjxSoapDoc.create("BatchRequest", "urn:zimbra");
			soapDoc.setMethodAttribute("onerror", "stop");		
			ZaDomain.getGrantNotebookACLsRequest(obj,soapDoc);
	
			var params = new Object();
		
			if(accountName)
				params.accountName = accountName;
				
			var busyId = Dwt.getNextId();
			params.soapDoc = soapDoc;		
			params.asyncMode = true;	
			params.busyId = busyId;
			params.callback = new AjxCallback(this,ZaDomainXFormView.modifyAclCallback,[params]);	
	
			var reqMgrParams = {
				showBusy:true,
				busyId:busyId,
				controller : ZaApp.getInstance().getCurrentController(),
				busyMsg : ZaMsg.BUSY_MODIFY_FOLDER_PERMISSIONS
			}	
			ZaRequestMgr.invoke(params, reqMgrParams);					
		}
		/*if(dirty) {
			aclSelection = [];
			aclSelection[0] = obj;
			var allNoteBookACLs = this.getModel().getInstanceValue(this.getInstance(),ZaDomain.A_allNotebookACLS);
			var newNoteBookACLs = [];
			newNoteBookACLs._version = allNoteBookACLs._version + 1;
			var cnt = allNoteBookACLs.length;
			for(var i=0; i<cnt; i ++) {
				if(obj.name && allNoteBookACLs[i].name && (allNoteBookACLs[i].name == obj.name)) {
					newNoteBookACLs.push(obj);
				} else if(!obj.name && !allNoteBookACLs[i].name && (allNoteBookACLs[i].gt == obj.gt)) {
					newNoteBookACLs.push(obj);					
				} else {
					newNoteBookACLs.push(allNoteBookACLs[i]);
				}
			}
			this.getModel().setInstanceValue(this.getInstance(),ZaDomain.A2_acl_selection_cache,aclSelection);
			//this.getModel().setInstanceValue(this.getInstance(),ZaDomain.A_allNotebookACLS,newNoteBookACLs);
			
			
			//this.parent.setDirty(true);	
		}		*/
	}
}

ZaDomainXFormView.deleteButtonListener = 
function () {
	var aclSelectionCache = this.getInstanceValue(ZaDomain.A2_acl_selection_cache);
	if(AjxUtil.isEmpty(aclSelectionCache))
		return;
	var cnt = aclSelectionCache.length;
	if(cnt > 0) {
		var accountName = this.getModel().getInstanceValue(this.getInstance(),ZaDomain.A_zimbraNotebookAccount);
		var soapDoc = AjxSoapDoc.create("BatchRequest", "urn:zimbra");
		soapDoc.setMethodAttribute("onerror", "stop");
		var accountName = this.getModel().getInstanceValue(this.getInstance(),ZaDomain.A_zimbraNotebookAccount);
		ZaDomain.getRevokeNotebookACLsRequest(aclSelectionCache,soapDoc);
		
		var params = new Object();
		if(accountName)
			params.accountName = accountName;

		var busyId = Dwt.getNextId();
		
		params.soapDoc = soapDoc;		
		params.asyncMode = true;	
		params.busyId = busyId;
		params.callback = new AjxCallback(this,ZaDomainXFormView.modifyAclCallback,[params]);	
		var reqMgrParams = {
			showBusy:true,
			busyId:busyId,
			controller : ZaApp.getInstance().getCurrentController(),
			busyMsg : ZaMsg.BUSY_MODIFY_FOLDER_PERMISSIONS
		}	
		ZaRequestMgr.invoke(params, reqMgrParams);					
	}
	
	
	
	/*var allNoteBookACLs = this.getInstanceValue(ZaDomain.A_allNotebookACLS);

	if(AjxUtil.isEmpty(allNoteBookACLs))
		return;

	var newNoteBookACLs = AjxUtil.arraySubtract(allNoteBookACLs,aclSelectionCache,ZaDomain.compareACLs);
	newNoteBookACLs._version = allNoteBookACLs._version+1;
	*/
	/*var cnt = allNoteBookACLs.length;

	for(var i=0; i<cnt;i++) {
		if(aclSelectionCache[i].name && (aclSelectionCache[i].gt==ZaDomain.A_NotebookGroupACLs ||
		 aclSelectionCache[i].gt==ZaDomain.A_NotebookUserACLs ||
		 aclSelectionCache[i].gt==ZaDomain.A_NotebookDomainACLs)) {
			var cnt2 = allNoteBookACLs.length-1;
			for(var j=0; j < cnt2; j++) {
				if(allNoteBookACLs[j].name == aclSelectionCache[i].name) {
					continue;
				} else {
					newNoteBookACLs.push(allNoteBookACLs[j]);
				}
			}
		} else if (aclSelectionCache[i].gt) {
			var cnt2 = allNoteBookACLs.length-1;
			for(var j=cnt2; j >= 0; j--) {
				if(allNoteBookACLs[j].gt == aclSelectionCache[i].gt) {
					
					allNotebookACLS[j].acl = {r:0,w:0,i:0,d:0,a:0,x:0};
					break;
				}
			}
			
		}
	}*/
	
	//this.getModel().setInstanceValue(this.getInstance(),ZaDomain.A_allNotebookACLS,newNoteBookACLs);
	//instance[ZaDomain.A_allNotebookACLS]._version++; 
	//this.getForm().refresh();
	//this.getForm().parent.setDirty(true);	
}

ZaDomainXFormView.onFormFieldChanged = 
function (value, event, form) {
	var instance = this.getInstance();
	if(instance.attrs[ZaDomain.A_zimbraDomainStatus] && (instance.attrs[ZaDomain.A_zimbraDomainStatus]==ZaDomain.DOMAIN_STATUS_SHUTDOWN)) {
		var oldVal = this.getInstanceValue();
		return oldVal;
	} else {
		this.setInstanceValue(value);
		return value;
	}
}

ZaDomainXFormView.preProcessCOS = 
function(value, form) {
	var val = value;
	if(ZaItem.ID_PATTERN.test(value))  {
		val = value;
	} else {
		var cos = ZaCos.getCosByName(value, form.parent._app);
		if(cos) {
			val = cos.id;
		} 
	}
	return val;
}

ZaDomainXFormView.manualAutoProvisionListener = function () {
	try {
        var formPage = this.getForm().parent;
        var instance = this.getInstance();
        if(!formPage.handleManualProvDlg) {
            formPage.handleManualProvDlg = new ZaManualProvConfigDialog(ZaApp.getInstance().getAppCtxt().getShell(), "700px", "350px",ZaMsg.DLG_TITILE_MANUAL_PROV);
            formPage.handleManualProvDlg.registerCallback(DwtDialog.OK_BUTTON, ZaManualProvConfigDialog.finishConfig, this.getForm(), null);
        }
        formPage.handleManualProvDlg.setObject(instance);
        formPage.handleManualProvDlg.popup();
	} catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDomainXFormView.manualAutoProvisionListener", null, false);
	}
}


ZaDomainXFormView.checkGALAccountAttribute = function(attributeRelativepath, isEmpty) {
    var parentItemPath = this.getParentItem().getRefPath();
    var attributePath = parentItemPath + "/" + attributeRelativepath;
    var value = this.getInstanceValue(attributePath);
    var empty = AjxUtil.isEmpty(value);
    return (empty == isEmpty);
}

ZaDomainXFormView.getUserQuota = function () {
    var params = {};
    params.domainName = this.getForm().getInstanceValue(ZaDomain.A_domainName);
    params.sortBy = ZaAccountQuota.A2_diskUsage;
    params.sortAscending = 0;
    var cb = new AjxCallback(this.getForm(), ZaDomainXFormView.updateUserQuota, params);
    ZaDomain.getAccountQuota(params.domainName , 0, 50, params.sortBy, params.sortAscending, cb);
}

ZaDomainXFormView.updateUserQuota = function(params, resp) {
    if (resp && !resp.isException()) {
        resp = resp.getResponse().Body.GetQuotaUsageResponse;

        var result = { hasMore: false, mbxes: new Array() };
        if ((resp.account && resp.account.length > 0) && (resp.searchTotal && resp.searchTotal > 0)){
            result.hasMore = resp.more ;

            var accounts = resp.account ;
            var accountArr = new Array ();

            for (var i=0; i<accounts.length; i ++){
                accountArr[i] = new ZaAccountQuota(accounts[i]);
            }

            result.mbxes = accountArr;
        }
        var _version = this.getInstanceValue(ZaDomain.A2_domain_account_quota)._version;
        _version = _version? ++_version: 1;
        result.mbxes._version = _version;
        this.setInstanceValue(result.mbxes, ZaDomain.A2_domain_account_quota);
        var accountQuotaPool = this.getItemById(this.getId() + "_accountQuota").getWidget();
        accountQuotaPool.setDomainName(params.domainName);
        accountQuotaPool.setSortBy(params.sortBy);
        accountQuotaPool.setSortAscending(params.sortAscending);
        accountQuotaPool.setScrollHasMore(result.hasMore);
    }
}

ZaDomainXFormView.GAL_TAB_ATTRS = [ZaDomain.A_zimbraGalMode,ZaDomain.A_zimbraGalMaxResults,ZaDomain.A_GalLdapFilter,
	ZaDomain.A_zimbraGalAutoCompleteLdapFilter,ZaDomain.A_GalLdapSearchBase,ZaDomain.A_GalLdapURL,ZaDomain.A_GalLdapBindDn];
ZaDomainXFormView.GAL_TAB_RIGHTS = [];

ZaDomainXFormView.AUTH_TAB_ATTRS = [ZaDomain.A_AuthMech,ZaDomain.A_AuthLdapUserDn,ZaDomain.A_AuthLdapURL,
	ZaDomain.A_zimbraAuthLdapStartTlsEnabled,ZaDomain.A_AuthLdapSearchFilter,ZaDomain.A_AuthLdapSearchBase,
	ZaDomain.A_AuthLdapSearchBindDn];
ZaDomainXFormView.AUTH_TAB_RIGHTS = [];

ZaDomainXFormView.VH_TAB_ATTRS = [ZaDomain.A_zimbraVirtualHostname];
ZaDomainXFormView.VH_TAB_RIGHTS = [];

ZaDomainXFormView.ADV_TAB_ATTRS = [ZaDomain.A_zimbraBasicAuthRealm, ZaDomain.A_zimbraMailAddressValidationRegex,
    ZaDomain.A_zimbraMailDomainQuota, ZaDomain.A_zimbraDomainAggregateQuota, ZaDomain.A_zimbraDomainAggregateQuotaWarnPercent,
    ZaDomain.A_zimbraDomainAggregateQuotaWarnEmailRecipient, ZaDomain.A_zimbraDomainAggregateQuotaPolicy
];

ZaDomainXFormView.ADV_TAB_RIGHTS = [];

ZaDomainXFormView.Feature_TAB_ATTRS = [ZaDomain.A_zimbraFeatureCalendarReminderDeviceEmailEnabled];
ZaDomainXFormView.Feature_TAB_RIGHTS = [];

ZaDomainXFormView.CERT_TAB_ATTRS = [ZaDomain.A_zimbraSSLCertificate];
ZaDomainXFormView.CERT_TAB_RIGHTS = [];

ZaDomainXFormView.PROV_TAB_ATTRS = [ZaDomain.A_zimbraAutoProvMode, ZaDomain.A_zimbraAutoProvAuthMech,
    ZaDomain.A_zimbraAutoProvLdapURL,
    ZaDomain.A_zimbraAutoProvLdapStartTlsEnabled,ZaDomain.A_zimbraAutoProvLdapAdminBindDn,
    ZaDomain.A_zimbraAutoProvLdapAdminBindPassword,ZaDomain.A_zimbraAutoProvLdapSearchBase,
    ZaDomain.A_zimbraAutoProvLdapSearchFilter,ZaDomain.A_zimbraAutoProvLdapBindDn,
    ZaDomain.A_zimbraAutoProvAccountNameMap,ZaDomain.A_zimbraAutoProvAttrMap,
    ZaDomain.A_zimbraAutoProvNotificationFromAddress,ZaDomain.A_zimbraAutoProvBatchSize,
    ZaDomain.A_zimbraAutoProvLastPolledTimestamp,ZaDomain.A_zimbraAutoProvNotificationSubject,
    ZaDomain.A_zimbraAutoProvNotificationBody];
ZaDomainXFormView.PROV_TAB_RIGHTS = [];

ZaDomainXFormView.INTEROP_TAB_ATTRS = [ZaDomain.A_zimbraFreebusyExchangeURL, ZaDomain.A_zimbraFreebusyExchangeAuthScheme,
	ZaDomain.A_zimbraFreebusyExchangeAuthUsername, ZaDomain.A_zimbraFreebusyExchangeAuthPassword,
	ZaDomain.A_zimbraFreebusyExchangeUserOrg, ZaDomain.A_zimbraFreebusyExchangeServerType];
ZaDomainXFormView.INTEROP_TAB_RIGHTS = [];

ZaDomainXFormView.ZIMLETS_TAB_ATTRS = [ZaDomain.A_zimbraZimletDomainAvailableZimlets];
ZaDomainXFormView.ZIMLETS_TAB_RIGHTS = [];

ZaDomainXFormView.SKIN_TAB_ATTRS = [ZaDomain.A_zimbraSkinForegroundColor, ZaDomain.A_zimbraSkinBackgroundColor,ZaDomain.A_zimbraSkinSecondaryColor,
	ZaDomain.A_zimbraSkinSelectionColor, ZaDomain.A_zimbraSkinLogoURL, ZaDomain.A_zimbraSkinLogoLoginBanner, ZaDomain.A_zimbraSkinLogoAppBanner ];

ZaDomainXFormView.SKIN_TAB_RIGHTS = [];

ZaDomainXFormView.ACCOUNT_QUOTA_TAB_ATTRS = [];
ZaDomainXFormView.ACCOUNT_QUOTA_TAB_RIGHTS= [ZaDomain.RIGHT_GET_DOMAIN_QUOTA];

ZaDomainXFormView.getCustomWidth = function() {
    try {
        var parentPage = this.getForm().parent.getHtmlElement();
        var totalWidth = parseInt(parentPage.style.width);
        if (isNaN(totalWidth)) {
            totalWidth =  parentPage.clientWidth? parentPage.clientWidth : parentPage.offsetWidth;
        }
        return totalWidth;
    } catch(ex) {

    }
    return "100%";
}

ZaDomainXFormView.getCustomHeight = function() {
    var parentPage = this.getForm().parent;
    try {
        var totalHeight =  parentPage.getSize().y;
        var formHeaders = this.getForm().getItemsById("xform_header");
        var headHeight = 0;
        if (formHeaders) {
            var formHeader = formHeaders[0];
            if (formHeader.getContainer()) {
                formHeader = formHeader.getContainer();
            } else {
                formHeader = formHeader.getHtmlElement();
            }
            headHeight =  Dwt.getSize(formHeader).y;
        }
        var containerHeight = 2;

        if (AjxEnv.isIE)
            containerHeight = 3;
        if (totalHeight > (headHeight+containerHeight)) {
            return totalHeight - headHeight -containerHeight;
        }

    } catch(ex) {

    }
    return "100%";
}

ZaDomainXFormView.myXFormModifier = function(xFormObject,entry) {	
	xFormObject.tableCssStyle="width:100%;overflow:auto;";
	
	var headerList = new Array();
	headerList[0] = new ZaListHeaderItem("gt", ZaMsg.Domain_Notebook_type_col, null, "150px", false, null, false, true);
	headerList[1] = new ZaListHeaderItem("name", ZaMsg.Domain_Notebook_name_col, null,"200px", false, null, false, true);
	headerList[2] = new ZaListHeaderItem("acl", ZaMsg.Domain_Notebook_perms_col, null, "auto", null, null, false, true);							



    xFormObject.items = [ ];
	
	xFormObject.items.push({type:_GROUP_, cssClass:"ZmSelectedHeaderBg", colSpan:"*", id:"xform_header", 
			items: [
				{type:_GROUP_,	numCols:4,colSizes:["32px","*","80px","*"],
					items: [
						{type:_AJX_IMAGE_, src:"Domain_32", label:null,rowSpan:3},
						{type:_OUTPUT_, ref:"name", label:null,cssClass:"AdminTitle",
                            height: 32, rowSpan:3},				
						{type:_OUTPUT_, ref:ZaItem.A_zimbraId, label:ZaMsg.NAD_ZimbraID,visibilityChecks:[ZaItem.hasReadPermission]},
						{type:_OUTPUT_, ref:ZaItem.A_zimbraCreateTimestamp, 
							label:ZaMsg.LBL_zimbraCreateTimestamp, labelLocation:_LEFT_,
							getDisplayValue:function() {
								var val = ZaItem.formatServerTime(this.getInstanceValue());
								if(!val)
									return ZaMsg.Server_Time_NA;
								else
									return val;
							},
							visibilityChecks:[ZaItem.hasReadPermission]	
						},
						{type:_OUTPUT_, choices:ZaDomain.domainStatusChoices, bmolsnr:true, ref:ZaDomain.A_zimbraDomainStatus, label:ZaMsg.LBL_zimbraDomainStatus,visibilityChecks:[ZaItem.hasReadPermission]}
					]
				}
			]
	});	
	var tabIx = ++this.TAB_INDEX;
	var tabBar = {type:_TAB_BAR_,  ref:ZaModel.currentTab,choices:[],cssClass:"ZaTabBar", id:"xform_tabbar", cssStyle: "display:none;"};
	tabBar.choices.push({value:tabIx, label:ZaMsg.TABT_GeneralPage});
	var switchGroup = {type:_SWITCH_, items:[]};

	this.helpMap = {};
    this.helpMap[tabIx] = ZaUtil.HELP_URL;
    var case1 = {type:_ZATABCASE_, caseKey:tabIx,numCols:1,paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2 
            };
    var case1Items = [
		{type:_ZA_TOP_GROUPER_, label:ZaMsg.TABT_GeneralPage, width:"100%", numCols:2,colSizes: ["275px","auto"],
			items:[
                { type: _DWT_ALERT_,
                    visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_zimbraDomainStatus,ZaDomain.DOMAIN_STATUS_SHUTDOWN]],
                    visibilityChangeEventSources:[ZaDomain.A_zimbraDomainStatus],
                    containerCssStyle: "padding-bottom:0;",
                    style: DwtAlert.WARNING,
                    iconVisible: true,
                    content: ZaMsg.Domain_Locked_Note,
                    colSpan:"*"
                },
                { ref: "name", type:_OUTPUT_,
                  label:ZaMsg.Domain_DomainName
                },
                {ref:ZaAccount.A_zimbraMailCatchAllAddress, id: ZaAccount.A_zimbraMailCatchAllAddress, type:_DYNSELECT_,
                    visibilityChecks:[ZaDomainXFormView.isCatchAllEnabled] ,
                    visibilityChangeEventSources:[ZaDomain.A_zimbraAdminConsoleCatchAllAddressEnabled],
                    dataFetcherClass:null,
                    choices:this.catchAllChoices,
                    emptyText:ZaMsg.enterSearchTerm,
                    dataFetcherInstance:true,
                    width:250,
                    /**
                     * @argument callArgs {value, event, callback}
                     */
                    dataFetcherMethod:function (callArgs) {
                        try {
                                var value = callArgs["value"];
                                var event = callArgs["event"];
                                var callback = callArgs["callback"];
                                var busyId = Dwt.getNextId();

                                var params = new Object();
                                dataCallback = new AjxCallback(this, ZaSearch.prototype.dynSelectDataCallback, {callback:callback, busyId:busyId});
                                params.types = [ZaSearch.ACCOUNTS, ZaSearch.DLS];
                                params.callback = dataCallback;
                                params.sortBy = ZaAccount.A_name;
                                params.domain = this.name;
                                params.query = ZaSearch.getSearchByNameQuery(value,params.types);
                                params.controller = ZaApp.getInstance().getCurrentController();
                                params.showBusy = true;
                                params.busyMsg = ZaMsg.BUSY_SEARCHING;
                                params.busyId = busyId;
                                params.skipCallbackIfCancelled = false;
                                ZaSearch.searchDirectory(params);
                            } catch (ex) {
                                this._app.getCurrentController()._handleException(ex, "ZaSearch.prototype.dynSelectDataFetcher");
                            }

                    },
                    label:ZaMsg.L_catchAll, labelLocation:_LEFT_,
                    onChange:ZaDomainXFormView.onFormFieldChanged,
                    getDisplayValue:function(newValue) {
                        if(newValue && newValue.name)
                            return newValue.name;
                        else {
                            if(!AjxUtil.isEmpty(newValue))
                                return newValue;
                            else
                                return "";
                        }
                    }
                },

                { ref: ZaDomain.A_domainName, type:_OUTPUT_,
                    label:ZaMsg.Domain_ACEName+":",visibilityChecks:[ZaDomainXFormView.hasACEName],
                    visibilityChangeEventSources:[ZaDomain.A_domainName]
                },
                {ref:ZaDomain.A_zimbraPrefTimeZoneId, type:_OSELECT1_, msgName:ZaMsg.MSG_zimbraPrefTimeZoneId,
                   label:ZaMsg.LBL_zimbraPrefTimeZoneId, labelLocation:_LEFT_,
                   onChange:ZaDomainXFormView.onFormFieldChanged
                },
                {ref: ZaDomain.A_zimbraPublicServiceHostname, type:_TEXTFIELD_,
                    label:ZaMsg.Domain_zimbraPublicServiceHostname, width:250,
                    onChange:ZaDomainXFormView.onFormFieldChanged
                },
                {ref: ZaDomain.A_zimbraPublicServiceProtocol, type:_OSELECT1_,
                    label:ZaMsg.Domain_zimbraPublicServiceProtocol, choices:ZaDomain.protocolChoices,
                    onChange:ZaDomainXFormView.onFormFieldChanged
                },
                {ref: ZaDomain.A_zimbraPublicServicePort, type:_TEXTFIELD_,
                    label:ZaMsg.Domain_zimbraPublicServicePort, width:100,
                    onChange:ZaDomainXFormView.onFormFieldChanged
                },
                { type: _DWT_ALERT_,
                    containerCssStyle: "padding-bottom:0;",
                    style: DwtAlert.INFO,
                    iconVisible: true,
                    content: ZaMsg.Domain_InboundSMTPNote,
                    visibilityChecks:[[ZaItem.hasReadPermission, ZaDomain.A_zimbraDNSCheckHostname]],
                    colSpan:"2"
                },
                {ref: ZaDomain.A_zimbraDNSCheckHostname, type:_SUPER_TEXTFIELD_, colSpan:2,
                    txtBoxLabel:ZaMsg.Domain_zimbraDNSCheckHostname, onChange:ZaDomainXFormView.onFormFieldChanged,
                    resetToSuperLabel:ZaMsg.NAD_ResetToGlobal
                },
                ZaItem.descriptionXFormItem,
                {ref:ZaDomain.A_domainDefaultCOSId, type:_DYNSELECT_,
                    label:ZaMsg.Domain_DefaultCOS, labelLocation:_LEFT_,
                    inputPreProcessor:ZaDomainXFormView.preProcessCOS,
                    searchByProcessedValue:false,
                    dataFetcherMethod:ZaSearch.prototype.dynSelectSearchCoses,
                    choices:this.cosChoices,
                    dataFetcherClass:ZaSearch,
                    emptyText:ZaMsg.enterSearchTerm,
                    editable:true,
					autoCompleteEnabled : true,
                    getDisplayValue:function(newValue) {
                        // dereference through the choices array, if provided
                        //newValue = this.getChoiceLabel(newValue);
                        if(ZaItem.ID_PATTERN.test(newValue)) {
                            var cos = ZaCos.getCosById(newValue, this.getForm().parent._app);
                            if(cos)
                                newValue = cos.name;
                        }
                        if (newValue == null) {
                            newValue = "";
                        } else {
                            newValue = "" + newValue;
                        }
                        return newValue;
                    }
                },
                {ref:ZaDomain.A_zimbraDomainStatus, type:_OSELECT1_, msgName:ZaMsg.Domain_zimbraDomainStatus,
                    label:ZaMsg.LBL_zimbraDomainStatus,
                    labelLocation:_LEFT_, choices:ZaDomain.domainStatusChoices, onChange:ZaDomainXFormView.onFormFieldChanged
                },
                { ref: ZaDomain.A_notes, type:_TEXTAREA_,
                    label:ZaMsg.NAD_Notes, labelCssStyle:"vertical-align:top;", width:250,
                    onChange:ZaDomainXFormView.onFormFieldChanged
                },
			    {ref: ZaDomain.A_zimbraHelpAdminURL, type:_TEXTFIELD_,
                    label:ZaMsg.Domain_zimbraHelpAdminURL, width:250,
                    onChange:ZaDomainXFormView.onFormFieldChanged
        		},
                { ref: ZaDomain.A_zimbraHelpDelegatedURL, type:_TEXTFIELD_,
                    label:ZaMsg.Domain_zimbraHelpDelegatedURL, width:250,
                    onChange:ZaDomainXFormView.onFormFieldChanged
                }
			]
		}
	];
    case1.items = case1Items;
	switchGroup.items.push(case1);
	
	if(ZaTabView.isTAB_ENABLED(entry,ZaDomainXFormView.GAL_TAB_ATTRS, ZaDomainXFormView.GAL_TAB_RIGHTS)) {	
		tabIx = ++this.TAB_INDEX;
		this.helpMap[tabIx] = ZaUtil.HELP_URL;
		tabBar.choices.push({value:tabIx, label:ZaMsg.Domain_Tab_GAL});
		var case2 = {type:_ZATABCASE_, caseKey:tabIx,numCols:1, paddingStyle:"padding-left:15px;",
            width:"98%", cellpadding:2};
		var case2Items = [
		{type:_ZA_TOP_GROUPER_, label:ZaMsg.Domain_GAL_Configuration, numCols:2,colSizes: ["275px","auto"],
			items:[
				{ type: _DWT_ALERT_,
					visibilityChangeEventSources:[ZaDomain.A_zimbraDomainStatus],
					visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_zimbraDomainStatus,ZaDomain.DOMAIN_STATUS_SHUTDOWN]],
					containerCssStyle: "padding-bottom:0;",
					style: DwtAlert.WARNING,
					iconVisible: true,
					content: ZaMsg.Domain_Locked_Note,
					colSpan:"*"
				},
				{ref:ZaDomain.A_zimbraGalMode, type:_OUTPUT_, label:ZaMsg.Domain_GalMode, choices:this.GALModes,visibilityChecks:[ZaItem.hasReadPermission] },
				{ref:ZaDomain.A_zimbraGalMaxResults, type:_TEXTFIELD_, label:ZaMsg.LBL_zimbraGalMaxResults, msgName:ZaMsg.MSG_zimbraGalMaxResults, autoSaveValue:true, labelLocation:_LEFT_,
                    cssClass:"admin_xform_number_input"}
				]
		},
		{type:_ZA_TOP_GROUPER_, label:ZaMsg.LBL_GALAccount, numCols:2,colSizes: ["275px","auto"],
			visibilityChecks:[[XForm.checkInstanceValueNotEmty,ZaDomain.A2_gal_sync_accounts],[ZaItem.hasReadPermission,ZaDomain.A_zimbraGalAccountId]],
			items:[
                {type:_REPEAT_, ref:ZaDomain.A2_gal_sync_accounts, colSpan: "*",  label:null,
                    showAddButton:false,
                    showRemoveButton: false,
                    visibilityChecks:[[XForm.checkInstanceValueNotEmty,ZaDomain.A2_gal_sync_accounts],[ZaItem.hasReadPermission,ZaDomain.A_zimbraGalAccountId]],
                    items:[
                        {type:_GROUP_, ref:".", numCols:1, width:"100%", items:[
                            {ref:"name", type:_OUTPUT_,label:ZaMsg.Domain_GalSyncAccount
                            },
                            {ref:("attrs." + ZaDomain.A_mailHost), type: _OUTPUT_, label:ZaMsg.NAD_MailServer,
                                required:true
                            },
                            {ref:(ZaAccount.A2_zimbra_ds + ".name"), label:ZaMsg.Domain_InternalGALDSName, type:_OUTPUT_,
                                visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                visibilityChecks:[
                                    ZaNewDomainXWizard.isDomainModeNotExternal,
                                    [ZaDomainXFormView.checkGALAccountAttribute, ZaAccount.A2_zimbra_ds, false]
                                ]
                            },
                            {ref:(ZaAccount.A2_zimbra_ds + ".attrs." + ZaDataSource.A_zimbraDataSourcePollingInterval),
                                type:_LIFETIME_, label:ZaMsg.LBL_zimbraDataSourcePollingInterval_internal, labelLocation:_LEFT_,
                                msgName:ZaMsg.MSG_zimbraDataSourcePollingInterval_internal,
                                visibilityChecks:[
                                    ZaNewDomainXWizard.isDomainModeNotExternal,
                                    [ZaDomainXFormView.checkGALAccountAttribute, ZaAccount.A2_zimbra_ds, false]
                                ]
                            },
                            {ref:(ZaAccount.A2_ldap_ds + ".name"), label:ZaMsg.Domain_ExternalGALDSName, type:_OUTPUT_,
                                visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                visibilityChecks:[
                                    ZaNewDomainXWizard.isDomainModeNotInternal,
                                    [ZaDomainXFormView.checkGALAccountAttribute, ZaAccount.A2_ldap_ds, false]
                                ]
                            },
                            {ref:(ZaAccount.A2_ldap_ds + ".attrs." + ZaDataSource.A_zimbraDataSourcePollingInterval),
                                type:_LIFETIME_, label:ZaMsg.LBL_zimbraDataSourcePollingInterval_external, labelLocation:_LEFT_,
                                msgName:ZaMsg.MSG_zimbraDataSourcePollingInterval_external,
                                visibilityChecks:[
                                    ZaNewDomainXWizard.isDomainModeNotInternal,
                                    [ZaDomainXFormView.checkGALAccountAttribute, ZaAccount.A2_ldap_ds, false]
                                ]
                            }
                        ]}
                    ]
                },
                {ref:ZaDomain.A_GALServerType, type:_OUTPUT_, label:ZaMsg.Domain_GALServerType,
                    visibilityChecks:[ZaDomainXFormView.isDomainModeNotInternal], visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                    choices:this.GALServerTypes, labelLocation:_LEFT_},
                {ref:ZaDomain.A_GalLdapFilter, type:_OUTPUT_, label:ZaMsg.Domain_GalLdapFilter, labelLocation:_LEFT_,
                    visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALServerType,ZaDomain.GAL_ServerType_ldap], [ZaDomainXFormView.isDomainModeNotInternal]],
                    visibilityChangeEventSources:[ZaDomain.A_GALServerType, ZaDomain.A_zimbraGalMode]
                },
                {ref:ZaDomain.A_zimbraGalAutoCompleteLdapFilter, type:_OUTPUT_, label:ZaMsg.Domain_zimbraGalAutoCompleteLdapFilter, labelLocation:_LEFT_,
                    visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALServerType,ZaDomain.GAL_ServerType_ldap], [ZaDomainXFormView.isDomainModeNotInternal]],
                    visibilityChangeEventSources:[ZaDomain.A_GALServerType, ZaDomain.A_zimbraGalMode]
                },
                {ref:ZaDomain.A_GalLdapSearchBase, type:_OUTPUT_, label:ZaMsg.Domain_GalLdapSearchBase,
                    visibilityChecks:[ZaDomainXFormView.isDomainModeNotInternal], visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                    labelLocation:_LEFT_},
                {ref:ZaDomain.A_GalLdapURL, type:_REPEAT_, label:ZaMsg.LBL_Domain_GalLdapURL, labelLocation:_LEFT_,showAddButton:false, showRemoveButton:false,
                    visibilityChecks:[ZaDomainXFormView.isDomainModeNotInternal], visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                    items:[
                        {type:_OUTPUT_, ref:".", label:null,labelLocation:_NONE_}
                    ]
                },
                {ref:ZaDomain.A_GalLdapBindDn, type:_OUTPUT_, label:ZaMsg.Domain_GalLdapBindDn, labelLocation:_LEFT_,
                    visibilityChecks:[ZaDomainXFormView.isDomainModeNotInternal], visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                    enableDisableChangeEventSources:[ZaDomain.A_UseBindPassword],
                    enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_UseBindPassword,"TRUE"]]

                }
			]
		}
	];
    case2.items = case2Items;
		switchGroup.items.push(case2);
	}
	if(ZaTabView.isTAB_ENABLED(entry,ZaDomainXFormView.AUTH_TAB_ATTRS, ZaDomainXFormView.AUTH_TAB_RIGHTS)) {
		tabIx = ++this.TAB_INDEX;
		this.helpMap[tabIx] = ZaUtil.HELP_URL;
		tabBar.choices.push({value:tabIx, label:ZaMsg.Domain_Tab_Authentication});
		var case3 = {type:_ZATABCASE_, caseKey:tabIx,paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
			items: [
				{ type: _DWT_ALERT_,
					visibilityChangeEventSources:[ZaDomain.A_zimbraDomainStatus],
					visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_zimbraDomainStatus,ZaDomain.DOMAIN_STATUS_SHUTDOWN]],
					containerCssStyle: "padding-bottom:0;",
					style: DwtAlert.WARNING,
					iconVisible: true, 
					content: ZaMsg.Domain_Locked_Note,
					colSpan:"*"
				},
                { type:_ZA_TOP_GROUPER_, label:ZaMsg.Domain_AuthSetting, colSizes:["275px","*"], colSpan:"*", items :[
                    {ref:ZaDomain.A_AuthMech, type:_OUTPUT_, label:ZaMsg.Domain_AuthMech, choices:this.AuthMechs},
                    {type:_GROUP_,useParentTable:true, colSpan:"*",
                        visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ad]],
                        visibilityChangeEventSources:[ZaDomain.A_AuthMech],
                        items:[
                            {ref:ZaDomain.A_AuthLdapUserDn, type:_OUTPUT_, label:ZaMsg.Domain_AuthLdapUserDn, labelLocation:_LEFT_},
                            {ref:ZaDomain.A_AuthLdapURL, type:_REPEAT_, label:ZaMsg.Domain_AuthLdapURL, labelLocation:_LEFT_,showAddButton:false, showRemoveButton:false,
                                items:[
                                    {type:_OUTPUT_, ref:".", label:null,labelLocation:_NONE_}
                                ]
                            }
                        ]
                    },
                    {type:_GROUP_,useParentTable:true, colSpan:"*",
                        visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ldap]],
                        visibilityChangeEventSources:[ZaDomain.A_AuthMech],
                        items:[
                            {ref:ZaDomain.A_AuthLdapUserDn, type:_OUTPUT_, label:ZaMsg.Domain_AuthLdapUserDn, labelLocation:_LEFT_},
                            {ref:ZaDomain.A_AuthLdapURL, type:_REPEAT_, label:ZaMsg.Domain_AuthLdapURL, labelLocation:_LEFT_,showAddButton:false, showRemoveButton:false,
                                items:[
                                    {type:_OUTPUT_, ref:".", label:null,labelLocation:_NONE_}
                                ]
                            },
                            {ref:ZaDomain.A_zimbraAuthLdapStartTlsEnabled, type:_OUTPUT_, label:ZaMsg.Domain_llAuthLdapStartTlsEnabled, labelLocation:_LEFT_,choices:ZaModel.BOOLEAN_CHOICES},
                            {ref:ZaDomain.A_AuthLdapSearchFilter, type:_OUTPUT_, label:ZaMsg.Domain_AuthLdapFilter, labelLocation:_LEFT_},
                            {ref:ZaDomain.A_AuthLdapSearchBase, type:_OUTPUT_, label:ZaMsg.Domain_AuthLdapSearchBase, labelLocation:_LEFT_},
                            {ref:ZaDomain.A_AuthUseBindPassword, type:_OUTPUT_, label:ZaMsg.Domain_AuthUseBindPassword, labelLocation:_LEFT_,choices:ZaModel.BOOLEAN_CHOICES},
                            {ref:ZaDomain.A_AuthLdapSearchBindDn, type:_INPUT_, label:ZaMsg.Domain_AuthLdapBindDn, labelLocation:_LEFT_,
                                visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthUseBindPassword,"TRUE"]],
                                visibilityChangeEventSources:[ZaDomain.A_AuthUseBindPassword]
                            }
                        ]
                    },
						{ref:ZaDomain.A_zimbraPasswordChangeListener, type:_TEXTFIELD_, 
							label:ZaMsg.Domain_zimbraPasswordChangeListener, labelLocation:_LEFT_, 
                                                        visibilityChecks:[function() {
                                                                var instance = this.getInstance();
                                                                return (instance.attrs[ZaDomain.A_AuthMech] !=  ZaDomain.AuthMech_zimbra);
                                                        }],
                                                        visibilityChangeEventSources:[ZaDomain.A_AuthMech]
						},
                                                {ref:ZaDomain.A_zimbraAuthFallbackToLocal, type:_CHECKBOX_,
                                                        label:ZaMsg.Domain_zimbraAuthFallbackToLocal, labelLocation:_RIGHT_,
                                                        trueValue:"TRUE", falseValue:"FALSE",
                                                        visibilityChecks:[function() {
                                                                var instance = this.getInstance();
                                                                return (instance.attrs[ZaDomain.A_AuthMech] !=  ZaDomain.AuthMech_zimbra);
                                                        }],
                                                        visibilityChangeEventSources:[ZaDomain.A_AuthMech]
                                                }

                ]},
                { type:_ZA_TOP_GROUPER_, label:ZaMsg.Domain_URLSetting, colSpan:"*",
                    numCols: 2, colSizes: ["275px","*"],
                    visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                        [ZaDomain.A_zimbraAdminConsoleLoginURL,
                         ZaDomain.A_zimbraAdminConsoleLogoutURL
                         ]]
                    ],
                    items :[
			        {ref: ZaDomain.A_zimbraAdminConsoleLoginURL, type:_TEXTFIELD_,
          		    label:ZaMsg.Domain_zimbraAdminConsoleLoginURL, width:250,
          		    onChange:ZaDomainXFormView.onFormFieldChanged
        		    },
                    { ref: ZaDomain.A_zimbraAdminConsoleLogoutURL, type:_TEXTFIELD_,
                    label:ZaMsg.Domain_zimbraAdminConsoleLogoutURL  , width:250,
                    onChange:ZaDomainXFormView.onFormFieldChanged
                    }
                ]},
                {
                    type: _ZA_TOP_GROUPER_,
                    label: ZaMsg.NAD_WEBCLIENT_Configure,
                    colSpan: "*",
                    visibilityChecks: [
                        [
                            ZATopGrouper_XFormItem.isGroupVisible,
                            [
                                ZaDomain.A_zimbraWebClientLoginURL,
                                ZaDomain.A_zimbraWebClientLogoutURL,
                                ZaDomain.A_zimbraWebClientLoginURLAllowedUA,
                                ZaDomain.A_zimbraWebClientLogoutURLAllowedUA,
                                ZaDomain.A_zimbraWebClientLoginURLAllowedIP,
                                ZaDomain.A_zimbraWebClientLogoutURLAllowedIP,
                                ZaDomain.A_zimbraForceClearCookies
                            ]
                        ]
                    ],
                      items:[
                          { ref: ZaDomain.A_zimbraWebClientLoginURL,useParentTable: false,
                            colSpan: 2,
                            type:_SUPER_TEXTFIELD_, textFieldWidth: "220px",
                            resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                            msgName: ZaMsg.LBL_zimbraWebClientLoginURL,
                            txtBoxLabel: ZaMsg.LBL_zimbraWebClientLoginURL,
                            onChange:ZaDomainXFormView.onFormFieldChanged
                          },
                          { ref: ZaDomain.A_zimbraWebClientLogoutURL,useParentTable: false,
                            colSpan: 2,
                            type:_SUPER_TEXTFIELD_, textFieldWidth: "220px",
                            resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                            msgName: ZaMsg.LBL_zimbraWebClientLogoutURL,
                            txtBoxLabel: ZaMsg.LBL_zimbraWebClientLogoutURL,
                            onChange:ZaDomainXFormView.onFormFieldChanged
                          },
                          { ref: ZaDomain.A_zimbraWebClientLoginURLAllowedUA,
                            label:ZaMsg.LBL_zimbraWebClientLoginURLAllowedUA,
                            type:_SUPER_REPEAT_,
                            resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                            repeatInstance:"",
                            colSizes:["275px", "*"],
                            addButtonLabel:ZaMsg.NAD_Add ,
                            removeButtonLabel: ZaMsg.NAD_Remove,
                            showAddButton:true,
                            showRemoveButton:true,
                            showAddOnNextRow:true,
                            repeatItems: [
                                {ref:".", type:_TEXTFIELD_,
                                width: "150px"}
                            ],
                            onChange:ZaDomainXFormView.onFormFieldChanged
                          },
                          { ref: ZaDomain.A_zimbraWebClientLogoutURLAllowedUA,
                            label:ZaMsg.LBL_zimbraWebClientLogoutURLAllowedUA,
                            type:_SUPER_REPEAT_,
                            resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                            repeatInstance:"",
                            colSizes:["275px", "*"],
                            addButtonLabel:ZaMsg.NAD_Add ,
                            removeButtonLabel: ZaMsg.NAD_Remove,
                            showAddButton:true,
                            showRemoveButton:true,
                            showAddOnNextRow:true,
                            repeatItems: [
                                {ref:".", type:_TEXTFIELD_,
                                width: "150px"}
                            ],
                            onChange:ZaDomainXFormView.onFormFieldChanged
                          },
                          { ref: ZaDomain.A_zimbraWebClientLoginURLAllowedIP,
                            label:ZaMsg.LBL_zimbraWebClientLoginURLAllowedIP,
                            type:_SUPER_REPEAT_,
                            resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                            repeatInstance:"",
                            colSizes:["275px", "*"],
                            addButtonLabel:ZaMsg.NAD_Add ,
                            removeButtonLabel: ZaMsg.NAD_Remove,
                            showAddButton:true,
                            showRemoveButton:true,
                            showAddOnNextRow:true,
                            repeatItems: [
                               {ref:".", type:_TEXTFIELD_,
                               width: "150px"}
                            ],
                            onChange:ZaDomainXFormView.onFormFieldChanged
                          },
                          { ref: ZaDomain.A_zimbraWebClientLogoutURLAllowedIP,
                            label:ZaMsg.LBL_zimbraWebClientLogoutURLAllowedIP,
                            type:_SUPER_REPEAT_,
                            resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                            repeatInstance:"",
                            colSizes:["275px", "*"],
                            addButtonLabel:ZaMsg.NAD_Add ,
                            removeButtonLabel: ZaMsg.NAD_Remove,
                            showAddButton:true,
                            showRemoveButton:true,
                            showAddOnNextRow:true,
                            repeatItems: [
                               {ref:".", type:_TEXTFIELD_,
                                width: "150px"}
                            ],
                            onChange:ZaDomainXFormView.onFormFieldChanged
                          },
                          {
                              ref: ZaDomain.A_zimbraForceClearCookies,
                              useParentTable: false,
                              colSpan: 2,
                              type: _CHECKBOX_,
                              trueValue: "TRUE",
                              falseValue: "FALSE",
                              resetToSuperLabel: ZaMsg.NAD_ResetToGlobal,
                              msgName: ZaMsg.MSG_zimbraForceClearCookies,
                              label: ZaMsg.LBL_zimbraForceClearCookies,
                              labelLocation: _LEFT_,
                              onChange: ZaDomainXFormView.onFormFieldChanged
                          }
                      ]
                }
			]
		};
		switchGroup.items.push(case3);	
	}
	if(ZaTabView.isTAB_ENABLED(entry,ZaDomainXFormView.VH_TAB_ATTRS, ZaDomainXFormView.VH_TAB_RIGHTS)) {
		tabIx = ++this.TAB_INDEX;
		this.helpMap[tabIx] = ZaUtil.HELP_URL;
		tabBar.choices.push({value:tabIx, label:ZaMsg.Domain_Tab_VirtualHost});
		var case4 = {type:_ZATABCASE_, caseKey:tabIx,
			cssStyle:"padding-left:10px;",
			items:[
				{ type: _DWT_ALERT_,
					visibilityChangeEventSources:[ZaDomain.A_zimbraDomainStatus],
					visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_zimbraDomainStatus,ZaDomain.DOMAIN_STATUS_SHUTDOWN]],
					containerCssStyle: "padding-bottom:0;",
					style: DwtAlert.WARNING,
					iconVisible: true, 
					content: ZaMsg.Domain_Locked_Note,
					colSpan:"*"
				},					
				{type:_DWT_ALERT_,content:null,ref:ZaDomain.A_domainName,
					getDisplayValue: function (itemVal) {
						return AjxMessageFormat.format(ZaMsg.Domain_VH_Explanation,itemVal);
					},
					colSpan:"*",
					iconVisible: false,
					align:_CENTER_,				
					style: DwtAlert.INFORMATION
				},
				{ref:ZaDomain.A_zimbraVirtualHostname, type:_REPEAT_,
                        label:null, repeatInstance:"", showAddButton:true,
                        showRemoveButton:true,
						addButtonLabel:ZaMsg.NAD_AddVirtualHost, 
						showAddOnNextRow:true,
						removeButtonLabel:ZaMsg.NAD_RemoveVirtualHost,
                      	items: [
							{ref:".", type:_TEXTFIELD_, label:null,
                                enableDisableChecks:[[ZaItem.hasWritePermission,ZaDomain.A_zimbraVirtualHostname]],
								visibilityChecks:[[ZaItem.hasReadPermission,ZaDomain.A_zimbraVirtualHostname]],
                                onChange:ZaDomainXFormView.onFormFieldChanged}
						]
				}
			]
		};
		switchGroup.items.push(case4);	
	}

	if(ZaDomainXFormView.Feature_TAB_ATTRS && ZaTabView.isTAB_ENABLED(entry,ZaDomainXFormView.Feature_TAB_ATTRS, ZaDomainXFormView.Feature_TAB_RIGHTS)) {
		tabIx = ++this.TAB_INDEX;
		this.helpMap[tabIx] = ZaUtil.HELP_URL;
		tabBar.choices.push({value:tabIx, label:ZaMsg.TABT_Features});
		var caseFeature = {type:_ZATABCASE_, caseKey:tabIx,
                        cssStyle:"padding-left:10px;",
			items : [
				{ type:_ZA_TOP_GROUPER_, label:ZaMsg.NAD_zimbraCalendarFeature,
				  items :[
                      {ref:ZaDomain.A_zimbraFeatureCalendarReminderDeviceEmailEnabled,
                          type:_CHECKBOX_,labelLocation:_RIGHT_,
                          msgName:ZaMsg.LBL_zimbraFeatureCalendarReminderDeviceEmailEnabled,
                          label:ZaMsg.LBL_zimbraFeatureCalendarReminderDeviceEmailEnabled,
                          trueValue:"TRUE", falseValue:"FALSE"
                      }
		         ]
				}
			]
		};
		switchGroup.items.push(caseFeature);
	}

	if(ZaDomainXFormView.ADV_TAB_ATTRS && ZaTabView.isTAB_ENABLED(entry,ZaDomainXFormView.ADV_TAB_ATTRS, ZaDomainXFormView.ADV_TAB_RIGHTS)) {
		tabIx = ++this.TAB_INDEX;
		this.helpMap[tabIx] = ZaUtil.HELP_URL;
		tabBar.choices.push({value:tabIx, label:ZaMsg.Domain_Tab_Advanced});
		var case5 = {type:_ZATABCASE_, caseKey:tabIx,colSizes:["auto"],numCols:1,id:"domain_advanced_tab",
                        cssStyle:"padding-left:10px;",
			items:[
                {type: _DWT_ALERT_,
                    visibilityChangeEventSources:[ZaDomain.A_zimbraDomainStatus],
                    visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_zimbraDomainStatus,ZaDomain.DOMAIN_STATUS_SHUTDOWN]],
                    containerCssStyle: "padding-bottom:0;",
                    style: DwtAlert.WARNING,
                    iconVisible: true,
                    content: ZaMsg.Domain_Locked_Note,
                    colSpan:"*"
                },

				{type:_ZA_TOP_GROUPER_, label:ZaMsg.Domain_BC_ShareConf,
                    visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible, ZaDomain.A_zimbraBasicAuthRealm]],
				    items:[
					    {ref: ZaDomain.A_zimbraBasicAuthRealm,
                            type: _SUPER_TEXTFIELD_, width: 250 ,
                            resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                            onChange: ZaDomainXFormView.onFormFieldChanged ,
                            txtBoxLabel: ZaMsg.Domain_zimbraBasicAuthRealm}
				    ]
				},

                {type:_ZA_TOP_GROUPER_, label:ZaMsg.Domain_AD_EmailValidate,
                    visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible, ZaDomain.A_zimbraMailAddressValidationRegex]],
                    items:[
                        {ref:ZaDomain.A_zimbraMailAddressValidationRegex, type:_REPEAT_,
                            nowrap:false,labelWrap:true,
                            label:ZaMsg.LBL_EmailValidate, repeatInstance:"", showAddButton:true,
                            showRemoveButton:true,
                            addButtonLabel:ZaMsg.NAD_AddRegex,
                            showAddOnNextRow:true,
                            removeButtonLabel:ZaMsg.NAD_RemoveRegex,
                            items: [
                                {ref:".", type:_TEXTFIELD_, label:null,
                                    enableDisableChecks:[], visibilityChecks:[],
                                    onChange:ZaDomainXFormView.onFormFieldChanged}
                            ]
                        }
                    ]
                },

                {type:_ZA_TOP_GROUPER_, label:ZaMsg.Domain_QUOTA_Configuration,
                    visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible, [
                            ZaDomain.A_zimbraMailDomainQuota,
                            ZaDomain.A_zimbraDomainAggregateQuota,
                            ZaDomain.A_zimbraDomainAggregateQuotaWarnPercent,
                            ZaDomain.A_zimbraDomainAggregateQuotaWarnEmailRecipient,
                            ZaDomain.A_zimbraDomainAggregateQuotaPolicy
                        ]]],
                    items:[
                        {ref:ZaDomain.A_zimbraMailDomainQuota, type:_TEXTFIELD_,
                            label:ZaMsg.LBL_DomainQuota,
                            onChange:ZaDomainXFormView.onFormFieldChanged
                        },
                        {ref:ZaDomain.A_zimbraDomainAggregateQuota, type:_TEXTFIELD_,
                            label:ZaMsg.LBL_DomainAggregateQuota,
                            onChange:ZaDomainXFormView.onFormFieldChanged
                        },
                        {ref:ZaDomain.A_zimbraDomainAggregateQuotaWarnPercent, type:_TEXTFIELD_,
                            label:ZaMsg.LBL_DomainAggregateQuotaWarnPercent,
                            onChange:ZaDomainXFormView.onFormFieldChanged
                        },
                        {ref:ZaDomain.A_zimbraDomainAggregateQuotaWarnEmailRecipient, type:_TEXTFIELD_,
                            label:ZaMsg.LBL_DomainAggregateQuotaWarnEmailRecipient,
                            onChange:ZaDomainXFormView.onFormFieldChanged
                        },
                        {ref:ZaDomain.A_zimbraDomainAggregateQuotaPolicy, type:_OSELECT1_,
                           label:ZaMsg.LBL_DomainAggregateQuotaPolicy, labelLocation:_LEFT_,
                           onChange:ZaDomainXFormView.onFormFieldChanged
                        }
                    ]
                }
			]
		};
		switchGroup.items.push(case5);
	}
	
	if(ZaTabView.isTAB_ENABLED(entry,ZaDomainXFormView.INTEROP_TAB_ATTRS, ZaDomainXFormView.INTEROP_TAB_RIGHTS)) {	
        tabIx = ++this.TAB_INDEX;
        this.helpMap[tabIx] = ZaUtil.HELP_URL;
        tabBar.choices.push({value:tabIx, label:ZaMsg.TABT_Interop});
        var case6 = {type: _ZATABCASE_, caseKey:tabIx,
			colSizes:["auto"],numCols:1,id:"global_interop_tab",
            paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
		 	items: [
				{type:_ZA_TOP_GROUPER_, label:ZaMsg.NAD_Exchange_Settings, colSizes:["275px","100%"],//colSizes:["auto"],numCols:1,
					items: [
						{ ref: ZaDomain.A_zimbraFreebusyExchangeURL,
                             type: _SUPER_TEXTFIELD_, width: "30em" ,
                             resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                             onChange: ZaDomainXFormView.onFormFieldChanged ,
                             txtBoxLabel: ZaMsg.NAD_Exchange_URL
						},
						{ ref: ZaDomain.A_zimbraFreebusyExchangeAuthScheme, label: ZaMsg.NAD_Exchange_Auth_Schema,
							type: _SUPER_SELECT1_,   resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
					    	onChange: ZaDomainXFormView.onFormFieldChanged
        	           	},
						{ ref: ZaDomain.A_zimbraFreebusyExchangeServerType, label: ZaMsg.NAD_Exchange_Server_Type,
                                                        type: _SUPER_SELECT1_,   resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                                                	onChange: ZaDomainXFormView.onFormFieldChanged
                                		},
						{ ref: ZaDomain.A_zimbraFreebusyExchangeAuthUsername,
                            resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
				  	  		type: _SUPER_TEXTFIELD_, width: "20em",
                         	txtBoxLabel: ZaMsg.NAD_Exchange_Auth_User,
					  		onChange: ZaDomainXFormView.onFormFieldChanged
				  		},
					  	{ ref: ZaDomain.A_zimbraFreebusyExchangeAuthPassword, type: _PASSWORD_,
					  	  label: ZaMsg.NAD_Exchange_Auth_Password, width: "20em",
						  onChange: ZaDomainXFormView.onFormFieldChanged
					  	},
                        { ref: ZaDomain.A_zimbraFreebusyExchangeUserOrg, type: _SUPER_TEXTFIELD_ ,
                          resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
					  	  txtBoxLabel: ZaMsg.LBL_zimbraFreebusyExchangeUserOrg, width: "30em",
						  onChange: ZaDomainXFormView.onFormFieldChanged
					  	},
                        {type: _GROUP_, colSpan:2, numCols:5, colSizes: ["20%", "22%", "6%", "22%", "20%" ], width:"100%",
                        	items :[
                            	{type:_CELLSPACER_ },
                              	{
                                  type: _DWT_BUTTON_ , label: ZaMsg.Check_Settings, autoPadding: false,
                                  onActivate: ZaItem.checkInteropSettings
                              	},
                              	{type:_CELLSPACER_},
                                {type: _DWT_BUTTON_ , label: ZaMsg.Clear_Settings, autoPadding: false,
                                    onActivate: ZaItem.clearInteropSettings
                              	},
                              	{type:_CELLSPACER_}    
                             ]
                        }
					]
				}
			]
		};
		switchGroup.items.push(case6);	
	}   
	
	if(ZaTabView.isTAB_ENABLED(entry,ZaDomainXFormView.ZIMLETS_TAB_ATTRS, ZaDomainXFormView.ZIMLETS_TAB_RIGHTS)) {
		tabIx = ++this.TAB_INDEX;
		this.helpMap[tabIx] = ZaUtil.HELP_URL;
		tabBar.choices.push({value:tabIx, label:ZaMsg.TABT_Zimlets});
       	var case7 = {type:_ZATABCASE_, id:"account_form_zimlets_tab", numCols:1,
        	caseKey:tabIx,
			
            items:[
            	{type:_ZAGROUP_, numCols:1,colSizes:["auto"],border:0,

					items: [
                    	{type: _OUTPUT_, value: ZaMsg.NAD_LimitZimletsToDomain },
                    	{type:_ZA_ZIMLET_SELECT_COMBO_,
                            selectRef:ZaDomain.A_zimbraZimletDomainAvailableZimlets,
							ref:ZaDomain.A_zimbraZimletDomainAvailableZimlets,
							choices:ZaDomainXFormView.zimletChoices
						},
						{type: _DWT_ALERT_,
							containerCssStyle: "padding-bottom:0;",
							style: DwtAlert.INFO,
							iconVisible: false,
							content: ZaMsg.Zimlet_Note
						}
					]
				}
			]			
		};
    	switchGroup.items.push(case7);
	}
    //domain skin properties
	if(ZaTabView.isTAB_ENABLED(entry,ZaDomainXFormView.SKIN_TAB_ATTRS, ZaDomainXFormView.SKIN_TAB_RIGHTS)) {
		tabIx = ++this.TAB_INDEX;
		this.helpMap[tabIx] = ZaUtil.HELP_URL;
		tabBar.choices.push({value:tabIx, label:ZaMsg.TABT_Themes});
       	var case8 = {type:_ZATABCASE_, id:"domain_form_skin_tab", colSizes:["auto"],numCols:1,
            paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
        	caseKey:tabIx,
			items:[
            	{type:_ZA_TOP_GROUPER_,  label:ZaMsg.NAD_Skin_Color_Settings, colSizes:["275px","*"],
					items: [
						{ type: _DWT_ALERT_,
							style: DwtAlert.INFO,
							iconVisible: true, 
							content: ZaMsg.Domain_Chameleon_Note,
							colSpan:2,
							visibilityChecks:[],ref:null
						},
                    	{ref:ZaDomain.A_zimbraSkinForegroundColor,
                            type: _SUPER_DWT_COLORPICKER_,
                            label:ZaMsg.NAD_zimbraSkinForegroundColor,
                            labelLocation:_LEFT_,
                            resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                            buttonImage: "Color", width: "50px"
                        }  ,
                        {ref:ZaDomain.A_zimbraSkinBackgroundColor,
                            type: _SUPER_DWT_COLORPICKER_,
                            label:ZaMsg.NAD_zimbraSkinBackgroundColor,
                            labelLocation:_LEFT_,  resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                            buttonImage: "Color", width: "50px"
                        }  ,
                        {ref:ZaDomain.A_zimbraSkinSecondaryColor, 
                            type: _SUPER_DWT_COLORPICKER_,
                            resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                            label:ZaMsg.NAD_zimbraSkinSecondaryColor,
                            labelLocation:_LEFT_,
                            buttonImage: "Color", width: "50px"
                        },
                        {ref:ZaDomain.A_zimbraSkinSelectionColor,
                            type: _SUPER_DWT_COLORPICKER_,
                            label:ZaMsg.NAD_zimbraSkinSelectionColor,
                            labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                            buttonImage: "Color", width: "50px"
                        },
                        {type:_GROUP_,  colSpan: 2, cssStyle: "margin-top: 10px; margin-left: 200px; width: 200px;", items: [
                                {type: _DWT_BUTTON_,  label: ZaMsg.bt_ResetAllSkinColor,
                                    onActivate: ZaDomainXFormView.resetAllColorThemes }
                           ]
                        }
                    ]
				}
            ]
		};
    	switchGroup.items.push(case8);
	}
 
    if(ZaTabView.isTAB_ENABLED(entry,ZaDomainXFormView.CERT_TAB_ATTRS, ZaDomainXFormView.CERT_TAB_RIGHTS)) {
        tabIx = ++this.TAB_INDEX;
        this.helpMap[tabIx] = ZaUtil.HELP_URL;
        tabBar.choices.push({value:tabIx, label:ZaMsg.TABT_Certificate});
        var case9a = {type:_ZATABCASE_, numCols:1, caseKey:tabIx, colSizes: ["100%"],
                      id:"domain_form_cert_tab",
			items: [

                {type: _DWT_ALERT_,
                  containerCssStyle: "padding-bottom:0;",
                  style: DwtAlert.WARNING,
                  iconVisible: true,
                  content: ZaMsg.MSG_DOMAIN_CERT_KEY
                },
				{type:_SPACER_, height:"10"},
				{type: _GROUP_, width: "100%", numCols: 2, colSizes: ["50%","50%"], items: [
					{type:_SPACER_, height:"10"},
					{type:_ZALEFT_GROUPER_, numCols:1, width: "100%",label:ZaMsg.NAD_DomainSSLCertificate, containerCssStyle: "padding-top:5px;", 
					items: [
                        {ref: ZaDomain.A_zimbraSSLCertificate, type:_TEXTAREA_, width: "100%", height: 450,
                        onChange:ZaDomainXFormView.onFormFieldChanged}
					]}
				
					,
					{type:_ZARIGHT_GROUPER_, numCols:1, width: "100%", label:ZaMsg.NAD_DomainSSLPrivateKey, containerCssStyle: "padding-top:5px;",
					items: [
                        {ref: ZaDomain.A_zimbraSSLPrivateKey, type:_TEXTAREA_, width: "100%", height: 450,
                        onChange:ZaDomainXFormView.onFormFieldChanged}

					]}
				]}

			]
		};
        switchGroup.items.push(case9a);
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaDomainXFormView.ACCOUNT_QUOTA_TAB_ATTRS, ZaDomainXFormView.ACCOUNT_QUOTA_TAB_RIGHTS)) {
        tabIx = ++this.TAB_INDEX;
        this.helpMap[tabIx] = ZaUtil.HELP_URL;
        tabBar.choices.push({value:tabIx, label:ZaMsg.TABT_MBX});
		var case10 = {type:_SUPER_TABCASE_, numCols:1, caseKey:tabIx, colSizes: ["100%"],paddingStyle:"padding: 0px", width: "100%",
            getCustomPaddingStyle:"return 0",
            loadDataMethods: [ZaDomainXFormView.getUserQuota],
			items: [
                {type:_DWT_LIST_, id:"accountQuota", ref: ZaDomain.A2_domain_account_quota, forceUpdate: true, cssStyle:"height:100%",
                    cssClass: "DLSource", widgetClass: ZaDomainAccountQuotaListView, hideHeader: false,
                    getCustomWidth:ZaDomainXFormView.getCustomWidth, getCustomHeight:ZaDomainXFormView.getCustomHeight
                }
			]
		};
        switchGroup.items.push(case10);
    }
    
    xFormObject.items.push(tabBar);
	xFormObject.items.push(switchGroup);
    this.tabChoices = tabBar.choices;
}

ZaTabView.XFormModifiers["ZaDomainXFormView"].push(ZaDomainXFormView.myXFormModifier);
ZaDomainXFormView.prototype.getTabChoices =
function() {
    return this.tabChoices;
}

ZaAccMiniListView = function(parent, className, posStyle, headerList) {
	if (arguments.length == 0) return;
	ZaListView.call(this, parent, className, posStyle, headerList);
	this.hideHeader = true;
}

ZaAccMiniListView.prototype = new ZaListView;
ZaAccMiniListView.prototype.constructor = ZaAccMiniListView;

ZaAccMiniListView.prototype.toString = function() {
	return "ZaAccMiniListView";
};

ZaAccMiniListView.prototype.createHeaderHtml = function (defaultColumnSort) {
	if(!this.hideHeader) {
		DwtListView.prototype.createHeaderHtml.call(this,defaultColumnSort);
	}
}

//-------------------------------------------------------------------------------------------------------
//List View for the zimbraDomainCOSMaxAccounts

ZaDomainCOSMaxAccountsListView = function(parent, className, posStyle, headerList) {
	if (arguments.length == 0) return;
	ZaListView.call(this, parent, className, posStyle, headerList);
	this.hideHeader = true;
    this._app = this.parent.parent._app ;
    
}

ZaDomainCOSMaxAccountsListView.prototype = new ZaListView;
ZaDomainCOSMaxAccountsListView.prototype.constructor = ZaDomainCOSMaxAccountsListView;

ZaDomainCOSMaxAccountsListView.prototype.toString = function() {
	return "ZaDomainCOSMaxAccountsListView";
};

ZaDomainCOSMaxAccountsListView.prototype.createHeaderHtml = function (defaultColumnSort) {
	if(!this.hideHeader) {
		DwtListView.prototype.createHeaderHtml.call(this,defaultColumnSort);
	}
}


ZaDomainCOSMaxAccountsListView.prototype._createItemHtml =
function(item) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(item, div, DwtListView.TYPE_LIST_ITEM);

    var itemArr = item.split(":");
    var cosId = itemArr [0];
    var cos = ZaCos.getCosById(cosId) ;
    var cosDisplayValue ;
    
    if (cos) {
        cosDisplayValue = cos.name ;

        /*if (ZaSettings.isDomainAdmin) {
            var cosDescription = cos.attrs[ZaCos.A_description] ;
            if (cosDescription)
                cosDisplayValue = cosDescription ;
        }*/
    } else {
        cosDisplayValue = AjxMessageFormat.format (ZaMsg.ERROR_INVALID_COS_VALUE, [cosId]) ;
    }

    var limits = itemArr [1] ;

    var idx = 0;
	html[idx++] = "<table width='100%' cellspacing='2' cellpadding='0'>";

	html[idx++] = "<tr>";
    //cos
    html[idx++] = "<td width=" + this._headerList[0]._width + ">";
    html[idx++] = AjxStringUtil.htmlEncode(cosDisplayValue);
    html[idx++] = "</td>";

    // limits
    html[idx++] = "<td align='left' width=" + this._headerList[1]._width + "><nobr>";
    html[idx++] = AjxStringUtil.htmlEncode(limits);
    html[idx++] = "</nobr></td>";

	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}


ZaDomainCOSMaxAccountsListView.prototype._setNoResultsHtml = function() {
	var buffer = new AjxBuffer();
	var	div = document.createElement("div");

	buffer.append("<table width='100%' cellspacing='0' cellpadding='1'>",
				  "<tr><td class='NoResults'><br />",
                  ZaMsg.NO_LIMITS, 
                  "</td></tr></table>");

	div.innerHTML = buffer.toString();
	this._addRow(div);
};

//-------------------------------------------------------------------------------------------------------
//List View for the zimbraDomainFeatureMaxAccounts

ZaDomainFeatureMaxAccountsListView = function(parent, className, posStyle, headerList) {
	if (arguments.length == 0) return;
	ZaListView.call(this, parent, className, posStyle, headerList);
	this.hideHeader = true;
    this._app = this.parent.parent._app ;

}

ZaDomainFeatureMaxAccountsListView.prototype = new ZaListView;
ZaDomainFeatureMaxAccountsListView.prototype.constructor = ZaDomainFeatureMaxAccountsListView;

ZaDomainFeatureMaxAccountsListView.prototype.toString = function() {
	return "ZaDomainFeatureMaxAccountsListView";
};

ZaDomainFeatureMaxAccountsListView.prototype.createHeaderHtml = function (defaultColumnSort) {
	if(!this.hideHeader) {
		DwtListView.prototype.createHeaderHtml.call(this,defaultColumnSort);
	}
}


ZaDomainFeatureMaxAccountsListView.prototype._createItemHtml =
function(item) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(item, div, DwtListView.TYPE_LIST_ITEM);

    var itemArr = item.split(":");
    var feature = ZaUtil.getListItemLabel(ZaCos.MAJOR_FEATURES_CHOICES, itemArr [0]) || itemArr [0];

    //get the feature display value
    /*
    var cos = ZaCos.getCosById(cosId, this._app) ;
    var cosDisplayValue ;

    if (cos) {
        cosDisplayValue = cos.name ;

        if (ZaSettings.isDomainAdmin) {
            var cosDescription = cos.attrs[ZaCos.A_description] ;
            if (cosDescription)
                cosDisplayValue = cosDescription ;
        }
    } else {
        cosDisplayValue = AjxMessageFormat.format (ZaMsg.ERROR_INVALID_COS_VALUE, [cosId]) ;
    } */

    var limits = itemArr [1] ;

    var idx = 0;
	html[idx++] = "<table width='100%' cellspacing='2' cellpadding='0'>";

	html[idx++] = "<tr>";
    //cos
    html[idx++] = "<td width=" + this._headerList[0]._width + ">";
    html[idx++] = AjxStringUtil.htmlEncode(feature);
    html[idx++] = "</td>";

    // limits
    html[idx++] = "<td align='left' width=" + this._headerList[1]._width + "><nobr>";
    html[idx++] = AjxStringUtil.htmlEncode(limits);
    html[idx++] = "</nobr></td>";

	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}


ZaDomainFeatureMaxAccountsListView.prototype._setNoResultsHtml = function() {
	var buffer = new AjxBuffer();
	var	div = document.createElement("div");

	buffer.append("<table width='100%' cellspacing='0' cellpadding='1'>",
				  "<tr><td class='NoResults'><br />",
                  ZaMsg.NO_LIMITS,
                  "</td></tr></table>");

	div.innerHTML = buffer.toString();
	this._addRow(div);
};

}
if (AjxPackage.define("zimbraAdmin.domains.view.ZaNewDomainXWizard")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaNewDomainXWizard
* @contructor
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaNewDomainXWizard = function(parent, entry) {
	ZaXWizardDialog.call(this, parent, null, ZaMsg.NDD_Title, "700px", "350px","ZaNewDomainXWizard", null, ZaId.DLG_NEW_DOMAIN);
	
	this.TAB_INDEX = 0;
	
	ZaNewDomainXWizard.GENERAL_STEP = ++this.TAB_INDEX;
	ZaNewDomainXWizard.GALMODE_STEP = ++this.TAB_INDEX;
	ZaNewDomainXWizard.GAL_CONFIG_STEP_2 = ++this.TAB_INDEX;
	ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_1 = ++this.TAB_INDEX;
	ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_2 = ++this.TAB_INDEX;
	ZaNewDomainXWizard.GAL_CONFIG_SUM_STEP = ++this.TAB_INDEX;
	ZaNewDomainXWizard.GAL_TEST_RESULT_STEP = ++this.TAB_INDEX;
	ZaNewDomainXWizard.SYNC_CONFIG_SUM_STEP = ++this.TAB_INDEX;
	ZaNewDomainXWizard.SYNC_TEST_RESULT_STEP = ++this.TAB_INDEX;
    ZaNewDomainXWizard.AUTH_URL_STEP = ++this.TAB_INDEX;
	ZaNewDomainXWizard.AUTH_MODE_STEP = ++this.TAB_INDEX;
	ZaNewDomainXWizard.AUTH_CONFIG_STEP_2 = ++this.TAB_INDEX;
	ZaNewDomainXWizard.AUTH_CONFIG_SUM_STEP = ++this.TAB_INDEX;
	ZaNewDomainXWizard.AUTH_TEST_RESULT_STEP = ++this.TAB_INDEX;
	ZaNewDomainXWizard.VHOST_STEP = ++this.TAB_INDEX;
	ZaNewDomainXWizard.ADVANCED_STEP = ++this.TAB_INDEX;
    ZaNewDomainXWizard.FEATURE_STEP = ++this.TAB_INDEX;
	ZaNewDomainXWizard.CONFIG_COMPLETE_STEP = ++this.TAB_INDEX;
	
	this.stepChoices = [
		{label:ZaMsg.TABT_GeneralPage, value:ZaNewDomainXWizard.GENERAL_STEP},
		{label:ZaMsg.GALConfiguration, value:ZaNewDomainXWizard.GALMODE_STEP},
		{label:ZaMsg.GALDnConfiguration, value:ZaNewDomainXWizard.GAL_CONFIG_STEP_2},
		{label:ZaMsg.GALSyncConfiguration, value:ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_1},
		{label:ZaMsg.GALSyncDnConfiguration, value:ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_2},
		{label:ZaMsg.GALConfigSummary, value:ZaNewDomainXWizard.GAL_CONFIG_SUM_STEP},
		{label:ZaMsg.GalTestResult, value:ZaNewDomainXWizard.GAL_TEST_RESULT_STEP},	
		{label:ZaMsg.SyncConfigSummary, value:ZaNewDomainXWizard.SYNC_CONFIG_SUM_STEP},
		{label:ZaMsg.SyncTestResult, value:ZaNewDomainXWizard.SYNC_TEST_RESULT_STEP},
        {label:ZaMsg.DomainSSO, value:ZaNewDomainXWizard.AUTH_URL_STEP},
		{label:ZaMsg.AuthMode, value:ZaNewDomainXWizard.AUTH_MODE_STEP},										
		{label:ZaMsg.AuthSettings, value:ZaNewDomainXWizard.AUTH_CONFIG_STEP_2},								
		{label:ZaMsg.AuthSettingsSummary, value:ZaNewDomainXWizard.AUTH_CONFIG_SUM_STEP},												
		{label:ZaMsg.AuthTestResult, value:ZaNewDomainXWizard.AUTH_TEST_RESULT_STEP},
		{label:ZaMsg.Domain_Tab_VirtualHost, value:ZaNewDomainXWizard.VHOST_STEP},
		{label:ZaMsg.Domain_Tab_Advanced, value:ZaNewDomainXWizard.ADVANCED_STEP},		
        {label:ZaMsg.TABT_Feature, value:ZaNewDomainXWizard.FEATURE_STEP},
		{label:ZaMsg.DomainConfigComplete, value:ZaNewDomainXWizard.CONFIG_COMPLETE_STEP}		
	];
		
	this.GALModes = [
		{label:ZaMsg.GALMode_internal, value:ZaDomain.GAL_Mode_internal},
		{label:ZaMsg.GALMode_external, value:ZaDomain.GAL_Mode_external}, 
		{label:ZaMsg.GALMode_both, value:ZaDomain.GAL_Mode_both}
  	];
  	this.GALServerTypes = [
		{label:ZaMsg.GALServerType_ldap, value:ZaDomain.GAL_ServerType_ldap},
		{label:ZaMsg.GALServerType_ad, value:ZaDomain.GAL_ServerType_ad} 
	];
	
	this.AuthMechs = [
		{label:ZaMsg.AuthMech_zimbra, value:ZaDomain.AuthMech_zimbra},
		{label:ZaMsg.AuthMech_ldap, value:ZaDomain.AuthMech_ldap},
		{label:ZaMsg.AuthMech_ad, value:ZaDomain.AuthMech_ad}		
	];

	this.TestResultChoices = [
		{label:ZaMsg.AuthTest_check_OK, value:ZaDomain.Check_OK},
		{label:ZaMsg.AuthTest_check_UNKNOWN_HOST, value:ZaDomain.Check_UNKNOWN_HOST},
		{label:ZaMsg.AuthTest_check_CONNECTION_REFUSED, value:ZaDomain.Check_CONNECTION_REFUSED},
		{label:ZaMsg.AuthTest_check_SSL_HANDSHAKE_FAILURE, value:ZaDomain.Check_SSL_HANDSHAKE_FAILURE},				
		{label:ZaMsg.AuthTest_check_COMMUNICATION_FAILURE, value:ZaDomain.Check_COMMUNICATION_FAILURE},
		{label:ZaMsg.AuthTest_check_AUTH_FAILED, value:ZaDomain.Check_AUTH_FAILED},
		{label:ZaMsg.AuthTest_check_AUTH_NOT_SUPPORTED, value:ZaDomain.Check_AUTH_NOT_SUPPORTED},
		{label:ZaMsg.AuthTest_check_NAME_NOT_FOUND, value:ZaDomain.Check_NAME_NOT_FOUND},
		{label:ZaMsg.AuthTest_check_INVALID_SEARCH_FILTER, value:ZaDomain.Check_INVALID_SEARCH_FILTER},
		{label:ZaMsg.AuthTest_check_FAILURE, value:ZaDomain.Check_FAILURE}												
	];
		
	this.initForm(ZaDomain.myXModel,this.getMyXForm(entry), null);		
	this._localXForm.addListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, new AjxListener(this, ZaNewDomainXWizard.prototype.handleXFormChange));
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, new AjxListener(this, ZaNewDomainXWizard.prototype.handleXFormChange));	
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_CHANGED, new AjxListener(this, ZaNewDomainXWizard.prototype.handleXFormChange));
	this.lastErrorStep=0;
	this._helpURL = ZaUtil.HELP_URL;
}

ZaNewDomainXWizard.prototype = new ZaXWizardDialog;
ZaNewDomainXWizard.prototype.constructor = ZaNewDomainXWizard;
ZaXDialog.XFormModifiers["ZaNewDomainXWizard"] = new Array();

ZaNewDomainXWizard.prototype.handleXFormChange = 
function () {
	if(this._localXForm.hasErrors()) {
		if(this.lastErrorStep < this._containedObject[ZaModel.currentStep])
			this.lastErrorStep=this._containedObject[ZaModel.currentStep];
	} else {
		this.lastErrorStep=0;
	}
	this.changeButtonStateForStep(this._containedObject[ZaModel.currentStep]);	
}

ZaNewDomainXWizard.prototype.changeButtonStateForStep = 
function(stepNum) {
	if(this.lastErrorStep == stepNum) {
		this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
		this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
		if(stepNum>ZaNewDomainXWizard.GENERAL_STEP)
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
	} else {
		if(stepNum == ZaNewDomainXWizard.GENERAL_STEP) {
            if (this._containedObject.attrs[ZaDomain.A_domainName])
			    this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
            else
			    this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(true);
		} else if (stepNum == ZaNewDomainXWizard.GALMODE_STEP) {
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
            if(this.checkGALAccount())
			    this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
            else
			    this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(true);
		} else if(stepNum == ZaNewDomainXWizard.GAL_CONFIG_SUM_STEP) {
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(true);
		} else if(stepNum == ZaNewDomainXWizard.AUTH_TEST_STEP) {
			this._button[DwtWizardDialog.NEXT_BUTTON].setText(AjxMsg._next);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
		} else if(stepNum == ZaNewDomainXWizard.CONFIG_COMPLETE_STEP) {
            this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
		} else {
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
		}
	}

    if( this._containedObject.attrs[ZaDomain.A_domainName] &&
        this._containedObject.attrs[ZaDomain.A_domainName].length > 0 &&
        this.lastErrorStep != stepNum &&
        this.checkGALAccount()) {
        this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(true);
    } else {
        this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
    }


}
/**
* @method setObject sets the object contained in the view
* @param entry - ZaDomain object to display
**/
ZaNewDomainXWizard.prototype.setObject =
function(entry) {
	this._containedObject = new Object();
	this._containedObject.attrs = new Object();

	for (var a in entry.attrs) {
		this._containedObject.attrs[a] = entry.attrs[a];
	}
	this._containedObject.attrs[ZaDomain.A_zimbraDomainStatus] = ZaDomain.DOMAIN_STATUS_ACTIVE;
	
	this._containedObject[ZaDomain.A2_isTestingGAL] = entry[ZaDomain.A2_isTestingGAL] || 0;
	this._containedObject[ZaDomain.A2_isTestingSync] = entry[ZaDomain.A2_isTestingSync] || 0;
	this._containedObject[ZaDomain.A2_isTestingAuth] = entry[ZaDomain.A2_isTestingAuth] || 0;

	this._containedObject[ZaDomain.A2_create_gal_acc] = entry[ZaDomain.A2_create_gal_acc] ||"TRUE";
    this._containedObject[ZaDomain.A2_gal_sync_accounts_set] = [];
    for(var i in entry[ZaDomain.A2_gal_sync_accounts_set]){
        if (entry[ZaDomain.A2_gal_sync_accounts_set][i]) {
            this._containedObject[ZaDomain.A2_gal_sync_accounts_set][i] = {};
	        this._containedObject[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_gal_sync_account_name]=entry[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_gal_sync_account_name];
	        this._containedObject[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_internal_gal_ds_name]=entry[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_internal_gal_ds_name];
	        this._containedObject[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_external_gal_ds_name]=entry[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_external_gal_ds_name];
	        this._containedObject[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_internal_gal_polling_interval] = entry[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_internal_gal_polling_interval] || "1d";
	        this._containedObject[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_external_gal_polling_interval] = entry[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_external_gal_polling_interval] || "1d";
        }
    }

	if(entry.rights)
		this._containedObject.rights = entry.rights;

	if(entry.setAttrs)
		this._containedObject.setAttrs = entry.setAttrs;
	
	if(entry.getAttrs)
		this._containedObject.getAttrs = entry.getAttrs;
		
	if(entry._defaultValues)
		this._containedObject._defaultValues = entry._defaultValues;

    if(entry._uuid)
        this._containedObject._uuid = entry._uuid;

	this._containedObject[ZaModel.currentStep] = entry[ZaModel.currentStep] || 1;
	this._localXForm.setInstance(this._containedObject);	
}

/**
* static change handlers for the form
**/
ZaNewDomainXWizard.onGALServerTypeChange =
function (value, event, form) {
	if(value == "ad") {
		form.getModel().setInstanceValue(form.getInstance(),ZaDomain.A_GalLdapFilter,"ad");
		form.getModel().setInstanceValue(form.getInstance(),ZaDomain.A_zimbraGalAutoCompleteLdapFilter,"adAutoComplete");		
	} else {
		form.getModel().setInstanceValue(form.getInstance(),ZaDomain.A_GalLdapFilter,"");
		form.getModel().setInstanceValue(form.getInstance(),ZaDomain.A_zimbraGalAutoCompleteLdapFilter,"(|(cn=%s*)(sn=%s*)(gn=%s*)(mail=%s*))");		
	}
	this.setInstanceValue(value);	
}



ZaNewDomainXWizard.onGalModeChange = 
function (value, event, form) {
	this.setInstanceValue(value);
	if(value != "zimbra") {
		form.getModel().setInstanceValue(form.getInstance(),ZaDomain.A_GalLdapFilter,"");
		if(AjxUtil.isEmpty(form.getModel().getInstanceValue(form.getInstance(),ZaDomain.A_GALServerType))) {
			form.getModel().setInstanceValue(form.getInstance(),ZaDomain.A_GALServerType,"ldap");
		}
		if(AjxUtil.isEmpty(form.getModel().getInstanceValue(form.getInstance(),ZaDomain.A_GalLdapSearchBase))) {
			if(!AjxUtil.isEmpty(form.getModel().getInstanceValue(form.getInstance(),ZaDomain.A_domainName))) {
				var parts = form.getModel().getInstanceValue(form.getInstance(),ZaDomain.A_domainName).split(".");
				var szSearchBase = "";
				var coma = "";
				for(var ix in parts) {
					szSearchBase += coma;
				 	szSearchBase += "dc=";
				 	szSearchBase += parts[ix];
					var coma = ",";
				}
				form.getModel().setInstanceValue(form.getInstance(),ZaDomain.A_GalLdapSearchBase,szSearchBase);
			}
		}
	}
}

ZaNewDomainXWizard.onGALSyncServerTypeChange =
function (value, event, form) {
	if(value == "ad") {
		form.getModel().setInstanceValue(form.getInstance(),ZaDomain.A_zimbraGalSyncLdapFilter,"ad");
	} 
	this.setInstanceValue(value);	
}

ZaNewDomainXWizard.onGALSyncChange =
function (value, event, form) {
	this.setInstanceValue(value);
	
	if(value=='FALSE') {
		if(form.getModel().getInstanceValue(form.getInstance(),ZaDomain.A_zimbraGalSyncLdapFilter) == "ad") {
			form.getModel().setInstanceValue(form.getInstance(),ZaDomain.A_GALSyncServerType,"ad");
		} else if(AjxUtil.isEmpty(form.getModel().getInstanceValue(form.getInstance(),ZaDomain.A_GALSyncServerType))) {
			form.getModel().setInstanceValue(form.getInstance(),ZaDomain.A_GALSyncServerType,"ldap");
		}
	} 
}

ZaNewDomainXWizard.testSyncSettings = 
function () {
	var instance = this.getInstance();
	this.getModel().setInstanceValue(instance,ZaDomain.A2_isTestingSync,1);
	var callback = new AjxCallback(this, ZaNewDomainXWizard.checkSyncConfigCallBack);
	ZaDomain.testSyncSettings(instance, callback);	
}

ZaNewDomainXWizard.checkSyncConfigCallBack = 
	function (arg) {
		if(!arg)
			return;
		
		var instance = this.getInstance();
		this.getModel().setInstanceValue(instance,ZaDomain.A2_isTestingSync,0);

		if(arg.isException()) {
			var msg = [arg.getException().detail,arg.getException().msg,arg.getException().trace].join("\n");
			this.getModel().setInstanceValue(instance,ZaDomain.A_GALSyncTestResultCode,arg.getException().code);
			this.getModel().setInstanceValue(instance,ZaDomain.A_GALSyncTestMessage,msg);
		} else {
			var searchResponse = arg.getResponse().Body.CheckGalConfigResponse;
			if(searchResponse) {
				this.getModel().setInstanceValue(instance,ZaDomain.A_GALSyncTestResultCode,searchResponse.code[0]._content);	
				if(searchResponse.code[0]._content != ZaDomain.Check_OK) {
					this.getModel().setInstanceValue(instance,ZaDomain.A_GALSyncTestMessage,searchResponse.message[0]._content);
				}				
			}
		}

		this.getForm().parent.goPage(ZaNewDomainXWizard.SYNC_TEST_RESULT_STEP);
}

ZaNewDomainXWizard.testGALSettings =
function () {
	var instance = this.getInstance();
	this.getModel().setInstanceValue(instance,ZaDomain.A2_isTestingGAL,1);
	var callback = new AjxCallback(this, ZaNewDomainXWizard.checkGALConfigCallBack);
	ZaDomain.testGALSettings(instance, callback, instance[ZaDomain.A_GALSampleQuery]);		
}
/**
* Callback function invoked by Asynchronous CSFE command when "check" call returns
**/
ZaNewDomainXWizard.checkGALConfigCallBack = 
function (arg) {
	if(!arg)
		return;
	
	var instance = this.getInstance();
	this.getModel().setInstanceValue(instance,ZaDomain.A2_isTestingGAL,0);

	if(arg.isException()) {
		var msg = [arg.getException().detail,arg.getException().msg,arg.getException().trace].join("\n");
		this.getModel().setInstanceValue(instance,ZaDomain.A_GALSearchTestResultCode,arg.getException().code);
		this.getModel().setInstanceValue(instance,ZaDomain.A_GALSearchTestMessage,msg);
		this.getModel().setInstanceValue(instance,ZaDomain.A_GALTestSearchResults,null);
	} else {
		var searchResponse = arg.getResponse().Body.CheckGalConfigResponse;
		if(searchResponse) {
			this.getModel().setInstanceValue(instance,ZaDomain.A_GALSearchTestResultCode,searchResponse.code[0]._content); 
			if(searchResponse.code[0]._content != ZaDomain.Check_OK) {
				this.getModel().setInstanceValue(instance,ZaDomain.A_GALSearchTestMessage,searchResponse.message[0]._content);
				this.getModel().setInstanceValue(instance,ZaDomain.A_GALTestSearchResults,null);
			} else {
				var searchResults = new Array();
				if(searchResponse.cn && searchResponse.cn.length) {
					var len = searchResponse.cn.length;
					for (var ix=0;ix<len;ix++) {
						var cnObject = new Object();
						if(searchResponse.cn[ix]._attrs) {
							for (var a in searchResponse.cn[ix]._attrs) {
								cnObject[a] = searchResponse.cn[ix]._attrs[a];
							}
							searchResults.push(cnObject);						
						}
					}
				}
				this.getModel().setInstanceValue(instance,ZaDomain.A_GALTestSearchResults,searchResults);
			}
		}
	}

	this.getForm().parent.goPage(ZaNewDomainXWizard.GAL_TEST_RESULT_STEP);
}


/**
* Eevent handlers for form items
**/
ZaNewDomainXWizard.onAuthMechChange = 
function (value, event, form) {
	this.setInstanceValue(value);
	if(value == ZaDomain.AuthMech_ad) {
		if(!form.getInstance().attrs[ZaDomain.A_AuthADDomainName]) {
			form.getInstance().attrs[ZaDomain.A_AuthADDomainName] = form.getInstance().attrs[ZaDomain.A_domainName];
		}
	}
}

ZaNewDomainXWizard.onCOSChanged = 
function(value, event, form) {
	if(ZaItem.ID_PATTERN.test(value))  {
		this.setInstanceValue(value);
	} else {
		var cos = ZaCos.getCosByName(value, form.parent._app);
		if(cos) {
			//value = form.getInstance()._defaultValues.id;
			value = cos.id;
		} 
	}
	this.setInstanceValue(value);
	return value;
}

ZaNewDomainXWizard.testAuthSettings =
function () {
	var instance = this.getInstance();
	if(instance.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_ad) {
		this.getModel().setInstanceValue(instance,ZaDomain.A_AuthLdapUserDn,"%u@"+instance.attrs[ZaDomain.A_AuthADDomainName])
	}
	var callback = new AjxCallback(this, ZaNewDomainXWizard.checkAuthCallBack);
	ZaDomain.testAuthSettings(instance, callback);	
}

/**
* Callback function invoked by Asynchronous CSFE command when "check" call returns
**/
ZaNewDomainXWizard.checkAuthCallBack = 
function (arg) {

	if(!arg)
		return;
	var instance = this.getInstance();
	if(arg.isException()) {
		this.getModel().setInstanceValue(instance,ZaDomain.A_AuthTestResultCode,arg.getException().code);
		this.getModel().setInstanceValue(instance,ZaDomain.A_AuthTestMessage,arg.getException().detail+"\n"+arg.getException().msg);
	} else {
		var response = arg.getResponse().Body.CheckAuthConfigResponse;
		this.getModel().setInstanceValue(instance,ZaDomain.A_AuthTestResultCode,response.code[0]._content);
		if(instance[ZaDomain.A_AuthTestResultCode] != ZaDomain.Check_OK) {
			this.getModel().setInstanceValue(instance,ZaDomain.A_AuthTestMessage,response.message[0]._content);		
			if(response.bindDn != null) {
				this.getModel().setInstanceValue(instance,ZaDomain.A_AuthComputedBindDn,response.bindDn[0]._content);		
			} else {
				this.getModel().setInstanceValue(instance,ZaDomain.A_AuthComputedBindDn,"");
			}
		}
	}	
	this.getForm().parent.goPage(ZaNewDomainXWizard.AUTH_TEST_RESULT_STEP);
}


/**
* Overwritten methods that control wizard's flow (open, go next,go previous, finish)
**/
ZaNewDomainXWizard.prototype.popup = 
function (loc) {
	ZaXWizardDialog.prototype.popup.call(this, loc);
	this._button[DwtWizardDialog.NEXT_BUTTON].setText(AjxMsg._next);
    if (this._containedObject.attrs[ZaDomain.A_domainName])
	    this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
    else
	    this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
	this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
	this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
}

ZaNewDomainXWizard.prototype.goPrev =
function () {
	if (this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.AUTH_MODE_STEP) {
		this.goPage(ZaNewDomainXWizard.AUTH_URL_STEP);
		this.changeButtonStateForStep(ZaNewDomainXWizard.AUTH_URL_STEP);
	} else if (this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.AUTH_URL_STEP
            && this._containedObject.attrs[ZaDomain.A_zimbraGalMode]==ZaDomain.GAL_Mode_internal) {
		this.goPage(ZaNewDomainXWizard.GALMODE_STEP);
		this.changeButtonStateForStep(ZaNewDomainXWizard.GALMODE_STEP);
    } else if (this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.GAL_CONFIG_SUM_STEP) {
		if(this._containedObject.attrs[ZaDomain.A_GALSyncUseGALSearch]=="TRUE") {
			this.goPage(ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_1);
			this.changeButtonStateForStep(ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_1);
		} else {
			this.goPage(ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_2);
			this.changeButtonStateForStep(ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_2);
		}
	} else if(this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.VHOST_STEP) {
		if(this._containedObject.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_zimbra) {
			this.goPage(ZaNewDomainXWizard.AUTH_MODE_STEP); //skip all auth configuration
		} else {
			this.goPage(ZaNewDomainXWizard.AUTH_CONFIG_SUM_STEP);
		}
	} else if(this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.CONFIG_COMPLETE_STEP) {
        this.goPage(ZaNewDomainXWizard.FEATURE_STEP);
        this.changeButtonStateForStep(ZaNewDomainXWizard.FEATURE_STEP);
	} else if (this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.AUTH_CONFIG_SUM_STEP) {
		if(this._containedObject.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_zimbra) {
			this.goPage(ZaNewDomainXWizard.AUTH_MODE_STEP); //skip all auth configuration
		} else if(this._containedObject.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_ad) {
			this.goPage(ZaNewDomainXWizard.AUTH_MODE_STEP);
		}  else if(this._containedObject.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_ldap) {
			this.goPage(ZaNewDomainXWizard.AUTH_CONFIG_STEP_2);
		}
	} else {
		this.changeButtonStateForStep(this._containedObject[ZaModel.currentStep]-1);
		this.goPage(this._containedObject[ZaModel.currentStep]-1);
	}
}

ZaNewDomainXWizard.prototype.goNext = 
function() {
	if(this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.GALMODE_STEP) {

		if(!this.checkGALAccount()) {
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_CREATE_GAL_ACCOUNT);
				return;
        }

		if(this._containedObject.attrs[ZaDomain.A_zimbraGalMode]!=ZaDomain.GAL_Mode_internal) {	
			//check that Filter is provided and at least one server
			if(!this._containedObject.attrs[ZaDomain.A_GalLdapFilter]) {
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_SEARCH_FILTER_REQUIRED);
				return;
			}
			if(!this._containedObject.attrs[ZaDomain.A_GalLdapURL] || this._containedObject.attrs[ZaDomain.A_GalLdapURL].length < 1) {
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_LDAP_URL_REQUIRED);
				return;
			}
		} 
		
	}
	if (this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.GENERAL_STEP) {
		this._containedObject.attrs[ZaDomain.A_AuthADDomainName] = this._containedObject.attrs[ZaDomain.A_domainName];
		this.changeButtonStateForStep(ZaNewDomainXWizard.GALMODE_STEP);
		this.goPage(ZaNewDomainXWizard.GALMODE_STEP);		
	} else if(this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.GALMODE_STEP && this._containedObject.attrs[ZaDomain.A_zimbraGalMode]==ZaDomain.GAL_Mode_internal) {
		this.changeButtonStateForStep(ZaNewDomainXWizard.AUTH_URL_STEP);
		this.goPage(ZaNewDomainXWizard.AUTH_URL_STEP);
	} else if(this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.GAL_CONFIG_STEP_2) {
		//clear the password if the checkbox is unchecked
		if(this._containedObject.attrs[ZaDomain.A_UseBindPassword]=="FALSE") {
			this._containedObject.attrs[ZaDomain.A_GalLdapBindPassword] = null;
			this._containedObject.attrs[ZaDomain.A_GalLdapBindPasswordConfirm] = null;
			this._containedObject.attrs[ZaDomain.A_GalLdapBindDn] = null;
		}
		//check that passwords match
		if(this._containedObject.attrs[ZaDomain.A_GalLdapBindPassword]!=this._containedObject.attrs[ZaDomain.A_GalLdapBindPasswordConfirm]) {
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_MISMATCH);
			return false;
		}
		this.goPage(ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_1);
		this.changeButtonStateForStep(ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_1);		
	} else if(this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_1) { 
		if(this._containedObject.attrs[ZaDomain.A_GALSyncUseGALSearch]=="FALSE") {
			this.goPage(ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_2);
			this.changeButtonStateForStep(ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_2);				
		} else {
			this.goPage(ZaNewDomainXWizard.GAL_CONFIG_SUM_STEP);
			this.changeButtonStateForStep(ZaNewDomainXWizard.GAL_CONFIG_SUM_STEP);	
		}
	} else if(this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.GAL_CONFIG_SUM_STEP) {
		this._localXForm.setInstanceValue(ZaDomain.Check_SKIPPED,ZaDomain.A_GALSearchTestResultCode);
		this.goPage(ZaNewDomainXWizard.GAL_TEST_RESULT_STEP);

	} else if(this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.SYNC_CONFIG_SUM_STEP) {
		this._localXForm.setInstanceValue(ZaDomain.Check_SKIPPED,ZaDomain.A_GALSyncTestResultCode);
		this.goPage(ZaNewDomainXWizard.SYNC_TEST_RESULT_STEP);
	} else if(this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_2) {
		//clear the password if the checkbox is unchecked
		if(this._containedObject.attrs[ZaDomain.A_SyncUseBindPassword]=="FALSE") {
			this._containedObject.attrs[ZaDomain.A_zimbraGalSyncLdapBindPassword] = null;
			this._containedObject.attrs[ZaDomain.A_GalSyncLdapBindPasswordConfirm] = null;
			this._containedObject.attrs[ZaDomain.A_zimbraGalSyncLdapBindDn] = null;
		}
		//check that passwords match
		if(this._containedObject.attrs[ZaDomain.A_zimbraGalSyncLdapBindPassword]!=this._containedObject.attrs[ZaDomain.A_GalSyncLdapBindPasswordConfirm]) {
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_MISMATCH);
			return false;
		}
		this.goPage(ZaNewDomainXWizard.GAL_CONFIG_SUM_STEP);
		//this.changeButtonStateForStep(ZaNewDomainXWizard.GAL_CONFIG_SUM_STEP);		
	} else if (this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.AUTH_MODE_STEP) {
		if(this._containedObject.attrs[ZaDomain.A_AuthMech]==ZaDomain.AuthMech_zimbra) {
			this.goPage(ZaNewDomainXWizard.VHOST_STEP);		
			this.changeButtonStateForStep(ZaNewDomainXWizard.VHOST_STEP);
		} else {
			if(!this._containedObject.attrs[ZaDomain.A_AuthLdapURL]) {
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_LDAP_URL_REQUIRED);
				return false;
			}			
			if(this._containedObject.attrs[ZaDomain.A_AuthMech]==ZaDomain.AuthMech_ad) {
				var temp = this._containedObject.attrs[ZaDomain.A_AuthLdapURL].join(" ");
				if(this._containedObject.attrs[ZaDomain.A_zimbraAuthLdapStartTlsEnabled] == "TRUE") {
					//check that we don't have ldaps://
					if(temp.indexOf("ldaps://") > -1) {
						ZaApp.getInstance().getCurrentController().popupWarningDialog(ZaMsg.Domain_WarningStartTLSIgnored)
					}		
				}		
				this.goPage(ZaNewDomainXWizard.AUTH_CONFIG_SUM_STEP);
				this.changeButtonStateForStep(ZaNewDomainXWizard.AUTH_CONFIG_SUM_STEP);			
			} else {
				this.goPage(ZaNewDomainXWizard.AUTH_CONFIG_STEP_2);
				this.changeButtonStateForStep(ZaNewDomainXWizard.AUTH_CONFIG_STEP_2);			
			}			
		}
	}  else if (this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.AUTH_CONFIG_STEP_2) {
			//clear the password if the checkbox is unchecked
		if(this._containedObject[ZaDomain.A_AuthUseBindPassword]=="FALSE") {
			this._containedObject.attrs[ZaDomain.A_AuthLdapSearchBindDn] = null;
			this._containedObject.attrs[ZaDomain.A_AuthLdapSearchBindPassword] = null;
			this._containedObject[ZaDomain.A_AuthLdapSearchBindPasswordConfirm] = null;
		}
		//check that passwords match
		if(this._containedObject.attrs[ZaDomain.A_AuthLdapSearchBindPassword]!=this._containedObject[ZaDomain.A_AuthLdapSearchBindPasswordConfirm]) {
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_MISMATCH);
			return false;
		}
		this.goPage(ZaNewDomainXWizard.AUTH_CONFIG_SUM_STEP);
		//this.changeButtonStateForStep(ZaNewDomainXWizard.AUTH_CONFIG_SUM_STEP);
	} else if(this._containedObject[ZaModel.currentStep] == ZaNewDomainXWizard.AUTH_CONFIG_SUM_STEP) {
		this._localXForm.setInstanceValue(ZaDomain.Check_SKIPPED,ZaDomain.A_AuthTestResultCode);
		this.goPage(ZaNewDomainXWizard.AUTH_TEST_RESULT_STEP);
 		//this.testAuthSettings();
		//this.changeButtonStateForStep(ZaNewDomainXWizard.AUTH_TEST_STEP);
	} else {
		this.goPage(this._containedObject[ZaModel.currentStep] + 1);
		this.changeButtonStateForStep(this._containedObject[ZaModel.currentStep]);
	}
}

ZaNewDomainXWizard.getGalSyncLdapFilterEnabled = function () {
	var val1 = this.getModel().getInstanceValue(this.getInstance(),ZaDomain.A_GALSyncUseGALSearch);
	var val2 = this.getModel().getInstanceValue(this.getInstance(),ZaDomain.A_GALSyncServerType);
	return (val1 == 'FALSE' && val2=='ldap');	
}

ZaNewDomainXWizard.prototype.checkGALAccount = function () {

    var isCreated = this._containedObject[ZaDomain.A2_create_gal_acc] == "TRUE";
    if (!isCreated)
        return true;

    var GALAccountSet = this._containedObject[ZaDomain.A2_gal_sync_accounts_set];
    var isFound = false;
    var currentGALAccount;
    for (var i in GALAccountSet) {
        currentGALAccount= GALAccountSet[i];
        if (!currentGALAccount[ZaDomain.A2_new_gal_sync_account_name] || !currentGALAccount[ZaDomain.A_mailHost])
            continue;

        if((this._containedObject.attrs[ZaDomain.A_zimbraGalMode] == ZaDomain.GAL_Mode_internal ||
             this._containedObject.attrs[ZaDomain.A_zimbraGalMode] == ZaDomain.GAL_Mode_both)
             && currentGALAccount[ZaDomain.A2_new_internal_gal_ds_name]) {
            isFound = true;
            break;
        }

        if(this._containedObject.attrs[ZaDomain.A_zimbraGalMode] != ZaDomain.GAL_Mode_internal
             && currentGALAccount[ZaDomain.A2_new_external_gal_ds_name]) {
            isFound = true;
            break;
        }
    }
    return isFound;
}

ZaNewDomainXWizard.getGalSyncConfigSeparate = function () {
	var val1 = this.getModel().getInstanceValue(this.getInstance(),ZaDomain.A_GALSyncUseGALSearch);
	return (val1 == 'FALSE');	
}

ZaNewDomainXWizard.isDomainModeNotInternal = function () {
	return (this.getInstanceValue(ZaDomain.A_zimbraGalMode) !=ZaDomain.GAL_Mode_internal);
}

ZaNewDomainXWizard.isDomainModeNotExternal = function () {
	return (this.getInstanceValue(ZaDomain.A_zimbraGalMode) !=ZaDomain.GAL_Mode_external);
}

ZaNewDomainXWizard.isAuthMechNotZimbra = function () {
	return (this.getInstanceValue(ZaDomain.A_AuthMech) != ZaDomain.AuthMech_zimbra);
}

ZaNewDomainXWizard.myXFormModifier = function(xFormObject, entry) {
	var resultHeaderList = new Array();
	resultHeaderList[0] = new ZaListHeaderItem("email", ZaMsg.ALV_Name_col, null, "116px", null, "email", true, true);
	resultHeaderList[1] = new ZaListHeaderItem("fullName", ZaMsg.ALV_FullName_col, null, "auto", null, "fullName", true, true);
	var labelVisibility = {};
    labelVisibility[ZaNewDomainXWizard.GAL_CONFIG_STEP_2] = {
        checks:[ZaNewDomainXWizard.isDomainModeNotInternal],
        sources:[ZaDomain.A_zimbraGalMode]
    };
    labelVisibility[ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_1] = {
        checks:[ZaNewDomainXWizard.isDomainModeNotInternal],
        sources:[ZaDomain.A_zimbraGalMode]
    };
    labelVisibility[ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_2] = {
        checks:[[ZaNewDomainXWizard.isDomainModeNotInternal],
                [XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]
        ],
        sources:[ZaDomain.A_zimbraGalMode, ZaDomain.A_GALSyncUseGALSearch]
    };
    labelVisibility[ZaNewDomainXWizard.GAL_CONFIG_SUM_STEP] = {
        checks:[ZaNewDomainXWizard.isDomainModeNotInternal],
        sources:[ZaDomain.A_zimbraGalMode]
    };
    labelVisibility[ZaNewDomainXWizard.GAL_TEST_RESULT_STEP] = {
        checks:[ZaNewDomainXWizard.isDomainModeNotInternal],
        sources:[ZaDomain.A_zimbraGalMode]
    };
    labelVisibility[ZaNewDomainXWizard.SYNC_CONFIG_SUM_STEP] = {
        checks:[ZaNewDomainXWizard.isDomainModeNotInternal],
        sources:[ZaDomain.A_zimbraGalMode]
    };
    labelVisibility[ZaNewDomainXWizard.SYNC_TEST_RESULT_STEP] = {
        checks:[ZaNewDomainXWizard.isDomainModeNotInternal],
        sources:[ZaDomain.A_zimbraGalMode]
    };

    labelVisibility[ZaNewDomainXWizard.AUTH_CONFIG_STEP_2] = {
        checks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ldap]],
        sources:[ZaDomain.A_AuthMech]
    };
    labelVisibility[ZaNewDomainXWizard.AUTH_CONFIG_SUM_STEP] = {
        checks:[ZaNewDomainXWizard.isAuthMechNotZimbra],
        sources:[ZaDomain.A_AuthMech]
    };
    labelVisibility[ZaNewDomainXWizard.AUTH_TEST_RESULT_STEP] = {
        checks:[ZaNewDomainXWizard.isAuthMechNotZimbra],
        sources:[ZaDomain.A_AuthMech]
    };

	xFormObject.items = [
        {
            type: _OUTPUT_,
            colSpan: 2,
            valign: _TOP_,
            cssStyle:"white-space: normal",
            ref: ZaModel.currentStep,
            choices: this.stepChoices,
            valueChangeEventSources: [ZaModel.currentStep],
            labelVisibility: labelVisibility
        },
		{type:_SEPARATOR_, align:_CENTER_, valign:_TOP_},
		{type:_SPACER_,  align:_CENTER_, valign:_TOP_},		
		{type: _SWITCH_,width:"100%", valign:_TOP_, cssStyle: "white-space: normal",
			items: [
				{type:_CASE_, caseKey:ZaNewDomainXWizard.GENERAL_STEP, colSizes:["200px","*"],numCols:2,
					items: [{type:_ZAWIZ_TOP_GROUPER_, colSpan:"*", label:ZaMsg.TABT_GeneralPage,
                        items:[
                            {ref:ZaDomain.A_domainName, type:_TEXTFIELD_, label:ZaMsg.Domain_DomainName,labelLocation:_LEFT_, required:true, width:200,
                                getDisplayValue: AjxUtil.htmlEncode
                            },
                            {ref:ZaDomain.A_zimbraPublicServiceHostname, type:_TEXTFIELD_, label:ZaMsg.Domain_zimbraPublicServiceHostname,labelLocation:_LEFT_, width:200},
                            {ref:ZaDomain.A_zimbraPublicServiceProtocol, type:_OSELECT1_, choices:ZaDomain.protocolChoices, label:ZaMsg.Domain_zimbraPublicServiceProtocol,labelLocation:_LEFT_},
                            {ref:ZaDomain.A_zimbraPublicServicePort, type:_TEXTFIELD_, label:ZaMsg.Domain_zimbraPublicServicePort,labelLocation:_LEFT_, width:100},
                            { type: _DWT_ALERT_,containerCssStyle: "padding-bottom:0px",style: DwtAlert.INFO,
                                    iconVisible: true,content: ZaMsg.Domain_InboundSMTPNote,colSpan:"*"},
                            {type:_GROUP_,colSpan:"2", colSizes:["*"],numCols:1, width:"100%", id:"dns_check_group",items:[

                                {ref: ZaDomain.A_zimbraDNSCheckHostname, type:_SUPERWIZ_TEXTFIELD_, textFieldWidth:200, colSizes:["200px", "250px", "*"],
                                    label:null,txtBoxLabel:ZaMsg.Domain_zimbraDNSCheckHostname, resetToSuperLabel:ZaMsg.NAD_ResetToGlobal}/*, {type:_CELLSPACER_}*/
                            ]},
                            {ref:ZaDomain.A_description, type:_TEXTFIELD_, label:ZaMsg.NAD_Description, labelLocation:_LEFT_, width:200},
                            {ref:ZaDomain.A_domainDefaultCOSId,
	                            type:_INPUT_,
                                label:ZaMsg.Domain_DefaultCOS,
                                onChange:ZaNewDomainXWizard.onCOSChanged,
	                            getDisplayValue:function(newValue) {
									this.createDataList(ZaApp.getInstance().getCosListName());
		                            if (newValue) {
			                            var cos = ZaCos.getCosById(newValue);
			                            return cos && cos.name;
		                            }
	                            }
                            },
                            {ref:ZaDomain.A_zimbraDomainStatus, type:_OSELECT1_, msgName:ZaMsg.NAD_DomainStatus,
                                label:ZaMsg.LBL_zimbraDomainStatus,
                                labelLocation:_LEFT_, choices:ZaDomain.domainStatusChoices
                            },
                            {ref:ZaDomain.A_notes, type:_TEXTAREA_, label:ZaMsg.NAD_Notes, labelLocation:_LEFT_, labelCssStyle:"vertical-align:top", width:250},
                            // help URL
                            {ref:ZaDomain.A_zimbraHelpAdminURL, type:_TEXTFIELD_, label:ZaMsg.Domain_zimbraHelpAdminURL,
                                msgName:ZaMsg.Domain_zimbraHelpAdminURL, labelLocation:_LEFT_, width:200},
                            {ref:ZaDomain.A_zimbraHelpDelegatedURL, type:_TEXTFIELD_, label:ZaMsg.Domain_zimbraHelpDelegatedURL,
                                msgName:ZaMsg.Domain_zimbraHelpDelegatedURL, labelLocation:_LEFT_, width:200}
                        ]}
                    ]
				},
				{type:_CASE_, caseKey:ZaNewDomainXWizard.GALMODE_STEP,numCols:2,colSizes:["220px","450px"],
					items: [
						{ref:ZaDomain.A_zimbraGalMode, type:_OSELECT1_, label:ZaMsg.Domain_GalMode, labelLocation:_LEFT_, choices:this.GALModes, onChange:ZaNewDomainXWizard.onGalModeChange},
						{ref:ZaDomain.A_zimbraGalMaxResults, type:_TEXTFIELD_, label:ZaMsg.LBL_zimbraGalMaxResults, msgName:ZaMsg.MSG_zimbraGalMaxResults, labelLocation:_LEFT_, width:100},
						{ref:ZaDomain.A2_create_gal_acc, type:_CHECKBOX_, label:ZaMsg.Domain_CreateGALSyncAccts, subLabel:"",
							labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE",
							labelCssClass:"xform_label", align:_LEFT_,labelWrap:true,
							enableDisableChecks:[],visibilityChecks:[]
						},
                        {ref:ZaDomain.A2_gal_sync_accounts_set, type:_COLLAB_SELECT_, label:null, repeatInstance:"", showAddButton:true, showRemoveButton:true,
                            visibilityChangeEventSources:[ZaDomain.A2_create_gal_acc],
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A2_create_gal_acc,"TRUE"], [function() {
                                //A workaround to modify remove button visibility checking
                                //Keep at least 1 item. IZaf have only 1 item, hide the remove button
                                if (this.removeButton) {
                                    this.removeButton.visibilityChecks = [];
                                    this.removeButton.visibilityChecks.push(function() {
                                        return (this.getParentItem().getInstanceCount() > 1);
                                    });
                                }

                                //If no item exist, add 1 for better UE.
                                if (this.getInstanceValue().length == 0) {
                                    this.addRowButtonClicked(this.getParentItem().instanceNum);
                                }
                                return true;
                            }]],
							enableDisableChecks:[],
							colSpan:2,
							addButtonLabel:ZaMsg.Domain_GAL_Add,
							addButtonWidth: 220,
							number: 0,
							removeButtonLabel:ZaMsg.Domain_GAL_Remove,
							showAddOnNextRow: true,
                            showRemoveNextRow: false,
                            items:[
                                {type:_GROUP_, ref:".", numCols:1, width:"100%",
                                    visibilityChangeEventSources:[ZaDomain.A2_gal_sync_accounts_set],
                                    visibilityChecks:[function() {
                                        return ((this.instanceNum == 0) ||(this.instanceNum < this.getNumberToShow()) || (this.instanceNum < this.getInstanceCount()));
                                    }],
                                    items:[
                                    {type:_SPACER_, colSpan:"*"},
                                    {type:_GROUP_, ref:".", numCols:2, colSizes:["220px", "100%"], //use 100% to full fill the blank on the right hand side in IE
                                        width:"100%",
                                        enableDisableChecks:[],
                                        visibilityChangeEventSources:[ZaDomain.A2_gal_sync_accounts_set],
                                        visibilityChecks:[function() {
                                            var instanceNum = this.getParentItem().instanceNum;
                                            return ((instanceNum < this.getNumberToShow()) || (instanceNum < this.getInstanceCount()));
                                        }],
                                        items:[
                                        {type:_GROUP_, label:ZaMsg.Domain_GalSyncAccount, numCols:3, colSizes:["130px", "25px","auto"], colSpan:"1", ref: ".",
                                            items:[
                                                {ref:ZaDomain.A2_new_gal_sync_account_name, width:130, label:null, type:_TEXTFIELD_, visibilityChecks:[],enableDisableChecks:[]},
                                                {type:_OUTPUT_, value:"@", visibilityChecks:[],enableDisableChecks:[]},
                                                {type:_OUTPUT_,refPath:ZaDomain.A_domainName,label:null,align:_LEFT_, visibilityChecks:[],enableDisableChecks:[],
                                                    getDisplayValue: AjxUtil.htmlEncode
                                                }
                                            ],
                                            enableDisableChangeEventSources:[ZaDomain.A2_create_gal_acc],
                                            enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_create_gal_acc,"TRUE"]],
                                            required:true
                                        },
                                        {ref:ZaDomain.A_mailHost, type: _OSELECT1_, label:ZaMsg.NAD_MailServer,  choices: ZaApp.getInstance().getServerListChoices(), colSelect:true, required:true,
                                            width:300,
                                            enableDisableChangeEventSources:[ZaDomain.A2_create_gal_acc],
                                            enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_create_gal_acc,"TRUE"]],
                                            visibilityChecks:[]
                                        },
                                        {ref:ZaDomain.A2_new_internal_gal_ds_name, label:ZaMsg.Domain_InternalGALDSName, type:_TEXTFIELD_, required:true,
                                            visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                            visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotExternal],
                                            enableDisableChangeEventSources:[ZaDomain.A2_create_gal_acc],
                                            enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_create_gal_acc,"TRUE"]]
                                        },
                                        {ref:ZaDomain.A2_new_internal_gal_polling_interval,
                                            type:_LIFETIME_, label:ZaMsg.LBL_zimbraDataSourcePollingInterval_internal, labelLocation:_LEFT_,
                                            msgName:ZaMsg.MSG_zimbraDataSourcePollingInterval_internal,
                                            visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                            visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotExternal],
                                            enableDisableChangeEventSources:[ZaDomain.A2_create_gal_acc],
                                            enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_create_gal_acc,"TRUE"]]
                                        },
                                        {ref:ZaDomain.A2_new_external_gal_ds_name, label:ZaMsg.Domain_ExternalGALDSName, type:_TEXTFIELD_,
                                            visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                            visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal],
                                            enableDisableChangeEventSources:[ZaDomain.A2_create_gal_acc],
                                            enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_create_gal_acc,"TRUE"]]
                                        },
                                        {ref:ZaDomain.A2_new_external_gal_polling_interval,
                                            type:_LIFETIME_, label:ZaMsg.LBL_zimbraDataSourcePollingInterval_external, labelLocation:_LEFT_,
                                            msgName:ZaMsg.MSG_zimbraDataSourcePollingInterval_external,
                                            visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                            visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal],
                                            enableDisableChangeEventSources:[ZaDomain.A2_create_gal_acc],
                                            enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_create_gal_acc,"TRUE"]]
                                        }
                                    ]}
                            ]}
                        ]},
						{type:_GROUP_, colSpan:2,numCols:2,colSizes:["220px","430px"],
							visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
							visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal],
							cssStyle:"overflow:auto",
							items: [
								{ref:ZaDomain.A_GALServerType, type:_OSELECT1_, label:ZaMsg.Domain_GALServerType, labelLocation:_LEFT_, choices:this.GALServerTypes, onChange:ZaNewDomainXWizard.onGALServerTypeChange,
                                    enableDisableChecks:[],visibilityChecks:[]},
								{type:_GROUP_, numCols:6, colSpan:6,label:"   ",labelLocation:_LEFT_,
									items: [
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"35px"},
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_GALServerName, width:"200px"},
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"5px"},									
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_GALServerPort,  width:"40px"},	
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_GALUseSSL, width:"40px"}									
									]
								},
								{ref:ZaDomain.A_GalLdapURL, type:_REPEAT_, label:ZaMsg.Domain_GalLdapURL, repeatInstance:"", showAddButton:true, showRemoveButton:true,  
									addButtonLabel:ZaMsg.Domain_AddURL, 
									removeButtonLabel:ZaMsg.Domain_REPEAT_REMOVE,
									showAddOnNextRow:true,
									items: [
										{ref:".", type:_LDAPURL_, label:null,ldapSSLPort:"3269",ldapPort:"3268",  labelLocation:_NONE_, enableDisableChecks:[],visibilityChecks:[]}
									]
								},
								{ref:ZaDomain.A_GalLdapFilter, type:_TEXTAREA_, width:380, height:40, label:ZaMsg.Domain_GalLdapFilter, labelLocation:_LEFT_, 
									enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALServerType,ZaDomain.GAL_ServerType_ldap]],
									enableDisableChangeEventSources:[ZaDomain.A_GALServerType]
									
								},
								{ref:ZaDomain.A_zimbraGalAutoCompleteLdapFilter, type:_TEXTAREA_, width:380, height:40, label:ZaMsg.Domain_zimbraGalAutoCompleteLdapFilter, labelLocation:_LEFT_, 
									enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALServerType,ZaDomain.GAL_ServerType_ldap]],
									enableDisableChangeEventSources:[ZaDomain.A_GALServerType],bmolsnr:true
									
								},						
								{ref:ZaDomain.A_GalLdapSearchBase, type:_TEXTAREA_, width:380, height:40, label:ZaMsg.Domain_GalLdapSearchBase, labelLocation:_LEFT_,bmolsnr:true}
							]
						}
					]
				},

				{type:_CASE_, caseKey:ZaNewDomainXWizard.GAL_CONFIG_STEP_2, colSizes:["220px","430px"],numCols:2,
					visibilityChangeEventSources:[ZaModel.currentStep],
					visibilityChecks:[Case_XFormItem.prototype.isCurrentTab,ZaNewDomainXWizard.isDomainModeNotInternal],
					
					items: [
						{ref:ZaDomain.A_UseBindPassword, type:_CHECKBOX_, subLabel:"",label:ZaMsg.Domain_UseBindPassword, labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE",labelCssClass:"xform_label", align:_LEFT_,
                            enableDisableChecks:[],visibilityChecks:[]},
						{ref:ZaDomain.A_GalLdapBindDn, type:_TEXTFIELD_, label:ZaMsg.Domain_GalLdapBindDn, labelLocation:_LEFT_,subLabel:"",
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_UseBindPassword,"TRUE"]],
							enableDisableChangeEventSources:[ZaDomain.A_UseBindPassword]
							
						},
						{ref:ZaDomain.A_GalLdapBindPassword, type:_SECRET_, label:ZaMsg.Domain_GalLdapBindPassword, labelLocation:_LEFT_, 
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_UseBindPassword,"TRUE"]],
							enableDisableChangeEventSources:[ZaDomain.A_UseBindPassword]
							
						},
						{ref:ZaDomain.A_GalLdapBindPasswordConfirm, type:_SECRET_, label:ZaMsg.Domain_GalLdapBindPasswordConfirm, labelLocation:_LEFT_, 
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_UseBindPassword,"TRUE"], [ZaItem.hasWritePermission, ZaDomain.A_GalLdapBindPassword]],
							enableDisableChangeEventSources:[ZaDomain.A_UseBindPassword],
                            visibilityChecks:[[ZaItem.hasReadPermission, ZaDomain.A_GalLdapBindPassword]]
						}														
					]			
				}, 
				{type:_CASE_, caseKey:ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_1,numCols:2,colSizes:["220px","430px"],
					items: [
						{ref:ZaDomain.A_GALSyncUseGALSearch, type:_CHECKBOX_, label:ZaMsg.Domain_GALSyncUseGALSearch, subLabel:"",
							labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE",
							labelCssClass:"xform_label", align:_LEFT_,labelWrap:true,
							onChange:ZaNewDomainXWizard.onGALSyncChange,
                            enableDisableChecks:[],
                            visibilityChecks:[]
						},
						{ref:ZaDomain.A_GALSyncServerType, type:_OSELECT1_, label:ZaMsg.Domain_GALServerType, labelLocation:_LEFT_, 
							choices:this.GALServerTypes, onChange:ZaNewDomainXWizard.onGALSyncServerTypeChange,
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
							enableDisableChangeEventSources:[ZaDomain.A_GALSyncUseGALSearch],
                            enableDisableChecks:[],
                            visibilityChecks:[]
						},
						{type:_GROUP_, numCols:6, colSpan:6,label:"   ",labelLocation:_LEFT_,
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
							enableDisableChangeEventSources:[ZaDomain.A_GALSyncUseGALSearch],
							items: [
								{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"35px"},
								{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_GALServerName, width:"200px"},
								{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"5px"},									
								{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_GALServerPort,  width:"40px"},	
								{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_GALUseSSL, width:"60px"}									
							]
						},
						{ref:ZaDomain.A_zimbraGalSyncLdapURL, type:_REPEAT_, label:ZaMsg.LBL_Domain_GalLdapURL, repeatInstance:"", showAddButton:true, showRemoveButton:true,
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
							enableDisableChangeEventSources:[ZaDomain.A_GALSyncUseGALSearch],
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSyncServerType,ZaDomain.GAL_ServerType_ad]],
							visibilityChangeEventSources:[ZaDomain.A_GALSyncUseGALSearch,ZaDomain.A_GALSyncServerType],							
							addButtonLabel:ZaMsg.Domain_AddURL, 
							removeButtonLabel:ZaMsg.Domain_REPEAT_REMOVE,								
							showAddOnNextRow:true,							
							items: [
								{ref:".", type:_LDAPURL_, label:null,ldapSSLPort:"3269",ldapPort:"3268",  labelLocation:_NONE_, enableDisableChecks:[],visibilityChecks:[]}
							]
						},
						{ref:ZaDomain.A_zimbraGalSyncLdapURL, type:_REPEAT_, label:ZaMsg.LBL_Domain_GalLdapURL, repeatInstance:"", showAddButton:true, showRemoveButton:true,
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSyncServerType,ZaDomain.GAL_ServerType_ldap]],
							visibilityChangeEventSources:[ZaDomain.A_GALSyncUseGALSearch,ZaDomain.A_GALSyncServerType],							
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
							enableDisableChangeEventSources:[ZaDomain.A_GALSyncUseGALSearch,ZaDomain.A_GALSyncServerType],								
							addButtonLabel:ZaMsg.Domain_AddURL, 
							removeButtonLabel:ZaMsg.Domain_REPEAT_REMOVE,								
							showAddOnNextRow:true,							
							items: [
								{ref:".", type:_LDAPURL_, label:null,ldapSSLPort:"636",ldapPort:"389",  labelLocation:_NONE_, enableDisableChecks:[],visibilityChecks:[]}
							]
						},
						{ref:ZaDomain.A_zimbraGalSyncLdapFilter, type:_TEXTAREA_, width:380, height:40, label:ZaMsg.Domain_GalLdapFilter, labelLocation:_LEFT_, textWrapping:"soft", 
							enableDisableChecks:[ZaNewDomainXWizard.getGalSyncLdapFilterEnabled],
							enableDisableChangeEventSources:[ZaDomain.A_GALSyncUseGALSearch,ZaDomain.A_GALSyncServerType]
						},
						{ref:ZaDomain.A_zimbraGalSyncLdapSearchBase, type:_TEXTAREA_, width:380, height:40, label:ZaMsg.Domain_GalLdapSearchBase, labelLocation:_LEFT_, textWrapping:"soft", 
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
							enableDisableChangeEventSources:[ZaDomain.A_GALSyncUseGALSearch]
						}						
					]
				},
				{type:_CASE_,numCols:2,colSizes:["220px","430px"], caseKey:ZaNewDomainXWizard.GAL_SYNC_CONFIG_STEP_2,
					visibilityChecks:[Case_XFormItem.prototype.isCurrentTab,ZaNewDomainXWizard.isDomainModeNotInternal,[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
					visibilityChangeEventSources:[ZaModel.currentStep],
					
					items: [
						{ref:ZaDomain.A_SyncUseBindPassword, type:_CHECKBOX_, subLabel:"", label:ZaMsg.Domain_UseBindPassword, labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE",labelCssClass:"xform_label", align:_LEFT_,
                            enableDisableChecks:[],
                            visibilityChecks:[]
                        },
						{ref:ZaDomain.A_zimbraGalSyncLdapBindDn, type:_TEXTFIELD_, label:ZaMsg.Domain_GalLdapBindDn, labelLocation:_LEFT_, 
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_SyncUseBindPassword,"TRUE"]],
							enableDisableChangeEventSources:[ZaDomain.A_SyncUseBindPassword]
					
						},
						{ref:ZaDomain.A_zimbraGalSyncLdapBindPassword, type:_SECRET_, label:ZaMsg.Domain_GalLdapBindPassword, labelLocation:_LEFT_, 
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_SyncUseBindPassword,"TRUE"]],
							enableDisableChangeEventSources:[ZaDomain.A_SyncUseBindPassword]
					
						},
						{ref:ZaDomain.A_GalSyncLdapBindPasswordConfirm, type:_SECRET_, label:ZaMsg.Domain_GalLdapBindPasswordConfirm, labelLocation:_LEFT_, 
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_SyncUseBindPassword,"TRUE"], [ZaItem.hasReadPermission, ZaDomain.A_zimbraGalSyncLdapBindPassword]],
							enableDisableChangeEventSources:[ZaDomain.A_SyncUseBindPassword],
                            visibilityChecks:[[ZaItem.hasReadPermission, ZaDomain.A_zimbraGalSyncLdapBindPassword]]

						}							
					]			
				},					
				{type:_CASE_, caseKey:ZaNewDomainXWizard.GAL_CONFIG_SUM_STEP,numCols:2,colSizes:["220px","430px"],
					items: [
						//search
						{type:_GROUP_,
							visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal,[XForm.checkInstanceValue,ZaDomain.A2_isTestingGAL,0]],
							visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode,ZaDomain.A2_isTestingGAL],
							useParentTable:false,
							numCols:2,colSpan:2, width:"100%", colSizes:["220px","430px"],
							items: [
								{ref:ZaDomain.A_zimbraGalMode, type:_OUTPUT_, label:ZaMsg.Domain_GalMode, choices:this.GALModes,
									visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A2_isTestingGAL,0]],
									visibilityChangeEventSources:[ZaDomain.A2_isTestingGAL]	
								},
								{ref:ZaDomain.A_zimbraGalMaxResults, type:_OUTPUT_, label:ZaMsg.LBL_zimbraGalMaxResults,
									visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A2_isTestingGAL,0]],
									visibilityChangeEventSources:[ZaDomain.A2_isTestingGAL]
								},							        
								{ref:ZaDomain.A_GALServerType, type:_OUTPUT_, label:ZaMsg.Domain_GALServerType, choices:this.GALServerTypes, labelLocation:_LEFT_, bmolsnr:true},
								{ref:ZaDomain.A_GalLdapURL, type:_REPEAT_, label:ZaMsg.Domain_GalLdapURL+":", labelLocation:_LEFT_,showAddButton:false, bmolsnr:true, showRemoveButton:false,
									items:[
										{type:_OUTPUT_, ref:".", label:null,labelLocation:_NONE_,bmolsnr:true}
									]
								},	
								{ref:ZaDomain.A_GalLdapFilter, type:_OUTPUT_, label:ZaMsg.Domain_GalLdapFilter, labelLocation:_LEFT_,required:true, 
									visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALServerType,ZaDomain.GAL_ServerType_ldap]],
									visibilityChangeEventSources:[ZaDomain.GAL_ServerType_ldap], bmolsnr:true									
									
								},
								{ref:ZaDomain.A_GalLdapSearchBase, type:_OUTPUT_, label:ZaMsg.Domain_GalLdapSearchBase, labelLocation:_LEFT_, bmolsnr:true},
								{ref:ZaDomain.A_UseBindPassword, type:_OUTPUT_, label:ZaMsg.Domain_UseBindPassword, labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE", bmolsnr:true},
								{ref:ZaDomain.A_GalLdapBindDn, type:_OUTPUT_, label:ZaMsg.Domain_GalLdapBindDn, labelLocation:_LEFT_, 
									visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_UseBindPassword,"TRUE"]],
									visibilityChangeEventSources:[ZaDomain.A_UseBindPassword], bmolsnr:true									
								},
								{ref:ZaDomain.A_GALSampleQuery, type:_INPUT_, label:ZaMsg.Domain_GALSampleSearchName, labelLocation:_LEFT_, labelWrap:true, cssStyle:"width:100px;", bmolsnr:true,
                                    visibilityChecks:[],enableDisableChecks:[]
                                },
								{type:_CELLSPACER_},
								{type:_DWT_BUTTON_, 
									enableDisableChecks:[[XForm.checkInstanceValueNot,ZaDomain.A_GALSampleQuery," "],
									                     [XForm.checkInstanceValueNotEmty,ZaDomain.A_GALSampleQuery]],
									enableDisableChangeEventSources:[ZaDomain.A_GALSampleQuery],
									onActivate:"ZaNewDomainXWizard.testGALSettings.call(this)", 
									label:ZaMsg.Domain_GALTestSettings, 
									visibilityChecks:[],					
									valign:_BOTTOM_,width:"100px"
								}
							]
						},
						{type:_DWT_ALERT_,content:ZaMsg.Domain_GALTestingInProgress,
							ref:null,
							colSpan:"2",
							iconVisible: true,
							align:_CENTER_,				
							style: DwtAlert.INFORMATION,
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A2_isTestingGAL,1]],
							visibilityChangeEventSources:[ZaDomain.A2_isTestingGAL]
						}						
					]
				},
				{type:_CASE_, caseKey:ZaNewDomainXWizard.GAL_TEST_RESULT_STEP,numCols:2,colSizes:["220px","430px"],
					items: [
						{type:_GROUP_, 
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSearchTestResultCode,ZaDomain.Check_OK]] ,
							visibilityChangeEventSources:[ZaDomain.A_GALSearchTestResultCode],							
							numCols:2,  width: "100%",
                            colSpan:"2",
							items: [
								{type:_DWT_ALERT_,content:ZaMsg.Domain_GALSearchTestSuccessful,
									ref:null,
									colSpan:"2",
									iconVisible: false,
									align:_CENTER_,				
									style: DwtAlert.INFORMATION
								},										
								{type:_OUTPUT_, value:ZaMsg.Domain_GALSearchResult,  align:_CENTER_, colSpan:2, 
									visibilityChecks:[[XForm.checkInstanceValueNotEmty,ZaDomain.A_GALTestSearchResults]]
									
								},											
								{type:_SPACER_,  align:_CENTER_, valign:_TOP_, colSpan:"*"},	
								{ref: ZaDomain.A_GALTestSearchResults, type:_DWT_LIST_, height:"140px", width:"260px",colSpan:2,
			 				    	cssClass: "DLSource", forceUpdate: true, 
			 				    	widgetClass:ZaGalObjMiniListView, headerList:resultHeaderList,
			 				    	hideHeader:true
			 				    }
							]
						},
						{type:_GROUP_, 
							visibilityChecks:[[XForm.checkInstanceValueNot,ZaDomain.A_GALSearchTestResultCode,ZaDomain.Check_OK],
							                  [XForm.checkInstanceValueNot,ZaDomain.A_GALSearchTestResultCode,ZaDomain.Check_SKIPPED]],							
							visibilityChangeEventSources:[ZaDomain.A_GALSearchTestResultCode],						
							numCols:2,  width: "100%",
                            colSpan:"2",
							items: [
							   {type:_DWT_ALERT_,content:ZaMsg.Domain_GALSearchTestFailed,
									ref:null,
									colSpan:"2",
									iconVisible: true,
									align:_CENTER_,				
									style: DwtAlert.WARNING
								},							
								{type:_OUTPUT_, ref:ZaDomain.A_GALSearchTestResultCode, label:ZaMsg.Domain_GALTestResult, choices:this.TestResultChoices},
								{type:_TEXTAREA_, ref:ZaDomain.A_GALSearchTestMessage, label:ZaMsg.Domain_GALTestMessage, height:"200px", width:"380px"}
							]
						},
						{type:_DWT_ALERT_,content:ZaMsg.Domain_GALSearchTestSkipped,
							ref:null,
							colSpan:"2",
							iconVisible: true,
							align:_CENTER_,				
							style: DwtAlert.WARNING,
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSearchTestResultCode,ZaDomain.Check_SKIPPED]],
							visibilityChangeEventSources:[ZaDomain.A_GALSearchTestResultCode]									
						}
					]
				},
				{
					type:_CASE_, caseKey:ZaNewDomainXWizard.SYNC_CONFIG_SUM_STEP,
					items:[
						{type:_DWT_ALERT_,content:ZaMsg.Domain_GALSyncTestingInProgress,
							ref:null,
							colSpan:"2",
							iconVisible: true,
							align:_CENTER_,				
							style: DwtAlert.INFORMATION,
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A2_isTestingSync,1]],
							visibilityChangeEventSources:[ZaDomain.A2_isTestingSync]
						},
						//sync
						{type:_GROUP_, 
							useParentTable:false,
							numCols:2,colSpan:2,
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A2_isTestingSync,0]],
							visibilityChangeEventSources:[ZaDomain.A2_isTestingSync],							
							items: [
								{ref:ZaDomain.A_zimbraGalMode, type:_OUTPUT_, label:ZaMsg.Domain_GalMode, choices:this.GALModes,
									visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A2_isTestingGAL,0]],
									visibilityChangeEventSources:[ZaDomain.A2_isTestingGAL]	
								},							        
								{ref:ZaDomain.A_GALSyncUseGALSearch, type:_OUTPUT_, label:ZaMsg.Domain_GALSyncUseGALSearch, labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE", bmolsnr:true},
								{ref:ZaDomain.A_GALSyncServerType, type:_OUTPUT_, label:ZaMsg.Domain_GALServerType, choices:this.GALServerTypes, labelLocation:_LEFT_,
									visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal,[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
									visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode,ZaDomain.A_GALSyncUseGALSearch], bmolsnr:true									
								},
								{ref:ZaDomain.A_zimbraGalSyncLdapURL, type:_REPEAT_, label:ZaMsg.Domain_GalLdapURL+":", labelLocation:_LEFT_,showAddButton:false, showRemoveButton:false, bmolsnr:true,
									visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal,[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
									visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode,ZaDomain.A_GALSyncUseGALSearch],									
									items:[
										{type:_OUTPUT_, ref:".", label:null,labelLocation:_NONE_,bmolsnr:true}
									]
								},	
								{ref:ZaDomain.A_zimbraGalSyncLdapFilter, type:_OUTPUT_, label:ZaMsg.Domain_GalLdapFilter, labelLocation:_LEFT_,required:true, 
									visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal,[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"],[XForm.checkInstanceValue,ZaDomain.A_GALServerType,ZaDomain.GAL_ServerType_ldap]],
									visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode,ZaDomain.A_GALSyncUseGALSearch,ZaDomain.A_GALServerType], bmolsnr:true									
								},
								{ref:ZaDomain.A_zimbraGalSyncLdapSearchBase, type:_OUTPUT_, label:ZaMsg.Domain_GalLdapSearchBase, labelLocation:_LEFT_,
									visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal,[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
									visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode,ZaDomain.A_GALSyncUseGALSearch], bmolsnr:true								
								},
								{ref:ZaDomain.A_SyncUseBindPassword, type:_OUTPUT_, label:ZaMsg.Domain_UseBindPassword, labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE",
									visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal,[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
									visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode,ZaDomain.A_GALSyncUseGALSearch], bmolsnr:true									
								},
								{ref:ZaDomain.A_zimbraGalSyncLdapBindDn, type:_OUTPUT_, label:ZaMsg.Domain_GalLdapBindDn, labelLocation:_LEFT_, 
									visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal,[XForm.checkInstanceValue,ZaDomain.A_UseBindPassword,"TRUE"],[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
									visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode,ZaDomain.A_GALSyncUseGALSearch,ZaDomain.A_UseBindPassword], bmolsnr:true									
								},
								{type:_CELLSPACER_},
								{type:_DWT_BUTTON_, 
									onActivate:"ZaNewDomainXWizard.testSyncSettings.call(this)", 
									label:ZaMsg.Domain_GALTestSettings, 
									enableDisableChecks:[],
									visibilityChecks:[],					
									valign:_BOTTOM_,width:"100px"
								}								
							]
						}						
					]
				},
				{
					type:_CASE_,caseKey:ZaNewDomainXWizard.SYNC_TEST_RESULT_STEP,
					items:[
						{type:_GROUP_,
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSyncTestResultCode,ZaDomain.Check_OK]],
							visibilityChangeEventSources:[ZaDomain.A_GALSyncTestResultCode],							 
							numCols:2,
							items: [
								{type:_DWT_ALERT_,content:ZaMsg.Domain_GALSyncTestSuccessful,
									ref:null,
									colSpan:"*",
									iconVisible: false,
									align:_CENTER_,				
									style: DwtAlert.INFORMATION
								}
							]
						},
						{type:_GROUP_,
							visibilityChecks:[[XForm.checkInstanceValueNot,ZaDomain.A_GALSyncTestResultCode,ZaDomain.Check_OK]],
							visibilityChangeEventSources:[ZaDomain.A_GALSyncTestResultCode],								
							numCols:2,						
							items: [
								{type:_DWT_ALERT_,content:ZaMsg.Domain_GALSyncTestFailed,
									ref:null,
									colSpan:"2",
									iconVisible: true,
									align:_CENTER_,				
									style: DwtAlert.WARNING,
									visibilityChecks:[[XForm.checkInstanceValueNot,ZaDomain.A_GALSyncTestResultCode,ZaDomain.Check_SKIPPED]],
									visibilityChangeEventSources:[ZaDomain.A_GALSyncTestResultCode]									
								},
								{type:_DWT_ALERT_,content:ZaMsg.Domain_GALSyncTestSkipped,
									ref:null,
									colSpan:"2",
									iconVisible: true,
									align:_CENTER_,				
									style: DwtAlert.WARNING,
									visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSyncTestResultCode,ZaDomain.Check_SKIPPED]],
									visibilityChangeEventSources:[ZaDomain.A_GALSyncTestResultCode]									
								},															
								{type:_OUTPUT_, ref:ZaDomain.A_GALSyncTestResultCode, label:ZaMsg.Domain_GALTestResult, choices:this.TestResultChoices,
									visibilityChecks:[[XForm.checkInstanceValueNot,ZaDomain.A_GALSyncTestResultCode,ZaDomain.Check_SKIPPED]],
									visibilityChangeEventSources:[ZaDomain.A_GALSyncTestResultCode]											
								},
								{type:_TEXTAREA_, ref:ZaDomain.A_GALSyncTestMessage, label:ZaMsg.Domain_GALTestMessage, height:"200px", width:"380px",
									visibilityChecks:[ 
										function () {
											return ((this.getInstanceValue(ZaDomain.A_GALSyncTestResultCode) != ZaDomain.Check_SKIPPED) && (this.getInstanceValue(ZaDomain.A_GALSyncTestResultCode) !=ZaDomain.Check_OK)); 	
										}
									],
									visibilityChangeEventSources:[ZaDomain.A_GALSyncTestResultCode]											
								}
							]
						}					       
					 ]
				},
				{type:_CASE_, caseKey:ZaNewDomainXWizard.AUTH_URL_STEP,numCols:2,colSizes:["220px","430px"],
					items: [
                            { type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.Domain_URLSetting, colSpan:"*",
                                items :[
                                {ref: ZaDomain.A_zimbraAdminConsoleLoginURL, type:_TEXTFIELD_,
                                label:ZaMsg.Domain_zimbraAdminConsoleLoginURL, width:250
                                },
                                { ref: ZaDomain.A_zimbraAdminConsoleLogoutURL, type:_TEXTFIELD_,
                                label:ZaMsg.Domain_zimbraAdminConsoleLogoutURL  , width:250
                                }
                            ]}, /*
                            { type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_Kerberos_Configure, colSpan:"*",
                                items :[
                                {ref: ZaDomain.A_zimbraAuthKerberos5Realm, type:_TEXTFIELD_,
                                label:ZaMsg.LBL_zimbraAuthKerberos5Realm, width:250
                                }
                            ]},   */
                            { type:_ZAWIZ_TOP_GROUPER_, label: ZaMsg.NAD_AUTH_ClientConfigure, colSpan:"*",
                                  items:[
                                      { ref: ZaDomain.A_zimbraMailSSLClientCertPrincipalMap, labelCssStyle:"vertical-align:top", type:_TEXTAREA_,
                                        label:ZaMsg.NAD_zimbraMailSSLClientCertPrincipalMap, width:250
                                      },
                                      {type: _DWT_ALERT_, cssClass: "DwtTabTable", containerCssStyle: "padding-bottom:0px",
                                          style: DwtAlert.WARNING, iconVisible: false, content: ZaMsg.Alert_Ngnix,
                                          id:"xform_header_ngnix"
                                      },
                                      {type: _SPACER_, height: 10 },
                                      {ref:ZaDomain.A_zimbraReverseProxyClientCertMode, type:_SUPER_SELECT1_,
                                        colSizes:["250px","*"],
                                        label:ZaMsg.NAD_zimbraReverseProxyClientCertMode,
                                        labelLocation:_LEFT_, resetToSuperLabel:ZaMsg.NAD_ResetToCOS
                                      },
                                      {ref: ZaDomain.A_zimbraReverseProxyClientCertCA, type:_TEXTAREA_,
                                        label:ZaMsg.NAD_zimbraReverseProxyClientCertCA, width: 400
                                      }
                                  ]
                            },
                            { type:_ZAWIZ_TOP_GROUPER_, label: ZaMsg.NAD_WEBCLIENT_Configure, colSpan:"*",
                                  items:[
                                      { ref: ZaDomain.A_zimbraWebClientLoginURL,useParentTable: false,
                                        colSpan: 2,
                                        type:_SUPERWIZ_TEXTFIELD_, textFieldWidth: "250px",
                                        resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                                        msgName: ZaMsg.LBL_zimbraWebClientLoginURL,
                                        txtBoxLabel: ZaMsg.LBL_zimbraWebClientLoginURL
                                      },
                                      { ref: ZaDomain.A_zimbraWebClientLogoutURL,useParentTable: false,
                                        colSpan: 2,
                                        type:_SUPERWIZ_TEXTFIELD_, textFieldWidth: "250px",
                                        resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                                        msgName: ZaMsg.LBL_zimbraWebClientLogoutURL,
                                        txtBoxLabel: ZaMsg.LBL_zimbraWebClientLogoutURL
                                      },
                                      { ref: ZaDomain.A_zimbraWebClientLoginURLAllowedUA,
                                        label:ZaMsg.LBL_zimbraWebClientLoginURLAllowedUA,
                                        type:_SUPER_REPEAT_,
                                        resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                                        repeatInstance:"",
                                        colSizes:["250px", "150px"],
                                        addButtonLabel:ZaMsg.NAD_Add ,
                                        removeButtonLabel: ZaMsg.NAD_Remove,
                                        showAddButton:true,
                                        showRemoveButton:true,
                                        showAddOnNextRow:true,
                                        repeatItems: [
                                            {ref:".", type:_TEXTFIELD_,
                                            width: "150px"}
                                        ]
                                      },
                                      { ref: ZaDomain.A_zimbraWebClientLogoutURLAllowedUA,
                                        label:ZaMsg.LBL_zimbraWebClientLogoutURLAllowedUA,
                                        type:_SUPER_REPEAT_,
                                        resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                                        repeatInstance:"",
                                        colSizes:["250px", "150px"],
                                        addButtonLabel:ZaMsg.NAD_Add ,
                                        removeButtonLabel: ZaMsg.NAD_Remove,
                                        showAddButton:true,
                                        showRemoveButton:true,
                                        showAddOnNextRow:true,
                                        repeatItems: [
                                            {ref:".", type:_TEXTFIELD_,
                                            width: "150px"}
                                        ]
                                      },
                                      { ref: ZaDomain.A_zimbraWebClientLoginURLAllowedIP,
                                        label:ZaMsg.LBL_zimbraWebClientLoginURLAllowedIP,
                                        type:_SUPER_REPEAT_,
                                        resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                                        repeatInstance:"",
                                        colSizes:["250px", "150px"],
                                        addButtonLabel:ZaMsg.NAD_Add ,
                                        removeButtonLabel: ZaMsg.NAD_Remove,
                                        showAddButton:true,
                                        showRemoveButton:true,
                                        showAddOnNextRow:true,
                                        repeatItems: [
                                           {ref:".", type:_TEXTFIELD_,
                                            width: "150px"}
                                        ]
                                      },
                                      { ref: ZaDomain.A_zimbraWebClientLogoutURLAllowedIP,
                                        label:ZaMsg.LBL_zimbraWebClientLogoutURLAllowedIP,
                                        type:_SUPER_REPEAT_,
                                        resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                                        repeatInstance:"",
                                        colSizes:["250px", "150px"],
                                        addButtonLabel:ZaMsg.NAD_Add ,
                                        removeButtonLabel: ZaMsg.NAD_Remove,
                                        showAddButton:true,
                                        showRemoveButton:true,
                                        showAddOnNextRow:true,
                                        repeatItems: [
                                           {ref:".", type:_TEXTFIELD_,
                                            width: "150px"}
                                        ]
                                      },
                                      {
                                          ref: ZaDomain.A_zimbraForceClearCookies,
                                          useParentTable: false,
                                          colSpan: 2,
                                          type: _CHECKBOX_,
                                          trueValue: "TRUE",
                                          falseValue: "FALSE",
                                          resetToSuperLabel: ZaMsg.NAD_ResetToGlobal,
                                          msgName: ZaMsg.MSG_zimbraForceClearCookies,
                                          label: ZaMsg.LBL_zimbraForceClearCookies,
                                          labelLocation: _LEFT_
                                      }
                                  ]
                            }
					]
				},
				{type:_CASE_, caseKey:ZaNewDomainXWizard.AUTH_MODE_STEP, numCols:2,colSizes:["220px","450px"],					
					items:[
						{type:_OSELECT1_, label:ZaMsg.Domain_AuthMech, choices:this.AuthMechs, ref:ZaDomain.A_AuthMech, onChange:ZaNewDomainXWizard.onAuthMechChange},
						{type:_GROUP_, numCols:2,colSizes:["220px","auto"],colSpan:2,
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ad]],
							visibilityChangeEventSources:[ZaDomain.A_AuthMech],
							items:[
								{ref:ZaDomain.A_AuthADDomainName, type:_TEXTFIELD_, label:ZaMsg.Domain_AuthADDomainName, labelLocation:_LEFT_,
                                    visibilityChecks:[],enableDisableChecks:[]
                                },
								{type:_GROUP_, numCols:6, /*colSpan:2,*/label:"   ",labelLocation:_LEFT_,
									items: [
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"35px"},
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthADServerName, width:"200px"},
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"5px"},									
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthADServerPort,  width:"40px"},	
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthADUseSSL, width:"40px"}									
									]
								},
								{ref:ZaDomain.A_AuthLdapURL, type:_REPEAT_, label:ZaMsg.Domain_AuthLdapURL, repeatInstance:"", showAddButton:true, showRemoveButton:true,  
									addButtonLabel:ZaMsg.Domain_AddURL, 
									showAddOnNextRow:true,	
									removeButtonLabel:ZaMsg.Domain_REPEAT_REMOVE,																						
									items: [
										{ref:".", type:_LDAPURL_, label:null, labelLocation:_NONE_,ldapSSLPort:"3269",ldapPort:"3268",
                                            visibilityChecks:[],enableDisableChecks:[]}
									]
								}									
							]
						},
						{type:_GROUP_, numCols:2,colSizes:["220px","auto"],colSpan:2,
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ldap]],
							visibilityChangeEventSources:[ZaDomain.A_AuthMech],
							items:[
								{type:_GROUP_, numCols:6, /*colSpan:2,*/label:"   ",labelLocation:_LEFT_,
									items: [
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"35px"},
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthLDAPServerName, width:"200px"},
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"5px"},									
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthLDAPServerPort,  width:"40px"},	
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthLDAPUseSSL, width:"40px"}									
									]
								},	
								{ref:ZaDomain.A_AuthLdapURL, type:_REPEAT_, label:ZaMsg.Domain_AuthLdapURL, repeatInstance:"", showAddButton:true, showRemoveButton:true,  
									addButtonLabel:ZaMsg.Domain_AddURL, 
									showAddOnNextRow:true,												
									removeButtonLabel:ZaMsg.Domain_REPEAT_REMOVE,
									items: [
										{ref:".", type:_LDAPURL_, label:null,ldapSSLPort:"636",ldapPort:"389", labelLocation:_NONE_,
                                            visibilityChecks:[],enableDisableChecks:[]
                                        }
									]
								},
								{ref:ZaDomain.A_zimbraAuthLdapStartTlsEnabled, type:_CHECKBOX_, label:ZaMsg.Domain_AuthLdapStartTlsEnabled, trueValue:"TRUE", falseValue:"FALSE"},
								{ref:ZaDomain.A_AuthLdapSearchFilter, type:_TEXTAREA_, width:"30em", height:100, label:ZaMsg.Domain_AuthLdapFilter, labelLocation:_LEFT_, textWrapping:"soft"},
								{ref:ZaDomain.A_AuthLdapSearchBase, type:_TEXTAREA_,width:"30em", height:50, label:ZaMsg.Domain_AuthLdapSearchBase, labelLocation:_LEFT_, textWrapping:"soft"},
								{type:_OUTPUT_, value:ZaMsg.NAD_DomainsAuthStr, colSpan:2}
							]
						}
					]
				},
				{type:_CASE_, numCols:2,colSizes:["220px","auto"],caseKey:ZaNewDomainXWizard.AUTH_CONFIG_STEP_2,
					visibilityChecks:[Case_XFormItem.prototype.isCurrentTab,[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ldap]],
					items: [
						{ref:ZaDomain.A_AuthUseBindPassword, type:_CHECKBOX_, subLabel:"", label:ZaMsg.Domain_AuthUseBindPassword, labelLocation:_LEFT_,
                            trueValue:"TRUE", falseValue:"FALSE",labelCssClass:"xform_label", align:_LEFT_,
                            visibilityChecks:[],enableDisableChecks:[]
                        },
						{ref:ZaDomain.A_AuthLdapSearchBindDn, type:_TEXTFIELD_, label:ZaMsg.Domain_AuthLdapBindDn, labelLocation:_LEFT_, 
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthUseBindPassword,"TRUE"]],
							enableDisableChangeEventSources:[ZaDomain.A_AuthUseBindPassword]

						},
						{ref:ZaDomain.A_AuthLdapSearchBindPassword, type:_SECRET_, label:ZaMsg.Domain_AuthLdapBindPassword, labelLocation:_LEFT_, 
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthUseBindPassword,"TRUE"]],
							enableDisableChangeEventSources:[ZaDomain.A_AuthUseBindPassword]

						},
						{ref:ZaDomain.A_AuthLdapSearchBindPasswordConfirm, type:_SECRET_, label:ZaMsg.Domain_AuthLdapBindPasswordConfirm, labelLocation:_LEFT_, 
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthUseBindPassword,"TRUE"],
                                                 [ZaItem.hasWritePermission, ZaDomain.A_AuthLdapSearchBindPassword]],
							enableDisableChangeEventSources:[ZaDomain.A_AuthUseBindPassword],
                            visibilityChecks:[[ZaItem.hasReadPermission, ZaDomain.A_AuthLdapSearchBindPassword]]
						}							
					]						
				},
				{type:_CASE_,  caseKey:ZaNewDomainXWizard.AUTH_CONFIG_SUM_STEP,
					visibilityChecks:[Case_XFormItem.prototype.isCurrentTab,ZaNewDomainXWizard.isAuthMechNotZimbra],
					items: [
						{type:_DWT_ALERT_,content:ZaMsg.Domain_AuthTestingInProgress,
							ref:null,
							colSpan:"2",
							iconVisible: true,
							align:_CENTER_,				
							style: DwtAlert.INFORMATION,
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A2_isTestingAuth,1]],
							visibilityChangeEventSources:[ZaDomain.A2_isTestingGAL]
						},
						{type:_GROUP_,numCols:2,colSizes:["220px","430px"],
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A2_isTestingAuth,0]],
							visibilityChangeEventSources:[ZaDomain.A2_isTestingAuth],	
							items:[
							{type:_OUTPUT_, value:ZaMsg.Domain_Auth_ConfigSummary, align:_CENTER_, colSpan:"*"}, 
							{type:_SPACER_, height:10},
							{ref:ZaDomain.A_AuthMech, type:_OUTPUT_, label:ZaMsg.Domain_AuthMech, choices:this.AuthMechs, alignment:_LEFT_},
							{type:_GROUP_, useParentTable:true,
								visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ad]],
								visibilityChangeEventSources:[ZaDomain.A_AuthMech],
	 
								items:[
									{ref:ZaDomain.A_AuthADDomainName, type:_OUTPUT_, label:ZaMsg.Domain_AuthADDomainName, labelLocation:_LEFT_},
									{ref:ZaDomain.A_AuthLdapURL, type:_REPEAT_, label:ZaMsg.Domain_AuthLdapURL, labelLocation:_LEFT_,showAddButton:false, showRemoveButton:false,
										items:[
											{type:_OUTPUT_, ref:".", label:null,labelLocation:_NONE_}
										]
									}											
								]
							},
							{type:_GROUP_, useParentTable:true,
								visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ldap]],
								visibilityChangeEventSources:[ZaDomain.A_AuthMech],
	 
								items:[
									{ref:ZaDomain.A_AuthLdapURL, type:_REPEAT_, label:ZaMsg.Domain_AuthLdapURL, labelLocation:_LEFT_,showAddButton:false, showRemoveButton:false,
										items:[
											{type:_OUTPUT_, ref:".", label:null,labelLocation:_NONE_}
										]
									},					
									{ref:ZaDomain.A_zimbraAuthLdapStartTlsEnabled, type:_OUTPUT_, label:ZaMsg.Domain_AuthLdapStartTlsEnabled, labelLocation:_LEFT_,choices:ZaModel.BOOLEAN_CHOICES},						
									{ref:ZaDomain.A_AuthLdapSearchFilter, type:_OUTPUT_, label:ZaMsg.Domain_AuthLdapFilter, labelLocation:_LEFT_},
									{ref:ZaDomain.A_AuthLdapSearchBase, type:_OUTPUT_, label:ZaMsg.Domain_AuthLdapSearchBase, labelLocation:_LEFT_},
									{ref:ZaDomain.A_AuthUseBindPassword, type:_OUTPUT_, label:ZaMsg.Domain_AuthUseBindPassword, labelLocation:_LEFT_,choices:ZaModel.BOOLEAN_CHOICES},											
									{ref:ZaDomain.A_AuthLdapSearchBindDn, type:_TEXTFIELD_, label:ZaMsg.Domain_AuthLdapBindDn, labelLocation:_LEFT_, 
										visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthUseBindPassword,"TRUE"]],
										visibilityChangeEventSources:[ZaDomain.A_AuthUseBindPassword]									
									}											
								]
							},
							{type:_SPACER_, height:10},
							{type:_OUTPUT_,value:ZaMsg.Domain_AuthProvideLoginPwd, align:_CENTER_, colSpan:"*"},
							{type:_TEXTFIELD_, label:ZaMsg.LBL_Domain_AuthTestUserName, ref:ZaDomain.A_AuthTestUserName, alignment:_LEFT_,
                                visibilityChecks:[],enableDisableChecks:[]
                            },
							{type:_SECRET_, label:ZaMsg.LBL_Domain_AuthTestPassword, ref:ZaDomain.A_AuthTestPassword, alignment:_LEFT_,
                                visibilityChecks:[],enableDisableChecks:[]
                            },
							{type:_CELLSPACER_},
							{type:_DWT_BUTTON_, 
								onActivate:"ZaNewDomainXWizard.testAuthSettings.call(this)", 
								label:ZaMsg.Domain_GALTestSettings, 
								enableDisableChecks:[],
								visibilityChecks:[],					
								valign:_BOTTOM_,width:"100px"
							}
						]}
					]
				},

				{type:_CASE_, numCols:1, caseKey: ZaNewDomainXWizard.AUTH_TEST_RESULT_STEP,colSizes:["380px","290px"],
					visibilityChecks:[Case_XFormItem.prototype.isCurrentTab,ZaNewDomainXWizard.isAuthMechNotZimbra],
					visibilityChangeEventSources:[ZaModel.currentStep],
					items: [
						{type:_DWT_ALERT_,
							colSpan:"2",
							iconVisible: false,
							align:_CENTER_,				
							style: DwtAlert.INFORMATION,
        						visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthTestResultCode,ZaDomain.Check_OK]],
							visibilityChangeEventSources:[ZaDomain.A_AuthTestResultCode],
							content:ZaMsg.Domain_AuthTestSuccessful, alignment:_CENTER_
						},
				    	{type:_DWT_ALERT_,content:ZaMsg.Domain_AuthTestSkipped,
							ref:null,
							colSpan:"2",
							iconVisible: true,
							align:_CENTER_,				
							style: DwtAlert.WARNING,
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthTestResultCode,ZaDomain.Check_SKIPPED]],
							visibilityChangeEventSources:[ZaDomain.A_AuthTestResultCode]									
				    	},
						{type:_GROUP_, 
							visibilityChangeEventSources:[ZaDomain.A_AuthTestResultCode],
							visibilityChecks:[[XForm.checkInstanceValueNot,ZaDomain.A_AuthTestResultCode,ZaDomain.Check_OK],
							                  [XForm.checkInstanceValueNot,ZaDomain.A_AuthTestResultCode,ZaDomain.Check_SKIPPED]
							                 ],
							items: [
								{type:_OUTPUT_, value:ZaMsg.Domain_AuthTestFailed, alignment:_CENTER_, colSpan:2, label:null},
								{type:_OUTPUT_, ref:ZaDomain.A_AuthTestResultCode, label:ZaMsg.Domain_AuthTestResultCode, choices:this.TestResultChoices, alignment:_LEFT_},
								{type:_OUTPUT_, ref:ZaDomain.A_AuthComputedBindDn, label:ZaMsg.Domain_AuthComputedBindDn, alignment:_LEFT_, 
									visibilityChangeEventSources:[ZaDomain.A_AuthMech],
									visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ad]]

								},
								{type:_TEXTAREA_, ref:ZaDomain.A_AuthTestMessage, label:ZaMsg.Domain_AuthTestMessage, height:150, alignment:_LEFT_, width:"320px"}
							]
						}
					
					]
				},
				{type:_CASE_, caseKey:ZaNewDomainXWizard.VHOST_STEP,
					items:[
						{type:_DWT_ALERT_,content:null,ref:ZaDomain.A_domainName,
							getDisplayValue: function (itemVal) {
								return AjxMessageFormat.format(ZaMsg.Domain_VH_Explanation, AjxStringUtil.htmlEncode(itemVal));
							},
							iconVisible: false,
							align:_CENTER_,				
							style: DwtAlert.INFORMATION
						},
						{ref:ZaDomain.A_zimbraVirtualHostname, type:_REPEAT_, label:null, repeatInstance:"", showAddButton:true, showRemoveButton:true, 
								addButtonLabel:ZaMsg.NAD_AddVirtualHost, 
								showAddOnNextRow:true,
								removeButtonLabel:ZaMsg.NAD_RemoveVirtualHost,
                                cssStyle:"text-align:center",
                                tableCssStyle:"margin-left:auto;margin-right:auto",
								items: [
									{ref:".", type:_TEXTFIELD_, label:null,width:220, visibilityChecks:[],enableDisableChecks:[]}
								]
						}
					]
				},
				{type:_CASE_, caseKey:ZaNewDomainXWizard.FEATURE_STEP,
					items: [
						{ type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_zimbraCalendarFeature,
                                  		  items :[
                                                  {ref:ZaDomain.A_zimbraFeatureCalendarReminderDeviceEmailEnabled,
                                                      type:_CHECKBOX_,
                                                      msgName:ZaMsg.LBL_zimbraFeatureCalendarReminderDeviceEmailEnabled,
                                                      label:ZaMsg.LBL_zimbraFeatureCalendarReminderDeviceEmailEnabled,
                                                      trueValue:"TRUE", falseValue:"FALSE"
                                                  }
                                         	 ]
                                		}

					]
				},
				{type:_CASE_, caseKey:ZaNewDomainXWizard.ADVANCED_STEP, numCols:1, 
					items: [
						{ type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.Domain_BC_ShareConf,
                            items :[
                                    { ref: ZaDomain.A_zimbraBasicAuthRealm,
                                          type: _SUPERWIZ_TEXTFIELD_, width: 250 ,
                                          resetToSuperLabel:ZaMsg.NAD_ResetToGlobal,
                                          txtBoxLabel: ZaMsg.Domain_zimbraBasicAuthRealm
                                    }
                                 ]
                            },
                        { type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.Domain_AD_EmailValidate,
							colSizes:["200px","*"], 
                            items :[
                                    {ref:ZaDomain.A_zimbraMailAddressValidationRegex, type:_REPEAT_,
                                        nowrap:false,labelWrap:true,
                                        label:ZaMsg.LBL_EmailValidate, repeatInstance:"", labelWrap:true,
                                        showAddButton:true, showRemoveButton:true,
                                        addButtonLabel:ZaMsg.NAD_AddRegex,
                                        showAddOnNextRow:true,
                                        removeButtonLabel:ZaMsg.NAD_RemoveRegex,
                                        items: [
                                            {ref:".", type:_TEXTFIELD_, label:null,width:250}
                                        ]
                                    }
						   ]
                        },
                        {type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.Domain_QUOTA_Configuration,
                            colSizes:["200px","*"],
                            items:[
                                {ref:ZaDomain.A_zimbraMailDomainQuota, type:_TEXTFIELD_,
                                    label:ZaMsg.LBL_DomainQuota
                                },
                                {ref:ZaDomain.A_zimbraDomainAggregateQuota, type:_TEXTFIELD_,
                                    label:ZaMsg.LBL_DomainAggregateQuota
                                },
                                {ref:ZaDomain.A_zimbraDomainAggregateQuotaWarnPercent, type:_TEXTFIELD_,
                                    label:ZaMsg.LBL_DomainAggregateQuotaWarnPercent
                                },
                                {ref:ZaDomain.A_zimbraDomainAggregateQuotaWarnEmailRecipient, type:_TEXTFIELD_,
                                    label:ZaMsg.LBL_DomainAggregateQuotaWarnEmailRecipient
                                },
                                {ref:ZaDomain.A_zimbraDomainAggregateQuotaPolicy, type:_OSELECT1_,
                                   label:ZaMsg.LBL_DomainAggregateQuotaPolicy, labelLocation:_LEFT_
                                }
                            ]
                        }
									
					]
				},
				{type:_CASE_, caseKey:ZaNewDomainXWizard.CONFIG_COMPLETE_STEP,
					items: [
						{type:_OUTPUT_, value:ZaMsg.Domain_Config_Complete,cssStyle:"text-align:center"}
					]
				}										
			]	
		}
	];
}
ZaXDialog.XFormModifiers["ZaNewDomainXWizard"].push(ZaNewDomainXWizard.myXFormModifier);
}
if (AjxPackage.define("zimbraAdmin.domains.view.ZaDomainAliasWizard")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
* @class ZaDomainAliasWizard
* @contructor ZaDomainAliasWizard
* @author Charles Cao
* @param parent
* param app
**/
ZaDomainAliasWizard = function(parent, w, h, title) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];	
	ZaXDialog.call(this, parent, null, title, w, h);
	this._containedObject = {};
	this.initForm(ZaDomain.myXModel, this.getMyXForm());
    this._helpURL = ZaDomainAliasWizard.helpURL;
}

ZaDomainAliasWizard.prototype = new ZaXDialog;
ZaDomainAliasWizard.prototype.constructor = ZaDomainAliasWizard;
ZaDomainAliasWizard.helpURL = ZaUtil.HELP_URL;


ZaDomainAliasWizard.prototype.getMyXForm = 
function() {	
	var xFormObject = {
		numCols:1,
		items:[
          {type:_GROUP_,isTabGroup:true, items: [ //allows tab key iteration
                {ref:ZaDomain.A_domainName, type: _TEXTFIELD_, label:ZaMsg.LBL_domainAlias,
                    width: 250, visibilityChecks:[],enableDisableChecks:[]},
				{
					 ref : ZaDomain.A2_zimbraDomainAliasTarget,
					 type : _INPUT_,
					 label : ZaMsg.LBL_targetDomain,
					visibilityChecks: [],
					enableDisableChecks: [],
					 getDisplayValue : function (domainName) {
						this.createDataList(ZaApp.getInstance().getDomainNameListByType(ZaDomain.domainTypes.local));
						return domainName;
					 },
					 onChange : ZaDomainAliasWizard.onTargetDomainChanged
				}
            ]
          }
        ]
	};
	return xFormObject;
}

ZaDomainAliasWizard.onTargetDomainChanged = function(value) {
	this.setInstanceValue(value);
};


///////////////////////////////////////////////////////////////////////////////

ZaDomainAliasEditWizard = function(parent, w, h, title) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];	
	ZaXDialog.call(this, parent, null, title, w, h);
	this._containedObject = {};
	this.initForm(ZaDomain.myXModel, this.getMyXForm());
    this._helpURL = ZaDomainAliasEditWizard.helpURL;
}

ZaDomainAliasEditWizard.prototype = new ZaXDialog;
ZaDomainAliasEditWizard.prototype.constructor = ZaDomainAliasEditWizard;
ZaDomainAliasEditWizard.helpURL = ZaUtil.HELP_URL;


ZaDomainAliasEditWizard.prototype.getMyXForm = 
function() {	
	var xFormObject = {
		numCols:1,
		items:[
          {type:_GROUP_,isTabGroup:true, items: [ //allows tab key iteration
                {ref:ZaDomain.A_domainName, type: _OUTPUT_, label:ZaMsg.LBL_domainAlias,
                    width: 250, visibilityChecks:[],enableDisableChecks:[]},
				{
					ref : ZaDomain.A2_zimbraDomainAliasTarget,
					type : _INPUT_,
					label : ZaMsg.LBL_targetDomain,
					visibilityChecks: [],
					enableDisableChecks: [],
					getDisplayValue : function(domainName) {
						this.createDataList(ZaApp.getInstance().getDomainNameListByType(ZaDomain.domainTypes.local));
						return domainName;
					},
					onChange : ZaDomainAliasEditWizard.onTargetDomainChanged
				}
            ]
          }
        ]
	};
	return xFormObject;
}

ZaDomainAliasEditWizard.prototype.editDomainAlias = function (domain, reload) {
    var form  = this._localXForm ;
    var instance = form.getInstance () ;

    if (reload) domain.load ("id", domain.id) ;

    var domainAlias = domain.attrs[ZaDomain.A_domainName] ;
    var domainTarget = domain.attrs[ZaDomain.A_zimbraMailCatchAllForwardingAddress] ;

    if (domainTarget!= null) {
        domainTarget = domainTarget.replace("@", "") ;
    }

    if (!instance) instance = {} ;
    if (!instance.attrs) instance.attrs = {} ;
    instance.attrs [ZaDomain.A_domainName] = domainAlias ;
    instance [ZaDomain.A2_zimbraDomainAliasTarget] = domainTarget ;
    instance.type = ZaItem.DOMAIN;
    instance.attrs[ZaDomain.A_domainType] =  ZaDomain.domainTypes.alias;
    instance.attrs[ZaDomain.A_zimbraMailCatchAllForwardingAddress] =  "@" + domainTarget ;
    this.setObject (domain) ;
    form.setInstance (instance);
    this.registerCallback(DwtDialog.OK_BUTTON,
            ZaDomain.prototype.modifyDomainAlias, domain,
            this._localXForm);
    this.popup ();
}

ZaDomainAliasEditWizard.onTargetDomainChanged = function(value) {
	this.setInstanceValue(value);
};
}
if (AjxPackage.define("zimbraAdmin.domains.view.ZaGALConfigXWizard")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaGALConfigXWizard
* @contructor
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaGALConfigXWizard = function(parent, entry) {
	ZaXWizardDialog.call(this, parent, null, ZaMsg.NCD_GALConfigTitle, "700px", "350px","ZaGALConfigXWizard");

	this.TAB_INDEX = 0;
	
	ZaGALConfigXWizard.GALMODE_STEP = ++this.TAB_INDEX;
	//ZaGALConfigXWizard.GAL_CONFIG_STEP_1 = ++this.TAB_INDEX;
	ZaGALConfigXWizard.GAL_CONFIG_STEP_2 = ++this.TAB_INDEX;
	ZaGALConfigXWizard.GAL_SYNC_CONFIG_STEP_1 = ++this.TAB_INDEX;
	ZaGALConfigXWizard.GAL_SYNC_CONFIG_STEP_2 = ++this.TAB_INDEX;
	ZaGALConfigXWizard.GAL_CONFIG_SUM_STEP = ++this.TAB_INDEX;
	//ZaGALConfigXWizard.GAL_TEST_STEP = ++this.TAB_INDEX;
	ZaGALConfigXWizard.GAL_TEST_RESULT_STEP = ++this.TAB_INDEX;
	ZaGALConfigXWizard.SYNC_CONFIG_SUM_STEP = ++this.TAB_INDEX;
	ZaGALConfigXWizard.SYNC_TEST_RESULT_STEP = ++this.TAB_INDEX;
	ZaGALConfigXWizard.CONFIG_COMPLETE_STEP = ++this.TAB_INDEX;
	
	this.stepChoices = [
		{label:ZaMsg.GALMode, value:ZaGALConfigXWizard.GALMODE_STEP},
		//{label:ZaMsg.GALConfiguration, value:ZaGALConfigXWizard.GAL_CONFIG_STEP_1}, 
		{label:ZaMsg.GALDnConfiguration, value:ZaGALConfigXWizard.GAL_CONFIG_STEP_2},
		{label:ZaMsg.GALSyncConfiguration, value:ZaGALConfigXWizard.GAL_SYNC_CONFIG_STEP_1},
		{label:ZaMsg.GALSyncDnConfiguration, value:ZaGALConfigXWizard.GAL_SYNC_CONFIG_STEP_2},
		{label:ZaMsg.GALConfigSummary, value:ZaGALConfigXWizard.GAL_CONFIG_SUM_STEP},		
//		{label:ZaMsg.TestGalConfig, value:ZaGALConfigXWizard.GAL_TEST_STEP},
		{label:ZaMsg.GalTestResult, value:ZaGALConfigXWizard.GAL_TEST_RESULT_STEP},
		{label:ZaMsg.SyncConfigSummary, value:ZaGALConfigXWizard.SYNC_CONFIG_SUM_STEP},
		{label:ZaMsg.SyncTestResult, value:ZaGALConfigXWizard.SYNC_TEST_RESULT_STEP},
		{label:ZaMsg.DomainConfigComplete, value:ZaGALConfigXWizard.CONFIG_COMPLETE_STEP}	
	];
		
	this.GALModes = [
		{label:ZaMsg.GALMode_internal, value:ZaDomain.GAL_Mode_internal},
		{label:ZaMsg.GALMode_external, value:ZaDomain.GAL_Mode_external}, 
		{label:ZaMsg.GALMode_both, value:ZaDomain.GAL_Mode_both}
  	];
  	this.GALServerTypes = [
		{label:ZaMsg.GALServerType_ldap, value:ZaDomain.GAL_ServerType_ldap},
		{label:ZaMsg.GALServerType_ad, value:ZaDomain.GAL_ServerType_ad} 
	];

		
	this.initForm(ZaDomain.myXModel,this.getMyXForm(entry), null);		
	this._localXForm.addListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, new AjxListener(this, ZaGALConfigXWizard.prototype.handleXFormChange));
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, new AjxListener(this, ZaGALConfigXWizard.prototype.handleXFormChange));	
	this.lastErrorStep=0;
	this._helpURL = ZaUtil.HELP_URL;
	
}

ZaGALConfigXWizard.prototype = new ZaXWizardDialog;
ZaGALConfigXWizard.prototype.constructor = ZaGALConfigXWizard;
ZaGALConfigXWizard.prototype.cacheDialog = false;
ZaXDialog.XFormModifiers["ZaGALConfigXWizard"] = new Array();


ZaGALConfigXWizard.prototype.handleXFormChange = 
function () {
	if(this._localXForm.hasErrors()) {
		if(this.lastErrorStep < this._containedObject[ZaModel.currentStep])
			this.lastErrorStep=this._containedObject[ZaModel.currentStep];
	} else {
		this.lastErrorStep=0;
	}
	this.changeButtonStateForStep(this._containedObject[ZaModel.currentStep]);	
}

ZaGALConfigXWizard.prototype.changeButtonStateForStep = 
function(stepNum) {
	if(this.lastErrorStep == stepNum) {
		this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
		this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
		if(stepNum>1)
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
	} else {
		if (stepNum == ZaGALConfigXWizard.GALMODE_STEP) {
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
		} else if(stepNum == ZaGALConfigXWizard.GAL_CONFIG_SUM_STEP) {
			//change next button to "test"
			//this._button[DwtWizardDialog.NEXT_BUTTON].setText(ZaMsg.Domain_GALTestSettings);
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
		} else if(stepNum == ZaGALConfigXWizard.GAL_TEST_STEP) {
			//this._button[DwtWizardDialog.NEXT_BUTTON].setText(AjxMsg._next);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
		} else if (stepNum == ZaGALConfigXWizard.GAL_TEST_RESULT_STEP) {
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(true);
		} else if (stepNum == ZaGALConfigXWizard.GAL_SYNC_CONFIG_STEP_1 || stepNum == ZaGALConfigXWizard.GAL_SYNC_CONFIG_STEP_2) {
			//this._button[DwtWizardDialog.NEXT_BUTTON].setText(AjxMsg._next);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
		} else if(stepNum == ZaGALConfigXWizard.CONFIG_COMPLETE_STEP) {
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(true);
		} else {
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
		}
	}
}

/**
* @method setObject sets the object contained in the view
* @param entry - ZaDomain object to display
**/
ZaGALConfigXWizard.prototype.setObject =
function(entry) {
	this._containedObject = new ZaDomain();
	//this._containedObject.attrs = new Object();

	/*for (var a in entry.attrs) {
		this._containedObject.attrs[a] = entry.attrs[a];
	}*/
	ZaItem.prototype.copyTo.call(entry,this._containedObject,true,4);
	/*this._containedObject.name = entry.name;
	this._containedObject.type = entry.type ;
	this._containedObject.id = entry.id;
	this._containedObject[ZaDomain.A2_gal_sync_accounts] = entry[ZaDomain.A2_gal_sync_accounts];*/
	this._containedObject[ZaDomain.A2_create_gal_acc] = entry[ZaDomain.A2_create_gal_acc] || "TRUE";
	this._containedObject[ZaDomain.A2_isTestingGAL] = entry[ZaDomain.A2_isTestingGAL] || 0;
	this._containedObject[ZaDomain.A2_isTestingSync] = entry[ZaDomain.A2_isTestingSync] || 0;

    this._containedObject[ZaDomain.A2_gal_sync_accounts_set] = [];
    for(var i in entry[ZaDomain.A2_gal_sync_accounts_set]){
        if (entry[ZaDomain.A2_gal_sync_accounts_set][i]) {
            this._containedObject[ZaDomain.A2_gal_sync_accounts_set][i] = {};
	        this._containedObject[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_gal_sync_account_name]=entry[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_gal_sync_account_name];
	        this._containedObject[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_internal_gal_ds_name]=entry[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_internal_gal_ds_name];
	        this._containedObject[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_external_gal_ds_name]=entry[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_external_gal_ds_name];
	        this._containedObject[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_internal_gal_polling_interval] = entry[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_internal_gal_polling_interval] || "1d";
	        this._containedObject[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_external_gal_polling_interval] = entry[ZaDomain.A2_gal_sync_accounts_set][i][ZaDomain.A2_new_external_gal_polling_interval] || "1d";
        }
    }
	/*if(entry.rights)
		this._containedObject.rights = entry.rights;

	if(entry.setAttrs)
		this._containedObject.setAttrs = entry.setAttrs;
	
	if(entry.getAttrs)
		this._containedObject.getAttrs = entry.getAttrs;
		
	if(entry._defaultValues)
		this._containedObject._defaultValues = entry._defaultValues;
	*/
	
	this.setTitle(ZaMsg.NCD_GALConfigTitle + " (" + entry.name + ")");
	this._containedObject[ZaModel.currentStep] = entry[ZaModel.currentStep] || 1;
    this._containedObject._uuid = entry._extid || entry._uuid;
    this._containedObject._editObject = entry._editObject;
	this._localXForm.setInstance(this._containedObject);	
}


ZaGALConfigXWizard.prototype.finishWizard =
function() {
	try {
        this._containedObject._editObject.createGalAccount = true;
		ZaDomain.modifyGalSettings.call(this._containedObject._editObject,this._containedObject);
		ZaApp.getInstance().getDomainListController()._fireDomainChangeEvent(this._containedObject._editObject);
		this.popdown();
	} catch (ex) {
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaGALConfigXWizard.prototype.finishWizard", null, false);
	}
}

/**
* static change handlers for the form
**/
ZaGALConfigXWizard.onGALServerTypeChange =
function (value, event, form) {
	if(value == "ad") {
		form.getInstance().attrs[ZaDomain.A_GalLdapFilter] = "ad";
		form.getInstance().attrs[ZaDomain.A_zimbraGalAutoCompleteLdapFilter] = "adAutoComplete";
	} else {
		//form.getInstance().attrs[ZaDomain.A_GalLdapFilter] = "";
		form.getInstance().attrs[ZaDomain.A_zimbraGalAutoCompleteLdapFilter] = "(|(cn=%s*)(sn=%s*)(gn=%s*)(mail=%s*))";
	}
	this.setInstanceValue(value);	
}

ZaGALConfigXWizard.onGALSyncServerTypeChange =
function (value, event, form) {
	if(value == "ad") {
		form.getInstance().attrs[ZaDomain.A_zimbraGalSyncLdapFilter] = "ad";
	} 
	this.setInstanceValue(value);	
}

ZaGALConfigXWizard.onGALSyncChange =
function (value, event, form) {
	this.setInstanceValue(value);
	var inst = form.getInstance();
	if(value=='FALSE') {
		if(inst.attrs[ZaDomain.A_zimbraGalSyncLdapFilter] == "ad") {
			//inst.attrs[ZaDomain.A_GALSyncServerType] = "ad";
			form.setInstanceValue("ad", ZaDomain.A_GALSyncServerType);
		} else if(!inst.attrs[ZaDomain.A_GALSyncServerType]) {
			//inst.attrs[ZaDomain.A_GALSyncServerType] = "ldap";
			form.setInstanceValue("ldap", ZaDomain.A_GALSyncServerType);
		}
	} 
//	form.setInstance(inst);
}

ZaGALConfigXWizard.onGalModeChange = 
function (value, event, form) {
	this.setInstanceValue(value);
	if(value != "zimbra") {
		//form.getInstance().attrs[ZaDomain.A_GalLdapFilter] = "";
		if(!form.getInstance().attrs[ZaDomain.A_GALServerType]) {
			this.setInstanceValue("ldap",ZaDomain.A_GALServerType);
			//form.getInstance().attrs[ZaDomain.A_GALServerType] = "ldap";
		}
		if(!form.getInstance().attrs[ZaDomain.A_GalLdapSearchBase]) {
			if(form.getInstance().attrs[ZaDomain.A_domainName]) {
				var parts = form.getInstance().attrs[ZaDomain.A_domainName].split(".");
				var szSearchBase = "";
				var coma = "";
				for(var ix in parts) {
					szSearchBase += coma;
				 	szSearchBase += "dc=";
				 	szSearchBase += parts[ix];
					var coma = ",";
				}
				this.setInstanceValue(szSearchBase,ZaDomain.A_GalLdapSearchBase);
				//form.getInstance().attrs[ZaDomain.A_GalLdapSearchBase] = szSearchBase;
			}
		}
	} 
}

ZaGALConfigXWizard.testSyncSettings = 
function () {
	var instance = this.getInstance();
	this.getModel().setInstanceValue(instance,ZaDomain.A2_isTestingSync,1);
	var callback = new AjxCallback(this, ZaGALConfigXWizard.checkSyncConfigCallBack);
	ZaDomain.testSyncSettings(instance, callback);	
}

ZaGALConfigXWizard.isGALServerType = 
function (val) {
	var currentVal = this.getInstanceValue(ZaDomain.A_GALSyncServerType);
	if (!currentVal) {
		if (val == "ldap")
			return true;
		else
			return false;
	}
	else
		return (currentVal == val);
}

ZaGALConfigXWizard.checkSyncConfigCallBack = function (arg) {
		if(!arg)
			return;
		
		var instance = this.getInstance();
		this.getModel().setInstanceValue(instance,ZaDomain.A2_isTestingSync,0);

		if(arg.isException()) {
			var msg = [arg.getException().detail,arg.getException().msg,arg.getException().trace].join("\n");
			this.getModel().setInstanceValue(instance,ZaDomain.A_GALSyncTestResultCode,arg.getException().code);
			this.getModel().setInstanceValue(instance,ZaDomain.A_GALSyncTestMessage,msg);
		} else {
			var searchResponse = arg.getResponse().Body.CheckGalConfigResponse;
			if(searchResponse) {
				this.getModel().setInstanceValue(instance,ZaDomain.A_GALSyncTestResultCode,searchResponse.code[0]._content);	
				if(searchResponse.code[0]._content != ZaDomain.Check_OK) {
					this.getModel().setInstanceValue(instance,ZaDomain.A_GALSyncTestMessage,searchResponse.message[0]._content);
				}				
			}
		}

		this.getForm().parent.goPage(ZaGALConfigXWizard.SYNC_TEST_RESULT_STEP);
}

ZaGALConfigXWizard.testGALSettings =
function () {
	var instance = this.getInstance();
	this.getModel().setInstanceValue(instance,ZaDomain.A2_isTestingGAL,1);
	var callback = new AjxCallback(this, ZaGALConfigXWizard.checkGALConfigCallBack);
	ZaDomain.testGALSettings(instance, callback, instance[ZaDomain.A_GALSampleQuery]);		
}
/**
* Callback function invoked by Asynchronous CSFE command when "check" call returns
**/
ZaGALConfigXWizard.checkGALConfigCallBack = 
function (arg) {
	if(!arg)
		return;
	
	var instance = this.getInstance();
	this.getModel().setInstanceValue(instance,ZaDomain.A2_isTestingGAL,0);

	if(arg.isException()) {
		var msg = [arg.getException().detail,arg.getException().msg,arg.getException().trace].join("\n");
		this.getModel().setInstanceValue(instance,ZaDomain.A_GALSearchTestResultCode,arg.getException().code);
		this.getModel().setInstanceValue(instance,ZaDomain.A_GALSearchTestMessage,msg);
		this.getModel().setInstanceValue(instance,ZaDomain.A_GALTestSearchResults,null);
	} else {
		var searchResponse = arg.getResponse().Body.CheckGalConfigResponse;
		if(searchResponse) {
			this.getModel().setInstanceValue(instance,ZaDomain.A_GALSearchTestResultCode,searchResponse.code[0]._content); 
			if(searchResponse.code[0]._content != ZaDomain.Check_OK) {
				this.getModel().setInstanceValue(instance,ZaDomain.A_GALSearchTestMessage,searchResponse.message[0]._content);
				this.getModel().setInstanceValue(instance,ZaDomain.A_GALTestSearchResults,null);
			} else {
				var searchResults = new Array();
				if(searchResponse.cn && searchResponse.cn.length) {
					var len = searchResponse.cn.length;
					for (var ix=0;ix<len;ix++) {
						var cnObject = new Object();
						if(searchResponse.cn[ix]._attrs) {
							for (var a in searchResponse.cn[ix]._attrs) {
								cnObject[a] = searchResponse.cn[ix]._attrs[a];
							}
							searchResults.push(cnObject);						
						}
					}
				}
				this.getModel().setInstanceValue(instance,ZaDomain.A_GALTestSearchResults,searchResults);
			}
		}
	}

	this.getForm().parent.goPage(ZaGALConfigXWizard.GAL_TEST_RESULT_STEP);
}

/**
* Overwritten methods that control wizard's flow (open, go next,go previous, finish)
**/
ZaGALConfigXWizard.prototype.popup = 
function (loc) {
	ZaXWizardDialog.prototype.popup.call(this, loc);
	this._button[DwtWizardDialog.NEXT_BUTTON].setText(AjxMsg._next);
	this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
	this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
	this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
}

ZaGALConfigXWizard.filterExistingServer = function(obj) {
    var result = [];
    if (!obj) {
        return result;
    }
    var existing = obj[ZaDomain.A2_gal_sync_accounts];
    if (!existing || !(existing instanceof Array)) {
        return result;
    }

    for (var i = 0; i < existing.length; i++) {
        result.push(existing[i].attrs[ZaDomain.A_mailHost]);
    }

    return result;
}

ZaGALConfigXWizard.prototype.goPage =
function(pageNum) {
	ZaXWizardDialog.prototype.goPage.call(this, pageNum);
	this.changeButtonStateForStep(pageNum);
}

ZaGALConfigXWizard.prototype.goPrev =
function () {
	if(this._containedObject[ZaModel.currentStep] == ZaGALConfigXWizard.GAL_TEST_RESULT_STEP) {
		this.goPage(ZaGALConfigXWizard.GAL_CONFIG_SUM_STEP);
	} else if(this._containedObject[ZaModel.currentStep] == ZaGALConfigXWizard.SYNC_TEST_RESULT_STEP) {
		this.goPage(ZaGALConfigXWizard.SYNC_CONFIG_SUM_STEP);
	} else if (this._containedObject[ZaModel.currentStep] == ZaGALConfigXWizard.GAL_CONFIG_SUM_STEP && this._containedObject.attrs[ZaDomain.A_GALSyncUseGALSearch]=="TRUE") {
		 this.goPage(ZaGALConfigXWizard.GAL_SYNC_CONFIG_STEP_1); 
	} else if (this._containedObject[ZaModel.currentStep] == ZaGALConfigXWizard.CONFIG_COMPLETE_STEP) {
		if(this._containedObject.attrs[ZaDomain.A_zimbraGalMode]==ZaDomain.GAL_Mode_internal) {
			this.goPage(ZaGALConfigXWizard.GALMODE_STEP);
		} else {
			this.goPage(ZaGALConfigXWizard.SYNC_TEST_RESULT_STEP);
		}
	} else {
		this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
		this.goPage(this._containedObject[ZaModel.currentStep]-1);
	}
}

ZaGALConfigXWizard.prototype.goNext = 
function() {
	if(this._containedObject[ZaModel.currentStep] == ZaGALConfigXWizard.GALMODE_STEP && this._containedObject.attrs[ZaDomain.A_zimbraGalMode]==ZaDomain.GAL_Mode_internal) {
		this.goPage(ZaGALConfigXWizard.CONFIG_COMPLETE_STEP);
	} else if (this._containedObject[ZaModel.currentStep] == ZaGALConfigXWizard.SYNC_TEST_RESULT_STEP) {
		this.goPage(ZaGALConfigXWizard.CONFIG_COMPLETE_STEP);
	} else if (this._containedObject[ZaModel.currentStep] == ZaGALConfigXWizard.GAL_TEST_RESULT_STEP) {
		this.goPage(ZaGALConfigXWizard.SYNC_CONFIG_SUM_STEP);
	} else if(this._containedObject[ZaModel.currentStep] == ZaGALConfigXWizard.GALMODE_STEP && this._containedObject.attrs[ZaDomain.A_zimbraGalMode]!=ZaDomain.GAL_Mode_internal) {	
		//check that Filter is provided and at least one server
		if(!this._containedObject.attrs[ZaDomain.A_GalLdapFilter]) {
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_SEARCH_FILTER_REQUIRED);			
			return;
		}
		if(!this._containedObject.attrs[ZaDomain.A_GalLdapURL] || this._containedObject.attrs[ZaDomain.A_GalLdapURL].length < 1) {
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_LDAP_URL_REQUIRED);					
			return;
		}
		this.goPage(ZaGALConfigXWizard.GAL_CONFIG_STEP_2);
	} else if(this._containedObject[ZaModel.currentStep] == ZaGALConfigXWizard.GAL_CONFIG_STEP_2) {
		//clear the password if the checkbox is unchecked
		if(this._containedObject.attrs[ZaDomain.A_UseBindPassword]=="FALSE") {
			this._containedObject.attrs[ZaDomain.A_GalLdapBindPassword] = null;
			this._containedObject.attrs[ZaDomain.A_GalLdapBindPasswordConfirm] = null;
			this._containedObject.attrs[ZaDomain.A_GalLdapBindDn] = null;
		}
		//check that passwords match
		if(this._containedObject.attrs[ZaDomain.A_GalLdapBindPassword]!=this._containedObject.attrs[ZaDomain.A_GalLdapBindPasswordConfirm]) {
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_MISMATCH);
			return false;
		}
		this.goPage(ZaGALConfigXWizard.GAL_SYNC_CONFIG_STEP_1);
	} else if(this._containedObject[ZaModel.currentStep] == ZaGALConfigXWizard.GAL_SYNC_CONFIG_STEP_1) { 
		if(this._containedObject.attrs[ZaDomain.A_GALSyncUseGALSearch]=="FALSE") {
			this.goPage(ZaGALConfigXWizard.GAL_SYNC_CONFIG_STEP_2);
		} else {
			this.goPage(ZaGALConfigXWizard.GAL_CONFIG_SUM_STEP);
		}
	} else if(this._containedObject[ZaModel.currentStep] == ZaGALConfigXWizard.GAL_CONFIG_SUM_STEP) {
		this._localXForm.setInstanceValue(ZaDomain.Check_SKIPPED,ZaDomain.A_GALSearchTestResultCode);
		this.goPage(ZaGALConfigXWizard.GAL_TEST_RESULT_STEP);
	} else if(this._containedObject[ZaModel.currentStep] == ZaGALConfigXWizard.SYNC_CONFIG_SUM_STEP) {
		this._localXForm.setInstanceValue(ZaDomain.Check_SKIPPED,ZaDomain.A_GALSyncTestResultCode);
		this.goPage(ZaGALConfigXWizard.SYNC_TEST_RESULT_STEP);
	} else {
		this.goPage(this._containedObject[ZaModel.currentStep] + 1);
	}
}

ZaGALConfigXWizard.getGalSyncLdapFilterEnabled = function () {
	var val1 = this.getModel().getInstanceValue(this.getInstance(),ZaDomain.A_GALSyncUseGALSearch);
	var val2 = this.getModel().getInstanceValue(this.getInstance(),ZaDomain.A_GALSyncServerType);
	return (val1 == 'FALSE' && val2=='ldap');	
}

ZaGALConfigXWizard.getGalSyncConfigSeparate = function () {
	var val1 = this.getModel().getInstanceValue(this.getInstance(),ZaDomain.A_GALSyncUseGALSearch);
	return (val1 == 'FALSE');	
}

ZaGALConfigXWizard.checkGALAccountAttribute = ZaDomainXFormView.checkGALAccountAttribute;

ZaGALConfigXWizard.myXFormModifier = function(xFormObject, entry) {
	var resultHeaderList = new Array();
	resultHeaderList[0] = new ZaListHeaderItem("email", ZaMsg.ALV_Name_col, null, "116px", null, "email", true, true);
	resultHeaderList[1] = new ZaListHeaderItem("fullName", ZaMsg.ALV_FullName_col, null, "auto", null, "fullName", true, true);

	var labelVisibility = {};
    labelVisibility[ZaGALConfigXWizard.GAL_CONFIG_STEP_2] = {
        checks:[ZaNewDomainXWizard.isDomainModeNotInternal],
        sources:[ZaDomain.A_zimbraGalMode]
    };
    labelVisibility[ZaGALConfigXWizard.GAL_SYNC_CONFIG_STEP_1] = {
        checks:[ZaNewDomainXWizard.isDomainModeNotInternal],
        sources:[ZaDomain.A_zimbraGalMode]
    };
    labelVisibility[ZaGALConfigXWizard.GAL_SYNC_CONFIG_STEP_2] = {
        checks:[[ZaNewDomainXWizard.isDomainModeNotInternal],
                [XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]
        ],
        sources:[ZaDomain.A_zimbraGalMode, ZaDomain.A_GALSyncUseGALSearch]
    };
    labelVisibility[ZaGALConfigXWizard.GAL_CONFIG_SUM_STEP] = {
        checks:[ZaNewDomainXWizard.isDomainModeNotInternal],
        sources:[ZaDomain.A_zimbraGalMode]
    };
    labelVisibility[ZaGALConfigXWizard.GAL_TEST_RESULT_STEP] = {
        checks:[ZaNewDomainXWizard.isDomainModeNotInternal],
        sources:[ZaDomain.A_zimbraGalMode]
    };
    labelVisibility[ZaGALConfigXWizard.SYNC_CONFIG_SUM_STEP] = {
        checks:[ZaNewDomainXWizard.isDomainModeNotInternal],
        sources:[ZaDomain.A_zimbraGalMode]
    };
    labelVisibility[ZaGALConfigXWizard.SYNC_TEST_RESULT_STEP] = {
        checks:[ZaNewDomainXWizard.isDomainModeNotInternal],
        sources:[ZaDomain.A_zimbraGalMode]
    };

	xFormObject.items = [
        {
            type: _OUTPUT_,
            colSpan: 2,
            valign: _TOP_,
            cssStyle: "white-space: normal",
            ref: ZaModel.currentStep,
            choices: this.stepChoices,
            valueChangeEventSources: [ZaModel.currentStep],
            labelVisibility: labelVisibility
        },
		{type:_SEPARATOR_, align:_CENTER_, valign:_TOP_},
		{type:_SPACER_,  align:_CENTER_, valign:_TOP_},				
		{type: _SWITCH_,width:650, valign:_TOP_, cssStyle: "white-space: normal",
			items: [
				{type:_CASE_, caseKey:ZaGALConfigXWizard.GALMODE_STEP,numCols:2,colSizes:["220px","430px"],
					items: [
						{ref:ZaDomain.A_zimbraGalMode, type:_OSELECT1_, label:ZaMsg.Domain_GalMode, labelLocation:_LEFT_, choices:this.GALModes, onChange:ZaGALConfigXWizard.onGalModeChange},
						{ref:ZaDomain.A_zimbraGalMaxResults, type:_TEXTFIELD_, label:ZaMsg.LBL_zimbraGalMaxResults, msgName:ZaMsg.MSG_zimbraGalMaxResults, labelLocation:_LEFT_},
						{type:_DWT_ALERT_,style: DwtAlert.WARNING,
							content:ZaMsg.WARNING_DOMAIN_DS_NOT_CONFIGRED,
							visibilityChecks:[[XForm.checkInstanceValueEmty,ZaDomain.A_zimbraGalAccountId]],colSpan:"*"
						},
						{ref:ZaDomain.A2_create_gal_acc, type:_CHECKBOX_, label:ZaMsg.Domain_UseGALSyncAccts, 
							labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE",
							labelCssClass:"xform_label", align:_LEFT_,labelWrap:true,
							visibilityChecks:[[XForm.checkInstanceValueEmty,ZaDomain.A2_gal_sync_accounts],[ZaItem.hasReadPermission,ZaDomain.A_zimbraGalAccountId]],
							enableDisableChecks:[[ZaItem.hasRight,ZaDomain.RIGHT_CREATE_ACCOUNT]]							
						},
                        {type:_REPEAT_, ref:ZaDomain.A2_gal_sync_accounts, colSpan: "*",
                            showAddButton:false,
                            showRemoveButton: false,
                            visibilityChecks:[[XForm.checkInstanceValueNotEmty,ZaDomain.A2_gal_sync_accounts],[ZaItem.hasReadPermission,ZaDomain.A_zimbraGalAccountId]],
                            items:[
                                {type:_GROUP_, ref:".", numCols:2, width:"100%", colSizes:["220px","430px"], items:[
                                    {ref:"name", type:_OUTPUT_,label:ZaMsg.Domain_GalSyncAccount,
                                        visibilityChecks:[[XForm.checkInstanceValueNotEmty,ZaDomain.A2_gal_sync_accounts],[ZaItem.hasReadPermission,ZaDomain.A_zimbraGalAccountId]]
                                    },
                                    {ref:(ZaAccount.A2_zimbra_ds + ".name"), label:ZaMsg.Domain_InternalGALDSName, type:_OUTPUT_,
                                        visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                        visibilityChecks:[
                                            [ZaItem.hasReadPermission,ZaDomain.A_zimbraGalAccountId],
                                            ZaNewDomainXWizard.isDomainModeNotExternal,
                                            [ZaGALConfigXWizard.checkGALAccountAttribute,ZaAccount.A2_zimbra_ds, false]
                                        ]
                                    },
                                    {ref:ZaDomain.A2_new_internal_gal_ds_name, label:ZaMsg.Domain_InternalGALDSName, type:_TEXTFIELD_,
                                        visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                        visibilityChecks:[
                                            [ZaItem.hasReadPermission,ZaDomain.A_zimbraGalAccountId],
                                            ZaNewDomainXWizard.isDomainModeNotExternal,
                                            [ZaGALConfigXWizard.checkGALAccountAttribute,ZaAccount.A2_zimbra_ds, true]
                                        ],
                                        enableDisableChangeEventSources:[ZaDomain.A2_create_gal_acc],
                                        enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_create_gal_acc,"TRUE"],[ZaItem.hasRight,ZaDomain.RIGHT_CREATE_ACCOUNT]]
                                    },
                                    {ref:(ZaAccount.A2_zimbra_ds + ".attrs." + ZaDataSource.A_zimbraDataSourcePollingInterval),
                                        type:_LIFETIME_, label:ZaMsg.LBL_zimbraDataSourcePollingInterval_internal, labelLocation:_LEFT_,
                                        msgName:ZaMsg.MSG_zimbraDataSourcePollingInterval_internal,
                                        visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                        visibilityChecks:[
                                            [ZaItem.hasReadPermission,ZaDomain.A_zimbraGalAccountId],
                                            ZaNewDomainXWizard.isDomainModeNotExternal,
                                            [ZaGALConfigXWizard.checkGALAccountAttribute,ZaAccount.A2_zimbra_ds, false]
                                        ]
                                    },
                                    {ref:ZaDomain.A2_new_internal_gal_polling_interval,
                                        type:_LIFETIME_, label:ZaMsg.LBL_zimbraDataSourcePollingInterval_internal, labelLocation:_LEFT_,
                                        msgName:ZaMsg.MSG_zimbraDataSourcePollingInterval_internal,
                                        visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                        visibilityChecks:[
                                            [ZaItem.hasReadPermission,ZaDomain.A_zimbraGalAccountId],
                                            ZaNewDomainXWizard.isDomainModeNotExternal,
                                            [ZaGALConfigXWizard.checkGALAccountAttribute,ZaAccount.A2_zimbra_ds, true]
                                        ],
                                        enableDisableChangeEventSources:[ZaDomain.A2_create_gal_acc],
                                        enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_create_gal_acc,"TRUE"]]
                                    },
                                    {ref:(ZaAccount.A2_ldap_ds + ".name"), label:ZaMsg.Domain_ExternalGALDSName, type:_OUTPUT_,
                                        visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                        visibilityChecks:[
                                            [ZaItem.hasReadPermission,ZaDomain.A_zimbraGalAccountId],
                                            ZaNewDomainXWizard.isDomainModeNotInternal,
                                            [ZaGALConfigXWizard.checkGALAccountAttribute,ZaAccount.A2_ldap_ds, false]
                                        ]
                                    },
                                    {ref:ZaDomain.A2_new_external_gal_ds_name, label:ZaMsg.Domain_ExternalGALDSName, type:_TEXTFIELD_,
                                        visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                        visibilityChecks:[
                                            [ZaItem.hasReadPermission,ZaDomain.A_zimbraGalAccountId],
                                            ZaNewDomainXWizard.isDomainModeNotInternal,
                                            [ZaGALConfigXWizard.checkGALAccountAttribute,ZaAccount.A2_ldap_ds, true]
                                        ],
                                        enableDisableChangeEventSources:[ZaDomain.A2_create_gal_acc],
                                        enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_create_gal_acc,"TRUE"]]
                                    },
                                    {ref:(ZaAccount.A2_ldap_ds + ".attrs." + ZaDataSource.A_zimbraDataSourcePollingInterval),
                                        type:_LIFETIME_, label:ZaMsg.LBL_zimbraDataSourcePollingInterval_external, labelLocation:_LEFT_,
                                        msgName:ZaMsg.MSG_zimbraDataSourcePollingInterval_external,
                                        enableDisableChecks:[],
                                        visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                        visibilityChecks:[
                                            [ZaItem.hasReadPermission,ZaDomain.A_zimbraGalAccountId],
                                            ZaNewDomainXWizard.isDomainModeNotInternal,
                                            [ZaGALConfigXWizard.checkGALAccountAttribute,ZaAccount.A2_ldap_ds, false]
                                        ]
                                    },
                                    {ref:ZaDomain.A2_new_external_gal_polling_interval,
                                        type:_LIFETIME_, label:ZaMsg.LBL_zimbraDataSourcePollingInterval_external, labelLocation:_LEFT_,
                                        msgName:ZaMsg.MSG_zimbraDataSourcePollingInterval_external,
                                        enableDisableChecks:[],
                                        visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                        visibilityChecks:[
                                            [ZaItem.hasReadPermission,ZaDomain.A_zimbraGalAccountId],
                                            ZaNewDomainXWizard.isDomainModeNotInternal,
                                            [ZaGALConfigXWizard.checkGALAccountAttribute,ZaAccount.A2_ldap_ds, true]
                                        ],
                                        enableDisableChangeEventSources:[ZaDomain.A2_create_gal_acc],
                                        enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_create_gal_acc,"TRUE"]]
                                    }
                                ]}
                        ]},
                        {ref:ZaDomain.A2_gal_sync_accounts_set, id:ZaDomain.A2_gal_sync_accounts_set + "_config_wizard", type:_COLLAB_SELECT_, label:null, repeatInstance:"", showAddButton:true, showRemoveButton:true,
                            filterMethod: ZaGALConfigXWizard.filterExistingServer,
                            addButtonLabel:ZaMsg.Domain_GAL_Add,
							addButtonWidth: 220,
                            number:0,
							removeButtonLabel:ZaMsg.Domain_GAL_Remove,
							visibilityChangeEventSources:[ZaDomain.A2_create_gal_acc],
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A2_create_gal_acc,"TRUE"],
                                [ZaItem.hasReadPermission,ZaDomain.A_zimbraGalAccountId],
                                [function() {
                                    var existingAcc = this.getParentItem().getInstanceValue(ZaDomain.A2_gal_sync_accounts);
                                    if (existingAcc && existingAcc instanceof Array && existingAcc.length >= this.__availNum) {
                                         return false;
                                    }
                                    //A workaround to modify remove button visibility checking
                                    //Keep at least 1 item. IZaf have only 1 item, hide the remove button
                                    if (this.removeButton) {
                                        this.removeButton.visibilityChecks = [];
                                        this.removeButton.visibilityChecks.push(function() {
                                            var existing = this.getParentItem().getInstanceValue(ZaDomain.A2_gal_sync_accounts);
                                            var total = 0;
                                            if (existing && existing instanceof Array) {
                                                total = existing.length;
                                            }
                                            return (this.getParentItem().getInstanceCount() + total)> 1;
                                        });
                                    }

                                    if (this.getInstanceValue().length == 0) {
                                        if (!existingAcc || (existingAcc && existingAcc instanceof Array && existingAcc.length == 0)) {
                                            this.addRowButtonClicked(this.getParentItem().instanceNum);
                                        }
                                    }
                                    return true;
                                }]],
							enableDisableChangeEventSources:[ZaDomain.A2_create_gal_acc],
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_create_gal_acc,"TRUE"],[ZaItem.hasRight,ZaDomain.RIGHT_CREATE_ACCOUNT]],
							showAddOnNextRow: true,
                            showRemoveNextRow: false,
                            colSpan: 2,
                            items:[
                                {type:_GROUP_, ref:".", numCols:1, width:"100%",
                                    visibilityChangeEventSources:[ZaDomain.A2_gal_sync_accounts_set],
                                    visibilityChecks:[function() {
                                        return (this.instanceNum==0 || (this.instanceNum < this.getNumberToShow()) || (this.instanceNum < this.getInstanceCount()));
                                    }],
                                    items:[
                                    {type:_SPACER_, colSpan:"*"},
                                    {type:_GROUP_, ref:".", numCols:2, colSizes:["220x", "100%"], //use 100% to full fill the blank on the right hand side in IE
                                        width:"100%",
                                        visibilityChangeEventSources:[ZaDomain.A2_gal_sync_accounts_set],
                                        visibilityChecks:[function() {
                                            var instanceNum = this.getParentItem().instanceNum;
                                            return ((instanceNum < this.getNumberToShow()) || (instanceNum < this.getInstanceCount()));
                                        }],
                                        items:[
                                        {type:_GROUP_, label:ZaMsg.Domain_GalSyncAccount, numCols:3,colSizes:["130px", "25px","auto"], colSpan:"1", ref: ".",
                                            items:[
                                                {ref:ZaDomain.A2_new_gal_sync_account_name, width:130, label:null, type:_TEXTFIELD_, enableDisableChecks:[], visibilityChecks:[]},
                                                {type:_OUTPUT_, value:"@"},
                                                {type:_OUTPUT_,refPath:ZaDomain.A_domainName,label:null,align:_LEFT_}
                                            ],
                                            required:true
                                        },
                                        {ref:ZaDomain.A_mailHost, type: _OSELECT1_, label:ZaMsg.NAD_MailServer,  choices: ZaApp.getInstance().getServerListChoices(), colSelect:true,
                                            required:true,
                                            width:300
                                        },
                                        {ref:ZaDomain.A2_new_internal_gal_ds_name, label:ZaMsg.Domain_InternalGALDSName, type:_TEXTFIELD_,
                                            visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                            visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotExternal]
                                        },
                                        {ref:ZaDomain.A2_new_internal_gal_polling_interval,
                                            type:_LIFETIME_, label:ZaMsg.LBL_zimbraDataSourcePollingInterval_internal, labelLocation:_LEFT_,
                                            msgName:ZaMsg.MSG_zimbraDataSourcePollingInterval_internal,
                                            visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                            visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotExternal]
                                        },
                                        {ref:ZaDomain.A2_new_external_gal_ds_name, label:ZaMsg.Domain_ExternalGALDSName, type:_TEXTFIELD_,
                                            visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                            visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal]
                                        },
                                        {ref:ZaDomain.A2_new_external_gal_polling_interval,
                                            type:_LIFETIME_, label:ZaMsg.LBL_zimbraDataSourcePollingInterval_external, labelLocation:_LEFT_,
                                            msgName:ZaMsg.MSG_zimbraDataSourcePollingInterval_external,
                                            visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
                                            visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal]
                                        }
                                    ]}
                            ]}
                        ]},
						{type:_GROUP_, colSpan:2,numCols:2,colSizes:["220px","430px"],
							visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode],
							visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal],
							cssStyle:"overflow:auto",
							items: [
								{ref:ZaDomain.A_GALServerType, type:_OSELECT1_, label:ZaMsg.Domain_GALServerType, labelLocation:_LEFT_, 
									visibilityChecks:[],enableDisableChecks:[],
									choices:this.GALServerTypes, onChange:ZaGALConfigXWizard.onGALServerTypeChange
								},
								{type:_GROUP_, numCols:6, colSpan:6,label:"   ",labelLocation:_LEFT_,
									visibilityChecks:[[ZaItem.hasWritePermission,ZaDomain.A_GalLdapURL]],
									items: [
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"35px"},
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_GALServerName, width:"200px"},
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"5px"},									
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_GALServerPort,  width:"45px"},	
										{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_GALUseSSL, width:"65px"}									
									]
								},
								{ref:ZaDomain.A_GalLdapURL, type:_REPEAT_, label:ZaMsg.LBL_Domain_GalLdapURL, repeatInstance:"", showAddButton:true, showRemoveButton:true,  
									visibilityChecks:[[ZaItem.hasWritePermission,ZaDomain.A_GalLdapURL]],
									addButtonLabel:ZaMsg.Domain_AddURL, 
									removeButtonLabel:ZaMsg.Domain_REPEAT_REMOVE,
									showAddOnNextRow:true,
									items: [
										{ref:".", type:_LDAPURL_, label:null,ldapSSLPort:"3269",ldapPort:"3268",  labelLocation:_NONE_,
										visibilityChecks:[],enableDisableChecks:[]}
									]
								},
								{ref:ZaDomain.A_GalLdapFilter, type:_TEXTAREA_, width:380, height:40, label:ZaMsg.Domain_GalLdapFilter, labelLocation:_LEFT_, 
									enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALServerType,ZaDomain.GAL_ServerType_ldap]],
									bmolsnr:true,
									enableDisableChangeEventSources:[ZaDomain.A_GALServerType]
									
								},
								{ref:ZaDomain.A_zimbraGalAutoCompleteLdapFilter, type:_TEXTAREA_, width:380, height:40, label:ZaMsg.Domain_zimbraGalAutoCompleteLdapFilter, labelLocation:_LEFT_, 
									enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALServerType,ZaDomain.GAL_ServerType_ldap]],
									enableDisableChangeEventSources:[ZaDomain.A_GALServerType]
									
								},						
								{ref:ZaDomain.A_GalLdapSearchBase, type:_TEXTAREA_, width:380, height:40, label:ZaMsg.Domain_GalLdapSearchBase, labelLocation:_LEFT_,bmolsnr:true}
							]
						}
					]
				},
				{type:_CASE_, numCols:2,colSizes:["300px","*"],
					caseKey:ZaGALConfigXWizard.GAL_CONFIG_STEP_2,
					visibilityChangeEventSources:[ZaModel.currentStep],
					visibilityChecks:[Case_XFormItem.prototype.isCurrentTab,ZaNewDomainXWizard.isDomainModeNotInternal],					
					items: [
						{ref:ZaDomain.A_UseBindPassword, type:_CHECKBOX_, label:ZaMsg.Domain_UseBindPassword, labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE",labelCssClass:"xform_label", align:_LEFT_,
							enableDisableChecks:[],visibilityChecks:[]
						},
						{ref:ZaDomain.A_GalLdapBindDn, type:_INPUT_, label:ZaMsg.Domain_GalLdapBindDn, labelLocation:_LEFT_, 
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_UseBindPassword,"TRUE"]],
							enableDisableChangeEventSources:[ZaDomain.A_UseBindPassword]							
						},
						{ref:ZaDomain.A_GalLdapBindPassword, type:_SECRET_, label:ZaMsg.Domain_GalLdapBindPassword, labelLocation:_LEFT_, 
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_UseBindPassword,"TRUE"]],
							enableDisableChangeEventSources:[ZaDomain.A_UseBindPassword]							
						},
						{ref:ZaDomain.A_GalLdapBindPasswordConfirm, type:_SECRET_, label:ZaMsg.Domain_GalLdapBindPasswordConfirm, labelLocation:_LEFT_, 
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_UseBindPassword,"TRUE"]],
							enableDisableChangeEventSources:[ZaDomain.A_UseBindPassword],visibilityChecks:[]							
						}							
					]			
				},				
				{type:_CASE_, numCols:2,colSizes:["220px","430px"],
					caseKey:ZaGALConfigXWizard.GAL_SYNC_CONFIG_STEP_1,
					items: [
						{ref:ZaDomain.A_GALSyncUseGALSearch, type:_CHECKBOX_, label:ZaMsg.Domain_GALSyncUseGALSearch, 
							labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE",
							labelCssClass:"xform_label", align:_LEFT_,labelWrap:true,
							onChange:ZaGALConfigXWizard.onGALSyncChange,
							enableDisableChecks:[],visibilityChecks:[]
						},
						{ref:ZaDomain.A_GALSyncServerType, type:_OSELECT1_, label:ZaMsg.Domain_GALServerType, labelLocation:_LEFT_, 
							choices:this.GALServerTypes, onChange:ZaGALConfigXWizard.onGALSyncServerTypeChange,
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
							enableDisableChangeEventSources:[ZaDomain.A_GALSyncUseGALSearch],
							visibilityChecks:[]
						},
						{type:_GROUP_, numCols:6, colSpan:6,label:"   ",labelLocation:_LEFT_,
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
							enableDisableChangeEventSources:[ZaDomain.A_GALSyncUseGALSearch],							
							items: [
								{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"35px"},
								{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_GALServerName, width:"200px"},
								{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"5px"},									
								{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_GALServerPort,  width:"45px"},	
								{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_GALUseSSL, width:"65px"}									
							]
						},
						{ref:ZaDomain.A_zimbraGalSyncLdapURL, type:_REPEAT_, label:ZaMsg.LBL_Domain_GalLdapURL, repeatInstance:"", showAddButton:true, showRemoveButton:true,
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
							enableDisableChangeEventSources:[ZaDomain.A_GALSyncUseGALSearch],
							visibilityChecks:[[ZaGALConfigXWizard.isGALServerType, ZaDomain.GAL_ServerType_ad]],
							visibilityChangeEventSources:[ZaDomain.A_GALSyncUseGALSearch,ZaDomain.A_GALSyncServerType],							
							addButtonLabel:ZaMsg.Domain_AddURL, 
							removeButtonLabel:ZaMsg.Domain_REPEAT_REMOVE,								
							showAddOnNextRow:true,							
							items: [
								{ref:".", type:_LDAPURL_, label:null,ldapSSLPort:"3269",ldapPort:"3268",  labelLocation:_NONE_,visibilityChecks:[],enableDisableChecks:[]}
							]
						},
						{ref:ZaDomain.A_zimbraGalSyncLdapURL, type:_REPEAT_, label:ZaMsg.LBL_Domain_GalLdapURL, repeatInstance:"", showAddButton:true, showRemoveButton:true,
							visibilityChecks:[[ZaGALConfigXWizard.isGALServerType, ZaDomain.GAL_ServerType_ldap]],
							visibilityChangeEventSources:[ZaDomain.A_GALSyncUseGALSearch,ZaDomain.A_GALSyncServerType],							
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
							enableDisableChangeEventSources:[ZaDomain.A_GALSyncUseGALSearch,ZaDomain.A_GALSyncServerType],								
							addButtonLabel:ZaMsg.Domain_AddURL, 
							removeButtonLabel:ZaMsg.Domain_REPEAT_REMOVE,								
							showAddOnNextRow:true,							
							items: [
								{ref:".", type:_LDAPURL_, label:null,ldapSSLPort:"636",ldapPort:"389",  labelLocation:_NONE_,visibilityChecks:[],enableDisableChecks:[]}
							]
						},
						{ref:ZaDomain.A_zimbraGalSyncLdapFilter, type:_TEXTAREA_, width:380, height:40, label:ZaMsg.Domain_GalLdapFilter, labelLocation:_LEFT_, textWrapping:"soft", 
							enableDisableChecks:[ZaGALConfigXWizard.getGalSyncLdapFilterEnabled],
							enableDisableChangeEventSources:[ZaDomain.A_GALSyncUseGALSearch, ZaDomain.A_GALSyncServerType]
						},
						{ref:ZaDomain.A_zimbraGalSyncLdapSearchBase, type:_TEXTAREA_, width:380, height:40, label:ZaMsg.Domain_GalLdapSearchBase, labelLocation:_LEFT_, textWrapping:"soft", 
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
							enableDisableChangeEventSources:[ZaDomain.A_GALSyncUseGALSearch]								
						}						
					]
				},
				{type:_CASE_, numCols:2,colSizes:["220px","430px"],
					caseKey:ZaGALConfigXWizard.GAL_SYNC_CONFIG_STEP_2,
					visibilityChangeEventSources:[ZaModel.currentStep],
					visibilityChecks:[Case_XFormItem.prototype.isCurrentTab,ZaNewDomainXWizard.isDomainModeNotInternal,[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
					items: [
						{ref:ZaDomain.A_SyncUseBindPassword, type:_CHECKBOX_, label:ZaMsg.Domain_UseBindPassword, labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE",labelCssClass:"xform_label", align:_LEFT_,
							enableDisableChecks:[],visibilityChecks:[]	
						},
						{ref:ZaDomain.A_zimbraGalSyncLdapBindDn, type:_INPUT_, label:ZaMsg.Domain_GalLdapBindDn, labelLocation:_LEFT_, 
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_SyncUseBindPassword,"TRUE"]],
							enableDisableChangeEventSources:[ZaDomain.A_SyncUseBindPassword]							
						},
						{ref:ZaDomain.A_zimbraGalSyncLdapBindPassword, type:_SECRET_, label:ZaMsg.Domain_GalLdapBindPassword, labelLocation:_LEFT_, 
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_SyncUseBindPassword,"TRUE"]],
							enableDisableChangeEventSources:[ZaDomain.A_SyncUseBindPassword]							
						},
						{ref:ZaDomain.A_GalSyncLdapBindPasswordConfirm, type:_SECRET_, label:ZaMsg.Domain_GalLdapBindPasswordConfirm, labelLocation:_LEFT_, 
							enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_SyncUseBindPassword,"TRUE"]],
							enableDisableChangeEventSources:[ZaDomain.A_SyncUseBindPassword],visibilityChecks:[]							
						}							
					]			
				},				
				{type:_CASE_, caseKey:ZaGALConfigXWizard.GAL_CONFIG_SUM_STEP,numCols:2,colSizes:["220px","430px"],
					items: [
						//search
						{type:_GROUP_,
							visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal,[XForm.checkInstanceValue,ZaDomain.A2_isTestingGAL,0]],
							visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode,ZaDomain.A2_isTestingGAL],
							useParentTable:false,
							numCols:2,colSpan:2,
							items: [
								{ref:ZaDomain.A_zimbraGalMode, type:_OUTPUT_, label:ZaMsg.Domain_GalMode, choices:this.GALModes,
									visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A2_isTestingGAL,0]],
									visibilityChangeEventSources:[ZaDomain.A2_isTestingGAL]	
								},
								{ref:ZaDomain.A_zimbraGalMaxResults, type:_OUTPUT_, label:ZaMsg.LBL_zimbraGalMaxResults,
									visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A2_isTestingGAL,0]],
									visibilityChangeEventSources:[ZaDomain.A2_isTestingGAL]
								},							        
								{ref:ZaDomain.A_GALServerType, type:_OUTPUT_, label:ZaMsg.Domain_GALServerType, choices:this.GALServerTypes, labelLocation:_LEFT_, bmolsnr:true},
								{ref:ZaDomain.A_GalLdapURL, type:_REPEAT_, label:ZaMsg.Domain_GalLdapURL+":", labelLocation:_LEFT_,showAddButton:false, bmolsnr:true, showRemoveButton:false,
									items:[
										{type:_OUTPUT_, ref:".", label:null,labelLocation:_NONE_,bmolsnr:true}
									]
								},	
								{ref:ZaDomain.A_GalLdapFilter, type:_OUTPUT_, label:ZaMsg.Domain_GalLdapFilter, labelLocation:_LEFT_,required:true, 
									visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALServerType,ZaDomain.GAL_ServerType_ldap]],
									visibilityChangeEventSources:[ZaDomain.GAL_ServerType_ldap], bmolsnr:true									
									
								},
								{ref:ZaDomain.A_GalLdapSearchBase, type:_OUTPUT_, label:ZaMsg.Domain_GalLdapSearchBase, labelLocation:_LEFT_, bmolsnr:true},
								{ref:ZaDomain.A_UseBindPassword, type:_OUTPUT_, label:ZaMsg.Domain_UseBindPassword, labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE", bmolsnr:true},
								{ref:ZaDomain.A_GalLdapBindDn, type:_OUTPUT_, label:ZaMsg.Domain_GalLdapBindDn, labelLocation:_LEFT_, 
									visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_UseBindPassword,"TRUE"]],
									visibilityChangeEventSources:[ZaDomain.A_UseBindPassword], bmolsnr:true									
								},
								{ref:ZaDomain.A_GALSampleQuery, type:_TEXTFIELD_, label:ZaMsg.Domain_GALSampleSearchName, labelLocation:_LEFT_, labelWrap:true, cssStyle:"width:100px;", bmolsnr:true,
									visibilityChecks:[],enableDisableChecks:[]
								},								
								{type:_CELLSPACER_},
								{type:_DWT_BUTTON_, 
									enableDisableChecks:[[XForm.checkInstanceValueNot,ZaDomain.A_GALSampleQuery," "],
									                     [XForm.checkInstanceValueNotEmty,ZaDomain.A_GALSampleQuery]],
									enableDisableChangeEventSources:[ZaDomain.A_GALSampleQuery],
									onActivate:"ZaGALConfigXWizard.testGALSettings.call(this)", 
									label:ZaMsg.Domain_GALTestSettings, 
									visibilityChecks:[],					
									valign:_BOTTOM_,width:"100px"
								}
							]
						},
						{type:_DWT_ALERT_,content:ZaMsg.Domain_GALTestingInProgress,
							ref:null,
							colSpan:"2",
							iconVisible: true,
							align:_CENTER_,				
							style: DwtAlert.INFORMATION,
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A2_isTestingGAL,1]],
							visibilityChangeEventSources:[ZaDomain.A2_isTestingGAL]
						}						
					]
				},
                {
                    type: _CASE_,
                    caseKey: ZaGALConfigXWizard.GAL_TEST_RESULT_STEP,
                    numCols: 2,
                    colSizes: ["220px", "430px"],
                    items: [
                        {
                            type: _GROUP_,
                            visibilityChecks: [
                                [
                                    XForm.checkInstanceValue,
                                    ZaDomain.A_GALSearchTestResultCode,
                                    ZaDomain.Check_OK
                                ]
                            ],
                            visibilityChangeEventSources: [ZaDomain.A_GALSearchTestResultCode],
                            numCols: 2,
                            colSpan: 2,
                            items: [
                                {
                                    type: _DWT_ALERT_,
                                    content: ZaMsg.Domain_GALSearchTestSuccessful,
                                    ref: null,
                                    colSpan: "2",
                                    iconVisible: true,
                                    style: DwtAlert.SUCCESS
                                },
                                {
                                    type: _OUTPUT_,
                                    value: ZaMsg.Domain_GALSearchResult,
                                    colSpan: 2,
                                    visibilityChecks: [
                                        [
                                            XForm.checkInstanceValueNotEmty,
                                            ZaDomain.A_GALTestSearchResults
                                        ]
                                    ]
                                },
                                {
                                    type: _SPACER_,
                                    align: _CENTER_,
                                    valign: _TOP_,
                                    colSpan: "*"
                                },
                                {
                                    ref: ZaDomain.A_GALTestSearchResults,
                                    type: _DWT_LIST_,
                                    height: "200px",
                                    width: "100%",
                                    colSpan: 2,
                                    cssClass: "DLSource",
                                    forceUpdate: true,
                                    widgetClass: ZaGalObjMiniListView,
                                    headerList: resultHeaderList,
                                    hideHeader: true
                                }
                            ]
                        },
                        {
                            type: _GROUP_,
                            visibilityChecks: [
                                [
                                    XForm.checkInstanceValueNot,
                                    ZaDomain.A_GALSearchTestResultCode,
                                    ZaDomain.Check_OK
                                ],
                                [
                                    XForm.checkInstanceValueNot,
                                    ZaDomain.A_GALSearchTestResultCode,
                                    ZaDomain.Check_SKIPPED
                                ]
                            ],
                            visibilityChangeEventSources: [ZaDomain.A_GALSearchTestResultCode],
                            numCols: 2,
                            colSpan: 2,
                            items: [
                                {
                                    type: _DWT_ALERT_,
                                    content: ZaMsg.Domain_GALSearchTestFailed,
                                    ref: null,
                                    colSpan: "2",
                                    iconVisible: true,
                                    align: _CENTER_,
                                    style: DwtAlert.WARNING
                                },
                                {
                                    type: _OUTPUT_,
                                    ref: ZaDomain.A_GALSearchTestResultCode,
                                    label: ZaMsg.Domain_GALTestResult,
                                    choices: this.TestResultChoices
                                },
                                {
                                    type: _TEXTAREA_,
                                    ref: ZaDomain.A_GALSearchTestMessage,
                                    label: ZaMsg.Domain_GALTestMessage,
                                    height: "200px",
                                    width: "400px",
                                    enableDisableChecks: []
                                }
                            ]
                        },
                        {
                            type: _DWT_ALERT_,
                            content: ZaMsg.Domain_GALSearchTestSkipped,
                            ref: null,
                            colSpan: 2,
                            iconVisible: true,
                            align: _CENTER_,
                            style: DwtAlert.WARNING,
                            visibilityChecks: [
                                [
                                    XForm.checkInstanceValue,
                                    ZaDomain.A_GALSearchTestResultCode,
                                    ZaDomain.Check_SKIPPED
                                ]
                            ],
                            visibilityChangeEventSources: [ZaDomain.A_GALSearchTestResultCode]
                        }
                    ]
                },
                {
					type:_CASE_, caseKey:ZaGALConfigXWizard.SYNC_CONFIG_SUM_STEP,
					items:[
						{type:_DWT_ALERT_,content:ZaMsg.Domain_GALSyncTestingInProgress,
							ref:null,
							colSpan:"2",
							iconVisible: true,
							align:_CENTER_,				
							style: DwtAlert.INFORMATION,
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A2_isTestingSync,1]],
							visibilityChangeEventSources:[ZaDomain.A2_isTestingSync]
						},
						//sync
						{type:_GROUP_, 
							useParentTable:false,
							numCols:2,colSpan:2,
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A2_isTestingSync,0]],
							visibilityChangeEventSources:[ZaDomain.A2_isTestingSync],							
							items: [
								{ref:ZaDomain.A_zimbraGalMode, type:_OUTPUT_, label:ZaMsg.Domain_GalMode, choices:this.GALModes,
									visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A2_isTestingGAL,0]],
									visibilityChangeEventSources:[ZaDomain.A2_isTestingGAL]	
								},							        
								{ref:ZaDomain.A_GALSyncUseGALSearch, type:_OUTPUT_, label:ZaMsg.Domain_GALSyncUseGALSearch, labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE", bmolsnr:true},
								{ref:ZaDomain.A_GALSyncServerType, type:_OUTPUT_, label:ZaMsg.Domain_GALServerType, choices:this.GALServerTypes, labelLocation:_LEFT_,
									visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal,[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
									visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode,ZaDomain.A_GALSyncUseGALSearch], bmolsnr:true									
								},
								{ref:ZaDomain.A_zimbraGalSyncLdapURL, type:_REPEAT_, label:ZaMsg.Domain_GalLdapURL+":", labelLocation:_LEFT_,showAddButton:false, showRemoveButton:false, bmolsnr:true,
									visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal,[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
									visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode,ZaDomain.A_GALSyncUseGALSearch],									
									items:[
										{type:_OUTPUT_, ref:".", label:null,labelLocation:_NONE_,bmolsnr:true}
									]
								},	
								{ref:ZaDomain.A_zimbraGalSyncLdapFilter, type:_OUTPUT_, label:ZaMsg.Domain_GalLdapFilter, labelLocation:_LEFT_,required:true, 
									visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal,[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"],[XForm.checkInstanceValue,ZaDomain.A_GALServerType,ZaDomain.GAL_ServerType_ldap]],
									visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode,ZaDomain.A_GALSyncUseGALSearch,ZaDomain.A_GALServerType], bmolsnr:true									
								},
								{ref:ZaDomain.A_zimbraGalSyncLdapSearchBase, type:_OUTPUT_, label:ZaMsg.Domain_GalLdapSearchBase, labelLocation:_LEFT_,
									visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal,[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
									visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode,ZaDomain.A_GALSyncUseGALSearch], bmolsnr:true								
								},
								{ref:ZaDomain.A_SyncUseBindPassword, type:_OUTPUT_, label:ZaMsg.Domain_UseBindPassword, labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE",
									visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal,[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
									visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode,ZaDomain.A_GALSyncUseGALSearch], bmolsnr:true									
								},
								{ref:ZaDomain.A_zimbraGalSyncLdapBindDn, type:_OUTPUT_, label:ZaMsg.Domain_GalLdapBindDn, labelLocation:_LEFT_, 
									visibilityChecks:[ZaNewDomainXWizard.isDomainModeNotInternal,[XForm.checkInstanceValue,ZaDomain.A_UseBindPassword,"TRUE"],[XForm.checkInstanceValue,ZaDomain.A_GALSyncUseGALSearch,"FALSE"]],
									visibilityChangeEventSources:[ZaDomain.A_zimbraGalMode,ZaDomain.A_GALSyncUseGALSearch,ZaDomain.A_UseBindPassword], bmolsnr:true									
								},
								{type:_CELLSPACER_},
								{type:_DWT_BUTTON_, 
									onActivate:"ZaGALConfigXWizard.testSyncSettings.call(this)", 
									label:ZaMsg.Domain_GALTestSettings, 
									enableDisableChecks:[],
									visibilityChecks:[],					
									valign:_BOTTOM_,width:"100px"
								}								
							]
						}						
					]
				},
				{
					type:_CASE_,caseKey:ZaGALConfigXWizard.SYNC_TEST_RESULT_STEP,
					items:[
						{type:_GROUP_,
							visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSyncTestResultCode,ZaDomain.Check_OK]],
							visibilityChangeEventSources:[ZaDomain.A_GALSyncTestResultCode],							 
							numCols:2, width:"100%",
							items: [
								{type:_DWT_ALERT_,content:ZaMsg.Domain_GALSyncTestSuccessful,
									ref:null,
									colSpan:"*",
									iconVisible: false,
									align:_CENTER_,				
									style: DwtAlert.INFORMATION
								}
							]
						},
						{type:_GROUP_,
							visibilityChecks:[[XForm.checkInstanceValueNot,ZaDomain.A_GALSyncTestResultCode,ZaDomain.Check_OK]],
							visibilityChangeEventSources:[ZaDomain.A_GALSyncTestResultCode],								
							numCols:2,  width:"100%",
							items: [
								{type:_DWT_ALERT_,content:ZaMsg.Domain_GALSyncTestFailed,
									ref:null,
									colSpan:"2",
									iconVisible: true,
									align:_CENTER_,				
									style: DwtAlert.WARNING,
									visibilityChecks:[[XForm.checkInstanceValueNot,ZaDomain.A_GALSyncTestResultCode,ZaDomain.Check_SKIPPED]],
									visibilityChangeEventSources:[ZaDomain.A_GALSyncTestResultCode]									
								},
								{type:_DWT_ALERT_,content:ZaMsg.Domain_GALSyncTestSkipped,
									ref:null,
									colSpan:"2",
									iconVisible: true,
									align:_CENTER_,				
									style: DwtAlert.WARNING,
									visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_GALSyncTestResultCode,ZaDomain.Check_SKIPPED]],
									visibilityChangeEventSources:[ZaDomain.A_GALSyncTestResultCode]									
								},															
								{type:_OUTPUT_, ref:ZaDomain.A_GALSyncTestResultCode, label:ZaMsg.Domain_GALTestResult, choices:this.TestResultChoices,
									visibilityChecks:[[XForm.checkInstanceValueNot,ZaDomain.A_GALSyncTestResultCode,ZaDomain.Check_SKIPPED]],
									visibilityChangeEventSources:[ZaDomain.A_GALSyncTestResultCode]											
								},
								{type:_TEXTAREA_, ref:ZaDomain.A_GALSyncTestMessage, label:ZaMsg.Domain_GALTestMessage, height:"200px", width:"380px",
									visibilityChecks:[ 
										function () {
											return ((this.getInstanceValue(ZaDomain.A_GALSyncTestResultCode) != ZaDomain.Check_SKIPPED) && (this.getInstanceValue(ZaDomain.A_GALSyncTestResultCode) !=ZaDomain.Check_OK)); 	
										}
									],
									visibilityChangeEventSources:[ZaDomain.A_GALSyncTestResultCode]											
								}
							]
						}					       
					 ]
				},
				{type:_CASE_, caseKey:ZaGALConfigXWizard.CONFIG_COMPLETE_STEP,
					items: [
						{type:_OUTPUT_, value:ZaMsg.Domain_GalConfig_Complete}
					]
				}
			]	
		}	
	];
}

ZaXDialog.XFormModifiers["ZaGALConfigXWizard"].push(ZaGALConfigXWizard.myXFormModifier);
}
if (AjxPackage.define("zimbraAdmin.domains.view.ZaAuthConfigXWizard")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaAuthConfigXWizard
* @contructor
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaAuthConfigXWizard = function(parent) {

	ZaXWizardDialog.call(this, parent, null, ZaMsg.NCD_AuthConfigTitle,"700px", "350px","ZaAuthConfigXWizard", null, ZaId.DLG_AUTH_CONFIG);
	
	this.AuthMechs = [
		{label:ZaMsg.AuthMech_zimbra, value:ZaDomain.AuthMech_zimbra},
		{label:ZaMsg.AuthMech_ldap, value:ZaDomain.AuthMech_ldap},
		{label:ZaMsg.AuthMech_ad, value:ZaDomain.AuthMech_ad}		
	];

	this.TestResultChoices = [
		{label:ZaMsg.AuthTest_check_OK, value:ZaDomain.Check_OK},
		{label:ZaMsg.AuthTest_check_UNKNOWN_HOST, value:ZaDomain.Check_UNKNOWN_HOST},
		{label:ZaMsg.AuthTest_check_CONNECTION_REFUSED, value:ZaDomain.Check_CONNECTION_REFUSED},
		{label:ZaMsg.AuthTest_check_SSL_HANDSHAKE_FAILURE, value:ZaDomain.Check_SSL_HANDSHAKE_FAILURE},				
		{label:ZaMsg.AuthTest_check_COMMUNICATION_FAILURE, value:ZaDomain.Check_COMMUNICATION_FAILURE},
		{label:ZaMsg.AuthTest_check_AUTH_FAILED, value:ZaDomain.Check_AUTH_FAILED},
		{label:ZaMsg.AuthTest_check_AUTH_NOT_SUPPORTED, value:ZaDomain.Check_AUTH_NOT_SUPPORTED},
		{label:ZaMsg.AuthTest_check_NAME_NOT_FOUND, value:ZaDomain.Check_NAME_NOT_FOUND},
		{label:ZaMsg.AuthTest_check_INVALID_SEARCH_FILTER, value:ZaDomain.Check_INVALID_SEARCH_FILTER},
		{label:ZaMsg.AuthTest_check_FAILURE, value:ZaDomain.Check_FAILURE}												
	];
	this.TAB_INDEX = 0;	

	ZaAuthConfigXWizard.AUTH_CONFIG_STEP_1 = ++this.TAB_INDEX;
	ZaAuthConfigXWizard.AUTH_CONFIG_BIND_PWD_STEP = ++this.TAB_INDEX;
	ZaAuthConfigXWizard.AUTH_CONFIG_SUMMARY_STEP = ++this.TAB_INDEX;
	ZaAuthConfigXWizard.AUTH_TEST_STEP = ++this.TAB_INDEX;
	ZaAuthConfigXWizard.AUTH_TEST_RESULT_STEP = ++this.TAB_INDEX;
	ZaAuthConfigXWizard.CONFIG_COMPLETE_STEP = ++this.TAB_INDEX;
	
	this.stepChoices = [
		{label:ZaMsg.AuthSettings, value:ZaAuthConfigXWizard.AUTH_CONFIG_STEP_1},						
		{label:ZaMsg.AuthSettings, value:ZaAuthConfigXWizard.AUTH_CONFIG_BIND_PWD_STEP},								
		{label:ZaMsg.AuthSettings, value:ZaAuthConfigXWizard.AUTH_CONFIG_SUMMARY_STEP},										
		{label:ZaMsg.TestAuthSettings, value:ZaAuthConfigXWizard.AUTH_TEST_STEP},				
		{label:ZaMsg.AuthTestResult, value:ZaAuthConfigXWizard.AUTH_TEST_RESULT_STEP},
		{label:ZaMsg.DomainConfigComplete, value:ZaAuthConfigXWizard.CONFIG_COMPLETE_STEP}
	];
	
	this.initForm(ZaDomain.myXModel,this.getMyXForm());		
	this._localXForm.addListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, new AjxListener(this, ZaAuthConfigXWizard.prototype.handleXFormChange));
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, new AjxListener(this, ZaAuthConfigXWizard.prototype.handleXFormChange));	
	this.lastErrorStep=0;	
	this._helpURL = ZaUtil.HELP_URL;
}

ZaAuthConfigXWizard.prototype = new ZaXWizardDialog;
ZaAuthConfigXWizard.prototype.constructor = ZaAuthConfigXWizard;
ZaXDialog.XFormModifiers["ZaAuthConfigXWizard"] = new Array();


ZaAuthConfigXWizard.prototype.handleXFormChange = 
function () {
	if(this._localXForm.hasErrors()) {
		if(this.lastErrorStep < this._containedObject[ZaModel.currentStep])
			this.lastErrorStep=this._containedObject[ZaModel.currentStep];
	} else {
		this.lastErrorStep=0;
	}
	this.changeButtonStateForStep(this._containedObject[ZaModel.currentStep]);	
}

ZaAuthConfigXWizard.prototype.changeButtonStateForStep = 
function(stepNum) {
	if(this.lastErrorStep == stepNum) {
		this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
		this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
		if(stepNum>1)
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
	} else {
		if(stepNum == ZaAuthConfigXWizard.AUTH_CONFIG_STEP_1) {
			this._button[DwtWizardDialog.NEXT_BUTTON].setText(AjxMsg._next);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);		
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
		} else if (stepNum == ZaAuthConfigXWizard.AUTH_CONFIG_SUMMARY_STEP) {
			this._button[DwtWizardDialog.NEXT_BUTTON].setText(ZaMsg.Domain_AuthTestSettings);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
		} else if(stepNum == ZaAuthConfigXWizard.AUTH_TEST_STEP) {
			this._button[DwtWizardDialog.NEXT_BUTTON].setText(AjxMsg._next);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
		} else if(stepNum == ZaAuthConfigXWizard.CONFIG_COMPLETE_STEP) {
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(true);
		} else {
			this._button[DwtWizardDialog.NEXT_BUTTON].setText(AjxMsg._next);
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
		}
	}
}

ZaAuthConfigXWizard.prototype.testSetings =
function () {
	if(this._containedObject.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_ad) {
		this._containedObject.attrs[ZaDomain.A_AuthLdapUserDn] = "%u@"+this._containedObject.attrs[ZaDomain.A_AuthADDomainName];
	}

	var callback = new AjxCallback(this, this.checkCallBack);
	ZaDomain.testAuthSettings(this._containedObject, callback);	
}

/**
* Callback function invoked by Asynchronous CSFE command when "check" call returns
**/
ZaAuthConfigXWizard.prototype.checkCallBack = 
function (arg) {
	if(!arg)
		return;
	if(arg.isException()) {
		this._containedObject[ZaDomain.A_AuthTestResultCode] = arg.getException().code;
		this._containedObject[ZaDomain.A_AuthTestMessage] = arg.getException().detail+"\n"+arg.getException().msg;
	} else {
		var response = arg.getResponse().Body.CheckAuthConfigResponse;
		this._containedObject[ZaDomain.A_AuthTestResultCode] = response.code[0]._content;
		if(this._containedObject[ZaDomain.A_AuthTestResultCode] != ZaDomain.Check_OK) {
			this._containedObject[ZaDomain.A_AuthTestMessage] = response.message[0]._content;		
			if(response.bindDn != null) {
				this._containedObject[ZaDomain.A_AuthComputedBindDn] = response.bindDn[0]._content;		
			} else {
				this._containedObject[ZaDomain.A_AuthComputedBindDn] = "";
			}
		}
	}		
	this.goPage(ZaAuthConfigXWizard.AUTH_TEST_RESULT_STEP);
}

/**
* Eevent handlers for form items
**/
ZaAuthConfigXWizard.onAuthMechChange = 
function (value, event, form) {
	this.setInstanceValue(value);

	if(value == ZaDomain.AuthMech_ad) {
		if(!form.getInstance().attrs[ZaDomain.A_AuthADDomainName]) {
			this.setInstanceValue(form.getInstance().attrs[ZaDomain.A_domainName], ZaDomain.A_AuthADDomainName);
			//form.getInstance().attrs[ZaDomain.A_AuthADDomainName] = form.getInstance().attrs[ZaDomain.A_domainName];
		}
	}
	//form.parent.changeButtonStateForStep(1);

}

/**
* Overwritten methods that control wizard's flow (open, go next,go previous, finish)
**/
ZaAuthConfigXWizard.prototype.popup = 
function (loc) {
	ZaXWizardDialog.prototype.popup.call(this, loc);
	this.changeButtonStateForStep(ZaAuthConfigXWizard.AUTH_CONFIG_STEP_1);

}

ZaAuthConfigXWizard.prototype.goPage =
function(pageNum) {
	ZaXWizardDialog.prototype.goPage.call(this, pageNum);
	this.changeButtonStateForStep(pageNum);
}

ZaAuthConfigXWizard.prototype.goPrev =
function () {
	if(this._containedObject[ZaModel.currentStep] == ZaAuthConfigXWizard.AUTH_TEST_RESULT_STEP) {
		//skip ZaAuthConfigXWizard.AUTH_TEST_STEP step
		this.goPage(ZaAuthConfigXWizard.AUTH_CONFIG_SUMMARY_STEP);
	} else if (this._containedObject[ZaModel.currentStep] == ZaAuthConfigXWizard.AUTH_CONFIG_SUMMARY_STEP && this._containedObject.attrs[ZaDomain.A_AuthMech]==ZaDomain.AuthMech_ad) {
		this.goPage(ZaAuthConfigXWizard.AUTH_CONFIG_STEP_1);//skip ZaAuthConfigXWizard.AUTH_CONFIG_BIND_PWD_STEP step for Active Directory
	} else if(this._containedObject[ZaModel.currentStep] == ZaAuthConfigXWizard.CONFIG_COMPLETE_STEP && this._containedObject.attrs[ZaDomain.A_AuthMech]==ZaDomain.AuthMech_zimbra) {
		this.goPage(ZaAuthConfigXWizard.AUTH_CONFIG_STEP_1);
	} else {
		this.goPage(this._containedObject[ZaModel.currentStep]-1);
	}
}

ZaAuthConfigXWizard.prototype.goNext = 
function() {
	if(this._containedObject[ZaModel.currentStep] == ZaAuthConfigXWizard.AUTH_CONFIG_SUMMARY_STEP) {
 		this.testSetings();
		this.goPage(ZaAuthConfigXWizard.AUTH_TEST_STEP);
	} else if (this._containedObject[ZaModel.currentStep]==ZaAuthConfigXWizard.AUTH_CONFIG_STEP_1 && this._containedObject.attrs[ZaDomain.A_AuthMech]==ZaDomain.AuthMech_ad) {
		if(!this._containedObject.attrs[ZaDomain.A_AuthLdapURL]) {
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_LDAP_URL_REQUIRED);
			return false;
		}	
		this.goPage(ZaAuthConfigXWizard.AUTH_CONFIG_SUMMARY_STEP);//skip ZaAuthConfigXWizard.AUTH_CONFIG_BIND_PWD_STEP step for Active Directory
	} else if(this._containedObject[ZaModel.currentStep]==ZaAuthConfigXWizard.AUTH_CONFIG_STEP_1 && this._containedObject.attrs[ZaDomain.A_AuthMech]==ZaDomain.AuthMech_ldap) {
		var temp = this._containedObject.attrs[ZaDomain.A_AuthLdapURL].join(" ");
		if(this._containedObject.attrs[ZaDomain.A_zimbraAuthLdapStartTlsEnabled] == "TRUE") {
			//check that we don't have ldaps://
			if(temp.indexOf("ldaps://") > -1) {
				ZaApp.getInstance().getCurrentController().popupWarningDialog(ZaMsg.Domain_WarningStartTLSIgnored)
			}		
		}	
		this.goPage(ZaAuthConfigXWizard.AUTH_CONFIG_BIND_PWD_STEP);	 
	}  else if (this._containedObject[ZaModel.currentStep] == ZaAuthConfigXWizard.AUTH_CONFIG_BIND_PWD_STEP) {
			//clear the password if the checkbox is unchecked
		if(this._containedObject[ZaDomain.A_AuthUseBindPassword]=="FALSE") {
			this._containedObject.attrs[ZaDomain.A_AuthLdapSearchBindDn] = null;
			this._containedObject.attrs[ZaDomain.A_AuthLdapSearchBindPassword] = null;
			this._containedObject[ZaDomain.A_AuthLdapSearchBindPasswordConfirm] = null;
		}
		//check that passwords match
		if(this._containedObject.attrs[ZaDomain.A_AuthLdapSearchBindPassword]!=this._containedObject[ZaDomain.A_AuthLdapSearchBindPasswordConfirm]) {
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_MISMATCH);
			return false;
		}
		this.goPage(ZaAuthConfigXWizard.AUTH_CONFIG_SUMMARY_STEP);
	} else if(this._containedObject[ZaModel.currentStep]==ZaAuthConfigXWizard.AUTH_CONFIG_STEP_1 && this._containedObject.attrs[ZaDomain.A_AuthMech]==ZaDomain.AuthMech_zimbra) {
		this.goPage(ZaAuthConfigXWizard.CONFIG_COMPLETE_STEP);
	} else {
		this.goPage(this._containedObject[ZaModel.currentStep]+1);
	}
}

/**
* @method setObject sets the object contained in the view
* @param entry - ZaDomain object to display
**/
ZaAuthConfigXWizard.prototype.setObject =
function(entry) {
	this._containedObject = new Object();
	this._containedObject.attrs = new Object();

	for (var a in entry.attrs) {
		this._containedObject.attrs[a] = entry.attrs[a];
	}
	
	this._containedObject.name = entry.name;
	this._containedObject.type = entry.type ;
	this._containedObject.id = entry.id;
			
	if(entry.rights)
		this._containedObject.rights = entry.rights;

	if(entry.setAttrs)
		this._containedObject.setAttrs = entry.setAttrs;
	
	if(entry.getAttrs)
		this._containedObject.getAttrs = entry.getAttrs;
		
	if(entry._defaultValues)
		this._containedObject._defaultValues = entry._defaultValues;

	
	this._containedObject[ZaDomain.A_AuthUseBindPassword] = entry[ZaDomain.A_AuthUseBindPassword];
	this.setTitle(ZaMsg.NCD_AuthConfigTitle + " (" + entry.name + ")");

    if (ZaSettings.isDomainAdmin && (entry.attrs[ZaDomain.A_zimbraAdminConsoleLDAPAuthEnabled] == "TRUE")
           && entry.attrs[ZaDomain.A_zimbraAuthLdapStartTlsEnabled] != "TRUE") {
        this._containedObject [ZaDomain.A2_allowClearTextLDAPAuth] = "FALSE" ;
    }

    this._containedObject[ZaModel.currentStep] = ZaAuthConfigXWizard.AUTH_CONFIG_STEP_1;
	this._localXForm.setInstance(this._containedObject);	
}

/**
* XForm definition
**/

ZaAuthConfigXWizard.myXFormModifier = function(xFormObject) {
    xFormObject.items = [
        {
            type: _OUTPUT_,
            colSpan: 2,
            valign: _TOP_,
            cssStyle: "white-space: normal",
            ref: ZaModel.currentStep,
            choices: this.stepChoices,
            valueChangeEventSources: [ZaModel.currentStep]
        },
			{type:_SEPARATOR_, align:_CENTER_, valign:_TOP_},
			{type:_SPACER_,  align:_CENTER_, valign:_TOP_},				
			{type:_SWITCH_,width:650, valign:_TOP_, cssStyle: "white-space: normal",
				items:[
					{type:_CASE_, numCols:2,colSizes:["220px","430px"],	caseKey:ZaAuthConfigXWizard.AUTH_CONFIG_STEP_1,												
						items:[
						    {type:_OSELECT1_, label:ZaMsg.Domain_AuthMech, choices:this.AuthMechs, ref:ZaDomain.A_AuthMech, onChange:ZaAuthConfigXWizard.onAuthMechChange,
						    	enableDisableChecks:[],visibilityChecks:[]
						    },
							{type:_GROUP_, colSpan:2,numCols:2,colSizes:["220px","430px"],
								visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ad]],
								visibilityChangeEventSources:[ZaDomain.A_AuthMech],
								items:[
								    {type:_SPACER_, height:5,colSpan:2},
									{ref:ZaDomain.A_AuthADDomainName, type:_TEXTFIELD_, label:ZaMsg.Domain_AuthADDomainName, labelLocation:_LEFT_,
										visibilityChecks:[],enableDisableChecks:[],bmolsnr:true
									},
									{type:_GROUP_, numCols:6, colSpan:2,label:"   ",labelLocation:_LEFT_,
										items: [
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"35px"},
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthADServerName, width:"200px"},
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"5px"},									
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthADServerPort,  width:"40px"},	
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthADUseSSL, width:"40px"}									
										]
									},											
									{ref:ZaDomain.A_AuthLdapURL, type:_REPEAT_, label:ZaMsg.Domain_AuthADURL, 
										repeatInstance:"", showAddButton:true, showRemoveButton:true,  
										addButtonLabel:ZaMsg.Domain_AddURL, 
										removeButtonLabel:ZaMsg.Domain_REPEAT_REMOVE,												
										showAddOnNextRow:true,											
										items: [
											{ref:".", type:_LDAPURL_, label:null, labelLocation:_NONE_,ldapSSLPort:"3269",ldapPort:"3268",
											visibilityChecks:[],enableDisableChecks:[]}
										]
									}											
								]
							},
							{type:_GROUP_, colSpan:2,numCols:2,colSizes:["220px","430px"],
								visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ldap]],
								visibilityChangeEventSources:[ZaDomain.A_AuthMech],										
								items:[
									{type:_GROUP_, numCols:6, colSpan:2,label:"   ",labelLocation:_LEFT_,
										items: [
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"35px"},
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthLDAPServerName, width:"200px"},
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"5px"},									
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthLDAPServerPort,  width:"40px"},	
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthLDAPUseSSL, width:"40px"}									
										]
									},										
									{ref:ZaDomain.A_AuthLdapURL, type:_REPEAT_, label:ZaMsg.Domain_AuthLdapURL, repeatInstance:"", showAddButton:true, showRemoveButton:true,  
										addButtonLabel:ZaMsg.Domain_AddURL,
										removeButtonLabel:ZaMsg.Domain_REPEAT_REMOVE,												
										showAddOnNextRow:true,											
										items: [
											{ref:".", type:_LDAPURL_, label:null,ldapSSLPort:"636",ldapPort:"389",  labelLocation:_NONE_,
											visibilityChecks:[],enableDisableChecks:[]}
										]
									},	
									{ref:ZaDomain.A_zimbraAuthLdapStartTlsEnabled, type:_CHECKBOX_, label:ZaMsg.Domain_AuthLdapStartTlsEnabled, onChange: ZaAuthConfigXWizard.startTlsEnabledChanged,
										 trueValue:"TRUE", falseValue:"FALSE",labelLocation:_RIGHT_
									},
									{ref:ZaDomain.A_AuthLdapSearchFilter, type:_TEXTAREA_, width:380, height:40, label:ZaMsg.Domain_AuthLdapFilter, labelLocation:_LEFT_, textWrapping:"soft"},
									{ref:ZaDomain.A_AuthLdapSearchBase, type:_TEXTAREA_, width:380, height:40, label:ZaMsg.Domain_AuthLdapSearchBase, labelLocation:_LEFT_, textWrapping:"soft"},
									{type:_OUTPUT_, value:ZaMsg.NAD_DomainsAuthStr, colSpan:2}
								]
							}
						]
					},
					{type:_CASE_, numCols:2, colSizes:["220px","430px"], caseKey:ZaAuthConfigXWizard.AUTH_CONFIG_BIND_PWD_STEP,
						visibilityChecks:[Case_XFormItem.prototype.isCurrentTab,[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ldap]],
						items: [
							{ref:ZaDomain.A_AuthUseBindPassword, type:_CHECKBOX_, label:ZaMsg.Domain_AuthUseBindPassword, labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE",labelCssClass:"xform_label", align:_LEFT_,
							visibilityChecks:[],enableDisableChecks:[]},
							{ref:ZaDomain.A_AuthLdapSearchBindDn, type:_INPUT_, label:ZaMsg.Domain_AuthLdapBindDn, labelLocation:_LEFT_, 
								enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthUseBindPassword,"TRUE"]],
								enableDisableChangeEventSources:[ZaDomain.A_AuthUseBindPassword],
								visibilityChecks:[]
							},
							{ref:ZaDomain.A_AuthLdapSearchBindPassword, type:_SECRET_, label:ZaMsg.Domain_AuthLdapBindPassword, labelLocation:_LEFT_, 
								enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthUseBindPassword,"TRUE"]],
								enableDisableChangeEventSources:[ZaDomain.A_AuthUseBindPassword],
								visibilityChecks:[]
							},
							{ref:ZaDomain.A_AuthLdapSearchBindPasswordConfirm, type:_SECRET_, label:ZaMsg.Domain_AuthLdapBindPasswordConfirm, labelLocation:_LEFT_, 
								enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthUseBindPassword,"TRUE"]],
								enableDisableChangeEventSources:[ZaDomain.A_AuthUseBindPassword],
								visibilityChecks:[]
							}							
						]						
					},
					{type:_CASE_, numCols:2,colSizes:["220px","430px"],	caseKey:ZaAuthConfigXWizard.AUTH_CONFIG_SUMMARY_STEP,
						visibilityChecks:[Case_XFormItem.prototype.isCurrentTab,ZaNewDomainXWizard.isAuthMechNotZimbra],					
						items: [
							{type:_OUTPUT_, value:ZaMsg.Domain_Auth_ConfigSummary, align:_CENTER_, colSpan:"*"}, 
							{type:_SPACER_, height:10},
							{ref:ZaDomain.A_AuthMech, type:_OUTPUT_, label:ZaMsg.Domain_AuthMech, choices:this.AuthMechs, alignment:_LEFT_},
							{type:_GROUP_, useParentTable:true, 
								visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ad]],
								visibilityChangeEventSources:[ZaDomain.A_AuthMech],									 
								items:[
									{ref:ZaDomain.A_AuthADDomainName, type:_OUTPUT_, label:ZaMsg.Domain_AuthADDomainName, labelLocation:_LEFT_},
									{ref:ZaDomain.A_AuthLdapURL, type:_REPEAT_, label:ZaMsg.Domain_AuthLdapURL, labelLocation:_LEFT_,showAddButton:false, showRemoveButton:false, 
										items:[
											{type:_OUTPUT_, ref:".", label:null,labelLocation:_NONE_}
										]
									}											
								]
							},
							{type:_GROUP_, useParentTable:true,
								visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ldap]],
								visibilityChangeEventSources:[ZaDomain.A_AuthMech],										 
								items:[
									{ref:ZaDomain.A_AuthLdapURL, type:_REPEAT_, label:ZaMsg.Domain_AuthLdapURL, labelLocation:_LEFT_,showAddButton:false, showRemoveButton:false,visibilityChecks:[], 
										items:[
											{type:_OUTPUT_, ref:".", label:null,labelLocation:_NONE_,visibilityChecks:[]}
										]
										
									},	
									{ref:ZaDomain.A_zimbraAuthLdapStartTlsEnabled, type:_OUTPUT_, label:ZaMsg.Domain_AuthLdapStartTlsEnabled, labelLocation:_LEFT_,choices:ZaModel.BOOLEAN_CHOICES,visibilityChecks:[]},
									{ref:ZaDomain.A_AuthLdapSearchFilter, type:_OUTPUT_, label:ZaMsg.Domain_AuthLdapFilter, labelLocation:_LEFT_,visibilityChecks:[]},
									{ref:ZaDomain.A_AuthLdapSearchBase, type:_OUTPUT_, label:ZaMsg.Domain_AuthLdapSearchBase, labelLocation:_LEFT_,visibilityChecks:[]},
									{ref:ZaDomain.A_AuthUseBindPassword, type:_OUTPUT_, label:ZaMsg.Domain_AuthUseBindPassword, labelLocation:_LEFT_,choices:ZaModel.BOOLEAN_CHOICES},											
									{ref:ZaDomain.A_AuthLdapSearchBindDn, type:_OUTPUT_, label:ZaMsg.Domain_AuthLdapBindDn, labelLocation:_LEFT_, 
										visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthUseBindPassword,"TRUE"]],
										visibilityChangeEventSources:[ZaDomain.A_AuthUseBindPassword]	
									}											
								]
							},
							{type:_SPACER_, height:10},
							{type:_OUTPUT_,value:ZaMsg.Domain_AuthProvideLoginPwd, align:_CENTER_, colSpan:"*",visibilityChecks:[]},
							{type:_TEXTFIELD_, label:ZaMsg.LBL_Domain_AuthTestUserName, ref:ZaDomain.A_AuthTestUserName, alignment:_LEFT_,visibilityChecks:[],enableDisableChecks:[]},
							{type:_SECRET_, label:ZaMsg.LBL_Domain_AuthTestPassword, ref:ZaDomain.A_AuthTestPassword, alignment:_LEFT_,visibilityChecks:[],enableDisableChecks:[]}
						]
					},
					{type:_CASE_, caseKey:ZaAuthConfigXWizard.AUTH_TEST_STEP,numCols:1,colSizes:["100%"], 
						visibilityChecks:[Case_XFormItem.prototype.isCurrentTab,ZaNewDomainXWizard.isAuthMechNotZimbra],
						visibilityChangeEventSources:[ZaModel.currentStep],					
						items: [
							{type:_DWT_ALERT_,content:ZaMsg.Domain_AuthTestingInProgress,style:DwtAlert.WARNING}
						]
					},
					{type:_CASE_, numCols:2,colSizes:["220px","430px"], caseKey:ZaAuthConfigXWizard.AUTH_TEST_RESULT_STEP,
						visibilityChecks:[Case_XFormItem.prototype.isCurrentTab,ZaNewDomainXWizard.isAuthMechNotZimbra],
						visibilityChangeEventSources:[ZaModel.currentStep],					
						items: [
							{type:_DWT_ALERT_, style:DwtAlert.INFORMATION, content:ZaMsg.Domain_AuthTestSuccessful, alignment:_CENTER_,colSpan:2,
								visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthTestResultCode,ZaDomain.Check_OK]],
								visibilityChangeEventSources:[ZaDomain.A_AuthTestResultCode]	
							},
							{type:_GROUP_, isTabGroup:false, deferred:false, colSpan:2, 
								visibilityChangeEventSources:[ZaDomain.A_AuthTestResultCode],
								visibilityChecks:[
									function () {
										return (this.getInstanceValue(ZaDomain.A_AuthTestResultCode) != ZaDomain.Check_OK);
									}
								],										
								items: [
									{type:_DWT_ALERT_, content:ZaMsg.Domain_AuthTestFailed, alignment:_CENTER_, colSpan:2, style:DwtAlert.CRITICAL},
									{type:_OUTPUT_, ref:ZaDomain.A_AuthTestResultCode, label:ZaMsg.LBL_Domain_AuthTestResultCode, choices:this.TestResultChoices},
									{type:_OUTPUT_, ref:ZaDomain.A_AuthComputedBindDn, label:ZaMsg.LBL_Domain_AuthComputedBindDn, 
										visibilityChangeEventSources:[ZaDomain.A_AuthMech],
										visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ad]]												
									},
									{type:_TEXTAREA_, ref:ZaDomain.A_AuthTestMessage, label:ZaMsg.LBL_Domain_AuthTestMessage, height:150, alignment:_LEFT_, width:"320px"}
								]
							}
						]
					},
					{type:_CASE_, caseKey:ZaAuthConfigXWizard.CONFIG_COMPLETE_STEP,
						items: [
							{type:_OUTPUT_, value:ZaMsg.Domain_Auth_Config_Complete}
						]
					}
				]
			}
		];
}
ZaXDialog.XFormModifiers["ZaAuthConfigXWizard"].push(ZaAuthConfigXWizard.myXFormModifier);

ZaAuthConfigXWizard.startTlsEnabledChanged =  function (value, event, form) {
	this.setInstanceValue(value);
    var instance = form.getInstance () ;
    var ldapUrls = instance.attrs[ZaDomain.A_AuthLdapURL] ;
    var newUrls = [];
    if (ZaSettings.isDomainAdmin && (instance.attrs[ZaDomain.A_zimbraAdminConsoleLDAPAuthEnabled] == "TRUE")
               && instance.attrs[ZaDomain.A_zimbraAuthLdapStartTlsEnabled] != "TRUE") {
        //force ldaps protocol
        instance[ZaDomain.A2_allowClearTextLDAPAuth] = "FALSE" ;

        for (var i=0; i< ldapUrls.length; i++) {
            var ldapUrl = ldapUrls [i] ;
            if (ldapUrl == null || ldapUrl.length <=0) {
            }else {
                //force to use ldaps://
                ldapUrls[i] = ldapUrl.replace("ldap://", "ldaps://")  ;
                newUrls.push (ldapUrls[i]);
            }
        }

    }else{
        for (var i=0; i< ldapUrls.length; i++) {
            var ldapUrl = ldapUrls [i] ;
            //remove this empty item
            if (ldapUrl == null || ldapUrl.length <=0) {
                
            }else {
                newUrls.push (ldapUrls[i]);
            }
        }
        instance[ZaDomain.A2_allowClearTextLDAPAuth] = "TRUE" ;
    }

    instance.attrs[ZaDomain.A_AuthLdapURL] = newUrls ;
    form.refresh ();  
}
}
if (AjxPackage.define("zimbraAdmin.domains.view.ZaTaskAuthConfigWizard")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: qinan
 * Date: 9/23/11
 * Time: 1:21 PM
 * To change this template use File | Settings | File Templates.
 */


ZaTaskAuthConfigWizard = function(parent) {

	ZaXWizardDialog.call(this, parent, null, ZaMsg.NCD_AuthConfigTitle,"700px", "350px","ZaTaskAuthConfigWizard", null, ZaId.DLG_AUTH_CONFIG);

	this.AuthMechs = [
		{label:"<b>" + ZaMsg.AuthMech_zimbra + "</b>", value:ZaDomain.AuthMech_zimbra},
		{label:"<b>" + ZaMsg.AuthMech_ldap + "</b>", value:ZaDomain.AuthMech_ldap},
		{label:"<b>" + ZaMsg.AuthMech_ad + "</b>", value:ZaDomain.AuthMech_ad}
	];

	this.TestResultChoices = [
		{label:ZaMsg.AuthTest_check_OK, value:ZaDomain.Check_OK},
		{label:ZaMsg.AuthTest_check_UNKNOWN_HOST, value:ZaDomain.Check_UNKNOWN_HOST},
		{label:ZaMsg.AuthTest_check_CONNECTION_REFUSED, value:ZaDomain.Check_CONNECTION_REFUSED},
		{label:ZaMsg.AuthTest_check_SSL_HANDSHAKE_FAILURE, value:ZaDomain.Check_SSL_HANDSHAKE_FAILURE},
		{label:ZaMsg.AuthTest_check_COMMUNICATION_FAILURE, value:ZaDomain.Check_COMMUNICATION_FAILURE},
		{label:ZaMsg.AuthTest_check_AUTH_FAILED, value:ZaDomain.Check_AUTH_FAILED},
		{label:ZaMsg.AuthTest_check_AUTH_NOT_SUPPORTED, value:ZaDomain.Check_AUTH_NOT_SUPPORTED},
		{label:ZaMsg.AuthTest_check_NAME_NOT_FOUND, value:ZaDomain.Check_NAME_NOT_FOUND},
		{label:ZaMsg.AuthTest_check_INVALID_SEARCH_FILTER, value:ZaDomain.Check_INVALID_SEARCH_FILTER},
		{label:ZaMsg.AuthTest_check_FAILURE, value:ZaDomain.Check_FAILURE}
	];
	this.TAB_INDEX = 0;

    ZaTaskAuthConfigWizard.AUTH_CONFIG_CHOOSE_MODE_STEP = ++this.TAB_INDEX;
	ZaTaskAuthConfigWizard.AUTH_CONFIG_AUTH_SET_STEP = ++this.TAB_INDEX;
	ZaTaskAuthConfigWizard.AUTH_CONFIG_BIND_PWD_STEP = ++this.TAB_INDEX;
	ZaTaskAuthConfigWizard.AUTH_CONFIG_SUMMARY_STEP = ++this.TAB_INDEX;
    ZaTaskAuthConfigWizard.EXTERNAL_LDAP_GROUP_STEP = ++this.TAB_INDEX;
    /* bug 71234, remove SPNEGO
     ZaTaskAuthConfigWizard.SPNEGO_CONFIG_STEP = ++this.TAB_INDEX;
    ZaTaskAuthConfigWizard.SPNEGO_CONFIG_STEP_2 = ++this.TAB_INDEX; */
	ZaTaskAuthConfigWizard.CONFIG_COMPLETE_STEP = ++this.TAB_INDEX;
	
	ZaTaskAuthConfigWizard.AUTH_CONFIG_START_STEP = ZaTaskAuthConfigWizard.AUTH_CONFIG_CHOOSE_MODE_STEP;
	
	this.STEPS = [ZaTaskAuthConfigWizard.AUTH_CONFIG_START_STEP];

	this.stepChoices = [
        {label:ZaMsg.stepAuthModeForDomain, value:ZaTaskAuthConfigWizard.AUTH_CONFIG_CHOOSE_MODE_STEP},
		{label:ZaMsg.stepAuthSetting, value:ZaTaskAuthConfigWizard.AUTH_CONFIG_AUTH_SET_STEP},
		{label:ZaMsg.stepAuthBindLDAP, value:ZaTaskAuthConfigWizard.AUTH_CONFIG_BIND_PWD_STEP},
		{label:ZaMsg.stepAuthSummary, value:ZaTaskAuthConfigWizard.AUTH_CONFIG_SUMMARY_STEP},
		{label:ZaMsg.NAD_ExternalGroup_Setting, value:ZaTaskAuthConfigWizard.EXTERNAL_LDAP_GROUP_STEP},
        /* bug 71234, remove SPNEGO
		{label:ZaMsg.AuthSetting_Spnego, value:ZaTaskAuthConfigWizard.SPNEGO_CONFIG_STEP},
        {label:ZaMsg.AuthSetting_SpnegoDomain, value:ZaTaskAuthConfigWizard.SPNEGO_CONFIG_STEP_2},
        */
		{label:ZaMsg.DomainConfigComplete, value:ZaTaskAuthConfigWizard.CONFIG_COMPLETE_STEP}
	];

	this.initForm(ZaDomain.myXModel,this.getMyXForm());
	this._localXForm.addListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, new AjxListener(this, ZaTaskAuthConfigWizard.prototype.handleXFormChange));
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, new AjxListener(this, ZaTaskAuthConfigWizard.prototype.handleXFormChange));
	this.lastErrorStep=0;
	this._helpURL = ZaUtil.HELP_URL;
}

ZaTaskAuthConfigWizard.prototype = new ZaXWizardDialog;
ZaTaskAuthConfigWizard.prototype.constructor = ZaTaskAuthConfigWizard;
ZaTaskAuthConfigWizard.prototype.cacheDialog = false;
ZaXDialog.XFormModifiers["ZaTaskAuthConfigWizard"] = new Array();

if(ZaDomain) {
    ZaDomain.A2_zimbraSpnegoAuthRealm = "zimbraSpnegoAuthRealm";
    ZaDomain.A2_zimbraSpnegoAuthErrorURL = "zimbraSpnegoAuthErrorURL";
    ZaDomain.A2_zimbraSpnegoGlobalAuthEnabled = "zimbraSpnegoGlobalAuthEnabled";
    ZaDomain.A2_zimbraSpnegoAuthSummary = "zimbraSpnegoAuthSummary";
    ZaDomain.A2_zimbraSpnegoApplyFor = "zimbraSpnegoApplyFor";
    ZaDomain.A2_zimbraSpnegoAuthPrincipal = "zimbraSpnegoAuthPrincipal";
    ZaDomain.A2_zimbraSpnegoAuthTargetName = "zimbraSpnegoAuthTargetName";
    ZaDomain.A2_zimbraSpnegoUAAllBrowsers = "zimbraSpnegoUA_AllBrowsers";
    ZaDomain.A2_zimbraSpnegoUASupportedBrowsers = "zimbraSpnegoUA_SupportedBrowsers";
    ZaDomain.A2_zimbraSpnegoUACustomBrowsers = "zimbraSpnegoUA_CustomBrowsers";
    ZaDomain.A2_zimbraWebClientURLAllowedUA = "zimbraWebClientURLAllowedUA";
    ZaDomain.A2_zimbraSpnegoTargetServer = "zimbraSpnegoTargetServer";
    ZaDomain.A2_zimbraSpnegoGlobalSettingStatus = "zimbraSpnegoGlobalSettingStatus";

    ZaDomain.A_zimbraExternalGroupLdapSearchBase = "zimbraExternalGroupLdapSearchBase";
    ZaDomain.A_zimbraExternalGroupLdapSearchFilter = "zimbraExternalGroupLdapSearchFilter";
    ZaDomain.A_zimbraExternalGroupHandlerClass = "zimbraExternalGroupHandlerClass";
    ZaDomain.A_zimbraAuthMechAdmin = "zimbraAuthMechAdmin";
    ZaDomain.A2_zimbraExternalGroupLdapEnabled = "zimbraExternalGroupLdapEnabled";
    ZaDomain.A2_zimbraAuthConfigTestStatus = "zimbraAuthConfigTestStatus";
    if(ZaDomain.myXModel) {
        ZaDomain.myXModel.items.push(
            {id:ZaDomain.A2_zimbraSpnegoApplyFor, ref:ZaDomain.A2_zimbraSpnegoApplyFor, type: _STRING_},
            {id:ZaDomain.A2_zimbraSpnegoGlobalSettingStatus, ref:ZaDomain.A2_zimbraSpnegoGlobalSettingStatus, type: _STRING_},
            {id:ZaDomain.A2_zimbraWebClientURLAllowedUA, ref:ZaDomain.A2_zimbraWebClientURLAllowedUA, type: _STRING_},
            {id:ZaDomain.A2_zimbraSpnegoTargetServer, type:_STRING_ , ref: ZaDomain.A2_zimbraSpnegoTargetServer},
            {id:ZaDomain.A2_zimbraSpnegoAuthPrincipal, ref:ZaDomain.A2_zimbraSpnegoAuthPrincipal, type: _STRING_},
            {id:ZaDomain.A2_zimbraSpnegoAuthRealm, ref: ZaDomain.A2_zimbraSpnegoAuthRealm, type: _STRING_ },
            {id:ZaDomain.A2_zimbraSpnegoAuthTargetName, ref: ZaDomain.A2_zimbraSpnegoAuthTargetName, type: _STRING_ },
            {id:ZaDomain.A2_zimbraSpnegoAuthErrorURL, ref: ZaDomain.A2_zimbraSpnegoAuthErrorURL, type: _STRING_ },
            {id:ZaDomain.A2_zimbraSpnegoGlobalAuthEnabled, ref:ZaDomain.A2_zimbraSpnegoGlobalAuthEnabled, type: _ENUM_, choices: ZaModel.BOOLEAN_CHOICES},
            {id:ZaDomain.A2_zimbraSpnegoAuthSummary, ref:ZaDomain.A2_zimbraSpnegoAuthSummary, type: _ENUM_, choices: ZaModel.BOOLEAN_CHOICES},
            {id:ZaDomain.A2_zimbraSpnegoUAAllBrowsers, ref:ZaDomain.A2_zimbraSpnegoUAAllBrowsers, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
            {id:ZaDomain.A2_zimbraSpnegoUASupportedBrowsers, ref:ZaDomain.A2_zimbraSpnegoUASupportedBrowsers, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
            {id:ZaDomain.A2_zimbraSpnegoUACustomBrowsers, ref:ZaDomain.A2_zimbraSpnegoUACustomBrowsers, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES},
            {id:ZaDomain.A2_zimbraAuthConfigTestStatus, ref:ZaDomain.A2_zimbraAuthConfigTestStatus, type:_ENUM_, choices:["STANDBY", "RUNNING", "RUNNED"]}
        );
        ZaDomain.myXModel.items.push(
            {id:ZaDomain.A2_zimbraExternalGroupLdapEnabled, ref: ZaDomain.A2_zimbraExternalGroupLdapEnabled, type: _ENUM_, choices: ZaModel.BOOLEAN_CHOICES},
            {id:ZaDomain.A_zimbraExternalGroupLdapSearchBase, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraExternalGroupLdapSearchBase},
            {id:ZaDomain.A_zimbraExternalGroupLdapSearchFilter, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraExternalGroupLdapSearchFilter},
            {id:ZaDomain.A_zimbraExternalGroupHandlerClass, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraExternalGroupHandlerClass},
            {id:ZaDomain.A_zimbraAuthMechAdmin, type:_STRING_, ref:"attrs/" + ZaDomain.A_zimbraAuthMechAdmin}
        );
    }
    
    ZaTaskAuthConfigWizard.loadExtLdapGroup = function (entry) {
        if (!this.attrs[ZaDomain.A_zimbraExternalGroupHandlerClass]) {
            this.attrs[ZaDomain.A_zimbraExternalGroupHandlerClass] = "com.zimbra.cs.account.grouphandler.ADGroupHandler";
        }
        if (!this.attrs[ZaDomain.A_zimbraAuthMechAdmin]) {
            this.attrs[ZaDomain.A_zimbraAuthMechAdmin] = ZaDomain.AuthMech_ad;
        }

        if (this.attrs[ZaDomain.A_AuthMech]!=ZaDomain.AuthMech_zimbra ) {
            this[ZaDomain.A2_zimbraExternalGroupLdapEnabled] = "TRUE";
        } else {
            this[ZaDomain.A2_zimbraExternalGroupLdapEnabled] = "FALSE";
        }
    }
    
    ZaTaskAuthConfigWizard.loadAuthConfWizard = function (entry) {
    	this[ZaDomain.A2_zimbraAuthConfigTestStatus] = "STANDBY";
    }
    
    ZaItem.loadMethods["ZaDomain"].push(ZaTaskAuthConfigWizard.loadAuthConfWizard);
    ZaItem.loadMethods["ZaDomain"].push(ZaTaskAuthConfigWizard.loadExtLdapGroup);
}

ZaDomain.TARGET_SERVER_CHOICES = [];

ZaTaskAuthConfigWizard.prototype.handleXFormChange =
function () {
	if(this._localXForm.hasErrors()) {
		if(this.lastErrorStep < this._containedObject[ZaModel.currentStep])
			this.lastErrorStep=this._containedObject[ZaModel.currentStep];
	} else {
		this.lastErrorStep=0;
	}
	this.changeButtonStateForStep(this._containedObject[ZaModel.currentStep]);
}

ZaTaskAuthConfigWizard.prototype.changeButtonStateForStep =
function(stepNum) {
    this._button[DwtDialog.CANCEL_BUTTON].setVisible(true);
    this._button[ZaXWizardDialog.HELP_BUTTON].setVisible(true);
    this._button[DwtWizardDialog.FINISH_BUTTON].setVisible(true);

	if(this.lastErrorStep == stepNum) {
		this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
		this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
		if(stepNum>1)
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
	} else {

		if(stepNum == ZaTaskAuthConfigWizard.AUTH_CONFIG_CHOOSE_MODE_STEP) {
			// first step, prev is disabled
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
		} else if(stepNum == ZaTaskAuthConfigWizard.CONFIG_COMPLETE_STEP) {
			// last step, next is dsiabled
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(true);
		} else if (stepNum == ZaTaskAuthConfigWizard.AUTH_CONFIG_AUTH_SET_STEP) {
			// valid check
			var nextEnabled = false;
            var authMode = this._containedObject.attrs[ZaDomain.A_AuthMech];
			if (((authMode == ZaDomain.AuthMech_ad) && !AjxUtil.isEmpty(this._localXForm.getInstanceValue(ZaDomain.A_AuthADDomainName))) ||
				((authMode == ZaDomain.AuthMech_ldap) && !AjxUtil.isEmpty(this._localXForm.getInstanceValue(ZaDomain.A_AuthLdapURL)))) {
				nextEnabled = true;
			}
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(nextEnabled);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);

		} else { // other steps,
			this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
		}
	}
}

ZaTaskAuthConfigWizard.prototype.testSetings =
function () {
	if(this._containedObject.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_ad) {
		this._containedObject.attrs[ZaDomain.A_AuthLdapUserDn] = "%u@"+this._containedObject.attrs[ZaDomain.A_AuthADDomainName];
	}

	var callback = new AjxCallback(this, this.checkCallBack);
	ZaDomain.testAuthSettings(this._containedObject, callback);
}

/**
* Callback function invoked by Asynchronous CSFE command when "check" call returns
**/
ZaTaskAuthConfigWizard.prototype.checkCallBack =
function (arg) {
	if(!arg)
		return;
	if(arg.isException()) {
		this._containedObject[ZaDomain.A_AuthTestResultCode] = arg.getException().code;
		this._containedObject[ZaDomain.A_AuthTestMessage] = arg.getException().detail+"\n"+arg.getException().msg;
	} else {
		var response = arg.getResponse().Body.CheckAuthConfigResponse;
		this._containedObject[ZaDomain.A_AuthTestResultCode] = response.code[0]._content;
		if(this._containedObject[ZaDomain.A_AuthTestResultCode] != ZaDomain.Check_OK) {
			this._containedObject[ZaDomain.A_AuthTestMessage] = response.message[0]._content;
		} else {
			if(response.bindDn != null) {
				this._containedObject[ZaDomain.A_AuthComputedBindDn] = response.bindDn[0]._content;
			} else {
				this._containedObject[ZaDomain.A_AuthComputedBindDn] = "";
			}
		}
	}
	this._containedObject[ZaDomain.A2_zimbraAuthConfigTestStatus] = "RUNNED";
	this._localXForm.refresh(); // force update visibility
}

/**
* Eevent handlers for form items
**/
ZaTaskAuthConfigWizard.onAuthMechChange =
function (value, event, form) {
	this.setInstanceValue(value);

	if(value == ZaDomain.AuthMech_ad) {
		if(!form.getInstance().attrs[ZaDomain.A_AuthADDomainName]) {
			this.setInstanceValue(form.getInstance().attrs[ZaDomain.A_domainName], ZaDomain.A_AuthADDomainName);
			//form.getInstance().attrs[ZaDomain.A_AuthADDomainName] = form.getInstance().attrs[ZaDomain.A_domainName];
		}
	}
	//form.parent.changeButtonStateForStep(1);

}

/**
* Overwritten methods that control wizard's flow (open, go next,go previous, finish)
**/
ZaTaskAuthConfigWizard.prototype.popup =
function (loc) {
	ZaXWizardDialog.prototype.popup.call(this, loc);
	this.changeButtonStateForStep(ZaTaskAuthConfigWizard.AUTH_CONFIG_CHOOSE_MODE_STEP);

}

ZaTaskAuthConfigWizard.prototype.goPage =
function(pageNum) {
	ZaXWizardDialog.prototype.goPage.call(this, pageNum);
	this.changeButtonStateForStep(pageNum);
}

ZaTaskAuthConfigWizard.prototype.goPrev =
function () {	
	if (this.STEPS.length > 1) {
		this.STEPS.pop();
		this.goPage(this.STEPS[this.STEPS.length - 1]);
	} else {
		this.goPage(this.STEPS[0]);
	}
}

ZaTaskAuthConfigWizard.prototype.goNext =
function() {
	var curStep = this._containedObject[ZaModel.currentStep];
	var nextStep = curStep + 1; // default next is to show the next step
	
	// check the configuration of the current step is correct
	if(curStep == ZaTaskAuthConfigWizard.AUTH_CONFIG_AUTH_SET_STEP &&
	   this._containedObject.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_ldap) {
		var temp = this._containedObject.attrs[ZaDomain.A_AuthLdapURL].join(" ");
		if(this._containedObject.attrs[ZaDomain.A_zimbraAuthLdapStartTlsEnabled] == "TRUE") {
		//check that we don't have ldaps://
			if(temp.indexOf("ldaps://") > -1) {
				ZaApp.getInstance().getCurrentController().popupWarningDialog(ZaMsg.Domain_WarningStartTLSIgnored)
			}	
		}
	}  else if (curStep == ZaTaskAuthConfigWizard.AUTH_CONFIG_BIND_PWD_STEP) {
		//clear the password if the checkbox is unchecked
		if(this._containedObject[ZaDomain.A_AuthUseBindPassword] == "FALSE") {
			this._containedObject.attrs[ZaDomain.A_AuthLdapSearchBindDn] = null;
			this._containedObject.attrs[ZaDomain.A_AuthLdapSearchBindPassword] = null;
			this._containedObject[ZaDomain.A_AuthLdapSearchBindPasswordConfirm] = null;
		}
		//check that passwords match
		if(this._containedObject.attrs[ZaDomain.A_AuthLdapSearchBindPassword] !=
		   this._containedObject[ZaDomain.A_AuthLdapSearchBindPasswordConfirm]) {
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_MISMATCH);
			return false;
		}
	}
	
	// wizard step flow control
	if(curStep == ZaTaskAuthConfigWizard.AUTH_CONFIG_CHOOSE_MODE_STEP &&
		this._containedObject.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_zimbra) {
		nextStep = ZaTaskAuthConfigWizard.CONFIG_COMPLETE_STEP;
		
	} else if (curStep == ZaTaskAuthConfigWizard.AUTH_CONFIG_SUMMARY_STEP) {
		// External LDAP doesn't support External LDAP Group Config
		if(this._containedObject.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_ad) {
			nextStep = ZaTaskAuthConfigWizard.EXTERNAL_LDAP_GROUP_STEP;
		} else {
			nextStep = ZaTaskAuthConfigWizard.CONFIG_COMPLETE_STEP;
		}
		
	} else if (curStep == ZaTaskAuthConfigWizard.AUTH_CONFIG_AUTH_SET_STEP &&
			   this._containedObject.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_ad) {
		if(!this._containedObject.attrs[ZaDomain.A_AuthLdapURL]) {
			ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_LDAP_URL_REQUIRED);
			return false;
		}

	} else if(curStep == ZaTaskAuthConfigWizard.AUTH_TEST_RESULT_STEP) {
		if(this._containedObject.attrs[ZaDomain.A_AuthMech] != ZaDomain.AuthMech_ad) { 
			// now only External AD support external group step, External LDAP doesn't
			nextStep = ZaTaskAuthConfigWizard.CONFIG_COMPLETE_STEP;
		}
	}
	
	// always reset the LDAP/AD connection test result
	if (curStep == ZaTaskAuthConfigWizard.AUTH_CONFIG_SUMMARY_STEP ||
		nextStep == ZaTaskAuthConfigWizard.AUTH_CONFIG_SUMMARY_STEP) {
		this._localXForm.setInstanceValue("STANDBY", ZaDomain.A2_zimbraAuthConfigTestStatus);
	}
	
	this.STEPS.push(nextStep);
	this.goPage(nextStep);
}

/**
* @method setObject sets the object contained in the view
* @param entry - ZaDomain object to display
**/
ZaTaskAuthConfigWizard.prototype.setObject =
function(entry) {
	this._containedObject = new Object();
	this._containedObject.attrs = new Object();

	for (var a in entry.attrs) {
		this._containedObject.attrs[a] = entry.attrs[a];
	}

	this._containedObject.name = entry.name;
	this._containedObject.type = entry.type ;
	this._containedObject.id = entry.id;

	if(entry.rights)
		this._containedObject.rights = entry.rights;

	if(entry.setAttrs)
		this._containedObject.setAttrs = entry.setAttrs;

	if(entry.getAttrs)
		this._containedObject.getAttrs = entry.getAttrs;

	if(entry._defaultValues)
		this._containedObject._defaultValues = entry._defaultValues;

    if(entry[ZaDomain.A2_zimbraExternalGroupLdapEnabled])
        this._containedObject[ZaDomain.A2_zimbraExternalGroupLdapEnabled]= entry[ZaDomain.A2_zimbraExternalGroupLdapEnabled];

	this._containedObject[ZaDomain.A_AuthUseBindPassword] = entry[ZaDomain.A_AuthUseBindPassword];
	this.setTitle(ZaMsg.NCD_AuthConfigTitle + " (" + entry.name + ")");

    if (ZaSettings.isDomainAdmin && (entry.attrs[ZaDomain.A_zimbraAdminConsoleLDAPAuthEnabled] == "TRUE")
           && entry.attrs[ZaDomain.A_zimbraAuthLdapStartTlsEnabled] != "TRUE") {
        this._containedObject [ZaDomain.A2_allowClearTextLDAPAuth] = "FALSE" ;
    }

    var serverList = ZaApp.getInstance().getServerList().getArray();
    for(var ix = 0; ix < serverList.length; ix++) {
        ZaDomain.TARGET_SERVER_CHOICES.push (
            {label: serverList[ix].name, value: serverList[ix].id }
        );
    }
    if(serverList.length > 0)
        this._containedObject [ZaDomain.A2_zimbraSpnegoTargetServer] = serverList[0].id;
    if(this._containedObject.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA]
            && this._containedObject.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA]
            && (this._containedObject.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA].join(";")
                == this._containedObject.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA].join(";"))
            && (this._containedObject.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA].join(";")
                == ZaDomain.SPNEGO_SUPPORT_UA.join(";"))
     ) {
        this._containedObject[ZaDomain.A2_zimbraSpnegoUASupportedBrowsers] = "TRUE";
    } else this._containedObject[ZaDomain.A2_zimbraSpnegoUACustomBrowsers] = "TRUE";

    if(this._containedObject.attrs[ZaDomain.A_zimbraWebClientLoginURL]
            || this._containedObject.attrs[ZaDomain.A_zimbraWebClientLogoutURL]
            || (this._containedObject.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA]
            && this._containedObject.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA].length > 0))
       this._containedObject[ZaDomain.A2_zimbraSpnegoAuthEnabled] = "TRUE";

    var globalConfig = ZaApp.getInstance().getGlobalConfig();
    this._containedObject[ZaDomain.A2_zimbraSpnegoGlobalAuthEnabled] = globalConfig.attrs[ZaGlobalConfig.A_zimbraSpnegoAuthEnabled];
    this._containedObject[ZaDomain.A2_zimbraSpnegoAuthErrorURL] = globalConfig.attrs[ZaGlobalConfig.A_zimbraSpnegoAuthErrorURL];
    this._containedObject[ZaDomain.A2_zimbraSpnegoAuthRealm] = globalConfig.attrs[ZaGlobalConfig.A_zimbraSpnegoAuthRealm];
    this._containedObject[ZaDomain.A2_zimbraSpnegoGlobalSettingStatus] = ZaTaskAuthConfigWizard.getGlobalSettingMsg(this._containedObject);

    this._containedObject[ZaModel.currentStep] = entry[ZaModel.currentStep] || ZaTaskAuthConfigWizard.AUTH_CONFIG_CHOOSE_MODE_STEP;
    this._containedObject[ZaDomain.A2_zimbraSpnegoUAAllBrowsers] = entry[ZaDomain.A2_zimbraSpnegoUAAllBrowsers] || "FALSE";
    this._containedObject[ZaDomain.A2_zimbraSpnegoUASupportedBrowsers] = entry[ZaDomain.A2_zimbraSpnegoUASupportedBrowsers] || "FALSE";
    this._containedObject[ZaDomain.A2_zimbraSpnegoUACustomBrowsers] = entry[ZaDomain.A2_zimbraSpnegoUACustomBrowsers] || "FALSE";

    this._containedObject._uuid = entry._extid || entry._uuid;
    this._containedObject._editObject = entry._editObject;
	this._localXForm.setInstance(this._containedObject);
}



ZaTaskAuthConfigWizard.prototype.finishWizard =
function() {
	try {
		ZaDomain.modifyAuthSettings.call(this._containedObject._editObject,this._containedObject);
		ZaApp.getInstance().getDomainListController()._fireDomainChangeEvent(this._containedObject._editObject);
		this.popdown();
        ZaApp.getInstance().getDomainListController().notifyAllOpenTabs(this._containedObject._editObject);
	} catch (ex) {
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaTaskAuthConfigWizard.prototype.finishWizard", null, false);
	}
}

/**
* XForm definition
**/

ZaTaskAuthConfigWizard.myXFormModifier = function(xFormObject) {
	var labelVisibility = {};
    labelVisibility[ZaTaskAuthConfigWizard.AUTH_CONFIG_AUTH_SET_STEP] = {
        checks:[[XForm.checkInstanceValueNot,ZaDomain.A_AuthMech,ZaDomain.AuthMech_zimbra]],
        sources:[ZaDomain.A_AuthMech]
    };
    labelVisibility[ZaTaskAuthConfigWizard.AUTH_CONFIG_BIND_PWD_STEP] = {
        checks:[[XForm.checkInstanceValueNot,ZaDomain.A_AuthMech,ZaDomain.AuthMech_zimbra]],
        sources:[ZaDomain.A_AuthMech]
    };
    labelVisibility[ZaTaskAuthConfigWizard.AUTH_CONFIG_BIND_PWD_STEP] = {
        checks:[[XForm.checkInstanceValueNot,ZaDomain.A_AuthMech,ZaDomain.AuthMech_zimbra]],
        sources:[ZaDomain.A_AuthMech]
    };
    labelVisibility[ZaTaskAuthConfigWizard.AUTH_CONFIG_SUMMARY_STEP] = {
        checks:[[XForm.checkInstanceValueNot,ZaDomain.A_AuthMech,ZaDomain.AuthMech_zimbra]],
        sources:[ZaDomain.A_AuthMech]
    };
    labelVisibility[ZaTaskAuthConfigWizard.EXTERNAL_LDAP_GROUP_STEP] = {
        checks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ad]],
        sources:[ZaDomain.A_AuthMech]
    };

	xFormObject.items = [
        {
            type: _OUTPUT_,
            colSpan: 2,
            valign: _TOP_,
            cssStyle: "white-space: normal",
            ref: ZaModel.currentStep,
            choices: this.stepChoices,
            valueChangeEventSources: [ZaModel.currentStep],
            labelVisibility: labelVisibility
        },
			{type:_SEPARATOR_, align:_CENTER_, valign:_TOP_},
			{type:_SPACER_,  align:_CENTER_, valign:_TOP_},
			{type:_SWITCH_,width:580, valign:_TOP_, cssStyle: "white-space: normal",
				items:[
					{type:_CASE_, numCols:2,colSizes:["60px","430px"],	caseKey:ZaTaskAuthConfigWizard.AUTH_CONFIG_CHOOSE_MODE_STEP,
						items:[
                            {type:_OUTPUT_, value:ZaMsg.authForDomainMsg,
                                colSpan:"*", cssStyle:"padding-left:10px;padding-top:10px;"
                            },
                            {type: _SPACER_, height: 10 },
							{ref:ZaDomain.A_AuthMech, type:_RADIO_,groupname:"auth_mechanism_group",
								label:"<b>" + ZaMsg.AuthMech_zimbra + "</b>", labelLocation:_RIGHT_,
								updateElement:function (value) {
									this.getElement().checked = (value == ZaDomain.AuthMech_zimbra);
								},
								elementChanged: function(elementValue,instanceValue, event) {
									this.getForm().itemChanged(this, ZaDomain.AuthMech_zimbra, event);
                                    this.setInstanceValue("FALSE", ZaDomain.A2_zimbraExternalGroupLdapEnabled);
								},
								visibilityChecks:[],enableDisableChecks:[]
							},
                            {type: _GROUP_, colSpan:2, numCols:2, colSizes: ["80px", "*" ],
                                items :[
                                    {type:_OUTPUT_, label:"" , value:ZaMsg.domainAuthDlgInternalHelp}
                                ]
                            },
                            {type: _SPACER_, height: 15 },
							{ref:ZaDomain.A_AuthMech, type:_RADIO_,groupname:"auth_mechanism_group",
								label:"<b>" + ZaMsg.AuthMech_ad + "</b>", labelLocation:_RIGHT_,
								updateElement:function (value) {
									this.getElement().checked = (value == ZaDomain.AuthMech_ad);
								},
								elementChanged: function(elementValue,instanceValue, event) {
									this.getForm().itemChanged(this, ZaDomain.AuthMech_ad, event);
                                    this.setInstanceValue("TRUE", ZaDomain.A2_zimbraExternalGroupLdapEnabled);
								},
								visibilityChecks:[],enableDisableChecks:[]
							},
                            {type: _GROUP_, colSpan:2, numCols:2, colSizes: ["80px", "*" ],
                                items :[
                                    {type:_OUTPUT_, label:"" , value:ZaMsg.domainAuthDlgADHelp}
                                ]
                            },
                            {type: _SPACER_, height: 15 },
							{ref:ZaDomain.A_AuthMech, type:_RADIO_,groupname:"auth_mechanism_group",
								label:"<b>" + ZaMsg.AuthMech_ldap + "</b>",  labelLocation:_RIGHT_,
								updateElement:function (value) {
									this.getElement().checked = (value == ZaDomain.AuthMech_ldap);
								},
								elementChanged: function(elementValue,instanceValue, event) {
									this.getForm().itemChanged(this, ZaDomain.AuthMech_ldap, event);
                                    this.setInstanceValue("TRUE", ZaDomain.A2_zimbraExternalGroupLdapEnabled);
								},
								visibilityChecks:[],enableDisableChecks:[]
							},
                            {type: _GROUP_, colSpan:2, numCols:2, colSizes: ["80px", "*" ],
                                items :[
                                    {type:_OUTPUT_, label:"" , value:ZaMsg.domainAuthDlgExternalHelp}
                                ]
                            }
                        ]
                    },
					{type:_CASE_, numCols:2,colSizes:["150px","430px"],	caseKey:ZaTaskAuthConfigWizard.AUTH_CONFIG_AUTH_SET_STEP,
                        cellpadding:10,
						items:[
						    //{type:_OUTPUT_, label:ZaMsg.Domain_AuthMech, choices:this.AuthMechs, ref:ZaDomain.A_AuthMech, //onChange:ZaTaskAuthConfigWizard.onAuthMechChange,
                            //    labelCssStyle:"text-align:left;",
						    //	enableDisableChecks:[],visibilityChecks:[]
						    //},
							{type:_GROUP_, colSpan:2,numCols:2,colSizes:["150px","430px"],
								visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ad]],
								visibilityChangeEventSources:[ZaDomain.A_AuthMech],
								items:[
                                    {type:_OUTPUT_, value:ZaMsg.authForADMsg,  colSpan:"*"
                                        //colSpan:"*", cssStyle:"padding-left:10px;padding-top:10px;"
                                    },
								    {type:_SPACER_, height:20,colSpan:2},
									{ref:ZaDomain.A_AuthADDomainName, type:_TEXTFIELD_, label:ZaMsg.Domain_AuthADDomainName, labelLocation:_LEFT_,
                                        labelCssStyle:"text-align:left;padding-left:20px;", required: true,
										visibilityChecks:[],enableDisableChecks:[],bmolsnr:true
									},
                                    {type:_SPACER_, height:10,colSpan:2},
                                    {type:_OUTPUT_, label:ZaMsg.Domain_AuthADServer, value:" ", labelCssStyle:"text-align:left;padding-left:20px;"},
									{type:_GROUP_, numCols:6, colSpan:2,label:null,labelLocation:_LEFT_, containerCssStyle:"padding-left:20px;",
										items: [
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"35px"},
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthADServerName, width:"200px",
											 getDisplayValue: function(value) {  // show required symbol, xform items with null label can't use with "required".
												 return value + "<span class=\"redAsteric\">*</span>";
											 }
											},
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"5px"},
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthADServerPort, width:"40px",
											 getDisplayValue: function(value) {
												 return value + "<span class=\"redAsteric\">*</span>";
											 }
											},
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthADUseSSL, width:"40px"}
										]
									},
									{ref:ZaDomain.A_AuthLdapURL, type:_REPEAT_, colSpan:"*",containerCssStyle:"padding-left:20px;",//label:ZaMsg.Domain_AuthADURL,
										repeatInstance:"", showAddButton:true, showRemoveButton:true,
										addButtonLabel:ZaMsg.Domain_AddURL,
										removeButtonLabel:ZaMsg.Domain_REPEAT_REMOVE,
										showAddOnNextRow:true,
										items: [
											{ref:".", type:_LDAPURL_, label:null, labelLocation:_NONE_,ldapSSLPort:"3269",ldapPort:"3268",
											visibilityChecks:[],enableDisableChecks:[]}
										]
									}
								]
							},
							{type:_GROUP_, colSpan:2,numCols:2,colSizes:["150px","430px"],
								visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ldap]],
								visibilityChangeEventSources:[ZaDomain.A_AuthMech],
								items:[
                                    {type:_OUTPUT_, value:ZaMsg.authForLDAPMsg,  colSpan:"*"
                                    },
                                    {type:_SPACER_, height:20,colSpan:2},
                                    {type:_OUTPUT_, value:"LDAP Setting",  colSpan:"*"
                                    },
									{type:_GROUP_, numCols:6, colSpan:2,label:null,labelLocation:_LEFT_,
										items: [
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"35px"},
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthLDAPServerName, width:"200px",
											 getDisplayValue: function(value) {
												 return value + "<span class=\"redAsteric\">*</span>";
											 }
											},
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"5px"},
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthLDAPServerPort,  width:"40px",
											 getDisplayValue: function(value) {
												 return value + "<span class=\"redAsteric\">*</span>";
											 }
											},
											{type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthLDAPUseSSL, width:"40px"}
										]
									},
									{ref:ZaDomain.A_AuthLdapURL, type:_REPEAT_, colSpan:"*",cssStyle:"padding-left:10px;",//label:ZaMsg.Domain_AuthLdapURL, repeatInstance:"", showAddButton:true, showRemoveButton:true,
										addButtonLabel:ZaMsg.Domain_AddURL,
										removeButtonLabel:ZaMsg.Domain_REPEAT_REMOVE,
										showAddOnNextRow:true,
										items: [
											{ref:".", type:_LDAPURL_, label:null,ldapSSLPort:"636",ldapPort:"389",  labelLocation:_NONE_,
											visibilityChecks:[],enableDisableChecks:[]}
										]
									},
                                    {type:_SPACER_, height:10,colSpan:2},
									{ref:ZaDomain.A_zimbraAuthLdapStartTlsEnabled, type:_CHECKBOX_, label:ZaMsg.Domain_AuthLdapStartTlsEnabled, onChange: ZaTaskAuthConfigWizard.startTlsEnabledChanged,
										 trueValue:"TRUE", falseValue:"FALSE"
									},
                                    {type:_SPACER_, height:10,colSpan:2},
									{ref:ZaDomain.A_AuthLdapSearchFilter, type:_TEXTAREA_, width:380, height:40, label:ZaMsg.Domain_AuthLdapFilter,
                                        labelCssStyle:"text-align:left;",
                                        labelLocation:_LEFT_, textWrapping:"soft"},
                                    {type:_SPACER_, height:10,colSpan:2},
									{ref:ZaDomain.A_AuthLdapSearchBase, type:_TEXTAREA_, width:380, height:40, label:ZaMsg.Domain_AuthLdapSearchBase,
                                        labelCssStyle:"text-align:left;",
                                        labelLocation:_LEFT_, textWrapping:"soft"},
                                    {type:_SPACER_, height:20,colSpan:2},
									{type:_OUTPUT_, value:ZaMsg.NAD_DomainsAuthStr, colSpan:2}
								]
							}
						]
					},
					{type:_CASE_, numCols:2, colSizes:["150px","430px"], caseKey:ZaTaskAuthConfigWizard.AUTH_CONFIG_BIND_PWD_STEP,
						visibilityChecks:[[Case_XFormItem.prototype.isCurrentTab]],
						items: [
							{ref:ZaDomain.A_AuthUseBindPassword, type:_CHECKBOX_, label:ZaMsg.Domain_AuthUseBindPassword, labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE",labelCssClass:"xform_label", align:_LEFT_,
							visibilityChecks:[],enableDisableChecks:[]},
							{ref:ZaDomain.A_AuthLdapSearchBindDn, type:_INPUT_, label:ZaMsg.Domain_AuthLdapBindDn, labelLocation:_LEFT_,
								enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthUseBindPassword,"TRUE"]],
								enableDisableChangeEventSources:[ZaDomain.A_AuthUseBindPassword],
								visibilityChecks:[]
							},
							{ref:ZaDomain.A_AuthLdapSearchBindPassword, type:_SECRET_, label:ZaMsg.Domain_AuthLdapBindPassword, labelLocation:_LEFT_,
								enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthUseBindPassword,"TRUE"]],
								enableDisableChangeEventSources:[ZaDomain.A_AuthUseBindPassword],
								visibilityChecks:[]
							},
							{ref:ZaDomain.A_AuthLdapSearchBindPasswordConfirm, type:_SECRET_, label:ZaMsg.Domain_AuthLdapBindPasswordConfirm, labelLocation:_LEFT_,
								enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthUseBindPassword,"TRUE"]],
								enableDisableChangeEventSources:[ZaDomain.A_AuthUseBindPassword],
								visibilityChecks:[]
							}
						]
					},
					{type:_CASE_, numCols:2,colSizes:["180px","430px"],	caseKey:ZaTaskAuthConfigWizard.AUTH_CONFIG_SUMMARY_STEP,
						visibilityChecks:[Case_XFormItem.prototype.isCurrentTab,ZaNewDomainXWizard.isAuthMechNotZimbra],
						items: [
                            {type:_OUTPUT_, value:ZaMsg.authSummaryMsg,  colSpan:"*"
                            },
							{type:_SPACER_, height:10},
							{type:_OUTPUT_, ref:ZaDomain.A_AuthMech, label:ZaMsg.Domain_AuthMech, choices:this.AuthMechs, alignment:_LEFT_,
                                labelCssStyle:"text-align:right;padding-left:20px;"},
							{type:_GROUP_, useParentTable:true,
								visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ad]],
								visibilityChangeEventSources:[ZaDomain.A_AuthMech],
								items:[
									{ref:ZaDomain.A_AuthADDomainName, type:_OUTPUT_, label:ZaMsg.Domain_AuthADDomainName, labelLocation:_LEFT_,
                                        labelCssStyle:"text-align:right;padding-left:20px;"},
									{ref:ZaDomain.A_AuthLdapURL, type:_REPEAT_, label:ZaMsg.Domain_AuthLdapURL, labelLocation:_LEFT_,showAddButton:false,
                                        showRemoveButton:false, labelCssStyle:"text-align:right;padding-left:20px;",
										items:[
											{type:_OUTPUT_, ref:".", label:null,labelLocation:_NONE_}
										]
									}
								]
							},
							{type:_GROUP_, useParentTable:true,
								visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthMech,ZaDomain.AuthMech_ldap]],
								visibilityChangeEventSources:[ZaDomain.A_AuthMech],
								items:[
									{ref:ZaDomain.A_AuthLdapURL, type:_REPEAT_, label:ZaMsg.Domain_AuthLdapURL, labelLocation:_LEFT_,
                                        labelCssStyle:"text-align:right;padding-left:20px;",showAddButton:false, showRemoveButton:false,visibilityChecks:[],
										items:[
											{type:_OUTPUT_, ref:".", label:null,labelLocation:_NONE_,visibilityChecks:[]}
										]

									},
									{ref:ZaDomain.A_zimbraAuthLdapStartTlsEnabled, type:_OUTPUT_, label:ZaMsg.Domain_AuthLdapStartTlsEnabled, labelLocation:_LEFT_,
                                        labelCssStyle:"text-align:right;padding-left:20px;",choices:ZaModel.BOOLEAN_CHOICES,visibilityChecks:[]},
									{ref:ZaDomain.A_AuthLdapSearchFilter, type:_OUTPUT_, label:ZaMsg.Domain_AuthLdapFilter, labelLocation:_LEFT_,
                                        labelCssStyle:"text-align:right;padding-left:20px;",visibilityChecks:[]},
									{ref:ZaDomain.A_AuthLdapSearchBase, type:_OUTPUT_, label:ZaMsg.Domain_AuthLdapSearchBase, labelLocation:_LEFT_,
                                        labelCssStyle:"text-align:right;padding-left:20px;",visibilityChecks:[]},
									{ref:ZaDomain.A_AuthUseBindPassword, type:_OUTPUT_, label:ZaMsg.Domain_AuthUseBindPassword, labelLocation:_LEFT_,
                                        labelCssStyle:"text-align:right;padding-left:20px;",choices:ZaModel.BOOLEAN_CHOICES},
									{ref:ZaDomain.A_AuthLdapSearchBindDn, type:_OUTPUT_, label:ZaMsg.Domain_AuthLdapBindDn, labelLocation:_LEFT_,
                                        labelCssStyle:"text-align:right;padding-left:20px;",
										visibilityChecks:[[XForm.checkInstanceValue,ZaDomain.A_AuthUseBindPassword,"TRUE"]],
										visibilityChangeEventSources:[ZaDomain.A_AuthUseBindPassword]
									}
								]
							},
							{type:_SPACER_, height:20},
							{type:_OUTPUT_,value:ZaMsg.Domain_AuthProvideLoginPwd, align:_LEFT_, colSpan:"*",visibilityChecks:[]},
                            {type:_SPACER_, height:10},
                            {type:_GROUP_, numCols:2, colSpan:"*", colSizes:["100px", "auto"], width:"100%",
                             items: [
                                     {type:_TEXTFIELD_, label:ZaMsg.LBL_Domain_AuthTestUserName, ref:ZaDomain.A_AuthTestUserName, alignment:_LEFT_,
                                      labelCssStyle:"text-align:right;padding-left:20px;",width:"150px", visibilityChecks:[],enableDisableChecks:[]},
                                     {type:_SECRET_, label:ZaMsg.LBL_Domain_AuthTestPassword, ref:ZaDomain.A_AuthTestPassword, alignment:_LEFT_,
                                      labelCssStyle:"text-align:right;padding-left:20px;",width:"150px", visibilityChecks:[],enableDisableChecks:[]}]
                            },
                            {type:_GROUP_, numCols:1, colSpan:"*", colSizes:["300px","200px","auto"],
                                cssStyle:"margin-bottom:10px;padding-bottom:0px;margin-top:10px;margin-left:10px;margin-right:10px;",
                                items: [
                                    {type:_CELLSPACER_},
                                    {type:_DWT_BUTTON_, label:ZaMsg.Domain_AuthTestSettings,width:"100px",
                                    	ref:ZaDomain.A2_zimbraAuthConfigTestStatus,
                                        onActivate:"ZaTaskAuthConfigWizard.autoTestSetting.call(this);"},
                                    {type:_GROUP_, isTabGroup:false, deferred:false, colSpan:2, colSizes:["100px", "400px"],
                                        visibilityChangeEventSources:[ZaModel.currentStep, ZaDomain.A2_zimbraAuthConfigTestStatus],
                                        visibilityChecks:[[XForm.checkInstanceValue, ZaDomain.A2_zimbraAuthConfigTestStatus, "RUNNING"]],
                                        items: [
                                            {type:_DWT_ALERT_, content:ZaMsg.Domain_AuthTestingInProgress, alignment:_CENTER_, colSpan:2, style:DwtAlert.INFO}
                                        ]
                                    },
                                    {type:_GROUP_, isTabGroup:false, deferred:false, colSpan:2, colSizes:["100px", "400px"],
                                    	 visibilityChangeEventSources:[ZaDomain.A2_zimbraAuthConfigTestStatus, ZaDomain.A_AuthTestResultCode],
    									 visibilityChecks:[[XForm.checkInstanceValue, ZaDomain.A2_zimbraAuthConfigTestStatus, "RUNNED"],
    											           [XForm.checkInstanceValue, ZaDomain.A_AuthTestResultCode, ZaDomain.Check_OK]],
    								     items: [
    								    	 {type:_DWT_ALERT_, style:DwtAlert.INFORMATION, content:ZaMsg.Domain_AuthTestSuccessful, alignment:_CENTER_, colSpan:2},
    										 {type:_OUTPUT_, ref:ZaDomain.A_AuthComputedBindDn, label:ZaMsg.LBL_Domain_AuthComputedBindDn}
    								     ]
                                    },
									{type:_GROUP_, isTabGroup:false, deferred:false, colSpan:2, colSizes:["100px", "400px"],
								     visibilityChangeEventSources:[ZaDomain.A2_zimbraAuthConfigTestStatus, ZaDomain.A_AuthTestResultCode],
									 visibilityChecks:[
											function () {
												return  (this.getInstanceValue(ZaDomain.A2_zimbraAuthConfigTestStatus) == "RUNNED") &&
														(this.getInstanceValue(ZaDomain.A_AuthTestResultCode) != ZaDomain.Check_OK);
											}
										],
									 items: [
										{type:_DWT_ALERT_, content:ZaMsg.Domain_AuthTestFailed, alignment:_CENTER_, colSpan:2, style:DwtAlert.CRITICAL},
										{type:_OUTPUT_, ref:ZaDomain.A_AuthTestResultCode, label:ZaMsg.LBL_Domain_AuthTestResultCode, choices:this.TestResultChoices},
										{type:_OUTPUT_, value: ZaMsg.LBL_Domain_AuthTestMessage, colSpan:2},
										{type:_TEXTAREA_, ref:ZaDomain.A_AuthTestMessage, height:80, alignment:_LEFT_, colSpan:2}
									 ]
									}
                                ]
                            }
						]
					},
					/* bug 74123, remove SPNEGO config
					{type:_CASE_, caseKey:ZaTaskAuthConfigWizard.SPNEGO_CONFIG_STEP,colSpan:"*", numCols:1,
						items: [
                            {type:_OUTPUT_, value:ZaMsg.spnegoGlobalSettingTitle,  colSpan:"*"
                            },
                            {type:_OUTPUT_, value:ZaMsg.spnegoGlobalSettingMsg,  colSpan:"*",
                                cssStyle:"padding-left:20px;padding-top:10px;"
                            },
                            {type:_SPACER_, height:10, colSpan:"*"},
                            {type:_OUTPUT_, ref: ZaDomain.A2_zimbraSpnegoGlobalSettingStatus, bmolsnr:true,
                                cssStyle:"padding-left:20px;padding-top:10px;"
                            },
                            {type:_OUTPUT_, label: null, value: ZaMsg.SpnegoGlobalConfig,
                                onClick:ZaTaskAuthConfigWizard.changeSpnegoGlobalConfig,
                                containerCssStyle:"color:blue;cursor:pointer;padding-left:20px;padding-top:10px;"
                            },
                            {type:_SPACER_, height:30, colSpan:"*"},
                            {type:_OUTPUT_, value:ZaMsg.authForSpnegoSettingMsg,  colSpan:"*"
                                //colSpan:"*", cssStyle:"padding-left:10px;padding-top:10px;"
                            },
                            {type:_OUTPUT_, value:ZaMsg.spnegoServerSettingMsg,  colSpan:"*",
                                cssStyle:"padding-left:20px;padding-top:10px;"
                            },
                            {type:_SPACER_, height:10, colSpan:"*"},
                            {type:_GROUP_, numCols:2, colSpan:"*", colSizes:["80px","auto"],items:[
                                {ref:ZaDomain.A2_zimbraSpnegoTargetServer, type:_OSELECT1_,
                                    label:ZaMsg.spnegoTagetServer,
                                    labelLocation:_LEFT_,
                                    labelCssStyle:"text-align:left;padding-left:20px;",
                                    choices:ZaDomain.TARGET_SERVER_CHOICES,
                                    visibilityChecks:[],
                                    enableDisableChecks:[],
                                    editable: true
                                }
                            ]},
                            {type:_OUTPUT_, label: null, value: ZaMsg.SpnegoServerConfig,
                                onClick:ZaTaskAuthConfigWizard.changeSpnegoServerConfig,
                                containerCssStyle:"color:blue;cursor:pointer;padding-left:20px;padding-top:10px;"
                            }
						]
					},
					{type:_CASE_, caseKey:ZaTaskAuthConfigWizard.SPNEGO_CONFIG_STEP_2, colSizes:["200px", "380px"],
						items: [
							{type:_OUTPUT_, value:ZaMsg.spnegoSettingSSOMsg, colSpan:2},
                            {type:_SPACER_, height:10, colSpan:"*"},
                            {ref:ZaDomain.A_zimbraVirtualHostname, type:_REPEAT_,
                                label:ZaMsg.Domain_Tab_VirtualHost, repeatInstance:"", showAddButton:true,
                                labelCssStyle:"text-align:left;vertical-align:top;padding-left:20px;",
                                showRemoveButton:true,
                                addButtonLabel:ZaMsg.NAD_AddVirtualHost,
                                showAddOnNextRow:true,
                                removeButtonLabel:ZaMsg.NAD_RemoveVirtualHost,
                                items: [
                                    {ref:".", type:_TEXTFIELD_, label:null, width:"150px",
                                        enableDisableChecks:[[ZaItem.hasWritePermission,ZaDomain.A_zimbraVirtualHostname]],
                                        visibilityChecks:[[ZaItem.hasReadPermission,ZaDomain.A_zimbraVirtualHostname]],
                                        onChange:ZaDomainXFormView.onFormFieldChanged}
                                ]
                            },
                            {type:_OUTPUT_, value:ZaMsg.spnegoVirtualHostMsg,
                                width:AjxEnv.isIE?"450px":"250px", // bug 71321, IE uses different box model
                                colSpan:"*",cssStyle:"padding-left:200px;"
                            },
                            {type:_SPACER_, height:15, colSpan:"*"},
                            {ref: ZaDomain.A_zimbraWebClientLoginURL,useParentTable: false,
                                colSizes:["275px","*"], colSpan: 2,
                                type:_TEXTFIELD_, width: "150px",
                                labelCssStyle:"text-align:left;padding-left:20px;",
                                msgName: ZaMsg.LBL_zimbraWebClientLoginURL,
                                label: ZaMsg.LBL_zimbraWebClientLoginURL,
                                onChange:ZaDomainXFormView.onFormFieldChanged
                            },
                            {type:_OUTPUT_, value:ZaMsg.spnegoWebClientLoginMsg,
                                width:AjxEnv.isIE?"450px":"250px", // bug 71321, IE uses different box model
                                colSpan:"*",cssStyle:"padding-left:200px;"
                            },
                            {ref: ZaDomain.A_zimbraWebClientLogoutURL,useParentTable: false,
                                colSizes:["275px","*"], colSpan: 2,
                                type:_TEXTFIELD_, width:"150px",
                                labelCssStyle:"text-align:left;padding-left:20px;",
                                msgName: ZaMsg.LBL_zimbraWebClientLogoutURL,
                                label: ZaMsg.LBL_zimbraWebClientLogoutURL,
                                onChange:ZaDomainXFormView.onFormFieldChanged
                            },
                            {type:_OUTPUT_, value:ZaMsg.spnegoWebClientLogoutMsg,
                            	width:AjxEnv.isIE?"450px":"250px", // bug 71321, IE uses different box model
                            	colSpan:"*",cssStyle:"padding-left:200px;"
                            },
                    		{type:_REPEAT_, repeatInstance:"", label: ZaMsg.LBL_zimbraWebClientLoginURLAllowedIP,
                    		 ref: ZaDomain.A_zimbraWebClientLoginURLAllowedIP,
                    		 labelCssStyle:"text-align:left;padding-left:20px;",
                    		 removeButtonLabel: ZaMsg.NAD_Remove,
                    		 addButtonLabel: ZaMsg.NAD_AddAllowedIP,
                    		 showAddButton: true,
                    		 showRemoveButton: true,
                    		 showAddOnNextRow: true,
                    		 items: [
                                  {ref: ".", type:_TEXTFIELD_, width: "150px",
                                   onChange:ZaDomainXFormView.onFormFieldChanged}
                             ]
                            },
                            {type:_SPACER_, height:15, colSpan:"*"},
                            {type:_REPEAT_, repeatInstance:"", label: ZaMsg.LBL_zimbraWebClientLogoutURLAllowedIP,
                       		 ref: ZaDomain.A_zimbraWebClientLogoutURLAllowedIP,
                       		 labelCssStyle:"text-align:left;padding-left:20px;",
                       		 removeButtonLabel: ZaMsg.NAD_Remove,
                       		 addButtonLabel: ZaMsg.NAD_AddAllowedIP,
                       		 showAddButton: true,
                       		 showRemoveButton: true,
                       		 showAddOnNextRow: true,
                       		 items: [
                                     {ref: ".", type:_TEXTFIELD_, width: "150px",
                                      onChange:ZaDomainXFormView.onFormFieldChanged}
                                ]
                            },
                            {type:_SPACER_, height:15, colSpan:"*"},
                            {type:_OUTPUT_, value:ZaMsg.spnegoAllowedUASetting, colSpan:2, cssStyle:"padding-left:20px;"},
                            {type:_SPACER_, height:10, colSpan:"*"},
                            {type: _GROUP_,  id:"spnego_user_agent_settings",
                                numCols: 2, colSpan:2, colSizes:["200px", "*"],
                                items: [
                                    {ref:ZaDomain.A2_zimbraSpnegoUAAllBrowsers, type:_RADIO_, groupname:"user_agent_setting",
										msgName:ZaMsg.SpnegoSettingAllBrowsers,label:ZaMsg.SpnegoSettingAllBrowsers, labelLocation:_RIGHT_,
                                        labelCssClass:"xform_label_right",
										visibilityChecks:[],
										updateElement:function () {
                                            if(ZaTaskAuthConfigWizard.checkRadioEnableDisable(this.getInstance(),ZaDomain.A2_zimbraSpnegoUAAllBrowsers))
											    this.getElement().checked = "TRUE";
										},
										elementChanged: function(elementValue,instanceValue, event) {
											this.setInstanceValue("FALSE",ZaDomain.A2_zimbraSpnegoUACustomBrowsers);
											this.setInstanceValue("FALSE",ZaDomain.A2_zimbraSpnegoUASupportedBrowsers);
                                            this.setInstanceValue("TRUE",ZaDomain.A2_zimbraSpnegoUAAllBrowsers);

										}
									},
                                    {ref:ZaDomain.A2_zimbraSpnegoUASupportedBrowsers, type:_RADIO_, groupname:"user_agent_setting",
										msgName:ZaMsg.SpnegoSettingSupportedBrowsers,label:ZaMsg.SpnegoSettingSupportedBrowsers, labelLocation:_RIGHT_,
                                        labelCssClass:"xform_label_right",
										visibilityChecks:[],
										updateElement:function () {
                                            if(ZaTaskAuthConfigWizard.checkRadioEnableDisable(this.getInstance(),ZaDomain.A2_zimbraSpnegoUASupportedBrowsers))
											    this.getElement().checked = "TRUE";
										},
										elementChanged: function(elementValue,instanceValue, event) {
											this.setInstanceValue("FALSE",ZaDomain.A2_zimbraSpnegoUACustomBrowsers);
											this.setInstanceValue("FALSE",ZaDomain.A2_zimbraSpnegoUAAllBrowsers);
                                            this.setInstanceValue("TRUE",ZaDomain.A2_zimbraSpnegoUASupportedBrowsers);
										}
									},
                                    {ref:ZaDomain.A2_zimbraSpnegoUACustomBrowsers, type:_RADIO_, groupname:"user_agent_setting",
										msgName:ZaMsg.SpnegoSettingCustomBrowsers,label:ZaMsg.SpnegoSettingCustomBrowsers, labelLocation:_RIGHT_,
                                        labelCssClass:"xform_label_right",
										updateElement:function () {
                                            if(ZaTaskAuthConfigWizard.checkRadioEnableDisable(this.getInstance(),ZaDomain.A2_zimbraSpnegoUACustomBrowsers))
											    this.getElement().checked = "TRUE";
										},
										visibilityChecks:[],
										elementChanged: function(elementValue,instanceValue, event) {
											this.setInstanceValue("FALSE",ZaDomain.A2_zimbraSpnegoUAAllBrowsers);
											this.setInstanceValue("FALSE",ZaDomain.A2_zimbraSpnegoUASupportedBrowsers);
                                            this.setInstanceValue("TRUE",ZaDomain.A2_zimbraSpnegoUACustomBrowsers);
										}
									},
                                    {type:_GROUP_, numCols:3, colSpan:"*", colSizes:["275px","80px","auto"],
                                        cssStyle:"margin-bottom:10px;padding-bottom:0px;margin-top:0px;margin-left:10px;margin-right:10px;",
                                        items: [
                                            {type:_CELLSPACER_},
                                            {type:_DWT_BUTTON_, label:ZaMsg.spnegoAllowedUASetting_specify,width:"70px",
                                                enableDisableChangeEventSources:[ZaDomain.A2_zimbraSpnegoUACustomBrowsers],
                                                enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_zimbraSpnegoUACustomBrowsers,'TRUE']],
                                                onActivate:"ZaTaskAuthConfigWizard.customAllowedUASetting.call(this);"
                                            }
                                        ]
                                    }
                                ]
							}
						]
					}, */
					{type:_CASE_, caseKey:ZaTaskAuthConfigWizard.EXTERNAL_LDAP_GROUP_STEP, colSizes:["200px", "*"],
						items: [
                            {type:_OUTPUT_, ref: ZaDomain.A_zimbraAuthMechAdmin, label: "Auth Mech for Admin:", choices:this.AuthMechs},
                            {type:_TEXTAREA_, ref:ZaDomain.A_zimbraExternalGroupLdapSearchBase, label: "External Group LDAP Search Base:"},
                            {type:_TEXTAREA_, ref:ZaDomain.A_zimbraExternalGroupLdapSearchFilter, label: "External Group LDAP Search Filter:"},
                            {type:_TEXTFIELD_, ref:ZaDomain.A_zimbraExternalGroupHandlerClass, width:"100%", label :"External Group Handle Class Name:"}
						]
					},
					{type:_CASE_, caseKey:ZaTaskAuthConfigWizard.CONFIG_COMPLETE_STEP,
						items: [
							{type:_OUTPUT_, value:ZaMsg.Domain_Auth_Config_Complete}
						]
					}
				]
			}
		];
}
ZaXDialog.XFormModifiers["ZaTaskAuthConfigWizard"].push(ZaTaskAuthConfigWizard.myXFormModifier);

ZaTaskAuthConfigWizard.startTlsEnabledChanged =  function (value, event, form) {
	this.setInstanceValue(value);
    var instance = form.getInstance () ;
    var ldapUrls = instance.attrs[ZaDomain.A_AuthLdapURL] ;
    var newUrls = [];
    if (ZaSettings.isDomainAdmin && (instance.attrs[ZaDomain.A_zimbraAdminConsoleLDAPAuthEnabled] == "TRUE")
               && instance.attrs[ZaDomain.A_zimbraAuthLdapStartTlsEnabled] != "TRUE") {
        //force ldaps protocol
        instance[ZaDomain.A2_allowClearTextLDAPAuth] = "FALSE" ;

        for (var i=0; i< ldapUrls.length; i++) {
            var ldapUrl = ldapUrls [i] ;
            if (ldapUrl == null || ldapUrl.length <=0) {
            }else {
                //force to use ldaps://
                ldapUrls[i] = ldapUrl.replace("ldap://", "ldaps://")  ;
                newUrls.push (ldapUrls[i]);
            }
        }

    }else{
        for (var i=0; i< ldapUrls.length; i++) {
            var ldapUrl = ldapUrls [i] ;
            //remove this empty item
            if (ldapUrl == null || ldapUrl.length <=0) {

            }else {
                newUrls.push (ldapUrls[i]);
            }
        }
        instance[ZaDomain.A2_allowClearTextLDAPAuth] = "TRUE" ;
    }

    instance.attrs[ZaDomain.A_AuthLdapURL] = newUrls ;
    form.refresh ();
}

ZaTaskAuthConfigWizard.autoTestSetting = function() {
	this.getForm().setInstanceValue("RUNNING", ZaDomain.A2_zimbraAuthConfigTestStatus);
    var parent = this.getForm().parent;
    parent.testSetings();
    
}

ZaTaskAuthConfigWizard.checkSpnegoApplyType = function(refPath,val) {
    var instance = this.getInstance();
    return (instance[refPath] == val);

}

ZaTaskAuthConfigWizard.changeSpnegoGlobalConfig = function() {
    var instance = this.getInstance();
    ZaTaskAuthConfigWizard.spnegoGlobalServerSetting(instance, ZaItem.GLOBAL_CONFIG);
}

ZaTaskAuthConfigWizard.changeSpnegoServerConfig = function() {
    var instance = this.getInstance();
    ZaTaskAuthConfigWizard.spnegoGlobalServerSetting(instance, ZaItem.SERVER);
}

ZaTaskAuthConfigWizard.changeSpnegoDomainConfig = function() {
    var instance = this.getInstance();
    instance[ZaDomain.A2_zimbraSpnegoApplyFor] = ZaItem.DOMAIN;
    var parent = this.getForm().parent;
    parent.goPage(ZaTaskAuthConfigWizard.SPNEGO_CONFIG_STEP_1);
}

ZaTaskAuthConfigWizard.checkRadioEnableDisable = function (instance, refPath) {
    if(!instance) return false;
    if(instance.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA]
            && instance.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA]
            && (instance.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA].join(";")
                == instance.attrs[ZaDomain.A_zimbraWebClientLogoutURLAllowedUA].join(";"))
            && (instance.attrs[ZaDomain.A_zimbraWebClientLoginURLAllowedUA].join(";")
                == ZaDomain.SPNEGO_SUPPORT_UA.join(";"))
    ) {
        if(ZaDomain.A2_zimbraSpnegoUASupportedBrowsers == refPath)
            return true;
    } else  {
        if(ZaDomain.A2_zimbraSpnegoUACustomBrowsers == refPath)
            return true;
    }
    return false;

}

ZaTaskAuthConfigWizard.getGlobalSettingMsg = function (instance) {
    if((!instance[ZaDomain.A2_zimbraSpnegoGlobalAuthEnabled]
            ||instance[ZaDomain.A2_zimbraSpnegoGlobalAuthEnabled] == "FALSE")
        && !instance[ZaDomain.A2_zimbraSpnegoAuthErrorURL]
            && !instance[ZaDomain.A2_zimbraSpnegoAuthRealm])
        return ZaMsg.spnegoGlobalSettingEmpty;
    if(!instance[ZaDomain.A2_zimbraSpnegoGlobalAuthEnabled]
            ||instance[ZaDomain.A2_zimbraSpnegoGlobalAuthEnabled] == "FALSE")
        return ZaMsg.spnegoGlobalSettingUnenabled;
    else return ZaMsg.spnegoGlobalSettingUnempty;
}

ZaTaskAuthConfigWizard.customAllowedUASetting = function() {
    if(!ZaApp.getInstance().dialogs["spnegoUACustomDialog"]) {
        ZaApp.getInstance().dialogs["spnegoUACustomDialog"] = new ZaSpnegoUACustomDialog(
            ZaApp.getInstance().getAppCtxt().getShell(), "450px", "280px",ZaMsg.SpnegoSettingCustomDialogTitle );
        ZaApp.getInstance().dialogs["spnegoUACustomDialog"].registerCallback(
                DwtDialog.OK_BUTTON, ZaSpnegoUACustomDialog.updateSpnegoUASetting,
                this, ZaApp.getInstance().dialogs["spnegoUACustomDialog"]._localXForm );
    }
    var allowedUAs = this.getInstanceValue(ZaDomain.A_zimbraWebClientLoginURLAllowedUA);
    var obj = {};
    if(typeof allowedUAs == "string")
        obj[ZaDomain.A2_zimbraWebClientURLAllowedUA] = allowedUAs;
    else if(allowedUAs instanceof Array)
        obj[ZaDomain.A2_zimbraWebClientURLAllowedUA] = allowedUAs.join('\n');

    ZaApp.getInstance().dialogs["spnegoUACustomDialog"].setObject(obj);
    ZaApp.getInstance().dialogs["spnegoUACustomDialog"].popup();
}

ZaTaskAuthConfigWizard.spnegoGlobalServerSetting = function(obj, caller) {
    var instance = {};
    if(obj) instance = obj;
    var titleText = ZaMsg.SpnegoSettingGlobalDialogTitle;
    if(caller == ZaItem.GLOBAL_CONFIG) {
        instance[ZaDomain.A2_zimbraSpnegoApplyFor] = ZaItem.GLOBAL_CONFIG;
    } else if(caller == ZaItem.SERVER) {
        titleText = ZaMsg.SpnegoSettingServerDialogTitle;
        instance[ZaDomain.A2_zimbraSpnegoApplyFor] = ZaItem.SERVER;
        var serverList = ZaApp.getInstance().getServerList().getArray();
        var serverObj = null;
        for(var i = 0; i < serverList.length; i++) {
            if(serverList[i].id == instance[ZaDomain.A2_zimbraSpnegoTargetServer]) {
                serverObj = serverList[i];
                break;
            }
        }
        if(serverObj) {
            instance[ZaDomain.A2_zimbraSpnegoAuthPrincipal] = serverObj.attrs[ZaServer.A_zimbraSpnegoAuthPrincipal];
            instance[ZaDomain.A2_zimbraSpnegoAuthTargetName] = serverObj.attrs[ZaServer.A_zimbraSpnegoAuthTargetName];
        }
    }

    if(!ZaApp.getInstance().dialogs["updateGlobalServerDialog"]) {
        ZaApp.getInstance().dialogs["updateGlobalServerDialog"] = new ZaSpnegoGlobalServerDialog(
            ZaApp.getInstance().getAppCtxt().getShell(), "700px", "350px",titleText );
        ZaApp.getInstance().dialogs["updateGlobalServerDialog"].registerCallback(
                DwtDialog.OK_BUTTON, ZaSpnegoGlobalServerDialog.updateGlobalServerSetting,
                instance, ZaApp.getInstance().dialogs["updateGlobalServerDialog"]._localXForm );
    } else
        ZaApp.getInstance().dialogs["updateGlobalServerDialog"].setTitle(titleText);

    ZaApp.getInstance().dialogs["updateGlobalServerDialog"].setObject(instance);
    ZaApp.getInstance().dialogs["updateGlobalServerDialog"].popup();
}

ZaTaskAuthConfigWizard.clientUAChanged = function (value, event, form) {
    var instance = this.getInstance();
}

///////////  Custom UA dialog //////////////

ZaSpnegoUACustomDialog = function(parent,   w, h, title) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];
	ZaXDialog.call(this, parent, "ZaSpnegoUACustomDialog", title, w, h,null,ZaId.DLG_AUTH_SPNEGO_UA);
	this._containedObject = {};
	this.initForm(ZaAlias.myXModel,this.getMyXForm());
    //this._helpURL = ZaSpnegoUACustomDialog.helpURL;
}

ZaSpnegoUACustomDialog.prototype = new ZaXDialog;
ZaSpnegoUACustomDialog.prototype.constructor = ZaSpnegoUACustomDialog;



ZaSpnegoUACustomDialog.prototype.getMyXForm =
function() {
	var xFormObject = {
		numCols:1,
		items:[
            {type:_GROUP_,numCols:1,colSizes:["100%"],items: [ //allows tab key iteration
                {type:_OUTPUT_, value:ZaMsg.SpnegoSettingCustomDialogHeader, cssStyle:"padding-bottom:20px;padding-top:10px;"},
                {ref:ZaDomain.A2_zimbraWebClientURLAllowedUA, type:_TEXTAREA_, width:450, height:100, align:_CENTER_
                },
                {type:_OUTPUT_, value:ZaMsg.SpnegoSettingCustomDialogHelp, cssStyle:"padding-bottom:10px;padding-top:20px;"}
            ]}
        ]
	};
	return xFormObject;
}

ZaSpnegoUACustomDialog.updateSpnegoUASetting = function() {
    if(ZaApp.getInstance().dialogs["spnegoUACustomDialog"])
        ZaApp.getInstance().dialogs["spnegoUACustomDialog"].popdown();
    var obj = ZaApp.getInstance().dialogs["spnegoUACustomDialog"].getObject();
    var allowedUA = [];
    if(obj[ZaDomain.A2_zimbraWebClientURLAllowedUA]) {
        allowedUA = obj[ZaDomain.A2_zimbraWebClientURLAllowedUA].split("\n");
    }
    this.setInstanceValue(allowedUA, ZaDomain.A_zimbraWebClientLoginURLAllowedUA);
    this.setInstanceValue(allowedUA, ZaDomain.A_zimbraWebClientLogoutURLAllowedUA);
}


///////////  Spnego Global & Server dialog //////////////



ZaSpnegoGlobalServerDialog = function(parent,   w, h, title) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];
	ZaXDialog.call(this, parent, "ZaSpnegoUACustomDialog", title, w, h,null,ZaId.DLG_AUTH_SPNEGO);
	this._containedObject = {};
	this.initForm(ZaAlias.myXModel,this.getMyXForm());
    //this._helpURL = ZaSpnegoGlobalServerDialog.helpURL;
}

ZaSpnegoGlobalServerDialog.prototype = new ZaXDialog;
ZaSpnegoGlobalServerDialog.prototype.constructor = ZaSpnegoGlobalServerDialog;



ZaSpnegoGlobalServerDialog.prototype.getMyXForm =
function() {
	var xFormObject = {
		numCols:1,
		items:[
            {type:_GROUP_,numCols:1,colSizes:["100%"],items: [ //allows tab key iteration
                {type:_GROUP_, colSpan:2,numCols:2,colSizes:["150px","430px"],
                    visibilityChecks:[[ZaTaskAuthConfigWizard.checkSpnegoApplyType,ZaDomain.A2_zimbraSpnegoApplyFor,ZaItem.GLOBAL_CONFIG]],
                    visibilityChangeEventSources:[ZaDomain.A2_zimbraSpnegoApplyFor],
                    items:[
                            {type:_OUTPUT_, value:ZaMsg.spnegoGlobalSettingPageTitle, colSpan:2},
                            {type:_SPACER_, height:10, colSpan:"*"},
                            {ref: ZaDomain.A2_zimbraSpnegoGlobalAuthEnabled, type: _CHECKBOX_,
                                label:ZaMsg.EnableSpnegoGlobal, width: "200px", subLabel:"",
                                labelLocation:_RIGHT_, align:_RIGHT_,
                                //labelCssStyle:"text-align:left;padding-left:20px;",
                                trueValue: "TRUE", falseValue: "FALSE"
                            },
                            {ref: ZaDomain.A2_zimbraSpnegoAuthRealm,
                                type: _TEXTFIELD_, width: "200px",
                                label: ZaMsg.LBL_zimbraSpnegoAuthRealm, labelCssStyle:"text-align:left;padding-left:20px;"
                            },
                            {ref: ZaDomain.A2_zimbraSpnegoAuthErrorURL,
                                type: _TEXTFIELD_, width: "200px",
                                label: ZaMsg.LBL_zimbraSpnegoAuthErrorURL, labelCssStyle:"text-align:left;padding-left:20px;"
                            }
                    ]
                },
                {type:_GROUP_, colSpan:2,numCols:2,colSizes:["150px","430px"],
                    visibilityChecks:[[ZaTaskAuthConfigWizard.checkSpnegoApplyType,ZaDomain.A2_zimbraSpnegoApplyFor,ZaItem.SERVER]],
                    visibilityChangeEventSources:[ZaDomain.A2_zimbraSpnegoApplyFor],
                    items:[
                            {type:_OUTPUT_, value:ZaMsg.spnegoServerSettingPageTitle, colSpan:2},
                            {type:_SPACER_, height:10, colSpan:"*"},
                            {ref:ZaDomain.A2_zimbraSpnegoAuthPrincipal, type:_TEXTFIELD_,
                                labelCssStyle:"text-align:left;padding-left:20px;",
                                label:ZaMsg.NAD_MTA_SpnegoAuthPrincipal, width: "20em",
                                onChange: ZaServerXFormView.onFormFieldChanged
                            },
                            {ref:ZaDomain.A2_zimbraSpnegoAuthTargetName, type:_TEXTFIELD_,
                                labelCssStyle:"text-align:left;padding-left:20px;",
                                label:ZaMsg.NAD_MTA_SpnegoAuthTargetName, width: "20em",
                                onChange: ZaServerXFormView.onFormFieldChanged
                            }
                    ]
                }
            ]}
        ]
	};
	return xFormObject;
}

ZaSpnegoGlobalServerDialog.updateGlobalServerSetting = function() {
    if(ZaApp.getInstance().dialogs["updateGlobalServerDialog"])
        ZaApp.getInstance().dialogs["updateGlobalServerDialog"].popdown();
    else return;

    var attr = null;
    var soapDoc = null;
    var obj = ZaApp.getInstance().dialogs["updateGlobalServerDialog"].getObject();
    if(obj[ZaDomain.A2_zimbraSpnegoApplyFor] == ZaItem.GLOBAL_CONFIG) {
        var autoDlgForm = ZaApp.getInstance().dialogs["authWizard"]._localXForm;
        autoDlgForm.setInstanceValue(ZaTaskAuthConfigWizard.getGlobalSettingMsg(obj),
                ZaDomain.A2_zimbraSpnegoGlobalSettingStatus);

        soapDoc = AjxSoapDoc.create("ModifyConfigRequest", ZaZimbraAdmin.URN, null);

        if(obj[ZaDomain.A2_zimbraSpnegoGlobalAuthEnabled]) {
            attr = soapDoc.set("a", obj[ZaDomain.A2_zimbraSpnegoGlobalAuthEnabled]);
            attr.setAttribute("n", ZaGlobalConfig.A_zimbraSpnegoAuthEnabled);
        }
        if(obj[ZaDomain.A2_zimbraSpnegoAuthRealm]) {
            attr = soapDoc.set("a", obj[ZaDomain.A2_zimbraSpnegoAuthRealm]);
            attr.setAttribute("n", ZaDomain.A2_zimbraSpnegoAuthRealm);
        }
        if(obj[ZaDomain.A2_zimbraSpnegoAuthErrorURL]) {
            attr = soapDoc.set("a", obj[ZaDomain.A2_zimbraSpnegoAuthErrorURL]);
            attr.setAttribute("n", ZaDomain.A2_zimbraSpnegoAuthErrorURL);
        }

        var params = new Object();
        params.soapDoc = soapDoc;
        var reqMgrParams = {
            controller : ZaApp.getInstance().getCurrentController(),
            busyMsg : ZaMsg.BUSY_GET_ALL_CONFIG
        }
	    ZaRequestMgr.invoke(params, reqMgrParams);

    } else if(obj[ZaDomain.A2_zimbraSpnegoApplyFor] == ZaItem.SERVER && obj[ZaDomain.A2_zimbraSpnegoTargetServer]) {
        soapDoc = AjxSoapDoc.create("ModifyServerRequest", ZaZimbraAdmin.URN, null);
        soapDoc.set("id", obj[ZaDomain.A2_zimbraSpnegoTargetServer]);
        if(obj[ZaDomain.A2_zimbraSpnegoAuthPrincipal]) {
            attr = soapDoc.set("a", obj[ZaDomain.A2_zimbraSpnegoAuthPrincipal]);
            attr.setAttribute("n", ZaDomain.A2_zimbraSpnegoAuthPrincipal);
        }
        if(obj[ZaDomain.A2_zimbraSpnegoAuthTargetName]) {
            attr = soapDoc.set("a", obj[ZaDomain.A2_zimbraSpnegoAuthTargetName]);
            attr.setAttribute("n", ZaDomain.A2_zimbraSpnegoAuthTargetName);
        }

		var params = new Object();
		params.soapDoc = soapDoc;
		var reqMgrParams = {
			controller : ZaApp.getInstance().getCurrentController(),
			busyMsg : ZaMsg.BUSY_MODIFY_SERVER
		}
		ZaRequestMgr.invoke(params, reqMgrParams);
    }

}
}
if (AjxPackage.define("zimbraAdmin.domains.view.ZaTaskAutoProvDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: qinan
 * Date: 8/24/11
 * Time: 4:29 PM
 * To change this template use File | Settings | File Templates.
 */


ZaTaskAutoProvDialog = function(parent, title, width, height) {
    if (arguments.length == 0) return;
    var applyButton = new DwtDialog_ButtonDescriptor(ZaTaskAutoProvDialog.APPLY_BUTTON, ZaMsg.LBL_ApplyButton,
            DwtDialog.ALIGN_RIGHT, new AjxCallback(this, this._applyButtonListener));
    var helpButton = new DwtDialog_ButtonDescriptor(ZaXWizardDialog.HELP_BUTTON, ZaMsg.TBB_Help,
        DwtDialog.ALIGN_LEFT, new AjxCallback(this, this._helpButtonListener));
    this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];
    this._extraButtons = [helpButton, applyButton];
    this._width = width || "680px";
    this._height = height || "390px";
    ZaXDialog.call(this, parent, null, title, this._width, this._height, null, ZaId.DLG_AUTPROV_MANUAL+"_ENHANCE");
    this._containedObject = {};
    this.initForm(ZaDomain.myXModel,this.getMyXForm());
    this._helpURL = ZaTaskAutoProvDialog.helpURL;

	this._forceApplyMessageDialog = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON],null,ZaId.CTR_PREFIX + ZaId.VIEW_DMLIST + "_forceApplyConfirm");
    this._forceApplyMessageDialog.registerCallback(DwtDialog.YES_BUTTON, ZaTaskAutoProvDialog.prototype._forceApplyCallback, this);

	this._localXForm.addListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, new AjxListener(this, ZaTaskAutoProvDialog.prototype.handleXFormChange));
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, new AjxListener(this, ZaTaskAutoProvDialog.prototype.handleXFormChange));
}

ZaTaskAutoProvDialog.prototype = new ZaXDialog;
ZaTaskAutoProvDialog.prototype.constructor = ZaTaskAutoProvDialog;
ZaTaskAutoProvDialog.prototype.supportMinimize = true;
ZaTaskAutoProvDialog.helpURL = ZaUtil.HELP_URL;

ZaTaskAutoProvDialog.APPLY_BUTTON = ++DwtDialog.LAST_BUTTON;

ZaTaskAutoProvDialog.prototype.getCacheName = function(){
    return "ZaTaskAutoProvDialog";
}

ZaTaskAutoProvDialog.prototype.setObject = function(entry) {
    this._containedObject = new ZaDomain();
    ZaItem.prototype.copyTo.call(entry,this._containedObject,true,4);

    this._containedObject[ZaDomain.A2_zimbraAutoProvSearchActivated] = entry[ZaDomain.A2_zimbraAutoProvSearchActivated] || "TRUE";
    if(entry.attrs[ZaDomain.A_zimbraAutoProvAttrMap] && (typeof entry.attrs[ZaDomain.A_zimbraAutoProvAttrMap] == "string"))
         this._containedObject.attrs[ZaDomain.A_zimbraAutoProvAttrMap] = [entry.attrs[ZaDomain.A_zimbraAutoProvAttrMap]];

    // auto provisioning object backup
    this._backupLdapObj(this._containedObject);
    this._containedObject[ZaDomain.A2_zimbraAutoProvAccountPool] = entry[ZaDomain.A2_zimbraAutoProvAccountPool] || [];
    this._containedObject[ZaDomain.A2_zimbraAutoProvAccountTargetPool] = entry[ZaDomain.A2_zimbraAutoProvAccountTargetPool] || [];

    this._separateConfigureValues(this._containedObject);
    //ZaXDialog.prototype.setObject.call(this,entry);
    this._containedObject._uuid = entry._extid || entry._uuid;
    this._containedObject._editObject = entry._editObject;

    this._localXForm.setInstance(this._containedObject);


    this._button[DwtDialog.OK_BUTTON].setEnabled(false);
    this._button[ZaTaskAutoProvDialog.APPLY_BUTTON].setEnabled(false);
}

ZaTaskAutoProvDialog.prototype.finishWizard =
function(ev) {
	try {
        if(!this._checkGeneralConfig() || !this._checkEagerConfig()
                || !this._checkLazyConfig()) {
            return;
        }
        this._combineConfigureValues(this._containedObject);
		ZaDomain.modifyAutoPovSettings.call(this._containedObject._editObject,this._containedObject);
		ZaApp.getInstance().getDomainListController()._fireDomainChangeEvent(this._containedObject._editObject);
		this.popdown();
		ZaApp.getInstance().getDomainListController()._notifyAllOpenTabs();
	} catch (ex) {
		this._handleException(ex, "ZaDomainListController.prototype._finishAutoProvButtonListener", null, false);
	}
	return;
}

ZaTaskAutoProvDialog.prototype.handleXFormChange =
function() {
    if(this._localXForm.hasErrors()) {
        this._button[DwtDialog.OK_BUTTON].setEnabled(false);
        this._button[ZaTaskAutoProvDialog.APPLY_BUTTON].setEnabled(false);
    } else {
        this._button[DwtDialog.OK_BUTTON].setEnabled(true);
        this._button[ZaTaskAutoProvDialog.APPLY_BUTTON].setEnabled(true);
    }

    // check modification
    this.tabClickHandler();
}

ZaTaskAutoProvDialog.prototype.getMyXForm =
function() {
    this.tabChoices = new Array();
    this.TAB_INDEX = 0;
	var _tab1, _tab2, _tab3, _tab4, _tab5;

	_tab1 = ++this.TAB_INDEX;
	this.tabChoices.push({value:_tab1, label:ZaMsg.TBB_AUTOPROV_GENERAL});

    _tab2 = ++this.TAB_INDEX;
    this.tabChoices.push({value:_tab2, label:ZaMsg.TBB_AUTOPROV_EAGER});

    _tab3 = ++this.TAB_INDEX;
    this.tabChoices.push({value:_tab3, label:ZaMsg.TBB_AUTOPROV_LAZY});

    this.TAB_STEP_MANUAL = _tab4 = ++this.TAB_INDEX;
    this.tabChoices.push({value:_tab4, label:ZaMsg.TBB_AUTOPROV_MANUAL});

    _tab5 = ++this.TAB_INDEX;
    this.tabChoices.push({value:_tab5, label:ZaMsg.TBB_zimbraAutoProvEmailSetting});

	var cases = [];
    var case1={type:_ZATABCASE_, numCols:2,colSizes:["150px","490px"], caseKey:_tab1, id:"auto_provision_config_general",
        getCustomWidth:ZaTaskAutoProvDialog.getCustomWidth,
        getCustomHeight:ZaTaskAutoProvDialog.getCustomHeight,
        items: [
            {type: _SPACER_, height: 10 },
            {type:_GROUPER_, colSpan:"*", width: "100%",label:"LDAP Configuration", containerCssStyle: "padding-top:5px",
                enableDisableChecks:[],
                enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvModeEAGEREnabled, ZaDomain.A2_zimbraAutoProvModeLAZYEnabled,
                ZaDomain.A2_zimbraAutoProvModeMANUALEnabled],
            items: [
            {type:_GROUP_, numCols:6, label:"   ", labelLocation:_LEFT_,
                visibilityChecks: [],
                visibilityChangeEventSources:[],
                items: [
                    {type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"35px"},
                    {type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthLDAPServerName, width:"200px"},
                    {type:_OUTPUT_, label:null, labelLocation:_NONE_, value:" ", width:"5px"},
                    {type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthLDAPServerPort,  width:"40px"},
                    {type:_OUTPUT_, label:null, labelLocation:_NONE_, value:ZaMsg.Domain_AuthLDAPUseSSL, width:"80px"}
                ]
            },


            {ref:ZaDomain.A_zimbraAutoProvLdapURL, type:_LDAPURL_, label:ZaMsg.LBL_zimbraAutoProvLdapURL,
                ldapSSLPort:"636",ldapPort:"389",
                labelLocation:_LEFT_,
                label: ZaMsg.LBL_zimbraAutoProvLdapURL
            },
            {ref:ZaDomain.A_zimbraAutoProvLdapStartTlsEnabled, type:_CHECKBOX_,
                label:ZaMsg.LBL_zimbraAutoProvLdapStartTlsEnabled, subLabel:"", align:_RIGHT_,
                trueValue:"TRUE", falseValue:"FALSE",labelLocation:_RIGHT_
            },
            {ref:ZaDomain.A_zimbraAutoProvLdapAdminBindDn, type:_INPUT_,
                label:ZaMsg.LBL_zimbraAutoProvLdapAdminBindDn, labelLocation:_LEFT_,
                enableDisableChecks:[],
                enableDisableChangeEventSources:[]
            },
            {ref:ZaDomain.A_zimbraAutoProvLdapAdminBindPassword, type:_SECRET_,
                label:ZaMsg.LBL_zimbraAutoProvLdapAdminBindPassword, labelLocation:_LEFT_
            },
            {ref:ZaDomain.A_zimbraAutoProvLdapSearchFilter, type:_TEXTAREA_, width:350, height:40,
                label:ZaMsg.LBL_zimbraAutoProvLdapSearchFilter, labelLocation:_LEFT_,
                textWrapping:"soft"
            },
            {ref:ZaDomain.A_zimbraAutoProvLdapSearchBase, type:_TEXTAREA_, width:350, height:40,
                label:ZaMsg.LBL_zimbraAutoProvLdapSearchBase, labelLocation:_LEFT_,
                textWrapping:"soft"
            },
            {ref:ZaDomain.A_zimbraAutoProvLdapBindDn, type:_INPUT_,
                label:ZaMsg.LBL_zimbraAutoProvLdapBindDn, labelLocation:_LEFT_
            }
            ]},
            {type: _SPACER_, height: 10 },
            {ref:ZaDomain.A_zimbraAutoProvNotificationFromAddress, type:_TEXTFIELD_,
                label:ZaMsg.LBL_zimbraAutoProvNotificationFromAddress, labelLocation:_LEFT_,
                width:250, onChange:ZaDomainXFormView.onFormFieldChanged
            },
            {ref:ZaDomain.A_zimbraAutoProvAccountNameMap, type:_TEXTFIELD_,
                label:ZaMsg.LBL_zimbraAutoProvAccountNameMap, labelLocation:_LEFT_,
                width:250, onChange:ZaDomainXFormView.onFormFieldChanged
            },
            {ref:ZaDomain.A_zimbraAutoProvAttrMap, type:_REPEAT_,
                label:ZaMsg.LBL_zimbraAutoProvAttrMap, repeatInstance:"", showAddButton:true,
                showRemoveButton:true,
                    addButtonLabel:ZaMsg.NAD_Add,
                    showAddOnNextRow:true,
                    removeButtonLabel:ZaMsg.NAD_Remove,
                    items: [
                        {ref:".", type:_TEXTFIELD_, label:null,
                        enableDisableChecks:[], visibilityChecks:[],
                        onChange:ZaDomainXFormView.onFormFieldChanged}
                    ]
            }

        ]
    };
    cases.push(case1);

    var case2={type:_ZATABCASE_, numCols:2,colSizes:["45px","*"], caseKey:_tab2,  //cssStyle:"width:550px;",//width: "650px",
        id:"auto_provision_config_eager", getCustomWidth:ZaTaskAutoProvDialog.getCustomWidth,
        getCustomHeight:ZaTaskAutoProvDialog.getCustomHeight,
        items: [
            {type: _SPACER_, height: 20 },
            {ref:ZaDomain.A2_zimbraAutoProvModeEAGEREnabled, type:_CHECKBOX_,
                label:ZaMsg.LBL_zimbraAutoProvModeEAGER, subLabel:"", align:_RIGHT_,
                trueValue:"TRUE", falseValue:"FALSE",labelLocation:_RIGHT_
            },
            {type: _SPACER_, height: 20 },
            {type:_GROUPER_, colSpan:"*", width: "100%",label:"Configuration", containerCssStyle: "padding-top:5px", colSizes:["175px","*"], numCols:2,
                enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_zimbraAutoProvModeEAGEREnabled,"TRUE"]],
                enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvModeEAGEREnabled],
                items: [
                {ref:ZaDomain.A_zimbraAutoProvBatchSize, type:_TEXTFIELD_, label:ZaMsg.LBL_zimbraAutoProvBatchSize,
                    autoSaveValue:true, labelLocation:_LEFT_,
                    enableDisableChecks: [[XForm.checkInstanceValue,ZaDomain.A2_zimbraAutoProvModeEAGEREnabled,"TRUE"]],
                    enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvModeEAGEREnabled],
                    cssClass:"admin_xform_number_input"
                },
                {ref:ZaDomain.A2_zimbraAutoProvPollingInterval, type:_LIFETIME_,
                    colSizes:["80px","100px","*"],
                    label:ZaMsg.LBL_zimbraAutoProvPollingInterval, labelLocation:_LEFT_,
                    enableDisableChecks: [[XForm.checkInstanceValue,ZaDomain.A2_zimbraAutoProvModeEAGEREnabled,"TRUE"]],
                    enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvModeEAGEREnabled]
                },
                {type: _DWT_LIST_, ref: ZaDomain.A2_zimbraAutoProvServerList,  width: 250, height: 50,
                    label:ZaMsg.LBL_zimbraAutoProvServerList,
                    labelLocation:_LEFT_,   labelCssStyle:"vertical-align:top",
                    nowrap:false,labelWrap:true,
                    forceUpdate: true, widgetClass: ZaServerOptionList,
                    multiselect: true, preserveSelection: true,
                    enableDisableChecks: [[XForm.checkInstanceValue,ZaDomain.A2_zimbraAutoProvModeEAGEREnabled,"TRUE"]],
                    enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvModeEAGEREnabled],
                    onSelection: ZaTaskAutoProvDialog.filterSelectionListener
                }
            ]},
            {type:_GROUPER_, colSpan:"*", width: "100%",label:"Note",
                containerCssStyle: "padding-top:15px", numCols:1,
                items: [
                    {type:_OUTPUT_,value:ZaMsg.MSG_AUTOPROV_DLG_EAGER}
            ]}
        ]
    };
    cases.push(case2);

    var case3={type:_ZATABCASE_, numCols:2,colSizes:["45px","*"],  caseKey:_tab3,
        id:"auto_provision_config_lazy", getCustomWidth:ZaTaskAutoProvDialog.getCustomWidth,
        getCustomHeight:ZaTaskAutoProvDialog.getCustomHeight,
        items: [
            {type: _SPACER_, height: 20 },
            {ref:ZaDomain.A2_zimbraAutoProvModeLAZYEnabled, type:_CHECKBOX_,
                label:ZaMsg.LBL_zimbraAutoProvModeLAZY, subLabel:"", align:_RIGHT_,
                trueValue:"TRUE", falseValue:"FALSE",labelLocation:_RIGHT_
            },
            {type: _SPACER_, height: 20 },
            {type:_GROUPER_, colSpan:"*", width: "100%",label:"Configuration", containerCssStyle: "padding-top:5px", colSizes:["200px","*"], numCols:2,
            items: [
                {type:_GROUP_, numCols:2, label:ZaMsg.LBL_zimbraAutoProvAuthMech,
                    labelLocation:_LEFT_, colSizes:["20px","150px"],labelCssStyle:"vertical-align:top",
                    nowrap:false,labelWrap:true,
                    enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_zimbraAutoProvModeLAZYEnabled,"TRUE"]],
                    enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvModeLAZYEnabled],
                    items: [
                        {ref:ZaDomain.A2_zimbraAutoProvAuthMechLDAPEnabled, type:_CHECKBOX_,
                            label:ZaMsg.LBL_zimbraAutoProvAuthMechLDAP, subLabel:"",
                            trueValue:"TRUE", falseValue:"FALSE",labelLocation:_RIGHT_
                        },
                        {ref:ZaDomain.A2_zimbraAutoProvAuthMechPREAUTHEnabled, type:_CHECKBOX_,
                            label:ZaMsg.LBL_zimbraAutoProvAuthMechPREAUTH, subLabel:"",
                            trueValue:"TRUE", falseValue:"FALSE",labelLocation:_RIGHT_
                        },
                        {ref:ZaDomain.A2_zimbraAutoProvAuthMechKRB5Enabled, type:_CHECKBOX_,
                            label:ZaMsg.LBL_zimbraAutoProvAuthMechKRB5, subLabel:"",
                            trueValue:"TRUE", falseValue:"FALSE",labelLocation:_RIGHT_
                        },
                        {ref:ZaDomain.A2_zimbraAutoProvAuthMechSPNEGOEnabled, type:_CHECKBOX_,
                            label:ZaMsg.LBL_zimbraAutoProvAuthMechSPNEGO, subLabel:"",
                            trueValue:"TRUE", falseValue:"FALSE",labelLocation:_RIGHT_
                        }
                    ]
                }
            ]},
            {type:_GROUPER_, colSpan:"*", width: "100%",label:"Note",
                containerCssStyle: "padding-top:15px", numCols:1,
                items: [
                    {type:_OUTPUT_,value:ZaMsg.MSG_AUTOPROV_DLG_LAZY}
            ]}
        ]
    };
    cases.push(case3);

    var case4={type:_ZATABCASE_, numCols:2,colSizes:["45px","*"],  caseKey:_tab4,
        id:"auto_provision_config_lazy", getCustomWidth:ZaTaskAutoProvDialog.getCustomWidth,
        getCustomHeight:ZaTaskAutoProvDialog.getCustomHeight,
        items: [
            {type: _SPACER_, height: 20 },
            {ref:ZaDomain.A2_zimbraAutoProvModeMANUALEnabled, type:_CHECKBOX_,
                label:ZaMsg.LBL_zimbraAutoProvModeMANUAL, subLabel:"", align:_RIGHT_,
                trueValue:"TRUE", falseValue:"FALSE",labelLocation:_RIGHT_,
                onChange: ZaTaskAutoProvDialog.onFormFieldChanged
            },
            {type: _SPACER_, height: 20 },
            {type:_GROUPER_, colSpan:"*", width: "100%",label:"Find & Provisioning",
            enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_zimbraAutoProvModeMANUALEnabled,"TRUE"]],
            enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvModeMANUALEnabled],
            containerCssStyle: "padding-top:5px",
            items: [
                    {type:_GROUP_, colSpan:2, numCols:3, width:"100%", colSizes:["180px","85px","180px"], cellspacing:"5px",
                        items:[
                            {type:_TEXTFIELD_, cssClass:"admin_xform_name_input",width:"185px", ref:ZaSearch.A_query, label:null,
                                elementChanged: function(elementValue,instanceValue, event) {
                                  var charCode = event.charCode;
                                  if (charCode == 13 || charCode == 3) {
                                      ZaTaskAutoProvDialog.srchButtonHndlr.call(this);
                                  } else {
                                      this.getForm().itemChanged(this, elementValue, event);
                                  }
                                },
                                visibilityChecks:[],enableDisableChecks:[]
                            },
                            {type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonSearch, width:"80px",
                                onActivate:ZaTaskAutoProvDialog.srchButtonHndlr,align:_CENTER_,
                                enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_zimbraAutoProvSearchActivated,"TRUE"]],
                                enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvSearchActivated]
                            },
                            {type:_OUTPUT_, value:ZaMsg.LBL_ManualProvAccount,visibilityChecks:[]},
                            {ref:ZaDomain.A2_zimbraAutoProvAccountPool, type:_DWT_LIST_, height:"180px", width:"180px",
                                cssClass: "DLSource",
                                widgetClass:ZaAccMiniListView,
                                rowSpan:4,
                                onSelection:ZaTaskAutoProvDialog.accPoolSelectionListener,
                                visibilityChecks:[],enableDisableChecks:[]
                            },
                            {type:_DWT_BUTTON_, label:AjxMsg.addAll, width:"80px",
                                onActivate:ZaTaskAutoProvDialog.addAllButtonHndlr,
                                enableDisableChecks:[[XForm.checkInstanceValueNotEmty,ZaDomain.A2_zimbraAutoProvAccountPool]],
                                enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvAccountPool]
                            },
                            {ref: ZaDomain.A2_zimbraAutoProvAccountTargetPool, type:_DWT_LIST_, height:"180px", width:"180px",
                                cssClass: "DLSource",
                                widgetClass:ZaAccMiniListView,
                                rowSpan:4,
                                onSelection:ZaTaskAutoProvDialog.accTargetSelectionListener,
                                visibilityChecks:[],enableDisableChecks:[]
                            },
                            {type:_DWT_BUTTON_, label:AjxMsg.add, width:"80px",
                               onActivate:ZaTaskAutoProvDialog.addButtonHndlr,
                               enableDisableChecks:[[XForm.checkInstanceValueNotEmty,ZaDomain.A2_zimbraAutoProvAccountSrcSelectedPool]],
                               enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvAccountSrcSelectedPool]
                            },
                            {type:_DWT_BUTTON_, label:AjxMsg.remove, width:"80px",
                               onActivate:ZaTaskAutoProvDialog.removeButtonHndlr,
                               enableDisableChecks:[[XForm.checkInstanceValueNotEmty,ZaDomain.A2_zimbraAutoProvAccountTgtSelectedPool]],
                               enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvAccountTgtSelectedPool]
                            },
                            {type:_DWT_BUTTON_, label:AjxMsg.removeAll, width:"80px",
                                onActivate:ZaTaskAutoProvDialog.removeAllButtonHndlr,
                                enableDisableChecks:[[XForm.checkInstanceValueNotEmty,ZaDomain.A2_zimbraAutoProvAccountTargetPool]],
                                enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvAccountTargetPool]
                            },
                            {type:_GROUP_,numCols:3,colSizes:["90px","*","90px"],
                                items:[
                                    {type:_SPACER_, colSpan:3},
                                    {type:_DWT_BUTTON_, label:ZaMsg.Previous, width:75,
                                       id:"backButton", icon:"LeftArrow", disIcon:"LeftArrowDis",
                                       onActivate:ZaTaskAutoProvDialog.backPoolButtonHndlr,align:_CENTER_,
                                       enableDisableChecks:[ZaTaskAutoProvDialog.backBtnEnabled],
                                       enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvAccountPoolPageNum,ZaDomain.A2_zimbraAutoProvSearchActivated]
                                    },
                                    {type:_CELLSPACER_},
                                    {type:_DWT_BUTTON_, label:ZaMsg.Next, width:75,
                                       id:"fwdButton", icon:"RightArrow", disIcon:"RightArrowDis",
                                       onActivate:ZaTaskAutoProvDialog.fwdPoolButtonHndlr,align:_CENTER_,
                                       enableDisableChecks:[ZaTaskAutoProvDialog .forwardBtnEnabled],
                                       enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvAccountPoolPageNum,ZaDomain.A2_zimbraAutoProvSearchActivated]
                                    }
                                ]
                            },
                            {type:_CELLSPACER_}
                        ]
                    }
            ]}
        ]
    };
    cases.push(case4);

    var case5={type:_ZATABCASE_, numCols:1,width:"98%",  caseKey:_tab5,
        id:"auto_provision_email_setting", getCustomWidth:ZaTaskAutoProvDialog.getCustomWidth,
        getCustomHeight:ZaTaskAutoProvDialog.getCustomHeight,
        items: [
            {type: _SPACER_, height: 20 },
            {type:_GROUPER_, colSpan:"*", width: "100%",label:ZaMsg.LBL_zimbraAutoProvConfiguration, containerCssStyle: "padding-top:5px", colSizes:["100px","auto"], numCols:2,
            items: [
                {ref:ZaDomain.A_zimbraAutoProvNotificationSubject, type:_SUPER_TEXTFIELD_, colSpan:2, label:ZaMsg.LBL_zimbraAutoProvEmailSubject,
                    labelLocation:_LEFT_, textFieldCssStyle:"width:300; margin-right:5",
                    onChange:ZaTaskAutoProvDialog.onFormFieldChanged,
                    resetToSuperLabel:ZaMsg.NAD_ResetToGlobal},
                {ref:ZaDomain.A_zimbraAutoProvNotificationBody, type:_SUPER_TEXTAREA_, colSpan:2, label:ZaMsg.LBL_zimbraAutoProvEmailBody,
                    labelLocation:_LEFT_, textAreaCssStyle:"width:300; margin-right:5",
                    onChange:ZaTaskAutoProvDialog.onFormFieldChanged,
                    resetToSuperLabel:ZaMsg.NAD_ResetToGlobal}
            ]}
        ]
    };
    cases.push(case5);

	var xFormObject = {
		numCols:1,
		items:[
            {type:_TAB_BAR_,  ref:ZaModel.currentTab,choices:this.tabChoices,cssClass:"ZaTabBar", id:"xform_tabbar"},
            {type:_SWITCH_, align:_LEFT_, valign:_TOP_, items:cases}
        ]
    };
    return xFormObject;
}

ZaTaskAutoProvDialog.onFormFieldChanged =
function (value, event, form) {
    var ref = this.getRefPath();
    if (ref == ZaDomain.A_zimbraAutoProvNotificationSubject || ref == ZaDomain.A_zimbraAutoProvNotificationBody) {
        this.setInstanceValue(value);
        return;
    }
    var instance = this.getInstance();
    instance[ZaDomain.A2_zimbraAutoProvSearchActivated] = "TRUE";
    this.setInstanceValue(value);
    return value;
}

ZaTaskAutoProvDialog.prototype._forceApplyCallback =
function() {
    this._applyButtonListener();
}

ZaTaskAutoProvDialog.prototype._confirmPasswordSettingCallback =
function() {
    if(this._confirmPasswordSettingDialog)
        this._confirmPasswordSettingDialog.popdown();
    var obj = this.getObject();
    if(obj[ZaDomain.A2_zimbraAutoProvAccountPasswordInDlg])
        obj[ZaDomain.A2_zimbraAutoProvAccountPassword] = obj[ZaDomain.A2_zimbraAutoProvAccountPasswordInDlg]
}

ZaTaskAutoProvDialog.getCustomWidth = function() {
	return "100%";
}

ZaTaskAutoProvDialog.getCustomHeight = function() {
	return "100%";
}

ZaTaskAutoProvDialog.prototype._applyButtonListener =
function() {
    if(this._forceApplyMessageDialog)
        this._forceApplyMessageDialog.popdown();
    try {
        var controller = ZaApp.getInstance().getCurrentController();
        if(this._checkGeneralConfig() && this._checkEagerConfig() && this._checkLazyConfig()) {
            var savedObj = this.getObject();
            this._combineConfigureValues(savedObj);
            ZaDomain.modifyAutoPovSettings.call(this._containedObject,savedObj);
            controller._notifyAllOpenTabs();
            if(savedObj.currentTab == 4) {
                if(this._checkManualConfig())
                    this.finishConfig();
                else return;
            }
            this._button[DwtDialog.OK_BUTTON].setEnabled(false);
            this._button[ZaTaskAutoProvDialog.APPLY_BUTTON].setEnabled(false);
            this._backupLdapObj(savedObj);
        }
    } catch (ex) {
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaTaskAutoProvDialog.prototype._applyButtonListener", null, false);
	}
}

ZaTaskAutoProvDialog.prototype._checkGeneralConfig =
function() {
    var isError = false;
    var errorMsg = "";
    if(!this._containedObject.attrs[ZaDomain.A_zimbraAutoProvLdapURL]
            || this._containedObject.attrs[ZaDomain.A_zimbraAutoProvLdapURL] == "") {
        isError = true;
        errorMsg = AjxMessageFormat.format(ZaMsg.ERROR_AUTOPROV,ZaMsg.MSG_zimbraAutoProvLdapURL);
    } else if(!this._containedObject.attrs[ZaDomain.A_zimbraAutoProvLdapAdminBindDn]
            || this._containedObject.attrs[ZaDomain.A_zimbraAutoProvLdapAdminBindDn] == "") {
        isError = true;
        errorMsg = AjxMessageFormat.format(ZaMsg.ERROR_AUTOPROV,ZaMsg.MSG_zimbraAutoProvLdapAdminBindDn);
    } else if(!this._containedObject.attrs[ZaDomain.A_zimbraAutoProvLdapAdminBindPassword]
            || this._containedObject.attrs[ZaDomain.A_zimbraAutoProvLdapAdminBindPassword] == "") {
        isError = true;
        errorMsg = AjxMessageFormat.format(ZaMsg.ERROR_AUTOPROV,ZaMsg.MSG_zimbraAutoProvLdapAdminBindPassword);
    } else if(!this._containedObject.attrs[ZaDomain.A_zimbraAutoProvLdapSearchBase]
            || this._containedObject.attrs[ZaDomain.A_zimbraAutoProvLdapSearchBase] == "") {
        isError = true;
        errorMsg = AjxMessageFormat.format(ZaMsg.ERROR_AUTOPROV,ZaMsg.MSG_zimbraAutoProvLdapSearchBase);
    }
    if(!isError && this._containedObject[ZaDomain.A2_zimbraAutoProvModeEAGEREnabled] == "TRUE") {
        if(!this._containedObject.attrs[ZaDomain.A_zimbraAutoProvLdapSearchFilter]
                || this._containedObject.attrs[ZaDomain.A_zimbraAutoProvLdapSearchFilter] == "") {
            isError = true;
            errorMsg = AjxMessageFormat.format(ZaMsg.ERROR_AUTOPROV,ZaMsg.MSG_zimbraAutoProvLdapSearchFilter);
        } else if(!this._containedObject.attrs[ZaDomain.A_zimbraAutoProvLdapBindDn]
                || this._containedObject.attrs[ZaDomain.A_zimbraAutoProvLdapBindDn] == "") {
            isError = true;
            errorMsg = AjxMessageFormat.format(ZaMsg.ERROR_AUTOPROV,ZaMsg.MSG_zimbraAutoProvLdapBindDn);
        }
    }
    if(isError) {
        ZaApp.getInstance().getCurrentController().popupErrorDialog(errorMsg);
        return false;
    } else return true;
}

ZaTaskAutoProvDialog.prototype._checkEagerConfig =
function() {
    var isError = false;
    var errorMsg = "";
    if(!isError && this._containedObject[ZaDomain.A2_zimbraAutoProvModeEAGEREnabled] == "TRUE") {
        if(!this._containedObject.attrs[ZaDomain.A_zimbraAutoProvBatchSize]
                || this._containedObject.attrs[ZaDomain.A_zimbraAutoProvBatchSize] == "") {
            isError = true;
            errorMsg = AjxMessageFormat.format(ZaMsg.ERROR_AUTOPROV,ZaMsg.MSG_zimbraAutoProvBatchSize);
        }
    }
    if(isError) {
        ZaApp.getInstance().getCurrentController().popupErrorDialog(errorMsg);
        return false;
    } else return true;
}

ZaTaskAutoProvDialog.prototype._checkLazyConfig =
function() {
        if(this._containedObject[ZaDomain.A2_zimbraAutoProvModeLAZYEnabled] == "TRUE"
                && (!this._containedObject[ZaDomain.A2_zimbraAutoProvAuthMechLDAPEnabled]
                    || this._containedObject[ZaDomain.A2_zimbraAutoProvAuthMechLDAPEnabled] == "FALSE")
                && (!this._containedObject[ZaDomain.A2_zimbraAutoProvAuthMechPREAUTHEnabled]
                    || this._containedObject[ZaDomain.A2_zimbraAutoProvAuthMechPREAUTHEnabled] == "FALSE")
                && (!this._containedObject[ZaDomain.A2_zimbraAutoProvAuthMechKRB5Enabled]
                    || this._containedObject[ZaDomain.A2_zimbraAutoProvAuthMechKRB5Enabled] == "FALSE")
                && (!this._containedObject[ZaDomain.A2_zimbraAutoProvAuthMechSPNEGOEnabled]
                    || this._containedObject[ZaDomain.A2_zimbraAutoProvAuthMechSPNEGOEnabled] == "FALSE")) {
            ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_AUTOPROV_LAZYAUTH);
            return false;
        } else return true;
}

ZaTaskAutoProvDialog.prototype._checkManualConfig =
function() {
    var attrMaps =  this._containedObject.attrs[ZaDomain.A_zimbraAutoProvAttrMap];
    var obj = this.getObject();
    var isGiven = false;
    if(attrMaps) {
        if(!(attrMaps instanceof Array))
            attrMaps = [attrMaps];
        for(var i = 0; i < attrMaps.length && !isGiven; i ++ ) {
            var kv = attrMaps[i].split("=");
            if(kv.length > 0 && kv[0].indexOf("userPassword") == 0)
                isGiven = true;
        }
    }
    if(obj[ZaDomain.A2_zimbraAutoProvAccountPassword])
        return true;
    else if(!isGiven) {
        if(!this._confirmPasswordSettingDialog) {
            var height = "220px"
            if (AjxEnv.isIE) {
                height = "245px";
            }
            this._confirmPasswordSettingDialog = new ZaConfirmPasswordDialog(ZaApp.getInstance().getAppCtxt().getShell(), "450px", height, ZaMsg.DLG_TITILE_MANUAL_PROV);
        }
        this._confirmPasswordSettingDialog.registerCallback(DwtDialog.OK_BUTTON, ZaTaskAutoProvDialog.prototype._confirmPasswordSettingCallback, this, null);
		this._confirmPasswordSettingDialog.setObject(this._containedObject);
		this._confirmPasswordSettingDialog.popup();
    }
    return isGiven;
}

ZaTaskAutoProvDialog.prototype._separateConfigureValues =
function(entry) {
    if(entry.attrs[ZaDomain.A_zimbraAutoProvMode]) {
        if(entry.attrs[ZaDomain.A_zimbraAutoProvMode] instanceof Array) {
            for(var mode = 0; mode < entry.attrs[ZaDomain.A_zimbraAutoProvMode].length; mode ++){
                if(entry.attrs[ZaDomain.A_zimbraAutoProvMode][mode] == "EAGER")
                   entry[ZaDomain.A2_zimbraAutoProvModeEAGEREnabled] = "TRUE";
                else if(entry.attrs[ZaDomain.A_zimbraAutoProvMode][mode] == "LAZY")
                   entry[ZaDomain.A2_zimbraAutoProvModeLAZYEnabled] = "TRUE";
                else if(entry.attrs[ZaDomain.A_zimbraAutoProvMode][mode] == "MANUAL")
                   entry[ZaDomain.A2_zimbraAutoProvModeMANUALEnabled] = "TRUE";
            }
        } else {
            if(entry.attrs[ZaDomain.A_zimbraAutoProvMode] == "EAGER")
               entry[ZaDomain.A2_zimbraAutoProvModeEAGEREnabled] = "TRUE";
            else if(entry.attrs[ZaDomain.A_zimbraAutoProvMode] == "LAZY")
               entry[ZaDomain.A2_zimbraAutoProvModeLAZYEnabled] = "TRUE";
            else if(entry.attrs[ZaDomain.A_zimbraAutoProvMode] == "MANUAL")
               entry[ZaDomain.A2_zimbraAutoProvModeMANUALEnabled] = "TRUE";
        }
    }

    if(entry.attrs[ZaDomain.A_zimbraAutoProvAuthMech]) {
        if(entry.attrs[ZaDomain.A_zimbraAutoProvAuthMech] instanceof Array) {
            for(var mode = 0; mode < entry.attrs[ZaDomain.A_zimbraAutoProvAuthMech].length; mode ++){
                if(entry.attrs[ZaDomain.A_zimbraAutoProvAuthMech][mode] == "LDAP")
                   entry[ZaDomain.A2_zimbraAutoProvAuthMechLDAPEnabled] = "TRUE";
                else if(entry.attrs[ZaDomain.A_zimbraAutoProvAuthMech][mode] == "PREAUTH")
                   entry[ZaDomain.A2_zimbraAutoProvAuthMechPREAUTHEnabled] = "TRUE";
                else if(entry.attrs[ZaDomain.A_zimbraAutoProvAuthMech][mode] == "KRB5")
                   entry[ZaDomain.A2_zimbraAutoProvAuthMechKRB5Enabled] = "TRUE";
                else if(entry.attrs[ZaDomain.A_zimbraAutoProvAuthMech][mode] == "SPNEGO")
                   entry[ZaDomain.A2_zimbraAutoProvAuthMechSPNEGOEnabled] = "TRUE";
            }
        } else {
                if(entry.attrs[ZaDomain.A_zimbraAutoProvAuthMech] == "LDAP")
                   entry[ZaDomain.A2_zimbraAutoProvAuthMechLDAPEnabled] = "TRUE";
                else if(entry.attrs[ZaDomain.A_zimbraAutoProvAuthMech] == "PREAUTH")
                   entry[ZaDomain.A2_zimbraAutoProvAuthMechPREAUTHEnabled] = "TRUE";
                else if(entry.attrs[ZaDomain.A_zimbraAutoProvAuthMech] == "KRB5")
                   entry[ZaDomain.A2_zimbraAutoProvAuthMechKRB5Enabled] = "TRUE";
                else if(entry.attrs[ZaDomain.A_zimbraAutoProvAuthMech] == "SPNEGO")
                   entry[ZaDomain.A2_zimbraAutoProvAuthMechSPNEGOEnabled] = "TRUE";
        }
    }
    entry[ZaDomain.A2_zimbraAutoProvServerList] = ZaApp.getInstance().getServerList(true).getArray();
    entry[ZaDomain.A2_zimbraAutoProvSelectedServerList] = new AjxVector ();
    for(var i = 0; i < entry[ZaDomain.A2_zimbraAutoProvServerList].length; i++) {
        var server = entry[ZaDomain.A2_zimbraAutoProvServerList][i];
        var scheduledDomains = server.attrs[ZaServer.A_zimbraAutoProvScheduledDomains];
        for(var j = 0; scheduledDomains && j < scheduledDomains.length; j++) {
            if(scheduledDomains[j] == entry.name) {
               entry[ZaDomain.A2_zimbraAutoProvSelectedServerList].add(server.name);
                server["checked"] = true;

                if(server.attrs[ZaServer.A_zimbraAutoProvPollingInterval])
                    entry[ZaDomain.A2_zimbraAutoProvPollingInterval] = server.attrs[ZaServer.A_zimbraAutoProvPollingInterval];
            }
        }
    }

}

ZaTaskAutoProvDialog.prototype._combineConfigureValues =
function(entry) {
    entry.attrs[ZaDomain.A_zimbraAutoProvMode] = [];
    if(entry[ZaDomain.A2_zimbraAutoProvModeEAGEREnabled] == "TRUE")
        entry.attrs[ZaDomain.A_zimbraAutoProvMode].push("EAGER");
    if(entry[ZaDomain.A2_zimbraAutoProvModeLAZYEnabled] == "TRUE")
        entry.attrs[ZaDomain.A_zimbraAutoProvMode].push("LAZY");
    if(entry[ZaDomain.A2_zimbraAutoProvModeMANUALEnabled] == "TRUE")
        entry.attrs[ZaDomain.A_zimbraAutoProvMode].push("MANUAL");

    entry.attrs[ZaDomain.A_zimbraAutoProvAuthMech] = [];
    if(entry[ZaDomain.A2_zimbraAutoProvAuthMechLDAPEnabled] == "TRUE")
        entry.attrs[ZaDomain.A_zimbraAutoProvAuthMech].push("LDAP");
    if(entry[ZaDomain.A2_zimbraAutoProvAuthMechPREAUTHEnabled] == "TRUE")
        entry.attrs[ZaDomain.A_zimbraAutoProvAuthMech].push("PREAUTH");
    if(entry[ZaDomain.A2_zimbraAutoProvAuthMechKRB5Enabled] == "TRUE")
        entry.attrs[ZaDomain.A_zimbraAutoProvAuthMech].push("KRB5");
    if(entry[ZaDomain.A2_zimbraAutoProvAuthMechSPNEGOEnabled] == "TRUE")
        entry.attrs[ZaDomain.A_zimbraAutoProvAuthMech].push("SPNEGO");
}

ZaTaskAutoProvDialog.prototype._backupLdapObj = function(entry) {
    if(!this._autoprovLdapObject)
        this._autoprovLdapObject = {};
    if(!entry || !entry.attrs) return;
    if(entry.attrs[ZaDomain.A_zimbraAutoProvLdapURL])
        this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvLdapURL] = entry.attrs[ZaDomain.A_zimbraAutoProvLdapURL];
    else this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvLdapURL] = null;
    if(entry.attrs[ZaDomain.A_zimbraAutoProvLdapStartTlsEnabled])
        this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvLdapStartTlsEnabled] = entry.attrs[ZaDomain.A_zimbraAutoProvLdapStartTlsEnabled];
    else this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvLdapStartTlsEnabled] = null;
    if(entry.attrs[ZaDomain.A_zimbraAutoProvLdapAdminBindDn])
        this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvLdapAdminBindDn] = entry.attrs[ZaDomain.A_zimbraAutoProvLdapAdminBindDn];
    else  this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvLdapAdminBindDn] = null;
    if(entry.attrs[ZaDomain.A_zimbraAutoProvLdapAdminBindPassword])
        this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvLdapAdminBindPassword] = entry.attrs[ZaDomain.A_zimbraAutoProvLdapAdminBindPassword];
    else this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvLdapAdminBindPassword] = null;
    if(entry.attrs[ZaDomain.A_zimbraAutoProvLdapSearchBase])
        this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvLdapSearchBase] = entry.attrs[ZaDomain.A_zimbraAutoProvLdapSearchBase];
    else this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvLdapSearchBase] = null;
    if(entry.attrs[ZaDomain.A_zimbraAutoProvLdapSearchFilter])
        this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvLdapSearchFilter] = entry.attrs[ZaDomain.A_zimbraAutoProvLdapSearchFilter];
    else this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvLdapSearchFilter] = null;
    if(entry.attrs[ZaDomain.A_zimbraAutoProvLdapBindDn])
        this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvLdapBindDn] = entry.attrs[ZaDomain.A_zimbraAutoProvLdapBindDn];
    else this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvLdapBindDn] = null;
    if(entry.attrs[ZaDomain.A_zimbraAutoProvNotificationSubject])
        this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvNotificationSubject] = entry.attrs[ZaDomain.A_zimbraAutoProvNotificationSubject];
    else this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvNotificationSubject] = null;
    if(entry.attrs[ZaDomain.A_zimbraAutoProvNotificationBody])
        this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvNotificationBody] = entry.attrs[ZaDomain.A_zimbraAutoProvNotificationBody];
    else this._autoprovLdapObject[ZaDomain.A_zimbraAutoProvNotificationBody] = null;
}

ZaTaskAutoProvDialog.prototype._checkModified = function() {
    var newObj = this.getObject();
    var oldObj = this._autoprovLdapObject;

    if((oldObj[ZaDomain.A_zimbraAutoProvLdapURL] == newObj.attrs[ZaDomain.A_zimbraAutoProvLdapURL]
            || !oldObj[ZaDomain.A_zimbraAutoProvLdapURL] && !newObj.attrs[ZaDomain.A_zimbraAutoProvLdapURL])
    && (oldObj[ZaDomain.A_zimbraAutoProvLdapStartTlsEnabled] == newObj.attrs[ZaDomain.A_zimbraAutoProvLdapStartTlsEnabled]
            || !oldObj[ZaDomain.A_zimbraAutoProvLdapStartTlsEnabled] && !newObj.attrs[ZaDomain.A_zimbraAutoProvLdapStartTlsEnabled])
    && (oldObj[ZaDomain.A_zimbraAutoProvLdapAdminBindDn] == newObj.attrs[ZaDomain.A_zimbraAutoProvLdapAdminBindDn]
            || !oldObj[ZaDomain.A_zimbraAutoProvLdapAdminBindDn] && !newObj.attrs[ZaDomain.A_zimbraAutoProvLdapAdminBindDn])
    && (oldObj[ZaDomain.A_zimbraAutoProvLdapAdminBindPassword] == newObj.attrs[ZaDomain.A_zimbraAutoProvLdapAdminBindPassword]
            || !oldObj[ZaDomain.A_zimbraAutoProvLdapAdminBindPassword] && !newObj.attrs[ZaDomain.A_zimbraAutoProvLdapAdminBindPassword])
    && (oldObj[ZaDomain.A_zimbraAutoProvLdapSearchBase] == newObj.attrs[ZaDomain.A_zimbraAutoProvLdapSearchBase]
            || !oldObj[ZaDomain.A_zimbraAutoProvLdapSearchBase] && !newObj.attrs[ZaDomain.A_zimbraAutoProvLdapSearchBase])
    && (oldObj[ZaDomain.A_zimbraAutoProvLdapSearchFilter] == newObj.attrs[ZaDomain.A_zimbraAutoProvLdapSearchFilter]
            || !oldObj[ZaDomain.A_zimbraAutoProvLdapSearchFilter] && !newObj.attrs[ZaDomain.A_zimbraAutoProvLdapSearchFilter])
    && (oldObj[ZaDomain.A_zimbraAutoProvLdapBindDn] == newObj.attrs[ZaDomain.A_zimbraAutoProvLdapBindDn]
            || !oldObj[ZaDomain.A_zimbraAutoProvLdapBindDn] && !newObj.attrs[ZaDomain.A_zimbraAutoProvLdapBindDn])
    && (oldObj[ZaDomain.A_zimbraAutoProvNotificationSubject] == newObj.attrs[ZaDomain.A_zimbraAutoProvNotificationSubject]
            || !oldObj[ZaDomain.A_zimbraAutoProvNotificationSubject] && !newObj.attrs[ZaDomain.A_zimbraAutoProvNotificationSubject])
    && (oldObj[ZaDomain.A_zimbraAutoProvNotificationBody] == newObj.attrs[ZaDomain.A_zimbraAutoProvNotificationBody]
            || !oldObj[ZaDomain.A_zimbraAutoProvNotificationBody] && !newObj.attrs[ZaDomain.A_zimbraAutoProvNotificationBody]))
        return false;
    else
        return true;
}

ZaTaskAutoProvDialog.prototype.tabClickHandler = function() {
    if(this.getObject().currentTab != this.TAB_STEP_MANUAL)
        return;
    if(this._checkModified()) {
        var dlgMsg = ZaMsg.MSG_LDAP_CHANGED;
        this._forceApplyMessageDialog.setMessage(dlgMsg, DwtMessageDialog.INFO_STYLE);
        this._forceApplyMessageDialog.popup();
    }
}
///////////////////
ZaTaskAutoProvDialog.srchButtonHndlr = function() {
	var instance = this.getForm().getInstance();
	var formParent = this.getForm().parent;
    if(!formParent._checkGeneralConfig())
        return;
    var soapDoc = AjxSoapDoc.create("SearchAutoProvDirectoryRequest", ZaZimbraAdmin.URN, null);
    soapDoc.getMethod().setAttribute("keyAttr","name");
	var attr = soapDoc.set("domain", instance.id);
	attr.setAttribute("by", "id");

    var query = "(|(mail=*)(zimbraMailAlias=*)(uid=*))";
	if(instance[ZaSearch.A_query]) {
		query = ZaSearch.getSearchByNameQuery (instance[ZaSearch.A_query]);
	}
    soapDoc.set("query", query);
    var limit = ZaSettings.RESULTSPERPAGE;
	if(!instance[ZaDomain.A2_zimbraAutoProvAccountPoolPageNum]) {
		instance[ZaDomain.A2_zimbraAutoProvAccountPoolPageNum] = 0;
	}
	var offset = instance[ZaDomain.A2_zimbraAutoProvAccountPoolPageNum]*ZaSettings.RESULTSPERPAGE;
	var attrs = [ZaAccount.A_name, ZaAccount.A_mail, ZaItem.A_zimbraId,ZaAccount.A_displayname].join(",");
    soapDoc.getMethod().setAttribute("keyAttr","name");
	soapDoc.getMethod().setAttribute("offset", offset);
	soapDoc.getMethod().setAttribute("limit", limit);
    soapDoc.getMethod().setAttribute("attrs", attrs);
    soapDoc.getMethod().setAttribute("refresh", "1");

	this.getModel().setInstanceValue(this.getInstance(),ZaDomain.A2_zimbraAutoProvSearchActivated,"FALSE");

    var params = {};
    params.soapDoc = soapDoc;
    params.asyncMode = false;
    var reqMgrParams = {
        controller : ZaApp.getInstance().getCurrentController(),
        busyMsg : ZaMsg.BUSY_AUTOPROV_GETACCT
    }

    try {
        var resp = ZaRequestMgr.invoke(params, reqMgrParams);
        this.getModel().setInstanceValue(this.getInstance(),ZaDomain.A2_zimbraAutoProvSearchActivated,"TRUE");
        if(!resp || resp.Body.SearchAutoProvDirectoryResponse.Fault)
            return;
        if(!resp.Body.SearchAutoProvDirectoryResponse || !resp.Body.SearchAutoProvDirectoryResponse.entry)
            return;
        var provAcctList = [];
        var objs = resp.Body.SearchAutoProvDirectoryResponse.entry;
        var searchTotal = resp.Body.SearchAutoProvDirectoryResponse.searchTotal;
        for(var i = 0; objs && i < objs.length; i++) {
            var obj = objs[i];
            var acct = new Object();
            acct.dn = obj.dn;
            var len = obj.a.length;
            acct.attrs = new Array();
            for(var ix = 0; ix < len; ix ++) {
                if(!acct.attrs[[obj.a[ix].n]]) {
                    acct.attrs[[obj.a[ix].n]] = obj.a[ix]._content;
                } else {
                    if(!(acct.attrs[[obj.a[ix].n]] instanceof Array)) {
                        acct.attrs[[obj.a[ix].n]] = [acct.attrs[[obj.a[ix].n]]];
                    }
                    acct.attrs[[obj.a[ix].n]].push(obj.a[ix]._content);
                }
            }
            acct.name = acct.attrs[ZaAccount.A_mail];
            provAcctList.push(acct);
        }
        this.getModel().setInstanceValue(this.getInstance(),ZaDomain.A2_zimbraAutoProvAccountPool,provAcctList);
        var poolTotalPages = Math.ceil(searchTotal/ZaSettings.RESULTSPERPAGE);
        this.getModel().setInstanceValue(this.getInstance(),ZaDomain.A2_zimbraAutoProvAccountPoolPageTotal,poolTotalPages);
    } catch(ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaTaskAutoProvDialog.srchButtonHndlr", null, false);
    }
}

ZaTaskAutoProvDialog.accPoolSelectionListener = function() {
	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		arr.sort();
		this.getModel().setInstanceValue(this.getInstance(), ZaDomain.A2_zimbraAutoProvAccountSrcSelectedPool, arr);
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaDomain.A2_zimbraAutoProvAccountSrcSelectedPool, null);
	}
}

ZaTaskAutoProvDialog.addButtonHndlr = function (ev) {
	var form = this.getForm();
	var instance = form.getInstance();
	var sourceListItems = form.getItemsById(ZaDomain.A2_zimbraAutoProvAccountPool);
	if(sourceListItems && (sourceListItems instanceof Array) && sourceListItems[0] && sourceListItems[0].widget) {
		var selection = sourceListItems[0].widget.getSelection();
		var currentTargetList = instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] ? instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] : [];
		var list = (selection instanceof AjxVector) ? selection.getArray() : (selection instanceof Array) ? selection : [selection];
		if(list) {
			list.sort(ZaItem.compareNamesDesc);
			var tmpTargetList = [];
			var cnt2 = currentTargetList.length;
			for(var i=0;i<cnt2;i++)
				tmpTargetList.push(currentTargetList[i]);

			tmpTargetList.sort(ZaItem.compareNamesDesc);

			var tmpList = [];
			var cnt = list.length;
			for(var i=cnt-1; i>=0; i--) {
				var dup = false;
				cnt2 = tmpTargetList.length;
				for(var j = cnt2-1; j >=0; j--) {
					if(list[i].name==tmpTargetList[j].name) {
						dup=true;
						tmpTargetList.splice(j,cnt2-j);
						break;
					}
				}
				if(!dup) {
					currentTargetList.push(list[i])
				}
			}
			this.getModel().setInstanceValue(this.getInstance(), ZaDomain.A2_zimbraAutoProvAccountTargetPool, currentTargetList);
		}
	}
	if(currentTargetList.length > 0) {
		form.parent._button[DwtDialog.OK_BUTTON].setEnabled(true);
	} else {
		form.parent._button[DwtDialog.OK_BUTTON].setEnabled(false);
	}
}

ZaTaskAutoProvDialog.accTargetSelectionListener = function() {
	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		arr.sort();
		this.getModel().setInstanceValue(this.getInstance(), ZaDomain.A2_zimbraAutoProvAccountTgtSelectedPool, arr);
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaDomain.A2_zimbraAutoProvAccountTgtSelectedPool, null);
	}
}

ZaTaskAutoProvDialog.addAllButtonHndlr = function (ev) {
	var form = this.getForm();
	var instance = form.getInstance();
	var oldArr = instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] ? instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool]  : [];
	var arr = instance[ZaDomain.A2_zimbraAutoProvAccountPool];
	var arr2 = new Array();
	if(arr) {
		var cnt = arr.length;
		var oldCnt = oldArr.length;
		for(var ix=0; ix< cnt; ix++) {
			var found = false;
			for(var j = oldCnt-1;j>=0;j-- ) {
				if(oldArr[j].name == arr[ix].name) {
					found = true;
					break;
				}
			}
			if(!found)
				arr2.push(arr[ix]);
		}
	}
	arr2 = arr2.concat(oldArr);
	this.getModel().setInstanceValue(this.getInstance(), ZaDomain.A2_zimbraAutoProvAccountTargetPool, arr2);
	//this.getModel().setInstanceValue(this.getInstance(), ZaDomain.A2_zimbraAutoProvAccountPool, new Array());
	var instance = form.getInstance();
	var currentTargetList = instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] ? instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] : [];
	if(currentTargetList.length > 0) {
		form.parent._button[DwtDialog.OK_BUTTON].setEnabled(true);
	} else {
		form.parent._button[DwtDialog.OK_BUTTON].setEnabled(false);
	}
}

ZaTaskAutoProvDialog.removeButtonHndlr = function (ev) {
	var form = this.getForm();
	var instance = form.getInstance();
	var targetListItems = form.getItemsById(ZaDomain.A2_zimbraAutoProvAccountTargetPool);
	if(targetListItems && (targetListItems instanceof Array) && targetListItems[0] && targetListItems[0].widget) {
		var selection = targetListItems[0].widget.getSelection();

		var currentTargetList = instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] ? instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] : [];
		currentTargetList.sort(ZaItem.compareNamesDesc);
		var tmpTargetList = [];
		var list = (selection instanceof AjxVector) ? selection.getArray() : (selection instanceof Array) ? selection : [selection];
		if(list) {
			list.sort(ZaItem.compareNamesDesc);
			var cnt = list.length;
			var cnt2 = currentTargetList.length;
			for(var i=0;i<cnt2;i++)
				tmpTargetList.push(currentTargetList[i]);

			for(var i=cnt-1; i>=0; i--) {
				var cnt2 = tmpTargetList.length;
				for(var j = cnt2-1; j >=0; j--) {
					if(list[i].name==tmpTargetList[j].name) {
						currentTargetList.splice(j,1);
						tmpTargetList.splice(j,cnt2-j);
					}
				}
			}
			this.getModel().setInstanceValue(this.getInstance(), ZaDomain.A2_zimbraAutoProvAccountTargetPool, currentTargetList);
		}
	}
	if(currentTargetList.length > 0) {
		form.parent._button[DwtDialog.OK_BUTTON].setEnabled(true);
	} else {
		form.parent._button[DwtDialog.OK_BUTTON].setEnabled(false);
	}
}

ZaTaskAutoProvDialog.removeAllButtonHndlr = function (ev) {
	var form = this.getForm();
	var instance = form.getInstance();

	instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] = new Array();
	var currentTargetList = instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] ? instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] : [];
	if(currentTargetList.length > 0) {
		form.parent._button[DwtDialog.OK_BUTTON].setEnabled(true);
	} else {
		form.parent._button[DwtDialog.OK_BUTTON].setEnabled(false);
	}
	this.getForm().setInstance(instance);
}

ZaTaskAutoProvDialog.backPoolButtonHndlr =
function(evt) {
	var currentPageNum = parseInt(this.getInstanceValue("/poolPagenum"))-1;
	this.setInstanceValue(currentPageNum,"/poolPagenum");
	ZaTaskAutoProvDialog.srchButtonHndlr.call(this, evt);
}

ZaTaskAutoProvDialog.fwdPoolButtonHndlr =
function(evt) {
	var currentPageNum = parseInt(this.getInstanceValue("/poolPagenum"));
	this.setInstanceValue(currentPageNum+1,"/poolPagenum");
	ZaTaskAutoProvDialog.srchButtonHndlr.call(this, evt);
}

ZaTaskAutoProvDialog.forwardBtnEnabled = function () {
	return (parseInt(this.getInstanceValue(ZaDomain.A2_zimbraAutoProvAccountPoolPageNum)) < (parseInt(this.getInstanceValue(ZaDomain.A2_zimbraAutoProvAccountPoolPageTotal))-1)
            && this.getInstanceValue(ZaDomain.A2_zimbraAutoProvSearchActivated)=="TRUE");
};

ZaTaskAutoProvDialog.backBtnEnabled = function () {
	return (parseInt(this.getInstanceValue(ZaDomain.A2_zimbraAutoProvAccountPoolPageNum)) > 0
            && this.getInstanceValue(ZaDomain.A2_zimbraAutoProvSearchActivated)== "TRUE");
};

ZaTaskAutoProvDialog.prototype.finishConfig = function () {
    var instance = this.getObject();

    var acctlist = instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool];//this.getModel().getInstanceValue(instance,ZaDomain.A2_zimbraAutoProvAccountTargetPool);
    if(!acctlist || acctlist.length < 1) return;
    var soapDoc = AjxSoapDoc.create("BatchRequest", "urn:zimbra");
    soapDoc.setMethodAttribute("onerror", "continue");

    for(var i = 0; i < acctlist.length; i++) {
		var autoProvDoc = soapDoc.set("AutoProvAccountRequest", null, null, ZaZimbraAdmin.URN);

        var attr = soapDoc.set("domain", instance.id, autoProvDoc);
        attr.setAttribute("by", "id");

        attr = soapDoc.set("principal", acctlist[i].dn, autoProvDoc);
        attr.setAttribute("by", "dn");

        if(instance[ZaDomain.A2_zimbraAutoProvAccountPassword]) {
            attr = soapDoc.set("password", instance[ZaDomain.A2_zimbraAutoProvAccountPassword], autoProvDoc);
        }
    }

    var params = new Object();
    params.soapDoc = soapDoc;
    var reqMgrParams ={
        controller:ZaApp.getInstance().getCurrentController(),
        busyMsg : ZaMsg.BUSY_CREATING_GALDS,
        showBusy:true
    }
    ZaRequestMgr.invoke(params, reqMgrParams);
}

ZaTaskAutoProvDialog.filterSelectionListener =
function (value) {
	var targetEl = value.target ;
	if (targetEl.type && targetEl.type == "checkbox") {

		var item = targetEl.value ;
		var form = this.getForm ();
		var instance = form.getInstance ();

		var checkedFiltersVector = null ;

        checkedFiltersVector = instance[ZaDomain.A2_zimbraAutoProvSelectedServerList];

		if (targetEl.checked) {
			checkedFiltersVector.remove(item);

		}else{

			checkedFiltersVector.add(item);

		}
	}
}

/////////////////////////////
ZaServerOptionList = function(parent,className) {
	DwtListView.call(this, parent, null);//, Dwt.ABSOLUTE_STYLE);
}

ZaServerOptionList.prototype = new DwtListView;
ZaServerOptionList.prototype.constructor = ZaServerOptionList;

ZaServerOptionList.prototype.toString =
function() {
	return "ZaServerOptionList";
}

ZaServerOptionList.prototype._createItemHtml =
function(item, params, asHtml, count) {
	var html = new Array(10);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(item, div, DwtListView.TYPE_LIST_ITEM);

	var idx = 0;
    var checked = "";

    if(item.checked) checked = "checked";
	html[idx++] = "<table width='100%' cellspacing='0' cellpadding='0' ><tr><td width=20>"

    if(this.initializeDisable)
	    html[idx++] = "<input id='"+this._htmlElId+"_schedule_"+count+"'  disabled type=checkbox value='" + item + "' " + checked + "/></td>" ;
	else
        html[idx++] = "<input id='"+this._htmlElId+"_schedule_"+count+"' type=checkbox value='" + item + "' " + checked + "/></td>" ;

    html[idx++] = "<td>"+ item + "</td></tr></table>";
	div.innerHTML = html.join("");
	return div;
}


/////////////////////////////
ZaConfirmPasswordDialog = function(parent,   w, h, title) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];
	ZaXDialog.call(this, parent, null, title, w, h, null, ZaId.DLG_AUTPROV_MANUAL_PWD);
	this._containedObject = {};
	this.initForm(ZaAlias.myXModel,this.getMyXForm());
	this._helpURL = ZaConfirmPasswordDialog.helpURL;
	this._localXForm.addListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, new AjxListener(this, ZaConfirmPasswordDialog.prototype.handleXFormChange));
}

ZaConfirmPasswordDialog.prototype = new ZaXDialog;
ZaConfirmPasswordDialog.prototype.constructor = ZaConfirmPasswordDialog;
ZaConfirmPasswordDialog.helpURL = ZaUtil.HELP_URL;


ZaConfirmPasswordDialog.prototype.popup = function(loc){
    ZaXDialog.prototype.popup.call(this, loc);
    //this._button[DwtDialog.OK_BUTTON].setEnabled(false); //if we don't allow empty password, should switch to this
    this._button[DwtDialog.OK_BUTTON].setEnabled(true);
    this._localXForm.setInstanceValue(false, ZaDomain.A2_zimbraAutoProvAccountPasswordUnmatchedWarning);
}

ZaConfirmPasswordDialog.prototype.handleXFormChange =
function ( ) {
    var xformObj = this._localXForm;
    if(!xformObj || xformObj.hasErrors() || !xformObj.getInstance()){
        return;
    }

    var pw = xformObj.getInstanceValue(ZaDomain.A2_zimbraAutoProvAccountPasswordInDlg);
    var pwAgain = xformObj.getInstanceValue(ZaDomain.A2_zimbraAutoProvAccountPasswordAgainInDlg);

    if (pw == pwAgain){
        xformObj.setInstanceValue(false, ZaDomain.A2_zimbraAutoProvAccountPasswordUnmatchedWarning);
        this._button[DwtDialog.OK_BUTTON].setEnabled(true);
    } else {
        var is1stTime = AjxUtil.isEmpty(pwAgain);
        //we show the warning msg until user start to input pwAgain
        xformObj.setInstanceValue(!is1stTime, ZaDomain.A2_zimbraAutoProvAccountPasswordUnmatchedWarning);

        this._button[DwtDialog.OK_BUTTON].setEnabled(false);
    }
}


ZaConfirmPasswordDialog.prototype.getMyXForm =
function() {
    var xFormObject = {
        items:[
            {type:_GROUP_, numCols:2, colSizes:["200px","*"], colSpan:"*",
                items: [
                    {type:_DWT_ALERT_, style:DwtAlert.WARNING, iconVisible:true,
                        content:ZaMsg.MSG_AUTOPROV_MANUAL_PASSSET,
                        width:"100%", colSpan:"*"
                    },
                    {type:_SPACER_, height:10, colSpan:"*"},
                    {
                        ref:ZaDomain.A2_zimbraAutoProvAccountPasswordInDlg,
                        type:_SECRET_, msgName:ZaMsg.LBL_provisionedAccountPassword,
                        label:ZaMsg.LBL_provisionedAccountPassword, labelLocation:_LEFT_,
                        width:"190px",
                        cssClass:"admin_xform_name_input"
                    },
                    {type:_SPACER_, height:10, colSpan:"*"},
                    {
                        ref:ZaDomain.A2_zimbraAutoProvAccountPasswordAgainInDlg,
                        type:_SECRET_, msgName:ZaMsg.NAD_ConfirmPassword,
                        label:ZaMsg.NAD_ConfirmPassword, labelLocation:_LEFT_,
                        width:"190px",
                        cssClass:"admin_xform_name_input"
                    },
                    {
                        ref:ZaDomain.A2_zimbraAutoProvAccountPasswordUnmatchedWarning,
                        type:_DWT_ALERT_, style: DwtAlert.CRITICAL, iconVisible: false,
                        label:"", labelLocation:_LEFT_,
                        width:"180px", colSpan:"1",
                        content: ZaMsg.ERROR_PASSWORD_MISMATCH,
                        visibilityChecks:[[XForm.checkInstanceValue, ZaDomain.A2_zimbraAutoProvAccountPasswordUnmatchedWarning, true]],
                        visibilityChangeEventSources:[ZaDomain.A2_zimbraAutoProvAccountPasswordUnmatchedWarning]
                    }
                ]
            }
        ]
    };
    return xFormObject;
}


/////////////////////////////
ZaServerOptionList.prototype.setEnabled =
function(enabled) {
	 DwtListView.prototype.setEnabled.call(this, enabled);
    //
     this.initializeDisable=!enabled;
     if(!AjxUtil.isEmpty(this._list)){
        for(var i=0;i<this._list.size();i++){
            document.getElementById(this._htmlElId+"_schedule_"+i).disabled=!enabled;
        }
     }

}
}
if (AjxPackage.define("zimbraAdmin.domains.view.ZaManualProvConfigDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: qinan
 * Date: 8/11/11
 * Time: 4:44 PM
 * To change this template use File | Settings | File Templates.
 */


ZaManualProvConfigDialog = function(parent, w, h, title) {
    if (arguments.length == 0) return;
    this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];
    ZaXDialog.call(this, parent, null, title, w, h,null, ZaId.DLG_AUTPROV_MANUAL);
    this._containedObject = {};
    this.initForm(ZaDomain.myXModel,this.getMyXForm());
    this._helpURL = ZaManualProvConfigDialog.helpURL;
}

ZaManualProvConfigDialog.prototype = new ZaXDialog;
ZaManualProvConfigDialog.prototype.constructor = ZaManualProvConfigDialog;
ZaManualProvConfigDialog.helpURL = ZaUtil.HELP_URL;

ZaManualProvConfigDialog.prototype.setObject = function(entry) {
    entry[ZaDomain.A2_zimbraAutoProvSearchActivated] = "TRUE";
    this._button[DwtDialog.OK_BUTTON].setEnabled(false);
    ZaXDialog.prototype.setObject.call(this,entry);
}

ZaManualProvConfigDialog.prototype.getMyXForm =
function() {
	var xFormObject = {
		numCols:1,
		items:[
          {type:_GROUP_,isTabGroup:true, items: [
                { type: _DWT_ALERT_,
                    containerCssStyle: "padding-bottom:0px",
                    style: DwtAlert.INFO,
                    iconVisible: false,
                    content: ZaMsg.MSG_AUTOPROV_MANUAL,
                    visibilityChecks:[],
                    colSpan:"2"
                },
                {type: _SPACER_, height: 10 },
                {type:_GROUP_, colSpan:2, numCols:3, width:"100%", colSizes:["180px","85px","180px"],cellspacing:"5px",
                    items:[
                        {type:_TEXTFIELD_, cssClass:"admin_xform_name_input",width:"185px", ref:ZaSearch.A_query, label:null,
                            elementChanged: function(elementValue,instanceValue, event) {
                              var charCode = event.charCode;
                              if (charCode == 13 || charCode == 3) {
                                  ZaManualProvConfigDialog.srchButtonHndlr.call(this);
                              } else {
                                  this.getForm().itemChanged(this, elementValue, event);
                              }
                            },
                            visibilityChecks:[],enableDisableChecks:[]
                        },
                        {type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonSearch, width:"80px",
                            onActivate:ZaManualProvConfigDialog.srchButtonHndlr,align:_CENTER_,
                            enableDisableChecks:[[XForm.checkInstanceValue,ZaDomain.A2_zimbraAutoProvSearchActivated,"TRUE"]],
                            enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvSearchActivated]
                        },
                        {type:_OUTPUT_, value:ZaMsg.LBL_ManualProvAccount,visibilityChecks:[]},
                        {ref:ZaDomain.A2_zimbraAutoProvAccountPool, type:_DWT_LIST_, height:"200px", width:"180px",
                            cssClass: "DLSource",
                            widgetClass:ZaAccMiniListView,
                            rowSpan:4,
                            onSelection:ZaManualProvConfigDialog.accPoolSelectionListener,
                            visibilityChecks:[],enableDisableChecks:[]
                        },
                        {type:_DWT_BUTTON_, label:AjxMsg.addAll, width:"80px",
                            onActivate:ZaManualProvConfigDialog.addAllButtonHndlr,
                            enableDisableChecks:[[XForm.checkInstanceValueNotEmty,ZaDomain.A2_zimbraAutoProvAccountPool]],
                            enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvAccountPool]
                        },
                        {ref: ZaDomain.A2_zimbraAutoProvAccountTargetPool, type:_DWT_LIST_, height:"200px", width:"180px",
                            cssClass: "DLSource",
                            widgetClass:ZaAccMiniListView,
                            rowSpan:4,
                            onSelection:ZaManualProvConfigDialog.accTargetSelectionListener,
                            visibilityChecks:[],enableDisableChecks:[]
                        },
                        {type:_DWT_BUTTON_, label:AjxMsg.add, width:"80px",
                           onActivate:ZaManualProvConfigDialog.addButtonHndlr,
                           enableDisableChecks:[[XForm.checkInstanceValueNotEmty,ZaDomain.A2_zimbraAutoProvAccountSrcSelectedPool]],
                           enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvAccountSrcSelectedPool]
                        },
                        {type:_DWT_BUTTON_, label:AjxMsg.remove, width:"80px",
                           onActivate:ZaManualProvConfigDialog.removeButtonHndlr,
                           enableDisableChecks:[[XForm.checkInstanceValueNotEmty,ZaDomain.A2_zimbraAutoProvAccountTgtSelectedPool]],
                           enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvAccountTgtSelectedPool]
                        },
                        {type:_DWT_BUTTON_, label:AjxMsg.removeAll, width:"80px",
                            onActivate:ZaManualProvConfigDialog.removeAllButtonHndlr,
                            enableDisableChecks:[[XForm.checkInstanceValueNotEmty,ZaDomain.A2_zimbraAutoProvAccountTargetPool]],
                            enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvAccountTargetPool]
                        },
                        {type:_GROUP_,numCols:3,colSizes:["90px","*","90px"],
                            items:[
                                {type:_SPACER_, colSpan:3},
                                {type:_DWT_BUTTON_, label:ZaMsg.Previous, width:75,
                                   id:"backButton", icon:"LeftArrow", disIcon:"LeftArrowDis",
                                   onActivate:ZaManualProvConfigDialog.backPoolButtonHndlr,align:_CENTER_,
                                   enableDisableChecks:[ZaManualProvConfigDialog.backBtnEnabled],
                                   enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvAccountPoolPageNum,ZaDomain.A2_zimbraAutoProvSearchActivated]
                                },
                                {type:_CELLSPACER_},
                                {type:_DWT_BUTTON_, label:ZaMsg.Next, width:75,
                                   id:"fwdButton", icon:"RightArrow", disIcon:"RightArrowDis",
                                   onActivate:ZaManualProvConfigDialog.fwdPoolButtonHndlr,align:_CENTER_,
                                   enableDisableChecks:[ZaManualProvConfigDialog .forwardBtnEnabled],
                                   enableDisableChangeEventSources:[ZaDomain.A2_zimbraAutoProvAccountPoolPageNum,ZaDomain.A2_zimbraAutoProvSearchActivated]
                                }
                            ]
                        },
                        {type:_CELLSPACER_}
                    ]
                }
            ]
          }
        ]
    };
    return xFormObject;
}

ZaManualProvConfigDialog.srchButtonHndlr = function() {
	var instance = this.getForm().getInstance();
	var formParent = this.getForm().parent;
    var soapDoc = AjxSoapDoc.create("SearchAutoProvDirectoryRequest", ZaZimbraAdmin.URN, null);
    soapDoc.getMethod().setAttribute("keyAttr","name");
	var attr = soapDoc.set("domain", instance.id);
	attr.setAttribute("by", "id");

    var query = "";
	if(instance[ZaSearch.A_query]) {
		query = ZaSearch.getSearchByNameQuery (instance[ZaSearch.A_query]);
	}
    soapDoc.set("query", query);
    var limit = ZaSettings.RESULTSPERPAGE;
	if(!instance[ZaDomain.A2_zimbraAutoProvAccountPoolPageNum]) {
		instance[ZaDomain.A2_zimbraAutoProvAccountPoolPageNum] = 0;
	}
	var offset = instance[ZaDomain.A2_zimbraAutoProvAccountPoolPageNum]*ZaSettings.RESULTSPERPAGE;
	var attrs = [ZaAccount.A_name, ZaAccount.A_mail, ZaItem.A_zimbraId,ZaAccount.A_displayname].join(",");
    soapDoc.getMethod().setAttribute("keyAttr","name");
	soapDoc.getMethod().setAttribute("offset", offset);
	soapDoc.getMethod().setAttribute("limit", limit);
    soapDoc.getMethod().setAttribute("attrs", attrs);
    soapDoc.getMethod().setAttribute("refresh", "1");

	this.getModel().setInstanceValue(this.getInstance(),ZaDomain.A2_zimbraAutoProvSearchActivated,"FALSE");

    var params = {};
    params.soapDoc = soapDoc;
    params.asyncMode = false;
    var reqMgrParams = {
        controller : ZaApp.getInstance().getCurrentController(),
        busyMsg : ZaMsg.BUSY_AUTOPROV_GETACCT
    }

    try {
        var resp = ZaRequestMgr.invoke(params, reqMgrParams);
        this.getModel().setInstanceValue(this.getInstance(),ZaDomain.A2_zimbraAutoProvSearchActivated,"TRUE");
        if(!resp || resp.Body.SearchAutoProvDirectoryResponse.Fault)
            return;
        if(!resp.Body.SearchAutoProvDirectoryResponse || !resp.Body.SearchAutoProvDirectoryResponse.entry)
            return;
        var provAcctList = [];
        var objs = resp.Body.SearchAutoProvDirectoryResponse.entry;
        var searchTotal = resp.Body.SearchAutoProvDirectoryResponse.searchTotal;
        for(var i = 0; objs && i < objs.length; i++) {
            var obj = objs[i];
            var acct = new Object();
            acct.dn = obj.dn;
            var len = obj.a.length;
            acct.attrs = new Array();
            for(var ix = 0; ix < len; ix ++) {
                if(!acct.attrs[[obj.a[ix].n]]) {
                    acct.attrs[[obj.a[ix].n]] = obj.a[ix]._content;
                } else {
                    if(!(acct.attrs[[obj.a[ix].n]] instanceof Array)) {
                        acct.attrs[[obj.a[ix].n]] = [acct.attrs[[obj.a[ix].n]]];
                    }
                    acct.attrs[[obj.a[ix].n]].push(obj.a[ix]._content);
                }
            }
            acct.name = acct.attrs[ZaAccount.A_mail];
            provAcctList.push(acct);
        }
        this.getModel().setInstanceValue(this.getInstance(),ZaDomain.A2_zimbraAutoProvAccountPool,provAcctList);
        var poolTotalPages = Math.ceil(searchTotal/ZaSettings.RESULTSPERPAGE);
        this.getModel().setInstanceValue(this.getInstance(),ZaDomain.A2_zimbraAutoProvAccountPoolPageTotal,poolTotalPages);
    } catch(ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaManualProvConfigDialog.srchButtonHndlr", null, false);
    }
}

ZaManualProvConfigDialog.accPoolSelectionListener = function() {
	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		arr.sort();
		this.getModel().setInstanceValue(this.getInstance(), ZaDomain.A2_zimbraAutoProvAccountSrcSelectedPool, arr);
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaDomain.A2_zimbraAutoProvAccountSrcSelectedPool, null);
	}
}

ZaManualProvConfigDialog.addButtonHndlr = function (ev) {
	var form = this.getForm();
	var instance = form.getInstance();
	var sourceListItems = form.getItemsById(ZaDomain.A2_zimbraAutoProvAccountPool);
	if(sourceListItems && (sourceListItems instanceof Array) && sourceListItems[0] && sourceListItems[0].widget) {
		var selection = sourceListItems[0].widget.getSelection();
		var currentTargetList = instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] ? instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] : [];
		var list = (selection instanceof AjxVector) ? selection.getArray() : (selection instanceof Array) ? selection : [selection];
		if(list) {
			list.sort(ZaItem.compareNamesDesc);
			var tmpTargetList = [];
			var cnt2 = currentTargetList.length;
			for(var i=0;i<cnt2;i++)
				tmpTargetList.push(currentTargetList[i]);

			tmpTargetList.sort(ZaItem.compareNamesDesc);

			var tmpList = [];
			var cnt = list.length;
			for(var i=cnt-1; i>=0; i--) {
				var dup = false;
				cnt2 = tmpTargetList.length;
				for(var j = cnt2-1; j >=0; j--) {
					if(list[i].name==tmpTargetList[j].name) {
						dup=true;
						tmpTargetList.splice(j,cnt2-j);
						break;
					}
				}
				if(!dup) {
					currentTargetList.push(list[i])
				}
			}
			this.getModel().setInstanceValue(this.getInstance(), ZaDomain.A2_zimbraAutoProvAccountTargetPool, currentTargetList);
		}
	}
	if(currentTargetList.length > 0) {
		form.parent._button[DwtDialog.OK_BUTTON].setEnabled(true);
	} else {
		form.parent._button[DwtDialog.OK_BUTTON].setEnabled(false);
	}
}

ZaManualProvConfigDialog.accTargetSelectionListener = function() {
	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		arr.sort();
		this.getModel().setInstanceValue(this.getInstance(), ZaDomain.A2_zimbraAutoProvAccountTgtSelectedPool, arr);
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaDomain.A2_zimbraAutoProvAccountTgtSelectedPool, null);
	}
}

ZaManualProvConfigDialog.addAllButtonHndlr = function (ev) {
	var form = this.getForm();
	var instance = form.getInstance();
	var oldArr = instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] ? instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool]  : [];
	var arr = instance[ZaDomain.A2_zimbraAutoProvAccountPool];
	var arr2 = new Array();
	if(arr) {
		var cnt = arr.length;
		var oldCnt = oldArr.length;
		for(var ix=0; ix< cnt; ix++) {
			var found = false;
			for(var j = oldCnt-1;j>=0;j-- ) {
				if(oldArr[j].name == arr[ix].name) {
					found = true;
					break;
				}
			}
			if(!found)
				arr2.push(arr[ix]);
		}
	}
	arr2 = arr2.concat(oldArr);
	this.getModel().setInstanceValue(this.getInstance(), ZaDomain.A2_zimbraAutoProvAccountTargetPool, arr2);
	//this.getModel().setInstanceValue(this.getInstance(), ZaDomain.A2_zimbraAutoProvAccountPool, new Array());
	var instance = form.getInstance();
	var currentTargetList = instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] ? instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] : [];
	if(currentTargetList.length > 0) {
		form.parent._button[DwtDialog.OK_BUTTON].setEnabled(true);
	} else {
		form.parent._button[DwtDialog.OK_BUTTON].setEnabled(false);
	}
}

ZaManualProvConfigDialog.removeButtonHndlr = function (ev) {
	var form = this.getForm();
	var instance = form.getInstance();
	var targetListItems = form.getItemsById(ZaDomain.A2_zimbraAutoProvAccountTargetPool);
	if(targetListItems && (targetListItems instanceof Array) && targetListItems[0] && targetListItems[0].widget) {
		var selection = targetListItems[0].widget.getSelection();

		var currentTargetList = instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] ? instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] : [];
		currentTargetList.sort(ZaItem.compareNamesDesc);
		var tmpTargetList = [];
		var list = (selection instanceof AjxVector) ? selection.getArray() : (selection instanceof Array) ? selection : [selection];
		if(list) {
			list.sort(ZaItem.compareNamesDesc);
			var cnt = list.length;
			var cnt2 = currentTargetList.length;
			for(var i=0;i<cnt2;i++)
				tmpTargetList.push(currentTargetList[i]);

			for(var i=cnt-1; i>=0; i--) {
				var cnt2 = tmpTargetList.length;
				for(var j = cnt2-1; j >=0; j--) {
					if(list[i].name==tmpTargetList[j].name) {
						currentTargetList.splice(j,1);
						tmpTargetList.splice(j,cnt2-j);
					}
				}
			}
			this.getModel().setInstanceValue(this.getInstance(), ZaDomain.A2_zimbraAutoProvAccountTargetPool, currentTargetList);
		}
	}
	if(currentTargetList.length > 0) {
		form.parent._button[DwtDialog.OK_BUTTON].setEnabled(true);
	} else {
		form.parent._button[DwtDialog.OK_BUTTON].setEnabled(false);
	}
}

ZaManualProvConfigDialog.removeAllButtonHndlr = function (ev) {
	var form = this.getForm();
	var instance = form.getInstance();

	instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] = new Array();
	var currentTargetList = instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] ? instance[ZaDomain.A2_zimbraAutoProvAccountTargetPool] : [];
	if(currentTargetList.length > 0) {
		form.parent._button[DwtDialog.OK_BUTTON].setEnabled(true);
	} else {
		form.parent._button[DwtDialog.OK_BUTTON].setEnabled(false);
	}
	this.getForm().setInstance(instance);
}

ZaManualProvConfigDialog.backPoolButtonHndlr =
function(evt) {
	var currentPageNum = parseInt(this.getInstanceValue("/poolPagenum"))-1;
	this.setInstanceValue(currentPageNum,"/poolPagenum");
	ZaManualProvConfigDialog.srchButtonHndlr.call(this, evt);
}

ZaManualProvConfigDialog.fwdPoolButtonHndlr =
function(evt) {
	var currentPageNum = parseInt(this.getInstanceValue("/poolPagenum"));
	this.setInstanceValue(currentPageNum+1,"/poolPagenum");
	ZaManualProvConfigDialog.srchButtonHndlr.call(this, evt);
}

ZaManualProvConfigDialog.forwardBtnEnabled = function () {
	return (parseInt(this.getInstanceValue(ZaDomain.A2_zimbraAutoProvAccountPoolPageNum)) < (parseInt(this.getInstanceValue(ZaDomain.A2_zimbraAutoProvAccountPoolPageTotal))-1)
            && this.getInstanceValue(ZaDomain.A2_zimbraAutoProvSearchActivated)=="TRUE");
};

ZaManualProvConfigDialog.backBtnEnabled = function () {
	return (parseInt(this.getInstanceValue(ZaDomain.A2_zimbraAutoProvAccountPoolPageNum)) > 0
            && this.getInstanceValue(ZaDomain.A2_zimbraAutoProvSearchActivated)== "TRUE");
};

ZaManualProvConfigDialog.finishConfig = function () {
	if(!this.parent.handleManualProvDlg)
        return;

    this.parent.handleManualProvDlg.popdown();
    var obj = this.parent.handleManualProvDlg.getObject();
    var instance = this.getInstance();

    var acctlist = this.getModel().getInstanceValue(instance,ZaDomain.A2_zimbraAutoProvAccountTargetPool);
    var soapDoc = AjxSoapDoc.create("BatchRequest", "urn:zimbra");
    soapDoc.setMethodAttribute("onerror", "continue");

    for(var i = 0; i < acctlist.length; i++) {
		var autoProvDoc = soapDoc.set("AutoProvAccountRequest", null, null, ZaZimbraAdmin.URN);

        var attr = soapDoc.set("domain", instance.id, autoProvDoc);
        attr.setAttribute("by", "id");

        attr = soapDoc.set("principal", acctlist[i].dn, autoProvDoc);
        attr.setAttribute("by", "dn");
    }

    var params = new Object();
    params.soapDoc = soapDoc;
    var reqMgrParams ={
        controller:ZaApp.getInstance().getCurrentController(),
        busyMsg : ZaMsg.BUSY_CREATING_GALDS,
        showBusy:true
    }
    ZaRequestMgr.invoke(params, reqMgrParams);
}
}
if (AjxPackage.define("zimbraAdmin.domains.view.AddrACL_XFormItem")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* XFormItem class: _ADDR_ACL_
* this item is used in the Admin UI to display ACls for addresses (groups, accounts, etc)
* @class AddrACL_XFormItem
* @constructor AddrACL_XFormItem
* @author Greg Solovyev
**/
AddrACL_XFormItem = function() {}
XFormItemFactory.createItemType("_ADDR_ACL_", "addracl", AddrACL_XFormItem, Composite_XFormItem);
AddrACL_XFormItem.prototype.numCols = 5;
AddrACL_XFormItem.prototype.nowrap = true;
AddrACL_XFormItem.prototype.initializeItems = function() {
	var changeMethod = this.getInheritedProperty("onChange");
	
	if(changeMethod) {
		this.items[0].onChange = changeMethod;
		this.items[1].onChange = changeMethod;		
	} else {
		this.items[0].onChange = null;
		this.items[1].onChange = null;		
	}	
	
	var visibleBoxes = this.getInheritedProperty("visibleBoxes");
	if(visibleBoxes)
		this.items[1].visibleBoxes = visibleBoxes;
		
	var dataFetcherMethod = this.getInheritedProperty("dataFetcherMethod");
	if(dataFetcherMethod)
		this.items[0].dataFetcherMethod = dataFetcherMethod;
		
	var toolTipContent = this.getInheritedProperty("toolTipContent");
	if(toolTipContent)
		this.items[0].toolTipContent = toolTipContent;
		
	Composite_XFormItem.prototype.initializeItems.call(this);
}
AddrACL_XFormItem.prototype.items = [
	{type:_DYNSELECT_, width:"200px", inputSize:30, ref:"name", editable:true, forceUpdate:true,
		dataFetcherClass:ZaSearch,
		visibilityChecks:[],enableDisableChecks:[],
		emptyText:ZaMsg.enterSearchTerm, 
		elementChanged:function(val,instanceValue, event) {
			this.getForm().itemChanged(this, val, event);			
		}
	},
	{type:_ACL_, forceUpdate:true, ref:"acl", labelLocation:_NONE_, label:null}
];

/**
* XFormItem class: _STATIC_ADDR_ACL_
* this item is used in the Admin UI to display ACls for addresses (groups, accounts, etc) with address being read-only
* @class StaticAddrACL_XFormItem
* @constructor StaticAddrACL_XFormItem
* @author Greg Solovyev
**/
StaticAddrACL_XFormItem = function() {}
XFormItemFactory.createItemType("_STATIC_ADDR_ACL_", "staticaddracl", StaticAddrACL_XFormItem, Composite_XFormItem);
StaticAddrACL_XFormItem.prototype.numCols = 5;
StaticAddrACL_XFormItem.prototype.nowrap = true;
StaticAddrACL_XFormItem.prototype.initializeItems = function() {
	var changeMethod = this.getInheritedProperty("onChange");
	
	if(changeMethod) {
		this.items[0].onChange = changeMethod;
		this.items[1].onChange = changeMethod;		
	} else {
		this.items[0].onChange = null;
		this.items[1].onChange = null;		
	}	
	
	var visibleBoxes = this.getInheritedProperty("visibleBoxes");
	if(visibleBoxes)
		this.items[1].visibleBoxes = visibleBoxes;
		
	Composite_XFormItem.prototype.initializeItems.call(this);
}
StaticAddrACL_XFormItem.prototype.items = [
	{type:_OUTPUT_, width:"200px", ref:"name", 
		visibilityChecks:[],enableDisableChecks:[]
	},
	{type:_ACL_, forceUpdate:true, ref:"acl", labelLocation:_NONE_, label:null}
];
}
if (AjxPackage.define("zimbraAdmin.domains.view.ZaEditDomainAclXDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaEditDomainAclXDialog
* @contructor ZaEditDomainAclXDialog
* @author Greg Solovyev
* @param parent
* param app
**/
ZaEditDomainAclXDialog = function(parent,w, h) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];	
	ZaXDialog.call(this, parent,null, ZaMsg.Edit_perms_title, w, h);
	this._containedObject = {acl:{r:0,w:0,i:0,d:0,a:0,x:0},name:"",gt:""};
	this.initForm(ZaDomain.aclXModel,this.getMyXForm());
}

ZaEditDomainAclXDialog.prototype = new ZaXDialog;
ZaEditDomainAclXDialog.prototype.constructor = ZaEditDomainAclXDialog;

ZaEditDomainAclXDialog.prototype.getMyXForm = 
function() {	
	var xFormObject = {
		numCols:2,
		items:[
			{type:_SWITCH_, items:[
				{type:_CASE_,
					visibilityChecks:[[XForm.checkInstanceValue,"gt",ZaDomain.A_NotebookGroupACLs]],
					visibilityChangeEventSources:["gt"],
				 	
					items:[
						{ref:".", type:_STATIC_ADDR_ACL_, label:null, labelLocation:_NONE_,
							visibleBoxes:{r:true,w:true,a:false,i:true,d:true,x:false},
							forceUpdate:true,dataFetcherMethod:ZaSearch.prototype.dynSelectSearchGroups
						}						
					]
				},
				{type:_CASE_, 
					visibilityChecks:[[XForm.checkInstanceValue,"gt",ZaDomain.A_NotebookUserACLs]],
					visibilityChangeEventSources:["gt"],
					
					items:[
						{ref:".", type:_STATIC_ADDR_ACL_, label:null, labelLocation:_NONE_,
							visibleBoxes:{r:true,w:true,a:false,i:true,d:true,x:false},
							forceUpdate:true,dataFetcherMethod:ZaSearch.prototype.dynSelectSearch,
							dataFetcherTypes:[ZaSearch.ACCOUNTS],
							dataFetcherAttrs:[ZaItem.A_zimbraId, ZaItem.A_cn, ZaAccount.A_name, ZaAccount.A_displayname, ZaAccount.A_mail]
						}						
					]
				},
				{type:_CASE_, 
					visibilityChecks:[[XForm.checkInstanceValue,"gt",ZaDomain.A_NotebookDomainACLs]],
					visibilityChangeEventSources:["gt"],
					
					items:[
						{ref:".", type:_STATIC_ADDR_ACL_, label:null, labelLocation:_NONE_,
							visibleBoxes:{r:true,w:true,a:false,i:true,d:true,x:false},
							forceUpdate:true,dataFetcherMethod:ZaSearch.prototype.dynSelectSearchDomains
						}					
					]
				},
				{type:_CASE_, 
					visibilityChecks:[[XForm.checkInstanceValue,"gt",ZaDomain.A_NotebookAllACLs]],
					visibilityChangeEventSources:["gt"],
					
					items:[
						{ref:"acl", type:_ACL_, label:ZaMsg.ACL_All,labelLocation:_LEFT_,
						visibleBoxes:{r:true,w:true,a:false,i:true,d:true,x:false}}						
					]
				},								
				{type:_CASE_, 
					visibilityChecks:[[XForm.checkInstanceValue,"gt",ZaDomain.A_NotebookPublicACLs]],
					visibilityChangeEventSources:["gt"],					
					
					items:[
						{ref:"acl", type:_ACL_, visibleBoxes:{r:true,w:false,a:false,i:false,d:false,x:false},
						label:ZaMsg.ACL_Public,labelLocation:_LEFT_}						
					]
				}				
			]}
		]		
	}
	return xFormObject;
}
}
if (AjxPackage.define("zimbraAdmin.domains.view.ZaAddDomainAclXDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaAddDomainAclXDialog
* @contructor ZaAddDomainAclXDialog
* @author Greg Solovyev
* @param parent
* param app
**/
ZaAddDomainAclXDialog = function(parent, w, h) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];	
	ZaXDialog.call(this, parent,null, ZaMsg.Add_perms_title, w, h);
	this._containedObject = {acl:{r:0,w:0,i:0,d:0,a:0,x:0},name:"",gt:""};
	this.initForm(ZaDomain.aclXModel,this.getMyXForm());
}

ZaAddDomainAclXDialog.prototype = new ZaXDialog;
ZaAddDomainAclXDialog.prototype.constructor = ZaAddDomainAclXDialog;

ZaAddDomainAclXDialog.prototype.getMyXForm = 
function() {	
	var xFormObject = {
		numCols:2,
		items:[
			{type:_OSELECT1_, ref:"gt", choices:[{value:ZaDomain.A_NotebookGroupACLs, label:ZaMsg.ACL_Grp},
				{value:ZaDomain.A_NotebookUserACLs,label:ZaMsg.ACL_User},
				{value:ZaDomain.A_NotebookDomainACLs,label:ZaMsg.ACL_Dom}
			],visibilityChecks:[],enableDisableChecks:[] },
			{type:_SWITCH_, items:[
				{type:_CASE_, 
					visibilityChecks:[[XForm.checkInstanceValue,"gt",ZaDomain.A_NotebookGroupACLs]],
					visibilityChangeEventSources:["gt"],
					items:[
						{ref:".", type:_ADDR_ACL_, label:null, labelLocation:_NONE_,
							visibleBoxes:{r:true,w:true,a:false,i:true,d:true,x:false},
							toolTipContent:ZaMsg.tt_StartTypingDLName,
							forceUpdate:true,dataFetcherMethod:ZaSearch.prototype.dynSelectSearchGroups
						}						
					]
				},
				{type:_CASE_, 
					visibilityChecks:[[XForm.checkInstanceValue,"gt",ZaDomain.A_NotebookUserACLs]],
					visibilityChangeEventSources:["gt"],
					items:[
						{ref:".", type:_ADDR_ACL_, label:null, labelLocation:_NONE_,
							visibleBoxes:{r:true,w:true,a:false,i:true,d:true,x:false},
							toolTipContent:ZaMsg.tt_StartTypingAccountName,
							forceUpdate:true,dataFetcherMethod:ZaSearch.prototype.dynSelectSearch,
							dataFetcherTypes:[ZaSearch.ACCOUNTS],
							dataFetcherAttrs:[ZaItem.A_zimbraId, ZaItem.A_cn, ZaAccount.A_name, ZaAccount.A_displayname, ZaAccount.A_mail]
						}						
					]
				},
				{type:_CASE_, 
					visibilityChecks:[[XForm.checkInstanceValue,"gt",ZaDomain.A_NotebookDomainACLs]],
					visibilityChangeEventSources:["gt"],
					items:[
						{ref:".", type:_ADDR_ACL_, label:null, labelLocation:_NONE_,
							visibleBoxes:{r:true,w:true,a:false,i:true,d:true,x:false},
							toolTipContent:ZaMsg.tt_StartTypingDomainName,
							forceUpdate:true,dataFetcherMethod:ZaSearch.prototype.dynSelectSearchDomains
						}
					]
				}		
			]}
		]		
	}
	return xFormObject;
}
}
if (AjxPackage.define("zimbraAdmin.domains.view.ZaGalObjMiniListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
 
 /**
 * @author Greg Solovyev
 **/
ZaGalObjMiniListView = function(parent, className, posStyle, headerList) {
	if (arguments.length == 0) return;
	ZaListView.call(this, parent, className, posStyle, headerList);
	this.hideHeader = true;
}

ZaGalObjMiniListView.prototype = new ZaListView;
ZaGalObjMiniListView.prototype.constructor = ZaGalObjMiniListView;

ZaGalObjMiniListView.prototype.toString = function() {
	return "ZaGalObjMiniListView";
};

ZaGalObjMiniListView.prototype.createHeaderHtml = function (defaultColumnSort) {
	if(!this.hideHeader) {
		DwtListView.prototype.createHeaderHtml.call(this,defaultColumnSort);
	} 
}


ZaGalObjMiniListView.prototype._createItemHtml =
function(account, now, isDragProxy) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(account, div, DwtListView.TYPE_LIST_ITEM);
	
	var idx = 0;
	html[idx++] = "<table width='100%' cellspacing='2' cellpadding='0'>";

	html[idx++] = "<tr>";
	if(typeof(account)=="string") {
		html[idx++] = "<td width=100%>";
		html[idx++] = AjxStringUtil.htmlEncode(account);
		html[idx++] = "</td>";			
	} else if(this._headerList) {
		var cnt = this._headerList.length;
		for(var i = 0; i < cnt; i++) {
			var field = this._headerList[i]._field;
		 	if(field == "fullName") {
				// name
				html[idx++] = "<td align='left' width=" + this._headerList[i]._width + "><nobr>";
				html[idx++] = AjxStringUtil.htmlEncode(account.fullName);
				html[idx++] = "</nobr></td>";
			} else if (field == "email") {
				// display name
				html[idx++] = "<td align='left' width=" + this._headerList[i]._width + "><nobr>";
				html[idx++] = AjxStringUtil.htmlEncode(account.email);
				html[idx++] = "</nobr></td>";	
			} 
		}
	} else if(typeof(account)=="object" && account.email) {
		html[idx++] = "<td width=100%>";
		html[idx++] = AjxStringUtil.htmlEncode(account.email);
		html[idx++] = "</td>";
	} else {
		html[idx++] = "<td width=100%>";
		html[idx++] = AjxStringUtil.htmlEncode(String(account));		
		html[idx++] = "</td>";		
	}
	
	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}


ZaGalObjMiniListView.prototype._setNoResultsHtml = function() {
	var buffer = new AjxBuffer();
	var	div = document.createElement("div");
	
	buffer.append("<table width='100%' cellspacing='0' cellpadding='1'>",
				  "<tr><td class='NoResults'><br>",ZaMsg.Domain_GALTestNoResults,
				  "</td></tr></table>");
	
	div.innerHTML = buffer.toString();
	this._addRow(div);
};

ZaGalObjMiniListView.prototype._sortColumn = function (columnItem, bSortAsc){
	if(this.parent.parent.searchAccounts) {
		this.parent.parent.searchAccounts(columnItem.getSortField(),bSortAsc);
	}
};
}
if (AjxPackage.define("zimbraAdmin.domains.view.ZaDomainAccountQuotaListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaDomainAccountQuotaListView
* @param parent
* @author Ming Zhang
**/

ZaDomainAccountQuotaListView = function(parent) {

	var className = null;
	var posStyle = DwtControl.ABSOLUTE_STYLE;

	var headerList = this._getHeaderList();

	ZaListView.call(this, {
		parent:parent,
		className:className,
		posStyle:posStyle,
		headerList:headerList,
		id: ZaId.TAB_DOMAIN_MANAGE,
		scrollLoading:true
	});

    this.setLocation(0, 0);
	this._appCtxt = this.shell.getData(ZaAppCtxt.LABEL);
}

ZaDomainAccountQuotaListView.prototype = new ZaListView;
ZaDomainAccountQuotaListView.prototype.constructor = ZaDomainAccountQuotaListView;

ZaDomainAccountQuotaListView.prototype.toString =
function() {
	return "ZaDomainAccountQuotaListView";
}

/**
* Renders a single item as a DIV element.
*/
ZaDomainAccountQuotaListView.prototype._createItemHtml =
function(mbx, now, isDragProxy) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(mbx, div, DwtListView.TYPE_LIST_ITEM);

	var idx = 0;
	html[idx++] = "<table width='100%'  cellspacing='0' cellpadding='0'>";

	html[idx++] = "<tr>";
	if(this._headerList) {
		var cnt = this._headerList.length;
		var progressBar = null ;
		var progressCssClass = null ;
		var wholeCssClass = null ;
		var percent = null ;
		var percentInt = null ;
		for(var i = 0; i < cnt; i++) {
			var field = this._headerList[i]._field;
			if(field == ZaAccountQuota.A2_name) {
				// account
				html[idx++] = "<td width=" + this._headerList[i]._width + "><nobr>";
				html[idx++] = AjxStringUtil.htmlEncode(mbx[ZaAccountQuota.A2_name]);
				html[idx++] = "</nobr></td>";
			} else if (field == ZaAccountQuota.A2_quotaUsage){ //this must before the QUOTA
				// quota usage
				html[idx++] = "<td width=" + this._headerList[i]._width + ">";
				progressCssClass = "mbxprogressused";
				wholeCssClass = "mbxprogressbar" ;
				progressBar = new DwtProgressBar(this);
				percent = mbx[ZaAccountQuota.A2_quotaUsage] ;
				percentInt = parseInt(percent) ;
				if ( percentInt > 85 ) {
					progressCssClass += "Critical" ;
				}else if (percentInt > 65 ) {
					progressCssClass += "Warning" ;
				}

				progressBar.setProgressCssClass(progressCssClass);
				progressBar.setWholeCssClass(wholeCssClass);
				progressBar.setLabel (percent, true) ;
				progressBar.setValueByPercent (percent);

				html[idx++] = progressBar.getHtmlElement().innerHTML	;
				html[idx++] = "</td>";
				progressBar.dispose ();
			} else if(field == ZaAccountQuota.A2_quota) {
				// quota
				html[idx++] = "<td width=" + this._headerList[i]._width + ">";
				html[idx++] = AjxStringUtil.htmlEncode(mbx[ZaAccountQuota.A2_quota]);
				html[idx++] = "</td>";
			} else if (field == ZaAccountQuota.A2_diskUsage) {
				// mbx size
				html[idx++] = "<td width=" + this._headerList[i]._width + ">";
				html[idx++] = AjxStringUtil.htmlEncode(mbx[ZaAccountQuota.A2_diskUsage]);
				html[idx++] = "</td>";
			}
		}
	} else {
		html[idx++] = "<td width=100%><nobr>";
		html[idx++] = AjxStringUtil.htmlEncode(mbx[ZaAccountQuota.A2_name]);
		html[idx++] = "</nobr></td>";
	}

	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}


ZaDomainAccountQuotaListView.prototype._setNoResultsHtml = function() {
	var buffer = new AjxBuffer();
	var	div = document.createElement("div");

	buffer.append("<table width='100%' cellspacing='0' cellpadding='1'>",
				  "<tr><td class='NoResults'>",
				  AjxStringUtil.htmlEncode(ZaMsg.MBXStats_NoMbx),
				  "</td></tr></table>");

	div.innerHTML = buffer.toString();
	this._addRow(div);
};

ZaDomainAccountQuotaListView.prototype.setDomainName = function (domainName) {
    this._domainName = domainName;
}

ZaDomainAccountQuotaListView.prototype.setSortBy = function (sortBy) {
    this._sortBy = sortBy;
}

ZaDomainAccountQuotaListView.prototype.setSortAscending = function (sortAscending) {
    this._sortAscending = sortAscending;
}

ZaDomainAccountQuotaListView.prototype._getHeaderList =
function() {

	var headerList = new Array();
	var sortable = 1;
	var i = 0 ;

	headerList[i++] = new ZaListHeaderItem(ZaAccountQuota.A2_name, 	ZaMsg.MBXStats_ACCOUNT,
												null, 250, sortable++, ZaAccountQuota.A2_name, true, true);
	headerList[i++] = new ZaListHeaderItem(ZaAccountQuota.A2_diskUsage, ZaMsg.MBXStats_DISKUSAGE,
												null, 120,  sortable++,  ZaAccountQuota.A2_diskUsage,  true, true);
	headerList[i++] = new ZaListHeaderItem(ZaAccountQuota.A2_quotaUsage,  ZaMsg.MBXStats_QUOTAUSAGE,
												null, 200,  sortable++,  ZaAccountQuota.A2_quotaUsage, true, true);
	headerList[i++] = new ZaListHeaderItem(ZaAccountQuota.A2_quota,  ZaMsg.MBXStats_QUOTA,
												null, "auto",  sortable++, ZaAccountQuota.A2_quota, false, true);
	return headerList;
}

ZaDomainAccountQuotaListView.prototype._sortColumn = function (columnItem, bSortAsc){
	var sortAscending = bSortAsc ? 1 : 0 ;
	var sortBy = columnItem._sortField ;
	var xform = this.parent;
    var domainName = this._domainName ? this._domainName: "";
    var params = {};
    params.domainName = domainName;
    params.sortBy = sortBy;
    params.sortAscending =  sortAscending;
    var updateCallback = new AjxCallback(xform, ZaDomainXFormView.updateUserQuota, params);
    ZaDomain.getAccountQuota(domainName, 0, 50, sortBy, sortAscending, updateCallback);
};

ZaDomainAccountQuotaListView.prototype._loadMsg = function(params) {
    var offset = params.offset;
    var domainName = this._domainName ? this._domainName: "";
    var sortBy = this._sortBy ? this._sortBy:  null;
    var sortAscending = this._sortAscending ? this._sortAscending: null;
    var limit = params.limit;
    var updateCallback = new AjxCallback(this, this.updateMoreItems);
    ZaDomain.getAccountQuota(domainName, offset, limit, sortBy, sortAscending, updateCallback);
}

ZaDomainAccountQuotaListView.prototype.updateMoreItems = function(resp) {
    if (resp && !resp.isException()) {
        resp = resp.getResponse().Body.GetQuotaUsageResponse;
        if ((resp.account && resp.account.length > 0) && (resp.searchTotal && resp.searchTotal > 0)){
            var accounts = resp.account ;
            var accountArr = new Array ();

            for (var i=0; i<accounts.length; i ++){
                accountArr[i] = new ZaAccountQuota(accounts[i]);
            }

            this.replenish(AjxVector.fromArray(accountArr));
            this.setScrollHasMore(resp.more);
        }
    }
}

ZaAccountQuota = function (accountInfo) {
    this._init(accountInfo);
}

ZaAccountQuota.BytePerMB = 1048576;
ZaAccountQuota.prototype.constructor = ZaAccountQuota;
ZaAccountQuota.prototype.toString = function () {
    return this.name;
}

ZaAccountQuota.A2_name = "name";
ZaAccountQuota.A2_diskUsage = "diskUsage";
ZaAccountQuota.A2_quotaUsage = "quotaUsage";
ZaAccountQuota.A2_quota = "quota";
ZaAccountQuota.prototype._init = function (accountInfo) {
    var quotaLimit = 0;
    var percentage = 0 ;
    var diskUsed = 0;

    diskUsed = ( accountInfo.used / ZaAccountQuota.BytePerMB ).toFixed(2) ;

    if (accountInfo.limit == 0 ){
        quotaLimit = ZaMsg.Unlimited;
        percentage = 0 ;
    }else{
        if (accountInfo.limit >= ZaAccountQuota.BytePerMB) {
            quotaLimit = ( accountInfo.limit / ZaAccountQuota.BytePerMB ).toFixed() ;
        }else{ //quota limit is too small, we set it to 1MB. And it also avoid the NaN error when quotaLimit = 0
            quotaLimit = 1 ;
        }
        percentage = ((diskUsed * 100) / quotaLimit).toFixed() ;
    }

    this.name =  accountInfo.name;
    this.diskUsage = AjxMessageFormat.format (ZaMsg.MBXStats_DISK_MSB, [diskUsed]);
    this.quotaUsage = percentage + "\%" ;
    this.quota = quotaLimit + " MB";
}

}
if (AjxPackage.define("zimbraAdmin.cos.view.ZaCosListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaCosListView
* @param parent
* @author Roland Schemers
* @author Greg Solovyev
**/

ZaCosListView = function(parent, listType) {
	var className = null;
	var posStyle = DwtControl.ABSOLUTE_STYLE;

    this._listType = listType;

	var headerList = this._getHeaderList();
	ZaListView.call(this, {
		parent:parent, 
		className:className, 
		posStyle:posStyle, 
		headerList:headerList,
		id: ZaId.TAB_COS_MANAGE,
		scrollLoading:true

	});

	this._appCtxt = this.shell.getData(ZaAppCtxt.LABEL);
}

ZaCosListView.prototype = new ZaListView;
ZaCosListView.prototype.constructor = ZaCosListView;

ZaCosListView.prototype.toString = 
function() {
	return "ZaCosListView";
}

ZaCosListView.prototype.getTitle = 
function () {
	return ZaMsg.COS_view_title;
}

ZaCosListView.prototype.getTabIcon =
function () {
	return "COS" ;
}

/**
* Renders a single item as a DIV element.
*/
ZaCosListView.prototype._createItemHtml =
function(cos, no, isDragProxy) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(cos, div, DwtListView.TYPE_LIST_ITEM);
	
	var idx = 0;
	html[idx++] = "<table width='100%'>";
	html[idx++] = "<tr>";


	var cnt = this._headerList.length;

    var dwtId = Dwt.getNextId();
    var rowId = this._listType;

	for(var i = 0; i < cnt; i++) {
		var field = this._headerList[i]._field;
		var cellWidth = this._getCellWidth(i, {});
		if (field == "type") {
		// type
			html[idx++] = "<td id=\"" + rowId + "_data_type_" + dwtId + "\" width=" + this._headerList[i]._width + ">" + AjxImg.getImageHtml("COS") + "</td>";
		} else if (field == ZaCos.A_name) {
		// name
			html[idx++] = "<td id=\"" + rowId + "_data_name_" + dwtId + "\" align='left' width=" + this._headerList[i]._width + "><nobr>";
			html[idx++] = AjxStringUtil.htmlEncode(cos.name);
			html[idx++] = "</nobr></td>";
		} else if (field == ZaCos.A_description) {
			// description
			html[idx++] = "<td id=\"" + rowId + "_data_desc_" + dwtId + "\" align='left' width=" + this._headerList[i]._width + "><nobr>";
			html[idx++] = AjxStringUtil.htmlEncode(ZaItem.getDescriptionValue (cos.attrs[ZaCos.A_description]));
			html[idx++] = "</nobr></td>";	
		}
	}
	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}

ZaCosListView.prototype._getHeaderList =
function() {

	var headerList = new Array();
	var sortable = 1;
	var i = 0 ;
	//idPrefix, label, iconInfo, width, sortable, sortField, resizeable, visible
	headerList[i++] = new ZaListHeaderItem("type", null, null, "22px", null, "objectClass", false, true);
	headerList[i++] = new ZaListHeaderItem(ZaCos.A_name, ZaMsg.CLV_Name_col, null, "200px", sortable++, ZaCos.A_name, true, true);
	headerList[i++] = new ZaListHeaderItem(ZaCos.A_description, ZaMsg.CLV_Description_col, null, "auto", null, null, true, true);
	
	return headerList;
}
}
if (AjxPackage.define("zimbraAdmin.cos.view.ZaCosXFormView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaCosXFormView
* @contructor
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaCosXFormView = function(parent, entry) {
    ZaTabView.call(this, {
        parent:parent,
        iKeyName:"ZaCosXFormView",
        contextId:ZaId.TAB_COS_EDIT
    });
    this.TAB_INDEX = 0;
    this.initForm(ZaCos.myXModel,this.getMyXForm(entry), null);
}

ZaCosXFormView.prototype = new ZaTabView();
ZaCosXFormView.prototype.constructor = ZaCosXFormView;
ZaTabView.XFormModifiers["ZaCosXFormView"] = new Array();
ZaTabView.ObjectModifiers["ZaCosXFormView"] = [] ;
ZaCosXFormView.prototype.TAB_INDEX=0;
ZaCosXFormView.zimletChoices = new XFormChoices([], XFormChoices.SIMPLE_LIST);
ZaCosXFormView.themeChoices = new XFormChoices([], XFormChoices.OBJECT_LIST);

/**
* @method setObject sets the object contained in the view
* @param entry - ZaDomain object to display
**/
ZaCosXFormView.prototype.setObject =
function(entry) {
    //handle the special attributes to be displayed in xform
    entry.manageSpecialAttrs();
    this._containedObject = new ZaCos();
    this._containedObject.attrs = new Object();

    this._containedObject.name = entry.name;
    this._containedObject.type = entry.type ;

    if(entry.rights)
        this._containedObject.rights = entry.rights;

    if(entry.setAttrs)
        this._containedObject.setAttrs = entry.setAttrs;

    if(entry.getAttrs)
        this._containedObject.getAttrs = entry.getAttrs;


    if(entry._defaultValues)
        this._containedObject._defaultValues = entry._defaultValues;

    if(entry.id)
        this._containedObject.id = entry.id;

    for (var a in entry.attrs) {
        var modelItem = this._localXForm.getModel().getItem(a) ;
        if ((modelItem != null && modelItem.type == _LIST_)
           || (entry.attrs[a] != null && entry.attrs[a] instanceof Array))
        {  //need deep clone
            this._containedObject.attrs [a] =
                    ZaItem.deepCloneListItem (entry.attrs[a]);
        } else {
            this._containedObject.attrs[a] = entry.attrs[a];
        }
    }


    if (entry.getAttrs) {
        if(entry.getAttrs[ZaCos.A_zimbraAvailableSkin] || entry.getAttrs.all) {
            var skins = entry.attrs[ZaCos.A_zimbraAvailableSkin];
            if(skins != null && skins != "") {
                if (AjxUtil.isString(skins))     {
                    this._containedObject.attrs[ZaCos.A_zimbraAvailableSkin] = [skins];
                } else {
                    var cnt = skins.length;
                    this._containedObject.attrs[ZaCos.A_zimbraAvailableSkin] = [];
                    for(var i = 0; i < cnt; i ++) {
                        this._containedObject.attrs[ZaCos.A_zimbraAvailableSkin].push(skins[i]);
                    }
                }

            } else {
                this._containedObject.attrs[ZaCos.A_zimbraAvailableSkin] = null;
            }

            var skins = ZaApp.getInstance().getInstalledSkins();
            if(skins == null) {
                skins = [];
            } else if (AjxUtil.isString(skins))     {
                skins = [skins];
            }

            var skinsChoices = ZaApp.getInstance().getSkinChoices(skins);
            ZaCosXFormView.themeChoices.setChoices(skinsChoices);
            ZaCosXFormView.themeChoices.dirtyChoices();
        }

        if(entry.getAttrs[ZaCos.A_zimbraZimletAvailableZimlets] || entry.getAttrs.all) {
            //get all Zimlets
            var allZimlets = ZaZimlet.getAll(ZaZimlet.EXCLUDE_EXTENSIONS);
            if(allZimlets == null) {
                allZimlets = [];
            }

            if(allZimlets instanceof ZaItemList || allZimlets instanceof AjxVector)
                allZimlets = allZimlets.getArray();

            //convert objects to strings
            var cnt = allZimlets.length;
            var _tmpZimlets = [];
            for(var i=0; i<cnt; i++) {
                var zimlet = allZimlets[i];
                _tmpZimlets.push(zimlet.name);
            }
            ZaCosXFormView.zimletChoices.setChoices(_tmpZimlets);
            ZaCosXFormView.zimletChoices.dirtyChoices();
        }
    }

    // update the domainlist
    ZaCosXFormView._domainList = ZaApp.getInstance().getDomainList(true).getArray();

    if(!entry[ZaModel.currentTab])
        this._containedObject[ZaModel.currentTab] = "1";
    else
        this._containedObject[ZaModel.currentTab] = entry[ZaModel.currentTab];

    this.modifyContainedObject () ;
    this._localXForm.setInstance(this._containedObject);

}

ZaCosXFormView.gotSkins = function () {
    return ((ZaApp.getInstance().getInstalledSkins() != null) && (ZaApp.getInstance().getInstalledSkins().length > 0));
}

ZaCosXFormView.gotNoSkins = function () {
    return !ZaCosXFormView.gotSkins.call(this);
}

ZaCosXFormView.isPasswordLockoutEnabled = function () {
    return (this.getInstanceValue(ZaCos.A_zimbraPasswordLockoutEnabled) == 'TRUE');
}

ZaCosXFormView.isMailFeatureEnabled = function () {
    return (this.getInstanceValue(ZaCos.A_zimbraFeatureMailEnabled) == "TRUE");
}

ZaCosXFormView.isContactsFeatureEnabled = function () {
    return this.getInstanceValue(ZaCos.A_zimbraFeatureContactsEnabled) == "TRUE";
}

ZaCosXFormView.isCalendarFeatureEnabled = function () {
    return this.getInstanceValue(ZaCos.A_zimbraFeatureCalendarEnabled)=="TRUE";
}

ZaCosXFormView.isMailForwardingEnabled = function () {
    return (this.getInstanceValue(ZaCos.A_zimbraFeatureMailForwardingEnabled) == "TRUE");
}

//ZaCosXFormView.isMailFeatureEnabled = function () {
//    return (this.getInstanceValue(ZaCos.A_zimbraFeatureMailEnabled) == "TRUE");
//}

ZaCosXFormView.isBriefcaseFeatureEnabled = function () {
    return (this.getInstanceValue(ZaCos.A_zimbraFeatureBriefcasesEnabled) == "TRUE");
}

ZaCosXFormView.isAttributeDefined = function(attribute) {
    return this.getInstanceValue(attribute) != undefined;
}

ZaCosXFormView.FEATURE_TAB_ATTRS = [ZaCos.A_zimbraFeatureMailEnabled,
    ZaCos.A_zimbraFeatureReadReceiptsEnabled,
    ZaCos.A_zimbraFeatureContactsEnabled,
    ZaCos.A_zimbraFeatureDistributionListFolderEnabled,
    ZaCos.A_zimbraFeatureCalendarEnabled,
    ZaCos.A_zimbraFeatureTasksEnabled,
    //ZaCos.A_zimbraFeatureNotebookEnabled,
    ZaCos.A_zimbraFeatureBriefcasesEnabled,
    ZaCos.A_zimbraFeatureOptionsEnabled,
    ZaCos.A_zimbraFeatureTaggingEnabled,
    ZaCos.A_zimbraFeatureSharingEnabled,
    ZaCos.A_zimbraExternalSharingEnabled,
    ZaCos.A_zimbraPublicSharingEnabled,
    ZaCos.A_zimbraFeatureChangePasswordEnabled,
    ZaCos.A_zimbraFeatureSkinChangeEnabled,
    ZaCos.A_zimbraFeatureManageZimlets,
    ZaCos.A_zimbraFeatureHtmlComposeEnabled,
    //ZaCos.A_zimbraFeatureShortcutAliasesEnabled,
    ZaCos.A_zimbraFeatureGalEnabled,
    ZaCos.A_zimbraFeatureMAPIConnectorEnabled,
    ZaCos.A_zimbraFeatureEwsEnabled,
    ZaCos.A_zimbraFeatureTouchClientEnabled,
    ZaCos.A_zimbraFeatureWebClientOfflineAccessEnabled,
    ZaCos.A_zimbraFeatureGalAutoCompleteEnabled,
    ZaCos.A_zimbraFeatureMailPriorityEnabled,
    ZaCos.A_zimbraFeatureFlaggingEnabled,
    ZaCos.A_zimbraImapEnabled,
    ZaCos.A_zimbraPop3Enabled,
    ZaCos.A_zimbraFeatureWebClientEnabled,
    ZaCos.A_zimbraFeatureImapDataSourceEnabled,
    ZaCos.A_zimbraFeaturePop3DataSourceEnabled,
    ZaCos.A_zimbraFeatureConversationsEnabled,
    ZaCos.A_zimbraFeatureFiltersEnabled,
    ZaCos.A_zimbraFeatureOutOfOfficeReplyEnabled,
    ZaCos.A_zimbraFeatureNewMailNotificationEnabled,
    ZaCos.A_zimbraFeatureIdentitiesEnabled,
    ZaCos.A_zimbraFeatureGroupCalendarEnabled,
    ZaCos.A_zimbraFeaturePeopleSearchEnabled,
    ZaCos.A_zimbraFeatureAdvancedSearchEnabled,
    ZaCos.A_zimbraFeatureSavedSearchesEnabled,
    ZaCos.A_zimbraFeatureInitialSearchPreferenceEnabled,
    ZaCos.A_zimbraFeatureImportFolderEnabled,
    ZaCos.A_zimbraFeatureExportFolderEnabled,
    ZaCos.A_zimbraDumpsterEnabled,
    ZaCos.A_zimbraDumpsterPurgeEnabled,
    ZaCos.A_zimbraFeatureMailSendLaterEnabled,
    //ZaCos.A_zimbraFeatureFreeBusyViewEnabled,
    ZaCos.A_zimbraFeatureCalendarReminderDeviceEmailEnabled,
    ZaCos.A_zimbraFeatureSMIMEEnabled
];

ZaCosXFormView.FEATURE_TAB_RIGHTS = [];

ZaCosXFormView.PREFERENCES_TAB_ATTRS = [
    ZaCos.A_zimbraPrefMailSendReadReceipts,
    ZaCos.A_zimbraPrefUseTimeZoneListInCalendar,
    ZaCos.A_zimbraPrefCalendarUseQuickAdd,
    ZaCos.A_zimbraPrefCalendarAlwaysShowMiniCal,
    ZaCos.A_zimbraPrefCalendarApptReminderWarningTime,
    ZaCos.A_zimbraPrefTimeZoneId,
    ZaCos.A_zimbraPrefGalAutoCompleteEnabled,
    ZaCos.A_zimbraPrefAutoAddAddressEnabled,
    ZaCos.A_zimbraMailSignatureMaxLength,
    ZaCos.A_zimbraPrefForwardReplyInOriginalFormat,
    ZaCos.A_zimbraPrefHtmlEditorDefaultFontColor,
    ZaCos.A_zimbraPrefHtmlEditorDefaultFontFamily,
    ZaCos.A_zimbraPrefHtmlEditorDefaultFontSize,
    ZaCos.A_zimbraPrefComposeFormat,
    ZaCos.A_zimbraPrefComposeInNewWindow,
    ZaCos.A_zimbraAllowAnyFromAddress,
    ZaCos.A_zimbraMailMinPollingInterval,
    ZaCos.A_zimbraPrefMailPollingInterval,
    ZaCos.A_zimbraPrefAutoSaveDraftInterval,
    ZaCos.A_zimbraPrefMailDefaultCharset,
    ZaCos.A_zimbraMaxMailItemsPerPage,
    ZaCos.A_zimbraPrefMailItemsPerPage,
    ZaCos.A_zimbraPrefGroupMailBy,
    ZaCos.A_zimbraPrefDisplayExternalImages,
    ZaCos.A_zimbraPrefMessageViewHtmlPreferred,
    ZaCos.A_zimbraPrefLocale,
    ZaCos.A_zimbraJunkMessagesIndexingEnabled,
    ZaCos.A_zimbraPrefShowSelectionCheckbox,
    ZaCos.A_zimbraPrefWarnOnExit,
    ZaCos.A_zimbraPrefAdminConsoleWarnOnExit,
    ZaCos.A_zimbraPrefUseKeyboardShortcuts,
    ZaCos.A_zimbraPrefImapSearchFoldersEnabled,
    ZaCos.A_zimbraPrefShowSearchString,
    ZaCos.A_zimbraPrefMailInitialSearch,
    ZaCos.A_zimbraPrefClientType,
    ZaCos.A_zimbraPrefCalendarInitialView,
    ZaCos.A_zimbraPrefCalendarFirstDayOfWeek,
    ZaCos.A_zimbraPrefCalendarReminderFlashTitle,
    ZaCos.A_zimbraPrefCalendarAllowCancelEmailToSelf,
    ZaCos.A_zimbraPrefCalendarAllowPublishMethodInvite,
    ZaCos.A_zimbraPrefCalendarToasterEnabled,
    ZaCos.A_zimbraPrefCalendarShowPastDueReminders,
    ZaCos.A_zimbraPrefAppleIcalDelegationEnabled,
    ZaCos.A_zimbraPrefMandatorySpellCheckEnabled,
    ZaCos.A_zimbraPrefImapEnabled,
    ZaCos.A_zimbraPrefPop3Enabled

];
ZaCosXFormView.PREFERENCES_TAB_RIGHTS = [];

ZaCosXFormView.SKIN_TAB_ATTRS = [ZaCos.A_zimbraPrefSkin,ZaCos.A_zimbraAvailableSkin];
ZaCosXFormView.SKIN_TAB_RIGHTS = [];

ZaCosXFormView.ZIMLET_TAB_ATTRS = [ZaCos.A_zimbraZimletAvailableZimlets];
ZaCosXFormView.ZIMLET_TAB_RIGHTS = [ZaCos.RIGHT_GET_ZIMLET, ZaCos.RIGHT_LIST_ZIMLET];

ZaCosXFormView.SERVERPOOL_TAB_ATTRS = [ZaCos.A_zimbraMailHostPool];
ZaCosXFormView.SERVERPOOL_TAB_RIGHTS = [ZaCos.RIGHT_GET_HOSTNAME];

ZaCosXFormView.ADVANCED_TAB_ATTRS = [ZaCos.A_zimbraAttachmentsBlocked,
	ZaCos.A_zimbraMailQuota,
	ZaCos.A_zimbraContactMaxNumEntries,
	ZaCos.A_zimbraQuotaWarnPercent,
	ZaCos.A_zimbraQuotaWarnInterval,
	ZaCos.A_zimbraQuotaWarnMessage,
	ZaCos.A_zimbraPasswordLocked,
	ZaCos.A_zimbraPasswordBlockCommonEnabled,
	ZaCos.A_zimbraMinPwdLength,
	ZaCos.A_zimbraMaxPwdLength,
	ZaCos.A_zimbraPasswordMinUpperCaseChars,
	ZaCos.A_zimbraPasswordMinLowerCaseChars,
	ZaCos.A_zimbraPasswordMinPunctuationChars,
	ZaCos.A_zimbraPasswordMinNumericChars,
	ZaCos.A_zimbraPasswordMinPunctuationChars,
	ZaCos.A_zimbraMinPwdAge,
	ZaCos.A_zimbraMaxPwdAge,
	ZaCos.A_zimbraEnforcePwdHistory,
	ZaCos.A_zimbraTwoFactorAuthEnabled,
	ZaCos.A_zimbraFeatureTwoFactorAuthRequired,
	ZaCos.A_zimbraTwoFactorAuthNumScratchCodes,
	ZaCos.A_zimbraFeatureAppSpecificPasswordsEnabled,
    ZaCos.A_zimbraPasswordLockoutEnabled,
    ZaCos.A_zimbraPasswordLockoutMaxFailures,
    ZaCos.A_zimbraPasswordLockoutDuration,
    ZaCos.A_zimbraPasswordLockoutFailureLifetime,
    ZaCos.A_zimbraAdminAuthTokenLifetime,
    ZaCos.A_zimbraAuthTokenLifetime,
    ZaCos.A_zimbraMailIdleSessionTimeout,
    ZaCos.A_zimbraMailMessageLifetime,
    ZaCos.A_zimbraMailTrashLifetime,
    ZaCos.A_zimbraMailSpamLifetime,
    ZaCos.A_zimbraMailDumpsterLifetime,
    ZaCos.A_zimbraDumpsterUserVisibleAge,
    ZaCos.A_zimbraFreebusyExchangeUserOrg,
        ZaCos.A_zimbraDataSourcePop3PollingInterval,
        ZaCos.A_zimbraDataSourceImapPollingInterval,
        ZaCos.A_zimbraDataSourceCalendarPollingInterval,
        ZaCos.A_zimbraDataSourceRssPollingInterval,
        ZaCos.A_zimbraDataSourceCaldavPollingInterval,
    ZaCos.A_zimbraDataSourceMinPollingInterval

];
ZaCosXFormView.ADVANCED_TAB_RIGHTS = [];

ZaCosXFormView.RETENTION_POLICY_TAB_ATTRS = [];
ZaCosXFormView.RETENTION_POLICY_TAB_RIGHTS = [];

ZaCosXFormView.prototype.loadRetentionPolicies = function () {
    var resultCos = ZaRetentionPolicy.getRetentionPolicies("id", this.getForm().getInstance().id);
    var resultGlobal = ZaRetentionPolicy.getRetentionPolicies();

    if (resultCos[ZaRetentionPolicy.TYPE_KEEP].length) {
        //It is global
        if (ZaCosXFormView._arrayContains(resultGlobal[ZaRetentionPolicy.TYPE_KEEP], resultCos[ZaRetentionPolicy.TYPE_KEEP][0])) {
            this.getForm().setInstanceValue(resultGlobal[ZaRetentionPolicy.TYPE_KEEP],ZaCos.A2_retentionPoliciesKeep);
            this.getForm().setInstanceValue(resultGlobal[ZaRetentionPolicy.TYPE_PURGE],ZaCos.A2_retentionPoliciesPurge);
            this.getForm().setInstanceValue("FALSE",ZaCos.A2_retentionPoliciesKeepInherited);
            return;
        }
    }

    if (resultCos[ZaRetentionPolicy.TYPE_PURGE].length) {
        //It is global
        if (ZaCosXFormView._arrayContains(resultGlobal[ZaRetentionPolicy.TYPE_PURGE], resultCos[ZaRetentionPolicy.TYPE_PURGE][0])) {
            this.getForm().setInstanceValue(resultGlobal[ZaRetentionPolicy.TYPE_KEEP],ZaCos.A2_retentionPoliciesKeep);
            this.getForm().setInstanceValue(resultGlobal[ZaRetentionPolicy.TYPE_PURGE],ZaCos.A2_retentionPoliciesPurge);
            this.getForm().setInstanceValue("FALSE",ZaCos.A2_retentionPoliciesKeepInherited);
            return;
        }
    }



    if (resultCos[ZaRetentionPolicy.TYPE_PURGE].length == 0 &&
        resultCos[ZaRetentionPolicy.TYPE_KEEP].length == 0) {
        this.getForm().setInstanceValue(resultGlobal[ZaRetentionPolicy.TYPE_KEEP],ZaCos.A2_retentionPoliciesKeep);
        this.getForm().setInstanceValue(resultGlobal[ZaRetentionPolicy.TYPE_PURGE],ZaCos.A2_retentionPoliciesPurge);
        this.getForm().setInstanceValue("FALSE",ZaCos.A2_retentionPoliciesKeepInherited);
    } else {
        this.getForm().setInstanceValue(resultCos[ZaRetentionPolicy.TYPE_KEEP],ZaCos.A2_retentionPoliciesKeep);
        this.getForm().setInstanceValue(resultCos[ZaRetentionPolicy.TYPE_PURGE],ZaCos.A2_retentionPoliciesPurge);
        this.getForm().setInstanceValue("TRUE",ZaCos.A2_retentionPoliciesKeepInherited);
    }
}

ZaCosXFormView._arrayContains = function(arr, obj) {
    if (!arr || !(arr instanceof Array) || !obj) {
        return false;
    }

    for (var i = 0; i < arr.length; i++) {
        if (arr[i].id && obj.id && arr[i].id == obj.id) {
            return true;
        }
    }
    return false;
}

ZaCosXFormView.retentionSelectionListener = function(ev) {
    this.getForm().setInstanceValue(this.getSelection(),ZaCos.A2_retentionPoliciesKeep_Selection);
}

ZaCosXFormView.purgeSelectionListener = function() {
    this.getForm().setInstanceValue(this.getSelection(),ZaCos.A2_retentionPoliciesPurge_Selection);
}

ZaCosXFormView.deleteButtonListener = function(action) {
    var selected = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesKeep_Selection);

    if (action == 1) {
        selected = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesPurge_Selection);
    } else if (action == 2) {
        selected = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesPurge).length +
            this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesKeep).length
    }

    //The original list is empty, but should show global polices
    if (selected === 0) {
        ZaCosXFormView.deleteRetentionPolicies.call(this, action);
        return;
    }
    if (!selected) {
        return;
    }

    if(!ZaApp.getInstance().dialogs["DeleteRetionPolicyConfirmMessageDialog"])
        ZaApp.getInstance().dialogs["DeleteRetionPolicyConfirmMessageDialog"] = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON], null, ZaId.CTR_PREFIX + "DELETE_RETENTION_POLICY_ConfirmMessage");

    ZaApp.getInstance().dialogs["DeleteRetionPolicyConfirmMessageDialog"].setMessage(ZaMsg.Q_Delete_RetentionPolicy_Confirm,
        DwtMessageDialog.WARNING_STYLE);
    ZaApp.getInstance().dialogs["DeleteRetionPolicyConfirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, ZaCosXFormView.deleteRetentionPolicies, this, [action]);
    ZaApp.getInstance().dialogs["DeleteRetionPolicyConfirmMessageDialog"].popup();
}

ZaCosXFormView.deleteRetentionPolicies = function(action) {
    if(ZaApp.getInstance().dialogs["DeleteRetionPolicyConfirmMessageDialog"])
        ZaApp.getInstance().dialogs["DeleteRetionPolicyConfirmMessageDialog"].popdown();

    var selected;
    var all;
    if (action == 1) { //Remove purge
        selected = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesPurge_Selection);
        all = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesPurge);
        if (!selected) {
            return;
        }
        for (var i = 0; i <selected.length; i++ ) {
            selected[i].deletePolicy("id", this.getForm().getInstance().id);
            AjxUtil.arrayRemove(all, selected[i]);
        }
        this.getForm().setInstanceValue([],ZaCos.A2_retentionPoliciesPurge);
        this.getForm().setInstanceValue(all,ZaCos.A2_retentionPoliciesPurge);
        this.getForm().setInstanceValue([],ZaCos.A2_retentionPoliciesPurge_Selection);
    } else if (action == 2) { //Remove all
        all = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesPurge);
        all = all.concat(this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesKeep));
        for (var i = 0; i < all.length; i++) {
            all[i].deletePolicy("id", this.getForm().getInstance().id);
        }
        this.getForm().setInstanceValue([],ZaCos.A2_retentionPoliciesPurge);
        this.getForm().setInstanceValue([],ZaCos.A2_retentionPoliciesKeep);

        var resultGlobal = ZaRetentionPolicy.getRetentionPolicies();
        this.getForm().setInstanceValue(resultGlobal[ZaRetentionPolicy.TYPE_KEEP],ZaCos.A2_retentionPoliciesKeep);
        this.getForm().setInstanceValue(resultGlobal[ZaRetentionPolicy.TYPE_PURGE],ZaCos.A2_retentionPoliciesPurge);
        this.getForm().setInstanceValue("FALSE",ZaCos.A2_retentionPoliciesKeepInherited);
    }else { //Remove keep
        selected = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesKeep_Selection);
        all = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesKeep);
        if (!selected) {
            return;
        }
        for (var i = 0; i <selected.length; i++ ) {
            selected[i].deletePolicy("id", this.getForm().getInstance().id);
            AjxUtil.arrayRemove(all, selected[i]);
        }
        this.getForm().setInstanceValue([],ZaCos.A2_retentionPoliciesKeep);
        this.getForm().setInstanceValue(all,ZaCos.A2_retentionPoliciesKeep);
        this.getForm().setInstanceValue([],ZaCos.A2_retentionPoliciesKeep_Selection);
    }
}

ZaCosXFormView.addButtonListener = function (isPurge) {
    var policy;
    if (isPurge) {
        policy = new ZaRetentionPolicy(null, null, null, ZaRetentionPolicy.TYPE_PURGE);
    } else {
        policy = new ZaRetentionPolicy();
    }

    //Removing if condition for ZBUG-1138 as zimbraMailPurgeSystemPolicy is added into different CoS if it does not load new instance everytime
    //if(!ZaApp.getInstance().dialogs["newRetentionPolicyDialog"]) {
        ZaApp.getInstance().dialogs["newRetentionPolicyDialog"] =
            new ZaRetentionPolicyDlg(ZaApp.getInstance().getAppCtxt().getShell(), "500px","100px", ZaMsg.TTL_Policy_Add);
        ZaApp.getInstance().dialogs["newRetentionPolicyDialog"].registerCallback(DwtDialog.OK_BUTTON,
            ZaCosXFormView.createRetentionPolicy,
            this, ZaApp.getInstance().dialogs["newRetentionPolicyDialog"]._localXForm);
    //}

    ZaApp.getInstance().dialogs["newRetentionPolicyDialog"].setObject(policy);
    ZaApp.getInstance().dialogs["newRetentionPolicyDialog"].popup();
}

ZaCosXFormView.createRetentionPolicy = function (form) {
    if(ZaApp.getInstance().dialogs["newRetentionPolicyDialog"]) {
        var obj = form.getInstance();
        var all;
        if (obj[ZaRetentionPolicy.A2_type] == ZaRetentionPolicy.TYPE_KEEP) {
            all = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesKeep);
        } else {
            all = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesPurge);
        }
        if (!all) {
            all = [];
        }

        if (!ZaRetentionPolicy.checkValues(obj, all)) {
            return false;
        }

        ZaApp.getInstance().dialogs["newRetentionPolicyDialog"].popdown();

        obj.createPolicy("id", this.getForm().getInstance().id);

        all.push(obj);

        if (obj[ZaRetentionPolicy.A2_type] == ZaRetentionPolicy.TYPE_KEEP) {
            this.getForm().setInstanceValue([], ZaCos.A2_retentionPoliciesKeep);
            this.getForm().setInstanceValue(all, ZaCos.A2_retentionPoliciesKeep);
            this.getForm().setInstanceValue([],ZaCos.A2_retentionPoliciesKeep_Selection);
        } else {
            this.getForm().setInstanceValue([], ZaCos.A2_retentionPoliciesPurge);
            this.getForm().setInstanceValue(all, ZaCos.A2_retentionPoliciesPurge);
            this.getForm().setInstanceValue([],ZaCos.A2_retentionPoliciesPurge_Selection);
        }
    }
}

ZaCosXFormView.editButtonListener = function (isPurge) {
    var policy;
    if (isPurge) {
        policy = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesPurge_Selection)[0];
    } else {
        policy = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesKeep_Selection)[0];
    }

    if(!ZaApp.getInstance().dialogs["editRetentionPolicyDialog"]) {
        ZaApp.getInstance().dialogs["editRetentionPolicyDialog"] =
            new ZaRetentionPolicyDlg(ZaApp.getInstance().getAppCtxt().getShell(), "500px","100px", ZaMsg.TTL_Policy_Edit);
        ZaApp.getInstance().dialogs["editRetentionPolicyDialog"].registerCallback(DwtDialog.OK_BUTTON,
            ZaCosXFormView.updateRetentionPolicy,
            this, ZaApp.getInstance().dialogs["editRetentionPolicyDialog"]._localXForm);
    }

    ZaApp.getInstance().dialogs["editRetentionPolicyDialog"].setObject(policy);
    ZaApp.getInstance().dialogs["editRetentionPolicyDialog"].popup();
}

ZaCosXFormView.updateRetentionPolicy = function (form) {
    if(ZaApp.getInstance().dialogs["editRetentionPolicyDialog"]) {
        var obj = form.getInstance();
        var all;
        if (obj[ZaRetentionPolicy.A2_type] == ZaRetentionPolicy.TYPE_KEEP) {
            all = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesKeep);
        } else {
            all = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesPurge);
        }
        if (!all) {
            all = [];
        }
        if (!ZaRetentionPolicy.checkValues(obj, all)) {
            return false;
        }

        ZaApp.getInstance().dialogs["editRetentionPolicyDialog"].popdown();

        obj.modifyPolicy("id", this.getForm().getInstance().id);

        var index = AjxUtil.indexOf(all, obj);
        AjxUtil.arrayRemove(all, obj);
        AjxUtil.arrayAdd(all, obj, index);

        if (obj[ZaRetentionPolicy.A2_type] == ZaRetentionPolicy.TYPE_KEEP) {
            this.getForm().setInstanceValue([], ZaCos.A2_retentionPoliciesKeep);
            this.getForm().setInstanceValue(all, ZaCos.A2_retentionPoliciesKeep);
            this.getForm().setInstanceValue([],ZaCos.A2_retentionPoliciesKeep_Selection);
        } else {
            this.getForm().setInstanceValue([], ZaCos.A2_retentionPoliciesPurge);
            this.getForm().setInstanceValue(all, ZaCos.A2_retentionPoliciesPurge);
            this.getForm().setInstanceValue([],ZaCos.A2_retentionPoliciesPurge_Selection);
        }
    }
}

ZaCosXFormView.inheritCOSRetentionPolicies = function(value, event, form) {
    if (value == "TRUE") {
        this.setInstanceValue(value);
        this.getForm().setInstanceValue([], ZaCos.A2_retentionPoliciesKeep);
        this.getForm().setInstanceValue([],ZaCos.A2_retentionPoliciesKeep_Selection);
        this.getForm().setInstanceValue([], ZaCos.A2_retentionPoliciesPurge);
        this.getForm().setInstanceValue([],ZaCos.A2_retentionPoliciesPurge_Selection);
    } else if (value == "FALSE") {
        ZaCosXFormView.deleteButtonListener.call(this, 2);
    }
}


ZaCosXFormView.myXFormModifier = function(xFormObject, entry) {
    var headerListKeep = new Array();
    var sortable = 1;
    var i = 0 ;
    //idPrefix, label, iconInfo, width, sortable, sortField, resizeable, visible
    headerListKeep[i++] = new ZaListHeaderItem(ZaRetentionPolicy.A2_name, ZaMsg.CLV_Policy_Name_col, null, "200px", sortable, ZaRetentionPolicy.A2_name, true, true);
    headerListKeep[i++] = new ZaListHeaderItem(ZaRetentionPolicy.A2_lifetime, ZaMsg.CLV_Policy_Retention_col, null, "auto", null, null, true, true);

    var headerListPurge = new Array();
    i = 0 ;
    //idPrefix, label, iconInfo, width, sortable, sortField, resizeable, visible
    headerListPurge[i++] = new ZaListHeaderItem(ZaRetentionPolicy.A2_name, ZaMsg.CLV_Policy_Name_col, null, "200px", sortable++, ZaRetentionPolicy.A2_name, true, true);
    headerListPurge[i++] = new ZaListHeaderItem(ZaRetentionPolicy.A2_lifetime, ZaMsg.CLV_Policy_Purge_col, null, "auto", null, null, true, true);
    this.helpMap = {};
    this.tabChoices = new Array();
    var _tab1 = ++this.TAB_INDEX;
    var _tab2, _tab3, _tab4, _tab5, _tab6, _tab7, _tab8;

    var headerItems = [    {type:_AJX_IMAGE_, src:"COS_32", label:null,rowSpan:2},
                            {type:_OUTPUT_, ref:ZaCos.A_name, label:null,cssClass:"AdminTitle",
                                getDisplayValue: AjxUtil.htmlEncode,
                                visibilityChecks:[ZaItem.hasReadPermission], height: 32, rowSpan:2},
                            {type:_OUTPUT_, ref:ZaItem.A_zimbraId, label:ZaMsg.NAD_ZimbraID,visibilityChecks:[ZaItem.hasReadPermission]},
                            {type:_OUTPUT_, ref:ZaItem.A_zimbraCreateTimestamp,
                                label:ZaMsg.LBL_zimbraCreateTimestamp, labelLocation:_LEFT_,
                                getDisplayValue:function() {
                                    var val = ZaItem.formatServerTime(this.getInstanceValue());
                                    if(!val)
                                        return ZaMsg.Server_Time_NA;
                                    else
                                        return val;
                                },
                                visibilityChecks:[ZaItem.hasReadPermission]
                             }];

    this.tabChoices.push({value:_tab1, label:ZaMsg.TABT_GeneralPage});
    this.helpMap[_tab1] = ZaUtil.HELP_URL;
    if(ZaTabView.isTAB_ENABLED(entry,ZaCosXFormView.FEATURE_TAB_ATTRS, ZaCosXFormView.FEATURE_TAB_RIGHTS)) {
        _tab2 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab2, label:ZaMsg.TABT_Features});
        this.helpMap[_tab2] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaCosXFormView.PREFERENCES_TAB_ATTRS, ZaCosXFormView.PREFERENCES_TAB_RIGHTS)) {
        _tab3 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab3, label:ZaMsg.TABT_Preferences});
        this.helpMap[_tab3] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaCosXFormView.SKIN_TAB_ATTRS, ZaCosXFormView.SKIN_TAB_RIGHTS)) {
           _tab4 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab4, label:ZaMsg.TABT_Themes});
        this.helpMap[_tab4] = ZaUtil.HELP_URL;
    }

    var allZimlets = ZaZimlet.getAll(ZaZimlet.EXCLUDE_EXTENSIONS);
    if(allZimlets != null && !AjxUtil.isEmpty(allZimlets.getArray()) && ZaTabView.isTAB_ENABLED(entry,ZaCosXFormView.ZIMLET_TAB_ATTRS, ZaCosXFormView.ZIMLET_TAB_RIGHTS)) {
        _tab5 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab5, label:ZaMsg.TABT_Zimlets});
        this.helpMap[_tab5] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaCosXFormView.SERVERPOOL_TAB_ATTRS, ZaCosXFormView.SERVERPOOL_TAB_RIGHTS)) {
        _tab6 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab6, label:ZaMsg.TABT_ServerPool});
        this.helpMap[_tab6] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaCosXFormView.ADVANCED_TAB_ATTRS, ZaCosXFormView.ADVANCED_TAB_RIGHTS)) {
        _tab7 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab7, label:ZaMsg.TABT_Advanced});
        this.helpMap[_tab7] = ZaUtil.HELP_URL;
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaCosXFormView.RETENTION_POLICY_TAB_ATTRS, ZaCosXFormView.RETENTION_POLICY_TAB_RIGHTS)) {
        _tab8 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab8, label:ZaMsg.TABT_RetentionPolicy});
        this.helpMap[_tab8] = ZaUtil.HELP_URL;
    }

    var cases = [];
    var case1 = {type:_ZATABCASE_,caseKey:_tab1,numCols:1,
        paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2
    };

    var case1Items = [
        {type:_ZA_TOP_GROUPER_, label:ZaMsg.TABT_GeneralPage, numCols:2,colSizes: ["275px","auto"],
            items:[
                {ref:ZaCos.A_name, type:_INPUT_,
                    enableDisableChecks:[[ZaItem.hasRight,ZaCos.RENAME_COS_RIGHT]],
                    msgName:ZaMsg.NAD_DisplayName,label:ZaMsg.NAD_DisplayName, labelLocation:_LEFT_, cssClass:"admin_xform_name_input", required:true, width: "30em"},
                ZaItem.descriptionXFormItem ,
                {ref:ZaCos.A_zimbraNotes, type:_TEXTAREA_, msgName:ZaMsg.NAD_Notes,label:ZaMsg.NAD_Notes, labelLocation:_LEFT_, labelCssStyle:"vertical-align:top;",width: "30em"}
            ]
        }
    ];

    case1.items = case1Items;
    cases.push(case1);

    if(_tab2) {
        var case2 = {type:_ZATABCASE_,caseKey:_tab2,numCols:1,colSizes:["auto"],
            paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
            id:"cos_form_features_tab"};

        var case2Items = [
            {type:_ZA_TOP_GROUPER_,  label:ZaMsg.NAD_zimbraMajorFeature, id:"cos_form_features_major",
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraFeatureMailEnabled,
                        ZaCos.A_zimbraFeatureContactsEnabled,
                        ZaCos.A_zimbraFeatureCalendarEnabled,
                        ZaCos.A_zimbraFeatureTasksEnabled,
                        ZaCos.A_zimbraFeatureBriefcasesEnabled,
                        ZaCos.A_zimbraFeatureOptionsEnabled
                    ]]
                ],
                items:[
                    {ref:ZaCos.A_zimbraFeatureMailEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureMailEnabled,label:ZaMsg.LBL_zimbraFeatureMailEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureContactsEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureContactsEnabled,label:ZaMsg.LBL_zimbraFeatureContactsEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureCalendarEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureCalendarEnabled,label:ZaMsg.LBL_zimbraFeatureCalendarEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureTasksEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureTaskEnabled,label:ZaMsg.LBL_zimbraFeatureTaskEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                    //{ref:ZaCos.A_zimbraFeatureNotebookEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureNotebookEnabled,label:ZaMsg.LBL_zimbraFeatureNotebookEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureBriefcasesEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureBriefcasesEnabled,label:ZaMsg.LBL_zimbraFeatureBriefcasesEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureOptionsEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureOptionsEnabled,label:ZaMsg.LBL_zimbraFeatureOptionsEnabled,  trueValue:"TRUE", falseValue:"FALSE"}
                    //zimbraMobile from the extension
                ]
            },
            {type:_ZA_TOP_GROUPER_,  label:ZaMsg.NAD_zimbraGeneralFeature, id:"cos_form_features_general",
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraFeatureTaggingEnabled,
                        ZaCos.A_zimbraFeatureSharingEnabled,
                        ZaCos.A_zimbraFeatureChangePasswordEnabled,
                        ZaCos.A_zimbraFeatureSkinChangeEnabled,
                        ZaCos.A_zimbraFeatureManageZimlets,
                        ZaCos.A_zimbraFeatureHtmlComposeEnabled,
                        ZaCos.A_zimbraFeatureGalEnabled,
                        ZaCos.A_zimbraFeatureMAPIConnectorEnabled,
                        ZaCos.A_zimbraFeatureEwsEnabled,
                        ZaCos.A_zimbraFeatureTouchClientEnabled,
                        ZaCos.A_zimbraFeatureWebClientOfflineAccessEnabled,
                        ZaCos.A_zimbraFeatureGalAutoCompleteEnabled,
                        ZaCos.A_zimbraFeatureImportFolderEnabled,
                        ZaCos.A_zimbraFeatureExportFolderEnabled,
                        ZaCos.A_zimbraDumpsterEnabled,
                        ZaCos.A_zimbraDumpsterPurgeEnabled
                    ]]
                ],
                items:[
                    {ref:ZaCos.A_zimbraFeatureTaggingEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureTaggingEnabled,label:ZaMsg.LBL_zimbraFeatureTaggingEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureSharingEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureSharingEnabled,label:ZaMsg.LBL_zimbraFeatureSharingEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraExternalSharingEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraExternalSharingEnabled,label:ZaMsg.LBL_zimbraExternalSharingEnabled,trueValue:"TRUE", falseValue:"FALSE",
                        visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaCos.A_zimbraFeatureSharingEnabled, "TRUE"]], visibilityChangeEventSources:[ZaCos.A_zimbraFeatureSharingEnabled]
                    },
                    {ref:ZaCos.A_zimbraPublicSharingEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraPublicSharingEnabled,label:ZaMsg.LBL_zimbraPublicSharingEnabled,trueValue:"TRUE", falseValue:"FALSE",
                        visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaCos.A_zimbraFeatureSharingEnabled, "TRUE"]], visibilityChangeEventSources:[ZaCos.A_zimbraFeatureSharingEnabled]
                    },
                    {ref:ZaCos.A_zimbraFeatureChangePasswordEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureChangePasswordEnabled,label:ZaMsg.LBL_zimbraFeatureChangePasswordEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureSkinChangeEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureSkinChangeEnabled,label:ZaMsg.LBL_zimbraFeatureSkinChangeEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureManageZimlets, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureManageZimlets,label:ZaMsg.LBL_zimbraFeatureManageZimlets,  trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureHtmlComposeEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureHtmlComposeEnabled,label:ZaMsg.LBL_zimbraFeatureHtmlComposeEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    //{ref:ZaCos.A_zimbraFeatureShortcutAliasesEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureShortcutAliasesEnabled,label:ZaMsg.LBL_zimbraFeatureShortcutAliasesEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureGalEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureGalEnabled,label:ZaMsg.LBL_zimbraFeatureGalEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureMAPIConnectorEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureMAPIConnectorEnabled,label:ZaMsg.LBL_zimbraFeatureMAPIConnectorEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureEwsEnabled, type:_CHECKBOX_, msgName:ZaMsg.MSG_zimbraFeatureEwsEnabled,label:ZaMsg.LBL_zimbraFeatureEwsEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureTouchClientEnabled, type:_CHECKBOX_, msgName:ZaMsg.MSG_zimbraFeatureTouchClientEnabled,label:ZaMsg.LBL_zimbraFeatureTouchClientEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureWebClientOfflineAccessEnabled, type:_CHECKBOX_, msgName:ZaMsg.MSG_zimbraFeatureWebClientOfflineAccessEnabled,label:ZaMsg.LBL_zimbraFeatureWebClientOfflineAccessEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureGalAutoCompleteEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureGalAutoCompleteEnabled,label:ZaMsg.LBL_zimbraFeatureGalAutoCompleteEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureImportFolderEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureImportFolderEnabled,label:ZaMsg.LBL_zimbraFeatureImportFolderEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureExportFolderEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureExportFolderEnabled,label:ZaMsg.LBL_zimbraFeatureExportFolderEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraDumpsterEnabled, type:_CHECKBOX_, msgName:ZaMsg.MSG_zimbraDumpsterEnabled,label:ZaMsg.LBL_zimbraDumpsterEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraDumpsterPurgeEnabled, type:_CHECKBOX_, msgName:ZaMsg.MSG_zimbraDumpsterPurgeEnabled,label:ZaMsg.LBL_zimbraDumpsterPurgeEnabled, trueValue:"TRUE", falseValue:"FALSE",
                        visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaCos.A_zimbraDumpsterEnabled, "TRUE"]], visibilityChangeEventSources:[ZaCos.A_zimbraDumpsterEnabled]
                    }

                ]
            },
            {type:_ZA_TOP_GROUPER_,  label:ZaMsg.NAD_zimbraMailFeature, id:"cos_form_features_mail",
                enableDisableChecks:[ZaCosXFormView.isMailFeatureEnabled],
                enableDisableChangeEventSources:[ZaCos.A_zimbraFeatureMailEnabled],
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraFeatureMailPriorityEnabled,
                        ZaCos.A_zimbraFeatureFlaggingEnabled,
                        ZaCos.A_zimbraImapEnabled,
                        ZaCos.A_zimbraPop3Enabled,
                        ZaCos.A_zimbraFeatureWebClientEnabled,
                        ZaCos.A_zimbraFeatureImapDataSourceEnabled,
                        ZaCos.A_zimbraFeaturePop3DataSourceEnabled,
                        ZaCos.A_zimbraFeatureMailForwardingEnabled,
                        ZaCos.A_zimbraFeatureMailSendLaterEnabled,
                        ZaCos.A_zimbraFeatureConversationsEnabled,
                        ZaCos.A_zimbraFeatureFiltersEnabled,
                        ZaCos.A_zimbraFeatureOutOfOfficeReplyEnabled,
                        ZaCos.A_zimbraFeatureNewMailNotificationEnabled,
                        ZaCos.A_zimbraFeatureIdentitiesEnabled,
                        ZaCos.A_zimbraFeatureReadReceiptsEnabled
                    ]]
                ],
                items:[
                        {ref:ZaCos.A_zimbraFeatureMailPriorityEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureMailPriorityEnabled,label:ZaMsg.LBL_zimbraFeatureMailPriorityEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureFlaggingEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureFlaggingEnabled,label:ZaMsg.LBL_zimbraFeatureFlaggingEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraImapEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraImapEnabled,label:ZaMsg.LBL_zimbraImapEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraPop3Enabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraPop3Enabled,label:ZaMsg.LBL_zimbraPop3Enabled,trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureWebClientEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureWebClientEnabled,label:ZaMsg.LBL_zimbraFeatureWebClientEnabled,trueValue:"TRUE", falseValue:"FALSE",
                            visibilityChecks : [ function() {
                                return ZaCosXFormView.isAttributeDefined.call(this, ZaCos.A_zimbraFeatureWebClientEnabled);
                            }]
                        },
                        {ref:ZaCos.A_zimbraFeatureImapDataSourceEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraExternalImapEnabled,label:ZaMsg.LBL_zimbraExternalImapEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeaturePop3DataSourceEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraExternalPop3Enabled,label:ZaMsg.LBL_zimbraExternalPop3Enabled, trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureMailForwardingEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureMailForwardingEnabled,label:ZaMsg.LBL_zimbraFeatureMailForwardingEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureMailSendLaterEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureMailSendLaterEnabled, label:ZaMsg.LBL_zimbraFeatureMailSendLaterEnabled, trueValue:"TRUE", falseValue:"FALSE"},
            {ref:ZaCos.A_zimbraFeatureConversationsEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureConversationsEnabled,label:ZaMsg.LBL_zimbraFeatureConversationsEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureFiltersEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureFiltersEnabled,label:ZaMsg.LBL_zimbraFeatureFiltersEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureOutOfOfficeReplyEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureOutOfOfficeReplyEnabled,label:ZaMsg.LBL_zimbraFeatureOutOfOfficeReplyEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureNewMailNotificationEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureNewMailNotificationEnabled,label:ZaMsg.LBL_zimbraFeatureNewMailNotificationEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureIdentitiesEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureIdentitiesEnabled,label:ZaMsg.LBL_zimbraFeatureIdentitiesEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureReadReceiptsEnabled, type:_CHECKBOX_,label:ZaMsg.LBL_zimbraFeatureReadReceiptsEnabled,trueValue:"TRUE", falseValue:"FALSE"}

                ]
            },
            {
                type: _ZA_TOP_GROUPER_,
                label: ZaMsg.NAD_zimbraContactFeature,
                id: "cos_form_features_contact",
                enableDisableChecks: [ZaCosXFormView.isContactsFeatureEnabled],
                enableDisableChangeEventSources: [ZaCos.A_zimbraFeatureContactsEnabled],
                visibilityChecks: [
                    [
                        ZATopGrouper_XFormItem.isGroupVisible,
                        [
                            ZaCos.A_zimbraFeatureDistributionListFolderEnabled
                        ]
                    ]
                ],
                items: [
                    {
                        ref: ZaCos.A_zimbraFeatureDistributionListFolderEnabled,
                        type: _CHECKBOX_,
                        msgName: ZaMsg.MSG_zimbraFeatureDistributionListFolderEnabled,
                        label: ZaMsg.LBL_zimbraFeatureDistributionListFolderEnabled,
                        trueValue: "TRUE",
                        falseValue: "FALSE"
                    }
                ]
            },
            {type:_ZA_TOP_GROUPER_,  label:ZaMsg.NAD_zimbraCalendarFeature, id:"cos_form_features_calendar",
                enableDisableChecks:[ZaCosXFormView.isCalendarFeatureEnabled],
                enableDisableChangeEventSources:[ZaCos.A_zimbraFeatureCalendarEnabled],
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraFeatureGroupCalendarEnabled,
                        //ZaCos.A_zimbraFeatureFreeBusyViewEnabled,
                        ZaCos.A_zimbraFeatureCalendarReminderDeviceEmailEnabled
                    ]]
                ],
                items:[
                    {ref:ZaCos.A_zimbraFeatureGroupCalendarEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureGroupCalendarEnabled,label:ZaMsg.LBL_zimbraFeatureGroupCalendarEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    //{ref:ZaCos.A_zimbraFeatureFreeBusyViewEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureFreeBusyViewEnabled, label:ZaMsg.LBL_zimbraFeatureFreeBusyViewEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureCalendarReminderDeviceEmailEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureCalendarReminderDeviceEmailEnabled, label:ZaMsg.LBL_zimbraFeatureCalendarReminderDeviceEmailEnabled, trueValue:"TRUE", falseValue:"FALSE"}
                ]
            },
            {type:_ZA_TOP_GROUPER_,  label:ZaMsg.NAD_zimbraSearchFeature, id:"cos_form_features_search",
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraFeatureAdvancedSearchEnabled,
                        ZaCos.A_zimbraFeatureSavedSearchesEnabled,
                        ZaCos.A_zimbraFeatureInitialSearchPreferenceEnabled,
                        ZaCos.A_zimbraFeaturePeopleSearchEnabled
                    ]]
                ],
                items:[
                    {ref:ZaCos.A_zimbraFeatureAdvancedSearchEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureAdvancedSearchEnabled,label:ZaMsg.LBL_zimbraFeatureAdvancedSearchEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureSavedSearchesEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureSavedSearchesEnabled,label:ZaMsg.LBL_zimbraFeatureSavedSearchesEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureInitialSearchPreferenceEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureInitialSearchPreferenceEnabled,label:ZaMsg.LBL_zimbraFeatureInitialSearchPreferenceEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeaturePeopleSearchEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeaturePeopleSearchEnabled,label:ZaMsg.LBL_zimbraFeaturePeopleSearchEnabled, trueValue:"TRUE", falseValue:"FALSE"}
                ]
            },
            {type:_ZA_TOP_GROUPER_,  label:ZaMsg.NAD_zimbraSMIMEFeature, id:"cos_form_features_smime",
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraFeatureSMIMEEnabled
                    ]]
                ],
                items:[
                    {ref:ZaCos.A_zimbraFeatureSMIMEEnabled, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureSMIMEEnabled,label:ZaMsg.LBL_zimbraFeatureSMIMEEnabled, trueValue:"TRUE", falseValue:"FALSE"}
                ]
            }


        ];

        case2.items = case2Items;
        cases.push(case2);
    }

    if(_tab3) {
        var case3 = {type:_ZATABCASE_,caseKey:_tab3, id:"cos_for_prefs_tab",
            paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
            numCols:1};
        var case3Items = [
            {type:_ZA_TOP_GROUPER_, id:"account_prefs_general", colSizes:["275px","auto"],numCols:2,
                label: ZaMsg.NAD_GeneralOptions,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraPrefClientType,
                        ZaCos.A_zimbraPrefShowSearchString,
                        ZaCos.A_zimbraPrefMailInitialSearch,
                        ZaCos.A_zimbraPrefImapSearchFoldersEnabled,
                        ZaCos.A_zimbraPrefUseKeyboardShortcuts,
                        ZaCos.A_zimbraPrefWarnOnExit,
                        ZaCos.A_zimbraPrefAdminConsoleWarnOnExit,
                        ZaCos.A_zimbraPrefShowSelectionCheckbox,
                        //ZaCos.A_zimbraPrefIMAutoLogin,
                        ZaCos.A_zimbraJunkMessagesIndexingEnabled,
                        ZaCos.A_zimbraPrefLocale
                    ]]
                ],
                items :[
                {ref:ZaCos.A_zimbraPrefClientType, type:_OSELECT1_, msgName:ZaMsg.MSG_zimbraPrefClientType,
                    label:ZaMsg.LBL_zimbraPrefClientType, labelLocation:_LEFT_
                },
                {ref:ZaCos.A_zimbraPrefShowSearchString, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefShowSearchString,
                    label:ZaMsg.LBL_zimbraPrefShowSearchString, trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefMailInitialSearch, type:_TEXTFIELD_, cssClass:"admin_xform_name_input",
                    msgName:ZaMsg.LBL_zimbraPrefMailInitialSearch,label:ZaMsg.LBL_zimbraPrefMailInitialSearch,
                    labelLocation:_LEFT_
                },
                {ref:ZaCos.A_zimbraPrefImapSearchFoldersEnabled, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefImapSearchFoldersEnabled,
                    label:ZaMsg.LBL_zimbraPrefImapSearchFoldersEnabled, trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefUseKeyboardShortcuts, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefUseKeyboardShortcuts,label:ZaMsg.LBL_zimbraPrefUseKeyboardShortcuts,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefWarnOnExit, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefWarnOnExit,label:ZaMsg.LBL_zimbraPrefWarnOnExit,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefAdminConsoleWarnOnExit, type:_CHECKBOX_,
                    msgName:ZabMsg.LBL_zimbraPrefAdminConsoleWarnOnExit,label:ZabMsg.LBL_zimbraPrefAdminConsoleWarnOnExit,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefShowSelectionCheckbox, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefShowSelectionCheckbox,label:ZaMsg.LBL_zimbraPrefShowSelectionCheckbox,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraJunkMessagesIndexingEnabled, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraJunkMessagesIndexingEnabled,
                    label:ZaMsg.LBL_zimbraJunkMessagesIndexingEnabled,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefLocale, type:_OSELECT1_,
                     msgName:ZaMsg.LBL_zimbraPrefLocale,label:ZaMsg.LBL_zimbraPrefLocale,
                     labelLocation:_LEFT_,
                     labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true,
                     choices: ZaSettings.getLocaleChoices()
                }
            ]},
            {type:_ZA_TOP_GROUPER_, id:"cos_prefs_standard_client",label:ZaMsg.NAD_MailOptionsStandardClient,
                colSizes:["275px","auto"],numCols:2,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraMaxMailItemsPerPage,
                        ZaCos.A_zimbraPrefMailItemsPerPage
                    ]]
                ],
                items :[
                    {ref:ZaCos.A_zimbraMaxMailItemsPerPage, type:_OSELECT1_, msgName:ZaMsg.MSG_zimbraMaxMailItemsPerPage,
                        label:ZaMsg.LBL_zimbraMaxMailItemsPerPage, labelLocation:_LEFT_, choices:[10,25,50,100,250,500,1000], editable:true,
                        inputSize:4
                    },
                    {ref:ZaCos.A_zimbraPrefMailItemsPerPage, type:_OSELECT1_, msgName:ZaMsg.MSG_zimbraPrefMailItemsPerPage,
                        label:ZaMsg.LBL_zimbraPrefMailItemsPerPage, labelLocation:_LEFT_
                    }
                ]
            },
            {type:_ZA_TOP_GROUPER_, id:"cos_prefs_mail_general", colSizes:["275px","auto"],numCols:2,
                label:ZaMsg.NAD_MailOptions,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraPrefMessageViewHtmlPreferred,
                        ZaCos.A_zimbraPrefDisplayExternalImages,
                        ZaCos.A_zimbraPrefGroupMailBy,
                        ZaCos.A_zimbraPrefMailDefaultCharset,
                        ZaCos.A_zimbraPrefCalendarToasterEnabled,
                                                ZaCos.A_zimbraPrefItemsPerVirtualPage
                    ]]
                ],
                items :[
                {ref:ZaCos.A_zimbraPrefMessageViewHtmlPreferred, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefMessageViewHtmlPreferred,
                    label:ZaMsg.LBL_zimbraPrefMessageViewHtmlPreferred,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefDisplayExternalImages, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefDisplayExternalImages,
                    label:ZaMsg.LBL_zimbraPrefDisplayExternalImages,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefGroupMailBy, type:_OSELECT1_, msgName:ZaMsg.LBL_zimbraPrefGroupMailBy,
                    label:ZaMsg.LBL_zimbraPrefGroupMailBy, labelLocation:_LEFT_
                },
                {ref:ZaCos.A_zimbraPrefMailDefaultCharset, type:_OSELECT1_,
                     msgName:ZaMsg.LBL_zimbraPrefMailDefaultCharset,label:ZaMsg.LBL_zimbraPrefMailDefaultCharset,
                     labelLocation:_LEFT_,
                     labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
        {ref:ZaCos.A_zimbraPrefMailToasterEnabled, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefMailToasterEnabled,
                    label:ZaMsg.LBL_zimbraPrefMailToasterEnabled,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefMessageIdDedupingEnabled, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefMessageIdDedupingEnabled,
                    label:ZaMsg.LBL_zimbraPrefMessageIdDedupingEnabled,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefItemsPerVirtualPage,
               type:_TEXTFIELD_,
        msgName:ZaMsg.LBL_zimbraPrefItemsPerVirtualPage,
        label:ZaMsg.LBL_zimbraPrefItemsPerVirtualPage,
        labelLocation:_LEFT_
        }

            ]},
            {type:_ZA_TOP_GROUPER_, id:"cos_prefs_mail_receiving",label:ZaMsg.NAD_MailOptionsReceiving,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraPrefMailSoundsEnabled,
                        ZaCos.A_zimbraPrefMailFlashIcon,
                        ZaCos.A_zimbraPrefMailFlashTitle,
                        ZaCos.A_zimbraPrefMailPollingInterval,
                        ZaCos.A_zimbraMailMinPollingInterval,
                        ZaCos.A_zimbraPrefOutOfOfficeCacheDuration,
                        ZaCos.A_zimbraPrefMailSendReadReceipts
                    ]]
                ],
                items :[
                {ref:ZaCos.A_zimbraPrefMailSoundsEnabled,
                    type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_playSound,
                    label:ZaMsg.LBL_playSound,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefMailFlashIcon,
                    type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_flashIcon,
                    label:ZaMsg.LBL_flashIcon,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefMailFlashTitle,
                    type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_flashTitle,
                    label:ZaMsg.LBL_flashTitle,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefMailPollingInterval, type:_OSELECT1_,
                    msgName:ZaMsg.MSG_zimbraPrefMailPollingInterval,
                    label:ZaMsg.LBL_zimbraPrefMailPollingInterval, labelLocation:_LEFT_,
                    onChange:ZaCosXFormView.validatePollingInterval,
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraMailMinPollingInterval, type:_LIFETIME_,
                    msgName:ZaMsg.MSG_zimbraMailMinPollingInterval,
                    label:ZaMsg.LBL_zimbraMailMinPollingInterval, labelLocation:_LEFT_,
                    onChange:ZaCosXFormView.validatePollingInterval,
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefOutOfOfficeCacheDuration, type:_LIFETIME_,
                    msgName:ZaMsg.MSG_zimbraPrefOutOfOfficeCacheDuration,
                    label:ZaMsg.LBL_zimbraPrefOutOfOfficeCacheDuration, labelLocation:_LEFT_,
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefMailSendReadReceipts, type:_OSELECT1_, label:ZaMsg.LBL_zimbraPrefMailSendReadReceipts,labelLocation:_LEFT_,nowrap:false,labelWrap:true}
            ]},
            {type:_ZA_TOP_GROUPER_, id:"cos_prefs_mail_sending",borderCssClass:"LowPaddedTopGrouperBorder",label:ZaMsg.NAD_MailOptionsSending,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraPrefSaveToSent,
                        ZaCos.A_zimbraAllowAnyFromAddress
                    ]]
                ],
                items :[
                {ref:ZaCos.A_zimbraPrefSaveToSent, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraPrefSaveToSent,label:ZaMsg.LBL_zimbraPrefSaveToSent,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraAllowAnyFromAddress, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraAllowAnyFromAddress,
                    label:ZaMsg.LBL_zimbraAllowAnyFromAddress,
                    trueValue:"TRUE", falseValue:"FALSE"
                }
            ]},
            {type:_ZA_TOP_GROUPER_, id:"cos_prefs_mail_sending",borderCssClass:"LowPaddedTopGrouperBorder",label:ZaMsg.NAD_MailOptionsComposing,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraPrefComposeInNewWindow,
                        ZaCos.A_zimbraPrefComposeFormat,
                        ZaCos.A_zimbraPrefHtmlEditorDefaultFontFamily,
                        ZaCos.A_zimbraPrefHtmlEditorDefaultFontSize,
                        ZaCos.A_zimbraPrefHtmlEditorDefaultFontColor,
                        ZaCos.A_zimbraPrefForwardReplyInOriginalFormat,
                        ZaCos.A_zimbraPrefMandatorySpellCheckEnabled,
                        ZaCos.A_zimbraMailSignatureMaxLength,
                        ZaCos.A_zimbraPrefAutoSaveDraftInterval

                    ]]
                ],
                items :[
                {ref:ZaCos.A_zimbraPrefComposeInNewWindow, type:_CHECKBOX_, msgName:ZaMsg.LBL_zimbraPrefComposeInNewWindow,
                    label:ZaMsg.LBL_zimbraPrefComposeInNewWindow, trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefComposeFormat, type:_OSELECT1_, msgName:ZaMsg.LBL_zimbraPrefComposeFormat,label:ZaMsg.LBL_zimbraPrefComposeFormat, labelLocation:_LEFT_},
                {ref:ZaCos.A_zimbraPrefHtmlEditorDefaultFontFamily, type:_OSELECT1_, msgName:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontFamily,
                    label:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontFamily, labelLocation:_LEFT_
                },
                {ref:ZaCos.A_zimbraPrefHtmlEditorDefaultFontSize, type:_OSELECT1_, msgName:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontSize,
                    label:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontSize, labelLocation:_LEFT_
                },
                {ref:ZaCos.A_zimbraPrefHtmlEditorDefaultFontColor, type:_DWT_COLORPICKER_, msgName:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontColor,
                    height: "25px",
                    label:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontColor, labelLocation:_LEFT_
                },
                {ref:ZaCos.A_zimbraPrefForwardReplyInOriginalFormat, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefForwardReplyInOriginalFormat,
                    label:ZaMsg.LBL_zimbraPrefForwardReplyInOriginalFormat, trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefMandatorySpellCheckEnabled, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefMandatorySpellCheckEnabled,
                    label:ZaMsg.LBL_zimbraPrefMandatorySpellCheckEnabled,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
               /* {ref:ZaCos.A_zimbraPrefMailSignatureStyle, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefMailSignatureStyle,
                    label:ZaMsg.LBL_zimbraPrefMailSignatureStyle,
                    trueValue:"internet", falseValue:"outlook"
                },*/
                {ref:ZaCos.A_zimbraMailSignatureMaxLength, type:_TEXTFIELD_,
                    msgName:ZaMsg.LBL_zimbraMailSignatureMaxLength,
                    label:ZaMsg.LBL_zimbraMailSignatureMaxLength, labelLocation:_LEFT_,
                    cssClass:"admin_xform_number_input"},
                {ref:ZaCos.A_zimbraPrefAutoSaveDraftInterval, type:_LIFETIME_,
                    msgName:ZaMsg.MSG_zimbraPrefAutoSaveDraftInterval,
                    label:ZaMsg.LBL_zimbraPrefAutoSaveDraftInterval, labelLocation:_LEFT_,
                    onChange:ZaCosXFormView.validatePollingInterval,
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                }
            ]},
            {type:_ZA_TOP_GROUPER_, id:"cos_prefs_pop_imap", colSizes:["275px","auto"],numCols:2,
                label: ZaMsg.NAD_PopImapOptions,
                visibilityChecks:[function() {
                    return (ZaCosXFormView.isAttributeDefined.call(this, ZaCos.A_zimbraPrefImapEnabled) || ZaCosXFormView.isAttributeDefined.call(this, ZaCos.A_zimbraPrefPop3Enabled));
                }],
                items :[
                {ref:ZaCos.A_zimbraPrefImapEnabled, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefImapEnabled,
                    label:ZaMsg.LBL_zimbraPrefImapEnabled, trueValue:"TRUE", falseValue:"FALSE",
                    visibilityChecks:[ function() {
                        return ZaCosXFormView.isAttributeDefined.call(this, ZaCos.A_zimbraPrefImapEnabled);
                    }]
                },
                {ref:ZaCos.A_zimbraPrefPop3Enabled, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefPop3Enabled,
                    label:ZaMsg.LBL_zimbraPrefPop3Enabled, trueValue:"TRUE", falseValue:"FALSE",
                    visibilityChecks: [ function() {
                        return ZaCosXFormView.isAttributeDefined.call(this, ZaCos.A_zimbraPrefPop3Enabled);
                    }]
                }
            ]},
            {type:_ZA_TOP_GROUPER_, id:"cos_prefs_contacts_general", colSizes:["275px","auto"],numCols:2,
                label: ZaMsg.NAD_ContactsOptions,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraPrefAutoAddAddressEnabled,
                        ZaCos.A_zimbraPrefGalAutoCompleteEnabled
                    ]]
                ],
                items :[
                {ref:ZaCos.A_zimbraPrefAutoAddAddressEnabled, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefAutoAddAddressEnabled,
                    label:ZaMsg.LBL_zimbraPrefAutoAddAddressEnabled, trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefGalAutoCompleteEnabled, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefGalAutoCompleteEnabled,
                    label:ZaMsg.LBL_zimbraPrefGalAutoCompleteEnabled, trueValue:"TRUE", falseValue:"FALSE"
                }
            ]},
            {type:_ZA_TOP_GROUPER_, id:"cos_prefs_calendar_general",colSizes:["275px","auto"],numCols:2,
                label: ZaMsg.NAD_CalendarOptions,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraPrefTimeZoneId,
                        ZaCos.A_zimbraPrefCalendarApptReminderWarningTime,
                        ZaCos.A_zimbraPrefCalendarInitialView,
                        ZaCos.A_zimbraPrefCalendarFirstDayOfWeek,
                        ZaCos.A_zimbraPrefCalendarApptVisibility,
                        ZaCos.A_zimbraPrefAppleIcalDelegationEnabled,
                        ZaCos.A_zimbraPrefCalendarShowPastDueReminders,
                        ZaCos.A_zimbraPrefCalendarToasterEnabled,
                        ZaCos.A_zimbraPrefCalendarAllowCancelEmailToSelf,
                        ZaCos.A_zimbraPrefCalendarAllowPublishMethodInvite,
                        ZaCos.A_zimbraPrefCalendarAllowForwardedInvite,
                        ZaCos.A_zimbraPrefCalendarReminderFlashTitle,
                        ZaCos.A_zimbraPrefCalendarReminderSoundsEnabled,
                        ZaCos.A_zimbraPrefCalendarSendInviteDeniedAutoReply,
                        ZaCos.A_zimbraPrefCalendarAutoAddInvites,
                        ZaCos.A_zimbraPrefCalendarNotifyDelegatedChanges,
                        ZaCos.A_zimbraPrefCalendarAlwaysShowMiniCal,
                        ZaCos.A_zimbraPrefCalendarUseQuickAdd,
                        ZaCos.A_zimbraPrefUseTimeZoneListInCalendar
                    ]]
                ],
                items :[
                {ref:ZaCos.A_zimbraPrefTimeZoneId, type:_OSELECT1_,
                     msgName:ZaMsg.MSG_zimbraPrefTimeZoneId,label:ZaMsg.LBL_zimbraPrefTimeZoneId,
                     labelLocation:_LEFT_,
                     labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarApptReminderWarningTime, type:_OSELECT1_,
                     msgName:ZaMsg.MSG_zimbraPrefCalendarApptReminderWarningTime,
                     label:ZaMsg.LBL_zimbraPrefCalendarApptReminderWarningTime,
                     labelLocation:_LEFT_,
                     labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarInitialView, type:_OSELECT1_, msgName:ZaMsg.MSG_zimbraPrefCalendarInitialView,
                    label:ZaMsg.LBL_zimbraPrefCalendarInitialView, labelLocation:_LEFT_
                },
                {ref:ZaCos.A_zimbraPrefCalendarFirstDayOfWeek, type:_OSELECT1_,
                    msgName:ZaMsg.LBL_zimbraPrefCalendarFirstDayOfWeek,
                    label:ZaMsg.LBL_zimbraPrefCalendarFirstDayOfWeek, labelLocation:_LEFT_,
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarApptVisibility, type:_OSELECT1_,
                    msgName:ZaMsg.LBL_zimbraPrefCalendarApptVisibility,
                    label:ZaMsg.LBL_zimbraPrefCalendarApptVisibility, labelLocation:_LEFT_,
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefAppleIcalDelegationEnabled,
                    type:_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefAppleIcalDelegationEnabled,
                    label:ZaMsg.LBL_zimbraPrefAppleIcalDelegationEnabled,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarShowPastDueReminders,
                    type:_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefCalendarShowPastDueReminders,
                    label:ZaMsg.LBL_zimbraPrefCalendarShowPastDueReminders,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarToasterEnabled,
                    type:_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefCalendarToasterEnabled,
                    label:ZaMsg.LBL_zimbraPrefCalendarToasterEnabled,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarAllowCancelEmailToSelf,
                    type:_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefCalendarAllowCancelEmailToSelf,
                    label:ZaMsg.LBL_zimbraPrefCalendarAllowCancelEmailToSelf,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarAllowPublishMethodInvite,
                    type:_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefCalendarAllowPublishMethodInvite,
                    label:ZaMsg.LBL_zimbraPrefCalendarAllowPublishMethodInvite,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarAllowForwardedInvite,
                    type:_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefCalendarAllowForwardedInvite,
                    label:ZaMsg.LBL_zimbraPrefCalendarAllowForwardedInvite,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarReminderFlashTitle,
                    type:_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefCalendarReminderFlashTitle,
                    label:ZaMsg.LBL_zimbraPrefCalendarReminderFlashTitle,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarReminderSoundsEnabled,
                    type:_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefCalendarReminderSoundsEnabled,
                    label:ZaMsg.LBL_zimbraPrefCalendarReminderSoundsEnabled,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarSendInviteDeniedAutoReply, type:_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefCalendarSendInviteDeniedAutoReply,
                    label:ZaMsg.LBL_zimbraPrefCalendarSendInviteDeniedAutoReply,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarAutoAddInvites, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefCalendarAutoAddInvites,label:ZaMsg.LBL_zimbraPrefCalendarAutoAddInvites,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarNotifyDelegatedChanges, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefCalendarNotifyDelegatedChanges,label:ZaMsg.LBL_zimbraPrefCalendarNotifyDelegatedChanges,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarAlwaysShowMiniCal, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefCalendarAlwaysShowMiniCal,label:ZaMsg.LBL_zimbraPrefCalendarAlwaysShowMiniCal,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarUseQuickAdd, type:_CHECKBOX_, msgName:ZaMsg.NAD_useQuickAdd,
                    label:ZaMsg.LBL_zimbraPrefCalendarUseQuickAdd, trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefUseTimeZoneListInCalendar, type:_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefUseTimeZoneListInCalendar,
                    label:ZaMsg.LBL_zimbraPrefUseTimeZoneListInCalendar, trueValue:"TRUE", falseValue:"FALSE"
                }
            ]}
        ];

        case3.items = case3Items;
        cases.push(case3);
    }

    if(_tab4) {
        var case4 = {type:_ZATABCASE_, numCols:1, caseKey:_tab4};
        var case4Items = [
            {type:_SPACER_},
            {type:_GROUP_, numCols:2, colSizes:["275px","auto"],
                items:[
                    {type:_OSELECT1_,
                        ref:ZaCos.A_zimbraPrefSkin,
                        msgName:ZaMsg.LBL_zimbraPrefSkin,label:ZaMsg.LBL_zimbraPrefSkin, labelLocation:_LEFT_,choices:ZaCosXFormView.themeChoices,
                        visibilityChecks:[ZaCosXFormView.gotSkins]
                    }
                ]
            },
            {type:_GROUP_,
                items:[
                    {type:_OUTPUT_,ref:ZaCos.A_zimbraPrefSkin,label:ZaMsg.LBL_zimbraPrefSkin, labelLocation:_LEFT_,
                        visibilityChecks:[ZaCosXFormView.gotNoSkins]
                    }
                ]
            },
            {type:_SPACER_},
            {type:_GROUP_, numCols:1,colSizes:["auto"],
                items: [
                    {type:_ZASELECT_RADIO_,
                        selectRef:ZaCos.A_zimbraAvailableSkin,
                        ref:ZaCos.A_zimbraAvailableSkin,
                        choices:ZaCosXFormView.themeChoices,
                        visibilityChecks:[Case_XFormItem.prototype.isCurrentTab, ZaCosXFormView.gotSkins],
                        visibilityChangeEventSources:[ZaModel.currentTab],
                        caseKey:_tab4, caseVarRef:ZaModel.currentTab,
                        radioBoxLabel1:ZaMsg.COS_DontLimitThemes,
                        radioBoxLabel2:ZaMsg.COS_LimitThemesTo
                    },
                    {type:_DWT_ALERT_,style: DwtAlert.WARNING, iconVisible:true,
                        visibilityChecks:[ZaCosXFormView.gotNoSkins,ZaZimbraAdmin.isGlobalAdmin],
                        value:ZaMsg.ERROR_CANNOT_FIND_SKINS_FOR_COS
                    },
                    {type:_DWT_ALERT_,style: DwtAlert.WARNING, iconVisible:true,
                        visibilityChecks:[ZaCosXFormView.gotNoSkins, [function(){return !ZaZimbraAdmin.isGlobalAdmin()}]],
                        value:ZaMsg.ERROR_CANNOT_FIND_SKINS_FOR_COS_OR_NO_PERM
                    }
                ]
            }
        ];

        case4.items=case4Items;
        cases.push(case4);
    }

    if(_tab5) {
        var case5 = {type:_ZATABCASE_, caseKey:_tab5};
        var case5Items = [
            {type:_ZAGROUP_, numCols:1,colSizes:["auto"], border:0,
                items: [
                    {type: _OUTPUT_, value: ZaMsg.COS_LimitZimletsTo},
                    {type:_ZA_ZIMLET_SELECT_COMBO_,
                        selectRef:ZaCos.A_zimbraZimletAvailableZimlets,
                        ref:ZaCos.A_zimbraZimletAvailableZimlets,
                        choices:ZaCosXFormView.zimletChoices,
                        visibilityChecks:[Case_XFormItem.prototype.isCurrentTab],
                        visibilityChangeEventSources:[ZaModel.currentTab],
                        caseKey:_tab5, caseVarRef:ZaModel.currentTab,
                        selectLabel:"",selectLabelLocation:_NONE_
                    },
                    {type: _DWT_ALERT_,
                        containerCssStyle: "padding-bottom:0;",
                        style: DwtAlert.INFO,
                        iconVisible: false,
                        content: ZaMsg.Zimlet_Note
                    }
                ]
            }
        ];

        case5.items = case5Items;
        cases.push(case5);
    }

    if(_tab6) {
        var case6 = {type:_ZATABCASE_, numCols:1,caseKey:_tab6};
        var case6Items = [
            {type:_ZAGROUP_, numCols:1,colSizes:["auto"],border:0,
                items: [
                    {type:_ZASELECT_RADIO_,
                        selectRef:ZaCos.A_zimbraMailHostPool,
                        ref:ZaCos.A_zimbraMailHostPool,
                        choices:ZaApp.getInstance().getServerIdListChoices(),
                        visibilityChecks:[Case_XFormItem.prototype.isCurrentTab],
                        visibilityChangeEventSources:[ZaModel.currentTab],
                        caseKey:_tab6, caseVarRef:ZaModel.currentTab,
                        radioBoxLabel1:ZaMsg.ServerPool_Donotlimit,
                        radioBoxLabel2:ZaMsg.COS_LimitServersTo
                    }
                ]
            }
        ];

        case6.items = case6Items;
        cases.push(case6);
    }

    if(_tab7) {
        var case7 = {type:_ZATABCASE_, numCols:1, colSizes:["auto"], caseKey:_tab7,
            paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
            id:"cos_form_advanced_tab"};
        var case7Items = [
            { type: _DWT_ALERT_,
              style: DwtAlert.INFO,
          iconVisible: false,
          content: ZaMsg.NAD_ZERO_UNLIMETED
        },
            {type:_ZA_TOP_GROUPER_, id:"cos_attachment_settings",
                label:ZaMsg.NAD_AttachmentsGrouper,visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                                                      [ZaCos.A_zimbraAttachmentsBlocked]]],
                items :[
                    {ref:ZaCos.A_zimbraAttachmentsBlocked, type:_CHECKBOX_,  msgName:ZaMsg.NAD_RemoveAllAttachments,label:ZaMsg.NAD_RemoveAllAttachments, labelLocation:_LEFT_, trueValue:"TRUE", falseValue:"FALSE",labelCssClass:"xform_label",  align:_LEFT_}
                ]
            },
            {type:_ZA_TOP_GROUPER_, id:"cos_quota_settings",
                label:ZaMsg.NAD_QuotaGrouper,
                items: [
                    {ref:ZaCos.A_zimbraMailForwardingAddressMaxLength, type:_TEXTFIELD_,
                        msgName:ZaMsg.MSG_zimbraMailForwardingAddressMaxLength,
                        label:ZaMsg.LBL_zimbraMailForwardingAddressMaxLength,
                        labelLocation:_LEFT_,
                        cssClass:"admin_xform_number_input"
                    },
                    {ref:ZaCos.A_zimbraMailForwardingAddressMaxNumAddrs, type:_TEXTFIELD_,
                        msgName:ZaMsg.MSG_zimbraMailForwardingAddressMaxNumAddrs,
                        label:ZaMsg.LBL_zimbraMailForwardingAddressMaxNumAddrs,
                        labelLocation:_LEFT_,
                        cssClass:"admin_xform_number_input"
                    },
                    {ref:ZaCos.A_zimbraMailQuota, type:_TEXTFIELD_,
                        msgName:ZaMsg.MSG_zimbraMailQuota,
                        label:ZaMsg.LBL_zimbraMailQuota, labelLocation:_LEFT_, cssClass:"admin_xform_number_input"
                    },
                    {ref:ZaCos.A_zimbraContactMaxNumEntries, type:_TEXTFIELD_,
                        msgName:ZaMsg.MSG_zimbraContactMaxNumEntries,
                        label:ZaMsg.LBL_zimbraContactMaxNumEntries,
                        labelLocation:_LEFT_,
                        cssClass:"admin_xform_number_input"
                    },
                    {ref:ZaCos.A_zimbraQuotaWarnPercent, type:_INPUT_, msgName:ZaMsg.MSG_zimbraQuotaWarnPercent,
                        label:ZaMsg.LBL_zimbraQuotaWarnPercent, labelLocation:_LEFT_, cssClass:"admin_xform_number_input"
                    },
                    {ref:ZaCos.A_zimbraQuotaWarnInterval, type:_LIFETIME_, msgName:ZaMsg.MSG_zimbraQuotaWarnInterval,
                        label:ZaMsg.LBL_zimbraQuotaWarnInterval, labelLocation:_LEFT_
                    },
                    {ref:ZaCos.A_zimbraQuotaWarnMessage, type:_TEXTAREA_, msgName:ZaMsg.MSG_zimbraQuotaWarnMessage,
                        label:ZaMsg.LBL_zimbraQuotaWarnMessage, labelLocation:_LEFT_, labelCssStyle:"vertical-align:top;",width: "30em"
                    }
                ]
            },

            {type:_ZA_TOP_GROUPER_, id:"cos_datasourcepolling_settings",
                label:ZaMsg.NAD_DataSourcePolling,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                  [ZaCos.A_zimbraDataSourceMinPollingInterval, ZaCos.A_zimbraDataSourcePop3PollingInterval,ZaCos.A_zimbraDataSourceImapPollingInterval,
                                   ZaCos.A_zimbraDataSourceCalendarPollingInterval,ZaCos.A_zimbraDataSourceRssPollingInterval,ZaCos.A_zimbraDataSourceCaldavPollingInterval
                                  ]]],
                items: [
                    {ref:ZaCos.A_zimbraDataSourceMinPollingInterval, type:_LIFETIME_,
                        msgName:ZaMsg.MSG_zimbraDataSourceMinPollingInterval,
                        label:ZaMsg.LBL_zimbraDataSourceMinPollingInterval, labelLocation:_LEFT_,
                        onChange:ZaCosXFormView.validatePollingInterval,
                        labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                    },
                    {ref:ZaCos.A_zimbraDataSourcePop3PollingInterval, type:_LIFETIME_,
                        msgName:ZaMsg.MSG_zimbraDataSourcePop3PollingInterval,
                        label:ZaMsg.LBL_zimbraDataSourcePop3PollingInterval, labelLocation:_LEFT_,
                        onChange:ZaCosXFormView.validatePollingInterval,
                        labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                    },
                    {ref:ZaCos.A_zimbraDataSourceImapPollingInterval, type:_LIFETIME_,
                        msgName:ZaMsg.MSG_zimbraDataSourceImapPollingInterval,
                        label:ZaMsg.LBL_zimbraDataSourceImapPollingInterval, labelLocation:_LEFT_,
                        onChange:ZaCosXFormView.validatePollingInterval,
                        labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                    },
                    {ref:ZaCos.A_zimbraDataSourceCalendarPollingInterval, type:_LIFETIME_,
                        msgName:ZaMsg.MSG_zimbraDataSourceCalendarPollingInterval,
                        label:ZaMsg.LBL_zimbraDataSourceCalendarPollingInterval, labelLocation:_LEFT_,
                        onChange:ZaCosXFormView.validatePollingInterval,
                        labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                    },
                    {ref:ZaCos.A_zimbraDataSourceRssPollingInterval, type:_LIFETIME_,
                        msgName:ZaMsg.MSG_zimbraDataSourceRssPollingInterval,
                        label:ZaMsg.LBL_zimbraDataSourceRssPollingInterval, labelLocation:_LEFT_,
                        onChange:ZaCosXFormView.validatePollingInterval,
                        labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                    },
                    {ref:ZaCos.A_zimbraDataSourceCaldavPollingInterval, type:_LIFETIME_,
                        msgName:ZaMsg.MSG_zimbraDataSourceCaldavPollingInterval,
                        label:ZaMsg.LBL_zimbraDataSourceCaldavPollingInterval, labelLocation:_LEFT_,
                        onChange:ZaCosXFormView.validatePollingInterval,
                        labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                    }
                ]
            },

            {type:_ZA_TOP_GROUPER_, id:"cos_proxyalloweddomain_settings",
                 label: ZaMsg.NAD_ProxyAllowedDomains,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                  [ZaCos.A_zimbraProxyAllowedDomains]]],
                 items:[
            {
            ref: ZaCos.A_zimbraProxyAllowedDomains,
            msgName:ZaMsg.MSG_zimbraProxyAllowedDomains,
                label:ZaMsg.LBL_zimbraProxyAllowedDomains, labelLocation:_LEFT_,
               labelCssStyle:"vertical-align:top;",
                type:_REPEAT_,
                align:_LEFT_,
                repeatInstance:"",
                        addButtonLabel:ZaMsg.NAD_ProxyAddAllowedDomain ,
                        removeButtonLabel: ZaMsg.NAD_ProxyRemoveAllowedDomain,
                showAddButton:true,
                showRemoveButton:true,
                showAddOnNextRow:true,

                items: [
                        {ref:".", type:_TEXTFIELD_,
                              enableDisableChecks:[] ,
                                 visibilityChecks:[],
                                 width: "15em"}
                               ]
                    }
                ]
            },

            {type:_ZA_TOP_GROUPER_,id:"cos_password_settings",
                label:ZaMsg.NAD_PasswordGrouper,
                items: [
                    { type: _DWT_ALERT_,
                      containerCssStyle: "padding-bottom:0;",
                      style: DwtAlert.INFO,
                      iconVisible:  false,
                      content: ((ZaCosXFormView.isAllAuthfromInternal())?ZaMsg.Alert_InternalPassword:ZaMsg.Alert_ExternalPassword)
                    },
                    {ref:ZaCos.A_zimbraPasswordLocked, type:_CHECKBOX_,
                        msgName:ZaMsg.NAD_PwdLocked,
                        label:ZaMsg.NAD_PwdLocked,
                        trueValue:"TRUE", falseValue:"FALSE",
            visibilityChecks:[],enableDisableChecks:[[ZaCosXFormView.isAllAuthfromInternal]]
                    },
                    {ref:ZaCos.A_zimbraMinPwdLength,
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_zimbraMinPwdLength,
            label:ZaMsg.LBL_zimbraMinPwdLength, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[ZaItem.hasWritePermission],enableDisableChecks:[[ZaCosXFormView.isAllAuthfromInternal]]
            },
                    {ref:ZaCos.A_zimbraMaxPwdLength,
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_zimbraMaxPwdLength,
            label:ZaMsg.LBL_zimbraMaxPwdLength, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[ZaItem.hasWritePermission],enableDisableChecks:[[ZaCosXFormView.isAllAuthfromInternal]]
            },

                    {ref:ZaCos.A_zimbraPasswordMinUpperCaseChars,
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_zimbraPasswordMinUpperCaseChars,
            label:ZaMsg.LBL_zimbraPasswordMinUpperCaseChars, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[ZaItem.hasWritePermission],enableDisableChecks:[[ZaCosXFormView.isAllAuthfromInternal]]
            },
                    {ref:ZaCos.A_zimbraPasswordMinLowerCaseChars,
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_zimbraPasswordMinLowerCaseChars,
            label:ZaMsg.LBL_zimbraPasswordMinLowerCaseChars, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[ZaItem.hasWritePermission],enableDisableChecks:[[ZaCosXFormView.isAllAuthfromInternal]]
            },
                    {ref:ZaCos.A_zimbraPasswordMinPunctuationChars,
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_zimbraPasswordMinPunctuationChars,
            label:ZaMsg.LBL_zimbraPasswordMinPunctuationChars, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[ZaItem.hasWritePermission],enableDisableChecks:[[ZaCosXFormView.isAllAuthfromInternal]]
             },
                    {ref:ZaCos.A_zimbraPasswordMinNumericChars,
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_zimbraPasswordMinNumericChars,
            label:ZaMsg.LBL_zimbraPasswordMinNumericChars, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[ZaItem.hasWritePermission],enableDisableChecks:[[ZaCosXFormView.isAllAuthfromInternal]]
            },
                    {ref:ZaCos.A_zimbraPasswordMinDigitsOrPuncs,
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_zimbraPasswordMinDigitsOrPuncs,
            label:ZaMsg.LBL_zimbraPasswordMinDigitsOrPuncs, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[ZaItem.hasWritePermission],enableDisableChecks:[[ZaCosXFormView.isAllAuthfromInternal]]
            },

                    {ref:ZaCos.A_zimbraMinPwdAge,
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_passMinAge,
            label:ZaMsg.LBL_passMinAge, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[],enableDisableChecks:[[ZaCosXFormView.isAllAuthfromInternal]]
            },
                    {ref:ZaCos.A_zimbraMaxPwdAge,
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_passMaxAge,
            label:ZaMsg.LBL_passMaxAge, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[],enableDisableChecks:[[ZaCosXFormView.isAllAuthfromInternal]]
            },
                    {ref:ZaCos.A_zimbraEnforcePwdHistory,
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_zimbraEnforcePwdHistory,
            label:ZaMsg.LBL_zimbraEnforcePwdHistory, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[],enableDisableChecks:[[ZaCosXFormView.isAllAuthfromInternal]]
            },
                    {ref:ZaCos.A_zimbraPasswordBlockCommonEnabled, type:_CHECKBOX_,
            msgName:ZaMsg.NAD_RejectCommonPwd,
            label:ZaMsg.NAD_RejectCommonPwd,
            trueValue:"TRUE", falseValue:"FALSE",
            visibilityChecks:[],enableDisableChecks:[[ZaCosXFormView.isAllAuthfromInternal]]
            },
                ]
            },
            {type:_ZA_TOP_GROUPER_, id:"cos_password_lockout_settings",
                label:ZaMsg.NAD_FailedLoginGrouper,
                items :[

                    {ref:ZaCos.A_zimbraPasswordLockoutEnabled, type:_CHECKBOX_,
                        msgName:ZaMsg.LBL_zimbraPasswordLockoutEnabled,
                        label:ZaMsg.LBL_zimbraPasswordLockoutEnabled,
                        trueValue:"TRUE", falseValue:"FALSE"
                    },
                    {ref:ZaCos.A_zimbraPasswordLockoutMaxFailures, type:_TEXTFIELD_,
                        enableDisableChecks: [ZaCosXFormView.isPasswordLockoutEnabled],
                        enableDisableChangeEventSources:[ZaCos.A_zimbraPasswordLockoutEnabled],
                        label:ZaMsg.LBL_zimbraPasswordLockoutMaxFailures,
                        subLabel:ZaMsg.TTP_zimbraPasswordLockoutMaxFailuresSub,
                        msgName:ZaMsg.MSG_zimbraPasswordLockoutMaxFailures,
                        labelLocation:_LEFT_,
                        cssClass:"admin_xform_number_input"
                    },
                    {ref:ZaCos.A_zimbraPasswordLockoutDuration, type:_LIFETIME_,
                        enableDisableChecks: [ZaCosXFormView.isPasswordLockoutEnabled],
                        enableDisableChangeEventSources:[ZaCos.A_zimbraPasswordLockoutEnabled],
                        label:ZaMsg.LBL_zimbraPasswordLockoutDuration,
                        subLabel:ZaMsg.TTP_zimbraPasswordLockoutDurationSub,
                        msgName:ZaMsg.MSG_zimbraPasswordLockoutDuration,
                        labelLocation:_LEFT_,
                        textFieldCssClass:"admin_xform_number_input"
                    },
                    {ref:ZaCos.A_zimbraPasswordLockoutFailureLifetime, type:_LIFETIME_,
                        enableDisableChecks: [ZaCosXFormView.isPasswordLockoutEnabled],
                        enableDisableChangeEventSources:[ZaCos.A_zimbraPasswordLockoutEnabled],
                        label:ZaMsg.LBL_zimbraPasswordLockoutFailureLifetime,
                        subLabel:ZaMsg.TTP_zimbraPasswordLockoutFailureLifetimeSub,
                        msgName:ZaMsg.MSG_zimbraPasswordLockoutFailureLifetime,
                        labelLocation:_LEFT_,
                        textFieldCssClass:"admin_xform_number_input",
                        labelCssStyle:"white-space:normal;",
                        nowrap:false,labelWrap:true
                    }
                ]
            },
            {type:_ZA_TOP_GROUPER_, id:"cos_timeout_settings",
                label:ZaMsg.NAD_TimeoutGrouper,
                items: [
                    {ref:ZaCos.A_zimbraAdminAuthTokenLifetime, type:_LIFETIME_, msgName:ZaMsg.MSG_zimbraAdminAuthTokenLifetime,label:ZaMsg.LBL_zimbraAdminAuthTokenLifetime,labelLocation:_LEFT_},
                    {ref:ZaCos.A_zimbraAuthTokenLifetime, type:_LIFETIME_, msgName:ZaMsg.MSG_zimbraAuthTokenLifetime,label:ZaMsg.LBL_zimbraAuthTokenLifetime,labelLocation:_LEFT_},
                    {ref:ZaCos.A_zimbraMailIdleSessionTimeout, type:_LIFETIME_, msgName:ZaMsg.MSG_zimbraMailIdleSessionTimeout,label:ZaMsg.LBL_zimbraMailIdleSessionTimeout,labelLocation:_LEFT_},
                    {ref:ZaCos.A_zimbraDumpsterUserVisibleAge, type:_LIFETIME_, msgName:ZaMsg.MSG_zimbraDumpsterUserVisibleAge, label:ZaMsg.LBL_zimbraDumpsterUserVisibleAge,
                        visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaCos.A_zimbraDumpsterEnabled, "TRUE"]], visibilityChangeEventSources:[ZaCos.A_zimbraDumpsterEnabled]
                    }
                ]
            },
            {type:_ZA_TOP_GROUPER_, id:"cos_mail_retention_settings",
                label:ZaMsg.NAD_MailRetentionGrouper,
                items: [
                    { type: _DWT_ALERT_,
                      containerCssStyle: "padding-bottom:0;",
                      style: DwtAlert.INFO,
                      iconVisible: false,
                      content: ZaMsg.Alert_MailRetention
                    },
                    {ref:ZaCos.A_zimbraMailMessageLifetime, type:_LIFETIME2_, msgName:ZaMsg.MSG_zimbraMailMessageLifetime,label:ZaMsg.LBL_zimbraMailMessageLifetime,labelLocation:_LEFT_},
                    {ref:ZaCos.A_zimbraMailTrashLifetime, type:_LIFETIME1_, msgName:ZaMsg.MSG_zimbraMailTrashLifetime,label:ZaMsg.LBL_zimbraMailTrashLifetime, labelLocation:_LEFT_},
                    {ref:ZaCos.A_zimbraMailSpamLifetime, type:_LIFETIME1_, msgName:ZaMsg.MSG_zimbraMailSpamLifetime,label:ZaMsg.LBL_zimbraMailSpamLifetime, labelLocation:_LEFT_},
                    {ref:ZaCos.A_zimbraMailDumpsterLifetime, type:_LIFETIME1_, msgName:ZaMsg.MSG_zimbraMailDumpsterLifetime, label:ZaMsg.LBL_zimbraMailDumpsterLifetime,
                        visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaCos.A_zimbraDumpsterEnabled, "TRUE"], [XForm.checkInstanceValue, ZaCos.A_zimbraDumpsterPurgeEnabled, "TRUE"]],
                        visibilityChangeEventSources:[ZaCos.A_zimbraDumpsterEnabled, ZaCos.A_zimbraDumpsterPurgeEnabled]
                    }
                ]
            },
            {type:_ZA_TOP_GROUPER_,
                label:ZaMsg.NAD_InteropGrouper,visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                                                  [ZaCos.A_zimbraFreebusyExchangeUserOrg]]],
                items: [
                    {ref:ZaCos.A_zimbraFreebusyExchangeUserOrg, type:_TEXTFIELD_,
                        msgName:ZaMsg.LBL_zimbraFreebusyExchangeUserOrg, width: "250px",
                        label:ZaMsg.LBL_zimbraFreebusyExchangeUserOrg,labelLocation:_LEFT_
                    }
                ]
            } ,
            {type: _SPACER_ , height: "10px" }  //add some spaces at the bottom of the page
        ];

        case7.items = case7Items;
        cases.push(case7);
    }

    if(_tab8) {
        var case8 =
        {type: _SUPER_TABCASE_, caseKey:_tab8,
            paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
            colSizes:["100%"],numCols:1,id:"cos_retentionpolicy_tab",
            loadDataMethods: [ZaCosXFormView.prototype.loadRetentionPolicies],
            items: [
                {type:_GROUP_, numCols:2, colSizes:["20px","auto"], width:"600px",
                    cssStyle:"margin-left:10px;",
                    items: [
                        {type:_SPACER_, height:"10px"},
                        {ref:ZaCos.A2_retentionPoliciesKeepInherited, type:_CHECKBOX_,
                            onChange: ZaCosXFormView.inheritCOSRetentionPolicies,
                            msgName:ZaMsg.LBL_POLICY_COS_INHERIT_PROMPT,label:ZaMsg.LBL_POLICY_COS_INHERIT_PROMPT,
                            trueValue:"TRUE", falseValue:"FALSE", labelLocation:_RIGHT_}
                    ]
                },
                {type:_ZA_TOP_GROUPER_, id:"cos_form_keep_p_group",width:"98%",
                    numCols:1,colSizes:["auto"],label:ZaMsg.Glb_RetentionPolicies,
                    cssStyle:"margin:10px;padding-bottom:0;",
                    items: [
                        {ref:ZaCos.A2_retentionPoliciesKeep, type:_DWT_LIST_, height:"200", width:"99%",
                            preserveSelection:false, multiselect:true,cssClass: "DLSource",
                            headerList:headerListKeep, widgetClass:ZaRetentionPolicyListView,
                            onSelection:ZaCosXFormView.retentionSelectionListener,
                            valueChangeEventSources:[ZaCos.A2_retentionPoliciesKeep]
                        },
                        {type:_GROUP_, numCols:5, colSizes:["100px","auto","100px","auto","100px"], width:"350px",
                            cssStyle:"margin:10px;padding-bottom:0;",
                            items: [
                                {type:_DWT_BUTTON_, label:ZaMsg.TBB_Delete,width:"100px",
                                    onActivate:"ZaCosXFormView.deleteButtonListener.call(this);",
                                    enableDisableChangeEventSources:[ZaCos.A2_retentionPoliciesKeep_Selection,ZaCos.A2_retentionPoliciesKeepInherited],
                                    enableDisableChecks:[[
                                        function() {
                                            var sel = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesKeep_Selection);
                                            return sel && sel.length > 0;
                                        }],
                                        [XForm.checkInstanceValue, ZaCos.A2_retentionPoliciesKeepInherited, "TRUE"]
                                    ]
                                },
                                {type:_CELLSPACER_},
                                {type:_DWT_BUTTON_, label:ZaMsg.TBB_Edit,width:"100px",
                                    onActivate:"ZaCosXFormView.editButtonListener.call(this);",
                                    enableDisableChangeEventSources:[ZaCos.A2_retentionPoliciesKeep_Selection, ZaCos.A2_retentionPoliciesKeepInherited],
                                    enableDisableChecks:[[
                                        function() {
                                            var sel = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesKeep_Selection);
                                            return sel && sel.length == 1;
                                        }],
                                        [XForm.checkInstanceValue, ZaCos.A2_retentionPoliciesKeepInherited, "TRUE"]
                                    ]
                                },
                                {type:_CELLSPACER_},
                                {type:_DWT_BUTTON_, label:ZaMsg.NAD_Add,width:"100px",
                                    enableDisableChangeEventSources:[ZaCos.A2_retentionPoliciesKeepInherited],
                                    enableDisableChecks:[[XForm.checkInstanceValue, ZaCos.A2_retentionPoliciesKeepInherited, "TRUE"]],
                                    onActivate:"ZaCosXFormView.addButtonListener.call(this);"
                                }
                            ]
                        }
                    ]
                },
                {type:_ZA_TOP_GROUPER_, id:"cos_form_purge_p_group",width:"98%",
                    numCols:1,colSizes:["auto"],label:ZaMsg.Glb_DisposalPolicies,
                    cssStyle:"margin:10px;padding-bottom:0;",
                    items: [
                        {ref:ZaCos.A2_retentionPoliciesPurge, type:_DWT_LIST_, height:"200", width:"99%",
                            preserveSelection:false, multiselect:true,cssClass: "DLSource",
                            headerList:headerListPurge, widgetClass:ZaRetentionPolicyListView,
                            onSelection:ZaCosXFormView.purgeSelectionListener,
                            valueChangeEventSources:[ZaCos.A2_retentionPoliciesPurge]
                        },
                        {type:_GROUP_, numCols:5, colSizes:["100px","auto","100px","auto","100px"], width:"350px",
                            cssStyle:"margin:10px;padding-bottom:0;",
                            items: [
                                {type:_DWT_BUTTON_, label:ZaMsg.TBB_Delete,width:"100px",
                                    onActivate:"ZaCosXFormView.deleteButtonListener.call(this, 1);",
                                    enableDisableChangeEventSources:[ZaCos.A2_retentionPoliciesPurge_Selection, ZaCos.A2_retentionPoliciesKeepInherited],
                                    enableDisableChecks:[
                                        [function() {
                                            var sel = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesPurge_Selection);
                                            return sel && sel.length > 0;
                                        }],
                                        [XForm.checkInstanceValue, ZaCos.A2_retentionPoliciesKeepInherited, "TRUE"]
                                    ]
                                },
                                {type:_CELLSPACER_},
                                {type:_DWT_BUTTON_, label:ZaMsg.TBB_Edit,width:"100px",
                                    onActivate:"ZaCosXFormView.editButtonListener.call(this, 1);",
                                    enableDisableChangeEventSources:[ZaCos.A2_retentionPoliciesPurge_Selection, ZaCos.A2_retentionPoliciesKeepInherited],
                                    enableDisableChecks:[
                                        [function() {
                                            var sel = this.getForm().getInstanceValue(ZaCos.A2_retentionPoliciesPurge_Selection);
                                            return sel && sel.length == 1;
                                        }],
                                        [XForm.checkInstanceValue, ZaCos.A2_retentionPoliciesKeepInherited, "TRUE"]
                                    ]
                                },
                                {type:_CELLSPACER_},
                                {type:_DWT_BUTTON_, label:ZaMsg.NAD_Add,width:"100px",
                                    enableDisableChangeEventSources:[ZaCos.A2_retentionPoliciesKeepInherited],
                                    enableDisableChecks:[[XForm.checkInstanceValue, ZaCos.A2_retentionPoliciesKeepInherited, "TRUE"]],
                                    onActivate:"ZaCosXFormView.addButtonListener.call(this,1);"
                                }
                            ]
                        }
                    ]
                }
            ]
        };
        cases.push (case8) ;
    }

    xFormObject.tableCssStyle = "width:100%;overflow:auto;";
    xFormObject.items = [
            {type:_GROUP_, cssClass:"ZmSelectedHeaderBg", colSpan:"*", id:"xform_header",
                items: [
                    {type:_GROUP_,    numCols:4,colSizes:["32px","*","80px","*"],items:headerItems}
                ]
            },
            {type:_TAB_BAR_,  ref:ZaModel.currentTab,choices:this.tabChoices,cssClass:"ZaTabBar", id:"xform_tabbar", cssStyle:"display:none;"},
            {type:_SWITCH_, align:_LEFT_, valign:_TOP_, items:cases}
    ];
};
ZaTabView.XFormModifiers["ZaCosXFormView"].push(ZaCosXFormView.myXFormModifier);

ZaCosXFormView.prototype.getTabChoices =
function() {
    return this.tabChoices;
}

ZaCosXFormView.isAllAuthfromInternal =
function() {
    var isAll = true;  // is all external?
    var domainList = ZaCosXFormView._domainList;
    if(!domainList) return isAll;
    for(var i = 0; i < domainList.length && isAll; i ++) {
        var dom = domainList[i];
        if(dom.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_zimbra)
            isAll = false;
    }
        return !isAll;
}

ZaCosXFormView.validatePollingInterval =
function (value, event, form) {
    DBG.println(AjxDebug.DBG3, "The polling interval = " + value);
    var instance = form.getInstance ();
    this.setInstanceValue(value);
    var prefPollingInterval = instance.attrs[ZaCos.A_zimbraPrefMailPollingInterval] ;
    var minPollingInterval = instance.attrs[ZaCos.A_zimbraMailMinPollingInterval] ;
    var prefPollingIntervalItem = form.getItemsById (ZaCos.A_zimbraPrefMailPollingInterval)[0];
    try {
        var prefPollingInNum = parseInt(ZaUtil.getLifeTimeInSeconds(prefPollingInterval));
        var minPollingInNum = parseInt(ZaUtil.getLifeTimeInSeconds(minPollingInterval));
        if (prefPollingInNum < minPollingInNum) {
            prefPollingIntervalItem.setError (ZaMsg.tt_mailPollingIntervalError + minPollingInterval) ;
            form.parent.setDirty(false);
        }else{
            prefPollingIntervalItem.clearError();
            form.parent.setDirty(true);
        }
    }catch (e){
        prefPollingIntervalItem.setError (e.message);
        form.parent.setDirty(false);
    }
}
}
if (AjxPackage.define("zimbraAdmin.cos.view.ZaNewCosXWizard")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: jxy
 * Date: 10/19/11
 * Time: 11:07 PM
 * To change this template use File | Settings | File Templates.
 */
ZaNewCosXWizard = function(parent, entry) {
    ZaXWizardDialog.call(this, parent, null, ZaMsg.COSTBB_New_tt, "740px", "300px","ZaNewCosXWizard",null,ZaId.DLG_NEW_COS);
    this.TAB_INDEX = 0;    
    this.initForm(ZaCos.myXModel,this.getMyXForm(entry), null);

    this._localXForm.addListener(DwtEvent.XFORMS_VALUE_CHANGED, new AjxListener(this, ZaNewCosXWizard.prototype.handleXFormChange));
    this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, new AjxListener(this, ZaNewCosXWizard.prototype.handleXFormChange));
    this._helpURL = ZaNewCosXWizard.helpURL;
}

ZaNewCosXWizard.prototype = new ZaXWizardDialog;
ZaNewCosXWizard.prototype.constructor = ZaNewCosXWizard;
ZaXDialog.XFormModifiers["ZaNewCosXWizard"] = new Array();
ZaNewCosXWizard.prototype.TAB_INDEX=0;
ZaNewCosXWizard.zimletChoices = new XFormChoices([], XFormChoices.SIMPLE_LIST);
ZaNewCosXWizard.themeChoices = new XFormChoices([], XFormChoices.OBJECT_LIST);
/**
* @method setObject sets the object contained in the view
* @param entry - ZaDomain object to display
**/
ZaNewCosXWizard.prototype.toString = function() {
    return "ZaNewCosXWizard";
}
ZaNewCosXWizard.helpURL = ZaUtil.HELP_URL;


ZaNewCosXWizard.prototype.handleXFormChange = function (ev) {
    if(ev && this._localXForm.hasErrors()) {
            this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
    } else {
        if(this._containedObject.attrs[ZaCos.A_name]&& this._containedObject.attrs[ZaCos.A_name].length> 0){
            this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(true);
             if (this._containedObject[ZaModel.currentStep] != this._lastStep) {
                 this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
            }
            if (this._containedObject[ZaModel.currentStep] != 1) {
                 this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
            }
        }
    }
}

ZaNewCosXWizard.prototype.popup =
function (loc) {
    ZaXWizardDialog.prototype.popup.call(this, loc);
    this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
    this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
    this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
}


ZaNewCosXWizard.prototype.createDomainAndAccount = function(domainName) {
    try {
        var newDomain = new ZaDomain();
        newDomain.name=domainName;
        newDomain.attrs[ZaDomain.A_domainName] = domainName;
        var domain = ZaItem.create(newDomain,ZaDomain,"ZaDomain");
        if(domain != null) {
            ZaApp.getInstance().getCurrentController().closeCnfrmDelDlg();
            this.finishWizard();
        }
    } catch(ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaNewCosXWizard.prototype.createDomainAndAccount", null, false);
    }
}


ZaNewCosXWizard.prototype.finishWizard =
function() {
    try {
        if(!ZaCos.checkValues(this._containedObject)) {
            return false;
        }
        var cos = ZaItem.create(this._containedObject, ZaCos, "ZaCos");
        if(cos!=null) {
            cos.name = this._containedObject.attrs[ZaCos.A_name];
            cos.create(cos.name,this._containedObject.attrs);
            ZaApp.getInstance().getCosController().fireCreationEvent(cos);
            this.popdown();
            ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.CosCreated,[cos.name]));
        }
    } catch (ex) {
        switch(ex.code) {
            case ZmCsfeException.ACCT_EXISTS:
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_ACCOUNT_EXISTS);
            break;
            case ZmCsfeException.ACCT_INVALID_PASSWORD:
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_INVALID, ex);
                ZaApp.getInstance().getAppCtxt().getErrorDialog().showDetail(true);
            break;
            case ZmCsfeException.NO_SUCH_COS:
                ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_NO_SUCH_COS,[this._containedObject.attrs[ZaAccount.A_COSId]]), ex);
            break;
            case ZmCsfeException.SIGNATURE_EXISTS:
                this.popdown();
                ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaNewResourceXWizard.prototype.finishWizard", null, false);
            break;
            case ZmCsfeException.NO_SUCH_DOMAIN:
                ZaApp.getInstance().dialogs["confirmMessageDialog2"].setMessage(AjxMessageFormat.format(ZaMsg.CreateDomain_q,[ZaAccount.getDomain(this._containedObject.name)]), DwtMessageDialog.WARNING_STYLE);
                ZaApp.getInstance().dialogs["confirmMessageDialog2"].registerCallback(DwtDialog.YES_BUTTON, this.createDomainAndAccount, this, [ZaAccount.getDomain(this._containedObject.name)]);
                ZaApp.getInstance().dialogs["confirmMessageDialog2"].registerCallback(DwtDialog.NO_BUTTON, ZaController.prototype.closeCnfrmDelDlg, ZaApp.getInstance().getCurrentController(), null);
                ZaApp.getInstance().dialogs["confirmMessageDialog2"].popup();
            break;
            default:
                ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaNewCosXWizard.prototype.finishWizard", null, false);
            break;
        }
    }
}

ZaNewCosXWizard.prototype.goNext =
function() {
    if (this._containedObject[ZaModel.currentStep] == 1) {
        this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
    }
    this.goPage(this._containedObject[ZaModel.currentStep] + 1);
    if(this._containedObject[ZaModel.currentStep] == this._lastStep) {
        this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
    }
}

ZaNewCosXWizard.prototype.goPrev =
function() {
    if (this._containedObject[ZaModel.currentStep] == 2) {
        this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
    } else if(this._containedObject[ZaModel.currentStep] == this._lastStep) {
        this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
    }
    this.goPage(this._containedObject[ZaModel.currentStep] - 1);
}


ZaNewCosXWizard.prototype.setObject =
function(entry) {
    //handle the special attributes to be displayed in xform
    entry.manageSpecialAttrs();

    this._containedObject = new ZaCos();
    this._containedObject.attrs = new Object();
    this._containedObject[ZaModel.currentStep] = entry[ZaModel.currentStep] || 1;
    
    this._containedObject.name = entry.name;
    this._containedObject.type = entry.type ;

    if(entry.rights)
        this._containedObject.rights = entry.rights;
    
    if(entry.setAttrs)
        this._containedObject.setAttrs = entry.setAttrs;
    
    if(entry.getAttrs)
        this._containedObject.getAttrs = entry.getAttrs;


    if(entry._defaultValues)
        this._containedObject._defaultValues = entry._defaultValues;
        
    if(entry.id)
        this._containedObject.id = entry.id;

    if(entry._uuid) {
        this._containedObject._uuid = entry._uuid;
    }

    for (var a in entry.attrs) {
        var modelItem = this._localXForm.getModel().getItem(a) ;
        if ((modelItem != null && modelItem.type == _LIST_)
           || (entry.attrs[a] != null && entry.attrs[a] instanceof Array)) 
        {  //need deep clone
            this._containedObject.attrs [a] =
                    ZaItem.deepCloneListItem (entry.attrs[a]);
        } else {
            this._containedObject.attrs[a] = entry.attrs[a];
        }
    }

    
    if (entry.getAttrs) {
        if(entry.getAttrs[ZaCos.A_zimbraAvailableSkin] || entry.getAttrs.all) {
            var skins = entry.attrs[ZaCos.A_zimbraAvailableSkin];
            if(skins != null && skins != "") {
                if (AjxUtil.isString(skins))     {
                    this._containedObject.attrs[ZaCos.A_zimbraAvailableSkin] = [skins];
                } else {
                    var cnt = skins.length;
                    this._containedObject.attrs[ZaCos.A_zimbraAvailableSkin] = [];
                    for(var i = 0; i < cnt; i ++) {
                        this._containedObject.attrs[ZaCos.A_zimbraAvailableSkin].push(skins[i]);
                    }
                }

            } else {
                this._containedObject.attrs[ZaCos.A_zimbraAvailableSkin] = null;
            }

            var skins = ZaApp.getInstance().getInstalledSkins();
            if(skins == null) {
                skins = [];
            } else if (AjxUtil.isString(skins))     {
                skins = [skins];
            }

            var skinsChoices = ZaApp.getInstance().getSkinChoices(skins);
            ZaNewCosXWizard.themeChoices.setChoices(skinsChoices);
            ZaNewCosXWizard.themeChoices.dirtyChoices();
        }

        if(entry.getAttrs[ZaCos.A_zimbraZimletAvailableZimlets] || entry.getAttrs.all) {
            //get all Zimlets
            var allZimlets = ZaZimlet.getAll(ZaZimlet.EXCLUDE_EXTENSIONS);
            if(allZimlets == null) {
                allZimlets = [];
            }

            if(allZimlets instanceof ZaItemList || allZimlets instanceof AjxVector)
                allZimlets = allZimlets.getArray();

            //convert objects to strings
            var cnt = allZimlets.length;
            var _tmpZimlets = [];
            for(var i=0; i<cnt; i++) {
                var zimlet = allZimlets[i];
                _tmpZimlets.push(zimlet.name);
            }
            ZaNewCosXWizard.zimletChoices.setChoices(_tmpZimlets);
            ZaNewCosXWizard.zimletChoices.dirtyChoices();
        }
    }

    // update the domainlist
    ZaNewCosXWizard._domainList = ZaApp.getInstance().getDomainList(true).getArray();

    this._localXForm.setInstance(this._containedObject);

}

ZaNewCosXWizard.gotSkins = function () {
    return ((ZaApp.getInstance().getInstalledSkins() != null) && (ZaApp.getInstance().getInstalledSkins().length > 0));
}

ZaNewCosXWizard.gotNoSkins = function () {
    return !ZaNewCosXWizard.gotSkins.call(this);
}

ZaNewCosXWizard.isPasswordLockoutEnabled = function () {
    return (this.getInstanceValue(ZaCos.A_zimbraPasswordLockoutEnabled) == 'TRUE');
}

ZaNewCosXWizard.isMailFeatureEnabled = function () {
    return (this.getInstanceValue(ZaCos.A_zimbraFeatureMailEnabled) == "TRUE");
}

ZaCosXFormView.isContactsFeatureEnabled = function () {
    return this.getInstanceValue(ZaCos.A_zimbraFeatureContactsEnabled) == "TRUE";
}

ZaNewCosXWizard.isCalendarFeatureEnabled = function () {
    return this.getInstanceValue(ZaCos.A_zimbraFeatureCalendarEnabled)=="TRUE";
}

ZaNewCosXWizard.isMailForwardingEnabled = function () {
    return (this.getInstanceValue(ZaCos.A_zimbraFeatureMailForwardingEnabled) == "TRUE");
}

//ZaNewCosXWizard.isMailFeatureEnabled = function () {
//    return (this.getInstanceValue(ZaCos.A_zimbraFeatureMailEnabled) == "TRUE");
//}

ZaNewCosXWizard.isBriefcaseFeatureEnabled = function () {
    return (this.getInstanceValue(ZaCos.A_zimbraFeatureBriefcasesEnabled) == "TRUE");
}

ZaNewCosXWizard.FEATURE_TAB_ATTRS = [ZaCos.A_zimbraFeatureMailEnabled,
    ZaCos.A_zimbraFeatureReadReceiptsEnabled,
    ZaCos.A_zimbraFeatureContactsEnabled,
    ZaCos.A_zimbraFeatureDistributionListFolderEnabled,
    ZaCos.A_zimbraFeatureCalendarEnabled,
    ZaCos.A_zimbraFeatureTasksEnabled,
    //ZaCos.A_zimbraFeatureNotebookEnabled,
    ZaCos.A_zimbraFeatureBriefcasesEnabled,
    ZaCos.A_zimbraFeatureOptionsEnabled,
    ZaCos.A_zimbraFeatureTaggingEnabled,
    ZaCos.A_zimbraFeatureSharingEnabled,
    ZaCos.A_zimbraFeatureChangePasswordEnabled,
    ZaCos.A_zimbraFeatureSkinChangeEnabled,
    ZaCos.A_zimbraFeatureManageZimlets,
    ZaCos.A_zimbraFeatureHtmlComposeEnabled,
    //ZaCos.A_zimbraFeatureShortcutAliasesEnabled,
    ZaCos.A_zimbraFeatureGalEnabled,
    ZaCos.A_zimbraFeatureMAPIConnectorEnabled,
    ZaCos.A_zimbraFeatureEwsEnabled,
    ZaCos.A_zimbraFeatureTouchClientEnabled,
    ZaCos.A_zimbraFeatureWebClientOfflineAccessEnabled,
    ZaCos.A_zimbraFeatureGalAutoCompleteEnabled,
    ZaCos.A_zimbraFeatureMailPriorityEnabled,
    ZaCos.A_zimbraFeatureFlaggingEnabled,
    ZaCos.A_zimbraImapEnabled,
    ZaCos.A_zimbraPop3Enabled,
    ZaCos.A_zimbraFeatureWebClientEnabled,
    ZaCos.A_zimbraFeatureImapDataSourceEnabled,
    ZaCos.A_zimbraFeaturePop3DataSourceEnabled,
    ZaCos.A_zimbraFeatureConversationsEnabled,
    ZaCos.A_zimbraFeatureFiltersEnabled,
    ZaCos.A_zimbraFeatureOutOfOfficeReplyEnabled,
    ZaCos.A_zimbraFeatureNewMailNotificationEnabled,
    ZaCos.A_zimbraFeatureIdentitiesEnabled,
    ZaCos.A_zimbraFeatureGroupCalendarEnabled,
    ZaCos.A_zimbraFeaturePeopleSearchEnabled,
    ZaCos.A_zimbraFeatureAdvancedSearchEnabled,
    ZaCos.A_zimbraFeatureSavedSearchesEnabled,
    ZaCos.A_zimbraFeatureInitialSearchPreferenceEnabled,
    ZaCos.A_zimbraFeatureImportFolderEnabled,
    ZaCos.A_zimbraFeatureExportFolderEnabled,
    ZaCos.A_zimbraDumpsterEnabled,
    ZaCos.A_zimbraDumpsterPurgeEnabled,
    ZaCos.A_zimbraFeatureMailSendLaterEnabled,
    //ZaCos.A_zimbraFeatureFreeBusyViewEnabled,
    ZaCos.A_zimbraFeatureCalendarReminderDeviceEmailEnabled,
    ZaCos.A_zimbraFeatureSMIMEEnabled
];

ZaNewCosXWizard.FEATURE_TAB_RIGHTS = [];

ZaNewCosXWizard.PREFERENCES_TAB_ATTRS = [
    ZaCos.A_zimbraPrefMailSendReadReceipts,
    ZaCos.A_zimbraPrefUseTimeZoneListInCalendar,
    ZaCos.A_zimbraPrefCalendarUseQuickAdd,
    ZaCos.A_zimbraPrefCalendarAlwaysShowMiniCal,
    ZaCos.A_zimbraPrefCalendarApptReminderWarningTime,
    ZaCos.A_zimbraPrefTimeZoneId,
    ZaCos.A_zimbraPrefGalAutoCompleteEnabled,
    ZaCos.A_zimbraPrefAutoAddAddressEnabled,
    ZaCos.A_zimbraMailSignatureMaxLength,
    ZaCos.A_zimbraPrefForwardReplyInOriginalFormat,
    ZaCos.A_zimbraPrefHtmlEditorDefaultFontColor,
    ZaCos.A_zimbraPrefHtmlEditorDefaultFontFamily,
    ZaCos.A_zimbraPrefHtmlEditorDefaultFontSize,
    ZaCos.A_zimbraPrefComposeFormat,
    ZaCos.A_zimbraPrefComposeInNewWindow,
    ZaCos.A_zimbraAllowAnyFromAddress,
    ZaCos.A_zimbraMailMinPollingInterval,
    ZaCos.A_zimbraPrefMailPollingInterval,
    ZaCos.A_zimbraPrefAutoSaveDraftInterval,
    ZaCos.A_zimbraPrefMailDefaultCharset,
    ZaCos.A_zimbraMaxMailItemsPerPage,
    ZaCos.A_zimbraPrefMailItemsPerPage,
    ZaCos.A_zimbraPrefGroupMailBy,
    ZaCos.A_zimbraPrefDisplayExternalImages,
    ZaCos.A_zimbraPrefMessageViewHtmlPreferred,
    ZaCos.A_zimbraPrefLocale,
    ZaCos.A_zimbraJunkMessagesIndexingEnabled,
    ZaCos.A_zimbraPrefShowSelectionCheckbox,
    ZaCos.A_zimbraPrefWarnOnExit,
    ZaCos.A_zimbraPrefAdminConsoleWarnOnExit,
    ZaCos.A_zimbraPrefUseKeyboardShortcuts,
    ZaCos.A_zimbraPrefImapSearchFoldersEnabled,
    ZaCos.A_zimbraPrefShowSearchString,
    ZaCos.A_zimbraPrefMailInitialSearch,
    ZaCos.A_zimbraPrefClientType,
    ZaCos.A_zimbraPrefCalendarInitialView,
    ZaCos.A_zimbraPrefCalendarFirstDayOfWeek,
    ZaCos.A_zimbraPrefCalendarReminderFlashTitle,
    ZaCos.A_zimbraPrefCalendarAllowCancelEmailToSelf,
    ZaCos.A_zimbraPrefCalendarAllowPublishMethodInvite,
    ZaCos.A_zimbraPrefCalendarToasterEnabled,
    ZaCos.A_zimbraPrefCalendarShowPastDueReminders,
    ZaCos.A_zimbraPrefAppleIcalDelegationEnabled,
    ZaCos.A_zimbraPrefMandatorySpellCheckEnabled,
    ZaCos.A_zimbraPrefImapEnabled,
    ZaCos.A_zimbraPrefPop3Enabled
];
ZaNewCosXWizard.PREFERENCES_TAB_RIGHTS = [];

ZaNewCosXWizard.SKIN_TAB_ATTRS = [ZaCos.A_zimbraPrefSkin,ZaCos.A_zimbraAvailableSkin];
ZaNewCosXWizard.SKIN_TAB_RIGHTS = [];

ZaNewCosXWizard.ZIMLET_TAB_ATTRS = [ZaCos.A_zimbraZimletAvailableZimlets];
ZaNewCosXWizard.ZIMLET_TAB_RIGHTS = [ZaCos.RIGHT_GET_ZIMLET, ZaCos.RIGHT_LIST_ZIMLET];

ZaNewCosXWizard.SERVERPOOL_TAB_ATTRS = [ZaCos.A_zimbraMailHostPool];
ZaNewCosXWizard.SERVERPOOL_TAB_RIGHTS = [ZaCos.RIGHT_GET_HOSTNAME];

ZaNewCosXWizard.ADVANCED_TAB_ATTRS = [ZaCos.A_zimbraAttachmentsBlocked,
    ZaCos.A_zimbraMailQuota,
    ZaCos.A_zimbraContactMaxNumEntries,
    ZaCos.A_zimbraQuotaWarnPercent,
    ZaCos.A_zimbraQuotaWarnInterval,
    ZaCos.A_zimbraQuotaWarnMessage,
    ZaCos.A_zimbraPasswordLocked,
    ZaCos.A_zimbraPasswordBlockCommonEnabled,
    ZaCos.A_zimbraMinPwdLength,
    ZaCos.A_zimbraMaxPwdLength,
    ZaCos.A_zimbraPasswordMinUpperCaseChars,
    ZaCos.A_zimbraPasswordMinLowerCaseChars,
    ZaCos.A_zimbraPasswordMinPunctuationChars,
    ZaCos.A_zimbraPasswordMinNumericChars,
    ZaCos.A_zimbraPasswordMinDigitsOrPuncs,
    ZaCos.A_zimbraMinPwdAge,
    ZaCos.A_zimbraMaxPwdAge,
    ZaCos.A_zimbraEnforcePwdHistory,
    ZaCos.A_zimbraPasswordLockoutEnabled,
    ZaCos.A_zimbraPasswordLockoutMaxFailures,
    ZaCos.A_zimbraPasswordLockoutDuration,
    ZaCos.A_zimbraPasswordLockoutFailureLifetime,
    ZaCos.A_zimbraAdminAuthTokenLifetime,
    ZaCos.A_zimbraAuthTokenLifetime,
    ZaCos.A_zimbraMailIdleSessionTimeout,
    ZaCos.A_zimbraMailMessageLifetime,
    ZaCos.A_zimbraMailTrashLifetime,
    ZaCos.A_zimbraMailSpamLifetime,
    ZaCos.A_zimbraDumpsterUserVisibleAge,
    ZaCos.A_zimbraMailDumpsterLifetime,
    ZaCos.A_zimbraFreebusyExchangeUserOrg,
        ZaCos.A_zimbraDataSourcePop3PollingInterval,
        ZaCos.A_zimbraDataSourceImapPollingInterval,
        ZaCos.A_zimbraDataSourceCalendarPollingInterval,
        ZaCos.A_zimbraDataSourceRssPollingInterval,
        ZaCos.A_zimbraDataSourceCaldavPollingInterval,
    ZaCos.A_zimbraDataSourceMinPollingInterval

];
ZaNewCosXWizard.ADVANCED_TAB_RIGHTS = [];

ZaNewCosXWizard.myXFormModifier = function(xFormObject, entry) {
    this.stepChoices = [];
    var _tab1 = ++this.TAB_INDEX;
    var _tab2, _tab3, _tab4, _tab5, _tab6, _tab7;

    var headerItems = [    {type:_AJX_IMAGE_, src:"COS_32", label:null,rowSpan:2},
                            {type:_OUTPUT_, ref:ZaCos.A_name, label:null,cssClass:"AdminTitle",
                                visibilityChecks:[ZaItem.hasReadPermission], height: 32, rowSpan:2},
                            {type:_OUTPUT_, ref:ZaItem.A_zimbraId, label:ZaMsg.NAD_ZimbraID,visibilityChecks:[ZaItem.hasReadPermission]},
                            {type:_OUTPUT_, ref:ZaItem.A_zimbraCreateTimestamp,
                                label:ZaMsg.LBL_zimbraCreateTimestamp, labelLocation:_LEFT_,
                                getDisplayValue:function() {
                                    var val = ZaItem.formatServerTime(this.getInstanceValue());
                                    if(!val)
                                        return ZaMsg.Server_Time_NA;
                                    else
                                        return val;
                                },
                                visibilityChecks:[ZaItem.hasReadPermission]
                             }];

    this.stepChoices.push({value:_tab1, label:ZaMsg.TABT_GeneralPage});

    if(ZaTabView.isTAB_ENABLED(entry,ZaNewCosXWizard.FEATURE_TAB_ATTRS, ZaNewCosXWizard.FEATURE_TAB_RIGHTS)) {
        _tab2 = ++this.TAB_INDEX;
        this.stepChoices.push({value:_tab2, label:ZaMsg.TABT_Features});
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaNewCosXWizard.PREFERENCES_TAB_ATTRS, ZaNewCosXWizard.PREFERENCES_TAB_RIGHTS)) {
        _tab3 = ++this.TAB_INDEX;
        this.stepChoices.push({value:_tab3, label:ZaMsg.TABT_Preferences});
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaNewCosXWizard.SKIN_TAB_ATTRS, ZaNewCosXWizard.SKIN_TAB_RIGHTS)) {
           _tab4 = ++this.TAB_INDEX;
        this.stepChoices.push({value:_tab4, label:ZaMsg.TABT_Themes});
    }

    var allZimlets = ZaZimlet.getAll(ZaZimlet.EXCLUDE_EXTENSIONS);
    if(allZimlets != null && !AjxUtil.isEmpty(allZimlets.getArray()) && ZaTabView.isTAB_ENABLED(entry,ZaNewCosXWizard.ZIMLET_TAB_ATTRS, ZaNewCosXWizard.ZIMLET_TAB_RIGHTS)) {
        _tab5 = ++this.TAB_INDEX;
        this.stepChoices.push({value:_tab5, label:ZaMsg.TABT_Zimlets});
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaNewCosXWizard.SERVERPOOL_TAB_ATTRS, ZaNewCosXWizard.SERVERPOOL_TAB_RIGHTS)) {
        _tab6 = ++this.TAB_INDEX;
        this.stepChoices.push({value:_tab6, label:ZaMsg.TABT_ServerPool});
    }

    if(ZaTabView.isTAB_ENABLED(entry,ZaNewCosXWizard.ADVANCED_TAB_ATTRS, ZaNewCosXWizard.ADVANCED_TAB_RIGHTS)) {
        _tab7 = ++this.TAB_INDEX;
        this.stepChoices.push({value:_tab7, label:ZaMsg.TABT_Advanced});
    }


    var cases = [];
    var case1 = {type:_CASE_,caseKey:_tab1,numCols:1,
        width:"100%", cellpadding:0
    };

    var case1Items = [
        {type:_ZAWIZ_TOP_GROUPER_, numCols:2,colSizes: ["200px","auto"], label:ZaMsg.TABT_GeneralPage,
            items:[
                {ref:ZaCos.A_name, type:_INPUT_,
                    enableDisableChecks:[[ZaItem.hasRight,ZaCos.RENAME_COS_RIGHT]],
                    msgName:ZaMsg.NAD_DisplayName,label:ZaMsg.NAD_DisplayName, labelLocation:_LEFT_,
                    cssClass:"admin_xform_name_input", required:true, width: "30em"
                },
                {ref:"description",  msgName:ZaMsg.NAD_Description,
                    label:ZaMsg.NAD_Description, labelLocation:_LEFT_, //cssClass:"admin_xform_name_input" ,
                    labelCssStyle:"vertical-align:top;",
                    type:_TEXTFIELD_,
                    align:_LEFT_,
                    enableDisableChecks:[ZaItem.hasWritePermission],
                    visibilityChecks:[ZaItem.hasReadPermission],
                    width:"30em"
                },
                {ref:ZaCos.A_zimbraNotes, type:_TEXTAREA_,
                    msgName:ZaMsg.NAD_Notes,label:ZaMsg.NAD_Notes, labelLocation:_LEFT_,
                    labelCssStyle:"vertical-align:top;", width: "30em"
                }
            ]
        }
    ];

    case1.items = case1Items;
    cases.push(case1);

    if(_tab2) {
        var case2 = {type:_CASE_,caseKey:_tab2,numCols:1,colSizes:["auto"],
            width:"100%", cellpadding:0,
            id:"cos_form_features_tab"};

        var case2Items = [
            {type:_ZAWIZ_TOP_GROUPER_,  label:ZaMsg.NAD_zimbraMajorFeature, id:"cos_form_features_major",
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraFeatureMailEnabled,
                        ZaCos.A_zimbraFeatureContactsEnabled,
                        ZaCos.A_zimbraFeatureCalendarEnabled,
                        ZaCos.A_zimbraFeatureTasksEnabled,
                        ZaCos.A_zimbraFeatureBriefcasesEnabled,
                        ZaCos.A_zimbraFeatureOptionsEnabled
                    ]]
                ],
                items:[
                    {ref:ZaCos.A_zimbraFeatureMailEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureMailEnabled,label:ZaMsg.LBL_zimbraFeatureMailEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureContactsEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureContactsEnabled,label:ZaMsg.LBL_zimbraFeatureContactsEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureCalendarEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureCalendarEnabled,label:ZaMsg.LBL_zimbraFeatureCalendarEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureTasksEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureTaskEnabled,label:ZaMsg.LBL_zimbraFeatureTaskEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                    //{ref:ZaCos.A_zimbraFeatureNotebookEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureNotebookEnabled,label:ZaMsg.LBL_zimbraFeatureNotebookEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureBriefcasesEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureBriefcasesEnabled,label:ZaMsg.LBL_zimbraFeatureBriefcasesEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureOptionsEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureOptionsEnabled,label:ZaMsg.LBL_zimbraFeatureOptionsEnabled,  trueValue:"TRUE", falseValue:"FALSE"}
                    //zimbraMobile from the extension
                ]
            },
            {type:_ZAWIZ_TOP_GROUPER_,  label:ZaMsg.NAD_zimbraGeneralFeature, id:"cos_form_features_general",
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraFeatureTaggingEnabled,
                        ZaCos.A_zimbraFeatureSharingEnabled,
                        ZaCos.A_zimbraFeatureChangePasswordEnabled,
                        ZaCos.A_zimbraFeatureSkinChangeEnabled,
                        ZaCos.A_zimbraFeatureManageZimlets,
                        ZaCos.A_zimbraFeatureHtmlComposeEnabled,
                        ZaCos.A_zimbraFeatureGalEnabled,
                        ZaCos.A_zimbraFeatureMAPIConnectorEnabled,
                        ZaCos.A_zimbraFeatureEwsEnabled,
                        ZaCos.A_zimbraFeatureTouchClientEnabled,
                        ZaCos.A_zimbraFeatureWebClientOfflineAccessEnabled,
                        ZaCos.A_zimbraFeatureGalAutoCompleteEnabled,
                        ZaCos.A_zimbraFeatureImportFolderEnabled,
                        ZaCos.A_zimbraFeatureExportFolderEnabled,
                        ZaCos.A_zimbraDumpsterEnabled,
                        ZaCos.A_zimbraDumpsterPurgeEnabled
                    ]]
                ],
                items:[
                    {ref:ZaCos.A_zimbraFeatureTaggingEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureTaggingEnabled,label:ZaMsg.LBL_zimbraFeatureTaggingEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureSharingEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureSharingEnabled,label:ZaMsg.LBL_zimbraFeatureSharingEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraExternalSharingEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraExternalSharingEnabled,label:ZaMsg.LBL_zimbraExternalSharingEnabled,trueValue:"TRUE", falseValue:"FALSE",
                        visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaCos.A_zimbraFeatureSharingEnabled, "TRUE"]], visibilityChangeEventSources:[ZaCos.A_zimbraFeatureSharingEnabled]
                    },
                    {ref:ZaCos.A_zimbraPublicSharingEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraPublicSharingEnabled,label:ZaMsg.LBL_zimbraPublicSharingEnabled,trueValue:"TRUE", falseValue:"FALSE",
                        visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaCos.A_zimbraFeatureSharingEnabled, "TRUE"]], visibilityChangeEventSources:[ZaCos.A_zimbraFeatureSharingEnabled]
                    },
                    {ref:ZaCos.A_zimbraFeatureChangePasswordEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureChangePasswordEnabled,label:ZaMsg.LBL_zimbraFeatureChangePasswordEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureSkinChangeEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureSkinChangeEnabled,label:ZaMsg.LBL_zimbraFeatureSkinChangeEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureManageZimlets, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureManageZimlets,label:ZaMsg.LBL_zimbraFeatureManageZimlets,  trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureHtmlComposeEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureHtmlComposeEnabled,label:ZaMsg.LBL_zimbraFeatureHtmlComposeEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    //{ref:ZaCos.A_zimbraFeatureShortcutAliasesEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureShortcutAliasesEnabled,label:ZaMsg.LBL_zimbraFeatureShortcutAliasesEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureGalEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureGalEnabled,label:ZaMsg.LBL_zimbraFeatureGalEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureMAPIConnectorEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureMAPIConnectorEnabled,label:ZaMsg.LBL_zimbraFeatureMAPIConnectorEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureEwsEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureEwsEnabled,label:ZaMsg.LBL_zimbraFeatureEwsEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureTouchClientEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureTouchClientEnabled,label:ZaMsg.LBL_zimbraFeatureTouchClientEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureWebClientOfflineAccessEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureWebClientOfflineAccessEnabled,label:ZaMsg.LBL_zimbraFeatureWebClientOfflineAccessEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureGalAutoCompleteEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureGalAutoCompleteEnabled,label:ZaMsg.LBL_zimbraFeatureGalAutoCompleteEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureImportFolderEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureImportFolderEnabled,label:ZaMsg.LBL_zimbraFeatureImportFolderEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureExportFolderEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureExportFolderEnabled,label:ZaMsg.LBL_zimbraFeatureExportFolderEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraDumpsterEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.MSG_zimbraDumpsterEnabled,label:ZaMsg.LBL_zimbraDumpsterEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraDumpsterPurgeEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.MSG_zimbraDumpsterPurgeEnabled,label:ZaMsg.LBL_zimbraDumpsterPurgeEnabled, trueValue:"TRUE", falseValue:"FALSE",
                        visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaCos.A_zimbraDumpsterEnabled, "TRUE"]], visibilityChangeEventSources:[ZaCos.A_zimbraDumpsterEnabled]
                    }
                ]
            },
            {type:_ZAWIZ_TOP_GROUPER_,  label:ZaMsg.NAD_zimbraMailFeature, id:"cos_form_features_mail",
                enableDisableChecks:[ZaNewCosXWizard.isMailFeatureEnabled],
                enableDisableChangeEventSources:[ZaCos.A_zimbraFeatureMailEnabled],
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraFeatureMailPriorityEnabled,
                        ZaCos.A_zimbraFeatureFlaggingEnabled,
                        ZaCos.A_zimbraImapEnabled,
                        ZaCos.A_zimbraPop3Enabled,
                        ZaCos.A_zimbraFeatureWebClientEnabled,
                        ZaCos.A_zimbraFeatureImapDataSourceEnabled,
                        ZaCos.A_zimbraFeaturePop3DataSourceEnabled,
                        ZaCos.A_zimbraFeatureMailForwardingEnabled,
                        ZaCos.A_zimbraFeatureMailSendLaterEnabled,
                        ZaCos.A_zimbraFeatureConversationsEnabled,
                        ZaCos.A_zimbraFeatureFiltersEnabled,
                        ZaCos.A_zimbraFeatureOutOfOfficeReplyEnabled,
                        ZaCos.A_zimbraFeatureNewMailNotificationEnabled,
                        ZaCos.A_zimbraFeatureIdentitiesEnabled,
                        ZaCos.A_zimbraFeatureReadReceiptsEnabled
                    ]]
                ],
                items:[
                        {ref:ZaCos.A_zimbraFeatureMailPriorityEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureMailPriorityEnabled,label:ZaMsg.LBL_zimbraFeatureMailPriorityEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureFlaggingEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureFlaggingEnabled,label:ZaMsg.LBL_zimbraFeatureFlaggingEnabled,  trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraImapEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraImapEnabled,label:ZaMsg.LBL_zimbraImapEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraPop3Enabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraPop3Enabled,label:ZaMsg.LBL_zimbraPop3Enabled,trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureWebClientEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureWebClientEnabled,label:ZaMsg.LBL_zimbraFeatureWebClientEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureImapDataSourceEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraExternalImapEnabled,label:ZaMsg.LBL_zimbraExternalImapEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeaturePop3DataSourceEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraExternalPop3Enabled,label:ZaMsg.LBL_zimbraExternalPop3Enabled, trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureMailForwardingEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureMailForwardingEnabled,label:ZaMsg.LBL_zimbraFeatureMailForwardingEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureMailSendLaterEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureMailSendLaterEnabled, label:ZaMsg.LBL_zimbraFeatureMailSendLaterEnabled, trueValue:"TRUE", falseValue:"FALSE"},
            {ref:ZaCos.A_zimbraFeatureConversationsEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureConversationsEnabled,label:ZaMsg.LBL_zimbraFeatureConversationsEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureFiltersEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureFiltersEnabled,label:ZaMsg.LBL_zimbraFeatureFiltersEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureOutOfOfficeReplyEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureOutOfOfficeReplyEnabled,label:ZaMsg.LBL_zimbraFeatureOutOfOfficeReplyEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureNewMailNotificationEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureNewMailNotificationEnabled,label:ZaMsg.LBL_zimbraFeatureNewMailNotificationEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureIdentitiesEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureIdentitiesEnabled,label:ZaMsg.LBL_zimbraFeatureIdentitiesEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                        {ref:ZaCos.A_zimbraFeatureReadReceiptsEnabled, type:_WIZ_CHECKBOX_,label:ZaMsg.LBL_zimbraFeatureReadReceiptsEnabled,trueValue:"TRUE", falseValue:"FALSE"}

                ]
            },
            {
                type: _ZAWIZ_TOP_GROUPER_,
                label: ZaMsg.NAD_zimbraContactFeature,
                id: "cos_form_features_contact",
                enableDisableChecks: [ZaCosXFormView.isContactsFeatureEnabled],
                enableDisableChangeEventSources: [ZaCos.A_zimbraFeatureContactsEnabled],
                visibilityChecks: [
                    [
                        ZATopGrouper_XFormItem.isGroupVisible,
                        [
                            ZaCos.A_zimbraFeatureDistributionListFolderEnabled
                        ]
                    ]
                ],
                items: [
                    {
                        ref: ZaCos.A_zimbraFeatureDistributionListFolderEnabled,
                        type: _WIZ_CHECKBOX_,
                        msgName: ZaMsg.MSG_zimbraFeatureDistributionListFolderEnabled,
                        label: ZaMsg.LBL_zimbraFeatureDistributionListFolderEnabled,
                        trueValue: "TRUE",
                        falseValue: "FALSE"
                    }
                ]
            },
            {type:_ZAWIZ_TOP_GROUPER_,  label:ZaMsg.NAD_zimbraCalendarFeature, id:"cos_form_features_calendar",
                enableDisableChecks:[ZaNewCosXWizard.isCalendarFeatureEnabled],
                enableDisableChangeEventSources:[ZaCos.A_zimbraFeatureCalendarEnabled],
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraFeatureGroupCalendarEnabled,
                        //ZaCos.A_zimbraFeatureFreeBusyViewEnabled,
                        ZaCos.A_zimbraFeatureCalendarReminderDeviceEmailEnabled
                    ]]
                ],
                items:[
                    {ref:ZaCos.A_zimbraFeatureGroupCalendarEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureGroupCalendarEnabled,label:ZaMsg.LBL_zimbraFeatureGroupCalendarEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    //{ref:ZaCos.A_zimbraFeatureFreeBusyViewEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureFreeBusyViewEnabled, label:ZaMsg.LBL_zimbraFeatureFreeBusyViewEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureCalendarReminderDeviceEmailEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureCalendarReminderDeviceEmailEnabled, label:ZaMsg.LBL_zimbraFeatureCalendarReminderDeviceEmailEnabled, trueValue:"TRUE", falseValue:"FALSE"}
                ]
            },
            {type:_ZAWIZ_TOP_GROUPER_,  label:ZaMsg.NAD_zimbraSearchFeature, id:"cos_form_features_search",
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraFeatureAdvancedSearchEnabled,
                        ZaCos.A_zimbraFeatureSavedSearchesEnabled,
                        ZaCos.A_zimbraFeatureInitialSearchPreferenceEnabled,
                        ZaCos.A_zimbraFeaturePeopleSearchEnabled
                    ]]
                ],
                items:[
                    {ref:ZaCos.A_zimbraFeatureAdvancedSearchEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureAdvancedSearchEnabled,label:ZaMsg.LBL_zimbraFeatureAdvancedSearchEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureSavedSearchesEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureSavedSearchesEnabled,label:ZaMsg.LBL_zimbraFeatureSavedSearchesEnabled,trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeatureInitialSearchPreferenceEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureInitialSearchPreferenceEnabled,label:ZaMsg.LBL_zimbraFeatureInitialSearchPreferenceEnabled, trueValue:"TRUE", falseValue:"FALSE"},
                    {ref:ZaCos.A_zimbraFeaturePeopleSearchEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeaturePeopleSearchEnabled,label:ZaMsg.LBL_zimbraFeaturePeopleSearchEnabled, trueValue:"TRUE", falseValue:"FALSE"}
                ]
            },
            {type:_ZAWIZ_TOP_GROUPER_,  label:ZaMsg.NAD_zimbraSMIMEFeature, id:"cos_form_features_smime",
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraFeatureSMIMEEnabled
                    ]]
                ],
                items:[
                    {ref:ZaCos.A_zimbraFeatureSMIMEEnabled, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraFeatureSMIMEEnabled,label:ZaMsg.LBL_zimbraFeatureSMIMEEnabled, trueValue:"TRUE", falseValue:"FALSE"}
                ]
            }


        ];

        case2.items = case2Items;
        cases.push(case2);
    }

    if(_tab3) {
        var case3 = {type:_CASE_,caseKey:_tab3, id:"cos_for_prefs_tab",
            width:"100%", cellpadding:0,
            numCols:1};
        var case3Items = [
            {type:_ZAWIZ_TOP_GROUPER_, id:"account_prefs_general",
                label:ZaMsg.NAD_GeneralOptions,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraPrefClientType,
                        ZaCos.A_zimbraPrefShowSearchString,
                        ZaCos.A_zimbraPrefMailInitialSearch,
                        ZaCos.A_zimbraPrefImapSearchFoldersEnabled,
                        ZaCos.A_zimbraPrefUseKeyboardShortcuts,
                        ZaCos.A_zimbraPrefWarnOnExit,
                        ZaCos.A_zimbraPrefAdminConsoleWarnOnExit,
                        ZaCos.A_zimbraPrefShowSelectionCheckbox,
                        //ZaCos.A_zimbraPrefIMAutoLogin,
                        ZaCos.A_zimbraJunkMessagesIndexingEnabled,
                        ZaCos.A_zimbraPrefLocale
                    ]]
                ],
                items :[
                {ref:ZaCos.A_zimbraPrefClientType, type:_OSELECT1_, msgName:ZaMsg.MSG_zimbraPrefClientType,
                    label:ZaMsg.LBL_zimbraPrefClientType, labelLocation:_LEFT_
                },
                {ref:ZaCos.A_zimbraPrefShowSearchString, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefShowSearchString,
                    label:ZaMsg.LBL_zimbraPrefShowSearchString, trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefMailInitialSearch, type:_TEXTFIELD_, cssClass:"admin_xform_name_input",
                    msgName:ZaMsg.LBL_zimbraPrefMailInitialSearch,label:ZaMsg.LBL_zimbraPrefMailInitialSearch,
                    labelLocation:_LEFT_
                },
                {ref:ZaCos.A_zimbraPrefImapSearchFoldersEnabled, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefImapSearchFoldersEnabled,
                    label:ZaMsg.LBL_zimbraPrefImapSearchFoldersEnabled, trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefUseKeyboardShortcuts, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefUseKeyboardShortcuts,label:ZaMsg.LBL_zimbraPrefUseKeyboardShortcuts,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefWarnOnExit, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefWarnOnExit,label:ZaMsg.LBL_zimbraPrefWarnOnExit,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefAdminConsoleWarnOnExit, type:_WIZ_CHECKBOX_,
                    msgName:ZabMsg.LBL_zimbraPrefAdminConsoleWarnOnExit,label:ZabMsg.LBL_zimbraPrefAdminConsoleWarnOnExit,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefShowSelectionCheckbox, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefShowSelectionCheckbox,label:ZaMsg.LBL_zimbraPrefShowSelectionCheckbox,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraJunkMessagesIndexingEnabled, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraJunkMessagesIndexingEnabled,
                    label:ZaMsg.LBL_zimbraJunkMessagesIndexingEnabled,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefLocale, type:_OSELECT1_,
                     msgName:ZaMsg.LBL_zimbraPrefLocale,label:ZaMsg.LBL_zimbraPrefLocale,
                     labelLocation:_LEFT_,
                     labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true,
                     choices: ZaSettings.getLocaleChoices()
                }
            ]},
            {type:_ZAWIZ_TOP_GROUPER_, id:"cos_prefs_standard_client",label:ZaMsg.NAD_MailOptionsStandardClient,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraMaxMailItemsPerPage,
                        ZaCos.A_zimbraPrefMailItemsPerPage
                    ]]
                ],
                items :[
                    {ref:ZaCos.A_zimbraMaxMailItemsPerPage, type:_OSELECT1_, msgName:ZaMsg.MSG_zimbraMaxMailItemsPerPage,
                        label:ZaMsg.LBL_zimbraMaxMailItemsPerPage, labelLocation:_LEFT_, choices:[10,25,50,100,250,500,1000], editable:true,
                        inputSize:4
                    },
                    {ref:ZaCos.A_zimbraPrefMailItemsPerPage, type:_OSELECT1_, msgName:ZaMsg.MSG_zimbraPrefMailItemsPerPage,
                        label:ZaMsg.LBL_zimbraPrefMailItemsPerPage, labelLocation:_LEFT_
                    }
                ]
            },
            {type:_ZAWIZ_TOP_GROUPER_, id:"cos_prefs_mail_general",
                label:ZaMsg.NAD_MailOptions,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraPrefMessageViewHtmlPreferred,
                        ZaCos.A_zimbraPrefDisplayExternalImages,
                        ZaCos.A_zimbraPrefGroupMailBy,
                        ZaCos.A_zimbraPrefMailDefaultCharset,
                        ZaCos.A_zimbraPrefCalendarToasterEnabled,
                                                ZaCos.A_zimbraPrefItemsPerVirtualPage
                    ]]
                ],
                items :[
                {ref:ZaCos.A_zimbraPrefMessageViewHtmlPreferred, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefMessageViewHtmlPreferred,
                    label:ZaMsg.LBL_zimbraPrefMessageViewHtmlPreferred,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefDisplayExternalImages, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefDisplayExternalImages,
                    label:ZaMsg.LBL_zimbraPrefDisplayExternalImages,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefGroupMailBy, type:_OSELECT1_, msgName:ZaMsg.LBL_zimbraPrefGroupMailBy,
                    label:ZaMsg.LBL_zimbraPrefGroupMailBy, labelLocation:_LEFT_
                },
                {ref:ZaCos.A_zimbraPrefMailDefaultCharset, type:_OSELECT1_,
                     msgName:ZaMsg.LBL_zimbraPrefMailDefaultCharset,label:ZaMsg.LBL_zimbraPrefMailDefaultCharset,
                     labelLocation:_LEFT_,
                     labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefMailToasterEnabled, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefMailToasterEnabled,
                    label:ZaMsg.LBL_zimbraPrefMailToasterEnabled,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefMessageIdDedupingEnabled, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefMessageIdDedupingEnabled,
                    label:ZaMsg.LBL_zimbraPrefMessageIdDedupingEnabled,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefItemsPerVirtualPage,
                type:_TEXTFIELD_, colSizes:["200px","*"],colSpan:2,
                msgName:ZaMsg.LBL_zimbraPrefItemsPerVirtualPage,
                label:ZaMsg.LBL_zimbraPrefItemsPerVirtualPage,
                labelLocation:_LEFT_
                }

            ]},
            {type:_ZAWIZ_TOP_GROUPER_, id:"cos_prefs_mail_receiving",label:ZaMsg.NAD_MailOptionsReceiving,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraPrefMailSoundsEnabled,
                        ZaCos.A_zimbraPrefMailFlashIcon,
                        ZaCos.A_zimbraPrefMailFlashTitle,
                        ZaCos.A_zimbraPrefMailPollingInterval,
                        ZaCos.A_zimbraMailMinPollingInterval,
                        ZaCos.A_zimbraPrefOutOfOfficeCacheDuration,
                        ZaCos.A_zimbraPrefMailSendReadReceipts
                    ]]
                ],
                items :[
                {ref:ZaCos.A_zimbraPrefMailSoundsEnabled,
                    type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_playSound,
                    label:ZaMsg.LBL_playSound,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefMailFlashIcon,
                    type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_flashIcon,
                    label:ZaMsg.LBL_flashIcon,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefMailFlashTitle,
                    type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_flashTitle,
                    label:ZaMsg.LBL_flashTitle,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefMailPollingInterval, type:_OSELECT1_,
                    msgName:ZaMsg.MSG_zimbraPrefMailPollingInterval,
                    label:ZaMsg.LBL_zimbraPrefMailPollingInterval, labelLocation:_LEFT_,
                    onChange:ZaNewCosXWizard.validatePollingInterval,
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraMailMinPollingInterval, type:_LIFETIME_,
                    msgName:ZaMsg.MSG_zimbraMailMinPollingInterval,
                    label:ZaMsg.LBL_zimbraMailMinPollingInterval, labelLocation:_LEFT_,
                    onChange:ZaNewCosXWizard.validatePollingInterval,
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefOutOfOfficeCacheDuration, type:_LIFETIME_,
                    msgName:ZaMsg.MSG_zimbraPrefOutOfOfficeCacheDuration,
                    label:ZaMsg.LBL_zimbraPrefOutOfOfficeCacheDuration, labelLocation:_LEFT_,
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefMailSendReadReceipts, type:_OSELECT1_, label:ZaMsg.LBL_zimbraPrefMailSendReadReceipts,labelLocation:_LEFT_,nowrap:false,labelWrap:true}
            ]},
            {type:_ZAWIZ_TOP_GROUPER_, id:"cos_prefs_mail_sending",borderCssClass:"LowPaddedTopGrouperBorder",label:ZaMsg.NAD_MailOptionsSending,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraPrefSaveToSent,
                        ZaCos.A_zimbraAllowAnyFromAddress
                    ]]
                ],
                items :[
                {ref:ZaCos.A_zimbraPrefSaveToSent, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraPrefSaveToSent,label:ZaMsg.LBL_zimbraPrefSaveToSent,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraAllowAnyFromAddress, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraAllowAnyFromAddress,
                    label:ZaMsg.LBL_zimbraAllowAnyFromAddress,
                    trueValue:"TRUE", falseValue:"FALSE"
                }
            ]},
            {type:_ZAWIZ_TOP_GROUPER_, id:"cos_prefs_mail_sending",borderCssClass:"LowPaddedTopGrouperBorder",label:ZaMsg.NAD_MailOptionsComposing,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraPrefComposeInNewWindow,
                        ZaCos.A_zimbraPrefComposeFormat,
                        ZaCos.A_zimbraPrefHtmlEditorDefaultFontFamily,
                        ZaCos.A_zimbraPrefHtmlEditorDefaultFontSize,
                        ZaCos.A_zimbraPrefHtmlEditorDefaultFontColor,
                        ZaCos.A_zimbraPrefForwardReplyInOriginalFormat,
                        ZaCos.A_zimbraPrefMandatorySpellCheckEnabled,
                        ZaCos.A_zimbraMailSignatureMaxLength,
                        ZaCos.A_zimbraPrefAutoSaveDraftInterval

                    ]]
                ],
                items :[
                {ref:ZaCos.A_zimbraPrefComposeInNewWindow, type:_WIZ_CHECKBOX_, msgName:ZaMsg.LBL_zimbraPrefComposeInNewWindow,
                    label:ZaMsg.LBL_zimbraPrefComposeInNewWindow, trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefComposeFormat, type:_OSELECT1_, msgName:ZaMsg.LBL_zimbraPrefComposeFormat,label:ZaMsg.LBL_zimbraPrefComposeFormat, labelLocation:_LEFT_},
                {ref:ZaCos.A_zimbraPrefHtmlEditorDefaultFontFamily, type:_OSELECT1_, msgName:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontFamily,
                    label:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontFamily, labelLocation:_LEFT_
                },
                {ref:ZaCos.A_zimbraPrefHtmlEditorDefaultFontSize, type:_OSELECT1_, msgName:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontSize,
                    label:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontSize, labelLocation:_LEFT_
                },
                {ref:ZaCos.A_zimbraPrefHtmlEditorDefaultFontColor, type:_DWT_COLORPICKER_, msgName:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontColor,
                    height: "25px",
                    label:ZaMsg.LBL_zimbraPrefHtmlEditorDefaultFontColor, labelLocation:_LEFT_
                },
                {ref:ZaCos.A_zimbraPrefForwardReplyInOriginalFormat, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefForwardReplyInOriginalFormat,
                    label:ZaMsg.LBL_zimbraPrefForwardReplyInOriginalFormat, trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefMandatorySpellCheckEnabled, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefMandatorySpellCheckEnabled,
                    label:ZaMsg.LBL_zimbraPrefMandatorySpellCheckEnabled,
                    trueValue:"TRUE", falseValue:"FALSE"
                },
               /* {ref:ZaCos.A_zimbraPrefMailSignatureStyle, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefMailSignatureStyle,
                    label:ZaMsg.LBL_zimbraPrefMailSignatureStyle,
                    trueValue:"internet", falseValue:"outlook"
                },*/
                {ref:ZaCos.A_zimbraMailSignatureMaxLength, type:_TEXTFIELD_,
                    msgName:ZaMsg.LBL_zimbraMailSignatureMaxLength,
                    label:ZaMsg.LBL_zimbraMailSignatureMaxLength, labelLocation:_LEFT_,
                    cssClass:"admin_xform_number_input"},
                {ref:ZaCos.A_zimbraPrefAutoSaveDraftInterval, type:_LIFETIME_,
                    msgName:ZaMsg.MSG_zimbraPrefAutoSaveDraftInterval,
                    label:ZaMsg.LBL_zimbraPrefAutoSaveDraftInterval, labelLocation:_LEFT_,
                    onChange:ZaNewCosXWizard.validatePollingInterval,
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                }
            ]},
            {type:_ZAWIZ_TOP_GROUPER_, id:"cos_prefs_pop_imap",
                label: ZaMsg.NAD_PopImapOptions,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraPrefImapEnabled,
                        ZaCos.A_zimbraPrefPop3Enabled
                    ]]
                ],
                items :[
                {ref:ZaCos.A_zimbraPrefImapEnabled, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefImapEnabled,
                    label:ZaMsg.LBL_zimbraPrefImapEnabled, trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefPop3Enabled, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefPop3Enabled,
                    label:ZaMsg.LBL_zimbraPrefPop3Enabled, trueValue:"TRUE", falseValue:"FALSE"
                }
            ]},
            {type:_ZAWIZ_TOP_GROUPER_, id:"cos_prefs_contacts_general",
                label: ZaMsg.NAD_ContactsOptions,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraPrefAutoAddAddressEnabled,
                        ZaCos.A_zimbraPrefGalAutoCompleteEnabled
                    ]]
                ],
                items :[
                {ref:ZaCos.A_zimbraPrefAutoAddAddressEnabled, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefAutoAddAddressEnabled,
                    label:ZaMsg.LBL_zimbraPrefAutoAddAddressEnabled, trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefGalAutoCompleteEnabled, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefGalAutoCompleteEnabled,
                    label:ZaMsg.LBL_zimbraPrefGalAutoCompleteEnabled, trueValue:"TRUE", falseValue:"FALSE"
                }
            ]},
            {type:_ZAWIZ_TOP_GROUPER_, id:"cos_prefs_calendar_general",
                label:ZaMsg.NAD_CalendarOptions,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraPrefTimeZoneId,
                        ZaCos.A_zimbraPrefCalendarApptReminderWarningTime,
                        ZaCos.A_zimbraPrefCalendarInitialView,
                        ZaCos.A_zimbraPrefCalendarFirstDayOfWeek,
                        ZaCos.A_zimbraPrefCalendarApptVisibility,
                        ZaCos.A_zimbraPrefAppleIcalDelegationEnabled,
                        ZaCos.A_zimbraPrefCalendarShowPastDueReminders,
                        ZaCos.A_zimbraPrefCalendarToasterEnabled,
                        ZaCos.A_zimbraPrefCalendarAllowCancelEmailToSelf,
                        ZaCos.A_zimbraPrefCalendarAllowPublishMethodInvite,
                        ZaCos.A_zimbraPrefCalendarAllowForwardedInvite,
                        ZaCos.A_zimbraPrefCalendarReminderFlashTitle,
                        ZaCos.A_zimbraPrefCalendarReminderSoundsEnabled,
                        ZaCos.A_zimbraPrefCalendarSendInviteDeniedAutoReply,
                        ZaCos.A_zimbraPrefCalendarAutoAddInvites,
                        ZaCos.A_zimbraPrefCalendarNotifyDelegatedChanges,
                        ZaCos.A_zimbraPrefCalendarAlwaysShowMiniCal,
                        ZaCos.A_zimbraPrefCalendarUseQuickAdd,
                        ZaCos.A_zimbraPrefUseTimeZoneListInCalendar
                    ]]
                ],
                items :[
                {ref:ZaCos.A_zimbraPrefTimeZoneId, type:_OSELECT1_,
                     msgName:ZaMsg.MSG_zimbraPrefTimeZoneId,label:ZaMsg.LBL_zimbraPrefTimeZoneId,
                     labelLocation:_LEFT_,
                     labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarApptReminderWarningTime, type:_OSELECT1_,
                     msgName:ZaMsg.MSG_zimbraPrefCalendarApptReminderWarningTime,
                     label:ZaMsg.LBL_zimbraPrefCalendarApptReminderWarningTime,
                     labelLocation:_LEFT_,
                     labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarInitialView, type:_OSELECT1_, msgName:ZaMsg.MSG_zimbraPrefCalendarInitialView,
                    label:ZaMsg.LBL_zimbraPrefCalendarInitialView, labelLocation:_LEFT_
                },
                {ref:ZaCos.A_zimbraPrefCalendarFirstDayOfWeek, type:_OSELECT1_,
                    msgName:ZaMsg.LBL_zimbraPrefCalendarFirstDayOfWeek,
                    label:ZaMsg.LBL_zimbraPrefCalendarFirstDayOfWeek, labelLocation:_LEFT_,
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarApptVisibility, type:_OSELECT1_,
                    msgName:ZaMsg.LBL_zimbraPrefCalendarApptVisibility,
                    label:ZaMsg.LBL_zimbraPrefCalendarApptVisibility, labelLocation:_LEFT_,
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefAppleIcalDelegationEnabled,
                    type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefAppleIcalDelegationEnabled,
                    label:ZaMsg.LBL_zimbraPrefAppleIcalDelegationEnabled,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarShowPastDueReminders,
                    type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefCalendarShowPastDueReminders,
                    label:ZaMsg.LBL_zimbraPrefCalendarShowPastDueReminders,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarToasterEnabled,
                    type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefCalendarToasterEnabled,
                    label:ZaMsg.LBL_zimbraPrefCalendarToasterEnabled,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarAllowCancelEmailToSelf,
                    type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefCalendarAllowCancelEmailToSelf,
                    label:ZaMsg.LBL_zimbraPrefCalendarAllowCancelEmailToSelf,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarAllowPublishMethodInvite,
                    type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefCalendarAllowPublishMethodInvite,
                    label:ZaMsg.LBL_zimbraPrefCalendarAllowPublishMethodInvite,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarAllowForwardedInvite,
                    type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefCalendarAllowForwardedInvite,
                    label:ZaMsg.LBL_zimbraPrefCalendarAllowForwardedInvite,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarReminderFlashTitle,
                    type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefCalendarReminderFlashTitle,
                    label:ZaMsg.LBL_zimbraPrefCalendarReminderFlashTitle,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarReminderSoundsEnabled,
                    type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefCalendarReminderSoundsEnabled,
                    label:ZaMsg.LBL_zimbraPrefCalendarReminderSoundsEnabled,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarSendInviteDeniedAutoReply, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.MSG_zimbraPrefCalendarSendInviteDeniedAutoReply,
                    label:ZaMsg.LBL_zimbraPrefCalendarSendInviteDeniedAutoReply,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",
                    nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarAutoAddInvites, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefCalendarAutoAddInvites,label:ZaMsg.LBL_zimbraPrefCalendarAutoAddInvites,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarNotifyDelegatedChanges, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefCalendarNotifyDelegatedChanges,label:ZaMsg.LBL_zimbraPrefCalendarNotifyDelegatedChanges,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarAlwaysShowMiniCal, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefCalendarAlwaysShowMiniCal,label:ZaMsg.LBL_zimbraPrefCalendarAlwaysShowMiniCal,
                    trueValue:"TRUE", falseValue:"FALSE",
                    labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                },
                {ref:ZaCos.A_zimbraPrefCalendarUseQuickAdd, type:_WIZ_CHECKBOX_, msgName:ZaMsg.NAD_useQuickAdd,
                    label:ZaMsg.LBL_zimbraPrefCalendarUseQuickAdd, trueValue:"TRUE", falseValue:"FALSE"
                },
                {ref:ZaCos.A_zimbraPrefUseTimeZoneListInCalendar, type:_WIZ_CHECKBOX_,
                    msgName:ZaMsg.LBL_zimbraPrefUseTimeZoneListInCalendar,
                    label:ZaMsg.LBL_zimbraPrefUseTimeZoneListInCalendar, trueValue:"TRUE", falseValue:"FALSE"
                }
            ]}
        ];

        case3.items = case3Items;
        cases.push(case3);
    }

    if(_tab4) {
        var case4 = {type:_CASE_, numCols:1, caseKey:_tab4};
        var case4Items = [
            {type:_GROUP_,numCols:2,colSizes:["275","auto"],items:[                            {
                ref:ZaCos.A_zimbraPrefSkin, type:_OSELECT1_,
                msgName:ZaMsg.LBL_zimbraPrefSkin,label:ZaMsg.LBL_zimbraPrefSkin, labelLocation:_LEFT_,choices:ZaNewCosXWizard.themeChoices,
                visibilityChecks:[ZaNewCosXWizard.gotSkins]
            }]},
            {type:_GROUP_,
                items:[
                    {type:_OUTPUT_,ref:ZaCos.A_zimbraPrefSkin,label:ZaMsg.LBL_zimbraPrefSkin, labelLocation:_LEFT_,
                        visibilityChecks:[ZaNewCosXWizard.gotNoSkins]
                    }
                ]
            },
            {type:_GROUP_, numCols:1,colSizes:["auto"],
                items: [
                    {type:_ZASELECT_RADIO_,
                        selectRef:ZaCos.A_zimbraAvailableSkin,
                        ref:ZaCos.A_zimbraAvailableSkin,
                        choices:ZaNewCosXWizard.themeChoices,
                        visibilityChecks:[Case_XFormItem.prototype.isCurrentTab, ZaNewCosXWizard.gotSkins],
                        visibilityChangeEventSources:[ZaModel.currentStep],
                        caseKey:_tab4, caseVarRef:ZaModel.currentStep,
                        radioBoxLabel1:ZaMsg.COS_DontLimitThemes,
                        radioBoxLabel2:ZaMsg.COS_LimitThemesTo
                    },
                    {type:_DWT_ALERT_,style: DwtAlert.WARNING, iconVisible:true,
                        visibilityChecks:[ZaNewCosXWizard.gotNoSkins],
                        value:ZaMsg.ERROR_CANNOT_FIND_SKINS_FOR_COS
                    },
                    {type:_DWT_ALERT_,style: DwtAlert.WARNING, iconVisible:true,
                        visibilityChecks:[ZaCosXFormView.gotNoSkins, [function(){return !ZaZimbraAdmin.isGlobalAdmin()}]],
                        value:ZaMsg.ERROR_CANNOT_FIND_SKINS_FOR_COS_OR_NO_PERM
                    }
                ]
            }
        ];

        case4.items=case4Items;
        cases.push(case4);
    }

    if(_tab5) {
        var case5 = {type:_CASE_, caseKey:_tab5};
        var case5Items = [
            {type:_GROUP_, numCols:1,colSizes:["auto"],
                items: [
                    {type: _OUTPUT_, value: ZaMsg.COS_LimitZimletsTo,cssStyle:"margin-left:0;" },
                    {type:_ZA_ZIMLET_SELECT_COMBO_,
                        selectRef:ZaCos.A_zimbraZimletAvailableZimlets,
                        ref:ZaCos.A_zimbraZimletAvailableZimlets,
                        choices:ZaNewCosXWizard.zimletChoices,
                       visibilityChecks:[Case_XFormItem.prototype.isCurrentTab],
                        visibilityChangeEventSources:[ZaModel.currentStep],
                        caseKey:_tab5, caseVarRef:ZaModel.currentStep,
                        selectLabel:"",selectLabelLocation:_NONE_
                    }
                ]
            }
        ];

        case5.items = case5Items;
        cases.push(case5);
    }

    if(_tab6) {
        var case6 = {type:_CASE_, numCols:1,caseKey:_tab6};
        var case6Items = [
            {type:_GROUP_, numCols:1,colSizes:["auto"],
                items: [
                    {type:_ZASELECT_RADIO_,
                        selectRef:ZaCos.A_zimbraMailHostPool,
                        ref:ZaCos.A_zimbraMailHostPool,
                        choices:ZaApp.getInstance().getServerIdListChoices(),
                        visibilityChecks:[Case_XFormItem.prototype.isCurrentTab],
                        visibilityChangeEventSources:[ZaModel.currentStep],
                        caseKey:_tab6, caseVarRef:ZaModel.currentStep,
                        radioBoxLabel1:ZaMsg.ServerPool_Donotlimit,
                        radioBoxLabel2:ZaMsg.COS_LimitServersTo
                    }
                ]
            }
        ];

        case6.items = case6Items;
        cases.push(case6);
    }

    if(_tab7) {
        var case7 = {type:_CASE_, numCols:1, colSizes:["auto"], caseKey:_tab7,
             width:"100%", cellpadding:0,
            id:"cos_form_advanced_tab"};
        var case7Items = [
            { type: _DWT_ALERT_,
              style: DwtAlert.WARNING,
          iconVisible: false,
          content: ZaMsg.NAD_ZERO_UNLIMETED
        },      
            {type:_ZAWIZ_TOP_GROUPER_, id:"cos_attachment_settings",
                label:ZaMsg.NAD_AttachmentsGrouper,visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                                                      [ZaCos.A_zimbraAttachmentsBlocked]]],
                items :[
                    {ref:ZaCos.A_zimbraAttachmentsBlocked, type:_WIZ_CHECKBOX_,  msgName:ZaMsg.NAD_RemoveAllAttachments,label:ZaMsg.NAD_RemoveAllAttachments, labelLocation:_LEFT_, trueValue:"TRUE", falseValue:"FALSE",labelCssClass:"xform_label",  align:_LEFT_}
                ]
            },
            {type:_ZAWIZ_TOP_GROUPER_, id:"cos_quota_settings",
                label:ZaMsg.NAD_QuotaGrouper,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraMailForwardingAddressMaxLength,
                        ZaCos.A_zimbraMailForwardingAddressMaxNumAddrs,
                        ZaCos.A_zimbraMailQuota,
                        ZaCos.A_zimbraContactMaxNumEntries,
                        ZaCos.A_zimbraQuotaWarnPercent,
                        ZaCos.A_zimbraQuotaWarnInterval,
                        ZaCos.A_zimbraQuotaWarnMessage
                    ]]
                ],
                items: [
                    {ref:ZaCos.A_zimbraMailForwardingAddressMaxLength, type:_TEXTFIELD_, 
                        msgName:ZaMsg.MSG_zimbraMailForwardingAddressMaxLength,
                        label:ZaMsg.LBL_zimbraMailForwardingAddressMaxLength, 
                        labelLocation:_LEFT_, 
                        cssClass:"admin_xform_number_input"
                    },
                    {ref:ZaCos.A_zimbraMailForwardingAddressMaxNumAddrs, type:_TEXTFIELD_, 
                        msgName:ZaMsg.MSG_zimbraMailForwardingAddressMaxNumAddrs,
                        label:ZaMsg.LBL_zimbraMailForwardingAddressMaxNumAddrs, 
                        labelLocation:_LEFT_, 
                        cssClass:"admin_xform_number_input"
                    },                
                    {ref:ZaCos.A_zimbraMailQuota, type:_TEXTFIELD_, 
                        msgName:ZaMsg.MSG_zimbraMailQuota,
                        label:ZaMsg.LBL_zimbraMailQuota, labelLocation:_LEFT_, cssClass:"admin_xform_number_input"
                    },
                    {ref:ZaCos.A_zimbraContactMaxNumEntries, type:_TEXTFIELD_, 
                        msgName:ZaMsg.MSG_zimbraContactMaxNumEntries,
                        label:ZaMsg.LBL_zimbraContactMaxNumEntries, 
                        labelLocation:_LEFT_, 
                        cssClass:"admin_xform_number_input"
                    },
                    {ref:ZaCos.A_zimbraQuotaWarnPercent, type:_INPUT_, msgName:ZaMsg.MSG_zimbraQuotaWarnPercent,
                        label:ZaMsg.LBL_zimbraQuotaWarnPercent, labelLocation:_LEFT_, cssClass:"admin_xform_number_input"
                    },
                    {ref:ZaCos.A_zimbraQuotaWarnInterval, type:_LIFETIME_, msgName:ZaMsg.MSG_zimbraQuotaWarnInterval,
                        label:ZaMsg.LBL_zimbraQuotaWarnInterval, labelLocation:_LEFT_
                    },
                    {ref:ZaCos.A_zimbraQuotaWarnMessage, type:_TEXTAREA_, msgName:ZaMsg.MSG_zimbraQuotaWarnMessage,
                        label:ZaMsg.LBL_zimbraQuotaWarnMessage, labelLocation:_LEFT_, labelCssStyle:"vertical-align:top;",width: "30em"
                    }
                ]
            },

            {type:_ZAWIZ_TOP_GROUPER_, id:"cos_datasourcepolling_settings",
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraDataSourceMinPollingInterval,
                        ZaCos.A_zimbraDataSourcePop3PollingInterval,
                        ZaCos.A_zimbraDataSourceImapPollingInterval,
                        ZaCos.A_zimbraDataSourceCalendarPollingInterval,
                        ZaCos.A_zimbraDataSourceRssPollingInterval,
                        ZaCos.A_zimbraDataSourceCaldavPollingInterval
                    ]]
                ],
                label:ZaMsg.NAD_DataSourcePolling,
                items: [
                    {ref:ZaCos.A_zimbraDataSourceMinPollingInterval, type:_LIFETIME_,
                        msgName:ZaMsg.MSG_zimbraDataSourceMinPollingInterval,
                        label:ZaMsg.LBL_zimbraDataSourceMinPollingInterval, labelLocation:_LEFT_,
                        onChange:ZaNewCosXWizard.validatePollingInterval,
                        labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                    },
                    {ref:ZaCos.A_zimbraDataSourcePop3PollingInterval, type:_LIFETIME_,
                        msgName:ZaMsg.MSG_zimbraDataSourcePop3PollingInterval,
                        label:ZaMsg.LBL_zimbraDataSourcePop3PollingInterval, labelLocation:_LEFT_,
                        onChange:ZaNewCosXWizard.validatePollingInterval,
                        labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                    },
                    {ref:ZaCos.A_zimbraDataSourceImapPollingInterval, type:_LIFETIME_,
                        msgName:ZaMsg.MSG_zimbraDataSourceImapPollingInterval,
                        label:ZaMsg.LBL_zimbraDataSourceImapPollingInterval, labelLocation:_LEFT_,
                        onChange:ZaNewCosXWizard.validatePollingInterval,
                        labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                    },
                    {ref:ZaCos.A_zimbraDataSourceCalendarPollingInterval, type:_LIFETIME_,
                        msgName:ZaMsg.MSG_zimbraDataSourceCalendarPollingInterval,
                        label:ZaMsg.LBL_zimbraDataSourceCalendarPollingInterval, labelLocation:_LEFT_,
                        onChange:ZaNewCosXWizard.validatePollingInterval,
                        labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                    },
                    {ref:ZaCos.A_zimbraDataSourceRssPollingInterval, type:_LIFETIME_,
                        msgName:ZaMsg.MSG_zimbraDataSourceRssPollingInterval,
                        label:ZaMsg.LBL_zimbraDataSourceRssPollingInterval, labelLocation:_LEFT_,
                        onChange:ZaNewCosXWizard.validatePollingInterval,
                        labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                    },
                    {ref:ZaCos.A_zimbraDataSourceCaldavPollingInterval, type:_LIFETIME_,
                        msgName:ZaMsg.MSG_zimbraDataSourceCaldavPollingInterval,
                        label:ZaMsg.LBL_zimbraDataSourceCaldavPollingInterval, labelLocation:_LEFT_,
                        onChange:ZaNewCosXWizard.validatePollingInterval,
                        labelCssStyle:"white-space:normal;",nowrap:false,labelWrap:true
                    }
                ]
            },
            
            {type:_ZAWIZ_TOP_GROUPER_, id:"cos_proxyalloweddomain_settings",
                label: ZaMsg.NAD_ProxyAllowedDomains,
                visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                    [
                        ZaCos.A_zimbraProxyAllowedDomains
                    ]]
                ],
                 items:[
                    {ref: ZaCos.A_zimbraProxyAllowedDomains,
                    msgName:ZaMsg.MSG_zimbraProxyAllowedDomains,
                    label:ZaMsg.LBL_zimbraProxyAllowedDomains,
                    labelLocation:_LEFT_,
                       labelCssStyle:"vertical-align:top;",
                    type:_REPEAT_,
                    align:_LEFT_,
                    repeatInstance:"",
                    addButtonLabel:ZaMsg.NAD_ProxyAddAllowedDomain ,
                    removeButtonLabel: ZaMsg.NAD_ProxyRemoveAllowedDomain,
                    showAddButton:true,
                    showRemoveButton:true,
                    showAddOnNextRow:true,
                    items: [
                        {ref:".", type:_TEXTFIELD_,
                         enableDisableChecks:[] ,
                         visibilityChecks:[],
                         width: "15em"}
                        ]
                    }
                 ]
            },

            {type:_ZAWIZ_TOP_GROUPER_,id:"cos_password_settings",
                label:ZaMsg.NAD_PasswordGrouper,
                items: [ 
                    { type: _DWT_ALERT_,
                      containerCssStyle: "padding-bottom:0;",
                      style: DwtAlert.WARNING,
                      iconVisible:  false,
                      content: ((ZaNewCosXWizard.isAllAuthfromInternal())?ZaMsg.Alert_InternalPassword:ZaMsg.Alert_ExternalPassword)
                    },
                    {ref:ZaCos.A_zimbraPasswordLocked, type:_WIZ_CHECKBOX_,
                        msgName:ZaMsg.NAD_PwdLocked,
                        label:ZaMsg.NAD_PwdLocked,
                        trueValue:"TRUE", falseValue:"FALSE",
            visibilityChecks:[],enableDisableChecks:[[ZaNewCosXWizard.isAllAuthfromInternal]]
                    },
                    {ref:ZaCos.A_zimbraMinPwdLength, 
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_zimbraMinPwdLength,
            label:ZaMsg.LBL_zimbraMinPwdLength, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[ZaItem.hasWritePermission],enableDisableChecks:[[ZaNewCosXWizard.isAllAuthfromInternal]]
            },
                    {ref:ZaCos.A_zimbraMaxPwdLength, 
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_zimbraMaxPwdLength,
            label:ZaMsg.LBL_zimbraMaxPwdLength, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[ZaItem.hasWritePermission],enableDisableChecks:[[ZaNewCosXWizard.isAllAuthfromInternal]]
            },

                    {ref:ZaCos.A_zimbraPasswordMinUpperCaseChars, 
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_zimbraPasswordMinUpperCaseChars,
            label:ZaMsg.LBL_zimbraPasswordMinUpperCaseChars, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[ZaItem.hasWritePermission],enableDisableChecks:[[ZaNewCosXWizard.isAllAuthfromInternal]]
            },
                    {ref:ZaCos.A_zimbraPasswordMinLowerCaseChars, 
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_zimbraPasswordMinLowerCaseChars,
            label:ZaMsg.LBL_zimbraPasswordMinLowerCaseChars, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[ZaItem.hasWritePermission],enableDisableChecks:[[ZaNewCosXWizard.isAllAuthfromInternal]]
            },
                    {ref:ZaCos.A_zimbraPasswordMinPunctuationChars, 
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_zimbraPasswordMinPunctuationChars,
            label:ZaMsg.LBL_zimbraPasswordMinPunctuationChars, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[ZaItem.hasWritePermission],enableDisableChecks:[[ZaNewCosXWizard.isAllAuthfromInternal]]
             },
                    {ref:ZaCos.A_zimbraPasswordMinNumericChars, 
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_zimbraPasswordMinNumericChars,
            label:ZaMsg.LBL_zimbraPasswordMinNumericChars, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[ZaItem.hasWritePermission],enableDisableChecks:[[ZaNewCosXWizard.isAllAuthfromInternal]]
            },
                    {ref:ZaCos.A_zimbraPasswordMinDigitsOrPuncs, 
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_zimbraPasswordMinDigitsOrPuncs,
            label:ZaMsg.LBL_zimbraPasswordMinDigitsOrPuncs, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[ZaItem.hasWritePermission],enableDisableChecks:[[ZaCosXFormView.isAllAuthfromInternal]]
            },

                    {ref:ZaCos.A_zimbraMinPwdAge, 
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_passMinAge,
            label:ZaMsg.LBL_passMinAge, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[],enableDisableChecks:[[ZaNewCosXWizard.isAllAuthfromInternal]]
            },
                    {ref:ZaCos.A_zimbraMaxPwdAge, 
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_passMaxAge,
            label:ZaMsg.LBL_passMaxAge, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[],enableDisableChecks:[[ZaNewCosXWizard.isAllAuthfromInternal]]
            },
                    {ref:ZaCos.A_zimbraEnforcePwdHistory, 
            type:_TEXTFIELD_, msgName:ZaMsg.MSG_zimbraEnforcePwdHistory,
            label:ZaMsg.LBL_zimbraEnforcePwdHistory, labelLocation:_LEFT_, cssClass:"admin_xform_number_input",
            visibilityChecks:[],enableDisableChecks:[[ZaNewCosXWizard.isAllAuthfromInternal]]
            },
                    {ref:ZaCos.A_zimbraPasswordBlockCommonEnabled, type:_WIZ_CHECKBOX_,
            msgName:ZaMsg.NAD_RejectCommonPwd,
            label:ZaMsg.NAD_RejectCommonPwd,
            trueValue:"TRUE", falseValue:"FALSE",
            visibilityChecks:[],enableDisableChecks:[[ZaNewCosXWizard.isAllAuthfromInternal]]
            },
                ]
            },
            {type:_ZAWIZ_TOP_GROUPER_, id:"cos_password_lockout_settings",
                label:ZaMsg.NAD_FailedLoginGrouper,
                items :[

                    {ref:ZaCos.A_zimbraPasswordLockoutEnabled, type:_WIZ_CHECKBOX_,
                        msgName:ZaMsg.LBL_zimbraPasswordLockoutEnabled,
                        label:ZaMsg.LBL_zimbraPasswordLockoutEnabled,
                        trueValue:"TRUE", falseValue:"FALSE"
                    },
                    {ref:ZaCos.A_zimbraPasswordLockoutMaxFailures, type:_TEXTFIELD_,
                        enableDisableChecks: [ZaNewCosXWizard.isPasswordLockoutEnabled],
                        enableDisableChangeEventSources:[ZaCos.A_zimbraPasswordLockoutEnabled],
                        label:ZaMsg.LBL_zimbraPasswordLockoutMaxFailures,
                        subLabel:ZaMsg.TTP_zimbraPasswordLockoutMaxFailuresSub,
                        msgName:ZaMsg.MSG_zimbraPasswordLockoutMaxFailures,
                        labelLocation:_LEFT_,
                        cssClass:"admin_xform_number_input"
                    },
                    {ref:ZaCos.A_zimbraPasswordLockoutDuration, type:_LIFETIME_,
                        enableDisableChecks: [ZaNewCosXWizard.isPasswordLockoutEnabled],
                        enableDisableChangeEventSources:[ZaCos.A_zimbraPasswordLockoutEnabled],
                        label:ZaMsg.LBL_zimbraPasswordLockoutDuration,
                        subLabel:ZaMsg.TTP_zimbraPasswordLockoutDurationSub,
                        msgName:ZaMsg.MSG_zimbraPasswordLockoutDuration,
                        labelLocation:_LEFT_,
                        textFieldCssClass:"admin_xform_number_input"
                    },
                    {ref:ZaCos.A_zimbraPasswordLockoutFailureLifetime, type:_LIFETIME_,
                        enableDisableChecks: [ZaNewCosXWizard.isPasswordLockoutEnabled],
                        enableDisableChangeEventSources:[ZaCos.A_zimbraPasswordLockoutEnabled],
                        label:ZaMsg.LBL_zimbraPasswordLockoutFailureLifetime,
                        subLabel:ZaMsg.TTP_zimbraPasswordLockoutFailureLifetimeSub,
                        msgName:ZaMsg.MSG_zimbraPasswordLockoutFailureLifetime,
                        labelLocation:_LEFT_,
                        textFieldCssClass:"admin_xform_number_input",
                        labelCssStyle:"white-space:normal;",
                        nowrap:false,labelWrap:true
                    }
                ]
            },
            {type:_ZAWIZ_TOP_GROUPER_,
                label:ZaMsg.NAD_TimeoutGrouper,
                items: [
                    {ref:ZaCos.A_zimbraAdminAuthTokenLifetime, type:_LIFETIME_, msgName:ZaMsg.MSG_zimbraAdminAuthTokenLifetime,label:ZaMsg.LBL_zimbraAdminAuthTokenLifetime,labelLocation:_LEFT_},
                    {ref:ZaCos.A_zimbraAuthTokenLifetime, type:_LIFETIME_, msgName:ZaMsg.MSG_zimbraAuthTokenLifetime,label:ZaMsg.LBL_zimbraAuthTokenLifetime,labelLocation:_LEFT_},
                    {ref:ZaCos.A_zimbraMailIdleSessionTimeout, type:_LIFETIME_, msgName:ZaMsg.MSG_zimbraMailIdleSessionTimeout,label:ZaMsg.LBL_zimbraMailIdleSessionTimeout,labelLocation:_LEFT_},
                    {ref:ZaCos.A_zimbraDumpsterUserVisibleAge, type:_LIFETIME_, msgName:ZaMsg.MSG_zimbraDumpsterUserVisibleAge, label:ZaMsg.LBL_zimbraDumpsterUserVisibleAge,
                        visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaCos.A_zimbraDumpsterEnabled, "TRUE"]], visibilityChangeEventSources:[ZaCos.A_zimbraDumpsterEnabled]
                    }
                ]
            },
            {type:_ZAWIZ_TOP_GROUPER_,
                label:ZaMsg.NAD_MailRetentionGrouper,
                items: [
                    { type: _DWT_ALERT_,
                      containerCssStyle: "padding-bottom:0;",
                      style: DwtAlert.WARNING,
                      iconVisible: false,
                      content: ZaMsg.Alert_MailRetention
                    },
                    {ref:ZaCos.A_zimbraMailMessageLifetime, type:_LIFETIME2_, msgName:ZaMsg.MSG_zimbraMailMessageLifetime,label:ZaMsg.LBL_zimbraMailMessageLifetime,labelLocation:_LEFT_},
                    {ref:ZaCos.A_zimbraMailTrashLifetime, type:_LIFETIME1_, msgName:ZaMsg.MSG_zimbraMailTrashLifetime,label:ZaMsg.LBL_zimbraMailTrashLifetime, labelLocation:_LEFT_},
                    {ref:ZaCos.A_zimbraMailSpamLifetime, type:_LIFETIME1_, msgName:ZaMsg.MSG_zimbraMailSpamLifetime,label:ZaMsg.LBL_zimbraMailSpamLifetime, labelLocation:_LEFT_},
                    {ref:ZaCos.A_zimbraMailDumpsterLifetime, type:_LIFETIME1_, msgName:ZaMsg.MSG_zimbraMailDumpsterLifetime, label:ZaMsg.LBL_zimbraMailDumpsterLifetime,
                        visibilityChecks:[[ZaItem.hasReadPermission], [XForm.checkInstanceValue, ZaCos.A_zimbraDumpsterEnabled, "TRUE"], [XForm.checkInstanceValue, ZaCos.A_zimbraDumpsterPurgeEnabled, "TRUE"]],
                        visibilityChangeEventSources:[ZaCos.A_zimbraDumpsterEnabled, ZaCos.A_zimbraDumpsterPurgeEnabled]
                    }
                ]
            },
            {type:_ZAWIZ_TOP_GROUPER_,
                label:ZaMsg.NAD_InteropGrouper,visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,
                                                                  [ZaCos.A_zimbraFreebusyExchangeUserOrg]]],
                items: [
                    {ref:ZaCos.A_zimbraFreebusyExchangeUserOrg, type:_TEXTFIELD_,
                        msgName:ZaMsg.LBL_zimbraFreebusyExchangeUserOrg, width: "250px",
                        label:ZaMsg.LBL_zimbraFreebusyExchangeUserOrg,labelLocation:_LEFT_
                    }
                ]
            } ,
            {type: _SPACER_ , height: "10px" }  //add some spaces at the bottom of the page

        ];

        case7.items = case7Items;
        cases.push(case7);
    }
    
    xFormObject.tableCssStyle = "width:100%;overflow:auto;";

    this._lastStep = this.stepChoices.length;

    xFormObject.items = [
        {
            type: _OUTPUT_,
            colSpan: 2,
            valign: _TOP_,
            ref: ZaModel.currentStep,
            choices: this.stepChoices,
            valueChangeEventSources: [ZaModel.currentStep],
            cssStyle: "white-space: normal"
        },
        {
            type: _SEPARATOR_,
            align: _CENTER_,
            valign: _TOP_
        },
        {
            type: _SPACER_,
            align: _CENTER_,
            valign: _TOP_
        },
        {
            type: _SWITCH_,
            width: 635,
            align: _LEFT_,
            valign: _TOP_,
            cssStyle: "white-space: normal",
            items: cases
        }
    ];
};
ZaXDialog.XFormModifiers["ZaNewCosXWizard"].push(ZaNewCosXWizard.myXFormModifier);

ZaNewCosXWizard.prototype.getTabChoices =
function() {
    return this.stepChoices;
}

ZaNewCosXWizard.isAllAuthfromInternal =
function() {
    var isAll = true;  // is all external?
    var domainList = ZaNewCosXWizard._domainList;
    if(!domainList) return isAll;
    for(var i = 0; i < domainList.length && isAll; i ++) {
        var dom = domainList[i];
        if(dom.attrs[ZaDomain.A_AuthMech] == ZaDomain.AuthMech_zimbra)
            isAll = false; 
    }
        return !isAll;
}

ZaNewCosXWizard.validatePollingInterval =
function (value, event, form) {
    DBG.println(AjxDebug.DBG3, "The polling interval = " + value);
    var instance = form.getInstance ();
    this.setInstanceValue(value);
    var prefPollingInterval = instance.attrs[ZaCos.A_zimbraPrefMailPollingInterval] ;
    var minPollingInterval = instance.attrs[ZaCos.A_zimbraMailMinPollingInterval] ;
    var prefPollingIntervalItem = form.getItemsById (ZaCos.A_zimbraPrefMailPollingInterval)[0];
    try {
        if (ZaUtil.getLifeTimeInSeconds(prefPollingInterval) < ZaUtil.getLifeTimeInSeconds(minPollingInterval)){
            prefPollingIntervalItem.setError (ZaMsg.tt_mailPollingIntervalError + minPollingInterval) ;
            form.parent.setDirty(false);    
        }else{
            prefPollingIntervalItem.clearError();    
            form.parent.setDirty(true);    
        }
    }catch (e){
        prefPollingIntervalItem.setError (e.message);
        form.parent.setDirty(false);
    }
}
}
if (AjxPackage.define("zimbraAdmin.search.view.ZaSearchToolBar")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

ZaSearchToolBar = function(parent, posStyle, id) {

	ZaToolBar.call(this, parent, null,null, posStyle, "SearchToolBar",id);
	this._app = ZaApp.getInstance();
	this._searchField = new ZaSearchField(this, "SearchTBSearchField", 48, null, id);
//	var h1 = this._searchField.getSize().y;
		
	//this.setSize(Dwt.DEFAULT, Math.max(this._searchField.getSize().y, this.computeHeight()));
}

ZaSearchToolBar.prototype = new ZaToolBar;
ZaSearchToolBar.prototype.constructor = ZaSearchToolBar;

ZaSearchToolBar.prototype.toString = 
function() {
	return "ZaSearchToolBar";
}

ZaSearchToolBar.prototype.addSelectionListener =
function(buttonId, listener) {
	// Don't allow listeners on the search by button since we only want listeners registered
	// on its menu items
	if (buttonId != ZaSearchToolBar.SEARCHFOR_BUTTON)
		ZaToolBar.prototype.addSelectionListener.call(this, buttonId, listener);
}


ZaSearchToolBar.prototype.getSearchField =
function() {
	return this._searchField;
}
}
if (AjxPackage.define("zimbraAdmin.search.view.ZaSearchField")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

ZaSearchField = function(parent, className, size, posStyle, id) {

	DwtComposite.call(this, parent, className, posStyle, null, ZaId.getViewId(ZaId.SEARCH_VIEW,null,id));
	this._containedObject = new ZaSearch();
	this._initForm(ZaSearch.myXModel,this._getMyXForm());
	this._localXForm.setInstance(this._containedObject);
	this._app = ZaApp.getInstance();
	this._searchFieldId = id;
}

ZaSearchField.prototype = new DwtComposite;
ZaSearchField.prototype.constructor = ZaSearchField;

ZaSearchField.prototype.toString = 
function() {
	return "ZaSearchField";
}

ZaSearchField.UNICODE_CHAR_RE = /\S/;

ZaSearchField.prototype.registerCallback =
function(callbackFunc, obj) {
	this._callbackFunc = callbackFunc;
	this._callbackObj = obj;
}

ZaSearchField.prototype.setObject = 
function (searchObj) {
	this._containedObject = searchObj;
	this._localXForm.setInstance(this._containedObject);
}

ZaSearchField.prototype.getObject = 
function() {
	return this._containedObject;
}

ZaSearchField.prototype.getCurrentSearchQuery =
function (){
   var query = this._containedObject[ZaSearch.A_query] = this.getSearchFieldElement().value;
	if (query.indexOf("$set:") == 0) {
		ZaApp.getInstance().getAppCtxt().getClientCmdHdlr().execute((query.substr(5)).split(" "));
		return;
	}

	var params = {};
	var isAdvanced = ZaApp.getInstance().getSearchBuilderController().isAdvancedSearch (query) ;
	params.types = this.getSearchTypes();

	if (isAdvanced) {
		params.query = query;
	}else {
		params.query = ZaSearch.getSearchByNameQuery(query, params.types);
	}

    return params;
}

ZaSearchField.prototype.invokeCallback =
function() {
    var query = this._containedObject[ZaSearch.A_query] = this.getSearchFieldElement().value;
	if (query.indexOf("$set:") == 0) {
		ZaApp.getInstance().getAppCtxt().getClientCmdHdlr().execute((query.substr(5)).split(" "));
		return;
	}
		
	var params = {};
	var sb_controller = ZaApp.getInstance().getSearchBuilderController();
	var isAdvanced = sb_controller.isAdvancedSearch (query) ;
	var searchListController = ZaApp.getInstance().getSearchListController() ;
	searchListController._isAdvancedSearch = isAdvanced ;

	// reset search controller
	searchListController._currentDomain = null;
	searchListController._currentPageNum = 1;
	searchListController.fetchAttrs = ZaSearch.standardAttributes;
	
	params.types = this.getSearchTypes();
	
	if (isAdvanced) {
		DBG.println(AjxDebug.DBG1, "Advanced Search ... " ) ;
		//Use the text in the search field to do a search
		//params.query = sb_controller.getQuery ();
		params.query = query;
		DBG.println(AjxDebug.DBG1, "Query = " + params.query) ;
		//params.types = sb_controller.getAddressTypes ();
	}else {
		DBG.println(AjxDebug.DBG1, "Basic Search ....") ;
		searchListController._searchFieldInput = query ;
		params.query = ZaSearch.getSearchByNameQuery(query, params.types);      
	}
	
	//set the currentController's _currentQuery
	
	ZaApp.getInstance().getSearchListController()._currentQuery = params.query ;
	searchListController._currentQuery = params.query ;

	this._isSearchButtonClicked = false ;
	
	if (this._callbackFunc != null) {
		if (this._callbackObj != null) {
			//this._callbackFunc.call(this._callbackObj, this, params);
			ZaApp.getInstance().getCurrentController().switchToNextView(this._callbackObj,
		 this._callbackFunc, params);
		} else {
			ZaApp.getInstance().getCurrentController().switchToNextView(ZaApp.getInstance().getSearchListController(), this._callbackFunc, params);
//			this._callbackFunc(this, params);
		}
	}
}

ZaSearchField.isLDAPQuery =
function (query) {
	var regEx =  /\([^\(\)\=]+=[^\(\)\=]+\)/ ; //ldap query string regEx
	if (query.match(regEx) != null) {
		return true ;
	}

	return  false ;
}

ZaSearchField.prototype.startSearch= function (ldapQuery, type, isShowBubble) {
	var params = {};

    if (!ldapQuery) {
        ldapQuery = "";
    }
	var searchListController = ZaApp.getInstance().getSearchListController() ;
	searchListController._isAdvancedSearch = true ;
    if (!type)
        type = ZaSearchOption.getDefaultObjectTypes();

	// reset search controller
	searchListController._currentDomain = null;
	searchListController._currentPageNum = 1;
	searchListController.fetchAttrs = ZaSearch.standardAttributes;

    params.isShowBubble = isShowBubble;
	params.types = type;
    if (!ZaSearchField.isLDAPQuery(ldapQuery)){
        ldapQuery = ZaSearch.getSearchByNameQuery(ldapQuery, type);
    }
    params.query = ldapQuery;

	//set the currentController's _currentQuery

	ZaApp.getInstance().getSearchListController()._currentQuery = params.query ;
	searchListController._currentQuery = params.query ;


	if (this._callbackFunc != null) {
		if (this._callbackObj != null) {
			//this._callbackFunc.call(this._callbackObj, this, params);
			ZaApp.getInstance().getCurrentController().switchToNextView(this._callbackObj,
		 this._callbackFunc, params);
		} else {
			ZaApp.getInstance().getCurrentController().switchToNextView(ZaApp.getInstance().getSearchListController(), this._callbackFunc, params);
//			this._callbackFunc(this, params);
		}
	}
}

ZaSearchField.prototype.getSearchTypes =
function () {
		var sb_controller = ZaApp.getInstance().getSearchBuilderController();
		var query = this.getSearchFieldElement().value ;
		var isAdvancedSearch = sb_controller.isAdvancedSearch (query) ;
		
		var objList = new Array();
		if (isAdvancedSearch) {
			objList = sb_controller.getAddressTypes();
		}else{
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ACCOUNT_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
                if(this._containedObject[ZaSearch.A_fAccounts] == "TRUE") {
                    objList.push(ZaSearch.ACCOUNTS);
                }
            }
            
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ALIAS_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
                if(this._containedObject[ZaSearch.A_fAliases] == "TRUE") {
                    objList.push(ZaSearch.ALIASES);
                }
            }

            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.DL_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) { 
            	if(this._containedObject[ZaSearch.A_fdistributionlists] == "TRUE") {
                    objList.push(ZaSearch.DLS);
                }
            }

            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.RESOURCE_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) { 
                if(this._containedObject[ZaSearch.A_fResources] == "TRUE") {
                    objList.push(ZaSearch.RESOURCES);
                }
            }
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.DOMAIN_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) { 
				if(this._containedObject[ZaSearch.A_fDomains] == "TRUE") {
					objList.push(ZaSearch.DOMAINS);
				}	
			}

            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.COS_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
                                if(this._containedObject[ZaSearch.A_fCoses] == "TRUE") {
                                        objList.push(ZaSearch.COSES);
                                }
            }
		}
		
		return objList;
}

ZaSearchField.srchButtonHndlr = 
function(evt) {	
	var fieldObj = this.getForm().parent;
	//If the search input is less than 3 characters show the error message.
	var value = fieldObj.getSearchFieldElement().value;
	if (!value || value.length < 3) {
		var searchItem = this.getParentItem().getItems()[2] || this;
		return searchItem.setError(AjxMessageFormat.format(AjxMsg.stringTooShort, 3));
	}
	//reset the search list toolbar parameters

	
	var currentController = ZaApp.getInstance().getCurrentController ();
	if (currentController && currentController.setPageNum) {
		currentController.setPageNum (1) ;		
	}

    fieldObj.setCurrentSavedSearch({});
    var overviewController =  ZaZimbraAdmin.getInstance().getOverviewPanelController();
    var tree = overviewController.getOverviewPanel().getFolderTree();
    /*
    It will introduce many issues when renaming for this items.
    Fix it in future
    var searchText = ZaMsg.OVP_search;
    var newPath = tree.renameTreeItem(overviewController.getSearchItemPath(), searchText);
    */
    var newPath = overviewController.getSearchItemPath();
    overviewController.setSearchItemPath(newPath);
    tree.setSelectionByPath(newPath);
    return;
	//fieldObj._isSearchButtonClicked = true ; //to Distinguish the action from the overveiw tree items
	fieldObj.invokeCallback(evt);

}

ZaSearchField.entryKeyHandler =
function(xformItem, value) {
    ZaSearchField.srchButtonHndlr.call(xformItem);
}

ZaSearchField.helpSrchButtonHndlr =
function (evt) {
	var helpQuery = this.getForm().getItemsById(ZaSearch.A_query)[0].getElement().value ;
	if (helpQuery && helpQuery.length > 0){
			var url = "http://support.zimbra.com/help/index.php"
			var args = [];
			args.push("query=" + helpQuery) ;
			if (typeof (ZaLicense) == typeof (_UNDEFINED_)) { //FOSS version
				args.push("FOSS=1") ;
			}
			
			if (ZaServerVersionInfo.version) {
				args.push("version=" + ZaServerVersionInfo.version ) ;
			}
			
			url = url + "?" + AjxStringUtil.urlEncode(args.join("&"));
			window.open(url, "_blank");
	}
}

ZaSearchField.saveSrchButtonHndlr =
function (evt) {
	var form =this.getForm() ;
	var searchField = form.parent ;
	var query = form.getItemsById(ZaSearch.A_query)[0].getElement().value ;
	/*if(window.console && window.console.log) {
		console.log("Save current query: " + query) ;
		//console.log("Current Search types = " + searchField.getSearchTypes()) ;
	}*/
	if (query && query.length > 0) {
		searchField.getSaveAndEditSeachDialog().show(null, query) ;
	}
}

ZaSearchField.prototype.getSaveAndEditSeachDialog =
function() {
	if (!this._savedAndEditSearchDialog) {
        this._savedAndEditSearchDialog = new ZaSaveSearchDialog (this) ;
	}
	
	return this._savedAndEditSearchDialog ;
}

ZaSearchField.prototype.showSavedSearchButtonHndlr =
function (evt) {
	//if(window.console && window.console.log) console.log("Show saved Searches") ;
	var searchField = this.getForm().parent ;
	searchField.showSavedSearchMenus() ;
}

ZaSearchField.prototype.showSavedSearchMenus =
function () {
	//if (this._savedSearchMenu) this._savedSearchMenu.popdown(); //force popdown
	
	if (this._savedSearchMenu && this._savedSearchMenu.isPoppedUp()) {
		return ;
	}
	if (ZaSearch.SAVED_SEARCHES.length <= 0 || ZaSearch._savedSearchToBeUpdated) {
		var callback = new AjxCallback (this, this.popupSavedSearch) ;
		ZaSearch.getSavedSearches(null, callback); //TODO, we may want to provide the autocomplete feature to return the saved results when user is typing
	}else{
		this.popupSavedSearch(null);
	}
}

ZaSearchField.prototype.popupSavedSearch =
function (resp, searchName) {
	//if(window.console && window.console.log) console.debug("popup saved searches ...") ;
	
	if (resp){
		ZaSearch.updateSavedSearch (resp);
	}
	
	if (ZaSearch.SAVED_SEARCHES.length <=0) {
		if (this._savedSearchMenu) this._savedSearchMenu.popdown() ; //force popdown if the saved-search is 0
		return ;
	}	
	
	this._queryFieldElement = this.getSearchFieldElement();
	var b = Dwt.getBounds(this._queryFieldElement);
	
	/*
	if (!this._savedSearchMenu || resp != null) {
		this._savedSearchMenu = new DwtMenu(this);
		
		//add the menu items
		for (var i=0; i < ZaSearch.SAVED_SEARCHES.length; i ++) {
			var n = ZaSearch.SAVED_SEARCHES[i].name ;
			var q = ZaSearch.SAVED_SEARCHES[i].query ;
			var mItem =  new DwtMenuItem (this._savedSearchMenu) ;
			mItem.setText(n + " .......... " + q) ;
			mItem.setSize(b.width) ;
			mItem.addSelectionListener(new AjxListener(this, ZaSearchField.prototype.selectSavedSearch, [n, q]));
			mItem.addListener(DwtEvent.ONMOUSEUP, new AjxListener(this, this._savedSearchItemMouseUpListener, [n, q] ));
		}
	}*/
	this.getSavedSearchMenu().popup(0, b.x, b.y + b.height);
	//this._savedSearchMenu.setBounds( b.x, b.y + b.height, b.width);
	
}

ZaSearchField.prototype.getSearchFieldElement =
function () {
    var queryXFormItem = this._localXForm.getItemsById(ZaSearch.A_query)[0];
    var displayId = queryXFormItem.getId() + "_display";
    var inputEl = document.getElementById(displayId);
    return inputEl;
}

ZaSearchField.prototype.selectSavedSearch =
function (name, query, event){
	//if(window.console && window.console.log) console.debug("Item " + name + " is selected - " + query);
    var queryString = ZaSearch.parseSavedSearchQuery(query) ;
    var slController = ZaApp.getInstance().getSearchListController();
    if (slController._uiContainer){
        var params = {
            type:3,
            unique:true,
            query:queryString,
            displayName: name
        };
        slController._uiContainer.removeAllBubbles(true);
        slController._uiContainer.addBubble(params);
    }
}

ZaSearchField.prototype.getSavedSearchActionMenu =
function () {
	if (!this._savedSearchActionMenu) {
		this._popupOperations = [];
		this._popupOperations[ZaOperation.EDIT] = new ZaOperation(ZaOperation.EDIT, ZaMsg.TBB_Edit, ZaMsg.ACTBB_Edit_tt, "Properties", "PropertiesDis", 
				new AjxListener(this, this._editSavedSearchListener));
		this._popupOperations[ZaOperation.DELETE] = new ZaOperation(ZaOperation.DELETE, ZaMsg.TBB_Delete, ZaMsg.ACTBB_Delete_tt, "Delete", "DeleteDis", 
				new AjxListener(this, this._deleteSavedSearchListener));
		this._savedSearchActionMenu = 
			new ZaPopupMenu(this, "ActionMenu", null, this._popupOperations, this._searchFieldId, ZaId.MENU_POP);
	}
	
	return this._savedSearchActionMenu ;
}

ZaSearchField.prototype._savedSearchItemMouseUpListener =
function(name, query, ev) {
	this.getSavedSearchActionMenu().popdown();
	if (ev.button == DwtMouseEvent.RIGHT){
		//if(window.console && window.console.log) console.debug("Right Button of Mouse Up: Item " + name + " is selected - " + query);
		
		this._currentSavedSearch = {name: name, query: query};
		//if(window.console && window.console.log) console.debug("Saved Search Menu ZIndex = " + this._savedSearchMenu.getZIndex());
		this.getSavedSearchActionMenu().popup(0, ev.docX, ev.docY);
		this.getSavedSearchActionMenu().setZIndex(this._savedSearchMenu.getZIndex() + 1) ;
		//if(window.console && window.console.log) console.debug("Saved Search Action Menu ZIndex = " + this.getSavedSearchActionMenu().getZIndex());
	}
}

ZaSearchField.prototype._editSavedSearchListener =
function (ev) {
	//if(window.console && window.console.log) console.debug("Edit a saved search item");
	this._savedSearchActionMenu.popdown();
	this.getSaveAndEditSeachDialog().show(this._currentSavedSearch.name, this._currentSavedSearch.query);
}

ZaSearchField.prototype._deleteSavedSearchListener =
function (ev) {
	//if(window.console && window.console.log) console.debug("Delete a saved search item");
	this._savedSearchActionMenu.popdown();
	ZaSearch._savedSearchToBeUpdated = true ;
	var callback = new AjxCallback (this, this.modifySavedSearchCallback) ;

	ZaSearch.modifySavedSearches(	
		[{name: this._currentSavedSearch.name, query: null}], callback ) ;

}

ZaSearchField.prototype.modifySavedSearchCallback =
function () {
	//update the ZaSearch.SAVED_SEARCH
	ZaSearch.updateSavedSearch (ZaSearch.getSavedSearches()); 

	//Update the Search Tree
	if(ZaSettings.TREE_ENABLED) {
		var overviewPanelCtrl = ZaApp.getInstance()._appCtxt.getAppController().getOverviewPanelController() ;
		overviewPanelCtrl.updateSavedSearchTreeList() ;
	}
	//Update the SavedSearchMenu
	this.updateSavedSearchMenu() ;
}

ZaSearchField.prototype.getSavedSearchMenu =
function (refresh) {
	if (!this._savedSearchMenu  || refresh) {
		this.updateSavedSearchMenu();
	}
	return this._savedSearchMenu ;
}

ZaSearchField.prototype.updateSavedSearchMenu =
function () {
	
	var isPoppedUp = false ;
	this._queryFieldElement = this.getSearchFieldElement();
	var b = Dwt.getBounds(this._queryFieldElement);
	
	if (this._savedSearchMenu) {
		isPopup = this._savedSearchMenu.isPoppedUp();
		this._savedSearchMenu.popdown() ;
		this._savedSearchMenu.dispose();	
	}
	
	this._savedSearchMenu = new DwtMenu({parent:this,id:ZaId.getMenuId(ZaId.PANEL_APPSEARCH,ZaId.MENU_DROP)});
	
	//add the menu items
	for (var i=0; i < ZaSearch.SAVED_SEARCHES.length; i ++) {
		var n = ZaSearch.SAVED_SEARCHES[i].name ;
		var q = ZaSearch.SAVED_SEARCHES[i].query ;
		var mItem =  new DwtMenuItem ({parent:this._savedSearchMenu, id: (ZaId.getMenuItemId(ZaId.SEARCH_QUERY) + "_" + (i+1))}) ;
		mItem.setText(AjxStringUtil.htmlEncode(n));
		mItem.setSize(b.width) ;
		mItem.addSelectionListener(new AjxListener(this, ZaSearchField.prototype.selectSavedSearch, [n, q]));
		mItem.addListener(DwtEvent.ONMOUSEUP, new AjxListener(this, this._savedSearchItemMouseUpListener, [n, q] ));
		//set the overflow style to hidden
		mItem.getHtmlElement().style.overflow = "hidden";
	}
	
	if (isPoppedUp) this.popupSavedSearch();
}

//only show or hide the advanced search options
ZaSearchField.advancedButtonHndlr =
function (evt) {
	//DBG.println(AjxDebug.DBG1, "Advanced Button Clicked ...") ;
	var form = this.getForm() ;

	var sb_controller = ZaApp.getInstance().getSearchBuilderController ();
	sb_controller.toggleVisible ();
	ZaApp.getInstance()._appViewMgr.showSearchBuilder (sb_controller.isSBVisible());
	
	if (sb_controller.isSBVisible()) {
		this.widget.setToolTipContent(ZaMsg.tt_advanced_search_close);
	}else{
		this.widget.setToolTipContent (ZaMsg.tt_advanced_search_open) ;
	}
	//clear the search field
	sb_controller.setQuery ();
}

ZaSearchField.prototype.getItemByName =
function (name) {
	var items = this._localXForm.getItems()[0].getItems();
	var cnt = items.length ;
	for (var i=0; i < cnt; i++){
		if (items[i].getName () == name ) 
			return items[i];	
	}
	
	return null ;
}

ZaSearchField.prototype.setTooltipForSearchBuildButton =
function (tooltip){
	//change the tooltip for the search build button
	var searchBuildButtonItem = this.getItemByName("searchBuildButton") ;
	if (searchBuildButtonItem) {
		searchBuildButtonItem.getWidget().setToolTipContent (tooltip);
	}
}

ZaSearchField.prototype.setTooltipForSearchButton =
function (tooltip){
	//change the tooltip for the search button
	var searchButtonItem = this.getItemByName("searchButton") ;
	if (searchButtonItem) {
		searchButtonItem.getWidget().setToolTipContent (tooltip);
	}
}


ZaSearchField.prototype.setIconForSearchMenuButton =
function (imageName){
	//change the tooltip for the search button
	var searchMenuButtonItem = this.getItemByName("searchMenuButton") ;
	if (searchMenuButtonItem) {
		searchMenuButtonItem.getWidget().setImage (imageName);
	}
}

ZaSearchField.prototype.resetSearchFilter = function () {
	this._containedObject[ZaSearch.A_fAccounts] = "FALSE";
	this._containedObject[ZaSearch.A_fdistributionlists] = "FALSE";	
	this._containedObject[ZaSearch.A_fAliases] = "FALSE";
	this._containedObject[ZaSearch.A_fResources] = "FALSE";
	this._containedObject[ZaSearch.A_fDomains] = "FALSE";
	this._containedObject[ZaSearch.A_fCoses] = "FALSE";	
}

ZaSearchField.prototype.restoreSearchFilter = function(){
    if(this.searchSelectedType == ZaSearch.ACCOUNTS)
        this.accFilterSelected();
    else if(this.searchSelectedType == ZaSearch.ALIASES)
        this.aliasFilterSelected();
    else if(this.searchSelectedType == ZaSearch.DLS)
        this.dlFilterSelected();
    else if(this.searchSelectedType == ZaSearch.RESOURCES)
        this.resFilterSelected();
    else if(this.searchSelectedType == ZaSearch.DOMAINS)
        this.domainFilterSelected()
    else if(this.searchSelectedType == ZaSearch.COSES)
        this.cosFilterSelected()
    else
        this.allFilterSelected();
}

ZaSearchField.prototype.allFilterSelected = function (ev) {
    if (ev)
	    ev.item.parent.parent.setImage(ev.item.getImage());
    else
        this.setIconForSearchMenuButton("SearchAll");
	this._containedObject[ZaSearch.A_fAccounts] = "TRUE";
	this._containedObject[ZaSearch.A_fdistributionlists] = "TRUE";	
	this._containedObject[ZaSearch.A_fAliases] = "TRUE";
	this._containedObject[ZaSearch.A_fResources] = "TRUE";
	//if(ZaSettings.DOMAINS_ENABLED) {
	this._containedObject[ZaSearch.A_fDomains] = "TRUE";	
	//}
	this._containedObject[ZaSearch.A_fCoses] = "TRUE";
	this.setTooltipForSearchButton (ZaMsg.searchForAll);
    this.searchSelectedType = "";
}



ZaSearchField.prototype.accFilterSelected = function (ev) {
	this.resetSearchFilter();
	//ev.item.parent.parent.setImage(ev.item.getImage());	
	this.setIconForSearchMenuButton ("Account");
	this._containedObject[ZaSearch.A_fAccounts] = "TRUE";
	this.setTooltipForSearchButton (ZaMsg.searchForAccounts);
    this.searchSelectedType = ZaSearch.ACCOUNTS;
}

ZaSearchField.prototype.accFilterSelectedFromResults = function (ev) {
	this.resetSearchFilter();
	this._containedObject[ZaSearch.A_fAccounts] = "TRUE";
}

ZaSearchField.prototype.aliasFilterSelected = function (ev) {
	this.resetSearchFilter();
	//ev.item.parent.parent.setImage(ev.item.getImage());
	this.setIconForSearchMenuButton ("AccountAlias");
	this._containedObject[ZaSearch.A_fAliases] = "TRUE";	
	this.setTooltipForSearchButton (ZaMsg.searchForAliases);
    this.searchSelectedType = ZaSearch.ALIASES;
}

ZaSearchField.prototype.aliasFilterSelectedFromResults = function (ev) {
    this.resetSearchFilter();
    this._containedObject[ZaSearch.A_fAliases] = "TRUE";
}

ZaSearchField.prototype.dlFilterSelected = function (ev) {
	this.resetSearchFilter();
	//ev.item.parent.parent.setImage(ev.item.getImage());
	this.setIconForSearchMenuButton ("DistributionList");
	this._containedObject[ZaSearch.A_fdistributionlists] = "TRUE";	
	this.setTooltipForSearchButton (ZaMsg.searchForDLs);
    this.searchSelectedType = ZaSearch.DLS;
}

ZaSearchField.prototype.dlFilterSelectedFromResults = function (ev) {
	this.resetSearchFilter();
	this._containedObject[ZaSearch.A_fdistributionlists] = "TRUE";
}

ZaSearchField.prototype.resFilterSelected = function (ev) {
	this.resetSearchFilter();
	//ev.item.parent.parent.setImage(ev.item.getImage());
	this.setIconForSearchMenuButton ("Resource");
	this._containedObject[ZaSearch.A_fResources] = "TRUE";
	this.setTooltipForSearchButton (ZaMsg.searchForResources);
    this.searchSelectedType = ZaSearch.RESOURCES;
}

ZaSearchField.prototype.domainFilterSelected = function (ev) {
	//if(ZaSettings.DOMAINS_ENABLED) {
		this.resetSearchFilter();
		//ev.item.parent.parent.setImage(ev.item.getImage());
		this.setIconForSearchMenuButton ("Domain");
		this._containedObject[ZaSearch.A_fDomains] = "TRUE";
		this.setTooltipForSearchButton (ZaMsg.searchForDomains);
        this.searchSelectedType = ZaSearch.DOMAINS;
	//}
}


ZaSearchField.prototype.domainFilterSelectedFromResults = function (ev) {
		this.resetSearchFilter();
		this._containedObject[ZaSearch.A_fDomains] = "TRUE";

}

ZaSearchField.prototype.cosFilterSelected = function (ev) {
                this.resetSearchFilter();
                this.setIconForSearchMenuButton ("COS");
                this._containedObject[ZaSearch.A_fCoses] = "TRUE";
                this.setTooltipForSearchButton (ZaMsg.searchForCOSES);
                this.searchSelectedType = ZaSearch.COSES;
}


ZaSearchField.searchChoices = new XFormChoices([],XFormChoices.OBJECT_REFERENCE_LIST, null, "labelId");
ZaSearchField.prototype._getMyXForm = function() {	
	var newMenuOpList = new Array();

    if(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ACCOUNT_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
	    newMenuOpList.push(new ZaOperation(ZaOperation.SEARCH_ACCOUNTS, ZaMsg.SearchFilter_Accounts, ZaMsg.searchForAccounts, "Account", "AccountDis", new AjxListener(this,this.accFilterSelected)));
    }

    if(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.DL_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
	    newMenuOpList.push(new ZaOperation(ZaOperation.SEARCH_DLS, ZaMsg.SearchFilter_DLs, ZaMsg.searchForDLs, "DistributionList", "DistributionListDis", new AjxListener(this,this.dlFilterSelected)));
    }

    if(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ALIAS_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
        newMenuOpList.push(new ZaOperation(ZaOperation.SEARCH_ALIASES, ZaMsg.SearchFilter_Aliases, ZaMsg.searchForAliases, "AccountAlias", "AccountAlias", new AjxListener(this, this.aliasFilterSelected)));
    }

    if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.RESOURCE_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
	    newMenuOpList.push(new ZaOperation(ZaOperation.SEARCH_RESOURCES, ZaMsg.SearchFilter_Resources, ZaMsg.searchForResources, "Resource", "ResourceDis", new AjxListener(this, this.resFilterSelected)));
    }

    if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.DOMAIN_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
        newMenuOpList.push(new ZaOperation(ZaOperation.SEARCH_DOMAINS, ZaMsg.SearchFilter_Domains, ZaMsg.searchForDomains, "Domain", "DomainDis", new AjxListener(this, this.domainFilterSelected)));
    }

    if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.COS_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
        newMenuOpList.push(new ZaOperation(ZaOperation.SEARCH_COSES, ZaMsg.SearchFilter_COSES, ZaMsg.searchForCOSES, "COS", "COS", new AjxListener(this, this.cosFilterSelected)));
    }
	newMenuOpList.push(new ZaOperation(ZaOperation.SEP));				
	newMenuOpList.push(new ZaOperation(ZaOperation.SEARCH_ALL, ZaMsg.SearchFilter_All, ZaMsg.searchForAll, "SearchAll", "SearchAll", new AjxListener(this, this.allFilterSelected)));		
	ZaSearchField.searchChoices.setChoices(newMenuOpList);
	
	var numCols = 3;
	var colSizes;
	if(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]) {
		numCols = 7;
		colSizes = ["59", "*", "80", "110", "28", "12", "110"];
	} else {
		colSizes = ["59", "*", "80"];
		if(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.HELP_SEARCH]) {
			numCols++;
			colSizes.push("100");
		}

                if(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.SAVE_SEARCH]) {
                        numCols++;
                        colSizes.push("28");
                }

		if(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ACCOUNT_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.DL_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ALIAS_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.RESOURCE_LIST_VIEW]) {
			numCols+=2;
			colSizes.push("12");
			colSizes.push("110");
		}
	}

    var xFormObject;
    numCols = 4;
    colSizes = ["46","3", "*", "28"];
    var entryKeyCallback= new AjxCallback(this, ZaSearchField.entryKeyHandler);
    xFormObject = {
        tableCssStyle:"width:100%;",numCols:numCols,width:"100%",
        colSizes:colSizes,
        items: [
            {type:_MENU_BUTTON_, label:null, choices:ZaSearchField.searchChoices,
                name: "searchMenuButton",
                toolTipContent:ZaMsg.searchToolTip,
                icon:"SearchAll", cssClass:"ZaSearchFieldButton DwtToolbarButton"
            },
            {type:_SPACER_, colSpan:1, cssStyle:"", cssClass:"SearchFieldVert", height: 14},
            {type: _GROUP_,  numCols: 2, width: "100%", cssClass: "oselect",
                items: [
                {type:_CATEGORIZED_DYNSELECT_, ref:ZaSearch.A_query, dataFetcherClass:ZaSearch,
                    dataFetcherMethod:ZaSearch.prototype.dynSearchField,
                    labelLocation:_NONE_,
                    width:"100%", inputWidth:"100%", editable:true, forceUpdate:true,
                    choices:new XFormChoices([], XFormChoices.OBJECT_REFERENCE_LIST, "name", "value"),
                    visibilityChecks:[],enableDisableChecks:[],
                    entryKeyMethod: entryKeyCallback,
                    onChange: function(value, event, form){
                        if (value instanceof ZaItem ) {
                            this.setInstanceValue(value.name);
                        } else {
                            this.setInstanceValue(value);
                        }
                    }
                }

            ]},
            {type:_DWT_BUTTON_, toolTipContent:ZaMsg.searchForAll, icon:"Search", name: "searchButton",
                onActivate:ZaSearchField.srchButtonHndlr, autoPadding: false,
                cssStyle:"background-color:white;",
                cssClass:"ZaSearchFieldButton   DwtToolbarButton"
            }
        ]
    };

	return xFormObject;
};

ZaSearchField.canSaveSearch = function () {
    return ZaItem.hasWritePermission ("zimbraAdminSavedSearches", 
            ZaZimbraAdmin.currentAdminAccount) ;
}

ZaSearchField.canViewSavedSearch = function () {
    return ZaItem.hasReadPermission ("zimbraAdminSavedSearches",
                ZaZimbraAdmin.currentAdminAccount) ;
}

ZaSearchField.prototype.setCurrentSavedSearch = function (currentSavedSearch) {
    this._currentSavedSearch = currentSavedSearch;
}

ZaSearchField.prototype.getCurrentSavedSearch = function() {
    if (AjxUtil.isEmpty(this._currentSavedSearch))
        this._currentSavedSearch = {};
    return this._currentSavedSearch;

}

ZaSearchField.defaultName = "Saved Search";
ZaSearchField.nameCache = {};
ZaSearchField.prototype.getDefaultSearchName = function (name) {
    if (!name)
        name = ZaSearchField.defaultName;
    if (!ZaSearchField.nameCache[name])
        ZaSearchField.nameCache[name] = [];

    var index = ZaSearchField.nameCache[name].length + 1;
    ZaSearchField.nameCache [name].push(index);

    return name + " {" + index + "}";
}

ZaSearchField.prototype.doSaveSearch = function (queryString) {
    var currentSearch = this.getCurrentSavedSearch();
    var dialog = this.getSaveAndEditSeachDialog();
    var isCreated = currentSearch.name ? false: true;
    var name = this.getDefaultSearchName(currentSearch.name);
    dialog.show(name, queryString, isCreated);
}

/**
* @param xModelMetaData - XModel metadata that describes data model
* @param xFormMetaData - XForm metadata that describes the form
**/
ZaSearchField.prototype._initForm = 
function (xModelMetaData, xFormMetaData) {
	if(xModelMetaData == null || xFormMetaData == null)
		throw new AjxException("Metadata for XForm and/or XModel are not defined", AjxException.INVALID_PARAM, "ZaSearchField.prototype._initForm");

	this._localXModel = new XModel(xModelMetaData);
	this._localXForm = new XForm(xFormMetaData, this._localXModel, null, this);
	this._localXForm.draw();
	this._drawn = true;
}

//The popup dialog to allow user to specify the name/query of the search to be saved.
ZaSaveSearchDialog = function(searchField) {
	if (!searchField) return ; 
	this._searchField = searchField
	DwtDialog.call(this, searchField.shell);
	this._okButton = this.getButton(DwtDialog.OK_BUTTON);
	this.registerCallback (DwtDialog.OK_BUTTON, ZaSaveSearchDialog.prototype.okCallback, this );
}

ZaSaveSearchDialog.prototype = new DwtDialog ;
ZaSaveSearchDialog.prototype.constructor = ZaSaveSearchDialog ;

ZaSaveSearchDialog.prototype.okCallback =
function() {
	//if(window.console && window.console.log) console.debug("Ok button of saved search dialog is clicked.");
	var savedSearchArr = [] ;
	var nameValue = this._nameInput.value;
	var queryValue =  this._queryInput.value ;

	if(!nameValue) {
		ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_SAVENAME_EMPTY);
		ZaSaveSearchDialog.prototype.show(null,queryValue);
	}
	
	savedSearchArr.push({
			name: nameValue,
			query: queryValue
		})
	
	if (this._isEditMode && this._origNameOfEdittedSearch != nameValue) { //saved search name is changed
		savedSearchArr.push({
			name: this._origNameOfEdittedSearch,
			query: ""
		}); 
	}
	
	this.savedSearchArr = savedSearchArr;
	// check whether replace existing queries
	this._checkExistSearch();

	this.popdown();

}


ZaSaveSearchDialog.prototype._checkExistSearch = function() {

	var isExist = false;
        ZaSearch.updateSavedSearch (ZaSearch.getSavedSearches());
	for(var i = 0; i < this.savedSearchArr.length; i++) {
		var searchName = this.savedSearchArr[i].name;
	        if(ZaSearch.SAVED_SEARCHES && searchName) {
        	        for(var j = 0; j < ZaSearch.SAVED_SEARCHES.length; j++) {
	                        if(ZaSearch.SAVED_SEARCHES[j].name == searchName) {
        	                        isExist = true;
                	                break;
	                        }
        	        }
	        }
	}
        if(isExist) {
		// If exist searchquries, call confirm dialog
		ZaApp.getInstance().dialogs["confirmMessageDialog"] = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON]);
                ZaApp.getInstance().dialogs["confirmMessageDialog"].setMessage(ZaMsg.Q_SAVE_REPLACE, DwtMessageDialog.WARNING_STYLE);
                ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON, this._continueDoSave, this);
                ZaApp.getInstance().dialogs["confirmMessageDialog"].registerCallback(DwtDialog.NO_BUTTON, this._cancelDoSave, this);
                ZaApp.getInstance().dialogs["confirmMessageDialog"].popup();
                
        } else {
	        ZaSearch.modifySavedSearches(this.savedSearchArr,
                        new AjxCallback(this._searchField, this._searchField.modifySavedSearchCallback )) ;
	}

        return isExist;
}


ZaSaveSearchDialog.prototype._continueDoSave = function() {

        ZaSearch.modifySavedSearches(this.savedSearchArr,
                        new AjxCallback(this._searchField, this._searchField.modifySavedSearchCallback )) ;

        ZaApp.getInstance().dialogs["confirmMessageDialog"].popdown();

}

ZaSaveSearchDialog.prototype._cancelDoSave = function() {
	ZaApp.getInstance().dialogs["confirmMessageDialog"].popdown();
	this.popup();
}


ZaSaveSearchDialog.prototype.show = function (name, query, isCreated) {
    if (!this._createUI) {
        this._nameInputId = Dwt.getNextId();
        this._queryInputId = Dwt.getNextId();
        var html = [
            "<table cellspacing='5' style='border-spacing: 7px;'>",
                "<tbody>",
                    "<tr>",
                        "<td>",
                            ZaMsg.saved_search_editor_name,
                        "</td>",
                        "<td>",
                            "<div style='overflow: auto;'>",
                                "<input type='text' size='50' maxlength='50' id='", this._nameInputId, "' />",
                            "</div>",
                        "</td>",
                    "</tr>",
                    "<tr>",
                        "<td>",
                            ZaMsg.saved_search_editor_query,
                        "</td>",
                        "<td>",
                            "<div style='overflow: auto;'>",
                                "<input type='text' size='50' maxlength='200' id='", this._queryInputId, "' />",
                            "</div>",
                        "</td>",
                    "</tr>",
                "</tbody>",
            "</table>"
        ];
		this.setContent (html.join("")) ;			
		this._createUI = true ;
	}
	
	if (!name || isCreated) {
		this.setTitle (ZaMsg.t_saved_search) ;
		this._isEditMode = false ; 
	}else{
		this.setTitle (ZaMsg.t_edit_saved_search) ;
		this._isEditMode = true;
		this._origNameOfEdittedSearch = name ;
	}
		
	this.popup() ;
	
	if (!this._nameInput) {
		this._nameInput = document.getElementById(this._nameInputId);
	}
	this._nameInput.value = name || "";
	
	if (!this._queryInput) {
		this._queryInput = document.getElementById(this._queryInputId) ;
	}
	this._queryInput.value = query || "" ;
}
}
if (AjxPackage.define("zimbraAdmin.search.view.ZaSearchListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaSearchListView
* @param parent
* @author Roland Schemers
* @author Greg Solovyev
**/
ZaSearchListView = function(parent) {

	var className = null;
	var posStyle = DwtControl.ABSOLUTE_STYLE;
	
	var headerList = this._getHeaderList(); 
	
	ZaListView.call(this, {
		parent:parent, 
		className:className, 
		posStyle:posStyle, 
		headerList:headerList,
		id:ZaId.TAB_SEARCH_MANAGE,
        scrollLoading:true
	});

	this._appCtxt = this.shell.getData(ZaAppCtxt.LABEL);
	
	
}

ZaSearchListView.prototype = new ZaListView;
ZaSearchListView.prototype.constructor = ZaSearchListView;

ZaSearchListView.prototype.toString = 
function() {
	return "ZaSearchListView";
}

ZaSearchListView.prototype.getTitle = 
function () {
	return ZaMsg.Accounts_view_title;
}

ZaSearchListView.prototype.getTabIcon =
function () {
	return "search" ;
}

ZaSearchListView.prototype.getTabTitle =
function () {
	return ZaMsg.Search_view_title ;
}

ZaSearchListView.prototype.getTabToolTip =
function () {
	var controller = ZaApp.getInstance().getSearchListController () ;
	if (controller) {
		if (controller._isAdvancedSearch && controller._currentQuery) {
			return ZaMsg.tt_tab_Search + controller._currentQuery ;
		}else if (!controller._isAdvancedSearch && controller._searchFieldInput) {
			return ZaMsg.tt_tab_Search + controller._searchFieldInput ;
		}
	}

	return ZaMsg.Search_view_title ;
}

/**
* Renders a single item as a DIV element.
*/
ZaSearchListView.prototype._createItemHtml =
function(account, now, isDragProxy) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(account, div, DwtListView.TYPE_LIST_ITEM);
	
	var idx = 0;
	html[idx++] = "<table width='100%' cellspacing='0' cellpadding='0'>";

	html[idx++] = "<tr>";

	var cnt = this._headerList.length;
	for(var i = 0; i < cnt; i++) {
		var field = this._headerList[i]._field;
		var IEWidth = this._headerList[i]._width + 4 ;

		var dwtId = Dwt.getNextId();
		var rowId = ZaId.TAB_SEARCH_MANAGE;		
		if(field == "type") {
			// type
			html[idx++] = "<td id=\"" + rowId + "_data_type_" + dwtId + "\" width=" + this._headerList[i]._width + ">";
			switch(account.type) {
				case ZaItem.ACCOUNT:
					if(account.attrs[ZaAccount.A_zimbraIsAdminAccount]=="TRUE" ) {
						html[idx++] = AjxImg.getImageHtml("AdminUser");
					} else if (account.attrs[ZaAccount.A_zimbraIsDelegatedAdminAccount] == "TRUE") {
						html[idx++] = AjxImg.getImageHtml("DomainAdminUser");
					} else if (account.attrs[ZaAccount.A_zimbraIsSystemAccount] == "TRUE") {
						html[idx++] = AjxImg.getImageHtml("SpecialAccount");
					} else if (account.attrs[ZaAccount.A_zimbraIsSystemResource] == "TRUE") {
						html[idx++] = AjxImg.getImageHtml("SystemResource");
                    } else if (account.attrs[ZaAccount.A_zimbraIsExternalVirtualAccount] == "TRUE") {
						html[idx++] = AjxImg.getImageHtml("AccountExternalVirtual");
					} else {
						html[idx++] = AjxImg.getImageHtml("Account");
					}                          
				break;
				case ZaItem.DL:
					if (account.attrs[ZaDistributionList.A_isAdminGroup] == "TRUE") {
					    html[idx++] = AjxImg.getImageHtml("DistributionListGroup");
                    }else {
                        html[idx++] = AjxImg.getImageHtml("DistributionList");
                    }	
				break;
				case ZaItem.ALIAS:
					html[idx++] = AjxImg.getImageHtml("AccountAlias");				
				break;	
				case ZaItem.RESOURCE:
					if (account.attrs[ZaResource.A_zimbraCalResType] == ZaResource.RESOURCE_TYPE_LOCATION){
						html[idx++] = AjxImg.getImageHtml("Location");
					}else {//equipment or other resource types
						html[idx++] = AjxImg.getImageHtml("Resource");
					}						
				break;	
				case ZaItem.DOMAIN:
                    var partialClassName = "Domain";
                    var domainType = account.attrs[ZaDomain.A_domainType];
                    if (domainType === "alias") {
                        partialClassName += "Alias";
                    }

					html[idx++] = AjxImg.getImageHtml(partialClassName);
                    break;
                                case ZaItem.COS: 
                                        html[idx++] = AjxImg.getImageHtml("COS");
                                break;	
				default:
					html[idx++] = account.type;
				break;
			}
			html[idx++] = "</td>";
		} else if(field == ZaAccount.A_name) {
			// name
			html[idx++] = "<td id=\"" + rowId + "_data_emailaddress_" + dwtId + "\" nowrap width=" + (AjxEnv.isIE ? IEWidth : this._headerList[i]._width) + "><nobr>";
			if(account.type == ZaItem.DOMAIN) {
				html[idx++] = AjxStringUtil.htmlEncode(account.attrs[ZaDomain.A_domainName]);
			} else {
				if(account.isExternal) {
					html[idx++] = "<span class='asterisk'>*</span>";	
				}				
				html[idx++] = AjxStringUtil.htmlEncode(account.name);
			}
			html[idx++] = "</nobr></td>";
		} else if (field == ZaAccount.A_displayname) {
			// display name
			html[idx++] = "<td id=\"" + rowId + "_data_displayname_" + dwtId + "\" nowrap width=" + (AjxEnv.isIE ? IEWidth : this._headerList[i]._width) + "><nobr>";
			html[idx++] = AjxStringUtil.htmlEncode(account.attrs[ZaAccount.A_displayname]);
			html[idx++] = "</nobr></td>";	
		} else if(field == ZaAccount.A_accountStatus) {
			// status
			html[idx++] = "<td id=\"" + rowId + "_data_status_" + dwtId + "\" width=" + (AjxEnv.isIE ? IEWidth : this._headerList[i]._width) + "><nobr>";
			var status = "";
			if (account.type == ZaItem.ACCOUNT) {
				status = ZaAccount._accountStatus(account.attrs[ZaAccount.A_accountStatus]);
			} else if (account.type == ZaItem.DL) {
				status = ZaDistributionList.getDLStatus(account.attrs[ZaDistributionList.A_mailStatus]);
			}else if ( account.type == ZaItem.RESOURCE) {
				status = ZaResource.getAccountStatusLabel(account.attrs[ZaAccount.A_accountStatus]);
			}else if (account.type == ZaItem.DOMAIN) {
				status =  ZaDomain._domainStatus(account.attrs[ZaDomain.A_zimbraDomainStatus]);
			}
			html[idx++] = status;
			html[idx++] = "</nobr></td>";		
		}else if (field == ZaAccount.A_zimbraLastLogonTimestamp) {
			// display last login time for accounts only
			html[idx++] = "<td id=\"" + rowId + "_data_lastlogontime_" + dwtId + "\" width=" + (AjxEnv.isIE ? IEWidth : this._headerList[i]._width) + "><nobr>";
			html[idx++] = AjxStringUtil.htmlEncode(ZaAccount.getLastLoginTime(account.attrs[ZaAccount.A_zimbraLastLogonTimestamp]));
			html[idx++] = "</nobr></td>";	
		} else if (field == ZaAccount.A_description) {		
			// description
			html[idx++] = "<td id=\"" + rowId + "_data_description_" + dwtId + "\" width=" + this._headerList[i]._width + "><nobr>";
			html[idx++] = AjxStringUtil.htmlEncode(
                    ZaItem.getDescriptionValue(account.attrs[ZaAccount.A_description]));
			html[idx++] = "</nobr></td>";	
		}
	}
		html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}

ZaSearchListView.prototype._getHeaderList =
function() {

	var headerList = new Array();
	var sortable = 1;
	var i = 0

	headerList[i++] = new ZaListHeaderItem("type", ZaMsg.ALV_Type_col, null, "40px", null, null, true, true);
	this._defaultColumnSortable = sortable ;
	headerList[i++] = new ZaListHeaderItem(ZaAccount.A_name, ZaMsg.CLV_Name_col, null, "220px", null,  null, true, true);
	
//idPrefix, label, iconInfo, width, sortable, sortField, resizeable, visible	
	headerList[i++] = new ZaListHeaderItem(ZaAccount.A_displayname, ZaMsg.ALV_DspName_col, null, "220px",  null, null, true, true);
	
	headerList[i++] = new ZaListHeaderItem(ZaAccount.A_accountStatus, ZaMsg.ALV_Status_col, null, "120px",  null, null, true, true);
	headerList[i++] = new ZaListHeaderItem(ZaAccount.A_zimbraLastLogonTimestamp, ZaMsg.ALV_Last_Login, null, Dwt_Button_XFormItem.estimateMyWidth(ZaMsg.ALV_Last_Login, false, 0), null, null, true, true);
	headerList[i++] = new ZaListHeaderItem(ZaAccount.A_description, ZaMsg.ALV_Description_col, null, "auto", null, null,true, true );
	
	return headerList;
}


ZaSearchListView.prototype._sortColumn = 
function(columnItem, bSortAsc) {
	try {
		ZaApp.getInstance().getAccountListController().setSortOrder(bSortAsc);
		ZaApp.getInstance().getAccountListController().setSortField(columnItem.getSortField());
		ZaApp.getInstance().getAccountListController().show();
		//ZaApp.getInstance().getAccountListController().show(searchResult);
	} catch (ex) {
		ZaApp.getInstance().getCurrentController()._handleException(ex);
	}
}

/**
* @class ZaSearchXFormView
* @contructor
* @param parent
* @author Ming Zhang
**/
function ZaSearchXFormView (parent) {
	ZaTabView.call(this, parent,"ZaSearchXFormView", "DwtTabView ZaXFormListView");
	this.initForm(ZaSearchEdit.myXModel,this.getMyXForm());
	this._localXForm.removeListener(DwtEvent.XFORMS_VALUE_CHANGED, this.formChangeListener);
//	this._localXForm.addListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, new AjxListener(this, ZaBackupsXFormView.prototype.handleXFormChange));
	this._localXForm.setController(ZaApp.getInstance());
    this._localXForm.setInstance({});
    this._bubbleList = new ZaSearchBubbleList();
   // this.widget = this.getItemsById("searchReusltList").getWidget();
}

ZaSearchXFormView.prototype = new ZaTabView();
ZaSearchXFormView.prototype.constructor = ZaSearchXFormView;
ZaTabView.XFormModifiers["ZaSearchXFormView"] = new Array();

ZaSearchXFormView.prototype.bubbleChangeCallback =
function() {
     var currentQueryValue = ZaApp.getInstance().getSearchListController()._uiContainer.getQueryFormBubbles();
     currentQueryValue = currentQueryValue ? currentQueryValue: "";
     ZaApp.getInstance().getSearchListController()._uiContainer.setQueryField(currentQueryValue);
    if(ZaApp.getInstance().getSearchListController()._uiContainer.isEnableForSearch()){
        var currentQueryType = ZaApp.getInstance().getSearchListController()._uiContainer.getSearchTypeFormBubbles();
        var searchField = ZaApp.getInstance().getSearchListController()._searchField;
        searchField.startSearch(currentQueryValue,currentQueryType,true);
    }
}

ZaSearchXFormView.prototype.addBubble = function(params,skipNotify) {
    try{
        if(params.displayName){
            params.parent = this;
            params.parentId	= this._htmlElId;
            params.queryCell = this._localXForm.getItemById(this._localXForm.getId()+"_"+ZaSearchEdit.A2_currentQuery).getContainer();
            this._bubbleList.addBubble(params);
        }
        if(!skipNotify)
            this.bubbleChangeCallback();
    }catch(ex){
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaSearchXFormView.prototype.addBubble");
    }
}

ZaSearchXFormView.prototype._removeBubble = function(bubbleId, skipNotify) {
    var bubble = DwtControl.fromElementId(bubbleId);
	if (!bubble) {
        return;
    }
	this._bubbleList.removeBubble(bubble);
	bubble.dispose();

    if(!skipNotify)
        this.bubbleChangeCallback();
}

ZaSearchXFormView.removeBubble = function(bubbleId,parentId,skipNotify) {
    try{
        var searchXFormView =  DwtControl.ALL_BY_ID[parentId];
        if(searchXFormView){
            searchXFormView._removeBubble(bubbleId, skipNotify);
        }
    }catch(ex){
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaSearchXFormView.removeBubble");
    }
}

ZaSearchXFormView.prototype.removeAllBubbles =
function (skipNotify) {
    var len = this._bubbleList.size();
    for(var i = len-1; i>=0; i--){
        var bubble = this._bubbleList.getBubble(i);
        if(bubble){
            this._bubbleList.removeBubble(bubble);
	        bubble.dispose();
        }
    }
    if(!skipNotify)
        this.bubbleChangeCallback();
}

ZaSearchXFormView.prototype.getQueryFormBubbles = function(){
    return this._bubbleList.getQueryFormBubbles();
}

ZaSearchXFormView.prototype.getSearchTypeFormBubbles = function(){
    return this._bubbleList.getSearchTypeFormBubbles();
}

ZaSearchXFormView.prototype.isEnableForSearch = function(){
    return this._bubbleList.isEnableForSearch();
}

ZaSearchXFormView.labelSelectionListener = function (ev) {
	if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		if(ev.item) {
			this._selectedItem = ev.item;
			ZaApp.getInstance().getAccountViewController().show(ev.item);
		}
	}
}

ZaSearchXFormView.prototype.getQueryField = function () {
    return this._localXForm.getInstanceValue(ZaSearchEdit.A2_currentQuery);
}

ZaSearchXFormView.prototype.setQueryField = function (query) {
    this._localXForm.setInstanceValue(query, ZaSearchEdit.A2_currentQuery);
}

ZaSearchXFormView.prototype.setQueryFieldVisible = function(visible){
    this.queryVisible = visible ;
}

ZaSearchXFormView.createPopupMenu = function (listWidget) {
	/*ZaApp.getInstance().getCurrentController()._actionMenu = listWidget.actionMenu = new ZaPopupMenu(listWidget, "ActionMenu", null, ZaApp.getInstance().getCurrentController()._popupOperations);
	listWidget.addActionListener(new AjxListener(ZaApp.getInstance().getCurrentController(), ZaApp.getInstance().getCurrentController().listActionListener));
	listWidget.xFormItem = this;*/
    this.getForm().parent.widget = listWidget;
}

ZaSearchXFormView.getCustomHeight = function () {
	try {
		var form = this.getForm();
		var formParentElement = this.getForm().parent.getHtmlElement();
		var totalHeight = parseInt(formParentElement.style.height);
		if(isNaN(totalHeight)) {
			totalHeight = formParentElement.clientHeight ? formParentElement.clientHeight : formParentElement.offsetHeight;
		}
		var formHeaders = form.getItemsById("xform_header");
		var headerHeight = 0;
		if(formHeaders) {
			var formHeader = formHeaders[0];
			if(formHeader) {
				headerHeight = formHeader.getElement().clientHeight ? formHeader.getElement().clientHeight : formHeader.getElement().offsetHeight;
			}
		}
		if(totalHeight<=0)
			return "100%";
		else
			return totalHeight - headerHeight - 2;
	} catch (ex) {

	}
	return "100%";
};

ZaSearchXFormView.getCustomWidth = function () {
	try {

		var formParentElement = this.getForm().parent.getHtmlElement();
		var totalWidth = parseInt(formParentElement.style.width);
		if(isNaN(totalWidth)) {
			totalWidth = formParentElement.clientWidth ? formParentElement.clientWidth : formParentElement.offsetWidth;
		}
		//var tabBarHeight = this.getForm().getItemsById("xform_tabbar")[0].getElement().offsetHeight;
		if(totalWidth<=0)
			return "100%";
		else
			return totalWidth;
	} catch (ex) {

	}
	return "100%";
};

ZaSearchXFormView.doQuickSearch = function () {
    if(ZaApp.getInstance().getSearchListController()._uiContainer)
        ZaApp.getInstance().getSearchListController()._uiContainer.bubbleChangeCallback();
}

ZaSearchXFormView.doSaveSearch = function () {
    var currentQueryValue = ZaApp.getInstance().getSearchListController()._uiContainer.getQueryFormBubbles();
    currentQueryValue = currentQueryValue ? currentQueryValue: "";
    ZaApp.getInstance().getSearchListController()._searchField.doSaveSearch(currentQueryValue);
}


ZaSearchXFormView.isSearchFieldVisible = function(){
   var searchContainer = ZaApp.getInstance().getSearchListController()._uiContainer;
   if(searchContainer){
       if(!searchContainer.queryVisible )
         return false;
   }
   return true;
}

ZaSearchXFormView.myXFormModifier = function(xFormObject) {
	xFormObject.tableCssStyle="width:100%;overflow:auto;";


	var headerList = ZaSearchListView.prototype._getHeaderList();
	xFormObject.items = [
		{type:_GROUP_, visibilityChecks:[ZaSearchXFormView.isSearchFieldVisible],
            visibilityChangeEventSources:[ZaSearchEdit.A2_currentQuery],
            colSizes:["*","70px","100px"], colSpan:2, numCols:3, width:"100%", id:"xform_header",
			items:[
				{type:_OUTPUT_, ref:ZaSearchEdit.A2_currentQuery,
					containerCssClass:"search_field_container",
					cssStyle:"display:none;"
				},
				{type:_DWT_BUTTON_, label:ZaMsg.LBL_QuickSearch, name: "SearchButton", autoPadding: false,
						onActivate:ZaSearchXFormView.doQuickSearch, visibilityChecks:[], enableDisableChecks:[]},
				{type:_DWT_BUTTON_, label:ZaMsg.LBL_SaveSearch, name: "saveSearchButton",  autoPadding: false,
						onActivate:ZaSearchXFormView.doSaveSearch, visibilityChecks:[],
                        visibilityChecks:["(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.SAVE_SEARCH] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI])"],
                        enableDisableChangeEventSources:[ZaSearchEdit.A2_currentQuery],enableDisableChecks:[[XForm.checkInstanceValueNotEmty,ZaSearchEdit.A2_currentQuery]]}
			]
		},

	    {ref:ZaSearchEdit.A2_searchResult, colSpan:2,cssClass: "ZaFullPageXFormListView", id:"searchReusltList",
	    	type:_DWT_LIST_,
            createPopupMenu: ZaSearchXFormView.createPopupMenu,
	   		multiselect:true, widgetClass:ZaSearchListView,headerList:headerList,getCustomHeight:ZaSearchXFormView.getCustomHeight,
	   		getCustomWidth:ZaSearchXFormView.getCustomWidth, visibilityChecks:[], enableDisableChecks:[]
	   	}
	];
};
ZaTabView.XFormModifiers["ZaSearchXFormView"].push(ZaSearchXFormView.myXFormModifier);

ZaSearchEdit = function () {
}

ZaSearchEdit.A2_currentQuery = "currentQuery";
ZaSearchEdit.A2_searchResult = "searchResult";

ZaSearchEdit.myXModel = {
    items: [
        {id: ZaSearchEdit.A2_currentQuery, type:_STRING_},
        {id: ZaSearchEdit.A2_searchResult, type:_LIST_}
    ]
}
}
if (AjxPackage.define("zimbraAdmin.search.view.ZaSearchBuilderToolbarView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
 
/**
* @class ZaSearchBuilderToolbarView
* @contructor ZaSearchBuilderToolbarView
* Class to create the advance search options toolbar view
* @author Charles Cao
**/
ZaSearchBuilderToolbarView = function(parent){
	//toolbar operations
	this._toolbarOperations = {} ;
	this._toolbarOrder = [];
	this._toolbarOperations[ZaOperation.SEARCH_BY_BASIC] = new ZaOperation(ZaOperation.SEARCH_BY_BASIC, ZaMsg.searchByBasic, ZaMsg.tt_searchByBasic, "SearchAll", "SearchAll", new AjxListener(this, this.basicTypeSelectHndlr));
	this._toolbarOperations[ZaOperation.SEARCH_BY_ADDESS_TYPE] = new ZaOperation(ZaOperation.SEARCH_BY_ADDESS_TYPE, ZaMsg.searchByAddressType, ZaMsg.tt_searchByAddressType, "SearchAll", "SearchAll", new AjxListener(this, this.objTypeSelectHndlr));
	//if (!ZaSettings.isDomainAdmin) { //hide domain and server feature for the domain admin
		DBG.println(AjxDebug.DBG1, "Domain Admin - No advanced cross domain or server search");
		this._toolbarOperations [ZaOperation.SEARCH_BY_DOMAIN] = new ZaOperation(ZaOperation.SEARCH_BY_DOMAIN, ZaMsg.searchByDomain, ZaMsg.tt_searchByDomain, "Domain", "DomainDis", new AjxListener(this, this.domainSelectHndlr));
		this._toolbarOperations [ZaOperation.SEARCH_BY_SERVER] = new ZaOperation(ZaOperation.SEARCH_BY_SERVER, ZaMsg.searchByServer, ZaMsg.tt_searchByServer, "Server", "ServerDis", new AjxListener(this, this.serverSelectHndlr));
	//}
	this._toolbarOperations [ZaOperation.SEARCH_BY_ADVANCED] = new ZaOperation(ZaOperation.SEARCH_BY_ADVANCED, ZaMsg.searchByAdvanced, ZaMsg.tt_searchByAdvanced, "SearchAll", "SearchAll", new AjxListener(this, this.advancedSelectHndlr));
	this._toolbarOperations [ZaOperation.SEP] = new ZaOperation(ZaOperation.SEP);
	this._toolbarOperations [ZaOperation.SEARCH_BY_REMOVE_ALL] = new ZaOperation(ZaOperation.SEARCH_BY_REMOVE_ALL, ZaMsg.searchByRemoveAll, ZaMsg.tt_searchByRemoveAll, null, null, new AjxListener(this, this.removeSelectHndlr), null, null, "ZaSearchBuilderOptionRemoveAll");
	this._toolbarOperations[ZaOperation.SEARCH_BY_COS] = new ZaOperation(ZaOperation.SEARCH_BY_COS, ZaMsg.searchByCOS, ZaMsg.tt_searchByCOS, "COS", "COS", new AjxListener(this, this.cosSelectHndlr));
	this._toolbarOperations [ZaOperation.NONE] = new ZaOperation(ZaOperation.NONE);
	this._toolbarOperations [ZaOperation.CLOSE] = new ZaOperation (ZaOperation.CLOSE, ZaMsg.TBB_Close, ZaMsg.tt_advanced_search_close, "Close", "CloseDis", new AjxListener(this, this.closeHndlr));
	
	this._toolbarOrder.push(ZaOperation.SEARCH_BY_BASIC);
	
	if(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI] 
		|| ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ACCOUNT_LIST_VIEW]
		|| ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.DL_LIST_VIEW]
		|| ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.ALIAS_LIST_VIEW]
		|| ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.RESOURCE_LIST_VIEW])
		this._toolbarOrder.push(ZaOperation.SEARCH_BY_ADDESS_TYPE);
	
	if(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.DOMAIN_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI])
		this._toolbarOrder.push(ZaOperation.SEARCH_BY_DOMAIN);
	
	if(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.SERVER_LIST_VIEW] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI])
		this._toolbarOrder.push(ZaOperation.SEARCH_BY_SERVER);
		
	this._toolbarOrder.push(ZaOperation.SEARCH_BY_ADVANCED);
        this._toolbarOrder.push(ZaOperation.SEARCH_BY_COS);
	this._toolbarOrder.push(ZaOperation.SEP);
	this._toolbarOrder.push(ZaOperation.SEARCH_BY_REMOVE_ALL);
	this._toolbarOrder.push(ZaOperation.NONE);
	this._toolbarOrder.push(ZaOperation.CLOSE);	
	ZaToolBar.call(this, parent, this._toolbarOperations, this._toolbarOrder, null, "ZaSearchBuilderToolBar" );
	
	
	this._app = ZaApp.getInstance();
	this.zShow(false);
	//this.setVisible (false);

	this._controller = ZaApp.getInstance().getSearchBuilderController () ;
	//this._searchBuilder
	this._view = {};
}

ZaSearchBuilderToolbarView.prototype = new ZaToolBar ;
ZaSearchBuilderToolbarView.prototype.constructor = ZaSearchBuilderToolbarView;

ZaSearchBuilderToolbarView.prototype.toString = 
function() {
	return "ZaSearchBuilderToolbarView";
}

ZaSearchBuilderToolbarView.prototype.basicTypeSelectHndlr =
function (event) {
	//DBG.println (AjxDebug.DBG1, "Object Type Selected ... ");	
	this._controller.addOptionView(ZaSearchOption.BASIC_TYPE_ID);
}

ZaSearchBuilderToolbarView.prototype.objTypeSelectHndlr =
function (event) {
	//DBG.println (AjxDebug.DBG1, "Object Type Selected ... ");	
	this._controller.addOptionView(ZaSearchOption.OBJECT_TYPE_ID);
	
	//disable the button since we only allow to add one time
	event.item.setEnabled (false);
}

ZaSearchBuilderToolbarView.prototype.domainSelectHndlr =
function (event) {
	//DBG.println (AjxDebug.DBG1, "Domain Selected ... ");	
	this._controller.addOptionView(ZaSearchOption.DOMAIN_ID);
	
}

ZaSearchBuilderToolbarView.prototype.serverSelectHndlr =
function (event) {
	//DBG.println (AjxDebug.DBG1, "Server Selected ... ");	
	this._controller.addOptionView(ZaSearchOption.SERVER_ID);
	this._controller.listAllServers ();
	//disable the button since we show all the server at one time
	event.item.setEnabled (false);
}

ZaSearchBuilderToolbarView.prototype.advancedSelectHndlr =
function (event) {
	//if(window.console && window.console.log) console.log("Advanced Attributes search builder button is clicked.") ;
	this._controller.addOptionView (ZaSearchOption.ADVANCED_ID) ;
	//this._controller.listAll
}

ZaSearchBuilderToolbarView.prototype.cosSelectHndlr =
function (event) {
        this._controller.addOptionView(ZaSearchOption.COS_ID);
}

ZaSearchBuilderToolbarView.prototype.removeSelectHndlr =
function (event) {
	//DBG.println (AjxDebug.DBG1, "Server Selected ... ");	
	//1) clear all the selections
	this._controller.removeAllOptionViews();
	this._controller.setQuery();
}

//clear all the options and close the search builder view
ZaSearchBuilderToolbarView.prototype.closeHndlr =
function (event) {
	DBG.println (AjxDebug.DBG3, "Close ... ");
	
	this._controller.toggleVisible ();
	ZaApp.getInstance()._appViewMgr.showSearchBuilder (this._controller.isSBVisible());
	
	//clear the search field
	this._controller.setQuery ();
	
	//reset the advanced search button tooltip
	ZaApp.getInstance().getSearchListController()._searchField.setTooltipForSearchBuildButton (ZaMsg.tt_advanced_search_open);
}
}
if (AjxPackage.define("zimbraAdmin.search.view.ZaSearchOptionView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
 
/**
 * @class ZaSearchOptionView
 * @contructor ZaSearchBuilderOptionView
 * @author Charles Cao
 * @param optionId : the Search Option type ID
 * @param width : the width of the option view
 * @param position : the current option view's array index in the option view container
 * 
 * Class to create the advance search option picker view
 * 
 */

ZaSearchOptionView = function(parent,optionId, width, position){
	DwtComposite.call(this, parent, "ZaSearchOptionView", Dwt.ABSOLUTE_STYLE, true);		
	this._width = width || ZaSearchOptionView.WIDTH ;
	//var height = parent.getH () - 5;
	//var height = parent.getH() || ZaSearchOptionView.HEIGHT ; //parent.getH() doesn't work well in IE at the initialization time
	var height = ZaSearchOptionView.HEIGHT ;
	DBG.println(AjxDebug.DBG3, "Height of ZaSearchOptionView = " + height);
	var x = parent.getNextOptionX();
	var y = 0 ;
	this.setBounds (x, y, this._width, height);
	this._app = ZaApp.getInstance();
	this._position = position ;
	this._optionId = optionId ;
	this._controller = ZaApp.getInstance().getSearchBuilderController () ;
	//this._label = new DwtLabel (this._header, DwtLabel.IMAGE_LEFT | DwtLabel.ALIGN_LEFT);
	this._label;
	if (optionId == ZaSearchOption.OBJECT_TYPE_ID) {
		this._label = new ZaOperation (ZaOperation.LABEL, ZaMsg.searchByAddressType, null, "SearchAll", "SearchAll");
	}else if (optionId == ZaSearchOption.DOMAIN_ID) {
		this._label = new ZaOperation(ZaOperation.LABEL, ZaMsg.SearchFilter_Domains, null, "Domain", "DomainDis");
	}else if (optionId == ZaSearchOption.SERVER_ID) {
		this._label = new ZaOperation(ZaOperation.LABEL, ZaMsg.searchByServer, null, "Server", "ServerDis");
	}else if (optionId == ZaSearchOption.BASIC_TYPE_ID) {
		this._label = new ZaOperation (ZaOperation.LABEL, ZaMsg.searchByBasic, null, "SearchAll", "SearchAll");
	}else if (optionId == ZaSearchOption.ADVANCED_ID) {
		this._label = new ZaOperation (ZaOperation.LABEL, ZaMsg.searchByAdvanced, null, "SearchAll", "SearchAll") ;
	}else if (optionId == ZaSearchOption.COS_ID) {
                this._label = new ZaOperation (ZaOperation.LABEL, ZaMsg.searchByCOS, null, "COS", "COS");
        }
	
	var tb_items = [];
	tb_items.push(this._label);	
	tb_items.push(new ZaOperation(ZaOperation.NONE));
	tb_items.push(new ZaOperation(ZaOperation.CLOSE, null, ZaMsg.ALTBB_Close_tt, "Close", "CloseDis", new AjxListener(this, this.closeButtonListener)));    	
	
	this._header = new ZaToolBar (this, tb_items, null, null, "DwtToolBar") ;
	//this._header.setSize (this._width, 25); //set the width, will lost the right border with the proper color.
	this._header.setSize (this._width, ZaSearchOptionView.HEADER_HEIGHT);
	this.initForm (ZaSearchOption.getObjectTypeXModel(optionId), ZaSearchOption.getObjectTypeXForm (optionId, height), ZaSearchOption.getDefaultInstance(optionId));
}

ZaSearchOptionView.prototype = new DwtComposite ;
ZaSearchOptionView.prototype.constructor = ZaSearchOptionView ;

ZaSearchOptionView.HEADER_HEIGHT = 28 ;
ZaSearchOptionView.WIDTH = 200 ;
ZaSearchOptionView.BASIC_OPTION_WIDTH = 200 ;
ZaSearchOptionView.DOMAIN_OPTION_WIDTH = 280;
ZaSearchOptionView.COS_OPTION_WIDTH = 280;
ZaSearchOptionView.ADVANCED_OPTION_WIDTH = 320 ;
ZaSearchOptionView.MARGIN = 0 ;
ZaSearchOptionView.HEIGHT = 225 ;

ZaSearchOptionView.prototype.closeButtonListener = 
function (event){
	DBG.println (AjxDebug.DBG3, "Close options ... ");	
	//splice from option view array, update the query and dispose the component, 
	this._controller.removeOptionView(this._position, true) ;
}

ZaSearchOptionView.prototype.setPosition = 
function (p) {
	this._position = p ;	
}

ZaSearchOptionView.prototype.getPosition = 
function () {
	return this._position ;	
}

ZaSearchOptionView.prototype.initForm = 
function (xModelMetaData, xFormMetaData, xFormInstance) {
	if(xModelMetaData == null || xFormMetaData == null)
		throw new AjxException("Metadata for XForm and/or XModel are not defined", AjxException.INVALID_PARAM, "ZaSearchOptionView.prototype.initForm");

	this._localXModel = new XModel(xModelMetaData);
	//
	this._localXForm = new XForm(xFormMetaData, this._localXModel, xFormInstance , this);
	this._localXForm.setController(ZaApp.getInstance());
	this._localXForm.draw();
	this._drawn = true;
}
}
if (AjxPackage.define("zimbraAdmin.search.view.ZaSearchBuilderView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
 
/**
* @class ZaSearchBuilderView
* @contructor ZaSearchBuilderView
* Class to create the advance search options panel view
* @author Charles Cao
**/

ZaSearchBuilderView = function(parent){
	DwtComposite.call(this, parent, "ZaSearchBuilderView", Dwt.ABSOLUTE_STYLE, true);		
	var visible = false ;
	this.zShow(visible);
	this._app = ZaApp.getInstance();
	
	this._option_next_x = 0;
	this._controller = ZaApp.getInstance().getSearchBuilderController () ;
	this.setScrollStyle(DwtControl.SCROLL);
}

ZaSearchBuilderView.prototype = new DwtComposite();
ZaSearchBuilderView.prototype.constructor = ZaSearchBuilderView;

ZaSearchBuilderView.prototype.toString = 
function() {
	return "ZaSearchBuilderView";
}

ZaSearchBuilderView.prototype.getNextOptionX = 
function (position) {
	if (position == null) {
		position = this._controller._option_views.length ;
	}
	if ( position <= 0 ){
		return ZaSearchOptionView.MARGIN; 
	}else{
		var prevOption = this._controller._option_views[position -1];
		return prevOption.getX () + prevOption.getW () + ZaSearchOptionView.MARGIN;
	}
}
}
if (AjxPackage.define("zimbraAdmin.search.view.ZaSearchOptionDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 10/11/11
 * Time: 3:42 AM
 * To change this template use File | Settings | File Templates.
 */

ZaSearchOptionDialog = function(parent, optionId, w, h, contextId) {
	if (arguments.length == 0) return;
	var clsName = "ZaSearchOptionDialog";
	if(!this._standardButtons)
		this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];
	if(!this._extraButtons) {
		this._extraButtons = [];
	}

	this._contextId = contextId? contextId:ZaId.DLG_UNDEF;
    this._optionId = optionId;
	DwtDialog.call(this, {
		parent:parent,
		className:clsName,
		standardButtons:this._standardButtons,
		extraButtons:this._extraButtons,
        mode: DwtBaseDialog.MODELESS,
		id:ZaId.getDialogId(this._contextId)
	});

    this._controller = ZaApp.getInstance().getSearchBuilderController () ;
	this._app = ZaApp.getInstance();
	this._localXForm = null;
	this._localXModel = null;
	this._drawn = false;
	this._containedObject = null;

	this._pageDiv = document.createElement("div");
	this._pageDiv.className = "ZaXWizardDialogPageDiv";

	Dwt.setSize(this._pageDiv, w, h);
	this._pageDiv.style.overflow = "auto";
	this._pageDiv.style["overflow-y"] = "auto";
	this._pageDiv.style["overflow-x"] = "auto";

	this._createContentHtml();
    this.initForm(ZaSearchOption.getNewObjectTypeXModel(optionId), ZaSearchOption.getNewObjectTypeXForm (optionId), ZaSearchOption.getDefaultInstance(optionId));

	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_CHANGED, new AjxListener(this, this._handleXFormChange));
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, new AjxListener(this, this._handleXFormError));
}

ZaSearchOptionDialog.prototype = new ZaXDialog;
ZaSearchOptionDialog.prototype.constructor = ZaSearchOptionDialog;
ZaSearchOptionDialog.TEMPLATE = "admin.Widgets#ZaSeachOptionDialog";

ZaSearchOptionDialog.prototype._createHtmlFromTemplate =
function(templateId, data) {
	DwtDialog.prototype._createHtmlFromTemplate.call(this, ZaSearchOptionDialog.TEMPLATE, data);
};

ZaSearchOptionDialog.prototype.getMyXForm =
function(entry) {
}

ZaSearchOptionDialog.prototype._handleXFormChange = function (ev) {
	this._button[DwtDialog.OK_BUTTON].setEnabled(true);
};

ZaSearchOptionDialog.prototype._handleXFormError = function (ev) {
	this._button[DwtDialog.OK_BUTTON].setEnabled(false);
};
}
if (AjxPackage.define("zimbraAdmin.search.view.ZaSearchBubbleList")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: jxy
 * Date: 01/09/12
 * Time: 11:22 AM
 * To change this template use File | Settings | File Templates.
 */
ZaSearchBubbleList = function() {
     this._bubbleList = new AjxVector();
}

ZaSearchBubbleList.prototype.constructor = ZaSearchBubbleList;

ZaSearchBubbleList.prototype.toString =
function() {
    return "ZaSearchBubbleList";
}

ZaSearchBubbleList.prototype.size =
function(){
    return this._bubbleList.size();
}

ZaSearchBubbleList.prototype.getQueryFormBubbles =
function() {
    var query = "";
    var num = 0;
    this._filterQuery = {};
    for(var i=0 ; i< this._bubbleList.size();i++){
        var currentBubble = this._bubbleList.get(i);
        var filter = currentBubble.query;
        if( filter != null && filter.length > 0){
            if (currentBubble.type == 2) {
                if (!this._filterQuery[currentBubble.optionalType]) {
                    this._filterQuery[currentBubble.optionalType] = [];
                }
                this._filterQuery[currentBubble.optionalType].push(filter);
            }  else {
                query += filter;
            }
            num++;
        }

    }

    var filterQueryResult;
    var filterNum;
    for (var optionType in this._filterQuery) {
        filterQueryResult = "";
        filterNum = 0;
        for(var i=0; i < this._filterQuery[optionType].length; i++) {
            filterQueryResult += this._filterQuery[optionType][i];
            filterNum ++;
        }

        if (filterNum > 1)
            filterQueryResult =  "(|" + filterQueryResult + ")" ;

        if (filterQueryResult != null && filterQueryResult.length > 0) {
            num++;
            query += filterQueryResult;
        }
    }
    if(num > 1)
        query = "(&" + query + ")" ;

    return query;
}

ZaSearchBubbleList.prototype.isEnableForSearch =
function(){
    var ret = false;
    for(var i=0 ; i< this._bubbleList.size();i++){
        ret = ret || this._bubbleList.get(i).disableForSearch;
    }
    return !ret;
}

ZaSearchBubbleList.prototype.getSearchTypeFormBubbles =
function(){
    var searchTypeList = new Array();;
    var key = new Array();
    var data = {};

    var num = 0;
    for(var i=0 ; i< this._bubbleList.size();i++){
        var searchType = this._bubbleList.get(i).searchType;
        if(!AjxUtil.isEmpty(searchType)){
            for(var j = 0; j < searchType.length; j++){
                if (data[searchType[j]] == null){
                    data[searchType[j]] = 1;
                    key.push(searchType[j])
                }
                else
                    data[searchType[j]] ++;
            }
            num++;
        }
    }

    for(var i=0; i< key.length;i++){
        if(data[key[i]] == num)
            searchTypeList.push(key[i]);
    }
    if(!AjxUtil.isEmpty(searchTypeList))
        return searchTypeList;
}

ZaSearchBubbleList.prototype.getBubble =
function(index){
    return this._bubbleList.get(index);
}

ZaSearchBubbleList.prototype.getBubbleByDisplayName =
function(displayName){
    if(!displayName) return;
    for(var i=0 ; i< this._bubbleList.size();i++){
        if(this._bubbleList.get(i).displayName == displayName)
            return this._bubbleList.get(i);
    }
}

ZaSearchBubbleList.prototype._addBubble =
function (bubble,index) {
    if(!bubble) return;
    this._bubbleList.add(bubble,index);
}

ZaSearchBubbleList.prototype.addBubble =
function (params) {
    var bubble;
    if(params.unique){
        bubble = this.getBubbleByDisplayName(params.displayName);
        if(bubble)
            bubble.update(params);
        else {
            bubble =  new ZaSearchBubble(params);
            this._addBubble(bubble);
        }
    }else {
         bubble =  new ZaSearchBubble(params);
         this._addBubble(bubble);
    }
}


ZaSearchBubbleList.prototype.removeBubble =
function (bubble) {
    if(!bubble) return;
    this._bubbleList.remove(bubble);
}

ZaSearchBubbleList.prototype.removeAllBubbles =
function () {
    this._bubbleList.removeAll();
}


ZaSearchBubble = function(params) {
    params = params || {};
    params.id = this.id =  Dwt.getNextId();
	params.className =this.className = params.className || "addrBubble";

	DwtControl.call(this, params);

	this.type = params.type; //1:search 2:searchoption 3:searchsave
    if (params.type == 2) {
        this.optionalType = params.optionalType || 1;
    }
    this.query = params.query;
    this.searchType = params.searchType;
    this.parentCell = params.queryCell;
    this.parentId =  params.parentId;
    this.unique = params.unique || false;  //only one bubble
    this.disableForSearch = params.disableForSearch || false;
    this.displayName = this.getDisplayName(params.displayName);

    this._createHtml();

    this._setEventHdlrs([DwtEvent.ONMOUSEOVER]);
    this.addListener(DwtEvent.ONMOUSEOVER, new AjxListener(this, this._mouseOverListener));

}

ZaSearchBubble.prototype = new DwtControl;
ZaSearchBubble.prototype.constructor = ZaSearchBubble;
ZaSearchBubble.prototype.toString =
function() {
    return "ZaSearchBubble";
}

ZaSearchBubble.displayNameList = new Object();

ZaSearchBubble.prototype.getDisplayName =
function (displayName) {
    var ret ;
    if (!ZaSearchBubble.displayNameList[displayName]||this.unique) {
        ZaSearchBubble.displayNameList[displayName] = 1;
        ret = displayName;
    } else {
        ret  = displayName + " " + ZaSearchBubble.displayNameList[displayName];
        ZaSearchBubble.displayNameList[displayName] ++;
    }
    return ret;
}

ZaSearchBubble.prototype._createElement =
function() {
	return document.createElement("SPAN")
}

ZaSearchBubble.prototype._createHtml =
function() {
	var el = this.getHtmlElement();
    var removeLinkId = this.id + "_remove";
    var removeLink = 'ZaSearchXFormView.removeBubble("' + this.id + '","'+ this.parentId +'");';
    var style = "display:inline-block;cursor:pointer;";
    var closeText = AjxImg.getImageHtml("BubbleDelete", style, "id='" + removeLinkId + "' onclick='" + removeLink + "'");
	var displayName = this.displayName && this.displayName.toString();
	var html = "<span id='"+this.id+"_displayName'>" + AjxStringUtil.htmlEncode(displayName) + "</span>" + closeText;
	el.innerHTML = html;
    this.reparentHtmlElement(this.parentCell);
}

ZaSearchBubble.prototype.setDisplayName =
function (displayName){
    this.displayName = displayName;
}

ZaSearchBubble.prototype.setQuery =
function (query){
    this.query = query;
}

ZaSearchBubble.prototype.setType =
function (type){
    this.type = type;
}

ZaSearchBubble.prototype.update =
function (params){
    this.type = params.type;
    this.query = params.query;
}

ZaSearchBubble.prototype._mouseOverListener =
function(ev) {
	this._mouseOverAction(ev);
}

ZaSearchBubble.prototype._mouseOverAction =
function(ev) {
	var toolTipContent = this.getToolTip();
	this.setToolTipContent(toolTipContent);
	return true;
}

ZaSearchBubble.prototype.getToolTip =
function(){
    return AjxStringUtil.htmlEncode(this.query);
}

}
if (AjxPackage.define("zimbraAdmin.status.view.ZaServicesListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaServicesListView
* @param parent
* @author Roland Schemers
* @author Greg Solovyev
**/
ZaServicesListView = function(parent,clsName) {
	if (arguments.length == 0) return;

	var className = clsName || "ZaServicesListView";
	var posStyle = DwtControl.ABSOLUTE_STYLE;
	
	var headerList = this._getHeaderList();
	
	ZaListView.call(this, {
		parent:parent, 
		className:className, 
		posStyle:posStyle, 
		headerList:headerList,
		id:ZaId.TAB_STATUS_MANAGE
	});

	this._appCtxt = this.shell.getData(ZaAppCtxt.LABEL);
	
}

ZaServicesListView.prototype = new ZaListView;
ZaServicesListView.prototype.constructor = ZaServicesListView;

ZaServicesListView.STYLE_CLASS = "Row";
ZaServicesListView.SELECTED_STYLE_CLASS = "Row" + "-" + DwtCssStyle.SELECTED;

ZaServicesListView.prototype.toString = 
function() {
	return "ZaServicesListView";
}

ZaServicesListView.prototype.getTitle = 
function () {
	return ZaMsg.Status_view_title;
}

ZaServicesListView.prototype.getTabIcon = 
function () {
	return "Status" ;
}
/**
* Renders a single item as a DIV element.
*/
ZaServicesListView.prototype._createItemHtml =
function(item, now, isDragProxy) {
	var html = new Array(50);
	var	div = document.createElement("div");
	this.associateItemWithElement(item, div, DwtListView.TYPE_LIST_ITEM);

	var idx = 0;
	div[DwtListView._STYLE_CLASS] = ZaServicesListView.STYLE_CLASS;
	div[DwtListView._SELECTED_STYLE_CLASS] = ZaServicesListView.SELECTED_STYLE_CLASS;
	div.className = ZaServicesListView.STYLE_CLASS;
	
	idx = ZaServicesListView._writeElement.call(this, html, idx, item, false);
	if (item.serviceMap != null) {
		for (var i in item.serviceMap) {
			idx = ZaServicesListView._writeElement.call(this, html, idx, item.serviceMap[i], true, i);
		}
	}
	div.innerHTML = html.join("");
	div.style.height="auto";
	return div;
}

ZaServicesListView._writeElement =
function(html, idx, item, onlyServiceInfo, serviceName) {
	html[idx++] = "<table ";
	if (onlyServiceInfo) {
		html[idx++] = "class='ZaServicesListView_table'";
	} else {
		html[idx++] = "class='ZaServicesListView_server_table'";
	}

	html[idx++] = "_serviceInfo=";
	html[idx++] = onlyServiceInfo;
	html[idx++] = ">";
	html[idx++] = "<tr>";
	var cnt = this._headerList.length;
	for(var i = 0; i < cnt; i++) {
		var field = this._headerList[i]._field;
		if(field == ZaStatus.PRFX_Server) {
			if (!onlyServiceInfo) {
				html[idx++] = "<td width=";
				html[idx++] = (this._headerList[i]._width);
				html[idx++] = "><table cellpadding=0 cellspacing=0 border=0 style='table-layout:fixed;'>";
				html[idx++] = "<tr>";

				html[idx++] = "<td width=\"14px\" aligh=left onclick=\'javascript:ZaServicesListView.expand(event, this)\'>";
				html[idx++] = AjxImg.getImageHtml("NodeExpanded");
				html[idx++] = "</td>";
			
				html[idx++] = "<td align=left width=20>"
				if(item.status == 1) {
					html[idx++] = AjxImg.getImageHtml("Check");
				} else if (item.status == 0){
					html[idx++] = AjxImg.getImageHtml("Cancel");
				} else {
					html[idx++] = "&nbsp;";
				}
				html[idx++] = "</td>";			
                                html[idx++] = "<td>";   
				html[idx++] = AjxStringUtil.htmlEncode(item.name);

				html[idx++] = "</td>";
				html[idx++] = "</tr></table></td>";
			} else {
				html[idx++] = "<td width=";
				html[idx++] = (this._headerList[i]._width);
				html[idx++] = " aligh=left>";
				html[idx++] = AjxStringUtil.htmlEncode(" ");
				html[idx++] = "</td>";
			}

		} else if(field == ZaStatus.PRFX_Service) {
			if (onlyServiceInfo) {
				html[idx++] = "<td width=";
				html[idx++] = this._headerList[i]._width;
				html[idx++] = " ><table cellpadding=0 cellspacing=0 border=0><tr><td width=20>";
				if(item.status==1) {
					html[idx++] = AjxImg.getImageHtml("Check");
				} else {
					html[idx++] = AjxImg.getImageHtml("Cancel");
				}				
				html[idx++] = "</td><td>";
				html[idx++] = AjxStringUtil.htmlEncode(serviceName);
				html[idx++] = "</td></tr></table></td>";
			} else {
				html[idx++] = "<td width=";
				html[idx++] = this._headerList[i]._width;
				html[idx++] = " aligh=left>";

				html[idx++] = AjxStringUtil.htmlEncode(" ");
				html[idx++] = "</td>";
			}

		} else if(field == ZaStatus.PRFX_Time) {
			html[idx++] = "<td width=";
			html[idx++] = this._headerList[i]._width;
			html[idx++] = " aligh=left>";
			if (onlyServiceInfo) {
				if(((new Date()).getTime()- item.timestamp) > 21*60*1000) {
					html[idx++] = "<span class='ZaStaleData'>";
					html[idx++] = AjxStringUtil.htmlEncode(item.time);
					html[idx++] = "&nbsp;";
					html[idx++] = ZaMsg.DataIsStale;
					html[idx++] = "</span>";					
				} else {
					html[idx++] = AjxStringUtil.htmlEncode(item.time);
				}
			} else {
				html[idx++] = AjxStringUtil.htmlEncode(" ");
			}
			html[idx++] = "</td>";
		}
	}
	html[idx++] = "</tr></table>";
	return idx;
}

ZaServicesListView.prototype._setNoResultsHtml = 
function() {
	var	div = document.createElement("div");
	div.innerHTML = "<table width='100%' cellspacing='0' cellpadding='1'><tr><td class='NoResults'><br>"
					+ ZaMsg.ServerStatusUnavailable + "</td></tr></table>";
	this._parentEl.appendChild(div);
}

ZaServicesListView.prototype._getHeaderList =
function() {
	var headerList = [
		new ZaListHeaderItem(ZaStatus.PRFX_Server, ZaMsg.STV_Server_col, null, 250, null, null, true, true),
		new ZaListHeaderItem(ZaStatus.PRFX_Service, ZaMsg.STV_Service_col, null, 100, null, null, true, true),
		new ZaListHeaderItem(ZaStatus.PRFX_Time, ZaMsg.STV_Time_col, null, 200, null, null, true, true)
	];
	return headerList;
}


ZaServicesListView.expand = function (event, domObj) {
	var ev = DwtUiEvent.getEvent(event);
	var htmlEl = DwtUiEvent.getTarget(ev);
	var table = htmlEl;
	while (table != null){
		if (table.getAttribute("_serviceInfo") != null) {
			break;
		}
		table = table.parentNode;
	}
	var sibling = table.nextSibling;
	var collapse = true;
	if (sibling != null) {
		if (sibling.style.display == "none"){
			domObj.firstChild.className = AjxImg.getClassForImage("NodeExpanded");
			collapse = false;
		} else {
			domObj.firstChild.className = AjxImg.getClassForImage("NodeCollapsed");
		}
		while (sibling != null && sibling.getAttribute("_serviceInfo") == "true") {
			if (collapse){
				sibling.style.display = "none";
			} else {
				sibling.style.display = "";
			}
			sibling = sibling.nextSibling;
		}
	} else {
		domObj.firstChild.className = "";
	}
	
}

}
if (AjxPackage.define("zimbraAdmin.statistics.view.ZaGlobalStatsView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaGlobalStatsView
* @contructor ZaGlobalStatsView
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaGlobalStatsView = function(parent) {

    DwtTabView.call(this, parent);
    this._appCtxt = this.shell.getData(ZaAppCtxt.LABEL);
    if(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.GLOBAL_ADVANCED_STATS_TAB] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]){
        this._advancedPage = new ZaGlobalAdvancedStatsPage(this);
        this.addTab(ZaMsg.TABT_Advanced_Stats, this._advancedPage);
    }
    this._tabBar.setVisible(false); 
}

ZaGlobalStatsView.prototype = new DwtTabView;
ZaGlobalStatsView.prototype.constructor = ZaGlobalStatsView;

ZaGlobalStatsView.extTabObjects = new Array();

ZaGlobalStatsView.prototype.toString =
function() {
    return "ZaGlobalStatsView";
}



ZaGlobalStatsView.prototype.getAllServersInfo = function( ){

    try {

        var soapDoc = AjxSoapDoc.create("GetAllServersRequest", ZaZimbraAdmin.URN, null);
        soapDoc.getMethod().setAttribute("applyConfig", "false");
        soapDoc.getMethod().setAttribute("service", "mta");

        var params = new Object();
        params.soapDoc = soapDoc;
        params.asyncMode=false;

        var reqMgrParams = {
            controller : ZaApp.getInstance().getCurrentController(),
            busyMsg : ZaMsg.BUSY_GET_ALL_SERVER
        }
        var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.GetAllServersResponse;
        var allServersInfo = resp.server;

        return allServersInfo;

    }catch ( ex ){

        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaGlobalStatsView.getAllServersInfo", null, false);
    }
}

ZaGlobalStatsView.prototype.getAllServersMtaServiceStatus = function( ){

    //this._containedObject.name;
    var allServersInfo = ZaGlobalStatsView.prototype.getAllServersInfo( );

    if( !allServersInfo ){
        return null;
    }

    var oneServerDetailInfo = null;
    var oneServerBriefInfo = {};
    var i = 0;
    var j = 0;

    var isEnabled = false;
    var isInstalled = false;
    var allServersMtaServiceEnableStatus = [];

    for( i = 0; i < allServersInfo.length; i++ ){
        oneServerDetailInfo = allServersInfo[i].a;
        oneServerBriefInfo.id = allServersInfo[i].id;
        oneServerBriefInfo.name = allServersInfo[i].name;
        var oneService;
        for ( j = 0, isEnabled = isInstalled = false; j < oneServerDetailInfo.length; j++){
            oneService = oneServerDetailInfo[j];
            if( "mta" == oneService._content ){
                if( oneService.n == ZaServer.A_zimbraServiceEnabled ){

                    isEnabled = true;

                }else if ( oneService.n == ZaServer.A_zimbraServiceInstalled ){

                    isInstalled = true;

                }
            }
        }

        var isMtaEnable = (isEnabled && isInstalled);

        allServersMtaServiceEnableStatus[ oneServerBriefInfo.name ] = isMtaEnable;

    }

    return allServersMtaServiceEnableStatus;
}

ZaGlobalStatsView.prototype.isAllMtaDisable = function( ){

    var allServersMtaServiceEnableStatus = ZaGlobalStatsView.prototype.getAllServersMtaServiceStatus();
    if( !allServersMtaServiceEnableStatus ){
        return true; //no info means no zimbraServiceEnabled message sending to the admin
    }

    var i = 0;
    for ( i in allServersMtaServiceEnableStatus )
    {
        if( allServersMtaServiceEnableStatus[i] ){
            return false;
        }
    }

    return true;
}

ZaGlobalStatsView.prototype.setObject = function (entry) {
    this._containedObject = entry ;
    //this._msgCountPage.setObject(entry);
    //this._msgsVolumePage.setObject(entry);
    //this._spamPage.setObject(entry);
    if( !ZaGlobalStatsView.prototype.isAllMtaDisable()  ){

        if( this._msgCountPage == null ){
            this._msgCountPage = new ZaGlobalMessageCountPage(this);
            this.addTab(ZaMsg.TABT_InMsgs, this._msgCountPage);
        }
        this._msgCountPage.setObject(entry);

        if( this._msgsVolumePage == null ){
            this._msgsVolumePage = new ZaGlobalMessageVolumePage(this);
            this.addTab(ZaMsg.TABT_InData, this._msgsVolumePage);
        }
        this._msgsVolumePage.setObject(entry);

        if( this._spamPage == null ){
            this._spamPage = new ZaGlobalSpamActivityPage(this);
            this.addTab(ZaMsg.TABT_Spam_Activity, this._spamPage);
        }
        this._spamPage.setObject(entry);

    }

    if (this._advancedPage)
        this._advancedPage.setObject(entry);
    //    this._mobileSyncPage.setObject(entry);

    for(var i = 0; i < ZaGlobalStatsView.extTabObjects.length; i++) {
        var tabObj = ZaGlobalStatsView.extTabObjects[i];
        if(typeof(tabObj.memthod) == "function"){
            var tabPage = null;
            if(!tabObj.tabKey) {
                tabPage = new tabObj.memthod(this);
                tabObj.tabKey = this.addTab(tabObj.title,tabPage);
            }else {
                tabPage = this.getTabView(tabObj.tabKey);
            }
            if(tabPage) tabPage.setObject(entry);
        }

    }
}

ZaGlobalStatsView.prototype.getTitle =
function () {
    return ZaMsg.GlobalStats_view_title;
}

ZaGlobalStatsView.prototype.getTabTitle =
function () {
    return ZaMsg.GlobalStats_view_title;
}

ZaGlobalStatsView.prototype.getTabIcon =
function () {
    return "Statistics";
}

ZaGlobalStatsView.prototype.getTabToolTip =
function () {
    return ZaMsg.GlobalStats_view_title;
}

ZaGlobalStatsView.prototype._resetTabSizes =
function (width, height) {
    var tabBarSize = this._tabBar.getSize();
    var titleCellSize = Dwt.getSize(this.titleCell);

    var tabBarHeight = tabBarSize.y || this._tabBar.getHtmlElement().clientHeight;
    var titleCellHeight = titleCellSize.y || this.titleCell.clientHeight;

    var tabWidth = width;
    var newHeight = (height - tabBarHeight - titleCellHeight);
    var tabHeight = ( newHeight > 50 ) ? newHeight : 50;

    if(this._tabs && this._tabs.length) {
        for(var curTabKey in this._tabs) {
            if(this._tabs[curTabKey]["view"]) {
                this._tabs[curTabKey]["view"].resetSize(tabWidth, tabHeight);
            }
        }
    }
}

ZaGlobalStatsView.prototype._createHtml =
function() {
    DwtTabView.prototype._createHtml.call(this);

    //create a Title Table
    this._table = document.createElement("table") ;

    //this.getHtmlElement().appendChild(this._table) ;
    var htmlEl = this.getHtmlElement()
    htmlEl.insertBefore (this._table, htmlEl.firstChild);

    var row1;
    //var col1;
    var row2;
    var col2;
    row1 = this._table.insertRow(0);
    row1.align = "center";
    row1.vAlign = "middle";

    this.titleCell = row1.insertCell(row1.cells.length);
    this.titleCell.align = "center";
    this.titleCell.vAlign = "middle";
    this.titleCell.noWrap = true;

    this.titleCell.id = Dwt.getNextId();
    this.titleCell.align="left";
    this.titleCell.innerHTML = AjxStringUtil.htmlEncode(ZaMsg.NAD_GlobalStatistics);
    this.titleCell.className="AdminTitleBar";
}

ZaGlobalStatsView.prototype.getTabChoices =
function() {
    //var innerTabs = this._tab;
    var innerTabs = [];
    if(ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.GLOBAL_ADVANCED_STATS_TAB] || ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI]){
        innerTabs.push(ZaMsg.TABT_Advanced_Stats);
    }

    if( !ZaGlobalStatsView.prototype.isAllMtaDisable()  ){
        innerTabs.push(ZaMsg.TABT_InMsgs);
        innerTabs.push(ZaMsg.TABT_InData);
        innerTabs.push(ZaMsg.TABT_Spam_Activity);
    }

    for(var i = 0; i < ZaGlobalStatsView.extTabObjects.length; i++) {
        var tabObj = ZaGlobalStatsView.extTabObjects[i];
        if(typeof(tabObj.memthod) == "function"){
            innerTabs.push(tabObj.title);
        }
    }
    var tabChoices = [];

    //index of _tabs is based on 1 rather than 0
    for (var i = 1; i <= innerTabs.length; i++){
        tabChoices.push({ value: i,
                            label: innerTabs[i-1]
                            //label: innerTabs[i].title
                        });
    }

    return tabChoices;
}
}
if (AjxPackage.define("zimbraAdmin.statistics.view.ZaGlobalMessageVolumePage")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaGlobalMessageVolumePage 
* @contructor ZaGlobalMessageVolumePage
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaGlobalMessageVolumePage = function(parent) {
	DwtTabViewPage.call(this, parent);
	this._fieldIds = new Object(); //stores the ids of all the form elements

	//this._createHTML();
	this.initialized=false;
	this.setScrollStyle(DwtControl.SCROLL);	
}
 
ZaGlobalMessageVolumePage.prototype = new DwtTabViewPage;
ZaGlobalMessageVolumePage.prototype.constructor = ZaGlobalMessageVolumePage;

ZaGlobalMessageVolumePage.prototype.toString = 
function() {
	return "ZaGlobalMessageVolumePage";
}

ZaGlobalMessageVolumePage.prototype.showMe =  function(refresh) {
    this.setZIndex(DwtTabView.Z_ACTIVE_TAB);
	if (this.parent.getHtmlElement().offsetHeight > 26) { 						// if parent visible, use offsetHeight
		this._contentEl.style.height=this.parent.getHtmlElement().offsetHeight-26;
	} else {
		var parentHeight = parseInt(this.parent.getHtmlElement().style.height);	// if parent not visible, resize page to fit parent
		var units = AjxStringUtil.getUnitsFromSizeString(this.parent.getHtmlElement().style.height);
		if (parentHeight > 26) {
			this._contentEl.style.height = (Number(parentHeight-26).toString() + units);
		}
	}
	this._contentEl.style.width = this.parent.getHtmlElement().style.width;	// resize page to fit parent

	if(refresh) {
		this.setObject();
	}
    ZaGlobalAdvancedStatsPage.plotGlobalQuickChart('global-message-volume-48hours', 'zmmtastats', [ 'mta_volume' ], [ 'bytes' ], 'now-48h', 'now', { convertToCount: 1 });
    ZaGlobalAdvancedStatsPage.plotGlobalQuickChart('global-message-volume-30days',  'zmmtastats', [ 'mta_volume' ], [ 'bytes' ], 'now-30d', 'now', { convertToCount: 1 });
    ZaGlobalAdvancedStatsPage.plotGlobalQuickChart('global-message-volume-60days',  'zmmtastats', [ 'mta_volume' ], [ 'bytes' ], 'now-60d', 'now', { convertToCount: 1 });
    ZaGlobalAdvancedStatsPage.plotGlobalQuickChart('global-message-volume-year',    'zmmtastats', [ 'mta_volume' ], [ 'bytes' ], 'now-1y',  'now', { convertToCount: 1 });
}

ZaGlobalMessageVolumePage.prototype.setObject =
function () {
    // noop
}

ZaGlobalMessageVolumePage.prototype._createHtml = 
function () {
	DwtTabViewPage.prototype._createHtml.call(this);
	var idx = 0;
	var html = new Array(50);
	html[idx++] = "<div class='StatsHeader'>" + ZaMsg.Stats_MV_Header + "</div>";	
	html[idx++] = "<div class='StatsDiv'>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsHour) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasglobal-message-volume-48hours'></canvas><div id='loggerchartglobal-message-volume-48hours'></div>";	
	html[idx++] = "</div>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsDay) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasglobal-message-volume-30days'></canvas><div id='loggerchartglobal-message-volume-30days'></div>";	
	html[idx++] = "</div>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsMonth) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasglobal-message-volume-60days'></canvas><div id='loggerchartglobal-message-volume-60days'></div>";	
	html[idx++] = "</div>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsYear) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasglobal-message-volume-year'></canvas><div id='loggerchartglobal-message-volume-year'></div>";	
	html[idx++] = "</div>";
	html[idx++] = "</div>";
	this.getHtmlElement().innerHTML = html.join("");
}
}
if (AjxPackage.define("zimbraAdmin.statistics.view.ZaGlobalMessageCountPage")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaGlobalMessageCountPage 
* @contructor ZaGlobalMessageCountPage
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaGlobalMessageCountPage = function(parent) {
	DwtTabViewPage.call(this, parent);
	this._fieldIds = new Object(); //stores the ids of all the form elements
	//this._app = ZaApp.getInstance();
	//this._createHTML();
	this.initialized=false;
	this.setScrollStyle(DwtControl.SCROLL);	
}
 
ZaGlobalMessageCountPage.prototype = new DwtTabViewPage;
ZaGlobalMessageCountPage.prototype.constructor = ZaGlobalMessageCountPage;

ZaGlobalMessageCountPage.prototype.toString = 
function() {
	return "ZaGlobalMessageCountPage";
}

ZaGlobalMessageCountPage.prototype.showMe =  function(refresh) {
    this.setZIndex(DwtTabView.Z_ACTIVE_TAB);
	if (this.parent.getHtmlElement().offsetHeight > 26) { 						// if parent visible, use offsetHeight
		this._contentEl.style.height=this.parent.getHtmlElement().offsetHeight-26;
	} else {
		var parentHeight = parseInt(this.parent.getHtmlElement().style.height);	// if parent not visible, resize page to fit parent
		var units = AjxStringUtil.getUnitsFromSizeString(this.parent.getHtmlElement().style.height);
		if (parentHeight > 26) {
			this._contentEl.style.height = (Number(parentHeight-26).toString() + units);
		}
	}
	this._contentEl.style.width = this.parent.getHtmlElement().style.width;	// resize page to fit parent

	if (refresh)
	    this.setObject();
}

ZaGlobalMessageCountPage.prototype.setObject =
function () {
    // noop
    ZaGlobalAdvancedStatsPage.plotGlobalQuickChart('global-message-count-48hours', 'zmmtastats', [ 'mta_count' ], [ 'msgs' ], 'now-48h', 'now', { convertToCount: 1 });
    ZaGlobalAdvancedStatsPage.plotGlobalQuickChart('global-message-count-30days',  'zmmtastats', [ 'mta_count' ], [ 'msgs' ], 'now-30d', 'now', { convertToCount: 1 });
    ZaGlobalAdvancedStatsPage.plotGlobalQuickChart('global-message-count-60days',  'zmmtastats', [ 'mta_count' ], [ 'msgs' ], 'now-60d', 'now', { convertToCount: 1 });
    ZaGlobalAdvancedStatsPage.plotGlobalQuickChart('global-message-count-year',    'zmmtastats', [ 'mta_count' ], [ 'msgs' ], 'now-1y',  'now', { convertToCount: 1 });
}

ZaGlobalMessageCountPage.prototype._createHtml = 
function () {
	DwtTabViewPage.prototype._createHtml.call(this);
	var idx = 0;
	var html = new Array(50);
	html[idx++] = "<div class='StatsHeader'>" + ZaMsg.Stats_MC_Header + "</div>";	
	html[idx++] = "<div class='StatsDiv'>";	
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsHour) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasglobal-message-count-48hours'></canvas><div id='loggerchartglobal-message-count-48hours'></div>";	
	html[idx++] = "</div>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsDay) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasglobal-message-count-30days'></canvas><div id='loggerchartglobal-message-count-30days'></div>";	
	html[idx++] = "</div>";	
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsMonth) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasglobal-message-count-60days'></canvas><div id='loggerchartglobal-message-count-60days'></div>";	
	html[idx++] = "</div>";		
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsYear) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasglobal-message-count-year'></canvas><div id='loggerchartglobal-message-count-year'></div>";	
	html[idx++] = "</div>";
	html[idx++] = "</div>";
	this.getHtmlElement().innerHTML = html.join("");
}

}
if (AjxPackage.define("zimbraAdmin.statistics.view.ZaGlobalSpamActivityPage")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaGlobalSpamActivityPage 
* @contructor ZaGlobalSpamActivityPage
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaGlobalSpamActivityPage = function(parent) {
	DwtTabViewPage.call(this, parent);
	this._fieldIds = new Object(); //stores the ids of all the form elements

	//this._createHTML();
	this.initialized=false;
	this.setScrollStyle(DwtControl.SCROLL);	
}
 
ZaGlobalSpamActivityPage.prototype = new DwtTabViewPage;
ZaGlobalSpamActivityPage.prototype.constructor = ZaGlobalSpamActivityPage;

ZaGlobalSpamActivityPage.prototype.toString = 
function() {
	return "ZaGlobalSpamActivityPage";
}


ZaGlobalSpamActivityPage.prototype.showMe =  function(refresh) {

    this.setZIndex(DwtTabView.Z_ACTIVE_TAB);
    if (this.parent.getHtmlElement().offsetHeight > 26) { 						// if parent visible, use offsetHeight
        this._contentEl.style.height=this.parent.getHtmlElement().offsetHeight-26;
    } else {
        var parentHeight = parseInt(this.parent.getHtmlElement().style.height);	// if parent not visible, resize page to fit parent
        var units = AjxStringUtil.getUnitsFromSizeString(this.parent.getHtmlElement().style.height);
        if (parentHeight > 26) {
            this._contentEl.style.height = (Number(parentHeight-26).toString() + units);
        }
    }
    this._contentEl.style.width = this.parent.getHtmlElement().style.width;	// resize page to fit parent

	if(refresh) {
		this.setObject();
	}
    ZaGlobalAdvancedStatsPage.plotGlobalQuickChart('global-message-asav-48hours', 'zmmtastats', [ 'filter_virus', 'filter_spam' ], [ 'filtered' ], 'now-48h', 'now', { convertToCount: 1 });
    ZaGlobalAdvancedStatsPage.plotGlobalQuickChart('global-message-asav-30days',  'zmmtastats', [ 'filter_virus', 'filter_spam' ], [ 'filtered' ], 'now-30d', 'now', { convertToCount: 1 });
    ZaGlobalAdvancedStatsPage.plotGlobalQuickChart('global-message-asav-60days',  'zmmtastats', [ 'filter_virus', 'filter_spam' ], [ 'filtered' ], 'now-60d', 'now', { convertToCount: 1 });
    ZaGlobalAdvancedStatsPage.plotGlobalQuickChart('global-message-asav-year',    'zmmtastats', [ 'filter_virus', 'filter_spam' ], [ 'filtered' ], 'now-1y',  'now', { convertToCount: 1 });
}

ZaGlobalSpamActivityPage.prototype.setObject =
function () {
    // noop
}

ZaGlobalSpamActivityPage.prototype._createHtml = 
function () {
	DwtTabViewPage.prototype._createHtml.call(this);
	var idx = 0;
	var html = new Array(50);
	html[idx++] = "<div class='StatsHeader'>" + ZaMsg.Stats_AV_Header + "</div>";	
	html[idx++] = "<div class='StatsDiv'>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsHour) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasglobal-message-asav-48hours'><div id='loggerchartglobal-message-asav-48hours'></div>";	
	html[idx++] = "</div>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsDay) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasglobal-message-asav-30days'><div id='loggerchartglobal-message-asav-30days'></div>";	
	html[idx++] = "</div>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsMonth) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasglobal-message-asav-60days'><div id='loggerchartglobal-message-asav-60days'></div>";	
	html[idx++] = "</div>";	
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsYear) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasglobal-message-asav-year'><div id='loggerchartglobal-message-asav-year'></div>";	
	html[idx++] = "</div>";
	html[idx++] = "</div>";
	this.getHtmlElement().innerHTML = html.join("");
}
}
if (AjxPackage.define("zimbraAdmin.statistics.view.ZaGlobalAdvancedStatsPage")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaGlobalAdvancedStatsPage 
* @contructor ZaGlobalAdvancedStatsPage
* @param parent
* @param app
* @author Perry Nguyen
**/
ZaGlobalAdvancedStatsPage = function(parent) {
	DwtTabViewPage.call(this, parent);
	this._fieldIds = new Object(); //stores the ids of all the form elements
	this._app = ZaApp.getInstance();
	//this._createHTML();
	this.initialized=false;
	this.setScrollStyle(DwtControl.SCROLL);	
}
 
ZaGlobalAdvancedStatsPage.prototype = new DwtTabViewPage;
ZaGlobalAdvancedStatsPage.prototype.constructor = ZaGlobalAdvancedStatsPage;

ZaGlobalAdvancedStatsPage.prototype.toString = 
function() {
	return "ZaGlobalAdvancedStatsPage";
}

ZaGlobalAdvancedStatsPage.prototype.showMe =  function(refresh) {
    this.setZIndex(DwtTabView.Z_ACTIVE_TAB);
	if (this.parent.getHtmlElement().offsetHeight > 26) { 						// if parent visible, use offsetHeight
		this._contentEl.style.height=this.parent.getHtmlElement().offsetHeight-26;
	} else {
		var parentHeight = parseInt(this.parent.getHtmlElement().style.height);	// if parent not visible, resize page to fit parent
		var units = AjxStringUtil.getUnitsFromSizeString(this.parent.getHtmlElement().style.height);
		if (parentHeight > 26) {
			this._contentEl.style.height = (Number(parentHeight-26).toString() + units);
		}
	}
	this._contentEl.style.width = this.parent.getHtmlElement().style.width;	// resize page to fit parent

	if(refresh) {
		this.setObject();
	}
	if (!this._chartHtmlShown) {
        ZaGlobalAdvancedStatsPage.insertChartHTML(this.getHtmlElement());
        this._chartHtmlShown = true;
	}

    var controller = ZaApp.getInstance().getCurrentController();
    controller._helpURL = ZaUtil.HELP_URL;
    controller._helpButtonText = ZaMsg.helpCreateAdvServerStat;
}

ZaGlobalAdvancedStatsPage.prototype.hideMe =
function (){
	DwtTabViewPage.prototype.hideMe.call(this);
	var controller = ZaApp.getInstance().getCurrentController();
    controller._helpURL = ZaUtil.HELP_URL;
    controller._helpButtonText = ZaMsg.helpCheckStatistics;
};


ZaGlobalAdvancedStatsPage.getDataTipText = function (item, index, displayName) {
    var text = [AjxMessageFormat.format(ZaMsg.NAD_AdvStatsDataTip,
             [ displayName, YAHOO.util.Date.format(item.xLabel, { format: ZaMsg.NAD_AdvStatsTipDateFormat }) ]),
             ZaGlobalAdvancedStatsPage.formatLabel(item.value)];
    return text;
}
/* must be global for getDataTipText */
ZaGlobalAdvancedStatsPage.formatLabel = function (value) {
    return YAHOO.util.Number.format(value, { thousandsSeparator: ",", decimalPlaces: 0});
}
ZaGlobalAdvancedStatsPage.formatTimeLabel = function (value) {
    return YAHOO.util.Date.format(value, { format: ZaMsg.NAD_AdvStatsLabelDateFormat });
}

ZaGlobalAdvancedStatsPage.dynamicColors = function() {
    var r = Math.floor(Math.random() * 255);
    var g = Math.floor(Math.random() * 255);
    var b = Math.floor(Math.random() * 255);
    return "rgb(" + r + "," + g + "," + b + ")";
};

ZaGlobalAdvancedStatsPage.getTarget = function (evt) {
    if (evt && evt.target)
        return evt.target;
    else
        return window.event.srcElement;
}

ZaGlobalAdvancedStatsPage.indexOf = function (ary, item) {
    if (Array.indexOf)
        return ary.indexOf(item);
    else {
        for (var i=0; i < ary.length; i++) {
            if (ary[i] == item){
                return i;
            }
        }
        return -1;
    }
}

ZaGlobalAdvancedStatsPage.setText = function (e, text) {
    var hasInnerText = (document.getElementsByTagName("body")[0].innerText != undefined);

    if (hasInnerText) {
        e.innerText = text;
    } else {
        e.textContent = text;
    }
}
ZaGlobalAdvancedStatsPage.plotGlobalQuickChart = function (id, group, columns, column_units, start, end, options) {
    var loggerChartEl = document.getElementById("loggerchart" + id);
    var loggerCanvasEl = document.getElementById("loggercanvas" + id);

    ZaGlobalAdvancedStatsPage.setText(loggerChartEl, ZaMsg.NAD_AdvStatsLoadingDataLabel);
    loggerCanvasEl.style.display = "none";

    var soapRequest = AjxSoapDoc.create("GetLoggerStatsRequest", ZaZimbraAdmin.URN, null);
    soapRequest.set("startTime", { "!time": start });
    soapRequest.set("endTime", { "!time": end });
    
    var counters = [];
    for (var i = 0; i < columns.length; i++) {
        counters.push({ "!name" : columns[i] });
    }
    var statsdata = { "!name" : group, "!limit" : "true" };
    if (counters.length > 0) {
        statsdata.values = { "stat" : [] };
        for (var i = 0; i < counters.length; i++) {
            statsdata.values.stat.push(counters[i]);
        }
    }
    soapRequest.set("stats", statsdata);
    
    var cb = function(response) {
    	if(response.isException && response.isException()) {
    		ZaApp.getInstance().getCurrentController()._handleException(response.getException(),"ZaGlobalAdvancedStatsPage.plotGlobalQuickChart", null, false);
    		return;
    	}
        var soapResponse = response.getResponse().Body.GetLoggerStatsResponse;
        if (!soapResponse.hostname || !soapResponse.hostname[0].stats) {
            var e = document.getElementById("loggerchart" + id);
            ZaGlobalAdvancedStatsPage.setText(e, ZaMsg.NAD_AdvStatsNoDataLabel);
            return;
        }
        var data = {};
        var hostname = soapResponse.hostname;
        if (hostname[0] && hostname[0].stats[0] && hostname[0].stats[0].values) {
                var timeStamp = hostname[0].stats[0].values;
                var timeStampLength = timeStamp.length;
                var hostNameLen = hostname.length;
                for (var i = 0; i < timeStampLength; i++) {
                    var valuesSumAtTs = 0;
                    for (var j = 0; j < hostNameLen; j++) {
                        if (hostname[j].stats && hostname[j].stats.length > 0 && 
                        	hostname[j].stats[0].values && hostname[j].stats[0].values.length > 0 && hostname[j].stats[0].values[i] &&
                        	hostname[j].stats[0].values[i].stat && hostname[j].stats[0].values[i].stat.length > 0 && hostname[j].stats[0].values[i].stat[0]) {
                            valuesSumAtTs = valuesSumAtTs + parseFloat(hostname[j].stats[0].values[i].stat[0].value);
                        }
                    }
                    var averageValueAtTs = valuesSumAtTs / hostNameLen;
                    if (!data[hostname[0].stats[0].values[i].t]) {
                        data[hostname[0].stats[0].values[i].t] = {};
                    }
                    data[hostname[0].stats[0].values[i].t][hostname[0].stats[0].values[0].stat[0].name] = averageValueAtTs;
                }
        }
        
        var newData = [];
        var period = 0;
        var tsArr = Object.keys(data);
        if (tsArr[1] != null) {
            period = tsArr[1] - tsArr[0];
        }
        for (var i in data) {
            record = { timestamp: new Date(i * 1000) };
            for (var j in data[i]) {
                record[j] = data[i][j];
            }
            // automatically assume missing values are 0 (this can suck at times...)
            for (var j = 0; j < columns.length; j++) {
                if (!record[columns[j]]) {
                    record[columns[j]] = 0;
                }
                if (options && options.convertToCount)
                    record[columns[j]] = record[columns[j]] * period;
            }
            newData.push(record);
        }

        if (newData.length < 1) {
            ZaGlobalAdvancedStatsPage.setText(loggerChartEl, ZaMsg.NAD_AdvStatsNoDataLabel);
            loggerCanvasEl.style.display = "none";
            return;
        } else {
            ZaGlobalAdvancedStatsPage.setText(loggerChartEl, "");
            loggerCanvasEl.style.display = "block";
        }

        var colDef = [];
        for (var i = 0; i < columns.length; i++) {
            var legend = columns[i];
            if (column_units != null) {
                legend = legend + " (" + column_units[column_units.length == 1 ? 0 : i] + ")";
            }
            colDef.push({ displayName: legend, yField: columns[i] });
        }
        var fields = [ "timestamp" ];
        for (var i = 0; i < columns.length; i++) {
            fields.push(columns[i]);
        }
    
        ZaGlobalAdvancedStatsPage.plotChart(id, fields, colDef, newData);
    };
    
    var csfeParams = { soapDoc: soapRequest, asyncMode: true, 'callback': new AjxCallback(cb) };
    var reqMgrParams = { controller: ZaApp.getInstance().getCurrentController() };
    ZaRequestMgr.invoke(csfeParams, reqMgrParams);
}

ZaGlobalAdvancedStatsPage.plotQuickChart = function (id, hostname, group, columns, column_units, start, end, options) {
    var loggerChartEl = document.getElementById("loggerchart" + id);
    var loggerCanvasEl = document.getElementById("loggercanvas" + id);
    loggerChartEl.style.display = "block";
    ZaGlobalAdvancedStatsPage.setText(loggerChartEl, ZaMsg.NAD_AdvStatsLoadingDataLabel);
    loggerCanvasEl.style.display = "none";

    var soapRequest = AjxSoapDoc.create("GetLoggerStatsRequest", ZaZimbraAdmin.URN, null);
    soapRequest.set("hostname", { "!hn": hostname });
    soapRequest.set("startTime", { "!time": start });
    soapRequest.set("endTime", { "!time": end });
    
    var counters = [];
    for (var i = 0; i < columns.length; i++) {
        counters.push({ "!name" : columns[i] });
    }
    var statsdata = { "!name" : group, "!limit" : "true" };
    if (counters.length > 0) {
        statsdata.values = { "stat" : [] };
        for (var i = 0; i < counters.length; i++) {
            statsdata.values.stat.push(counters[i]);
        }
    }
    soapRequest.set("stats", statsdata);
    
    var cb = function(response) {
    	if(response.isException && response.isException()) {
    		ZaApp.getInstance().getCurrentController()._handleException(response.getException(),"ZaGlobalAdvancedStatsPage.plotGlobalQuickChart", null, false);
    		return;
    	}
        var soapResponse = response.getResponse().Body.GetLoggerStatsResponse;
        
        if (!soapResponse.hostname || !soapResponse.hostname[0].stats) {
            var e = document.getElementById("loggerchart" + id);
            ZaGlobalAdvancedStatsPage.setText(e, ZaMsg.NAD_AdvStatsNoDataLabel);
            return;
        }
        var values = soapResponse.hostname[0].stats[0].values;
        if (!values) {
            var e = document.getElementById("loggerchart" + id);
            ZaGlobalAdvancedStatsPage.setText(e, ZaMsg.NAD_AdvStatsNoDataLabel);
            return;
        }
        
        var newData = [];
        var period = 0;
        var fixedColumns = new Array();
        for (var i = 0; i < columns.length; i++) {
            fixedColumns.push(columns[i].replace(/[\/%:]/g, "_"));
        }
        for (var i = 0; i < values.length; i++) {
           if (i + 1 < values.length)
                period = values[i + 1].t - values[i].t;
            
                
            var ts = new Date(values[i].t * 1000);
            var record = { timestamp: ts };
            for (var j = 0; j < values[i].stat.length; j++) {
                if (ZaGlobalAdvancedStatsPage.indexOf(columns, values[i].stat[j].name) != -1) {
                    record[values[i].stat[j].name.replace(/[\/%:]/g, "_")] = values[i].stat[j].value;
                }
            }
            for (var j = 0; j < fixedColumns.length; j++) {
                if (!record[fixedColumns[j]]) {
                    record[fixedColumns[j]] = 0;
                }
                if (options && options.convertToCount)
                    record[fixedColumns[j]] = record[fixedColumns[j]] * period;
            }
            newData.push(record);
        }

        if (newData.length < 1) {
            ZaGlobalAdvancedStatsPage.setText(loggerChartEl, ZaMsg.NAD_AdvStatsNoDataLabel);
            loggerCanvasEl.style.display = "none";
            return;
        } else {
            ZaGlobalAdvancedStatsPage.setText(loggerChartEl, "");
            loggerCanvasEl.style.display = "block";
        }

        var colDef = [];
        for (var i = 0; i < columns.length; i++) {
            var legend = columns[i];
            if (column_units != null) {
                if ((column_units.length == 1 && column_units[0] != null) || (column_units.length > 1 && column_units[i] != null))
                    legend = legend + " (" + column_units[column_units.length == 1 ? 0 : i] + ")";
            }
            //colDef.push({ displayName: legend, yField: columns[i] });
            colDef.push({ displayName: legend, yField: fixedColumns[i] });
        }
        var fields = [ "timestamp" ];
        for (var i = 0; i < fixedColumns.length; i++) {
            fields.push(fixedColumns[i]);
        }
    
        ZaGlobalAdvancedStatsPage.plotChart(id, fields, colDef, newData);
    };
    
    var csfeParams = { soapDoc: soapRequest, asyncMode: true, callback: new AjxCallback(cb) };
    var reqMgrParams = { controller: ZaApp.getInstance().getCurrentController(), busyMsg: ZaMsg.PQ_LOADING };
    ZaRequestMgr.invoke(csfeParams, reqMgrParams);
}


ZaGlobalAdvancedStatsPage.plotChart = function (id, fields, colDef, newData) {
    var max = 0;
    for (var i = 0; i < colDef.length; i++) {
        colDef[i].style = { size: 4, lineSize: 1 };
    }
    for (var i = 0; i < newData.length; i++) {
        for (var j = 0; j < colDef.length; j++) {
            max = Math.max(max, newData[i][colDef[j].yField]);
        }
    }

    var timeAxis = {};
    
    if (newData.length > 1) {
        var dx = newData[1].timestamp.getTime() - newData[0].timestamp.getTime();
        dx = dx / 1000 / 60;
        timeAxis.title = AjxMessageFormat.format(ZaMsg.NAD_AdvStatsIntervalFormatMinutes, [ dx ]);
    } else {
        timeAxis.title = AjxMessageFormat.format(ZaMsg.NAD_AdvStatsIntervalFormatMinutes, [ 0 ]);
    }

    timeAxis.labelFunction = function (value) {
        var ts0 = newData[0].timestamp.getTime();
        var ts1 = newData[newData.length - 1].timestamp.getTime();
        var delta = (ts1 - ts0) / 1000;

        var formatter;
        if (delta > 2 * 24 * 60 * 60) { //2 days
            formatter = AjxDateFormat.getDateInstance(AjxDateFormat.SHORT);
        } else {
            formatter = AjxDateFormat.getTimeInstance(AjxDateFormat.SHORT); 
        }
        return formatter.format(value);
    }
    
    timeAxis.maximum = newData[newData.length - 1].timestamp;
    timeAxis.minimum = newData[0].timestamp;

    var loggerCanvasEl = document.getElementById("loggercanvas" + id);
    loggerCanvasEl.parentNode.style.height = "200px";

    var new_labels = [], new_datasets = [];
    if (this.lineColors === undefined) {
        this.lineColors = { };
    }

    if (colDef.length > 1) {
        colDef.forEach(function(cd){
            if (!this.lineColors[cd.displayName]) {
                this.lineColors[cd.displayName] = ZaGlobalAdvancedStatsPage.dynamicColors();
            }
        }, this);
    } else {
        this.lineColors[colDef[0].displayName] = "rgb(54, 162, 235)";
    };

    for(var data_set = 0; data_set < colDef.length; data_set++) {
        new_datasets[data_set] = {
            label: colDef[data_set].displayName,
            backgroundColor: this.lineColors[colDef[data_set].displayName],
            borderColor: this.lineColors[colDef[data_set].displayName],
            data: [],
            fill: false,
        }
        new_labels[data_set] = [];
        newData.forEach(function(nd){
            new_labels[data_set].push(nd.timestamp);
            new_datasets[data_set].data.push(nd[colDef[data_set].yField]);
        });
    }
    ZaGlobalAdvancedStatsPage.CHART_DATA_SOURCE = new_datasets;

    var config = {
        type: 'line',
        data: {
            labels: new_labels[0],
            datasets: new_datasets
        },
        options: {
            animation: false,
            responsive: true,
            maintainAspectRatio: false,
            legend: {
                display: true,
                position: 'bottom'
            },
            tooltips: {
                mode: 'point',
                custom: function(tooltip) {
                    if (!tooltip) return;
                    // disable displaying the color box;
                    tooltip.displayColors = false;
                },
                callbacks: {
                    title: function() {
                        return null;
                    },
                    label: function (tooltipItems, data) {
                        return ZaGlobalAdvancedStatsPage.getDataTipText(tooltipItems, undefined, data.datasets[tooltipItems.datasetIndex].label);
                    }
                }
            },
            hover: {
                mode: 'nearest',
                intersect: true
            },
            scales: {
                xAxes: [{
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: timeAxis.title
                    },
                    ticks : {
                        autoSkip: true,
                        display: true,
                        autoSkipPadding: 15,
                        maxRotation: 0,
                        callback: function(value) {
                            return timeAxis.labelFunction(value);
                        }
                    }
                }],
                yAxes: [{
                    display: true,
                    ticks: {
                        suggestedMin: 0,
                        suggestedMax: max + 10,
                        maxTicksLimit: colDef[0].style.size,
                        callback: function(value, index, values) {
                            return value.toLocaleString();
                        }
                    }
                }]
            }
        }
    };
    var ctx = document.getElementById("loggercanvas" + id).getContext('2d');
    if (window["loggercanvas" + id] && window["loggercanvas"+id].destroy !== undefined) {
        window["loggercanvas" + id].destroy();
    }
    window["loggercanvas" + id] = new Chart(ctx, config);
}

ZaGlobalAdvancedStatsPage.prototype.setObject =
function (data) {
    // no-op
}

ZaGlobalAdvancedStatsPage.serverSelected = function(evt, id) {
    var select = ZaGlobalAdvancedStatsPage.getTarget(evt);
    
    var hostname = select[select.selectedIndex].value;
    
    var soapRequest = AjxSoapDoc.create("GetLoggerStatsRequest", ZaZimbraAdmin.URN, null);
    soapRequest.set("hostname", { "!hn": hostname });
    
    var cb = function(response) {
        var soapResponse = response.getResponse().Body.GetLoggerStatsResponse;
        var groupSelect = document.getElementById("select-group" + id);
        var statGroups = soapResponse.hostname[0].stats;
        ZaGlobalAdvancedStatsPage.clearSelect(groupSelect);
        for (var i = 0, j = statGroups.length; i < j; i++) {
            var option = document.createElement("option");
            if (i == 0) option.selected = "selected";
            option.value = statGroups[i].name;
            ZaGlobalAdvancedStatsPage.setText(option, statGroups[i].name);
            groupSelect.appendChild(option);
        }
        ZaGlobalAdvancedStatsPage.groupSelected({ target: groupSelect }, id);
    };
    
    var csfeParams = { soapDoc: soapRequest, asyncMode: true, callback: new AjxCallback(cb) };
    var reqMgrParams = { controller: ZaApp.getInstance().getCurrentController(), busyMsg: ZaMsg.PQ_LOADING };
    ZaRequestMgr.invoke(csfeParams, reqMgrParams);
    
    
}

ZaGlobalAdvancedStatsPage.clearSelect = function (node) {
    var options = node.getElementsByTagName("option");
    for (var i = node.childNodes.length; i > 0; i--)
        node.removeChild(node.childNodes.item(i - 1));
}
ZaGlobalAdvancedStatsPage.groupSelected = function(evt, id) {
    var select = ZaGlobalAdvancedStatsPage.getTarget(evt);
    
    var serverSelect = document.getElementById("select-servers" + id);
    var hostname = serverSelect[serverSelect.selectedIndex].value;
    var group = select[select.selectedIndex].value;
    
    var counterSelect = document.getElementById("select-counter" + id);
    ZaGlobalAdvancedStatsPage.clearSelect(counterSelect);
    ZaGlobalAdvancedStatsPage._getCounters(hostname, group, counterSelect);
    
}

ZaGlobalAdvancedStatsPage._getCounters = function(hostname, group, counterSelect) {
    var soapRequest = AjxSoapDoc.create("GetLoggerStatsRequest", ZaZimbraAdmin.URN, null);
    soapRequest.set("hostname", { "!hn": hostname });
    var child = soapRequest.set("stats", { "!name" : group });
    soapRequest.set(null, "get-counters", child);
    var cb = function(response) {
        var soapResponse = response.getResponse().Body.GetLoggerStatsResponse;
        var statCounters = soapResponse.hostname[0].stats[0].values[0].stat;
        if (statCounters) {
            for (var i = 0, j = statCounters.length; i < j; i++) {
                var option = document.createElement("option");
                option.value = statCounters[i].name;
                ZaGlobalAdvancedStatsPage.setText(option, statCounters[i].name);
                if (statCounters[i].type) {
                    option.columnUnit = statCounters[i].type;
                }
                counterSelect.appendChild(option);
            }
        }
    };
    
    var csfeParams = { soapDoc: soapRequest, asyncMode: true, callback: new AjxCallback(cb) };
    var reqMgrParams = { controller: ZaApp.getInstance().getCurrentController(), busyMsg: ZaMsg.PQ_LOADING };
    ZaRequestMgr.invoke(csfeParams, reqMgrParams);
    
}

ZaGlobalAdvancedStatsPage.getMTAHosts = function() {
    if (ZaGlobalAdvancedStatsPage.MTA_HOSTS) {
        return ZaGlobalAdvancedStatsPage.MTA_HOSTS;
    }
	
    var hosts = new Array();
    var serverList = ZaApp.getInstance().getServerList();
    if (serverList) {
        var ary = serverList.getArray();
        var cnt = ary.length;
        for (var i = 0; i < cnt; i++) {
            var crtServer = ary[i];
            var isInstalled = false;
            var isEnabled = false;
            if(crtServer.attrs){
		// EnabledServiceList InstalledServiceList are array-like object.
		// contain the service installed or enabled
                var EnabledServiceList = crtServer.attrs[ZaServer.A_zimbraServiceEnabled];
                var InstalledServiceList = crtServer.attrs[ZaServer.A_zimbraServiceEnabled];
                
		var j;
                for(j in EnabledServiceList){
                        if(EnabledServiceList[j] == "mta"){
                                isEnabled = true;
                                break;
                        }
                }
		
                for(j in InstalledServiceList){
                        if(InstalledServiceList[j] == "mta"){
                                isInstalled = true;
                                break;
                        }
                }
            }
	    
            if (isInstalled && isEnabled)
                hosts.push(ary[i].name);
        }
    }	
    
    ZaGlobalAdvancedStatsPage.MTA_HOSTS = hosts;
    return ZaGlobalAdvancedStatsPage.MTA_HOSTS;
}

ZaGlobalAdvancedStatsPage.hideDIVs = function(divs) {
    if (divs && divs instanceof Array) {
        var cnt = divs.length;
        for (var i = 0; i < cnt; i++) {
            var chartdiv = document.getElementById("loggerchart" + divs[i]);
            if (chartdiv != null) {
                chartdiv.style.display = "none";
            }
        }
    }
}

ZaGlobalAdvancedStatsPage.getCounters = function(hostname, group) {
    var soapRequest = AjxSoapDoc.create("GetLoggerStatsRequest", ZaZimbraAdmin.URN, null);
    soapRequest.set("hostname", { "!hn": hostname });
    var child = soapRequest.set("stats", { "!name" : group });
    soapRequest.set(null, "get-counters", child);
    
    var csfeParams = { soapDoc: soapRequest };
    var reqMgrParams = { controller: ZaApp.getInstance().getCurrentController(), busyMsg: ZaMsg.PQ_LOADING };
    var soapResponse = ZaRequestMgr.invoke(csfeParams, reqMgrParams).Body.GetLoggerStatsResponse;
    if (soapResponse && soapResponse.hostname && soapResponse.hostname[0] &&
        soapResponse.hostname[0].stats && soapResponse.hostname[0].stats[0] &&
        soapResponse.hostname[0].stats[0].values && soapResponse.hostname[0].stats[0].values[0] &&
        soapResponse.hostname[0].stats[0].values[0].stat
        ) {
        var statCounters = soapResponse.hostname[0].stats[0].values[0].stat;
        var counters = [];
        if ( statCounters ) {
            for (var i = 0, j = statCounters.length; i < j; i++) {
                counters.push(statCounters[i].name);
            }
        }
        return counters;
    }

    return 0;
}

ZaGlobalAdvancedStatsPage.counterSelected = function(evt, id) {
    var select = ZaGlobalAdvancedStatsPage.getTarget(evt);
    if (AjxUtil.isEmpty(select)) {
        return;
	}
    
    var chartdiv = document.getElementById("loggerchart" + id);
    ZaGlobalAdvancedStatsPage.setText(chartdiv, ZaMsg.NAD_AdvStatsLoadingDataLabel);
    
    var serverSelect = document.getElementById("select-servers" + id);
    if (AjxUtil.isEmpty(serverSelect) ||
        AjxUtil.isEmpty(serverSelect.selectedIndex) ||
        serverSelect.selectedIndex < 0 ||
        !serverSelect[serverSelect.selectedIndex] ||
        !serverSelect[serverSelect.selectedIndex].value) {
        return;
    }

    var hostname = serverSelect[serverSelect.selectedIndex].value;

    var groupSelect = document.getElementById("select-group" + id);
    if (AjxUtil.isEmpty(groupSelect) ||
        AjxUtil.isEmpty(groupSelect.selectedIndex) ||
        groupSelect.selectedIndex < 0 ||
        !groupSelect[groupSelect.selectedIndex] ||
        !groupSelect[groupSelect.selectedIndex].value)
        return;

    var group = groupSelect[groupSelect.selectedIndex].value;
    
    var selected = [];
    var units = [];
    var index = 0;
    for (var i = 0; i < select.options.length; i++) {
        if (select.options[i].selected) {
            selected[index] = select.options[i].value;
            units[index] = select.options[i].columnUnit ? select.options[i].columnUnit : null;
            index++;
        }
    }
    if (selected.length == 0)
        return;
    
    var startTime = document.getElementById("input-start-time" + id).value;
    var endTime = document.getElementById("input-end-time" + id).value;
    ZaGlobalAdvancedStatsPage.plotQuickChart(id, hostname, group, selected, units, startTime, endTime);
}

ZaGlobalAdvancedStatsPage.showhide = function(id) {
    var e = document.getElementById(id);
    e.style.display = (e.style.display == "none") ? "" : "none";  //show it as the original
    return e.style.display != "none";
}

ZaGlobalAdvancedStatsPage.removeChild = function(id) {
    var e = document.getElementById(id);
    if (!AjxUtil.isEmpty(e) && !AjxUtil.isEmpty(e.parentNode)) {
        e.parentNode.removeChild(e);
    }
}

ZaGlobalAdvancedStatsPage.insertChartHTML = function(element) {
	var id = Math.random();
	var form = document.createElement("form");
	form.style.margin = "5px 10px";
	form.id = "loggerform" + id;
	form.onsubmit = "return false;";
	form.action = "#";
	
	var table = document.createElement("table");
	table.className = "ChartSettings";
	var tbody = document.createElement("tbody");
        table.appendChild(tbody);
	table.id = "loggertable" + id;
	table.style.tableLayout = "fixed";
	if (AjxEnv.isIE) {
		table.style.width = "96%";
	}
	
	var label;
	var tr;
	var td;
	var select;
	tr = document.createElement("tr");
	td = document.createElement("td");
	label = document.createElement("label");
	label.style.display = "block"; //show it in a single line
	label.htmlFor = "select-servers" + id;
	ZaGlobalAdvancedStatsPage.setText(label, ZaMsg.NAD_AdvStatsServerLabel);
	select = document.createElement("select");
	select.id = "select-servers" + id;
	select.style.width = "18em";
	select.name = "servers";
	select.onchange = function(evt) { ZaGlobalAdvancedStatsPage.serverSelected(evt, id); }
	td.vAlign = "top";
	td.appendChild(label);
	td.appendChild(select);
	tr.appendChild(td);
	td = document.createElement("td");
	label = document.createElement("label");
	label.style.display = "block"; //show it in a single line
	label.htmlFor = "select-group" + id;
	ZaGlobalAdvancedStatsPage.setText(label, ZaMsg.NAD_AdvStatsGroupLabel);
	select = document.createElement("select");
	select.id = "select-group" + id;
	select.style.width = "18em";
	select.name = "groups";
	select.onchange = function(evt) { ZaGlobalAdvancedStatsPage.groupSelected(evt, id); }
	td.vAlign = "top";
	td.appendChild(label);
	td.appendChild(select);
	tr.appendChild(td);
	td = document.createElement("td");
	label = document.createElement("label");
	label.style.display = "block"; //show it in a single line
	label.htmlFor = "select-counter" + id;
	ZaGlobalAdvancedStatsPage.setText(label, ZaMsg.NAD_AdvStatsCountersLabel);
	select = document.createElement("select");
	select.id = "select-counter" + id;
	select.style.width = "18em";
	select.name = "counters";
	select.multiple = true;
	select.size = 5;
	select.onchange = function(evt) { ZaGlobalAdvancedStatsPage.counterSelected(evt, id); }
	td.vAlign = "top";
	td.appendChild(label);
	td.appendChild(select);
	tr.appendChild(td);
	tbody.appendChild(tr);
	
	var input;
	tr = document.createElement("tr");
	td = document.createElement("td");
	label = document.createElement("label");
	label.style.display = "block"; //show it in a single line
	label.htmlFor = "input-start-time" + id;
	ZaGlobalAdvancedStatsPage.setText(label, ZaMsg.NAD_AdvStatsStartLabel);
	input = document.createElement("input");
	input.id = "input-start-time" + id;
	input.type = "text";
	input.name = "startTime";
	input.value = "now-1d";
	td.appendChild(label);
	td.appendChild(input);
	td.valign = "top";
	tr.appendChild(td);
	td = document.createElement("td");
	label = document.createElement("label");
	label.style.display = "block"; //show it in a single line
	label.htmlFor = "input-end-time" + id;
	ZaGlobalAdvancedStatsPage.setText(label, ZaMsg.NAD_AdvStatsEndLabel);
	input = document.createElement("input");
	input.id = "input-end-time" + id;
	input.type = "text";
	input.name = "endTime";
	input.value = "now";
	td.appendChild(label);
	td.appendChild(input);
	td.valign = "top";
	tr.appendChild(td);
	tbody.appendChild(tr);
	 
	form.appendChild(table);
	
	var a;
	var span;
	a = document.createElement("a");
	a.href = "javascript:void(0)";
	a.className = "LinkButton";
	a.onclick = function (evt) {
		var showing = ZaGlobalAdvancedStatsPage.showhide("loggertable" + id);
		var target = ZaGlobalAdvancedStatsPage.getTarget(evt);
		ZaGlobalAdvancedStatsPage.setText(target, (showing ? ZaMsg.NAD_AdvStatsHideChartSettingsLabel : ZaMsg.NAD_AdvStatsShowChartSettingsLabel));
		return false; //disable the default action from broswer, such as jumping to other page
	}
	ZaGlobalAdvancedStatsPage.setText(a, ZaMsg.NAD_AdvStatsHideChartSettingsLabel);
	form.appendChild(a);
	
	//span = document.createElement("span");
	//ZaGlobalAdvancedStatsPage.setText(span, " | ");
	//form.appendChild(span);
	a = document.createElement("a");
	a.href = "javascript:void(0)";
	a.className = "LinkButton";
	a.onclick = function () {
		var s = document.getElementById("select-counter" + id);
		ZaGlobalAdvancedStatsPage.counterSelected({ target: s }, id);
		return false; //disable the default action from broswer, such as jumping to other page
	}
	ZaGlobalAdvancedStatsPage.setText(a, ZaMsg.NAD_AdvStatsUpdateChartLabel);
	form.appendChild(a);
	//span = document.createElement("span");
	//ZaGlobalAdvancedStatsPage.setText(span, " | ");
	//form.appendChild(span);
	a = document.createElement("a");
	a.href = "javascript:void(0)";
	a.className = "LinkButton";
	a.onclick = function () {
		ZaGlobalAdvancedStatsPage.removeChild("loggerform" + id);
        ZaGlobalAdvancedStatsPage.removeChild("loggerchart" + id);
        ZaGlobalAdvancedStatsPage.removeChild("loggercanvas" + id);
		return false; //disable the default action from broswer, such as jumping to other page
	}
	ZaGlobalAdvancedStatsPage.setText(a, ZaMsg.NAD_AdvStatsRemoveChartLabel);
	form.appendChild(a);
	
	var div = document.createElement("div");
	div.style.padding = "5px 10px 15px";
	div.id = "loggerchart" + id;
	element.appendChild(form);
	element.appendChild(div);
    
    var canvasDiv = document.createElement("div");
    canvasDiv.style.height = "200px";
	
    var canvas = document.createElement("canvas");
    canvas.id = "loggercanvas" + id;
    canvasDiv.appendChild(canvas);
    element.appendChild(canvasDiv);

    var serversSelect = document.getElementById("select-servers" + id);
    var soapRequest = AjxSoapDoc.create("GetLoggerStatsRequest", ZaZimbraAdmin.URN, null);
    var cb = function(response) {
        var soapResponse = response.getResponse().Body.GetLoggerStatsResponse;
        ZaGlobalAdvancedStatsPage.clearSelect(serversSelect);
        if (soapResponse.hostname) {
            for (var i = 0, j = soapResponse.hostname.length; i < j; i++) {
                var option = document.createElement("option");
                if (i == 0) option.selected = "selected";
                option.value = soapResponse.hostname[i].hn;
                ZaGlobalAdvancedStatsPage.setText(option, soapResponse.hostname[i].hn);
                serversSelect.appendChild(option);
            }
            ZaGlobalAdvancedStatsPage.serverSelected({ target: serversSelect }, id);
        }
    };
    
    var csfeParams = { soapDoc: soapRequest, asyncMode: true, callback: new AjxCallback(cb) };
    var reqMgrParams = { controller: ZaApp.getInstance().getCurrentController(), busyMsg: ZaMsg.PQ_LOADING };
    ZaRequestMgr.invoke(csfeParams, reqMgrParams);
}

ZaGlobalAdvancedStatsPage.prototype._createHtml = 
function () {
	DwtTabViewPage.prototype._createHtml.call(this);
	var element = this.getHtmlElement();
	var div = document.createElement("div");
	div.style.padding = "5px 10px";
	var a = document.createElement("a");
	ZaGlobalAdvancedStatsPage.setText(a, ZaMsg.NAD_AdvStatsAddChartLabel);
	a.href = "javascript:void(0)";
	a.className = "LinkButton";
	a.onclick = function () {
		ZaGlobalAdvancedStatsPage.insertChartHTML(element);
		return false; //disable the default action from broswer, such as jumping to other page
	};
	div.appendChild(a);
	element.appendChild(div);
}
}

if (AjxPackage.define("zimbraAdmin.statistics.view.ZaServerStatsView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaServerStatsView 
* @contructor ZaServerStatsView
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaServerStatsView = function(parent) {

	DwtTabView.call(this, parent);
	
	this._appCtxt = this.shell.getData(ZaAppCtxt.LABEL);

    this._tabBar.setVisible(false); //new UI doesn't need to show the inner tabbar
    // TODO move add page to constructor function and not in setObject function
    this._lastWidth = 0;
    this._lastHeight = 0;
}

ZaServerStatsView.prototype = new DwtTabView;
ZaServerStatsView.prototype.constructor = ZaServerStatsView;

ZaServerStatsView.prototype._isMtaEnabled = function(server) {
	return server && server.attrs[ZaServer.A_zimbraMtaServiceEnabled];
}

ZaServerStatsView.prototype._isMailStoreEnabled = function(server) {
	return server &&
		server.attrs[ZaServer.A_zimbraMailboxServiceEnabled] &&
		server.attrs[ZaServer.A_zimbraMailClientServiceEnabled];
}

ZaServerStatsView.prototype.toString = 
function() {
	return "ZaServerStatsView";
}

ZaServerStatsView.prototype.getTabToolTip =
function () {
	if (this._containedObject) {
		return	ZaMsg.tt_tab_View + " " + this._containedObject.type + " " + this._containedObject.name + " " + ZaMsg.tt_tab_Statistics ;
	}else{
		return "" ;
	}
}

ZaServerStatsView.prototype.getTabIcon = 
function () {
	return "StatisticsByServer" ;
}

ZaServerStatsView.prototype.getTabTitle =
function () {
	if (this._containedObject) {
		return this._containedObject.name ;
	}else{
		return "" ;
	}
}
 
ZaServerStatsView.prototype.updateTab =
function () {
	var tab = this.getAppTab ();
	tab.resetLabel (this.getTabTitle()) ;
	tab.setImage (this.getTabIcon());
	tab.setToolTipContent (this.getTabToolTip()) ;
}

ZaServerStatsView.prototype.getAppTab =
function () {
	return ZaApp.getInstance().getTabGroup().getTabById(this.__internalId) ;
} 
 
/**
* @method setObject sets the object contained in the view
* @param entry - ZaServer object to display
**/
ZaServerStatsView.prototype.setObject =
function(entry) {
    if ( !entry || !entry.id ){
        return;
    }
    this._containedObject = entry ;
    this.serverId = entry.id;

    if( this._msgCountPage == null ){
        this._diskPage = new ZaServerDiskStatsPage(this);
        this.addTab(ZaMsg.TABT_Disk, this._diskPage);
    }
    this._diskPage.setObject(entry);

    if( this._sessionPage == null ){
        this._sessionPage = new ZaServerSessionStatsPage(this);
        this.addTab(ZaMsg.TABT_Session, this._sessionPage);
    }
    this._sessionPage.setObject(entry);

    if (ZaZimbraAdmin.isGlobalAdmin() && this._isMailStoreEnabled(entry)) {
        if( this._mbxPage == null ){
            this._mbxPage = new ZaServerMBXStatsPage (this);
            ZaServerMBXStatsPage.TAB_KEY = this.addTab(ZaMsg.TABT_MBX, this._mbxPage);
        }
        this._mbxPage.setObject(entry);
    }

	if (this._isMtaEnabled(entry)) {

	    if( this._msgCountPage == null ){
	        this._msgCountPage = new ZaServerMessageCountPage(this);
	        this.addTab(ZaMsg.TABT_InMsgs, this._msgCountPage);
	    }
		this._msgCountPage.setObject(entry);

	    if( this._msgsVolumePage == null ){
	        this._msgsVolumePage = new ZaServerMessageVolumePage(this);
	        this.addTab(ZaMsg.TABT_InData, this._msgsVolumePage);
	    }
	    this._msgsVolumePage.setObject(entry);

		if( this._spamPage == null ){
			this._spamPage = new ZaServerSpamActivityPage(this);
			this.addTab(ZaMsg.TABT_Spam_Activity, this._spamPage);
		}
		this._spamPage.setObject(entry);	
	}

	var szTitle = AjxStringUtil.htmlEncode(ZaMsg.NAD_ServerStatistics);
	if(entry.name) {
		szTitle = szTitle + entry.name;
	}
	this.titleCell.innerHTML = szTitle;
    // Only a hook here to resize all the page
    if (this._lastWidth && this._lastHeight)
        this._resetTabSizes(this._lastWidth, this._lastHeight);
}

ZaServerStatsView.prototype._resetTabSizes = 
function (width, height) {
    this._lastWidth = width;
    this._lastHeight = height;
    var tabBarSize = this._tabBar.getSize();
	var titleCellSize = Dwt.getSize(this.titleCell);

	var tabBarHeight = tabBarSize.y || this._tabBar.getHtmlElement().clientHeight;
	var titleCellHeight = titleCellSize.y || this.titleCell.clientHeight;
		
	var tabWidth = width;
	var newHeight = (height - tabBarHeight - titleCellHeight);
	var tabHeight = ( newHeight > 50 ) ? newHeight : 50;
	
	if(this._tabs && this._tabs.length) {
		for(var curTabKey in this._tabs) {
			if(this._tabs[curTabKey]["view"]) {
				this._tabs[curTabKey]["view"].resetSize(tabWidth, tabHeight);
			}	
		}
	}		
}

ZaServerStatsView.prototype._createHtml = 
function() {
	DwtTabView.prototype._createHtml.call(this);
	this._table = document.createElement("table") ;
	var htmlEl = this.getHtmlElement()
	htmlEl.insertBefore (this._table, htmlEl.firstChild);
	//this.getHtmlElement().appendChild(this._table) ;
	
	var row1;
	//var col1;
	var row2;
	var col2;
	row1 = this._table.insertRow(0);
	row1.align = "center";
	row1.vAlign = "middle";
	
	this.titleCell = row1.insertCell(row1.cells.length);
	this.titleCell.align = "center";
	this.titleCell.vAlign = "middle";
	this.titleCell.noWrap = true;	

	this.titleCell.id = Dwt.getNextId();
	this.titleCell.align="left";
	this.titleCell.innerHTML = AjxStringUtil.htmlEncode(ZaMsg.NAD_ServerStatistics);
	this.titleCell.className="AdminTitleBar";
}


ZaServerStatsView.prototype.getTabChoices =
function() {
    //var innerTabs = this._tab;
    var innerTabs = [ZaMsg.TABT_Disk, ZaMsg.TABT_Session];
    var entry = this._containedObject;

    if (ZaZimbraAdmin.isGlobalAdmin() && this._isMailStoreEnabled(entry)) {
        innerTabs.push(ZaMsg.TABT_MBX);
    }

    if (this._isMtaEnabled(entry)) {
        innerTabs.push(ZaMsg.TABT_InMsgs);
        innerTabs.push(ZaMsg.TABT_InData);
        innerTabs.push(ZaMsg.TABT_Spam_Activity);
    }

    var tabChoices = [];
    //index of _tabs is based on 1 rather than 0
    for (var i = 1; i <= innerTabs.length; i++){
        tabChoices.push({ value: i,
                            label: innerTabs[i-1]
                            //label: innerTabs[i].title
                        });
    }

    return tabChoices;
}



}
if (AjxPackage.define("zimbraAdmin.statistics.view.ZaServerMessageVolumePage")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaServerMessageVolumePage 
* @contructor ZaServerMessageVolumePage
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaServerMessageVolumePage = function(parent) {
	this.serverId = parent.serverId; //should pass this server id firstly
	DwtTabViewPage.call(this, parent);
	this._fieldIds = new Object(); //stores the ids of all the form elements

	//this._createHTML();
	this.initialized=false;
	this.setScrollStyle(DwtControl.SCROLL);	
}
 
ZaServerMessageVolumePage.prototype = new DwtTabViewPage;
ZaServerMessageVolumePage.prototype.constructor = ZaServerMessageVolumePage;

ZaServerMessageVolumePage.prototype.toString = 
function() {
	return "ZaServerMessageVolumePage";
}

ZaServerMessageVolumePage.prototype.showMe =  function(refresh) {
    this.setZIndex(DwtTabView.Z_ACTIVE_TAB);
	if (this.parent.getHtmlElement().offsetHeight > 26) { 						// if parent visible, use offsetHeight
		this._contentEl.style.height=this.parent.getHtmlElement().offsetHeight-26;
	} else {
		var parentHeight = parseInt(this.parent.getHtmlElement().style.height);	// if parent not visible, resize page to fit parent
		var units = AjxStringUtil.getUnitsFromSizeString(this.parent.getHtmlElement().style.height);
		if (parentHeight > 26) {
			this._contentEl.style.height = (Number(parentHeight-26).toString() + units);
		}
	}
	this._contentEl.style.width = this.parent.getHtmlElement().style.width;	// resize page to fit parent

	if(refresh && this._currentObject) {
		this.setObject(this._currentObject);
	}
	if (this._currentObject) {
	    var item = this._currentObject;
        var serverId = this.serverId;

        var charts = document.getElementById('loggerchartservermv-' + serverId);
        charts.style.display = "block";
        var divIds = [ 'servermv-no-mta-' + serverId,
            'server-message-volume-48hours-' + serverId,
            'server-message-volume-30days-' + serverId,
            'server-message-volume-60days-' + serverId,
            'server-message-volume-year-' + serverId
        ];

	    ZaGlobalAdvancedStatsPage.hideDIVs(divIds);
	    
        var hosts = ZaGlobalAdvancedStatsPage.getMTAHosts();
        if (ZaGlobalAdvancedStatsPage.indexOf(hosts, item.name) != -1) {
            var startTimes = [null, 'now-48h', 'now-30d', 'now-60d', 'now-1y'];
            for (var i=1; i < divIds.length; i++){ //skip divId[0] -- servermv-no-mta
                ZaGlobalAdvancedStatsPage.plotQuickChart( divIds[i], item.name, 'zmmtastats', ['mta_volume'], ['bytes'], startTimes[i], 'now', {convertToCount: 1} );
            }
        } else {
            var nomta = document.getElementById('loggerchartservermv-no-mta-' + serverId);
            nomta.style.display = "block";
            charts.style.display = "none";
            ZaGlobalAdvancedStatsPage.setText(nomta, ZaMsg.Stats_NO_MTA);
        }
	}
}

ZaServerMessageVolumePage.prototype.setObject =
function (item) {
	this._currentObject = item;
}

ZaServerMessageVolumePage.prototype._createHtml = 
function () {
	DwtTabViewPage.prototype._createHtml.call(this);
	var idx = 0;
	var html = new Array(50);
    var serverId = this.serverId;
	html[idx++] = "<h1 style='display:none;' id='loggerchartservermv-no-mta-" + serverId + "'></h1>";		
	html[idx++] = "<div class='StatsHeader'>" + ZaMsg.Stats_MV_Header + "</div>" ;	
	html[idx++] = "<div class='StatsDiv' id='loggerchartservermv-" + serverId + "'>";	
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsHour) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasserver-message-volume-48hours-" + serverId + "'><div id='loggerchartserver-message-volume-48hours-" + serverId + "'></div>";	
	html[idx++] = "</div>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsDay) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasserver-message-volume-30days-" + serverId + "'><div id='loggerchartserver-message-volume-30days-" + serverId + "'></div>";	
	html[idx++] = "</div>";	
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsMonth) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasserver-message-volume-60days-" + serverId + "'><div id='loggerchartserver-message-volume-60days-" + serverId + "'></div>";	
	html[idx++] = "</div>";	
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsYear) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasserver-message-volume-year-" + serverId + "'><div id='loggerchartserver-message-volume-year-" + serverId + "'></div>";	
	html[idx++] = "</div>";
	html[idx++] = "</div>";
	this.getHtmlElement().innerHTML = html.join("");
}
}
if (AjxPackage.define("zimbraAdmin.statistics.view.ZaServerMessageCountPage")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaServerMessageCountPage 
* @contructor ZaServerMessageCountPage
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaServerMessageCountPage = function(parent) {
	this.serverId = parent.serverId; //should save this server id firstly
	DwtTabViewPage.call(this, parent);
	this._fieldIds = new Object(); //stores the ids of all the form elements

	//this._createHTML();
	this.initialized=false;
	this.setScrollStyle(DwtControl.SCROLL);	
}
 
ZaServerMessageCountPage.prototype = new DwtTabViewPage;
ZaServerMessageCountPage.prototype.constructor = ZaServerMessageCountPage;

ZaServerMessageCountPage.prototype.toString = 
function() {
	return "ZaServerMessageCountPage";
}

ZaServerMessageCountPage.prototype.showMe =  function(refresh) {
    this.setZIndex(DwtTabView.Z_ACTIVE_TAB);
	if (this.parent.getHtmlElement().offsetHeight > 26) { 						// if parent visible, use offsetHeight
		this._contentEl.style.height=this.parent.getHtmlElement().offsetHeight-26;
	} else {
		var parentHeight = parseInt(this.parent.getHtmlElement().style.height);	// if parent not visible, resize page to fit parent
		var units = AjxStringUtil.getUnitsFromSizeString(this.parent.getHtmlElement().style.height);
		if (parentHeight > 26) {
			this._contentEl.style.height = (Number(parentHeight-26).toString() + units);
		}
	}
	this._contentEl.style.width = this.parent.getHtmlElement().style.width;	// resize page to fit parent

	if(refresh && this._currentObject) {
		this.setObject(this._currentObject);
	}
	if (this._currentObject) {
	    var item = this._currentObject;
        var serverId = this.serverId;

        var charts = document.getElementById('loggerchartservermc-' + serverId);
        charts.style.display = "block";
        var divIds = [ 'servermc-no-mta-' + serverId,
                       'server-message-count-48hours-' + serverId,
                       'server-message-count-30days-' + serverId,
                       'server-message-count-60days-' + serverId,
                       'server-message-count-year-' + serverId 
                      ];
        ZaGlobalAdvancedStatsPage.hideDIVs(divIds);

	    var hosts = ZaGlobalAdvancedStatsPage.getMTAHosts();
	    if (ZaGlobalAdvancedStatsPage.indexOf(hosts, item.name) != -1) {
            var startTimes = [null, 'now-48h', 'now-30d', 'now-60d', 'now-1y'];
            for (var i=1; i < divIds.length; i++){ //skip divId[0] -- servermv-no-mta
                ZaGlobalAdvancedStatsPage.plotQuickChart( divIds[i], item.name, 'zmmtastats', ['mta_count'], ['msgs'], startTimes[i], 'now', { convertToCount: 1 });
            }


        } else {
            var nomta = document.getElementById('loggerchartservermc-no-mta-' + serverId);
            nomta.style.display = "block";
            charts.style.display = "none";
            ZaGlobalAdvancedStatsPage.setText(nomta, ZaMsg.Stats_NO_MTA);
        }
	}
}

ZaServerMessageCountPage.prototype.setObject =
function (item) {
	this._currentObject = item;	
}

ZaServerMessageCountPage.prototype._createHtml = 
function () {
	var idx = 0;
	var html = new Array(50);
	var serverId = this.serverId;
	DwtTabViewPage.prototype._createHtml.call(this);
	html[idx++] = "<h1 style='display:none;' id='loggerchartservermc-no-mta-" + serverId + "'></h1>";
	html[idx++] = "<div class='StatsHeader'>" + ZaMsg.Stats_MC_Header + "</div>";
	html[idx++] = "<div class='StatsDiv' id='loggerchartservermc-" + serverId + "'>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsHour) + "</div>";
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasserver-message-count-48hours-" + serverId + "'><div id='loggerchartserver-message-count-48hours-" + serverId + "'></div>";
	html[idx++] = "</div>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsDay) + "</div>";
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasserver-message-count-30days-" + serverId + "'><div id='loggerchartserver-message-count-30days-" + serverId + "'></div>";
	html[idx++] = "</div>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsMonth) + "</div>";
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasserver-message-count-60days-" + serverId + "'><div id='loggerchartserver-message-count-60days-" + serverId + "'></div>";
	html[idx++] = "</div>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsYear) + "</div>";
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasserver-message-count-year-" + serverId + "'><div id='loggerchartserver-message-count-year-" + serverId + "'></div>";
	html[idx++] = "</div>";
	html[idx++] = "</div>";
	this.getHtmlElement().innerHTML = html.join("");
}
}
if (AjxPackage.define("zimbraAdmin.statistics.view.ZaServerSpamActivityPage")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaServerSpamActivityPage 
* @contructor ZaServerSpamActivityPage
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaServerSpamActivityPage = function(parent) {
	this.serverId = parent.serverId; //should pass this server id firstly

	DwtTabViewPage.call(this, parent);
	this._fieldIds = new Object(); //stores the ids of all the form elements

	//this._createHTML();
	this.initialized=false;
	this.setScrollStyle(DwtControl.SCROLL);	
}
 
ZaServerSpamActivityPage.prototype = new DwtTabViewPage;
ZaServerSpamActivityPage.prototype.constructor = ZaServerSpamActivityPage;

ZaServerSpamActivityPage.prototype.toString = 
function() {
	return "ZaServerSpamActivityPage";
}

ZaServerSpamActivityPage.prototype.showMe =  function(refresh) {
    this.setZIndex(DwtTabView.Z_ACTIVE_TAB);
	if (this.parent.getHtmlElement().offsetHeight > 26) { 						// if parent visible, use offsetHeight
		this._contentEl.style.height=this.parent.getHtmlElement().offsetHeight-26;
	} else {
		var parentHeight = parseInt(this.parent.getHtmlElement().style.height);	// if parent not visible, resize page to fit parent
		var units = AjxStringUtil.getUnitsFromSizeString(this.parent.getHtmlElement().style.height);
		if (parentHeight > 26) {
			this._contentEl.style.height = (Number(parentHeight-26).toString() + units);
		}
	}
	this._contentEl.style.width = this.parent.getHtmlElement().style.width;	// resize page to fit parent

	if(refresh && this._currentObject) {
		this.setObject(this._currentObject);
	}
	if (this._currentObject) {
	    var item = this._currentObject;
        var serverId = this.serverId;

        var charts = document.getElementById('loggerchartserverasav-' + serverId);
        charts.style.display = "block";
        var divIds = [ 'serverasav-no-mta-' + serverId,
            'server-message-asav-48hours-' + serverId,
            'server-message-asav-30days-' + serverId,
            'server-message-asav-60days-' + serverId,
            'server-message-asav-year-' + serverId
        ];

	    ZaGlobalAdvancedStatsPage.hideDIVs(divIds);
	    
	    var hosts = ZaGlobalAdvancedStatsPage.getMTAHosts();
	    if (ZaGlobalAdvancedStatsPage.indexOf(hosts, item.name) != -1) {
            var startTimes = [null, 'now-48h', 'now-30d', 'now-60d', 'now-1y'];
            for (var i=1; i < divIds.length; i++){ //skip divId[0] -- servermv-no-mta
                ZaGlobalAdvancedStatsPage.plotQuickChart(divIds[i], item.name, 'zmmtastats', ['filter_virus', 'filter_spam'], ['filtered'], startTimes[i], 'now', { convertToCount: 1 });
            }

        } else {
            var nomta = document.getElementById('loggerchartserverasav-no-mta-' + serverId);
            nomta.style.display = "block";
            charts.style.display = "none";
            ZaGlobalAdvancedStatsPage.setText(nomta, ZaMsg.Stats_NO_MTA);
        }
    }
}

ZaServerSpamActivityPage.prototype.setObject =
function (item) {
	this._currentObject = item;		
}

ZaServerSpamActivityPage.prototype._createHtml = 
function () {
	DwtTabViewPage.prototype._createHtml.call(this);
	var idx = 0;
	var html = new Array(50);
    var serverId = this.serverId;
	html[idx++] = "<h1 style='display:none;' id='loggerchartserverasav-no-mta-" + serverId + "'></h1>";	
	html[idx++] = "<div class='StatsHeader'>" + ZaMsg.Stats_AV_Header + "</div>" ;	
	html[idx++] = "<div class='StatsDiv' id='loggerchartserverasav-" + serverId + "'>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsHour) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasserver-message-asav-48hours-" + serverId + "'><div id='loggerchartserver-message-asav-48hours-" + serverId + "'></div>";	
	html[idx++] = "</div>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsDay) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasserver-message-asav-30days-" + serverId + "'><div id='loggerchartserver-message-asav-30days-" + serverId + "'></div>";	
	html[idx++] = "</div>";	
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsMonth) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasserver-message-asav-60days-" + serverId + "'><div id='loggerchartserver-message-asav-60days-" + serverId + "'></div>";	
	html[idx++] = "</div>";		
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsYear) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasserver-message-asav-year-" + serverId + "'><div id='loggerchartserver-message-asav-year-" + serverId + "'></div>";	
	html[idx++] = "</div>";
	html[idx++] = "</div>";
	this.getHtmlElement().innerHTML = html.join("");
}
}
if (AjxPackage.define("zimbraAdmin.statistics.view.ZaServerDiskStatsPage")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaServerDiskStatsPage 
* @contructor ZaServerDiskStatsPage
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaServerDiskStatsPage = function(parent) {
	this.serverId = parent.serverId; //should save this server id firstly

	DwtTabViewPage.call(this, parent);
	this._fieldIds = new Object(); //stores the ids of all the form elements

	//this._createHTML();
	this.initialized=false;
	this.setScrollStyle(DwtControl.SCROLL);	
}
 
ZaServerDiskStatsPage.prototype = new DwtTabViewPage;
ZaServerDiskStatsPage.prototype.constructor = ZaServerDiskStatsPage;

ZaServerDiskStatsPage.prototype.toString = 
function() {
	return "ZaServerDiskStatsPage";
}

ZaServerDiskStatsPage.prototype.showMe =  function(refresh) {
    this.setZIndex(DwtTabView.Z_ACTIVE_TAB);
	if (this.parent.getHtmlElement().offsetHeight > 26) { 						// if parent visible, use offsetHeight
		this._contentEl.style.height=this.parent.getHtmlElement().offsetHeight-26;
	} else {
		var parentHeight = parseInt(this.parent.getHtmlElement().style.height);	// if parent not visible, resize page to fit parent
		var units = AjxStringUtil.getUnitsFromSizeString(this.parent.getHtmlElement().style.height);
		if (parentHeight > 26) {
			this._contentEl.style.height = (Number(parentHeight-26).toString() + units);
		}
	}
	this._contentEl.style.width = this.parent.getHtmlElement().style.width;	// resize page to fit parent

	if(refresh && this._currentObject) {
		this.setObject(this._currentObject);
	}
	if (this._currentObject) {
	    var item = this._currentObject;
        var serverId = this.serverId;

        if (!this._disks) {
            var counters = ZaGlobalAdvancedStatsPage.getCounters(item.name, 'df.csv');
            var diskKeys = {};
            for (var i = 0; i < counters.length; i++) {
                var disk = counters[i].split("::");
                diskKeys[disk[0]] = 1;
            }
            var disks = [];
            for (var i in diskKeys)
                disks.push(i);
            this._disks = disks;
        }
        
        var columns = [];
        for (var i = 0; i < this._disks.length; i++) {
            columns.push(this._disks[i] + "::disk_pct_used");
        }

        var divIds = [ 'server-disk-stat-48hours-' + serverId,
                       'server-disk-stat-30days-' + serverId,
                       'server-disk-stat-60days-' + serverId,
                       'server-disk-stat-year-' + serverId
                     ];

        var startTimes = ['now-48h', 'now-30d', 'now-60d', 'now-1y'];
        for (var i=0; i < divIds.length; i++){
            ZaGlobalAdvancedStatsPage.plotQuickChart(divIds[i],  item.name, 'df.csv', columns, null, startTimes[i], 'now');
        }
	}
}

ZaServerDiskStatsPage.prototype.setObject =
function (item) {
	this._currentObject = item;	
}

ZaServerDiskStatsPage.prototype._createHtml = 
function () {
    var idx = 0;
    var html = new Array(50);
	DwtTabViewPage.prototype._createHtml.call(this);
	var serverId = this.serverId;
	//html[idx++] = "<div class='StatsHeader'>" + ZaMsg.Stats_MC_Header + "</div>";	
	html[idx++] = "<div class='StatsDiv'>";	
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsHour) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasserver-disk-stat-48hours-" + serverId + "'><div id='loggerchartserver-disk-stat-48hours-" + serverId + "'></div>";	
	html[idx++] = "</div>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsDay) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasserver-disk-stat-30days-" + serverId + "'><div id='loggerchartserver-disk-stat-30days-" + serverId + "'></div>";	
	html[idx++] = "</div>";
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsMonth) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasserver-disk-stat-60days-" + serverId + "'><div id='loggerchartserver-disk-stat-60days-" + serverId + "'></div>";	
	html[idx++] = "</div>";		
	html[idx++] = "<div class='StatsImageTitle'>" + AjxStringUtil.htmlEncode(ZaMsg.NAD_StatsYear) + "</div>";	
	html[idx++] = "<div class='StatsImage'>";
	html[idx++] = "<canvas id='loggercanvasserver-disk-stat-year-" + serverId + "'><div id='loggerchartserver-disk-stat-year-" + serverId + "'></div>";
	html[idx++] = "</div>";
	html[idx++] = "</div>";
	this.getHtmlElement().innerHTML = html.join("");
}
}
if (AjxPackage.define("zimbraAdmin.statistics.view.ZaServerMBXStatsPage")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
  
/**
* Display the Mailbox disk usage statistics per serer.
* 1) Top diskspace consumers
* 2) Top quota consumers
* 
* @class ZaServerMBXStatsPage
* @contructor ZaServerMBXStatsPage
* @param parent
* @param app
* @author Charles Cao
**/
		
ZaServerMBXStatsPage = function(parent) {
	DwtTabViewPage.call(this, parent);
    this.setScrollStyle(Dwt.SCROLL_Y);
	this._rendered = false;
	this._initialized = false ;
	this._hide = true ; //indicate that the Mbx Quota Tab is hidden
	this._prevSortBy = null ;
	this._prevAscending = null ;
}

ZaServerMBXStatsPage.prototype = new DwtTabViewPage;
ZaServerMBXStatsPage.prototype.constructor = ZaServerMBXStatsPage;

ZaServerMBXStatsPage.MBX_DISPLAY_LIMIT = ZaSettings.RESULTSPERPAGE; 
ZaServerMBXStatsPage.XFORM_ITEM_ACCOUNT = "account";
ZaServerMBXStatsPage.XFORM_ITEM_DISKUSAGE = "diskUsage";
ZaServerMBXStatsPage.XFORM_ITEM_QUOTAUSAGE = "quotaUsage";
ZaServerMBXStatsPage.XFORM_ITEM_QUOTA = "quota";
ZaServerMBXStatsPage.XFORM_ITEM_DISKMBX = "diskMbx";
ZaServerMBXStatsPage.XFORM_ITEM_QUOTAMBX = "quotaMbx";
ZaServerMBXStatsPage.TAB_KEY = 0;
ZaServerMBXStatsPage._offset = 0;
ZaServerMBXStatsPage._totalPage = 0;
ZaServerMBXStatsPage._currentPage = 0;

ZaServerMBXStatsPage.prototype.toString = function() {
	return "ZaServerMBXStatsPage";
};

ZaServerMBXStatsPage.prototype.setObject = function (item) {	
	this._server = item;
	DBG.println ("Set the new Server Name = " + this._server.name);
	this._render(item);
};

ZaServerMBXStatsPage.prototype._render = function (server) {
	if (!this._rendered) {		
		var modelData = {
			getMbxPool: function (model, instance) {
				return instance.mbxPool;
			},
			setMbxPool: function (value, instance, parentValue, ref) {
				instance.mbxPool = value;
			},
			items: [
				{id: "mbxPool", type:_LIST_, setter:"setMbxPool", setterScope:_MODEL_, 
											 getter: "getMbxPool", getterScope:_MODEL_}
			]		
		};
		var model = new XModel (modelData);
		var instance = new Array();
	    this._view = new XForm(this._getXForm(), model, instance, this);
		this._view.setController(this); 
		
		this._view.draw();
		this._rendered = true;
	} else{
		this.showMe(true); //always refresh when user click on the server list
	}
};

//data instance of the xform
ZaServerMBXStatsPage.prototype.getMbxes = function ( targetServer, offset, sortBy, sortAscending, callback){
	var result = { totalPage: 0, curPage:0, hasMore: false, mbxes: new Array() };
	var soapDoc = AjxSoapDoc.create("GetQuotaUsageRequest", ZaZimbraAdmin.URN, null);
	
	this._prevAscending = sortAscending ;
	this._prevSortBy = sortBy ;
	
	if (sortBy == null || sortBy == ZaServerMBXStatsPage.XFORM_ITEM_DISKUSAGE) {
		sortBy = "totalUsed" ;
	}else if (sortBy == ZaServerMBXStatsPage.XFORM_ITEM_QUOTAUSAGE){
		sortBy = "percentUsed" ;
	}else if (sortBy == ZaServerMBXStatsPage.XFORM_ITEM_QUOTA ){
		sortBy = "quotaLimit";
	}else if (sortBy == ZaServerMBXStatsPage.XFORM_ITEM_ACCOUNT ){
		sortBy = "account";
	} else {
		sortBy = "totalUsed";
	}	
	soapDoc.getMethod().setAttribute("sortBy", sortBy );
	if (sortAscending) {
		soapDoc.getMethod().setAttribute("sortAscending", sortAscending);
	}
	soapDoc.getMethod().setAttribute("offset", offset);
	soapDoc.getMethod().setAttribute("limit", ZaServerMBXStatsPage.MBX_DISPLAY_LIMIT);
	soapDoc.getMethod().setAttribute("refresh", "1");
	//use refresh="1" to force server side re-calculating quota and ignore cached data.

	var params = new Object ();
	params.soapDoc = soapDoc ;
	params.targetServer = targetServer ;
    var isAsyncMode = callback? true: false;
    if (isAsyncMode) {
        params.asyncMode = true;
        params.callback = callback;
    }
	var reqMgrParams = {
		controller : ZaApp.getInstance().getCurrentController(),
		busyMsg : ZaMsg.BUSY_GET_QUOTA
	}
	var resp = ZaRequestMgr.invoke(params, reqMgrParams);
    if (isAsyncMode) {
        return resp;
    } else {
        resp = resp.Body.GetQuotaUsageResponse;
    }
	
	if ((resp.account && resp.account.length > 0) && (resp.searchTotal && resp.searchTotal > 0)){	
		result.hasMore = resp.more ;
		var totalMbxes = resp.searchTotal;
		
		result.totalPage = parseInt (Math.ceil(totalMbxes / ZaServerMBXStatsPage.MBX_DISPLAY_LIMIT ));
		result.curPage = offset / ZaServerMBXStatsPage.MBX_DISPLAY_LIMIT + 1 ;
		
		var accounts = resp.account ;		
		var quotaLimit = 0;
		var percentage = 0 ;
		var diskUsed = 0;
		var _1MB = 1048576 ;
		var accountArr = new Array ();
		
		for (var i=0; i<accounts.length; i ++){
			diskUsed = ( accounts[i].used / _1MB ).toFixed(2) ;
			
			if (accounts[i].limit == 0 ){
				quotaLimit = ZaMsg.Unlimited;
				percentage = 0 ;	
			}else{			
				if (accounts[i].limit >= _1MB) {
					quotaLimit = ( accounts[i].limit / _1MB ).toFixed() ;						
				}else{ //quota limit is too small, we set it to 1MB. And it also avoid the NaN error when quotaLimit = 0
					quotaLimit = 1 ;
				}
				percentage = ((diskUsed * 100) / quotaLimit).toFixed() ;
			}		    
			accountArr [i] = { 	account : accounts[i].name,
								diskUsage :  AjxMessageFormat.format (ZaMsg.MBXStats_DISK_MSB, [AjxUtil.formatSizeForUnits(accounts[i].used, AjxUtil.SIZE_MEGABYTES, false, 1)]),
								quotaUsage : percentage + "\%" ,
								quota: quotaLimit + " MB"				 
								};
			//need to override the toString method, so when XForm does the element comparison, it will return the correct result
			//it is required when xform list needs to be update.
			accountArr[i].toString = function (){ return this.account ; };
		}
		
		result.mbxes = accountArr ;
	}	
	
	return result;	
};

ZaServerMBXStatsPage.prototype._getXForm = function () {
	if (this._xform != null) return this._xform;
	var sortable = 1;
	var sourceHeaderList = new Array();
	var defaultColumnSortable = 1;
											//idPrefix, label, 
											//iconInfo, width, sortable, sortField, resizeable, visible
	sourceHeaderList[0] = new ZaListHeaderItem(ZaServerMBXStatsPage.XFORM_ITEM_ACCOUNT, 	ZaMsg.MBXStats_ACCOUNT, 	
												null, 250, sortable++, ZaServerMBXStatsPage.XFORM_ITEM_ACCOUNT, true, true);
	sourceHeaderList[1] = new ZaListHeaderItem(ZaServerMBXStatsPage.XFORM_ITEM_QUOTA,   	ZaMsg.MBXStats_QUOTA,   	
												null, 120,  sortable++,  ZaServerMBXStatsPage.XFORM_ITEM_QUOTA, true, true);												
	defaultColumnSortable = sortable ;
	sourceHeaderList[2] = new ZaListHeaderItem(ZaServerMBXStatsPage.XFORM_ITEM_DISKUSAGE, 	ZaMsg.MBXStats_DISKUSAGE,	
												null, 200,  sortable++,  ZaServerMBXStatsPage.XFORM_ITEM_DISKUSAGE, true, true);
	sourceHeaderList[3] = new ZaListHeaderItem(ZaServerMBXStatsPage.XFORM_ITEM_QUOTAUSAGE,	ZaMsg.MBXStats_QUOTAUSAGE, 	
												null, "auto",  sortable++, ZaServerMBXStatsPage.XFORM_ITEM_QUOTAUSAGE, false, true);
	
	var ffTableStyle = "width:100%;overflow:visible;" ;
	var tableStyle = 	AjxEnv.isIE  ? ffTableStyle + "height:100%;" : ffTableStyle ;
	
	this._xform = {		
	    numCols:1, 
		tableCssStyle: tableStyle,
					
	    items:[
	      	//Convert to the listview
		   	{ref:"mbxPool", type:_DWT_LIST_, id: "mbxPool", width:"100%",  cssClass: "MBXList", defaultColumnSortable: defaultColumnSortable,
                getCustomWidth:ZaServerMBXStatsPage.getCustomWidth, getCustomHeight:ZaServerMBXStatsPage.getCustomHeight,
				forceUpdate: true, widgetClass:ZaServerMbxListView, headerList:sourceHeaderList}
		]	    
	};		   

	return this._xform;
};

ZaServerMBXStatsPage.getCustomWidth = function () {
    var page = this.getForm().parent;
    if (page._rendered) {
        var bounds = page.getBounds();
        return bounds.width;
    }
    return "100%"
}

ZaServerMBXStatsPage.getCustomHeight = function () {
    var page = this.getForm().parent;
    if (page._rendered) {
        var bounds = page.getBounds();
        return bounds.height;
    }
    return "100%"
}

//this function is called when user switch to the mbx quota tab
ZaServerMBXStatsPage.prototype.showMe = 
function (refresh){
	this.setZIndex(DwtTabView.Z_ACTIVE_TAB);

	if (this.parent.getHtmlElement().offsetHeight > 26) { 						// if parent visible, use offsetHeight
		this._contentEl.style.height=this.parent.getHtmlElement().offsetHeight-26;
	} else {
		var parentHeight = parseInt(this.parent.getHtmlElement().style.height);	// if parent not visible, resize page to fit parent
		var units = AjxStringUtil.getUnitsFromSizeString(this.parent.getHtmlElement().style.height);
		if (parentHeight > 26) {
			this._contentEl.style.height = (Number(parentHeight-26).toString() + units);
		}
	}

	this._contentEl.style.width = this.parent.getHtmlElement().style.width;	// resize page to fit parent

	var instance = null ;

	if ( !this._initialized || refresh) {
		//check whether the targetServer has the zimbra store enabled
		var serverAttrs = this._server.attrs ;
		var mbxesObj = {};
		if (serverAttrs && (!(serverAttrs[ZaServer.A_zimbraMailboxServiceInstalled] && serverAttrs[ZaServer.A_zimbraMailboxServiceEnabled]))){
			mbxesObj.mbxes = [] ;
		}else{
			//reserve the previous sort and ascending information. so the list hearder can display currectly
			//mbxesObj.mbxes = [] ;
			mbxesObj = this.getMbxes( this._server.id, 0 , this._prevSortBy, this._prevAscending) ;
		}
		
		instance = { 	serverid: this._server.id,
						offset:  0,	
						sortBy : this._prevSortBy , //reserve the previous sort and ascending information.
						sortAscending: this._prevAscending, //so the list hearder can display currectly
						curPage: mbxesObj.curPage ,
						totalPage: mbxesObj.totalPage,					
						mbxPool: mbxesObj.mbxes };
		
		
		var xform = this._view ;
		xform.setInstance( instance );

        if (!this._initialized) {
            var parentBounds = this.parent.getBounds();
            this.setSize(parentBounds.width, parentBounds.height);
        }

        this.mbxPoolWidget = xform.getItemById(xform.getId()+ "_mbxPool").getWidget();
        this.mbxPoolWidget.setScrollHasMore(mbxesObj.hasMore);
		this._initialized = true ;
	}else{
		instance = this._view.getInstance();
	}
	this.updateToolbar ( instance.curPage, instance.totalPage);	
	this._hide = false ;
};

ZaServerMBXStatsPage.prototype.hideMe = 
function (){
	DwtTabViewPage.prototype.hideMe.call(this);	
	this.updateToolbar(null, null, true);
	this._hide = true ;
};

//update the mbx list items based ont the offset which is changed when page back/forward
ZaServerMBXStatsPage.prototype.updateMbxLists =
function (curInstance, serverid, offset, sortBy, sortAscending) {
	if (curInstance) {
		if (serverid == null ) serverid = curInstance.serverid ;
		if (offset == null) offset = curInstance.offset;
		if (sortBy == null) sortBy = curInstance.sortBy ;
		if (sortAscending == null) sortAscending = curInstance.sortAscending ;	
	}
		
	var mbxesObj = this.getMbxes (serverid, offset, sortBy, sortAscending);
	
	curInstance = { 	serverid: serverid,
						offset:  offset,	
						sortBy : sortBy ,
						sortAscending: sortAscending,
						curPage: mbxesObj.curPage ,
						totalPage: mbxesObj.totalPage,					
						mbxPool: mbxesObj.mbxes };
	
	var xform = this._view ;
	xform.parent.updateToolbar(curInstance.curPage, curInstance.totalPage);
	xform.setInstance(curInstance) ;
    this.mbxPoolWidget.setScrollHasMore(mbxesObj.hasMore);
}; 

ZaServerMBXStatsPage.prototype.updateToolbar = 
function (curPage, totalPage, hide ){
	var controller = ZaApp.getInstance().getCurrentController();
	try {
		//enable the page back/forward button
		if ( controller instanceof ZaServerStatsController ){
			var toolBar = controller.getToolBar();			
			if (toolBar){
				if (! hide) {
					if (curPage > 1 ){ 
						toolBar.enable([ZaOperation.PAGE_BACK, ZaOperation.LABEL], true);
					} else {
						toolBar.enable([ZaOperation.PAGE_BACK], false);
					}
					
					if (curPage < totalPage  ){ 
						toolBar.enable([ZaOperation.PAGE_FORWARD, ZaOperation.LABEL], true);
					} else {
						toolBar.enable([ZaOperation.PAGE_FORWARD], false);
					}
					
					if (curPage && totalPage) {
						toolBar.getButton("PageInfo").setText(AjxMessageFormat.format (ZaMsg.MBXStats_PAGEINFO, [curPage, totalPage]));
					} 
					
					//update the help link for the Mbx Stats
					controller._helpURL = ZaUtil.HELP_URL;
					controller._helpButtonText = ZaMsg.helpViewMailboxQuotas;
				}else {
					toolBar.enable([ZaOperation.PAGE_FORWARD, ZaOperation.PAGE_BACK, ZaOperation.LABEL], false);
					toolBar.getButton("PageInfo").setText(AjxMessageFormat.format (ZaMsg.MBXStats_PAGEINFO, [1,1]));
					//change the help link back
					controller._helpURL = ZaUtil.HELP_URL;
					controller._helpButtonText = ZaMsg.helpCheckStatistics;
				}
			}
		}
	}catch (ex){
		controller._handleException (ex, "ZaServerMBXStatsPage.updateToolbar", null, false)
	}
};

///////////////////////////////////////////////////////////////////////////////////////////////////////
// This is the list view for the display of mbx accounts
///////////////////////////////////////////////////////////////////////////////////////////////////////

ZaServerMbxListView = function(parent, className, posStyle, headerList) {
	var posStyle = DwtControl.ABSOLUTE_STYLE;
	ZaListView.call(this, parent, className, posStyle, headerList, undefined, undefined, true);
    // For IE fix scroll everywhere issue;
    this.setLocation(0,0);
}

ZaServerMbxListView.prototype = new ZaListView;
ZaServerMbxListView.prototype.constructor = ZaServerMbxListView;

ZaServerMbxListView.prototype.toString = function() {
	return "ZaServerMbxListView";
};

ZaServerMbxListView.prototype._createItemHtml =
function(mbx, now, isDragProxy) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(mbx, div, DwtListView.TYPE_LIST_ITEM);
	
	var idx = 0;
	html[idx++] = "<table width='100%'  cellspacing='0' cellpadding='0'>";

	html[idx++] = "<tr>";
	if(this._headerList) {
		var cnt = this._headerList.length;
		var progressBar = null ;
		var progressCssClass = null ;
		var wholeCssClass = null ;
		var percent = null ;
		var percentInt = null ;
		for(var i = 0; i < cnt; i++) {
			var field = this._headerList[i]._field;
			if(field == ZaServerMBXStatsPage.XFORM_ITEM_ACCOUNT) {
				// account
				html[idx++] = "<td width=" + this._headerList[i]._width + "><nobr>";
				html[idx++] = AjxStringUtil.htmlEncode(mbx[ZaServerMBXStatsPage.XFORM_ITEM_ACCOUNT]);				
				html[idx++] = "</nobr></td>";
			} else if (field == ZaServerMBXStatsPage.XFORM_ITEM_QUOTAUSAGE){ //this must before the QUOTA
				// quota usage
				html[idx++] = "<td width=" + this._headerList[i]._width + ">";
				//html[idx++] = AjxStringUtil.htmlEncode(mbx[ZaServerMBXStatsPage.XFORM_ITEM_QUOTAUSAGE]);
				//add the progress bar
				progressCssClass = "mbxprogressused";
				wholeCssClass = "mbxprogressbar" ;
				progressBar = new DwtProgressBar(this);
				percent = mbx[ZaServerMBXStatsPage.XFORM_ITEM_QUOTAUSAGE] ;
				percentInt = parseInt(percent) ;
				if ( percentInt > 85 ) {
					progressCssClass += "Critical" ; 
				}else if (percentInt > 65 ) {
					progressCssClass += "Warning" ;
				}
		
				progressBar.setProgressCssClass(progressCssClass);
				progressBar.setWholeCssClass(wholeCssClass);	
				progressBar.setLabel (percent, true) ;
				progressBar.setValueByPercent (percent);
							
				html[idx++] = progressBar.getHtmlElement().innerHTML	;						
//				html[idx++] = "<div>Add the progress bar</div>";
				html[idx++] = "</td>";	
				progressBar.dispose ();		
			} else if(field == ZaServerMBXStatsPage.XFORM_ITEM_QUOTA) {
				// quota
				html[idx++] = "<td width=" + this._headerList[i]._width + ">";
				html[idx++] = AjxStringUtil.htmlEncode(mbx[ZaServerMBXStatsPage.XFORM_ITEM_QUOTA]);
				html[idx++] = "</td>";
			} else if (field == ZaServerMBXStatsPage.XFORM_ITEM_DISKUSAGE) {
				// mbx size
				html[idx++] = "<td width=" + this._headerList[i]._width + ">";
				html[idx++] = AjxStringUtil.htmlEncode(mbx[ZaServerMBXStatsPage.XFORM_ITEM_DISKUSAGE]);
				html[idx++] = "</td>";	
			} 
		}
	} else {
		html[idx++] = "<td width=100%><nobr>";
		html[idx++] = AjxStringUtil.htmlEncode(mbx[ZaServerMBXStatsPage.XFORM_ITEM_ACCOUNT]);
		html[idx++] = "</nobr></td>";
	}
	
	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}


ZaServerMbxListView.prototype._setNoResultsHtml = function() {
	var buffer = new AjxBuffer();
	var	div = document.createElement("div");
	
	buffer.append("<table width='100%' cellspacing='0' cellpadding='1'>",
				  "<tr><td class='NoResults'>",
				  AjxStringUtil.htmlEncode(ZaMsg.MBXStats_NoMbx),
				  "</td></tr></table>");
	
	div.innerHTML = buffer.toString();
	this._addRow(div);
};

ZaServerMbxListView.prototype._sortColumn = function (columnItem, bSortAsc){
	var sortAscending = bSortAsc ? 1 : 0 ;
	var sortBy = columnItem._sortField ;
	var xform = this.parent ;
	var curInst = xform.getInstance();
	var mbxPage = xform.parent ;
	mbxPage.updateMbxLists(curInst, null, 0, sortBy, sortAscending );
};

ZaServerMbxListView.prototype._loadMsg = function(params) {
    var offset = params.offset;
    var instance = this.parent.getInstance();
    var server = instance.serverid;
    var sortBy = instance.sortBy;
    var sortAscending = instance.sortAscending;
    var limit = params.limit;
    var updateCallback = new AjxCallback(this, this.updateMoreItems);
    ZaServerMBXStatsPage.prototype.getMbxes.call(this.parent.parent, server, offset, sortBy, sortAscending, updateCallback);

}

ZaServerMbxListView.prototype.updateMoreItems = function(resp) {
    if (resp && !resp.isException()) {
        resp = resp.getResponse().Body.GetQuotaUsageResponse;
	    var numFormatter = AjxNumberFormat.getInstance();
	    if ((resp.account && resp.account.length > 0) && (resp.searchTotal && resp.searchTotal > 0)){
            var hasMore = resp.more ;
            var totalMbxes = resp.searchTotal;

            var accounts = resp.account ;
            var quotaLimit = 0;
            var percentage = 0 ;
            var diskUsed = 0;
            var _1MB = 1048576 ;
            var accountArr = new Array ();

            for (var i=0; i<accounts.length; i ++){
                diskUsed = ( accounts[i].used / _1MB ).toFixed(2) ;

                if (accounts[i].limit == 0 ){
                    quotaLimit = ZaMsg.Unlimited;
                    percentage = 0 ;
                }else{
                    if (accounts[i].limit >= _1MB) {
                        quotaLimit = ( accounts[i].limit / _1MB ).toFixed() ;
                    }else{ //quota limit is too small, we set it to 1MB. And it also avoid the NaN error when quotaLimit = 0
                        quotaLimit = 1 ;
                    }
                    percentage = ((diskUsed * 100) / quotaLimit).toFixed() ;
                }

                accountArr[i] = { 	account : accounts[i].name,
                                    diskUsage :  AjxMessageFormat.format(ZaMsg.MBXStats_DISK_MSB, [AjxUtil.formatSizeForUnits(accounts[i].used, AjxUtil.SIZE_MEGABYTES, false, 1)]),
                                    quotaUsage : percentage + "\%" ,
                                    quota: quotaLimit + " MB"
                                    };
                //need to override the toString method, so when XForm does the element comparison, it will return the correct result
                //it is required when xform list needs to be update.
                accountArr[i].toString = function (){ return this.account ; };
            }
            this.replenish(AjxVector.fromArray(accountArr));
            this.setScrollHasMore(hasMore);
        }
    }
}

}
if (AjxPackage.define("zimbraAdmin.statistics.view.ZaServerSessionStatsPage")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
 * This page displays the current server's session statistics.
 * 
 * @author Charles Cao
 */
ZaServerSessionStatsPage = function(parent) {
	DwtTabViewPage.call(this, parent);

	//The response objects
	this._adminSessResp = {} ;
	this._imapSessResp = {} ;
	this._soapSessResp = {} ;
	
	this._offset = {
		"soap": 0,
		"admin" : 0,
		"imap" : 0
	} ; //to record the offset value of the current request
	
	this._sortBy = {
		"soap" : "nameAsc",
		"admin" : "nameAsc",
		"imap" : "nameAsc"
	} ;	
	
	this._pageObj = { } ;
	this._pageObj["soap"] = { curPage: 1 , 	totalPage: 1 };
	this._pageObj["admin"] = { curPage: 1 , 	totalPage: 1 };
	this._pageObj["imap"] = { curPage: 1 , 	totalPage: 1 };
			
	this._rendered = false ;
}

ZaServerSessionStatsPage.PAGE_LIMIT = 25;

ZaServerSessionStatsPage.prototype = new DwtTabViewPage;
ZaServerSessionStatsPage.prototype.constructor = ZaServerSessionStatsPage;

ZaServerSessionStatsPage.prototype.setObject =
function (currentServer) {
	this._server = currentServer ;
}

ZaServerSessionStatsPage.prototype.setSortBy =
function (sortBy) {
	var instance =	this._localXForm.getInstance () ;
	var currentTabId = instance[ZaModel.currentTab] ;
	
	if (currentTabId == ZaServerSessionStatsPage.SOAP_TAB_ID) {
		this._sortBy["soap"] = sortBy;
	}else if (currentTabId == ZaServerSessionStatsPage.ADMIN_TAB_ID) {
		this._sortBy["admin"] = sortBy;
	}else if (currentTabId == ZaServerSessionStatsPage.IMAP_TAB_ID) {
		this._sortBy["imap"] = sortBy ;
	}
}

ZaServerSessionStatsPage.prototype.setOffset =
function (offset) {
	var instance =	this._localXForm.getInstance () ;
	var currentTabId = instance[ZaModel.currentTab] ;
	
	if (currentTabId == ZaServerSessionStatsPage.SOAP_TAB_ID) {
		this._offset["soap"] = offset;
	}else if (currentTabId == ZaServerSessionStatsPage.ADMIN_TAB_ID) {
		this._offset["admin"] = offset;
	}else if (currentTabId == ZaServerSessionStatsPage.IMAP_TAB_ID) {
		this._offset["imap"] = offset ;
	}
}

ZaServerSessionStatsPage.prototype._createHtml =
function () {
	//if(window.console && window.console.log) console.debug("Create the session stats page") ;
	DwtTabViewPage.prototype._createHtml.call(this);
	//this.getHtmlElement().innerHTML = "Session Information" ;
}

/**
 * refresh : 0, no refresh
 * 			 1, refresh on the client side
 * 			 > 1, refresh on the server side by bypassing the cache		
 */
ZaServerSessionStatsPage.prototype.showMe = 
function (refresh){
	//if(window.console && window.console.log) console.debug("show the session stats page") ;
	
	if (!this._rendered) {
        this.setZIndex(DwtTabView.Z_ACTIVE_TAB);
        if (this.parent.getHtmlElement().offsetHeight > 26) { 						// if parent visible, use offsetHeight
            this._contentEl.style.height=this.parent.getHtmlElement().offsetHeight-26;
        } else {
            var parentHeight = parseInt(this.parent.getHtmlElement().style.height);	// if parent not visible, resize page to fit parent
            var units = AjxStringUtil.getUnitsFromSizeString(this.parent.getHtmlElement().style.height);
            if (parentHeight > 26) {
                this._contentEl.style.height = (Number(parentHeight-26).toString() + units);
            }
        }
        this._contentEl.style.width = this.parent.getHtmlElement().style.width;	// resize page to fit parent

		var instance = {currentTab:ZaServerSessionStatsPage.SOAP_TAB_ID}; 
		var xModelObj = new XModel({id:"currentTab", type:_UNTYPED_});
		this._localXForm = this._view = new XForm(this._getXForm(), xModelObj, instance, this);
		this._view.setController(this);
		this._view.draw();
	}
	
	var params = {} ;
	if (refresh && refresh > 1) params.refresh = "1" ;
	//params.limit = 25 ;
	
	if (!this._rendered || refresh > 0) { //load all the tabs in one time. Should have a way to load the current tab only
		this.getSessions({type: "soap"}) ;
		this.getSessions({type: "admin"}) ;
		this.getSessions({type: "imap"}) ;
	}
	
	/*
	if (refresh) {
		this.getSessions() ;	
	} */
	
	this._rendered = true;
}

ZaServerSessionStatsPage.prototype.hideMe = 
function (){
	DwtTabViewPage.prototype.hideMe.call(this);	
	this.updateToolbar(null, true);
	this._hide = true ;
};

ZaServerSessionStatsPage.prototype._pageListener =
function (isPrevPage) {
	var type = this.getType () ;
	var params = {} ;
	var curPage = this._pageObj[type]['curPage'] ;
	var totalPage = this._pageObj[type]['totalPage'] ;
	
	if (isPrevPage) {
		params.offset = (curPage - 2)* ZaServerSessionStatsPage.PAGE_LIMIT ;
	}else{
		params.offset = curPage * ZaServerSessionStatsPage.PAGE_LIMIT ;
	}
	params.type = type ;
	this.getSessions(params) ;
}

ZaServerSessionStatsPage.prototype.getType =
function (tabId) {
	if (! tabId) { //get the current type
		var instance =	this._localXForm.getInstance () ;
		tabId = instance[ZaModel.currentTab] ;
	}
	
	var type; 
	if (tabId == ZaServerSessionStatsPage.SOAP_TAB_ID) {
		type = "soap";
	}else if (tabId == ZaServerSessionStatsPage.ADMIN_TAB_ID) {
		type = "admin" ;
	}else if (tabId == ZaServerSessionStatsPage.IMAP_TAB_ID) {
		type = "imap" ;
	}
	return type ;
}
ZaServerSessionStatsPage.prototype.updateToolbar = 
function (tabId, hide ){
	var controller = ZaApp.getInstance().getCurrentController();
	try {
		//enable the page back/forward button
		if ( controller instanceof ZaServerStatsController ){
			if (! this._localXForm) {
				return ;
			}
			var instance =	this._localXForm.getInstance () ;
			var currentTabId = instance[ZaModel.currentTab] ;			
			var type = this.getType(currentTabId) ;
			
			var toolBar = controller.getToolBar();		
			var curPage = this._pageObj [type]["curPage"] ;
			var totalPage = this._pageObj [type]["totalPage"] ;	
			
			if (toolBar){
				if ((! hide) && tabId && (tabId == currentTabId)) { //only update the toolbar for the current TAB
					if (curPage > 1 ){ 
						toolBar.enable([ZaOperation.PAGE_BACK, ZaOperation.LABEL], true);
					} else {
						toolBar.enable([ZaOperation.PAGE_BACK], false);
					}
					
					if (curPage < totalPage  ){ 
						toolBar.enable([ZaOperation.PAGE_FORWARD, ZaOperation.LABEL], true);
					} else {
						toolBar.enable([ZaOperation.PAGE_FORWARD], false);
					}
					
					if (curPage && totalPage) {
						toolBar.getButton("PageInfo").setText(AjxMessageFormat.format (ZaMsg.MBXStats_PAGEINFO, [curPage, totalPage]));
					} 
					
					//TODO update the help link for the Session Stats
					controller._helpURL = ZaUtil.HELP_URL;
					controller._helpButtonText = ZaMsg.helpViewMailboxQuotas;
				}else if (hide){
					toolBar.enable([ZaOperation.PAGE_FORWARD, ZaOperation.PAGE_BACK, ZaOperation.LABEL], false);
					toolBar.getButton("PageInfo").setText(AjxMessageFormat.format (ZaMsg.MBXStats_PAGEINFO, [1,1]));
					//change the help link back
					controller._helpURL = ZaUtil.HELP_URL;
					controller._helpButtonText = ZaMsg.helpCheckStatistics;
				}
			}
		}
	}catch (ex){
		controller._handleException (ex, "ZaServerSessionStatsPage.updateToolbar", null, false)
	}
};

ZaServerSessionStatsPage.prototype.dumpSession =
function () {
	var soapDoc = AjxSoapDoc.create("DumpSessionsRequest", ZaZimbraAdmin.URN, null);
	//TODO need to provide the ability to customize the attributes
	var listSession = "1" ;
	var groupByAccount = "1" ;
	soapDoc.getMethod().setAttribute("listSessions", listSession);
	soapDoc.getMethod().setAttribute("groupByAccount", groupByAccount);
	var dumpSessCmd = new ZmCsfeCommand ();
	var params = {} ;
	params.soapDoc = soapDoc ;
	params.noAuthToken = true;
	params.targetServer = this._server.id ;
	params.asyncMode = true ;
	params.callback = new AjxCallback (this, this.dumpSessionCallback) ;
	//if(window.console && window.console.log) console.debug("Send DumpSessionsRequest") ;
	dumpSessCmd.invoke(params) ;
}

ZaServerSessionStatsPage.prototype.getSessions =
function (params) {
	var soapDoc = AjxSoapDoc.create("GetSessionsRequest", ZaZimbraAdmin.URN, null);
	if (!params) params = {} ;
	var instance =	this._localXForm.getInstance () ;
	var currentTabId = instance[ZaModel.currentTab] ;
	if (!params.type) {
		params.type = this.getType (currentTabId) ;
	}
	soapDoc.getMethod().setAttribute("type", params.type);

	if (params.refresh) {
		soapDoc.getMethod().setAttribute("refresh", params.fresh);
	}
	//if (params.limit) {
		soapDoc.getMethod().setAttribute("limit", ZaServerSessionStatsPage.PAGE_LIMIT);
	//}
	if (!params.offset) {
		params.offset = this._offset[params.type] ;
	}
	soapDoc.getMethod().setAttribute("offset", params.offset);
	 
	if (!params.sortBy) {
		params.sortBy = this._sortBy[params.type] ;
	}
	soapDoc.getMethod().setAttribute("sortBy", params.sortBy);
	
	var getSessCmd = new ZmCsfeCommand ();
	params.soapDoc = soapDoc ;
	params.noAuthToken = true;
	params.targetServer = this._server.id ;
	params.asyncMode = true ;
	params.callback = new AjxCallback (this, this.getSessionsCallback, [params]) ;
	//if(window.console && window.console.log) console.debug("Send GetSessionsRequest") ;
	getSessCmd.invoke(params) ;
}

ZaServerSessionStatsPage.prototype.getSessionsCallback =
function (reqParams, resp) {
	//if(window.console && window.console.log) console.debug("GetSessionCallback is called. And process the response now ...");
	if (resp._data.Body) {
		var sessionStats = resp._data.Body.GetSessionsResponse ;
		var instance = this._localXForm.getInstance();
		
		instance[reqParams.type + "_total"] = sessionStats.total ;
		
		var sessionList = new AjxVector() ; 
		if (sessionStats.total > 0 && sessionStats.s) {
			this._processGetSessResp ( sessionStats.s, sessionList );
		}
		
		instance[reqParams.type] = sessionList.getArray() ;
		instance[reqParams.type].join = ZaServerSessionStatsPage._objArrJoin ; //to make sure the _DWT_LIST_ item will update the view
		
		//this._localXForm.refresh();
		//update the tab bar text
		var tabBar = this._localXForm.getItemsById("xform_tabbar")[0];
		var dwtTabBar = tabBar.getWidget();
		if (reqParams.type == "soap") {
			dwtTabBar.getItem(ZaServerSessionStatsPage.SOAP_TAB_ID - 1)
				.setText(ZaMsg.TABT_SessStatsSoap + " (" + instance[reqParams.type + "_total"] + ") ") ;
		}else if (reqParams.type == "admin") {
			dwtTabBar.getItem(ZaServerSessionStatsPage.ADMIN_TAB_ID - 1)
				.setText(ZaMsg.TABT_SessStatsAdmin + " (" + instance[reqParams.type + "_total"] + ") ") ;
		}else if (reqParams.type == "imap") {
			dwtTabBar.getItem(ZaServerSessionStatsPage.IMAP_TAB_ID - 1)
				.setText(ZaMsg.TABT_SessStatsImap + " (" + instance[reqParams.type + "_total"] + ") ") ;
		}
		
		this._localXForm.setInstance(instance) ;
	}
	this._updatePageObj(reqParams, instance[reqParams.type + "_total"]);
	//update the toolbar for the current Tab only
	var currentTabId = instance[ZaModel.currentTab] ;
	if ((reqParams.type == "soap" && currentTabId == ZaServerSessionStatsPage.SOAP_TAB_ID)
		|| (reqParams.type == "admin" && currentTabId == ZaServerSessionStatsPage.ADMIN_TAB_ID)
		|| (reqParams.type == "imap" && currentTabId == ZaServerSessionStatsPage.IMAP_TAB_ID)) {
		this.updateToolbar( currentTabId  , false);
	}
}

ZaServerSessionStatsPage.prototype._updatePageObj =
function (params, total) {
	var type = params.type ;
	var start = params.offset ;
	this._pageObj[type]["curPage"] = start / ZaServerSessionStatsPage.PAGE_LIMIT + 1;
	this._pageObj[type]["totalPage"] = Math.ceil( total / ZaServerSessionStatsPage.PAGE_LIMIT ) || 1;
}

ZaServerSessionStatsPage._objArrJoin =
function () {
	var arr = []
	for (var i = 0; i < this.length; i++) {
		arr.push(this[i].sid) ;
	}
	return arr.join();
}

ZaServerSessionStatsPage.prototype._processGetSessResp =
function ( sessResp, sessList) {
	for (var i=0; i < sessResp.length ; i ++) {
		var cSessions = sessResp[i] ;
		sessList.add( new ZaServerSession(
				cSessions.name, cSessions.zid, cSessions.sid, cSessions.cd, cSessions.ld )) ;		
	}
}

ZaServerSessionStatsPage.prototype.dumpSessionCallback =
function (resp) {
	//if(window.console && window.console.log) console.debug("DumpSessionCallback is called. And process the response now ...");
	var sessionStats = resp._data.Body.DumpSessionsResponse ;
	this._activeSessions = sessionStats.activeSessions ;
	//this._activeAccounts = sessionStats.activeAccounts ;
	this._activeAdminSessions = this._activeAdminAccounts = 0;
	this._activeSoapSessions = this._activeSoapAccounts = 0;
	this._activeImapSessions = this._activeImapAccounts = 0;
	
	//converted list objects
	this._adminSessList = new AjxVector();
	this._imapSessList = new AjxVector() ;
	this._soapSessList = new AjxVector() ;
	
	if (sessionStats.admin) {
		this._adminSessResp = sessionStats.admin[0]
		this._processResponse(this._adminSessResp, this._adminSessList) ;
		this._activeAdminSessions = this._adminSessResp.activeSessions ;
		this._activeAdminAccounts = this._adminSessResp.activeAccounts ;
	}
	
	if (sessionStats.imap) {
		this._imapSessResp = sessionStats.imap[0];
		this._processResponse(this._imapSessResp, this._imapSessList) ;
		this._activeImapSessions = this._imapSessResp.activeSessions ;
		this._activeImapAccounts = this._imapSessResp.activeAccounts ;
	}
	
	if (sessionStats.soap) {
		this._soapSessResp = sessionStats.soap[0];
		this._processResponse( this._soapSessResp, this._soapSessList) ;		
		this._activeSoapSessions = this._soapSessResp.activeSessions ;
		this._activeSoapAccounts = this._soapSessResp.activeAccounts ;
	}
	
	//show the lists
	//this._adminListView = new ZaServerSessionListView(this) ;
	//this._adminListView.set(this._adminSessList) ;
	if (this._localXForm) {
		var instance = this._localXForm.getInstance();
		instance[ZaServerSession.A_activeSessions] = this._activeSessions ;
		//instance[ZaServerSession.A_activeAccounts] = this._activeAccounts ;
		instance[ZaServerSession.A_activeAdminAccounts] = this._activeAdminAccounts ;
		instance[ZaServerSession.A_activeAdminSessions] = this._activeAdminSessions ;
		instance[ZaServerSession.A_activeSoapSessions] = this._activeSoapSessions ;
		instance[ZaServerSession.A_activeSoapAccounts] = this._activeSoapAccounts ;
		instance[ZaServerSession.A_activeImapAccounts] = this._activeImapAccounts ;
		instance[ZaServerSession.A_activeImapSessions] = this._activeImapSessions ;
		
		instance["admin"] = this._adminSessList.getArray() ;
		instance["soap"] = this._soapSessList.getArray() ;
		instance["imap"] = this._imapSessList.getArray() ;
		this._localXForm.setInstance(instance) ;
	}
}



ZaServerSessionStatsPage.prototype._processResponse =
function ( sessResp, sessList) {
	for (var i=0; i < sessResp.zid.length ; i ++) {
		var cAccount = sessResp.zid [i] ;
		var cSessions = cAccount.s ;
		for (var j=0; j < cSessions.length; j++) {
			sessList.add(
				new ZaServerSession(cAccount.name, cAccount.id, cSessions[j].sid, cSessions[j].cd, cSessions[j].ld)) ;		
		}
	}
}

ZaServerSessionStatsPage.prototype.getStatCountsOutput =
function (itemType) {
	var output = new AjxBuffer() ;
	var instance = this._localXForm.getInstance(); 
	
	if (itemType == ZaServerSession.A_activeSessions) {
		var totalSessions = instance["soap_total"] + instance["admin_total"] + instance["imap_total"] ;
		output.append(ZaMsg.SessStats_ActiveSessions, " ", totalSessions ) ;
	}
	/*
	else if (itemType == ZaServerSession.A_activeAccounts) {
		output.append(ZaMsg.SessStats_ActiveAccounts, " ", 
					 "soap: ", instance[ZaServerSession.A_activeSoapAccounts], ", ",
					 "admin: ", instance[ZaServerSession.A_activeAdminAccounts], ", ",
					 "IMAP: ", instance[ZaServerSession.A_activeImapAccounts] ) ;
	}*/
	
	return output.join("") ;
}

ZaServerSessionStatsPage.SOAP_TAB_ID = 1;
ZaServerSessionStatsPage.ADMIN_TAB_ID = 2;
ZaServerSessionStatsPage.IMAP_TAB_ID = 3; 

ZaServerSessionStatsPage.prototype._getXForm = function () {
	if (this._xform != null) return this._xform;
	var headerList1 = ZaServerSessionListView._getHeaderList();
	var headerList2 = ZaServerSessionListView._getHeaderList();
	var headerList3 = ZaServerSessionListView._getHeaderList();
	
	this._xform = {
		x_showBorder:1,
	    numCols:1, 
	    cssClass:"ZaServerSessionStatsPage", 
		tableCssStyle:"width:100%",
	    itemDefaults:{ },
	    items:[
		   {type:_SPACER_, height:"10px", colSpan:"2",id:"xform_header" },
		   {ref: ZaServerSession.A_activeSessions, type:_OUTPUT_, height: "15px", colSpan:"*", 
		   		getDisplayValue:"return this.getFormController().getStatCountsOutput(ZaServerSession.A_activeSessions)"},	
		  /*
		   {ref: ZaServerSession.A_activeAccounts, type:_OUTPUT_, height: "15px", colSpan:"*", 
		   		getDisplayValue:"return this.getFormController().getStatCountsOutput(ZaServerSession.A_activeAccounts)"},	
		   */
		   {type:_SPACER_, height:"10px", colSpan:"2", id:"xform_header" },

		   {type:_TAB_BAR_,  ref:ZaModel.currentTab, colSpan:"2", 
		   		onChange: ZaServerSessionStatsPage.tabChanged,
		   		choices:[
			     {value:ZaServerSessionStatsPage.SOAP_TAB_ID, label:ZaMsg.TABT_SessStatsSoap},
			     {value:ZaServerSessionStatsPage.ADMIN_TAB_ID, label:ZaMsg.TABT_SessStatsAdmin},
			     {value:ZaServerSessionStatsPage.IMAP_TAB_ID, label:ZaMsg.TABT_SessStatsImap}
			    ],
		    cssClass:"ZaTabBar", id:"xform_tabbar"
		   },
		   {type:_SWITCH_, align:_LEFT_, valign:_TOP_,
		    items:[
			   {type:_ZATABCASE_, caseKey:1, align:_LEFT_, valign:_TOP_, 
			   		cssStyle: "position: absolute; overflow: auto;", paddingStyle:"",
					getCustomWidth:ZaServerSessionListView.getCustomWidth,
					getCustomHeight:ZaServerSessionListView.getCustomHeight,
			    items:[
				   {ref: "soap", type:_DWT_LIST_ , width:"100%",  cssClass: "MBXList",
                        height: (AjxEnv.isIE? "" : "100%"),
						forceUpdate: true, widgetClass:ZaServerSessionListView,
						headerList:headerList1, defaultColumnSortable: 1
					}
				   ]
			   },
			   {type:_ZATABCASE_,  caseKey:2, align:_LEFT_, valign:_TOP_, 
			    	cssStyle: "position: absolute; overflow: auto;", paddingStyle:"",
					getCustomWidth:ZaServerSessionListView.getCustomWidth,
					getCustomHeight:ZaServerSessionListView.getCustomHeight,
			    items:[
				    {ref: "admin", type:_DWT_LIST_ , width:"100%",  cssClass: "MBXList",
                        height: (AjxEnv.isIE? "" : "100%"),
						forceUpdate: true, widgetClass:ZaServerSessionListView,
						headerList:headerList2, defaultColumnSortable: 1
					}
				   ]
			   },
			   {type:_ZATABCASE_, caseKey:3, align:_LEFT_, valign:_TOP_, 
			    	cssStyle: "position: absolute; overflow: auto;", paddingStyle:"",
					getCustomWidth:ZaServerSessionListView.getCustomWidth,
					getCustomHeight:ZaServerSessionListView.getCustomHeight,
			    items:[
				   {ref: "imap", type:_DWT_LIST_ , width:"100%",  cssClass: "MBXList",
                        height: (AjxEnv.isIE? "" : "100%"),
						forceUpdate: true, widgetClass:ZaServerSessionListView,
						headerList:headerList3, defaultColumnSortable: 1
					}
				   ]
			   }
			 ]
		   }
		   ]
	};
		  
	return this._xform;
};


ZaServerSessionStatsPage.tabChanged =
function (value, event, form) {
	//if(window.console && window.console.log) console.log("The tabs in the session page is switched. Update the toolbar ...") ; 	
	//set the instance value
	this.setInstanceValue (value) ;
	form.parent.updateToolbar(value, false) ;
}

ZaServerSession = function(name, zid, sid, cd, ld) {
	this.name = name ;
	this.zid = zid ;
	this.sid = sid ;
	this.cd = cd ;
	this.ld = ld ; 
}

ZaServerSession.A_activeSessions = "activeSessions" ;
ZaServerSession.A_activeSoapSessions = "activeSoapSessions" ;
ZaServerSession.A_activeImapSessions = "activeImapSessions" ;
ZaServerSession.A_activeAdminSessions = "activeAdminSessions" ;
ZaServerSession.A_activeAccounts = "activeAccounts" ;
ZaServerSession.A_activeAdminAccounts = "activeAdminAccounts" ;
ZaServerSession.A_activeImapAccounts = "activeImapAccounts" ;
ZaServerSession.A_activeSoapAccounts = "activeSoapAccounts" ;

ZaServerSession.getDate =
function (time) {
	var date = new Date();
	date.setTime(time) ;
	//use AjxDateFormat
	return AjxDateFormat.format("MM/dd/yyyy HH:mm:ss", date);
}

ZaServerSessionListView = function(parent, cssClass, posStyle, headerList) {
	this._app = parent.parent._app ;
	var className = null;
	var posStyle = DwtControl.ABSOLUTE_STYLE;
	
	//var headerList = this._getHeaderList();
	
	ZaListView.call(this, parent, className, posStyle, headerList);
    this.setLocation(0, 0);
	this._bSortAsc = true; //default is ascending
}

ZaServerSessionListView.prototype = new ZaListView;
ZaServerSessionListView.prototype.constructor = ZaServerSessionListView;

ZaServerSessionListView._getHeaderList =
function() {

	var headerList = new Array();
	var idx = 0 ;
	var sortable = 1 ;
	//idPrefix, label, iconInfo, width, sortable, sortField, resizeable, visible
	headerList[idx ++] = new ZaListHeaderItem("name", ZaMsg.h_account_name, null, "150px",  sortable ++ , "name", true, true);
	//headerList[idx ++] = new ZaListHeaderItem("zid", ZaMsg.h_account_id, null, "250px", null, null, null, true);
	headerList[idx ++] = new ZaListHeaderItem("sid", ZaMsg.h_session_id, null, "150px",  null, "sid", true,  true);
	headerList[idx ++] = new ZaListHeaderItem("cd", ZaMsg.h_sess_cd, null, "150px",   sortable ++, "created", true,  true);
	headerList[idx ++] = new ZaListHeaderItem("ld", ZaMsg.h_sess_ld, null, "auto",  sortable ++, "accessed", true,  true);	
		
	return headerList;
}

ZaServerSessionListView.prototype._createItemHtml =
function (sess) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(sess, div, DwtListView.TYPE_LIST_ITEM);
	div.style.height = "20";
	
	var idx = 0;
	html[idx++] = "<table width='100%' height='20' cellspacing='2' cellpadding='0'>";

	html[idx++] = "<tr>";
	if(this._headerList) {
		var cnt = this._headerList.length;
		
		for(var i = 0; i < cnt; i++) {
			var field = this._headerList[i]._field;
			if(field == "name") {
				// account id
				html[idx++] = "<td width=" + this._headerList[i]._width + "><nobr>";
				html[idx++] = AjxStringUtil.htmlEncode(sess["name"]);				
				html[idx++] = "</nobr></td>";
			}
			/*else if(field == "zid") {
				// account id
				html[idx++] = "<td width=" + this._headerList[i]._width + "><nobr>";
				html[idx++] = AjxStringUtil.htmlEncode(sess["zid"]);				
				html[idx++] = "</nobr></td>";
			}*/ else if (field == "sid"){
				// sid
				html[idx++] = "<td width=" + this._headerList[i]._width + ">";
				html[idx++] = AjxStringUtil.htmlEncode(sess["sid"]);	
				html[idx++] = "</td>";	
			} else if (field == "cd"){
				// cd
				html[idx++] = "<td width=" + this._headerList[i]._width + ">";
				html[idx++] = AjxStringUtil.htmlEncode(
							ZaServerSession.getDate(sess["cd"].toString()));	
				html[idx++] = "</td>";	
			} else if (field == "ld"){
				// ld
				html[idx++] = "<td width=" + this._headerList[i]._width + ">";
				html[idx++] = AjxStringUtil.htmlEncode(
							ZaServerSession.getDate(sess["ld"].toString()));	
				html[idx++] = "</td>";	
			}
		}
	} else {
		html[idx++] = "<td width=100%><nobr>";
		html[idx++] = AjxStringUtil.htmlEncode(sess["zid"]);
		html[idx++] = "</nobr></td>";
	}
	
	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}

ZaServerSessionListView.prototype._setNoResultsHtml = function() {
	var buffer = new AjxBuffer();
	var	div = document.createElement("div");
	
	buffer.append("<table width='100%' cellspacing='0' cellpadding='1'>",
				  "<tr><td class='NoResults'>",
				  AjxStringUtil.htmlEncode(ZaMsg.sess_noSess),
				  "</td></tr></table>");
	
	div.innerHTML = buffer.toString();
	this._addRow(div);
};

ZaServerSessionListView.prototype._sortColumn = 
function(columnItem, bSortAsc) {
	var sortBy = columnItem._sortField + (bSortAsc ? "Asc": "Desc") ;
	//if(window.console && window.console.log) console.log("SortBy: " + sortBy) ;
	try {
		var controller = ZaApp.getInstance().getCurrentController() ;
		var sessStatsPage = controller._contentView._sessionPage ;
		sessStatsPage.setSortBy (sortBy) ;
		sessStatsPage.showMe(1);
	} catch (ex) {
		ZaApp.getInstance().getCurrentController()._handleException(ex);
	}
}

ZaServerSessionListView.getCustomWidth = function(){
	return ZATabCase_XFormItem.prototype.getCustomWidth.call(this);
}

ZaServerSessionListView.getCustomHeight = function(){
	var oriHeight = ZATabCase_XFormItem.prototype.getCustomHeight.call(this);
        // ToDo Readlly bad here, we need to caculate it ourself
	return oriHeight - 23; //40 is a balanced value

}
}

if (AjxPackage.define("zimbraAdmin.rp.view.ZaRetentionPolicyListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
 
 /**
 * @author Dongwei Feng
 **/
ZaRetentionPolicyListView = function(parent, className, posStyle, headerList) {
	ZaListView.call(this, parent, className, posStyle, headerList);
}

ZaRetentionPolicyListView.prototype = new ZaListView;
ZaRetentionPolicyListView.prototype.constructor  = ZaRetentionPolicyListView;
ZaRetentionPolicyListView.prototype.toString = function() {
	return "ZaRetentionPolicyListView";
};

ZaRetentionPolicyListView.prototype._createItemHtml =
function(item) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(item, div, DwtListView.TYPE_LIST_ITEM);
	
	var idx = 0;
	html[idx++] = "<table width='100%' cellspacing='0' cellpadding='0'>";

	html[idx++] = "<tr>";
	if(this._headerList) {
		var cnt = this._headerList.length;
		for(var i = 0; i < cnt; i++) {
			var field = this._headerList[i]._field;
			if(field == ZaRetentionPolicy.A2_name) {
				html[idx++] = "<td align=left height=20px width=" + this._headerList[i]._width + ">";
                html[idx++] = AjxStringUtil.htmlEncode(item[ZaRetentionPolicy.A2_name]);
				html[idx++] = "</td>";
			} else if(field == ZaRetentionPolicy.A2_lifetime) {
				html[idx++] = "<td align=left height=20px width=" + this._headerList[i]._width + ">";
                var time = item[ZaRetentionPolicy.A2_lifetime];
                var number = time.substr(0, time.length - 1);
                var unit = time.substr(time.length - 1, 1);
                html[idx++] = AjxMessageFormat.format(ZaMsg["TTL_Retention_Policy_" + unit], number);
				html[idx++] = "</td>";
			}
		}
	} else {
		html[idx++] = "<td width=100%>";
		html[idx++] = AjxStringUtil.htmlEncode(item);
		html[idx++] = "</td>";
	}
	
	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}


ZaRetentionPolicyListView.prototype._setNoResultsHtml = function() {
	var buffer = new AjxBuffer();
	var	div = document.createElement("div");
	
	buffer.append("<table width='100%' cellspacing='0' cellpadding='1'>",
				  "<tr><td class='NoResults'><br>&nbsp",
				  "</td></tr></table>");
	
	div.innerHTML = buffer.toString();
	this._addRow(div);
};
}
if (AjxPackage.define("zimbraAdmin.rp.view.ZaRetentionPolicyDlg")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaRetentionPolicyDlg
* @contructor ZaRetentionPolicyDlg
* @author Dongwei Feng
* @param parent
* param app
**/
ZaRetentionPolicyDlg = function(parent, w, h, title) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.CANCEL_BUTTON,DwtDialog.OK_BUTTON];
	ZaXDialog.call(this, parent, null, title, w, h,"ZaRetentionPolicyDlg");
	this.initForm(ZaRetentionPolicy.myXModel,this.getMyXForm());
    this.setTitle(title);
}

ZaRetentionPolicyDlg.prototype = new ZaXDialog;
ZaRetentionPolicyDlg.prototype.constructor = ZaRetentionPolicyDlg;
//ZaNewUCServiceXDlg.helpURL = "passwords/setting_passwords.htm";

ZaRetentionPolicyDlg.prototype.isVisible = function (value) {
    var type = this.getForm().getInstanceValue(ZaRetentionPolicy.A2_type);
    return type == value;
}

ZaRetentionPolicyDlg.prototype.getMyXForm =
function() {	
	var xFormObject = {
		numCols:2,
		items:[
			{type:_GROUP_,isTabGroup:true,numCols:2,colSizes: ["150px","auto"],
                items:[
                    {ref:ZaRetentionPolicy.A2_name, type:_INPUT_, msgName:ZaMsg.LBL_Policy_Name,
                        label:ZaMsg.LBL_Policy_Name, labelLocation:_LEFT_, cssClass:"admin_xform_number_input", width: "300px"
                    },
                    {ref:ZaRetentionPolicy.A2_lifetime, type:_LONG_LIFETIME_,
                        msgName:ZaMsg.LBL_Policy_Retention,label:ZaMsg.LBL_Policy_Retention, labelLocation:_LEFT_,
                        visibilityChecks:[[ZaRetentionPolicyDlg.prototype.isVisible, ZaRetentionPolicy.TYPE_KEEP]]
                    },
                    {ref:ZaRetentionPolicy.A2_lifetime, type:_LONG_LIFETIME_,
                        msgName:ZaMsg.LBL_Policy_Purge,label:ZaMsg.LBL_Policy_Purge, labelLocation:_LEFT_,
                        visibilityChecks:[[ZaRetentionPolicyDlg.prototype.isVisible, ZaRetentionPolicy.TYPE_PURGE]]
                    }
                ]
		    }
        ]
	}
	return xFormObject;
}
}

if (AjxPackage.define("zimbraAdmin.globalconfig.view.GlobalConfigXFormView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
 * @class GlobalConfigXFormView
 * @contructor
 * @param parent
 * @param app
 * @author Greg Solovyev
 */
GlobalConfigXFormView = function(parent, entry) {
    ZaTabView.call(this, {
        parent : parent,
        iKeyName : "GlobalConfigXFormView",
        contextId : ZaId.TAB_GSET_EDIT
    });
    this.TAB_INDEX = 0;
    this.initForm(ZaGlobalConfig.myXModel, this.getMyXForm(entry), null);
}

GlobalConfigXFormView.prototype = new ZaTabView();
GlobalConfigXFormView.prototype.constructor = GlobalConfigXFormView;
ZaTabView.XFormModifiers["GlobalConfigXFormView"] = new Array();
ZaTabView.XFormSetObjectMethods["GlobalConfigXFormView"] = new Array();

GlobalConfigXFormView.prototype.getTitle = function() {
    return ZaMsg.GlobalConfig_view_title;
}

GlobalConfigXFormView.onRepeatRemove = function(index, form) {
    var list = this.getInstanceValue();
    if (list == null || typeof (list) == "string" || index >= list.length || index < 0)
        return;
    list.splice(index, 1);
    form.parent.setDirty(true);
}

GlobalConfigXFormView.prototype.getTabIcon = function() {
    return "GlobalSettings";
}

GlobalConfigXFormView.prototype.getTabTitle = function() {
    return this.getTitle();
}

GlobalConfigXFormView.prototype.getTabToolTip = function() {
    return this.getTitle();
}

GlobalConfigXFormView.blockedExtSelectionListener = function() {
    var arr = this.widget.getSelection();
    if (arr && arr.length) {
        arr.sort();
        // HTML Decode data received from view
        arr = AjxUtil.htmlDecode(arr);
        this.getModel().setInstanceValue(this.getInstance(), ZaGlobalConfig.A2_blocked_extension_selection, arr);
    } else {
        this.getModel().setInstanceValue(this.getInstance(), ZaGlobalConfig.A2_blocked_extension_selection, null);
    }
}

GlobalConfigXFormView.commonExtSelectionListener = function() {
    var arr = this.widget.getSelection();
    if (arr && arr.length) {
        arr.sort();
        this.getModel().setInstanceValue(this.getInstance(), ZaGlobalConfig.A2_common_extension_selection, arr);
    } else {
        this.getModel().setInstanceValue(this.getInstance(), ZaGlobalConfig.A2_common_extension_selection, null);
    }
}

GlobalConfigXFormView.shouldEnableRemoveAllButton = function() {
    return (!AjxUtil.isEmpty(this.getInstanceValue(ZaGlobalConfig.A_zimbraMtaBlockedExtension)));
}

GlobalConfigXFormView.shouldEnableRemoveButton = function() {
    return (!AjxUtil.isEmpty(this.getInstanceValue(ZaGlobalConfig.A2_blocked_extension_selection)));
}

GlobalConfigXFormView.shouldEnableAddButton = function() {
    return (!AjxUtil.isEmpty(this.getInstanceValue(ZaGlobalConfig.A2_common_extension_selection)));
}

GlobalConfigXFormView.shouldEnableAddAllButton = function() {
    return (!AjxUtil.isEmpty(this.getInstanceValue(ZaGlobalConfig.A_zimbraMtaCommonBlockedExtension)));
}

GlobalConfigXFormView.removeExt = function() {
    var blockedExtArray = this.getInstanceValue(ZaGlobalConfig.A_zimbraMtaBlockedExtension);
    var selectedExtArray = this.getInstanceValue(ZaGlobalConfig.A2_blocked_extension_selection);
    var newBlockedExtArray = AjxUtil.arraySubtract(blockedExtArray, selectedExtArray);
    this.setInstanceValue(newBlockedExtArray, ZaGlobalConfig.A_zimbraMtaBlockedExtension);
    this.getForm().parent.setDirty(true);
}

GlobalConfigXFormView.removeAllExt = function() {
    this.setInstanceValue([], ZaGlobalConfig.A_zimbraMtaBlockedExtension);
    this.setInstanceValue([], ZaGlobalConfig.A2_blocked_extension_selection);
    this.getForm().parent.setDirty(true);
}

GlobalConfigXFormView.addCommonExt = function() {
    var commonExtArr = this.getInstanceValue(ZaGlobalConfig.A_zimbraMtaBlockedExtension);
    var newExtArr = this.getInstanceValue(ZaGlobalConfig.A2_common_extension_selection);
    commonExtArr = AjxUtil.isEmpty(commonExtArr) ? [] : commonExtArr;
    newExtArr = AjxUtil.isEmpty(newExtArr) ? [] : newExtArr;
    this.setInstanceValue(AjxUtil.mergeArrays(commonExtArr, newExtArr), ZaGlobalConfig.A_zimbraMtaBlockedExtension);
    this.getForm().parent.setDirty(true);
}

GlobalConfigXFormView.addAllCommonExt = function() {
    var commonExtArr = this.getInstanceValue(ZaGlobalConfig.A_zimbraMtaBlockedExtension);
    var newExtArr = this.getInstanceValue(ZaGlobalConfig.A_zimbraMtaCommonBlockedExtension);
    commonExtArr = AjxUtil.isEmpty(commonExtArr) ? [] : commonExtArr;
    newExtArr = AjxUtil.isEmpty(newExtArr) ? [] : newExtArr;
    this.setInstanceValue(AjxUtil.mergeArrays(commonExtArr, newExtArr), ZaGlobalConfig.A_zimbraMtaBlockedExtension);
    this.getForm().parent.setDirty(true);
}

GlobalConfigXFormView.addNewExt = function() {
    var extStr = this.getInstanceValue(ZaGlobalConfig.A_zimbraNewExtension);
    if (AjxUtil.isEmpty(extStr))
        return;

    var commonExtArr = this.getInstanceValue(ZaGlobalConfig.A_zimbraMtaBlockedExtension);
    commonExtArr = AjxUtil.isEmpty(commonExtArr) ? [] : commonExtArr;
    var newExtArr = extStr.split(/[\s,;]+/);
    if (AjxUtil.isEmpty(newExtArr))
        return;

    this.setInstanceValue(AjxUtil.mergeArrays(commonExtArr, newExtArr), ZaGlobalConfig.A_zimbraMtaBlockedExtension);
    this.setInstanceValue(null, ZaGlobalConfig.A_zimbraNewExtension);
    this.getForm().parent.setDirty(true);
}

GlobalConfigXFormView.retentionSelectionListener = function(ev) {
    this.getForm().setInstanceValue(this.getSelection(), ZaGlobalConfig.A2_retentionPoliciesKeep_Selection);
}

GlobalConfigXFormView.purgeSelectionListener = function() {
    this.getForm().setInstanceValue(this.getSelection(), ZaGlobalConfig.A2_retentionPoliciesPurge_Selection);
}

GlobalConfigXFormView.deleteButtonListener = function(isPurge) {
    var selected = this.getForm().getInstanceValue(ZaGlobalConfig.A2_retentionPoliciesKeep_Selection);

    if (isPurge) {
        selected = this.getForm().getInstanceValue(ZaGlobalConfig.A2_retentionPoliciesPurge_Selection);
    }

    if (!selected) {
        return;
    }

    if (!ZaApp.getInstance().dialogs["deleteGlobalRetionPolicyConfirmMessageDialog"])
        ZaApp.getInstance().dialogs["deleteGlobalRetionPolicyConfirmMessageDialog"] = new ZaMsgDialog(ZaApp
                .getInstance().getAppCtxt().getShell(), null, [ DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON ], null,
                ZaId.CTR_PREFIX + "DELETE_RETENTION_POLICY_ConfirmMessage");

    ZaApp.getInstance().dialogs["deleteGlobalRetionPolicyConfirmMessageDialog"].setMessage(
            ZaMsg.Q_Delete_RetentionPolicy_Confirm, DwtMessageDialog.WARNING_STYLE);
    ZaApp.getInstance().dialogs["deleteGlobalRetionPolicyConfirmMessageDialog"].registerCallback(DwtDialog.YES_BUTTON,
            GlobalConfigXFormView.deleteRetentionPolicies, this, [ isPurge ]);
    ZaApp.getInstance().dialogs["deleteGlobalRetionPolicyConfirmMessageDialog"].popup();
}

GlobalConfigXFormView.deleteRetentionPolicies = function(isPurge) {
    if (ZaApp.getInstance().dialogs["deleteGlobalRetionPolicyConfirmMessageDialog"])
        ZaApp.getInstance().dialogs["deleteGlobalRetionPolicyConfirmMessageDialog"].popdown();

    var selected = this.getForm().getInstanceValue(ZaGlobalConfig.A2_retentionPoliciesKeep_Selection);
    var all = this.getForm().getInstanceValue(ZaGlobalConfig.A2_retentionPoliciesKeep);

    if (isPurge) {
        selected = this.getForm().getInstanceValue(ZaGlobalConfig.A2_retentionPoliciesPurge_Selection);
        all = this.getForm().getInstanceValue(ZaGlobalConfig.A2_retentionPoliciesPurge);
    }

    if (!selected) {
        return;
    }
    for (var i = 0; i < selected.length; i++) {
        selected[i].deletePolicy();
        AjxUtil.arrayRemove(all, selected[i]);
    }

    if (isPurge) {
        this.getForm().setInstanceValue([], ZaGlobalConfig.A2_retentionPoliciesPurge);
        this.getForm().setInstanceValue(all, ZaGlobalConfig.A2_retentionPoliciesPurge);
        this.getForm().setInstanceValue([], ZaGlobalConfig.A2_retentionPoliciesPurge_Selection);
    } else {
        this.getForm().setInstanceValue([], ZaGlobalConfig.A2_retentionPoliciesKeep);
        this.getForm().setInstanceValue(all, ZaGlobalConfig.A2_retentionPoliciesKeep);
        this.getForm().setInstanceValue([], ZaGlobalConfig.A2_retentionPoliciesKeep_Selection);
    }
}

GlobalConfigXFormView.addButtonListener = function(isPurge) {
    var policy;
    if (isPurge) {
        policy = new ZaRetentionPolicy(null, null, null, ZaRetentionPolicy.TYPE_PURGE);
    } else {
        policy = new ZaRetentionPolicy();
    }

    if (!ZaApp.getInstance().dialogs["newGlobalRetentionPolicyDialog"]) {
        ZaApp.getInstance().dialogs["newGlobalRetentionPolicyDialog"] = new ZaRetentionPolicyDlg(ZaApp.getInstance()
                .getAppCtxt().getShell(), "500px", "100px", ZaMsg.TTL_Policy_Add);
        ZaApp.getInstance().dialogs["newGlobalRetentionPolicyDialog"].registerCallback(DwtDialog.OK_BUTTON,
                GlobalConfigXFormView.createRetentionPolicy, this,
                ZaApp.getInstance().dialogs["newGlobalRetentionPolicyDialog"]._localXForm);
    }

    ZaApp.getInstance().dialogs["newGlobalRetentionPolicyDialog"].setObject(policy);
    ZaApp.getInstance().dialogs["newGlobalRetentionPolicyDialog"].popup();
}

GlobalConfigXFormView.createRetentionPolicy = function(form) {
    if (ZaApp.getInstance().dialogs["newGlobalRetentionPolicyDialog"]) {
        var obj = form.getInstance();
        var all;
        if (obj[ZaRetentionPolicy.A2_type] == ZaRetentionPolicy.TYPE_KEEP) {
            all = this.getForm().getInstanceValue(ZaGlobalConfig.A2_retentionPoliciesKeep);
        } else {
            all = this.getForm().getInstanceValue(ZaGlobalConfig.A2_retentionPoliciesPurge);
        }
        if (!all) {
            all = [];
        }

        if (!ZaRetentionPolicy.checkValues(obj, all)) {
            return false;
        }
        ZaApp.getInstance().dialogs["newGlobalRetentionPolicyDialog"].popdown();

        obj.createPolicy();

        all.push(obj);

        if (obj[ZaRetentionPolicy.A2_type] == ZaRetentionPolicy.TYPE_KEEP) {
            this.getForm().setInstanceValue([], ZaGlobalConfig.A2_retentionPoliciesKeep);
            this.getForm().setInstanceValue(all, ZaGlobalConfig.A2_retentionPoliciesKeep);
            this.getForm().setInstanceValue([], ZaGlobalConfig.A2_retentionPoliciesKeep_Selection);
        } else {
            this.getForm().setInstanceValue([], ZaGlobalConfig.A2_retentionPoliciesPurge);
            this.getForm().setInstanceValue(all, ZaGlobalConfig.A2_retentionPoliciesPurge);
            this.getForm().setInstanceValue([], ZaGlobalConfig.A2_retentionPoliciesPurge_Selection);
        }
    }
}

GlobalConfigXFormView.editButtonListener = function(isPurge) {
    var policy;
    if (isPurge) {
        policy = this.getForm().getInstanceValue(ZaGlobalConfig.A2_retentionPoliciesPurge_Selection)[0];
    } else {
        policy = this.getForm().getInstanceValue(ZaGlobalConfig.A2_retentionPoliciesKeep_Selection)[0];
    }

    if (!ZaApp.getInstance().dialogs["editGlobalRetentionPolicyDialog"]) {
        ZaApp.getInstance().dialogs["editGlobalRetentionPolicyDialog"] = new ZaRetentionPolicyDlg(ZaApp.getInstance()
                .getAppCtxt().getShell(), "500px", "100px", ZaMsg.TTL_Policy_Edit);
        ZaApp.getInstance().dialogs["editGlobalRetentionPolicyDialog"].registerCallback(DwtDialog.OK_BUTTON,
                GlobalConfigXFormView.updateRetentionPolicy, this,
                ZaApp.getInstance().dialogs["editGlobalRetentionPolicyDialog"]._localXForm);
    }

    ZaApp.getInstance().dialogs["editGlobalRetentionPolicyDialog"].setObject(policy);
    ZaApp.getInstance().dialogs["editGlobalRetentionPolicyDialog"].popup();
}

GlobalConfigXFormView.updateRetentionPolicy = function(form) {
    if (ZaApp.getInstance().dialogs["editGlobalRetentionPolicyDialog"]) {
        var obj = form.getInstance();
        var all;
        if (obj[ZaRetentionPolicy.A2_type] == ZaRetentionPolicy.TYPE_KEEP) {
            all = this.getForm().getInstanceValue(ZaGlobalConfig.A2_retentionPoliciesKeep);
        } else {
            all = this.getForm().getInstanceValue(ZaGlobalConfig.A2_retentionPoliciesPurge);
        }
        if (!all) {
            all = [];
        }
        if (!ZaRetentionPolicy.checkValues(obj, all)) {
            return false;
        }

        ZaApp.getInstance().dialogs["editGlobalRetentionPolicyDialog"].popdown();

        obj.modifyPolicy();

        var index = AjxUtil.indexOf(all, obj);
        AjxUtil.arrayRemove(all, obj);
        AjxUtil.arrayAdd(all, obj, index);

        if (obj[ZaRetentionPolicy.A2_type] == ZaRetentionPolicy.TYPE_KEEP) {
            this.getForm().setInstanceValue([], ZaGlobalConfig.A2_retentionPoliciesKeep);
            this.getForm().setInstanceValue(all, ZaGlobalConfig.A2_retentionPoliciesKeep);
            this.getForm().setInstanceValue([], ZaGlobalConfig.A2_retentionPoliciesKeep_Selection);
        } else {
            this.getForm().setInstanceValue([], ZaGlobalConfig.A2_retentionPoliciesPurge);
            this.getForm().setInstanceValue(all, ZaGlobalConfig.A2_retentionPoliciesPurge);
            this.getForm().setInstanceValue([], ZaGlobalConfig.A2_retentionPoliciesPurge_Selection);
        }
    }
}

GlobalConfigXFormView.GENERAL_TAB_ATTRS = [ ZaGlobalConfig.A_zimbraMailPurgeSleepInterval,
        ZaGlobalConfig.A_zimbraFileUploadMaxSize, ZaGlobalConfig.A_zimbraGalMaxResults,
        ZaGlobalConfig.A_zimbraDefaultDomainName, ZaGlobalConfig.A_zimbraScheduledTaskNumThreads ];
GlobalConfigXFormView.GENERAL_TAB_RIGHTS = [];

GlobalConfigXFormView.ATTACHMENTS_TAB_ATTRS = [ ZaGlobalConfig.A_zimbraMtaBlockedExtensionWarnRecipient,
        ZaGlobalConfig.A_zimbraMtaBlockedExtension, ZaGlobalConfig.A_zimbraMtaCommonBlockedExtension ];
GlobalConfigXFormView.ATTACHMENTS_TAB_RIGHTS = [];

GlobalConfigXFormView.MTA_TAB_ATTRS = [ ZaGlobalConfig.A_zimbraMtaSaslAuthEnable,
        ZaGlobalConfig.A_zimbraMtaTlsAuthOnly, ZaGlobalConfig.A_zimbraSmtpHostname, ZaGlobalConfig.A_zimbraSmtpPort,
        ZaGlobalConfig.A_zimbraMtaRelayHost, ZaGlobalConfig.A_zimbraMtaFallbackRelayHost,
		ZaGlobalConfig.A_zimbraMtaMyNetworks, ZaGlobalConfig.A_zimbraMtaSmtpDnsSupportLevel,
        ZaGlobalConfig.A_zimbraMilterServerEnabled, ZaGlobalConfig.A_zimbraMilterBindPort ];
GlobalConfigXFormView.MTA_TAB_RIGHTS = [];

GlobalConfigXFormView.IMAP_TAB_ATTRS = [ ZaGlobalConfig.A_zimbraImapServerEnabled,
        ZaGlobalConfig.A_zimbraImapSSLServerEnabled, ZaGlobalConfig.A_zimbraImapCleartextLoginEnabled,
        ZaGlobalConfig.A_zimbraImapNumThreads ];
GlobalConfigXFormView.IMAP_TAB_RIGHTS = [];

GlobalConfigXFormView.POP_TAB_ATTRS = [ ZaGlobalConfig.A_zimbraPop3ServerEnabled,
        ZaGlobalConfig.A_zimbraPop3SSLServerEnabled, ZaGlobalConfig.A_zimbraPop3CleartextLoginEnabled,
        ZaGlobalConfig.A_zimbraPop3NumThreads ];
GlobalConfigXFormView.POP_TAB_RIGHTS = [];

GlobalConfigXFormView.ASAV_TAB_ATTRS = [ ZaGlobalConfig.A_zimbraSpamKillPercent, ZaGlobalConfig.A_zimbraSpamTagPercent,
        ZaGlobalConfig.A_zimbraSpamSubjectTag, ZaGlobalConfig.A_zimbraVirusDefinitionsUpdateFrequency,
        ZaGlobalConfig.A_zimbraVirusBlockEncryptedArchive, ZaGlobalConfig.A_zimbraVirusWarnRecipient ];
GlobalConfigXFormView.ASAV_TAB_RIGHTS = [];

GlobalConfigXFormView.INTEROP_TAB_ATTRS = [ ZaGlobalConfig.A_zimbraFreebusyExchangeURL,
        ZaGlobalConfig.A_zimbraFreebusyExchangeAuthScheme, ZaGlobalConfig.A_zimbraFreebusyExchangeServerType,
        ZaGlobalConfig.A_zimbraFreebusyExchangeAuthUsername, ZaGlobalConfig.A_zimbraFreebusyExchangeAuthPassword,
        ZaGlobalConfig.A_zimbraFreebusyExchangeUserOrg ];
GlobalConfigXFormView.INTEROP_TAB_RIGHTS = [ ZaGlobalConfig.CHECK_EXCHANGE_AUTH_CONFIG_RIGHT ];

GlobalConfigXFormView.AUTH_TAB_ATTRS = [ ZaGlobalConfig.A_zimbraSpnegoAuthEnabled,
        ZaGlobalConfig.A_zimbraSpnegoAuthRealm, ZaGlobalConfig.A_zimbraSpnegoAuthErrorURL,
        ZaGlobalConfig.A_zimbraWebClientLoginURL, ZaGlobalConfig.A_zimbraWebClientLogoutURL,
        ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedUA, ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedUA,
        ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedIP, ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedIP,
        ZaGlobalConfig.A_zimbraForceClearCookies, ZaGlobalConfig.A_zimbraEphemeralBackendURL ];
GlobalConfigXFormView.AUTH_TAB_RIGHTS = [];

GlobalConfigXFormView.SKIN_TAB_ATTRS = [ ZaGlobalConfig.A_zimbraSkinForegroundColor,
        ZaGlobalConfig.A_zimbraSkinBackgroundColor, ZaGlobalConfig.A_zimbraSkinSecondaryColor,
        ZaGlobalConfig.A_zimbraSkinSelectionColor, ZaGlobalConfig.A_zimbraSkinLogoURL,
        ZaGlobalConfig.A_zimbraSkinLogoLoginBanner, ZaGlobalConfig.A_zimbraSkinLogoAppBanner ];

GlobalConfigXFormView.SKIN_TAB_RIGHTS = [];

GlobalConfigXFormView.BC_TAB_ATTRS = [ ZaGlobalConfig.A_zimbraBasicAuthRealm,
        ZaGlobalConfig.A_zimbraMailAddressValidationRegex ];
GlobalConfigXFormView.BC_TAB_RIGHTS = [];

GlobalConfigXFormView.AUTO_PROV_TAB_ATTRS = [ ZaGlobalConfig.A_zimbraAutoProvNotificationBody,
        ZaGlobalConfig.A_zimbraAutoProvNotificationSubject ];
GlobalConfigXFormView.AUTO_PROV_TAB_RIGHTS = [];

GlobalConfigXFormView.RETENTION_POLICY_TAB_ATTRS = [];
GlobalConfigXFormView.RETENTION_POLICY_TAB_RIGHTS = [];

GlobalConfigXFormView.prototype.loadRetentionPolicies = function() {
    var result = ZaRetentionPolicy.getRetentionPolicies();

    if (result) {
        this.getForm().setInstanceValue(result[ZaRetentionPolicy.TYPE_KEEP], ZaGlobalConfig.A2_retentionPoliciesKeep);
        this.getForm().setInstanceValue(result[ZaRetentionPolicy.TYPE_PURGE], ZaGlobalConfig.A2_retentionPoliciesPurge);
    }
}

GlobalConfigXFormView.prototype.setObject = function(entry) {

    ZaTabView.prototype.setObject.call(this, entry);
    // execute other init methods
    if (ZaTabView.XFormSetObjectMethods["GlobalConfigXFormView"]) {
        var methods = ZaTabView.XFormSetObjectMethods["GlobalConfigXFormView"];
        var cnt = methods.length;
        var containedObj = this._containedObject;
        for (var i = 0; i < cnt; i++) {
            if (typeof (methods[i]) == "function")
                containedObj = methods[i].call(this, containedObj, entry);
        }
        this._containedObject = containedObj;
    }

    this._localXForm.setInstance(this._containedObject);
}

GlobalConfigXFormView.myXFormModifier = function(xFormObject, entry) {
    var headerListKeep = new Array();
    var sortable = 1;
    var i = 0;
    // idPrefix, label, iconInfo, width, sortable, sortField, resizeable,
    // visible
    headerListKeep[i++] = new ZaListHeaderItem(ZaRetentionPolicy.A2_name, ZaMsg.CLV_Policy_Name_col, null, "200px",
            sortable, ZaRetentionPolicy.A2_name, true, true);
    headerListKeep[i++] = new ZaListHeaderItem(ZaRetentionPolicy.A2_lifetime, ZaMsg.CLV_Policy_Retention_col, null,
            "auto", null, null, true, true);

    var headerListPurge = new Array();
    i = 0;
    // idPrefix, label, iconInfo, width, sortable, sortField, resizeable,
    // visible
    headerListPurge[i++] = new ZaListHeaderItem(ZaRetentionPolicy.A2_name, ZaMsg.CLV_Policy_Name_col, null, "200px",
            sortable++, ZaRetentionPolicy.A2_name, true, true);
    headerListPurge[i++] = new ZaListHeaderItem(ZaRetentionPolicy.A2_lifetime, ZaMsg.CLV_Policy_Purge_col, null,
            "auto", null, null, true, true);

    xFormObject.tableCssStyle = "width:100%;overflow:auto;";
    var _tab1, _tab2, _tab3, _tab4, _tab5, _tab6, _tab7, _tab8, _tab9, _tab10, _tab11;

    var tabBarChoices = [];
    var switchItems = [];
    this.helpMap = {};
    if (ZaTabView.isTAB_ENABLED(entry, GlobalConfigXFormView.GENERAL_TAB_ATTRS,
            GlobalConfigXFormView.GENERAL_TAB_RIGHTS)) {
        _tab1 = ++this.TAB_INDEX;
        this.helpMap[_tab1] = ZaUtil.HELP_URL;
        var case1 = {
            type : _ZATABCASE_,
            caseKey : _tab1,
            colSizes : [ "auto" ],
            numCols : 1,
            paddingStyle : "padding-left:15px;",
            width : "98%",
            cellpadding : 2,
            items : [ {
                type : _ZA_TOP_GROUPER_,
                numCols : 2,
                colSizes : [ "275px", "auto" ],
                label : ZaMsg.TABT_GeneralPage,
                items : [ {
                    ref : ZaGlobalConfig.A_zimbraGalMaxResults,
                    type : _TEXTFIELD_,
                    label : ZaMsg.LBL_zimbraGalMaxResults,
                    msgName : ZaMsg.MSG_zimbraGalMaxResults,
                    labelLocation : _LEFT_,
                    cssClass : "admin_xform_number_input"
                }, {
                    ref : ZaGlobalConfig.A_zimbraDefaultDomainName,
                    type : _DYNSELECT_,
                    label : ZaMsg.NAD_DefaultDomainName,
                    toolTipContent : ZaMsg.tt_StartTypingDomainName,
                    dataFetcherMethod : ZaSearch.prototype.dynSelectSearchDomains,
                    dataFetcherClass : ZaSearch,
                    editable : true
                }, {
                    ref : ZaGlobalConfig.A_zimbraScheduledTaskNumThreads,
                    type : _TEXTFIELD_,
                    label : ZaMsg.NAD_zimbraScheduledTaskNumThreads,
                    labelLocation : _LEFT_,
                    cssClass : "admin_xform_number_input"
                }, {
                    ref : ZaGlobalConfig.A_zimbraMailPurgeSleepInterval,
                    type : _LIFETIME_,
                    label : ZaMsg.LBL_zimbraMailPurgeSleepInterval,
                    width : "5em"
                }, {
                    ref : ZaGlobalConfig.A_zimbraFileUploadMaxSize,
                    type : _TEXTFIELD_,
                    label : ZaMsg.NAD_DOC_MaxUploadSize,
                    labelLocation : _LEFT_,
                    cssClass : "admin_xform_number_input"
                },
                // help URL
                // {type: _SPACER_, height: 10},
                {
                    ref : ZaGlobalConfig.A_zimbraHelpAdminURL,
                    type : _TEXTFIELD_,
                    label : ZaMsg.Domain_zimbraHelpAdminURL,
                    labelLocation : _LEFT_,
                    width : 200
                }, {
                    ref : ZaGlobalConfig.A_zimbraHelpDelegatedURL,
                    type : _TEXTFIELD_,
                    label : ZaMsg.Domain_zimbraHelpDelegatedURL,
                    labelLocation : _LEFT_,
                    width : 200
                } ]
            } ]
        };
        switchItems.push(case1);
        tabBarChoices.push({
            value : _tab1,
            label : ZaMsg.TABT_GeneralPage
        });
    }
    if (ZaTabView.isTAB_ENABLED(entry, GlobalConfigXFormView.ATTACHMENTS_TAB_ATTRS,
            GlobalConfigXFormView.ATTACHMENTS_TAB_RIGHTS)) {
        _tab2 = ++this.TAB_INDEX;
        this.helpMap[_tab2] = ZaUtil.HELP_URL;
        tabBarChoices.push({
            value : _tab2,
            label : ZaMsg.NAD_Tab_Attachments
        });
        var case2 = {
            type : _ZATABCASE_,
            caseKey : _tab2,
            id : "gs_form_attachment_tab",
            paddingStyle : "padding-left:15px;",
            width : "98%",
            cellpadding : 2,
            numCols : 2,
            colSizes : [ "40%", "60%" ],
            items : [
                    {
                        type : _GROUP_,
                        id : "attachment_settings",
                        width : "98%",
                        numCols : 2,
                        colSpan : 2,
                        colSizes : [ 250, "*" ],
                        items : [ {
                            ref : ZaGlobalConfig.A_zimbraAttachmentsBlocked,
                            type : _CHECKBOX_,
                            label : ZaMsg.NAD_GlobalRemoveAllAttachments,
                            trueValue : "TRUE",
                            falseValue : "FALSE"
                        }, {
                            ref : ZaGlobalConfig.A_zimbraMtaBlockedExtensionWarnRecipient,
                            type : _CHECKBOX_,
                            label : ZaMsg.LBL_zimbraMtaBlockedExtensionWarnRecipient,
                            trueValue : "TRUE",
                            falseValue : "FALSE"
                        } ]
                    },
                    {
                        type : _GROUP_,
                        width : "98%",
                        numCols : 1,
                        items : [
                                {
                                    type : _SPACER_,
                                    height : "10"
                                },
                                {
                                    type : _ZACENTER_GROUPER_,
                                    numCols : 1,
                                    width : "100%",
                                    label : ZaMsg.NAD_GlobalBlockedExtensions,
                                    items : [
                                            {
                                                ref : ZaGlobalConfig.A_zimbraMtaBlockedExtension,
                                                type : _DWT_LIST_,
                                                getDisplayValue: AjxUtil.htmlEncode,
                                                height : "200",
                                                width : "98%",
                                                cssClass : "DLTarget",
                                                cssStyle : "margin-left: 5px; ",
                                                onSelection : GlobalConfigXFormView.blockedExtSelectionListener
                                            },
                                            {
                                                type : _SPACER_,
                                                height : "5"
                                            },
                                            {
                                                type : _GROUP_,
                                                width : "100%",
                                                numCols : 4,
                                                colSizes : [ 125, 10, 125, "*" ],
                                                items : [
                                                        {
                                                            type : _DWT_BUTTON_,
                                                            label : ZaMsg.DLXV_ButtonRemoveAll,
                                                            width : 120,
                                                            onActivate : "GlobalConfigXFormView.removeAllExt.call(this)",
                                                            enableDisableChecks : [
                                                                    GlobalConfigXFormView.shouldEnableRemoveAllButton,
                                                                    [ ZaItem.hasWritePermission,
                                                                            ZaGlobalConfig.A_zimbraMtaBlockedExtension ] ],
                                                            enableDisableChangeEventSources : [
                                                                    ZaGlobalConfig.A_zimbraMtaBlockedExtension,
                                                                    ZaGlobalConfig.A_zimbraMtaBlockedExtension ]
                                                        },
                                                        {
                                                            type : _CELLSPACER_
                                                        },
                                                        {
                                                            type : _DWT_BUTTON_,
                                                            label : ZaMsg.DLXV_ButtonRemove,
                                                            width : 120,
                                                            onActivate : "GlobalConfigXFormView.removeExt.call(this)",
                                                            enableDisableChecks : [
                                                                    GlobalConfigXFormView.shouldEnableRemoveButton,
                                                                    [ ZaItem.hasWritePermission,
                                                                            ZaGlobalConfig.A_zimbraMtaBlockedExtension ] ],
                                                            enableDisableChangeEventSources : [
                                                                    ZaGlobalConfig.A2_blocked_extension_selection,
                                                                    ZaGlobalConfig.A_zimbraMtaBlockedExtension ]
                                                        }, {
                                                            type : _CELLSPACER_
                                                        } ]
                                            } ]
                                } ]
                    },
                    {
                        type : _GROUP_,
                        width : "98%",
                        numCols : 1,
                        items : [
                                {
                                    type : _SPACER_,
                                    height : "10"
                                },
                                {
                                    type : _ZACENTER_GROUPER_,
                                    numCols : 1,
                                    width : "100%",
                                    label : ZaMsg.NAD_GlobalCommonExtensions,
                                    items : [
                                            {
                                                ref : ZaGlobalConfig.A_zimbraMtaCommonBlockedExtension,
                                                type : _DWT_LIST_,
                                                height : "200",
                                                width : "98%",
                                                cssClass : "DLSource",
                                                onSelection : GlobalConfigXFormView.commonExtSelectionListener
                                            },
                                            {
                                                type : _SPACER_,
                                                height : "5"
                                            },
                                            {
                                                type : _GROUP_,
                                                width : "98%",
                                                numCols : 7,
                                                colSizes : [ 95, 10, 70, 10, 90, 60, 70 ],
                                                items : [
                                                        {
                                                            type : _DWT_BUTTON_,
                                                            label : ZaMsg.DLXV_ButtonAddSelected,
                                                            width : 95,
                                                            onActivate : "GlobalConfigXFormView.addCommonExt.call(this)",
                                                            enableDisableChecks : [
                                                                    GlobalConfigXFormView.shouldEnableAddButton,
                                                                    [ ZaItem.hasWritePermission,
                                                                            ZaGlobalConfig.A_zimbraMtaBlockedExtension ] ],
                                                            enableDisableChangeEventSources : [
                                                                    ZaGlobalConfig.A2_common_extension_selection,
                                                                    ZaGlobalConfig.A_zimbraMtaBlockedExtension ]
                                                        },
                                                        {
                                                            type : _CELLSPACER_
                                                        },
                                                        {
                                                            type : _DWT_BUTTON_,
                                                            label : ZaMsg.DLXV_ButtonAddAll,
                                                            width : 70,
                                                            onActivate : "GlobalConfigXFormView.addAllCommonExt.call(this)",
                                                            enableDisableChecks : [
                                                                    GlobalConfigXFormView.shouldEnableAddAllButton,
                                                                    [ ZaItem.hasWritePermission,
                                                                            ZaGlobalConfig.A_zimbraMtaBlockedExtension ] ],
                                                            enableDisableChangeEventSources : [
                                                                    ZaGlobalConfig.A_zimbraMtaCommonBlockedExtension,
                                                                    ZaGlobalConfig.A_zimbraMtaBlockedExtension ]
                                                        },
                                                        {
                                                            type : _CELLSPACER_
                                                        },
                                                        {
                                                            type : _TEXTFIELD_,
                                                            cssStyle : "width:60px;",
                                                            ref : ZaGlobalConfig.A_zimbraNewExtension,
                                                            label : ZaMsg.NAD_Attach_NewExtension,
                                                            visibilityChecks : [],
                                                            enableDisableChecks : [ [ ZaItem.hasWritePermission,
                                                                    ZaGlobalConfig.A_zimbraMtaBlockedExtension ] ],
                                                            enableDisableChangeEventSources : [ ZaGlobalConfig.A_zimbraMtaBlockedExtension ]
                                                        },
                                                        {
                                                            type : _DWT_BUTTON_,
                                                            label : ZaMsg.NAD_Attach_AddExtension,
                                                            width : 70,
                                                            onActivate : "GlobalConfigXFormView.addNewExt.call(this)",
                                                            enableDisableChecks : [
                                                                    [ XForm.checkInstanceValueNotEmty,
                                                                            ZaGlobalConfig.A_zimbraNewExtension ],
                                                                    [ ZaItem.hasWritePermission,
                                                                            ZaGlobalConfig.A_zimbraMtaBlockedExtension ] ],
                                                            enableDisableChangeEventSources : [
                                                                    ZaGlobalConfig.A_zimbraNewExtension,
                                                                    ZaGlobalConfig.A_zimbraMtaBlockedExtension ]
                                                        } ]
                                            } ]
                                } ]
                    } ]
        };
        switchItems.push(case2);
    }

    if (ZaTabView.isTAB_ENABLED(entry, GlobalConfigXFormView.MTA_TAB_ATTRS, GlobalConfigXFormView.MTA_TAB_RIGHTS)) {
        _tab3 = ++this.TAB_INDEX;
        this.helpMap[_tab3] = ZaUtil.HELP_URL;
        tabBarChoices.push({
            value : _tab3,
            label : ZaMsg.NAD_Tab_MTA
        });
        var case3 = {
            type : _ZATABCASE_,
            caseKey : _tab3,
            paddingStyle : "padding-left:15px;",
            width : "98%",
            cellpadding : 2,
            colSizes : [ "auto" ],
            numCols : 1,
            id : "global_mta_tab",
            items : [
                    {
                        type : _ZA_TOP_GROUPER_,
                        label : ZaMsg.Global_MTA_AuthenticationGrp,
                        visibilityChecks : [ [ ZATopGrouper_XFormItem.isGroupVisible,
                                [ ZaGlobalConfig.A_zimbraMtaSaslAuthEnable, ZaGlobalConfig.A_zimbraMtaTlsAuthOnly ] ] ],
                        visibilityChangeEventSources : [ ZaGlobalConfig.A_zimbraMtaSaslAuthEnable,
                                ZaGlobalConfig.A_zimbraMtaTlsAuthOnly ],
                        items : [
                                {
                                    ref : ZaGlobalConfig.A_zimbraMtaSaslAuthEnable,
                                    type : _CHECKBOX_,
                                    label : ZaMsg.NAD_MTA_Authentication,
                                    trueValue : "yes",
                                    falseValue : "no"
                                },
                                {
                                    ref : ZaGlobalConfig.A_zimbraMtaTlsAuthOnly,
                                    type : _CHECKBOX_,
                                    enableDisableChangeEventSources : [ ZaGlobalConfig.A_zimbraMtaSaslAuthEnable,
                                            ZaGlobalConfig.A_zimbraMtaTlsAuthOnly ],
                                    enableDisableChecks : [
                                            [ ZaItem.hasWritePermission, ZaGlobalConfig.A_zimbraMtaTlsAuthOnly ],
                                            [ XForm.checkInstanceValue, ZaGlobalConfig.A_zimbraMtaSaslAuthEnable, "yes" ] ],

                                    label : ZaMsg.NAD_MTA_TlsAuthenticationOnly,
                                    trueValue : "TRUE",
                                    falseValue : "FALSE"

                                } ]
                    },
                    {
                        type : _ZA_TOP_GROUPER_,
                        label : ZaMsg.Global_MTA_NetworkGrp,
                        id : "mta_network_group",
                        visibilityChecks : [ [
                                ZATopGrouper_XFormItem.isGroupVisible,
                                [ ZaGlobalConfig.A_zimbraSmtpHostname, ZaGlobalConfig.A_zimbraSmtpPort,
                                        ZaGlobalConfig.A_zimbraMtaRelayHost,
                                        ZaGlobalConfig.A_zimbraMtaFallbackRelayHost,
                                        ZaGlobalConfig.A_zimbraDNSCheckHostname, ZaGlobalConfig.A_zimbraMtaMyNetworks,
										ZaGlobalConfig.A_zimbraMtaSmtpDnsSupportLevel ] ] ],
                        visibilityChangeEventSources : [ ZaGlobalConfig.A_zimbraSmtpHostname,
                                ZaGlobalConfig.A_zimbraSmtpPort, ZaGlobalConfig.A_zimbraMtaRelayHost,
                                ZaGlobalConfig.A_zimbraMtaFallbackRelayHost, ZaGlobalConfig.A_zimbraDNSCheckHostname,
								ZaGlobalConfig.A_zimbraMtaMyNetworks, ZaGlobalConfig.A_zimbraMtaSmtpDnsSupportLevel ],
                        items : [ {
                            ref : ZaGlobalConfig.A_zimbraSmtpHostname,
                            type : _REPEAT_,
                            label : ZaMsg.LBL_zimbraSmtpHostname,
                            labelLocation : _LEFT_,
                            align : _LEFT_,
                            repeatInstance : "",
                            showAddButton : true,
                            showRemoveButton : true,
                            showAddOnNextRow : true,
                            addButtonLabel : ZaMsg.Add_zimbraSmtpHostname,
                            removeButtonLabel : ZaMsg.Remove_zimbraSmtpHostname,
                            removeButtonCSSStyle : "margin-left: 50px",
                            visibilityChecks : [ ZaItem.hasReadPermission ],
                            items : [ {
                                ref : ".",
                                type : _TEXTFIELD_,
                                label : null,
                                labelLocation : _NONE_,
                                toolTipContent : ZaMsg.tt_zimbraSmtpHostname,
                                visibilityChecks : [ ZaItem.hasReadPermission ]
                            } ]
                        }, {
                            ref : ZaGlobalConfig.A_zimbraSmtpPort,
                            type : _OUTPUT_,
                            label : ZaMsg.NAD_MTA_WebMailPort,
                            visibilityChecks : [ ZaItem.hasReadPermission ]
                        }, {
                            ref : ZaGlobalConfig.A_zimbraMtaRelayHost,
                            label : ZaMsg.NAD_MTA_RelayMTA,
                            labelLocation : _LEFT_,
                            type : _HOSTPORT_,
                            onClick : "ZaController.showTooltip",
                            toolTipContent : ZaMsg.tt_MTA_RelayMTA,
                            visibilityChecks : [ ZaItem.hasReadPermission ],
                            onMouseout : "ZaController.hideTooltip"
                        }, {
                            ref : ZaGlobalConfig.A_zimbraMtaFallbackRelayHost,
                            label : ZaMsg.NAD_MTA_FallbackRelay,
                            labelLocation : _LEFT_,
                            type : _HOSTPORT_,
                            onClick : "ZaController.showTooltip",
                            toolTipContent : ZaMsg.tt_MTA_FallbackRelay,
                            visibilityChecks : [ ZaItem.hasReadPermission ],
                            onMouseout : "ZaController.hideTooltip"
                        }, {
                            type : _DWT_ALERT_,
                            containerCssStyle : "padding-bottom:0px",
                            style : DwtAlert.INFO,
                            iconVisible : true,
                            content : ZaMsg.Domain_InboundSMTPNote,
                            colSpan : "*"
                        }, {
                            ref : ZaGlobalConfig.A_zimbraDNSCheckHostname,
                            type : _TEXTFIELD_,
                            label : ZaMsg.Domain_zimbraDNSCheckHostname,
                            toolTipContent : ZaMsg.Domain_zimbraDNSCheckHostname
                        }, {
                            ref : ZaGlobalConfig.A_zimbraMtaMyNetworks,
                            type : _TEXTAREA_,
                            label : ZaMsg.NAD_MTA_MyNetworks,
                            msgName : ZaMsg.NAD_MTA_MyNetworks,
                            width : 250
                        },

                        {
							ref : ZaGlobalConfig.A_zimbraMtaSmtpDnsSupportLevel,
							type : _OSELECT1_,
							label : ZaMsg.NAD_MTA_SMTP_Dns,
							choices : ZaSettings.getSmtpDnsSupportLevel
                        } ]
                    },

                    {
                        type : _ZA_TOP_GROUPER_,
                        label : ZaMsg.Global_MTA_MilterServer,
                        visibilityChecks : [ [ ZATopGrouper_XFormItem.isGroupVisible,
                                [ ZaGlobalConfig.A_zimbraMilterBindPort, ZaGlobalConfig.A_zimbraMilterServerEnabled ] ] ],
                        visibilityChangeEventSources : [ ZaGlobalConfig.A_zimbraMilterBindPort,
                                ZaGlobalConfig.A_zimbraMilterServerEnabled ],
                        items : [ {
                            ref : ZaGlobalConfig.A_zimbraMilterBindPort,
                            type : _OUTPUT_,
                            label : ZaMsg.NAD_MTA_MilterBindPort
                        }, {
                            ref : ZaGlobalConfig.A_zimbraMilterServerEnabled,
                            type : _CHECKBOX_,
                            label : ZaMsg.NAD_MTA_MilterServerEnabled,
                            trueValue : "TRUE",
                            falseValue : "FALSE"
                        } ]
                    },

                    {
                        type : _ZA_TOP_GROUPER_,
                        label : ZaMsg.Global_MTA_Messages,
                        visibilityChecks : [ [
                                ZATopGrouper_XFormItem.isGroupVisible,
                                [ ZaGlobalConfig.A_zimbraMtaMaxMessageSize,
                                        ZaGlobalConfig.A_zimbraSmtpSendAddOriginatingIP ] ] ],
                        visibilityChangeEventSources : [ ZaGlobalConfig.A_zimbraMtaMaxMessageSize,
                                ZaGlobalConfig.A_zimbraSmtpSendAddOriginatingIP ],
                        items : [ {
                            ref : ZaGlobalConfig.A_zimbraMtaMaxMessageSize,
                            type : _TEXTFIELD_,
                            label : ZaMsg.NAD_MTA_MaxMsgSize,
                            width : "6em"
                        }, {
                            ref : ZaGlobalConfig.A_zimbraSmtpSendAddOriginatingIP,
                            type : _CHECKBOX_,
                            label : ZaMsg.NAD_add_x_orginate_IP,
                            trueValue : "TRUE",
                            falseValue : "FALSE"
                        } ]
                    },

                    {
                        type : _ZA_TOP_GROUPER_,
                        label : ZaMsg.NAD_MTA_PolicyServiceChecks,
                        visibilityChecks : [ [ ZATopGrouper_XFormItem.isGroupVisible,
                                [ ZaGlobalConfig.A_zimbraMtaPolicyService ] ] ],
                        items : [ {
                            ref : ZaGlobalConfig.A_zimbraMtaPolicyService,
                            type : _REPEAT_,
                            label : ZaMsg.NAD_MTA_policy_service,
                            labelLocation : _LEFT_,
                            align : _LEFT_,
                            repeatInstance : "",
                            showAddButton : true,
                            showRemoveButton : true,
                            showAddOnNextRow : true,
                            addButtonLabel : ZaMsg.NAD_Add,
                            removeButtonLabel : ZaMsg.NAD_Remove,
                            items : [ {
                                ref : ".",
                                type : _TEXTFIELD_,
                                label : null,
                                visibilityChecks : [],
                                enableDisableChecks : []
                            } ]
                        } ]
                    },

                    {
                        type : _ZA_TOP_GROUPER_,
                        label : ZaMsg.NAD_MTA_ProtocolChecks,
                        visibilityChecks : [ [
                                ZATopGrouper_XFormItem.isGroupVisible,
                                [ ZaGlobalConfig.A_zimbraMtaRejectInvalidHeloHostname,
                                        ZaGlobalConfig.A_zimbraMtaRejectNonFqdnHeloHostname,
                                        ZaGlobalConfig.A_zimbraMtaRejectNonFqdnSender ] ] ],
                        visibilityChangeEventSources : [ ZaGlobalConfig.A_zimbraMtaRejectUnknownClientHostname,
                                ZaGlobalConfig.A_zimbraMtaRejectUnknownReverseClientHostname,
                                ZaGlobalConfig.A_zimbraMtaRejectUnknownSenderDomain,
                                ZaGlobalConfig.A_zimbraMtaRejectUnknownHeloHostname ],
                        items : [ {
                            ref : ZaGlobalConfig.A_zimbraMtaRejectInvalidHeloHostname,
                            type : _CHECKBOX_,
                            label : ZaMsg.NAD_MTA_reject_invalid_helo_hostname

                        }, {
                            ref : ZaGlobalConfig.A_zimbraMtaRejectNonFqdnHeloHostname,
                            type : _CHECKBOX_,
                            label : ZaMsg.NAD_MTA_reject_non_fqdn_helo_hostname
                        }, {
                            ref : ZaGlobalConfig.A_zimbraMtaRejectNonFqdnSender,
                            type : _CHECKBOX_,
                            label : ZaMsg.NAD_MTA_reject_non_fqdn_sender
                        } ]
                    },
                    {
                        type : _ZA_TOP_GROUPER_,
                        label : ZaMsg.NAD_MTA_DnsChecks,
                        visibilityChecks : [ [
                                ZATopGrouper_XFormItem.isGroupVisible,
                                [ ZaGlobalConfig.A_zimbraMtaRejectUnknownClientHostname,
                                        ZaGlobalConfig.A_zimbraMtaRejectUnknownReverseClientHostname,
                                        ZaGlobalConfig.A_zimbraMtaRejectUnknownSenderDomain,
                                        ZaGlobalConfig.A_zimbraMtaRejectUnknownHeloHostname ] ] ],
                        visibilityChangeEventSources : [ ZaGlobalConfig.A_zimbraMtaRejectUnknownClientHostname,
                                ZaGlobalConfig.A_zimbraMtaRejectUnknownReverseClientHostname,
                                ZaGlobalConfig.A_zimbraMtaRejectUnknownSenderDomain,
                                ZaGlobalConfig.A_zimbraMtaRejectUnknownHeloHostname ],
                        items : [ {
                            ref : ZaGlobalConfig.A_zimbraMtaRejectUnknownClientHostname,
                            type : _CHECKBOX_,
                            label : ZaMsg.NAD_MTA_reject_unknown_client_hostname
                        }, {
                            ref : ZaGlobalConfig.A_zimbraMtaRejectUnknownReverseClientHostname,
                            type : _CHECKBOX_,
                            label : ZaMsg.NAD_MTA_reject_unknown_reverse_client_hostname
                        }, {
                            ref : ZaGlobalConfig.A_zimbraMtaRejectUnknownSenderDomain,
                            type : _CHECKBOX_,
                            label : ZaMsg.NAD_MTA_reject_unknown_sender_domain
                        }, {
                            ref : ZaGlobalConfig.A_zimbraMtaRejectUnknownHeloHostname,
                            type : _CHECKBOX_,
                            label : ZaMsg.NAD_MTA_reject_unknown_helo_hostname
                        }, {
                            ref : ZaGlobalConfig.A_zimbraMtaRejectRblClient,
                            type : _REPEAT_,
                            label : ZaMsg.NAD_MTA_reject_rbl_client,
                            labelLocation : _LEFT_,
                            align : _LEFT_,
                            repeatInstance : "",
                            showAddButton : true,
                            showRemoveButton : true,
                            showAddOnNextRow : true,
                            addButtonLabel : ZaMsg.NAD_Add,
                            removeButtonLabel : ZaMsg.NAD_Remove,
                            items : [ {
                                ref : ".",
                                type : _TEXTFIELD_,
                                label : null
                            } ]
                        }, {
                            ref : ZaGlobalConfig.A_zimbraMtaRejectRHSblClient,
                            type : _REPEAT_,
                            label : ZaMsg.NAD_MTA_reject_rhsbl_client,
                            labelLocation : _LEFT_,
                            align : _LEFT_,
                            repeatInstance : "",
                            showAddButton : true,
                            showRemoveButton : true,
                            showAddOnNextRow : true,
                            addButtonLabel : ZaMsg.NAD_Add,
                            removeButtonLabel : ZaMsg.NAD_Remove,
                            items : [ {
                                ref : ".",
                                type : _TEXTFIELD_,
                                label : null
                            } ]
                        }, {
                            ref : ZaGlobalConfig.A_zimbraMtaRejectRHSblReverseClient,
                            type : _REPEAT_,
                            label : ZaMsg.NAD_MTA_reject_rhsbl_reverse_client,
                            labelLocation : _LEFT_,
                            align : _LEFT_,
                            repeatInstance : "",
                            showAddButton : true,
                            showRemoveButton : true,
                            showAddOnNextRow : true,
                            addButtonLabel : ZaMsg.NAD_Add,
                            removeButtonLabel : ZaMsg.NAD_Remove,
                            items : [ {
                                ref : ".",
                                type : _TEXTFIELD_,
                                label : null
                            } ]
                        }, {
                            ref : ZaGlobalConfig.A_zimbraMtaRejectRHSblSender,
                            type : _REPEAT_,
                            label : ZaMsg.NAD_MTA_reject_rhsbl_sender,
                            labelLocation : _LEFT_,
                            align : _LEFT_,
                            repeatInstance : "",
                            showAddButton : true,
                            showRemoveButton : true,
                            showAddOnNextRow : true,
                            addButtonLabel : ZaMsg.NAD_Add,
                            removeButtonLabel : ZaMsg.NAD_Remove,
                            items : [ {
                                ref : ".",
                                type : _TEXTFIELD_,
                                label : null
                            } ]
                        } ]
                    }, {
                        type : _SPACER_,
                        height : 10
                    } ]
        };
        switchItems.push(case3);
    }

    if (ZaTabView.isTAB_ENABLED(entry, GlobalConfigXFormView.IMAP_TAB_ATTRS, GlobalConfigXFormView.IMAP_TAB_RIGHTS)) {
        _tab4 = ++this.TAB_INDEX;
        this.helpMap[_tab4] = ZaUtil.HELP_URL;
        tabBarChoices.push({
            value : _tab4,
            label : ZaMsg.NAD_Tab_IMAP
        });
        var case4 = {
            type : _ZATABCASE_,
            caseKey : _tab4,
            paddingStyle : "padding-left:15px;",
            width : "98%",
            cellpadding : 2,
            colSizes : [ "auto" ],
            numCols : 1,
            id : "global_imap_tab",
            items : [ {
                type : _DWT_ALERT_,
                containerCssStyle : "padding-bottom:0px",
                style : DwtAlert.WARNING,
                iconVisible : true,
                content : ZaMsg.Alert_ServerRestart
            }, {
                type : _ZA_TOP_GROUPER_,
                label : ZaMsg.Global_IMAP_ServiceGrp,
                items : [ {
                    ref : ZaGlobalConfig.A_zimbraImapServerEnabled,
                    type : _CHECKBOX_,
                    label : ZaMsg.IMAP_Service,
                    trueValue : "TRUE",
                    falseValue : "FALSE"
                }, {
                    ref : ZaGlobalConfig.A_zimbraImapSSLServerEnabled,
                    type : _CHECKBOX_,
                    label : ZaMsg.IMAP_SSLService,
                    trueValue : "TRUE",
                    falseValue : "FALSE"
                }, {
                    ref : ZaGlobalConfig.A_zimbraImapCleartextLoginEnabled,
                    type : _CHECKBOX_,
                    label : ZaMsg.IMAP_CleartextLoginEnabled,
                    trueValue : "TRUE",
                    falseValue : "FALSE"
                }, {
                    ref : ZaGlobalConfig.A_zimbraImapNumThreads,
                    type : _TEXTFIELD_,
                    label : ZaMsg.IMAP_NumThreads,
                    width : "5em"
                } ]
            } ]
        };
        switchItems.push(case4);
    }

    if (ZaTabView.isTAB_ENABLED(entry, GlobalConfigXFormView.POP_TAB_ATTRS, GlobalConfigXFormView.POP_TAB_RIGHTS)) {
        _tab5 = ++this.TAB_INDEX;
        this.helpMap[_tab5] = ZaUtil.HELP_URL;
        tabBarChoices.push({
            value : _tab5,
            label : ZaMsg.NAD_Tab_POP
        });
        var case5 = {
            type : _ZATABCASE_,
            caseKey : _tab5,
            paddingStyle : "padding-left:15px;",
            width : "98%",
            cellpadding : 2,
            colSizes : [ "auto" ],
            numCols : 1,
            id : "global_pop_tab",
            items : [ {
                type : _DWT_ALERT_,
                containerCssStyle : "padding-bottom:0px",
                style : DwtAlert.WARNING,
                iconVisible : true,
                content : ZaMsg.Alert_ServerRestart
            }, {
                type : _ZA_TOP_GROUPER_,
                label : ZaMsg.Global_POP_ServiceGrp,
                items : [ {
                    ref : ZaGlobalConfig.A_zimbraPop3ServerEnabled,
                    type : _CHECKBOX_,
                    label : ZaMsg.NAD_POP_Service,
                    trueValue : "TRUE",
                    falseValue : "FALSE"
                }, {
                    ref : ZaGlobalConfig.A_zimbraPop3SSLServerEnabled,
                    type : _CHECKBOX_,
                    label : ZaMsg.NAD_POP_SSL,
                    trueValue : "TRUE",
                    falseValue : "FALSE"
                }, {
                    ref : ZaGlobalConfig.A_zimbraPop3CleartextLoginEnabled,
                    type : _CHECKBOX_,
                    label : ZaMsg.NAD_POP_CleartextLoginEnabled,
                    trueValue : "TRUE",
                    falseValue : "FALSE"
                }, {
                    ref : ZaGlobalConfig.A_zimbraPop3NumThreads,
                    type : _TEXTFIELD_,
                    label : ZaMsg.NAD_POP_NumThreads,
                    width : "5em"
                } ]
            } ]
        };
        switchItems.push(case5);
    }

    if (ZaTabView.isTAB_ENABLED(entry, GlobalConfigXFormView.ASAV_TAB_ATTRS, GlobalConfigXFormView.ASAV_TAB_RIGHTS)) {
        _tab6 = ++this.TAB_INDEX;
        this.helpMap[_tab6] = ZaUtil.HELP_URL;
        tabBarChoices.push({
            value : _tab6,
            label : ZaMsg.NAD_Tab_ASAV
        });
        var case6 = // anti-spam
        {
            type : _ZATABCASE_,
            caseKey : _tab6,
            paddingStyle : "padding-left:15px;",
            width : "98%",
            cellpadding : 2,
            colSizes : [ "auto" ],
            numCols : 1,
            id : "global_asav_tab",
            items : [ {
                type : _ZA_TOP_GROUPER_,
                label : ZaMsg.NAD_AS_Settings,
                items : [ {
                    type : _DWT_ALERT_,
                    containerCssStyle : "padding-bottom:0px",
                    style : DwtAlert.WARNING,
                    iconVisible : true,
                    content : ZaMsg.Alert_AmavisdRestart
                }, {
                    ref : ZaGlobalConfig.A_zimbraSpamKillPercent,
                    type : _INPUT_,
                    label : ZaMsg.NAD_Spam_KillPercent,
                    width : "4em"
                }, {
                    ref : ZaGlobalConfig.A_zimbraSpamTagPercent,
                    type : _INPUT_,
                    label : ZaMsg.NAD_Spam_TagPercent,
                    width : "4em"
                }, {
                    ref : ZaGlobalConfig.A_zimbraSpamSubjectTag,
                    type : _INPUT_,
                    label : ZaMsg.NAD_Spam_SubjectPrefix,
                    width : "20em"
                } ]
            }, {
                type : _ZA_TOP_GROUPER_,
                label : ZaMsg.NAD_AV_Settings,
                items : [ {
                    ref : ZaGlobalConfig.A_zimbraVirusDefinitionsUpdateFrequency,
                    type : _INPUT_,
                    label : ZaMsg.NAD_Virus_DefUpdateFreq,
                    width : "5em"
                }, {
                    ref : ZaGlobalConfig.A_zimbraVirusBlockEncryptedArchive,
                    type : _CHECKBOX_,
                    label : ZaMsg.NAD_Virus_BlockEncrypted,
                    trueValue : "TRUE",
                    falseValue : "FALSE"
                }, {
                    ref : ZaGlobalConfig.A_zimbraVirusWarnRecipient,
                    type : _CHECKBOX_,
                    label : ZaMsg.NAD_Virus_NotifyRecipient,
                    trueValue : "TRUE",
                    falseValue : "FALSE"
                } ]
            } ]
        };
        switchItems.push(case6);
    }

    if (ZaTabView.isTAB_ENABLED(entry, GlobalConfigXFormView.INTEROP_TAB_ATTRS,
            GlobalConfigXFormView.INTEROP_TAB_RIGHTS)) {
        _tab7 = ++this.TAB_INDEX;
        this.helpMap[_tab7] = ZaUtil.HELP_URL;
        tabBarChoices.push({
            value : _tab7,
            label : ZaMsg.TABT_Interop
        });
        var case7 = // Interop
        {
            type : _ZATABCASE_,
            caseKey : _tab7,
            paddingStyle : "padding-left:15px;",
            width : "98%",
            cellpadding : 2,
            colSizes : [ "auto" ],
            numCols : 1,
            id : "global_interop_tab",
            items : [ {
                type : _ZA_TOP_GROUPER_,
                label : ZaMsg.NAD_Exchange_Settings,
                items : [ {
                    ref : ZaGlobalConfig.A_zimbraFreebusyExchangeURL,
                    type : _TEXTFIELD_,
                    label : ZaMsg.NAD_Exchange_URL,
                    width : "30em"
                }, {
                    ref : ZaGlobalConfig.A_zimbraFreebusyExchangeAuthScheme,
                    type : _OSELECT1_,
                    label : ZaMsg.NAD_Exchange_Auth_Schema
                }, {
                    ref : ZaGlobalConfig.A_zimbraFreebusyExchangeServerType,
                    type : _OSELECT1_,
                    label : ZaMsg.NAD_Exchange_Server_Type
                }, {
                    ref : ZaGlobalConfig.A_zimbraFreebusyExchangeAuthUsername,
                    type : _TEXTFIELD_,
                    label : ZaMsg.NAD_Exchange_Auth_User,
                    width : "20em"
                }, {
                    ref : ZaGlobalConfig.A_zimbraFreebusyExchangeAuthPassword,
                    type : _PASSWORD_,
                    label : ZaMsg.NAD_Exchange_Auth_Password,
                    width : "20em"
                }, {
                    ref : ZaGlobalConfig.A_zimbraFreebusyExchangeUserOrg,
                    type : _TEXTFIELD_,
                    label : ZaMsg.LBL_zimbraFreebusyExchangeUserOrg,
                    width : "20em"
                }, {
                    type : _GROUP_,
                    colSpan : 2,
                    numCols : 5,
                    colSizes : [ "120px", "10px", "170px", "20px", "160px" ],
                    items : [ {
                        type : _CELLSPACER_
                    }, {
                        type : _DWT_BUTTON_,
                        colSpan : 2,
                        label : ZaMsg.Check_Settings,
                        autoPadding : false,
                        onActivate : ZaItem.checkInteropSettings,
                        enableDisableChecks : [ ZaZimbraAdmin.canChangeExchangeConfig ]
                    }, {
                        type : _CELLSPACER_
                    }, {
                        type : _DWT_BUTTON_,
                        colSpan : 2,
                        label : ZaMsg.Clear_Settings,
                        autoPadding : false,
                        onActivate : ZaItem.clearInteropSettings,
                        enableDisableChecks : [ ZaZimbraAdmin.canChangeExchangeConfig ]
                    }, {
                        type : _CELLSPACER_
                    } ]
                }

                ]
            } ]
        };
        switchItems.push(case7);
    }

    if (ZaTabView.isTAB_ENABLED(entry, GlobalConfigXFormView.SKIN_TAB_ATTRS, GlobalConfigXFormView.SKIN_TAB_RIGHTS)) {
        _tab8 = ++this.TAB_INDEX;
        this.helpMap[_tab8] = ZaUtil.HELP_URL;
        tabBarChoices.push({
            value : _tab8,
            label : ZaMsg.TABT_Themes
        });
        var case8 = // skin properties
        {
            type : _ZATABCASE_,
            caseKey : _tab8,
            paddingStyle : "padding-left:15px;",
            width : "98%",
            cellpadding : 2,
            colSizes : [ "auto" ],
            numCols : 1,
            id : "global_skin_tab",
            items : [ {
                type : _ZA_TOP_GROUPER_,
                label : ZaMsg.NAD_Skin_Color_Settings,
                items : [ {
                    type : _DWT_ALERT_,
                    style : DwtAlert.WARNING,
                    iconVisible : true,
                    content : ZaMsg.Alert_Flush_Theme_Cache,
                    colSpan : 2,
                    visibilityChecks : [],
                    ref : null
                }, {
                    ref : ZaGlobalConfig.A_zimbraSkinForegroundColor,
                    type : _DWT_COLORPICKER_,
                    label : ZaMsg.NAD_zimbraSkinForegroundColor,
                    labelLocation : _LEFT_,
                    buttonImage : "Color",
                    width : "50px"
                }, {
                    ref : ZaGlobalConfig.A_zimbraSkinBackgroundColor,
                    type : _DWT_COLORPICKER_,
                    label : ZaMsg.NAD_zimbraSkinBackgroundColor,
                    labelLocation : _LEFT_,
                    buttonImage : "Color",
                    width : "50px"
                }, {
                    ref : ZaGlobalConfig.A_zimbraSkinSecondaryColor,
                    type : _DWT_COLORPICKER_,
                    label : ZaMsg.NAD_zimbraSkinSecondaryColor,
                    labelLocation : _LEFT_,
                    buttonImage : "Color",
                    width : "50px"
                }, {
                    ref : ZaGlobalConfig.A_zimbraSkinSelectionColor,
                    type : _DWT_COLORPICKER_,
                    label : ZaMsg.NAD_zimbraSkinSelectionColor,
                    buttonImage : "Color",
                    width : "50px",
                    labelLocation : _LEFT_
                }, {
                    type : _GROUP_,
                    colSpan : 2,
                    cssStyle : "margin-top: 10px; margin-left: 200px; width: 200px;",
                    items : [ {
                        type : _DWT_BUTTON_,
                        label : ZaMsg.bt_ResetAllSkinColor,
                        onActivate : ZaDomainXFormView.resetAllColorThemes
                    } ]
                } ]
            } ]
        };
        switchItems.push(case8);
    }

    if (ZaTabView.isTAB_ENABLED(entry, GlobalConfigXFormView.BC_TAB_ATTRS, GlobalConfigXFormView.BC_TAB_RIGHTS)) {
        _tab9 = ++this.TAB_INDEX;
        this.helpMap[_tab9] = ZaUtil.HELP_URL;
        tabBarChoices.push({
            value : _tab9,
            label : ZaMsg.Domain_Tab_Advanced
        });
        var case9 = {
            type : _ZATABCASE_,
            caseKey : _tab9,
            paddingStyle : "padding-left:15px;",
            width : "98%",
            cellpadding : 2,
            colSizes : [ "auto" ],
            numCols : 1,
            id : "global_ad_tab",
            items : [ {
                type : _ZA_TOP_GROUPER_,
                label : ZaMsg.Domain_BC_ShareConf,
                items : [ {
                    ref : ZaGlobalConfig.A_zimbraBasicAuthRealm,
                    type : _TEXTFIELD_,
                    label : ZaMsg.Domain_zimbraBasicAuthRealm
                } ]
            }, {
                type : _ZA_TOP_GROUPER_,
                label : ZaMsg.Domain_AD_EmailValidate,
                visibilityChecks : [ [ ZaItem.hasReadPermission, ZaGlobalConfig.A_zimbraMailAddressValidationRegex ] ],
                visibilityChangeEventSources : [ ZaGlobalConfig.A_zimbraMailAddressValidationRegex ],
                items : [ {
                    ref : ZaGlobalConfig.A_zimbraMailAddressValidationRegex,
                    type : _REPEAT_,
                    nowrap : false,
                    labelWrap : true,
                    label : ZaMsg.LBL_EmailValidate,
                    labelLocation : _LEFT_,
                    align : _LEFT_,
                    repeatInstance : "",
                    showAddButton : true,
                    showRemoveButton : true,
                    showAddOnNextRow : true,
                    addButtonLabel : ZaMsg.NAD_AddRegex,
                    removeButtonLabel : ZaMsg.NAD_RemoveRegex,
                    removeButtonCSSStyle : "margin-left: 50px",
                    items : [ {
                        ref : ".",
                        type : _TEXTFIELD_,
                        label : null
                    } ]
                } ]
            } ]
        };
        switchItems.push(case9);
    }

    if (ZaTabView.isTAB_ENABLED(entry, GlobalConfigXFormView.AUTH_TAB_ATTRS, GlobalConfigXFormView.AUTH_TAB_RIGHTS)) {
        _tab10 = ++this.TAB_INDEX;
        this.helpMap[_tab10] = ZaUtil.HELP_URL;
        tabBarChoices.push({
            value : _tab10,
            label : ZaMsg.NAD_Tab_AUTH
        });
        var case10 = {
            type : _ZATABCASE_,
            caseKey : _tab10,
            paddingStyle : "padding-left:15px;",
            width : "98%",
            cellpadding : 2,
            colSizes : [ "auto" ],
            numCols : 1,
            id : "global_auth_tab",
            items : [ {
                type : _ZA_TOP_GROUPER_,
                label : ZaMsg.NAD_WEBCLIENT_Configure,
                items : [ {
                    ref : ZaGlobalConfig.A_zimbraWebClientLoginURL,
                    type : _TEXTFIELD_,
                    width : "200px",
                    label : ZaMsg.LBL_zimbraWebClientLoginURL
                }, {
                    ref : ZaGlobalConfig.A_zimbraWebClientLogoutURL,
                    type : _TEXTFIELD_,
                    width : "200px",
                    label : ZaMsg.LBL_zimbraWebClientLogoutURL
                }, {
                    ref : ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedUA,
                    type : _REPEAT_,
                    nowrap : false,
                    labelWrap : true,
                    label : ZaMsg.LBL_zimbraWebClientLoginURLAllowedUA,
                    msgName : ZaMsg.MSG_zimbraWebClientLoginURLAllowedUA,
                    labelLocation : _LEFT_,
                    addButtonLabel : ZaMsg.NAD_Add,
                    align : _LEFT_,
                    showAddButton : true,
                    showRemoveButton : true,
                    showAddOnNextRow : true,
                    removeButtonLabel : ZaMsg.NAD_Remove,
                    items : [ {
                        ref : ".",
                        type : _TEXTFIELD_,
                        label : null,
                        width : "200px"
                    } ]
                }, {
                    ref : ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedUA,
                    type : _REPEAT_,
                    nowrap : false,
                    labelWrap : true,
                    label : ZaMsg.LBL_zimbraWebClientLogoutURLAllowedUA,
                    msgName : ZaMsg.MSG_zimbraWebClientLogoutURLAllowedUA,
                    labelLocation : _LEFT_,
                    addButtonLabel : ZaMsg.NAD_Add,
                    align : _LEFT_,
                    showAddButton : true,
                    showRemoveButton : true,
                    showAddOnNextRow : true,
                    removeButtonLabel : ZaMsg.NAD_Remove,
                    items : [ {
                        ref : ".",
                        type : _TEXTFIELD_,
                        label : null,
                        width : "200px"
                    } ]
                }, {
                    ref : ZaGlobalConfig.A_zimbraWebClientLoginURLAllowedIP,
                    type : _REPEAT_,
                    nowrap : false,
                    labelWrap : true,
                    label : ZaMsg.LBL_zimbraWebClientLoginURLAllowedIP,
                    msgName : ZaMsg.MSG_zimbraWebClientLoginURLAllowedIP,
                    labelLocation : _LEFT_,
                    addButtonLabel : ZaMsg.NAD_Add,
                    align : _LEFT_,
                    showAddButton : true,
                    showRemoveButton : true,
                    showAddOnNextRow : true,
                    removeButtonLabel : ZaMsg.NAD_Remove,
                    items : [ {
                        ref : ".",
                        type : _TEXTFIELD_,
                        label : null,
                        width : "200px"
                    } ]
                }, {
                    ref : ZaGlobalConfig.A_zimbraWebClientLogoutURLAllowedIP,
                    type : _REPEAT_,
                    nowrap : false,
                    labelWrap : true,
                    label : ZaMsg.LBL_zimbraWebClientLogoutURLAllowedIP,
                    msgName : ZaMsg.MSG_zimbraWebClientLogoutURLAllowedIP,
                    labelLocation : _LEFT_,
                    addButtonLabel : ZaMsg.NAD_Add,
                    align : _LEFT_,
                    showAddButton : true,
                    showRemoveButton : true,
                    showAddOnNextRow : true,
                    removeButtonLabel : ZaMsg.NAD_Remove,
                    items : [ {
                        ref : ".",
                        type : _TEXTFIELD_,
                        label : null,
                        width : "200px"
                    } ]
                }, {
                    ref : ZaGlobalConfig.A_zimbraForceClearCookies,
                    type : _CHECKBOX_,
                    trueValue : "TRUE",
                    falseValue : "FALSE",
                    label : ZaMsg.LBL_zimbraForceClearCookies,
                    msgName : ZaMsg.MSG_zimbraForceClearCookies,
                    labelLocation : _LEFT_
                } ]
            },
            {
                type : _ZA_TOP_GROUPER_,
                label : ZaMsg.NAD_Ephemeral_Setting,
                items : [ {
                        ref : ZaGlobalConfig.A_zimbraEphemeralBackendURL,
                        type : _TEXTFIELD_,
                        width : "200px",
                        label : ZaMsg.LBL_zimbraEphemeralBackendURL
                    } ]
            } ]
        };
        switchItems.push(case10);
    }

    if (ZaTabView.isTAB_ENABLED(entry, GlobalConfigXFormView.RETENTION_POLICY_TAB_ATTRS,
            GlobalConfigXFormView.RETENTION_POLICY_TAB_RIGHTS)) {
        _tab11 = ++this.TAB_INDEX;
        this.helpMap[_tab11] = ZaUtil.HELP_URL;
        tabBarChoices.push({
            value : _tab11,
            label : ZaMsg.TABT_RetentionPolicy
        });
        var case11 = {
            type : _SUPER_TABCASE_,
            caseKey : _tab11,
            paddingStyle : "padding-left:15px;",
            width : "98%",
            cellpadding : 2,
            colSizes : [ "100%" ],
            numCols : 1,
            id : "global_retentionpolicy_tab",
            loadDataMethods : [ GlobalConfigXFormView.prototype.loadRetentionPolicies ],
            items : [
                    {
                        type : _ZA_TOP_GROUPER_,
                        id : "global_form_keep_p_group",
                        width : "98%",
                        numCols : 1,
                        colSizes : [ "auto" ],
                        label : ZaMsg.Glb_RetentionPolicies,
                        cssStyle : "margin:10px;padding-bottom:0;",
                        items : [
                                {
                                    ref : ZaGlobalConfig.A2_retentionPoliciesKeep,
                                    type : _DWT_LIST_,
                                    height : "200",
                                    width : "99%",
                                    preserveSelection : false,
                                    multiselect : true,
                                    cssClass : "DLSource",
                                    headerList : headerListKeep,
                                    widgetClass : ZaRetentionPolicyListView,
                                    onSelection : GlobalConfigXFormView.retentionSelectionListener,
                                    valueChangeEventSources : [ ZaGlobalConfig.A2_retentionPoliciesKeep ]
                                },
                                {
                                    type : _GROUP_,
                                    numCols : 5,
                                    colSizes : [ "100px", "auto", "100px", "auto", "100px" ],
                                    width : "350px",
                                    cssStyle : "margin:10px;padding-bottom:0;",
                                    items : [
                                            {
                                                type : _DWT_BUTTON_,
                                                label : ZaMsg.TBB_Delete,
                                                width : "100px",
                                                onActivate : "GlobalConfigXFormView.deleteButtonListener.call(this);",
                                                enableDisableChangeEventSources : [ ZaGlobalConfig.A2_retentionPoliciesKeep_Selection ],
                                                enableDisableChecks : [ function() {
                                                    var sel = this.getForm().getInstanceValue(
                                                            ZaGlobalConfig.A2_retentionPoliciesKeep_Selection);
                                                    return sel && sel.length > 0;
                                                } ]
                                            },
                                            {
                                                type : _CELLSPACER_
                                            },
                                            {
                                                type : _DWT_BUTTON_,
                                                label : ZaMsg.TBB_Edit,
                                                width : "100px",
                                                onActivate : "GlobalConfigXFormView.editButtonListener.call(this);",
                                                enableDisableChangeEventSources : [ ZaGlobalConfig.A2_retentionPoliciesKeep_Selection ],
                                                enableDisableChecks : [ function() {
                                                    var sel = this.getForm().getInstanceValue(
                                                            ZaGlobalConfig.A2_retentionPoliciesKeep_Selection);
                                                    return sel && sel.length == 1;
                                                } ]
                                            }, {
                                                type : _CELLSPACER_
                                            }, {
                                                type : _DWT_BUTTON_,
                                                label : ZaMsg.NAD_Add,
                                                width : "100px",
                                                onActivate : "GlobalConfigXFormView.addButtonListener.call(this);"
                                            } ]
                                } ]
                    },
                    {
                        type : _ZA_TOP_GROUPER_,
                        id : "global_form_purge_p_group",
                        width : "98%",
                        numCols : 1,
                        colSizes : [ "auto" ],
                        label : ZaMsg.Glb_DisposalPolicies,
                        cssStyle : "margin:10px;padding-bottom:0;",
                        items : [
                                {
                                    ref : ZaGlobalConfig.A2_retentionPoliciesPurge,
                                    type : _DWT_LIST_,
                                    height : "200",
                                    width : "99%",
                                    preserveSelection : false,
                                    multiselect : true,
                                    cssClass : "DLSource",
                                    headerList : headerListPurge,
                                    widgetClass : ZaRetentionPolicyListView,
                                    onSelection : GlobalConfigXFormView.purgeSelectionListener,
                                    valueChangeEventSources : [ ZaGlobalConfig.A2_retentionPoliciesPurge ]
                                },
                                {
                                    type : _GROUP_,
                                    numCols : 5,
                                    colSizes : [ "100px", "auto", "100px", "auto", "100px" ],
                                    width : "350px",
                                    cssStyle : "margin:10px;padding-bottom:0;",
                                    items : [
                                            {
                                                type : _DWT_BUTTON_,
                                                label : ZaMsg.TBB_Delete,
                                                width : "100px",
                                                onActivate : "GlobalConfigXFormView.deleteButtonListener.call(this, 1);",
                                                enableDisableChangeEventSources : [ ZaGlobalConfig.A2_retentionPoliciesPurge_Selection ],
                                                enableDisableChecks : [ function() {
                                                    var sel = this.getForm().getInstanceValue(
                                                            ZaGlobalConfig.A2_retentionPoliciesPurge_Selection);
                                                    return sel && sel.length > 0;
                                                } ]
                                            },
                                            {
                                                type : _CELLSPACER_
                                            },
                                            {
                                                type : _DWT_BUTTON_,
                                                label : ZaMsg.TBB_Edit,
                                                width : "100px",
                                                onActivate : "GlobalConfigXFormView.editButtonListener.call(this, 1);",
                                                enableDisableChangeEventSources : [ ZaGlobalConfig.A2_retentionPoliciesPurge_Selection ],
                                                enableDisableChecks : [ function() {
                                                    var sel = this.getForm().getInstanceValue(
                                                            ZaGlobalConfig.A2_retentionPoliciesPurge_Selection);
                                                    return sel && sel.length == 1;
                                                } ]
                                            }, {
                                                type : _CELLSPACER_
                                            }, {
                                                type : _DWT_BUTTON_,
                                                label : ZaMsg.NAD_Add,
                                                width : "100px",
                                                onActivate : "GlobalConfigXFormView.addButtonListener.call(this,1);"
                                            } ]
                                } ]
                    } ]
        };
        switchItems.push(case11);
    }

    this.tabChoices = tabBarChoices;

    xFormObject.items = [ {
        type : _DWT_ALERT_,
        cssClass : "DwtTabTable",
        containerCssStyle : "padding-bottom:0px",
        style : DwtAlert.INFO,
        iconVisible : false,
        content : ZaMsg.Alert_GlobalConfig,
        id : "xform_header"
    }, {
        type : _TAB_BAR_,
        ref : ZaModel.currentTab,
        id : "xform_tabbar",
        height : "0px",
        containerCssStyle : "padding-top:0px; ",
        cssStyle : "display:none;",
        choices : tabBarChoices
    }, {
        type : _SWITCH_,
        align : _LEFT_,
        valign : _TOP_,
        items : switchItems
    } ];
};
ZaTabView.XFormModifiers["GlobalConfigXFormView"].push(GlobalConfigXFormView.myXFormModifier);

GlobalConfigXFormView.prototype.getTabChoices = function() {
    return this.tabChoices;
}
}
if (AjxPackage.define("zimbraAdmin.accounts.view.ZaAccMiniListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
 
 /**
 * @author Greg Solovyev
 **/
ZaAccMiniListView = function(parent, className, posStyle, headerList, view, id, scrollLoading) {
	if (arguments.length == 0) return;
    if (posStyle == null) posStyle = DwtControl.RELATIVE_STYLE ;
	ZaListView.call(this, parent, className, posStyle, headerList, view, id, scrollLoading);
	this.hideHeader = true;
}

ZaAccMiniListView.prototype = new ZaListView;
ZaAccMiniListView.prototype.constructor = ZaAccMiniListView;

ZaAccMiniListView.prototype.toString = function() {
	return "ZaAccMiniListView";
};

ZaAccMiniListView.prototype.createHeaderHtml = function (defaultColumnSort) {
	if(!this.hideHeader) {
		DwtListView.prototype.createHeaderHtml.call(this,defaultColumnSort);
	} 
}


ZaAccMiniListView.prototype._createItemHtml =
function(account, now, isDragProxy) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(account, div, DwtListView.TYPE_LIST_ITEM);
	
	var idx = 0;
	html[idx++] = "<table width='100%' cellspacing='0' cellpadding='0'>";

	html[idx++] = "<tr>";
	if(typeof(account)=="string") {
		html[idx++] = "<td width=100%>";
		html[idx++] = AjxStringUtil.htmlEncode(account);
		html[idx++] = "</td>";			
	} else if(this._headerList) {
		var cnt = this._headerList.length;
		for(var i = 0; i < cnt; i++) {
			var field = this._headerList[i]._field;
			var imgName = null;
			if(field!=null) {			
				if(field == "type") {
					// type
					html[idx++] = "<td width=" + this._headerList[i]._width + ">";
					switch(account.type) {
						case ZaItem.ACCOUNT:
							if(account.attrs[ZaAccount.A_zimbraIsAdminAccount]=="TRUE" ) {
								imgName = ("AdminUser");
							} else if (account.attrs[ZaAccount.A_zimbraIsDelegatedAdminAccount] == "TRUE") {
								imgName = ("DomainAdminUser");
							} else if (account.attrs[ZaAccount.A_zimbraIsSystemAccount] == "TRUE") {
								imgName = ("SpecialAccount");
							} else if (account.attrs[ZaAccount.A_zimbraIsSystemResource] == "TRUE") {
								imgName = ("SystemResource");
							} else if (account.attrs[ZaAccount.A_zimbraIsExternalVirtualAccount] == "TRUE") {
								imgName = ("AccountExternalVirtual");
							} else {
								if(account.isExternal) {
									imgName = ("AccountIMAP");
								} else {
									imgName = ("Account");
								}
							}
						break;
						case ZaItem.DL:
							if (account.attrs[ZaDistributionList.A_isAdminGroup] == "TRUE") {
								imgName = ("DistributionListGroup");
							} else {
								imgName = ("DistributionList");
							}
						break;
						case ZaItem.ALIAS:
							imgName = ("AccountAlias");
						break;
						case ZaItem.DOMAIN:
							imgName = ("Domain");
						break;
						case ZaItem.COS:
							imgName = ("COS");
						break;
						case ZaItem.RESOURCE:
							if (account.attrs[ZaResource.A_zimbraCalResType] == ZaResource.RESOURCE_TYPE_LOCATION){
								imgName = ("Location");
							} else {//equipment or other resource types
								imgName = ("Resource");
							}
						break;
						default:
							html[idx++] = AjxStringUtil.htmlEncode(account.type);
						break;
					}

					if (imgName != null) {
						html[idx++] = AjxImg.getImageHtml(imgName);
					}
					html[idx++] = "</td>";
				} else if(field == ZaAccount.A_name) {
					// name
					html[idx++] = "<td align='left' width=" + this._headerList[i]._width + "><nobr>";
					html[idx++] = AjxStringUtil.htmlEncode(account.name);
					html[idx++] = "</nobr></td>";
				} else if (field == ZaAccount.A_displayname) {
					// display name
					html[idx++] = "<td align='left' width=" + this._headerList[i]._width + "><nobr>";
					html[idx++] = AjxStringUtil.htmlEncode(account.attrs[ZaAccount.A_displayname]);
					html[idx++] = "</nobr></td>";	
				} 
			}
		}
	} else if(typeof(account)=="object") {
		html[idx++] = "<td width=100%>";
		html[idx++] = AjxStringUtil.htmlEncode(account.name);
		html[idx++] = "</td>";
	} else {
		html[idx++] = "<td width=100%>";
		html[idx++] = AjxStringUtil.htmlEncode(String(account));		
		html[idx++] = "</td>";		
	}
	
	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}


ZaAccMiniListView.prototype._setNoResultsHtml = function() {
	var buffer = new AjxBuffer();
	var	div = document.createElement("div");
	
	buffer.append("<table width='100%' cellspacing='0' cellpadding='1'>",
				  "<tr><td class='NoResults'><br>&nbsp",
				  "</td></tr></table>");
	
	div.innerHTML = buffer.toString();
	this._addRow(div);
};

ZaAccMiniListView.prototype._sortColumn = function (columnItem, bSortAsc){
	if(this.parent.parent.searchAccounts) {
		this.parent.parent.searchAccounts(columnItem.getSortField(),bSortAsc);
	}
};
}
if (AjxPackage.define("zimbraAdmin.dl.view.ZaDLXFormView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaDLXFormView
* @contructor
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaDLXFormView = function(parent, entry) {
	ZaTabView.call(this, parent, "ZaDLXFormView");
	this.dlStatusChoices = [
		{value:"enabled", label:ZaMsg.DL_Status_enabled}, 
		{value:"disabled", label:ZaMsg.DL_Status_disabled}
	];
	this.TAB_INDEX = 0;
	this.initForm(ZaDistributionList.myXModel,this.getMyXForm(entry));
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_CHANGED, new AjxListener(this, ZaDLXFormView.prototype.handleXFormChange));
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, new AjxListener(this, ZaDLXFormView.prototype.handleXFormChange));	
}

ZaDLXFormView.prototype = new ZaTabView();
ZaDLXFormView.prototype.constructor = ZaDLXFormView;
ZaTabView.XFormModifiers["ZaDLXFormView"] = new Array();
ZaTabView.ObjectModifiers["ZaDLXFormView"] = [] ;

ZaDLXFormView.prototype.getTitle = 
function () {
	return ZaMsg.DL_view_title;
}

ZaDLXFormView.prototype.getTabIcon =
function () {
	if (this._containedObject && this._containedObject.attrs && this._containedObject.attrs[ZaDistributionList.A_isAdminGroup]=="TRUE" ) {
		return "DistributionListGroup";
	} else {
		return "DistributionList" ;
	}

}

ZaDLXFormView.prototype.handleXFormChange = function (ev) {
	if(ev && this._localXForm.hasErrors()) { 
        ZaZimbraAdmin.getInstance().getCurrentAppBar().enableButton(ZaOperation.SAVE, false);

	} else {
        ZaZimbraAdmin.getInstance().getCurrentAppBar().enableButton(ZaOperation.SAVE, true);
	}
}

ZaDLXFormView.membersSelectionListener =    
function (ev) {
	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		arr.sort();
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_membersSelected, arr);
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_membersSelected, null);
	}

    if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		ZaDLXFormView.removeSelectedMembers.call(this, ev);
	}
}

ZaDLXFormView.nonmemberSelectionListener =    
function (ev) {
	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		arr.sort();
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_nonmembersSelected, arr);
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_nonmembersSelected, null);
	}

    if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		ZaAccountMemberOfListView._addSelectedLists(this.getForm(), arr);
	}
}

ZaDLXFormView.memberPoolSelectionListener =    
function (ev) {
	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		arr.sort();
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_memberPoolSelected, arr);
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_memberPoolSelected, null);
	}

    if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		ZaDLXFormView.addSelectedAddressesToMembers.call(this, ev);
	}
}

ZaDLXFormView.directMemberSelectionListener =    
function (ev) {
	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		arr.sort();
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_directMemberSelected, arr);
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_directMemberSelected, null);
	}

    if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		ZaAccountMemberOfListView._removeSelectedLists(this.getForm(), arr);
	}
}

ZaDLXFormView.indirectMemberSelectionListener =    
function (ev) {
	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		arr.sort();
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_indirectMemberSelected, arr);
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_indirectMemberSelected, null);
	}
}


ZaDLXFormView.removeMemberListFromPage = function ( form, memberListToRemove, pageNum ) {
	if ( !form || AjxUtil.isEmpty(memberListToRemove) ) {
		return null;
	}

	var memberHashToRemove = {};
	var i;
	for ( i = 0; i < memberListToRemove.length; i++ ) {
		var toRemove = memberListToRemove[i];
		var name = toRemove[ZaAccount.A_name];
		if ( name ) {
			memberHashToRemove[name] = toRemove;
		}
	}

	if ( !pageNum ){
		pageNum = ( form.getInstanceValue(ZaDistributionList.A2_memPagenum) || 1 );
	}

	var allMemberPages = form.getInstanceValue(ZaDistributionList.A2_allMemberPages) || [];
	if ( allMemberPages == null ) {
		return null;
	}

	--pageNum; //pageNum begins from 0, while A2_memPagenum begins from 1
	if ( allMemberPages[pageNum] == null ) {
		allMemberPages[pageNum] = [];
	}

	var allMembers = form.getInstanceValue(ZaDistributionList.A2_allMemberHash) || {};
	var oriPage = allMemberPages[pageNum];

	//remove the memberListToRemove in members list
	var newPage = [];
	for( i = 0; i < oriPage.length; i++ ){
		var toRemove = oriPage[i];
		var name = toRemove[ZaAccount.A_name];
		if ( memberHashToRemove[name] == null ) { //no found it in remove map
			newPage.push(toRemove);
		} else {
			allMembers[name] = null; //remove it in all members
		}
	}

	allMemberPages[pageNum] = newPage;
	form.setInstanceValue(allMemberPages, ZaDistributionList.A2_allMemberPages);
	form.setInstanceValue(allMembers, ZaDistributionList.A2_allMemberHash);
	return newPage;
}

ZaDLXFormView.removeMembers = function( form, memberListToRemove ) {
	var oriAddList = form.getInstanceValue(ZaDistributionList.A2_addList) || [];
	oriAddList = oriAddList.sort( ZaDistributionList.compareTwoMembers );
	memberListToRemove = memberListToRemove.sort( ZaDistributionList.compareTwoMembers );

	var newRemoveList = [];
	var i = 0, j = 0;
	var newAddList = [];
	//rule out the common members shared with oriAddList and memberListToRemove
	while( i < oriAddList.length && j < memberListToRemove.length ) {
		var toAdd = oriAddList[i];
		var toRemove = memberListToRemove[j];
		var name = toRemove[ZaAccount.A_name];
		var cmp = ZaDistributionList.compareTwoMembers(toAdd, toRemove);
		if ( cmp > 0 ) { // oriAddList[i] > memberListToRemove[j]
			newRemoveList.push( toRemove );
			j++;
		} else if ( cmp < 0 ) {  // oriAddList[i] < memberListToRemove[j]
			newAddList.push( toAdd );
			i++;
		} else { // == 0
			i++;  j++;
		}
	}

	for ( ; i < oriAddList.length; i++ ) {
		newAddList.push( oriAddList[i] );
	}

	if ( newAddList.length < oriAddList.length ) {
		newAddList._version = (oriAddList._version || 0)+ 1;
		//sth has been added then be removed, so it is shared with original oriAddList and memberListToRemove
		form.setInstanceValue( newAddList, ZaDistributionList.A2_addList );
	}

	for ( ; j < memberListToRemove.length; j++ ) {
		newRemoveList.push( memberListToRemove[j] );
	}

	var oriRemoveList = form.getInstanceValue(ZaDistributionList.A2_removeList);
	for( j = 0; j < oriRemoveList.length; j++ ){
		newRemoveList.push(oriRemoveList[j]);
	}
	newRemoveList._version = (oriRemoveList._version || 0)+ 1;
	form.setInstanceValue( newRemoveList, ZaDistributionList.A2_removeList );

	var oriPageMembers = form.getInstanceValue(ZaDistributionList.A2_memberList);
	var newPageMembers = ZaDLXFormView.removeMemberListFromPage(form, memberListToRemove) || [];
	newPageMembers._version = (oriPageMembers._version || 0) + 1;
	form.setInstanceValue( newPageMembers, ZaDistributionList.A2_memberList );

	var numMembers = form.getInstanceValue(ZaDistributionList.A2_numMembers) || 0;
	numMembers -= memberListToRemove.length;
	form.setInstanceValue( numMembers, ZaDistributionList.A2_numMembers )

	form.parent.setDirty(true);
}

//make the common elements of addList and removeList
ZaDLXFormView.removeSelectedMembers = function( event ) {
	var form = this.getForm();
	var selected = form.getInstanceValue(ZaDistributionList.A2_membersSelected);
	ZaDLXFormView.removeMembers(form, selected);
}

ZaDLXFormView.removeOnePageMembers = function(event) {
	var form = this.getForm();
	var curPageMembers = form.getInstanceValue(ZaDistributionList.A2_memberList);
	ZaDLXFormView.removeMembers(form, curPageMembers);
}


/**
* method of an XFormItem
**/
ZaDLXFormView.srchButtonHndlr = 
function(evt) {
	this.setInstanceValue([], ZaDistributionList.A2_memberPool);
	this.setInstanceValue(1, ZaDistributionList.A2_poolPagenum);
	this.setInstanceValue(1, ZaDistributionList.A2_poolNumPages);
	this.setInstanceValue(-1, ZaDistributionList.A2_totalNumInPool);
	this.setInstanceValue(null, ZaDistributionList.A2_memberPoolSelected);

	var fieldObj = this.getForm().parent;
	ZaDLXFormView.prototype.searchAccounts.call(fieldObj, null, true);
}

/**
* method of an XFormItem
**/
ZaDLXFormView.fwdPoolButtonHndlr = 
function(evt) {
	var fieldObj = this.getForm().parent;
	var currentPageNum = this.getInstanceValue(ZaDistributionList.A2_poolPagenum);
	this.setInstanceValue(currentPageNum+1, ZaDistributionList.A2_poolPagenum);
	ZaDLXFormView.prototype.searchAccounts.call(fieldObj, null, true);
}

/**
* method of an XFormItem
**/
ZaDLXFormView.backPoolButtonHndlr = 
function(evt) {
	var fieldObj = this.getForm().parent;
	var currentPageNum = this.getInstanceValue(ZaDistributionList.A2_poolPagenum)-1;
	this.setInstanceValue(currentPageNum, ZaDistributionList.A2_poolPagenum);
	ZaDLXFormView.prototype.searchAccounts.call(fieldObj, null, true);
}

/**
* method of an XFormItem
**/
ZaDLXFormView.fwdMemButtonHndlr = 
function(evt) {
	var currentPageNum = this.getInstanceValue(ZaDistributionList.A2_memPagenum)+1;
	this.setInstanceValue(currentPageNum,ZaDistributionList.A2_memPagenum);
	var currentObj = ZaApp.getInstance().getCurrentController()._currentObject ;

	if ( currentObj && currentObj[ZaDistributionList.A2_allMemberPages] ) {
		currentObj[ZaDistributionList.A2_memPagenum] = currentPageNum ;

		//ZaDistributionList.A2_allMemberPages begins from 0, but currentPageNum begins from 1
		var memberList = currentObj[ZaDistributionList.A2_allMemberPages][currentPageNum-1] || [];
		this.setInstanceValue(memberList, ZaDistributionList.A2_memberList);
	}
}

/**                                                                 
* method of an XFormItem
**/
ZaDLXFormView.backMemButtonHndlr = 
function(evt) {
	var currentPageNum = this.getInstanceValue(ZaDistributionList.A2_memPagenum)-1;
	this.setInstanceValue(currentPageNum,ZaDistributionList.A2_memPagenum);
	var currentObj = ZaApp.getInstance().getCurrentController()._currentObject ;

	if ( currentObj && currentObj[ZaDistributionList.A2_allMemberPages] ) {
		currentObj[ZaDistributionList.A2_memPagenum] = currentPageNum ;

		//ZaDistributionList.A2_allMemberPages begins from 0, but currentPageNum begins from 1
		var memberList = currentObj[ZaDistributionList.A2_allMemberPages][currentPageNum-1] || [];
		this.setInstanceValue(memberList, ZaDistributionList.A2_memberList);
	}
}
/**
* method of the XForm
**/
ZaDLXFormView.getMemberSelection = 
function () {
	var memberItem = this.getItemsById(ZaDistributionList.A2_members )[0];
	var membersSelection = null;
	if(memberItem) {
		var membersSelection = memberItem.getSelection();
	}	
		
	if(membersSelection) {
		return membersSelection;
	} else {
		return [];
	}	
}
/**
* method of the XForm
**/
ZaDLXFormView.shouldEnableMemberListButtons = function() {
	return (ZaDLXFormView.getMemberSelection.call(this).length>0);
};

/**                                                                  
* method of the XForm
**/
ZaDLXFormView.shouldEnableRemoveThisPageButton = function() {
	return (!AjxUtil.isEmpty(this.getInstanceValue(ZaDistributionList.A2_memberList)));
};

/**
* method of the XForm
**/
ZaDLXFormView.shouldEnableAddAllButton = function() {
	var list = this.getItemsById(ZaDistributionList.A2_memberPool)[0].widget.getList();
	if (list != null) {
		return ( list.size() > 0);
	}
	return false;
};

/**
* method of the XForm
**/
ZaDLXFormView.getMemberPoolSelection = 
function () {
	var memberItem = this.getItemsById(ZaDistributionList.A2_memberPool)[0];
	var membersSelection = null;
	if(memberItem) {
		var membersSelection = memberItem.getSelection();
	}	
		
	if(membersSelection) {
		return membersSelection;
	} else {
		return [];
	}	
}

/**
* method of the XForm
**/
ZaDLXFormView.shouldEnableMemberPoolListButtons = function() {
	return (ZaDLXFormView.getMemberPoolSelection.call(this).length>0);
};

/**
* method of the XForm
**/
ZaDLXFormView.shouldEnableFreeFormButtons = function () {
	var optionalAdd = this.getInstance().optionalAdd;
	return (optionalAdd && optionalAdd.length > 0);
};

/**
* method of the XForm
**/
ZaDLXFormView.shouldEnablePoolForwardButton = function () {
	return (this.getInstanceValue(ZaDistributionList.A2_poolPagenum) < this.getInstanceValue(ZaDistributionList.A2_poolNumPages));
};

/**
* method of the XForm
**/
ZaDLXFormView.shouldEnablePoolBackButton = function () {
	return (this.getInstanceValue(ZaDistributionList.A2_poolPagenum) > 1);
};

/**
* method of the XForm
**/
ZaDLXFormView.shouldEnableMemForwardButton = function () {
	return (this.getInstanceValue(ZaDistributionList.A2_memPagenum) < this.getInstanceValue(ZaDistributionList.A2_memNumPages));
};

/**
* method of the XForm
**/
ZaDLXFormView.shouldEnableMemBackButton = function () {
	return (this.getInstanceValue(ZaDistributionList.A2_memPagenum) > 1);
};

ZaDLXFormView.addMemberListToPage = function ( form, memberListToAdd, pageNum ) {
	if ( !form || AjxUtil.isEmpty(memberListToAdd) ) {
		return null;
	}

	if ( !pageNum ){
		pageNum = ( form.getInstanceValue(ZaDistributionList.A2_memPagenum) || 1 );
	}

	var allMemberPages = form.getInstanceValue(ZaDistributionList.A2_allMemberPages) || [];
	if ( allMemberPages == null ) {
		return null;
	}

	--pageNum; //pageNum begins from 0, while A2_memPagenum begins from 1
	if ( allMemberPages[pageNum] == null ) {
		allMemberPages[pageNum] = [];
	}

	var allMembers = form.getInstanceValue(ZaDistributionList.A2_allMemberHash) || {};

	var page = allMemberPages[pageNum];
	for ( var i = 0; i < memberListToAdd.length; i++ ) {
		var member = memberListToAdd[i];
		if ( !member || !member[ZaAccount.A_name] ) {
			continue;
		}
		var name = member[ZaAccount.A_name];
		if ( name && allMembers[name] == null ) { // has not been added
			page.push(member);
			allMembers[name] = member;
		} 
	}


	form.setInstanceValue(allMemberPages, ZaDistributionList.A2_allMemberPages);
	form.setInstanceValue(allMembers, ZaDistributionList.A2_allMemberHash);
	return page;
}

ZaDLXFormView.excludeAddressesInAllMembers = function ( form, addressList ) {
	if ( !form || AjxUtil.isEmpty(addressList) ) {
		return null;
	}

	var nonMembers = [];
	var members = [];

	var allMembers = form.getInstanceValue(ZaDistributionList.A2_allMemberHash) || {};
	for ( var i = 0; i < addressList.length; i++ ) {
		var member = addressList[i];
		if ( !member || !member[ZaAccount.A_name] ) {
			continue;
		}
		var name = member[ZaAccount.A_name];
		if ( name && allMembers[name] == null ) {
			nonMembers.push(member);
		} else {  //already been added
			members.push(name);
		}
	}

	return [members, nonMembers];
}



/**
 * method of an XFormItem
 * Currently, this manages the data, redraws the whole list, and then sets 
 * the selection. 
 */
ZaDLXFormView.addAddressesToMembers = function (form, newAddresses) {
	var list = ZaDLXFormView.excludeAddressesInAllMembers(form, newAddresses);
	var existedMembers = list[0], memberListToAdd = list[1];
	if (existedMembers.length > 0) { 
		var existed = existedMembers.join("<br>");
		var msg = AjxMessageFormat.format( ZaMsg.DLXV_MsgMemberExisted, [existed]);
		if (memberListToAdd.length > 0) {
			var add = memberListToAdd.join("<br>");
			msg += ("<br><br>");
			msg += AjxMessageFormat.format( ZaMsg.DLXV_MsgMemberCanBeAdded, [add] );
		}

		ZaApp.getInstance().getCurrentController().popupMsgDialog(msg);
	}
	if ( memberListToAdd.length <= 0 ) {
		return;
	}

	var oriPageMembers = form.getInstanceValue(ZaDistributionList.A2_memberList);
	var newPageMembers = ZaDLXFormView.addMemberListToPage(form, memberListToAdd );
	if ( !newPageMembers || !newPageMembers.length ) {
		return;
	}
	newPageMembers._version = (oriPageMembers._version || 0)+ 1;
	form.setInstanceValue(newPageMembers, ZaDistributionList.A2_memberList);

	//filter out the common members shared by oriRemoveList and memberListToAdd
	var oriRemoveList = form.getInstanceValue(ZaDistributionList.A2_removeList) || [];
	oriRemoveList = oriRemoveList.sort( ZaDistributionList.compareTwoMembers );
	memberListToAdd = memberListToAdd.sort( ZaDistributionList.compareTwoMembers );

	var newAddList = [], newRemoveList = [];
	var i = 0, j = 0;
	//rule out the common members shared with oriRemoveList and memberListToAdd
	while( i < oriRemoveList.length && j < memberListToAdd.length ) {
		var toRemove = oriRemoveList[i];
		var toAdd = memberListToAdd[j];
		var name = toAdd[ZaAccount.A_name];
		var cmp = ZaDistributionList.compareTwoMembers(toRemove, toAdd);
		if ( cmp > 0 ) { // oriRemoveList[i] > memberListToAdd[j]
			newAddList.push( toAdd );
			j++;
		} else if ( cmp < 0 ) {  // oriRemoveList[i] < memberListToAdd[j]
			newRemoveList.push( toRemove );
			i++;
		} else { // == 0
			i++;  j++;
		}
	}

	// add the rest 'to remove members'
	for ( ; i < oriRemoveList.length; i++ ) {
		newRemoveList.push( oriRemoveList[i] );
	}

	if ( newRemoveList.length < oriRemoveList.length ) {
		newRemoveList._version = (oriRemoveList._version || 0)+ 1;
		//sth has been removed then be add, so it is shared with original oriRemoveList and memberListToAdd
		form.setInstanceValue( newRemoveList, ZaDistributionList.A2_removeList );
	}

	// add the rest 'to add members'
	for ( ; j < memberListToAdd.length; j++ ) {
		newAddList.push( memberListToAdd[j] );
	}

	var oriAddList = form.getInstanceValue(ZaDistributionList.A2_addList) || [];
	for( j = 0; j < oriAddList.length; j++ ){
		newAddList.push(oriAddList[j]);
	}
	newAddList._version = (oriAddList._version || 0) + 1;
	form.setInstanceValue(newAddList, ZaDistributionList.A2_addList);
	//finally the newAddList should not include the common shared by oriRemoveList and the original members from the last saving


	var numMembers = form.getInstanceValue(ZaDistributionList.A2_numMembers) || 0;
	numMembers += (memberListToAdd.length);
	form.setInstanceValue(numMembers, ZaDistributionList.A2_numMembers);

	form.parent.setDirty(true);
};

/**
 * method of an XFormItem
**/
ZaDLXFormView.addSelectedAddressesToMembers = function (event) {
	var form = this.getForm();
	var selectedAddresses = form.getInstanceValue(ZaDistributionList.A2_memberPoolSelected);
	if(AjxUtil.isEmpty(selectedAddresses)) {
		return;
	}
	ZaDLXFormView.addAddressesToMembers(form, selectedAddresses);
};


/**
 * method of an XFormItem
**/
ZaDLXFormView.addOnePageAddressesToMembers = function (event) {
	var form = this.getForm();
	var onePageAddresses = form.getInstanceValue(ZaDistributionList.A2_memberPool);	//has been removed self and self member
	if(AjxUtil.isEmpty(onePageAddresses)) {
		return;
	}
	ZaDLXFormView.addAddressesToMembers(form, onePageAddresses);
};


/**
 * method of an XFormItem
**/
ZaDLXFormView.addFreeFormAddressToMembers = function (event) {
	var form = this.getForm();
	// get the current value of the textfied
	var freeFormAddresses = form.getInstanceValue(ZaDistributionList.A2_optionalAdd);
	if(AjxUtil.isEmpty(freeFormAddresses)) {
		return;
	}

	var freeFormAddresses = freeFormAddresses.split(/[\r\n,;]+/);
	var goodAddresses = [];
	var stdEmailRegEx = /([^\<\;]*)\<([^\>]+)\>/ ;
	for (var i = 0; i < freeFormAddresses.length; i++) {
		var address = AjxStringUtil.trim(freeFormAddresses[i],true);
		if (address) {
			var result = stdEmailRegEx.exec(address);
			if (result != null) {
				address = result[2];
			}
			if(!AjxEmailAddress.isValid(address)) {
				//handle invalid email address
				var msg = AjxMessageFormat.format(ZaMsg.WARNING_DL_INVALID_EMAIL, [address]);
				ZaApp.getInstance().getCurrentController().popupErrorDialog(msg,null,DwtMessageDialog.WARNING_STYLE);
				return;
			}
			goodAddresses.push(new ZaDistributionListMember(address));
		}
	}

	ZaDLXFormView.addAddressesToMembers(form, goodAddresses);
	this.setInstanceValue("", ZaDistributionList.A2_optionalAdd);
};

ZaDLXFormView._copyAttrFromEntry =
function ( xform, containedObject, entry ) {
	if ( !xform || !containedObject || !entry) {
		return;
	}
	for (var a in entry.attrs) {
		var modelItem = xform.getModel().getItem(a) ;
		var attr = entry.attrs[a];
		if ((modelItem != null && modelItem.type == _LIST_)
		   || ( attr != null && attr instanceof Array))
		{  //need deep clone
			containedObject.attrs[a] = ZaItem.deepCloneListItem (attr);
		} else {
			containedObject.attrs[a] = attr;
		}
	}

	if(entry.setAttrs) {
		containedObject.setAttrs = entry.setAttrs;
	}

	if(entry.getAttrs) {
		containedObject.getAttrs = entry.getAttrs;
	}

	if(entry.rights) {
		containedObject.rights = entry.rights;
	}

	if(entry._defaultValues) {
		containedObject._defaultValues = entry._defaultValues;
	}

}


ZaDLXFormView.prototype.setObject = 
function (entry) {
    this._containedObject = new ZaDistributionList();
    this._containedObject.attrs = new Object();

    ZaDLXFormView._copyAttrFromEntry( this._localXForm, this._containedObject, entry );

    //Utility members
	this._containedObject[ZaDistributionList.A2_addList] = entry [ZaDistributionList.A2_addList] || []; //members to add
	this._containedObject[ZaDistributionList.A2_addList]._version = 1;
	this._containedObject[ZaDistributionList.A2_removeList] = entry [ZaDistributionList.A2_removeList] || [];  //members to remove
	this._containedObject[ZaDistributionList.A2_removeList]._version = 1;

	this._containedObject[ZaDistributionList.A2_memberList] = entry [ZaDistributionList.A2_memberList] || [];
	this._containedObject[ZaDistributionList.A2_memberList]._version = 1;
	this._containedObject[ZaDistributionList.A2_numMembers] = entry [ZaDistributionList.A2_numMembers] || 0 ;
	this._containedObject[ZaDistributionList.A2_allMemberHash] = entry [ZaDistributionList.A2_allMemberHash] || {};
	this._containedObject[ZaDistributionList.A2_allMemberPages] = entry [ZaDistributionList.A2_allMemberPages] || [];

	this._containedObject[ZaDistributionList.A2_memberPool] = entry [ZaDistributionList.A2_memberPool] || [];
	this._containedObject[ZaDistributionList.A2_memberPool]._version = 1;
	this._containedObject[ZaDistributionList.A2_poolPagenum] = this._containedObject[ZaDistributionList.A2_poolPagenum] || 1;
	this._containedObject[ZaDistributionList.A2_poolNumPages] = entry [ZaDistributionList.A2_poolNumPages] || 1;
	this._containedObject[ZaDistributionList.A2_totalNumInPool] = entry [ZaDistributionList.A2_totalNumInPool] || -1; //-1 means hasn't start searching yet 

	this._containedObject[ZaDistributionList.A2_query] = "";

	this._containedObject.name = entry.name;
        if(entry.name == ""){this._containedObject.name = ZaMsg.TBB_New;}
	this._containedObject.type = entry.type;
	this._containedObject.id = entry.id;

	if(!entry[ZaModel.currentTab])
		this._containedObject[ZaModel.currentTab] = "1";
	else
		this._containedObject[ZaModel.currentTab] = entry[ZaModel.currentTab];

	if(!entry.id) {
		if(ZaItem.hasWritePermission(ZaAccount.A_zimbraIsDelegatedAdminAccount,entry)) {
			this._containedObject.attrs[ZaDistributionList.A_mailStatus] = "enabled";
		}
	}
        this.modifyContainedObject () ;
	this._localXForm.setInstance(this._containedObject);	

}

ZaDLXFormView.prototype.srchResWithoutSelf =
function(resList, selfName) {
	var resArr = new Array();
	var tmpArr = resList.getArray();
	for(var i = 0; i < tmpArr.length; i++) {
		if(tmpArr[i].type == ZaItem.DL && tmpArr[i] == selfName) {
			continue;
		}else if(tmpArr[i].type == ZaItem.ALIAS && tmpArr[i].getAliasTargetObj() == selfName) {
			continue;
		}else resArr.push(tmpArr[i]);
	}
	return resArr;
}

ZaDLXFormView.prototype.searchAccounts = 
function (orderBy, isAscending) {
    var limit = ZaDistributionList.MEMBER_POOL_PAGE_SIZE;
    var startPageNum = this._containedObject[ZaDistributionList.A2_poolPagenum];
    var result = ZaDLXFormView.getMatchedAccounts.call( this, orderBy, isAscending, startPageNum, limit );

    this._containedObject[ZaDistributionList.A2_memberPool] = result.list;
    this._containedObject[ZaDistributionList.A2_poolNumPages] = result.numPages;
    this._containedObject[ZaDistributionList.A2_totalNumInPool] = result.searchTotal || 0;
    this._localXForm.setInstance(this._containedObject);
}

ZaDLXFormView.prototype.getAllMatchedAccounts =
function () {
    var limit = 0; //0 means unlimited
    var startPageNum = 1; //from the beginning
    var result = ZaDLXFormView.getMatchedAccounts.call(this, ZaAccount.A_name, true, startPageNum, limit );

    return result.list;
}

ZaDLXFormView.getMatchedAccounts = 
function( orderBy, isAscending, startPageNum, limit ) {
    orderBy = (orderBy !=null) ? orderBy : ZaAccount.A_name;
    isAscending = !!isAscending;
    limit = (limit >= 0) ? limit : ZaDistributionList.MEMBER_POOL_PAGE_SIZE;
    startPageNum = (startPageNum >= 0) ? startPageNum : this._containedObject[ZaDistributionList.A2_poolPagenum];

    var result = {};
    try {
        var types = [ZaSearch.ACCOUNTS, ZaSearch.DLS, ZaSearch.ALIASES];
        var queryString = ZaSearch.getSearchByNameQuery(this._containedObject[ZaDistributionList.A2_query], types, true);
        var myName = this._containedObject[ZaAccount.A_name];
        queryString = ZaDLXFormView.makeQueryStringWithoutSelf(queryString, myName);
         //remove dl or alias point to self, and self members
        var searchQueryHolder = new ZaSearchQuery(queryString, types , false, "", null, limit);
        result = ZaSearch.searchByQueryHolder(searchQueryHolder, startPageNum, orderBy, isAscending);

        if(result.list) {
            result.list = result.list.getArray();
            //make it as a list rather than ZaItemList
        } else {
            result.list = [];
            result.numPages = 0;
            result.searchTotal = 0;
        }

    } catch (ex) {
        // Only restart on error if we are not initialized and it isn't a parse error
        if (ex.code != ZmCsfeException.MAIL_QUERY_PARSE_ERROR) {
//			ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDLXFormView.prototype.searchAccounts", null, (this._inited) ? false : true);
            ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaDLXFormView.prototype.searchAccounts", null, false );
        } else {
            this.popupErrorDialog(ZaMsg.queryParseError, ex);
            this._searchField.setEnabled(true);    
        }
    }
    return result;
}

ZaDLXFormView._makeAddressExcluded =
function ( address ) {
	if ( AjxUtil.isEmpty(address) ) {
		return "";
	}

	return (	"(!(mail=" + address + "))" +
		"(!(zimbraMailAddress=" + address + "))" +
		"(!(zimbraMailDeliveryAddress=" + address + "))" +
		"(!(zimbraMailForwardingAddress=" + address + "))" +
		"(!(zimbraMemberOf=" + address + "))"
	);
}

ZaDLXFormView.makeQueryStringWithoutSelf =
function (rawQueryString, myName) {
	if (rawQueryString == null) {
		rawQueryString = "";
	}

	if (!myName || !myName.length) {
		return rawQueryString;
	}

	var excludingQueryString = ZaDLXFormView._makeAddressExcluded(myName);
	//originally we want to not only exclude its name but also its members, but we find when we send the query
	//without its mebers, the server side becomes very slow when it has many members (>500), so keep it as this

	excludingQueryString = excludingQueryString ?
		"(&" + rawQueryString + "(&" + excludingQueryString + "))" :
		rawQueryString;

	return excludingQueryString;
}

ZaDLXFormView.aliasSelectionListener = 
function (ev) {
	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		arr.sort();
		//the selection values are HTML encoded, need to decode them before saving to cache.
		arr = AjxUtil.htmlDecode(arr);
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_alias_selection_cache, arr);
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_alias_selection_cache, null);
	}		
	if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		ZaDLXFormView.editAliasButtonListener.call(this);
	}	
}

ZaDLXFormView.deleteAliasButtonListener = function () {
	var instance = this.getInstance();
	if(instance[ZaDistributionList.A2_alias_selection_cache] != null) {
		var cnt = instance[ZaDistributionList.A2_alias_selection_cache].length;
		if(cnt && instance.attrs[ZaAccount.A_zimbraMailAlias]) {
			var aliasArr = instance.attrs[ZaAccount.A_zimbraMailAlias];
			for(var i=0;i<cnt;i++) {
				var cnt2 = aliasArr.length-1;				
				for(var k=cnt2;k>=0;k--) {
					if(aliasArr[k]==instance[ZaDistributionList.A2_alias_selection_cache][i]) {
						aliasArr.splice(k,1);
						break;	
					}
				}
			}
			this.getModel().setInstanceValue(instance, ZaAccount.A_zimbraMailAlias, aliasArr);	
		}
	}
	this.getModel().setInstanceValue(instance, ZaDistributionList.A2_alias_selection_cache, []);
	this.getForm().parent.setDirty(true);
}

ZaDLXFormView.editAliasButtonListener =
function () {
	var instance = this.getInstance();
	if(instance.alias_selection_cache && instance.alias_selection_cache[0]) {	
		var formPage = this.getForm().parent;
		if(!formPage.editAliasDlg) {
			formPage.editAliasDlg = new ZaEditAliasXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "550px", "150px",ZaMsg.Edit_Alias_Title);
			formPage.editAliasDlg.registerCallback(DwtDialog.OK_BUTTON, ZaDLXFormView.updateAlias, this.getForm(), null);						
		}
		var obj = {};
		obj[ZaAccount.A_name] = instance[ZaDistributionList.A2_alias_selection_cache][0];
		var cnt = instance.attrs[ZaAccount.A_zimbraMailAlias].length;
		for(var i=0;i<cnt;i++) {
			if(instance[ZaDistributionList.A2_alias_selection_cache][0]==instance.attrs[ZaAccount.A_zimbraMailAlias][i]) {
				obj[ZaAlias.A_index] = i;
				break;		
			}
		}
		
		formPage.editAliasDlg.setObject(obj);
		formPage.editAliasDlg.popup();		
	}
}

ZaDLXFormView.updateAlias = function () {
	if(this.parent.editAliasDlg) {
		this.parent.editAliasDlg.popdown();
		var obj = this.parent.editAliasDlg.getObject();
		var instance = this.getInstance();
		var arr = instance.attrs[ZaAccount.A_zimbraMailAlias];
		if(obj[ZaAlias.A_index] >=0 && arr[obj[ZaAlias.A_index]] != obj[ZaAccount.A_name] ) {			
			arr[obj[ZaAlias.A_index]] = obj[ZaAccount.A_name];
			this.getModel().setInstanceValue(this.getInstance(),ZaAccount.A_zimbraMailAlias, arr); 
			this.getModel().setInstanceValue(this.getInstance(),ZaDistributionList.A2_alias_selection_cache, new Array());
			this.parent.setDirty(true);	
		}
	}
}

ZaDLXFormView.addAliasButtonListener =
function () {
	var instance = this.getInstance();
	var formPage = this.getForm().parent;
	if(!formPage.addAliasDlg) {
		formPage.addAliasDlg = new ZaEditAliasXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "550px", "150px",ZaMsg.Add_Alias_Title);
		formPage.addAliasDlg.registerCallback(DwtDialog.OK_BUTTON, ZaDLXFormView.addAlias, this.getForm(), null);						
	}
	
	var obj = {};
	obj[ZaAccount.A_name] = "";
	obj[ZaAlias.A_index] = - 1;
	formPage.addAliasDlg.setObject(obj);
	formPage.addAliasDlg.popup();		
}

ZaDLXFormView.addAlias  = function () {
	if(this.parent.addAliasDlg) {
		this.parent.addAliasDlg.popdown();
		var obj = this.parent.addAliasDlg.getObject();
		if(obj[ZaAccount.A_name] && obj[ZaAccount.A_name].length>1) {
			var instance = this.getInstance();
			var arr = instance.attrs[ZaAccount.A_zimbraMailAlias]; 
			arr.push(obj[ZaAccount.A_name]);
			this.getModel().setInstanceValue(this.getInstance(),ZaAccount.A_zimbraMailAlias, arr);
			this.getModel().setInstanceValue(this.getInstance(),ZaDistributionList.A2_alias_selection_cache, new Array());
			this.parent.setDirty(true);
		}
	}
}

ZaDLXFormView.isEditAliasEnabled = function () {
	return (!AjxUtil.isEmpty(this.getInstanceValue(ZaDistributionList.A2_alias_selection_cache)) && this.getInstanceValue(ZaAccount.A2_alias_selection_cache).length==1);
}

ZaDLXFormView.isDeleteAliasEnabled = function () {
	return (!AjxUtil.isEmpty(this.getInstanceValue(ZaDistributionList.A2_alias_selection_cache)));
}


ZaDLXFormView.ownerSelectionListener =
function (ev) {
	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		arr.sort();
		// When getting data from view make sure to html decode it
		arr = AjxUtil.htmlDecode(arr);
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_owners_selection_cache, arr);
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_owners_selection_cache, null);
	}
	if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		ZaDLXFormView.editOwnerButtonListener.call(this);
	}
}

ZaDLXFormView.deleteOwnerButtonListener = function () {
	var instance = this.getInstance();
	if(instance[ZaDistributionList.A2_owners_selection_cache] != null) {
		var cnt = instance[ZaDistributionList.A2_owners_selection_cache].length;
		if(cnt && instance[ZaDistributionList.A2_DLOwners]) {
			var aliasArr = instance[ZaDistributionList.A2_DLOwners];
			for(var i=0;i<cnt;i++) {
				var cnt2 = aliasArr.length-1;
				for(var k=cnt2;k>=0;k--) {
					if(aliasArr[k]==instance[ZaDistributionList.A2_owners_selection_cache][i]) {
						aliasArr.splice(k,1);
						break;
					}
				}
			}
			this.getModel().setInstanceValue(instance, ZaDistributionList.A2_DLOwners, aliasArr);
		}
	}
	this.getModel().setInstanceValue(instance, ZaDistributionList.A2_owners_selection_cache, []);
	this.getForm().parent.setDirty(true);
}

ZaDLXFormView.editOwnerButtonListener =
function () {
	var instance = this.getInstance();
	if(instance[ZaDistributionList.A2_owners_selection_cache] && instance[ZaDistributionList.A2_owners_selection_cache][0]) {
		var formPage = this.getForm().parent;
		if(!formPage.editOwnerDlg) {
			formPage.editOwnerDlg = new ZaEditAliasXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "450px", "150px", ZaMsg.Edit_Owner_Title);
			formPage.editOwnerDlg.registerCallback(DwtDialog.OK_BUTTON, ZaDLXFormView.updateOwner, this.getForm(), null);
		}
		var obj = {};
		obj[ZaAccount.A_name] = instance[ZaDistributionList.A2_owners_selection_cache][0];
		var cnt = instance[ZaDistributionList.A2_DLOwners].length;
		for(var i=0;i<cnt;i++) {
			if(instance[ZaDistributionList.A2_owners_selection_cache][0]==instance[ZaDistributionList.A2_DLOwners][i]) {
				obj[ZaAlias.A_index] = i;
				break;
			}
		}

		formPage.editOwnerDlg.setObject(obj);
		formPage.editOwnerDlg.popup();
	}
}

ZaDLXFormView.updateOwner = function () {
	if(this.parent.editOwnerDlg) {
		this.parent.editOwnerDlg.popdown();
		var obj = this.parent.editOwnerDlg.getObject();
		var instance = this.getInstance();
		var arr = instance[ZaDistributionList.A2_DLOwners];
		if(obj[ZaAlias.A_index] >=0 && arr[obj[ZaAlias.A_index]] != obj[ZaAccount.A_name] ) {
            if(!ZaDLXFormView.checkOwner(obj[ZaAccount.A_name]))
                return;
			arr[obj[ZaAlias.A_index]] = obj[ZaAccount.A_name];
			this.getModel().setInstanceValue(this.getInstance(),ZaDistributionList.A2_DLOwners, arr);
			this.getModel().setInstanceValue(this.getInstance(),ZaDistributionList.A2_owners_selection_cache, new Array());
			this.parent.setDirty(true);
		}
	}
}

ZaDLXFormView.addOwnerButtonListener =
function () {
	var formPage = this.getForm().parent;
	if(!formPage.addOwnerDlg) {
		formPage.addOwnerDlg = new ZaEditAliasXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "450px", "150px", ZaMsg.Add_Owner_Title);
		formPage.addOwnerDlg.registerCallback(DwtDialog.OK_BUTTON, ZaDLXFormView.addOwner, this.getForm(), null);
	}

	var obj = {};
	obj[ZaAccount.A_name] = "";
	obj[ZaAlias.A_index] = - 1;
	formPage.addOwnerDlg.setObject(obj);
	formPage.addOwnerDlg.popup();
}

ZaDLXFormView.addOwner  = function () {
	if(this.parent.addOwnerDlg) {
		this.parent.addOwnerDlg.popdown();
		var obj = this.parent.addOwnerDlg.getObject();
		if(obj[ZaAccount.A_name] && obj[ZaAccount.A_name].length>1) {
            if(!ZaDLXFormView.checkOwner(obj[ZaAccount.A_name]))
                return;
			var instance = this.getInstance();
			var arr = instance[ZaDistributionList.A2_DLOwners];
			arr.push(obj[ZaAccount.A_name]);
			this.getModel().setInstanceValue(this.getInstance(),ZaDistributionList.A2_DLOwners, arr);
			this.getModel().setInstanceValue(this.getInstance(),ZaDistributionList.A2_owners_selection_cache, new Array());
			this.parent.setDirty(true);
		}
	}
}

ZaDLXFormView.checkOwner = function (accountName) {
    var ret = false;
    try {
        ret = ZaSearch.isAccountExist({name: accountName, popupError: false});
    } catch (ex) {

    }
    if (!ret)
        ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_NO_SUCH_ACCOUNT);

    return ret;

}

ZaDLXFormView.isEditOwnerEnabled = function () {
	return (!AjxUtil.isEmpty(this.getInstanceValue(ZaDistributionList.A2_owners_selection_cache)) && this.getInstanceValue(ZaDistributionList.A2_owners_selection_cache).length==1);
}

ZaDLXFormView.isDeleteOwnerEnabled = function () {
	return (!AjxUtil.isEmpty(this.getInstanceValue(ZaDistributionList.A2_owners_selection_cache)));
}

ZaDLXFormView.isDynamicDL = function () {
    return this.getInstanceValue(ZaDistributionList.A2_dlType) === ZaDistributionList.DYNAMIC_DL_TYPE;
}

ZaDLXFormView.isNotDynamicDL = function () {
    return !ZaDLXFormView.isDynamicDL.call(this);
}

ZaDLXFormView.isNotACLGroup = function () {
    return this.getInstanceValue(ZaDistributionList.A_zimbraIsACLGroup ) === "FALSE";
}

ZaDLXFormView.isACLGroup = function () {
    return !ZaDLXFormView.isNotACLGroup.call(this);
}

ZaDLXFormView.NOTES_TAB_ATTRS = [ZaAccount.A_notes];
ZaDLXFormView.NOTES_TAB_RIGHTS = [];

ZaDLXFormView.MEMBEROF_TAB_ATTRS = [];
ZaDLXFormView.MEMBEROF_TAB_RIGHTS = [ZaDistributionList.GET_DL_MEMBERSHIP_RIGHT];

ZaDLXFormView.ALIASES_TAB_ATTRS = [ZaAccount.A_zimbraMailAlias];
ZaDLXFormView.ALIASES_TAB_RIGHTS = [ZaDistributionList.ADD_DL_ALIAS_RIGHT,ZaDistributionList.REMOVE_DL_ALIAS_RIGHT];

ZaDLXFormView.OWNER_TAB_ATTRS = [];
ZaDLXFormView.OWNER_TAB_RIGHTS = [];

ZaDLXFormView.PREF_TAB_ATTRS = [ZaDistributionList.A_zimbraPrefReplyToEnabled, ZaDistributionList.A_zimbraPrefReplyToDisplay,
    ZaDistributionList.A_zimbraPrefReplyToAddress];
ZaDLXFormView.PREF_TAB_RIGHTS = [];

ZaDLXFormView.myXFormModifier = function(xFormObject, entry) {	
	var sourceHeaderList = new Array();
	var sortable=1;
	sourceHeaderList[0] = new ZaListHeaderItem("type", ZaMsg.ALV_Type_col, null, "34px", null, "objectClass", true, true);
	sourceHeaderList[1] = new ZaListHeaderItem(ZaAccount.A_name, ZaMsg.ALV_Name_col, null, "200px", sortable++, ZaAccount.A_name, true, true);
	//idPrefix, label, iconInfo, width, sortable, sortField, resizeable, visible
	sourceHeaderList[2] = new ZaListHeaderItem(ZaAccount.A_displayname, ZaMsg.ALV_DspName_col, null, null, sortable++,ZaAccount.A_displayname, true, true);
	//sourceHeaderList[3] = new ZaListHeaderItem(null, null, null, "10px", null, null, false, true);
	var membersHeaderList = new Array();
	membersHeaderList[0] = new ZaListHeaderItem(ZaAccount.A_name, ZaMsg.ALV_Name_col, null, "100%", sortable++, ZaAccount.A_name, true, true);

	var directMemberOfHeaderList = new ZaAccountMemberOfsourceHeaderList(ZaAccountMemberOfsourceHeaderList.DIRECT);
	var indirectMemberOfHeaderList = new ZaAccountMemberOfsourceHeaderList(ZaAccountMemberOfsourceHeaderList.INDIRECT);
	var nonMemberOfHeaderList = new ZaAccountMemberOfsourceHeaderList(ZaAccountMemberOfsourceHeaderList.NON);
    
    this.tabChoices = new Array();
    this.helpMap = {};
	var _tab1, _tab2, _tab3, _tab4, _tab5, _tab6;
	_tab1 = ++this.TAB_INDEX;
	this.tabChoices.push({value:_tab1, label:ZaMsg.DLXV_TabMembers});
	this.helpMap[_tab1] = ZaUtil.HELP_URL;
	
	if(ZaTabView.isTAB_ENABLED(entry,ZaDLXFormView.NOTES_TAB_ATTRS, ZaDLXFormView.NOTES_TAB_RIGHTS)) {
		_tab2 = ++this.TAB_INDEX;
		this.tabChoices.push({value:_tab2, label:ZaMsg.DLXV_TabProperties});
		this.helpMap[_tab2] = ZaUtil.HELP_URL;
	}

	if(ZaTabView.isTAB_ENABLED(entry,ZaDLXFormView.MEMBEROF_TAB_ATTRS, ZaDLXFormView.MEMBEROF_TAB_RIGHTS)  && (!entry.dynamic)) {
		_tab3 = ++this.TAB_INDEX;
		this.tabChoices.push({value:_tab3, label:ZaMsg.TABT_MemberOf});	
		this.helpMap[_tab3] = ZaUtil.HELP_URL;
	}

	if(ZaTabView.isTAB_ENABLED(entry,ZaDLXFormView.ALIASES_TAB_ATTRS, ZaDLXFormView.ALIASES_TAB_RIGHTS)) {
		_tab4 = ++this.TAB_INDEX;
		this.tabChoices.push({value:_tab4, label:ZaMsg.TABT_Aliases});	
		this.helpMap[_tab4] = ZaUtil.HELP_URL;
	}

    if(ZaTabView.isTAB_ENABLED(entry,ZaDLXFormView.OWNER_TAB_ATTRS, ZaDLXFormView.OWNER_TAB_RIGHTS)) {
        _tab5 = ++this.TAB_INDEX;
        this.tabChoices.push({value:_tab5, label:ZaMsg.TABT_Owners});
        this.helpMap[_tab5] = ZaUtil.HELP_URL;
    }

	if(ZaTabView.isTAB_ENABLED(entry,ZaDLXFormView.PREF_TAB_ATTRS, ZaDLXFormView.PREF_TAB_RIGHTS)) {
		_tab6 = ++this.TAB_INDEX;
		this.tabChoices.push({value:_tab6, label:ZaMsg.TABT_Preferences});
		this.helpMap[_tab6] = ZaUtil.HELP_URL;
	}

	xFormObject.tableCssStyle = "width:100%;overflow:auto;";
	xFormObject.numCols=5;
	xFormObject.colSizes = [10,"auto", 20, "auto", 10];
	xFormObject.itemDefaults = {
			_INPUT_: { cssClass:"inputBorder" },
			_TEXTAREA_: {cssClass: "inputBorder"},
			_TEXTFIELD_: {cssClass: "inputBorder", containerCssStyle:"width:100%"}
	    };
	    
	var cases = [];

	var hMsgMemberNum, hMemberList, wMemberList, hMemberPool, wMemberPool, wRightPanel;
	if (AjxEnv.isWebKitBased || AjxEnv.isFirefox ) {
		hMsgMemberNum = 30;
		hMemberList = 310;
		wMemberList = "99%";
		hMemberPool = 342;
		wMemberPool = "99%";
	} else /* if (AjxEnv.isIE || others... ) */ {
		hMsgMemberNum = 25;
		hMemberList = 308;
		wMemberList = "100%";
		hMemberPool = 338;
		wMemberPool = "100%";
	}
	wRightPanel = "100%";
	var case1 =
	{
		type : _ZATABCASE_, caseKey : _tab1, numCols : 2, id : "dl_form_members",
		colSizes : ["440px", "440px"], cssStyle : "table-layout:fixed; padding-top:5px;",
		items : [
		{
			type : _GROUP_, width : "98%", numCols : 1, items : [
			{
				type : _SPACER_, height : "5"
			}
			,
			{
				type : _GROUP_, width : "98%", id : "dl_form_members_general_group", numCols : 2, colSizes : [130, "*"], items : [
				{
					ref : ZaAccount.A_name,
					type : _EMAILADDR_,
					msgName : ZaMsg.MSG_LabelListName,
					label : ZaMsg.LBL_LabelListName,
					forceUpdate : true,
					tableCssStyle : "width:100%",
					inputWidth : "100",
					domainPartWidth : "100%",
					id : "dl_name_field",
					nameContainerCss : "width:100px",
					domainContainerWidth : "100%",
					midContainerCss : "width:20px",
					visibilityChecks : [],
					enableDisableChecks : [[XFormItem.prototype.hasRight, ZaDistributionList.RENAME_DL_RIGHT]]
				}
				,
				{
					type : _SPACER_, height : "3"
				}
				,
				{
					ref : ZaAccount.A_displayname,
					type : _TEXTFIELD_,
					label : ZaMsg.NAD_DisplayName,
					msgName : ZaMsg.NAD_DisplayName,
					align : _LEFT_,
					cssClass : "admin_xform_name_input",
					width : "100%"
				}
				,
				{
					type : _SPACER_, height : "3"
				}
				,
				{
					ref : "description",
					msgName : ZaMsg.NAD_Description,
					label : ZaMsg.NAD_Description,
					labelLocation : _LEFT_,
					align : _LEFT_,
					type : _TEXTAREA_,
					enableDisableChecks : [ZaItem.hasWritePermission] ,
					visibilityChecks : [ZaItem.hasReadPermission],
					cssClass : "admin_xform_name_input",
					width : "100%",
					height:"100"
				}
				]
			}
			,
			{
				type : _SPACER_, height : "20"
			}
			,
			{
				type : _GROUPER_,
				borderCssClass : "LeftGrouperBorder",
				width : "100%",
				numCols : 1,
				colSizes : ["auto"],
				label : ZaMsg.DLXV_LabelListMembers,
				items : [
				{
					type : _GROUP_,
					width : "100%",
					height : hMsgMemberNum, numCols : 3, colSizes : [ "*", "20px", "104px"], items : [
					{
						type : _OUTPUT_,
						ref : ZaDistributionList.A2_numMembers,
						align : _LEFT_,
						valueChangeEventSources : [ZaDistributionList.A2_numMembers, ZaDistributionList.A2_memNumPages],
						getDisplayValue : ZaDLXFormView.showMembersNum
					}
					,
					{
						type : _CELLSPACER_
					}
					,
					{
						type : _GROUP_,
						width : "100%",
						numCols : 3,
						colSizes : ["32px", "40px", "32px"],
						visibilityChangeEventSources : [ZaDistributionList.A2_memNumPages],
						visibilityChecks : [[ZaDLXFormView.isMoreThanOnePage,
						ZaDistributionList.A2_memNumPages]],
						items : [
						{
							type : _DWT_BUTTON_,
							label : null,
							labelLocation : _NONE_,
							width : "100%",
							id : "backButton",
							icon : "LeftArrow",
							disIcon : "LeftArrowDis",
							enableDisableChecks : [ZaDLXFormView.shouldEnableMemBackButton],
							enableDisableChangeEventSources : [ZaDistributionList.A2_memberList, ZaDistributionList.A2_memNumPages, ZaDistributionList.A2_memPagenum],
							onActivate : "ZaDLXFormView.backMemButtonHndlr.call(this,event)"
						}
						,
						{
							type : _OUTPUT_,
							ref : ZaDistributionList.A2_memPagenum,
							valueChangeEventSources : [ZaDistributionList.A2_memPagenum, ZaDistributionList.A2_memNumPages],
							align : _CENTER_,
							getDisplayValue : ZaDLXFormView.showMembersPaging
						}
						,
						{
							type : _DWT_BUTTON_,
							label : null,
							labelLocation : _NONE_,
							width : "100%",
							id : "fwdButton",
							icon : "RightArrow",
							disIcon : "RightArrowDis",
							enableDisableChecks : [ZaDLXFormView.shouldEnableMemForwardButton],
							enableDisableChangeEventSources : [ZaDistributionList.A2_memberList,
							ZaDistributionList.A2_memNumPages,
							ZaDistributionList.A2_memPagenum],
							onActivate : "ZaDLXFormView.fwdMemButtonHndlr.call(this,event)"
						}
						]
					}
					]
				}
				,
				{
					type : _SPACER_, height : "5"
				}
				,
				{
					ref : ZaDistributionList.A2_memberList,
					type : _DWT_LIST_, height : hMemberList,
					width : wMemberList,
					cssClass : "DLTarget",
					cssStyle : "margin-left: 5px; ",
					widgetClass : ZaAccMiniListView,
					headerList : membersHeaderList,
					hideHeader : true,
					onSelection : ZaDLXFormView.membersSelectionListener,
					bmolsnr : true
				}
				,
				{
					type : _SPACER_, height : "8"
				}
				,
				{
					type : _GROUP_, width : "99%",
					numCols : 3, colSizes : ["45%", "10%", "45%"], items : [
					{
						type : _DWT_BUTTON_,
						label : ZaMsg.DLXV_ButtonRemoveSelected,
						id:"removeButton",
						onActivate : "ZaDLXFormView.removeSelectedMembers.call(this,event)",
						nowrap : true,
						cssStyle : "padding:0px;",
						enableDisableChangeEventSources : [ZaDistributionList.A2_membersSelected],
						enableDisableChecks : [
							[XForm.checkInstanceValueNotEmty, ZaDistributionList.A2_membersSelected],
							[XFormItem.prototype.hasRight, ZaDistributionList.REMOVE_DL_MEMBER_RIGHT]
						]
					}
					,
					{
						type : _CELLSPACER_
					}
					,
					{
						type : _DWT_BUTTON_,
						label : ZaMsg.DLXV_ButtonRemovePage,
						nowrap : true,
						cssStyle : "padding:0px;",
						visibilityChangeEventSources : [ZaDistributionList.A2_numMembers],
						visibilityChecks : [[XForm.checkInstanceValueNot, ZaDistributionList.A2_numMembers, 0]],
						enableDisableChangeEventSources : [ZaDistributionList.A2_memberList],
						enableDisableChecks : [
							ZaDLXFormView.shouldEnableRemoveThisPageButton,
							[XFormItem.prototype.hasRight, ZaDistributionList.REMOVE_DL_MEMBER_RIGHT]
						],
						onActivate : "ZaDLXFormView.removeOnePageMembers.call(this,event)"
					}
					]
				}
				]
			}
			]
		}
		,
		{
			type : _ZARIGHT_GROUPER_, numCols : 1, width : wRightPanel, label : ZaMsg.DLXV_GroupLabelAddMembers,
			items : [
			{
				type : _GROUP_, width : "100%", numCols : 3, colSizes : [ "*", "10px", "104px"],
				items : [
				{
					type : _GROUP_, width : "100%", items : [
					{
						type : _TEXTFIELD_,
						cssClass : "admin_xform_name_input",
						ref : ZaSearch.A_query,
						label : ZaMsg.DLXV_LabelFind,
						labelLocation : _LEFT_,
						labelCssStyle : "white-space: nowrap;",
						visibilityChecks : [],
						enableDisableChecks : [],
						width : "100%",
						align : _LEFT_,
						elementChanged : function(elementValue, instanceValue, event)
						{
							var charCode = event.charCode;
							if (charCode == 13 || charCode == 3)
							{
								ZaDLXFormView.srchButtonHndlr.call(this);
							}
							else
							{
								this.getForm().itemChanged(this, elementValue, event);
							}
						}
					}
					]
				}
				,
				{
					type : _CELLSPACER_
				}
				,
				{
					type : _DWT_BUTTON_,
					label : ZaMsg.DLXV_ButtonSearch,
					onActivate : ZaDLXFormView.srchButtonHndlr
				}
				]
			}
			,
			{
				type : _SPACER_, height : "5", colSpan:"*"
			}
			,
			{
				type : _GROUP_, width : "100%", numCols : 3, colSizes : [ "*", "10px", "104px"],
				items : [
				{
					type : _GROUP_, items : [
					{
						type : _OUTPUT_,
						ref : ZaDistributionList.A2_totalNumInPool,
						align : _LEFT_,
						visibilityChecks : [[ZaDLXFormView.checkTotalNumInPool, -1]],
						getDisplayValue : ZaDLXFormView.showSearchFoundNum,
						nowrap : false
					}
					]
				}
				,
				{
					type : _CELLSPACER_
				}
				,
				{
					type : _GROUP_,
					visibilityChangeEventSources : [ZaDistributionList.A2_poolNumPages],
					visibilityChecks : [[ZaDLXFormView.isMoreThanOnePage,
					ZaDistributionList.A2_poolNumPages]],
					numCols : 3,
					colSizes : ["32px", "40px", "32px"],
					items : [
					{
						type : _DWT_BUTTON_,
						label : null,
						labelLocation : _NONE_,
						id : "backButton",
						icon : "LeftArrow",
						disIcon : "LeftArrowDis",
						enableDisableChecks : [ZaDLXFormView.shouldEnablePoolBackButton],
						enableDisableChangeEventSources : [ZaDistributionList.A2_poolPagenum],
						onActivate : "ZaDLXFormView.backPoolButtonHndlr.call(this,event)"
					}
					,
					{
						type : _OUTPUT_,
						ref : ZaDistributionList.A2_poolPagenum,
						align : _CENTER_,
						getDisplayValue : ZaDLXFormView.showSearchFoundPaging 
					}
					, // label : ZaMsg.Next, nowrap : true,
					{
						type : _DWT_BUTTON_,
						label : null,
						labelLocation : _NONE_,
						id : "fwdButton",
						icon : "RightArrow",
						disIcon : "RightArrowDis",
						enableDisableChecks : [ZaDLXFormView.shouldEnablePoolForwardButton],
						enableDisableChangeEventSources : [ZaDistributionList.A2_poolPagenum],
						onActivate : "ZaDLXFormView.fwdPoolButtonHndlr.call(this,event)"
					}
					]
				}
				]
			}
			,
			{
				type : _SPACER_, height : "5"
			}
			,
			{
				ref : ZaDistributionList.A2_memberPool,
				type : _DWT_LIST_,
				height : hMemberPool,
				width : wMemberPool,
				cssClass : "DLSource",
				forceUpdate : true,
				widgetClass : ZaAccMiniListView,
				headerList : sourceHeaderList,
				hideHeader : false,
				onSelection : ZaDLXFormView.memberPoolSelectionListener
			}
			,
			{
				type : _SPACER_, height : "5", colSpan:"*"
			}
			,
			{
				type : _GROUP_, width : wRightPanel, items : [
				{
					type : _GROUP_,
					width : "99%",
					numCols : 3, colSizes : [ "45%", "10%", "45%"], items : [
					{
						type : _DWT_BUTTON_,
						label : ZaMsg.DLXV_ButtonAddSelected,
						nowrap : true,
						onActivate : "ZaDLXFormView.addSelectedAddressesToMembers.call(this,event)",
						enableDisableChangeEventSources : [ZaDistributionList.A2_memberPoolSelected],
						enableDisableChecks : [[XForm.checkInstanceValueNotEmty,
						ZaDistributionList.A2_memberPoolSelected],
						[XFormItem.prototype.hasRight,
						ZaDistributionList.ADD_DL_MEMBER_RIGHT]]
					}
					,
					{
						type : _CELLSPACER_
					}
					,
					{
						type : _DWT_BUTTON_,
						label : ZaMsg.DLXV_ButtonAddPage,
						nowrap : true,
						onActivate : "ZaDLXFormView.addOnePageAddressesToMembers.call(this,event)",
						visibilityChangeEventSources : [ZaDistributionList.A2_totalNumInPool],
						visibilityChecks : [[ZaDLXFormView.checkTotalNumInPool, 1]],
						enableDisableChangeEventSources : [ZaDistributionList.A2_memberPool],
						enableDisableChecks : [
							[XForm.checkInstanceValueNotEmty, ZaDistributionList.A2_memberPool],
							[XFormItem.prototype.hasRight, ZaDistributionList.ADD_DL_MEMBER_RIGHT]
						]
					}
					]
				}
				,
				{
					type : _SPACER_
				}
				]
			}
			,
			{
				type : _SPACER_, height : "5"
			}
			,
			{
				type : _OUTPUT_,
				value : ZaMsg.DLXV_GroupLabelEnterAddressBelow,
				visibilityChecks : [[XFormItem.prototype.hasRight, ZaDistributionList.ADD_DL_MEMBER_RIGHT]]
			}
			,
			{
				type : _SPACER_, height : "5"
			}
			,
			{
				ref : ZaDistributionList.A2_optionalAdd,
				type : _TEXTAREA_,
				width : wRightPanel,
				height : 98,
				bmolsnr : true,
				visibilityChecks : [[XFormItem.prototype.hasRight, ZaDistributionList.ADD_DL_MEMBER_RIGHT]],
				enableDisableChecks : []
			}
			,
			{
				type : _SPACER_, height : "5", visibilityChecks : [[XFormItem.prototype.hasRight, ZaDistributionList.ADD_DL_MEMBER_RIGHT]]
			}
			,
			{
				type : _GROUP_,
				numCols : 2,
				width : wRightPanel,
				colSizes : [80, "auto"],
				visibilityChecks : [[XFormItem.prototype.hasRight, ZaDistributionList.ADD_DL_MEMBER_RIGHT]],
				items : [
				{
					type : _DWT_BUTTON_,
					label : ZaMsg.DLXV_ButtonAddFromFreeForm,
					width : "100%",
					onActivate : "ZaDLXFormView.addFreeFormAddressToMembers.call(this,event)",
					enableDisableChecks : [[XForm.checkInstanceValueNotEmty,
					ZaDistributionList.A2_optionalAdd]],
					enableDisableChangeEventSources : [ZaDistributionList.A2_optionalAdd]
				}
				,
				{
					type : _OUTPUT_,
					value : ZaMsg.DLXV_SeparateAddresses,
					align : "right"
				}
				]
			}
			]
		}
		,
		{
			type : _CELLSPACER_
		}
		]
	}
	;
	cases.push(case1);

	if(_tab2) {				
		var case2 = 
		{type:_ZATABCASE_, caseKey:_tab2, id : "dl_form_properties", colSizes:[10, "auto"], colSpan:"*",
         paddingStyle:"padding-left:15px;", cellpadding:2,
			items:[
				{type:_ZA_TOP_GROUPER_, label:ZaMsg.DLXV_LabelProperties, id:"dl_properties",
					colSpan: "*", numCols: 2, colSizes:[275, "*"],
					visibilityChangeEventSources:[],
					items: [
						{
							type : _INPUT_,
							ref : ZaDistributionList.A_memberOfURL,
							label : ZaMsg.LBL_Member_URL,
							labelLocation : _LEFT_,
							labelCssClass : "xform_label",
							width : "100%",
							visibilityChecks : [[ZaDLXFormView.isDynamicDL], [ZaDLXFormView.isNotACLGroup]]
						}
						,
						{
							type : _OUTPUT_,
							ref : ZaDistributionList.A_memberOfURL,
							label : ZaMsg.LBL_Member_URL,
							labelLocation : _LEFT_,
							labelCssClass : "xform_label",
							visibilityChecks : [[ZaDLXFormView.isDynamicDL], [ZaDLXFormView.isACLGroup]]
						}
						,
						{
							ref : ZaDistributionList.A2_dlType,
							type : _WIZ_CHECKBOX_,
							trueValue : ZaDistributionList.DYNAMIC_DL_TYPE,
							falseValue : ZaDistributionList.STATIC_DL_TYPE,
							label : ZaMsg.LBL_DL_Type,
							labelLocation : _LEFT_,
							labelCssClass : "xform_label",
							labelWrap : true,
							align : _LEFT_,
							nowrap : false,
							msgName : ZaMsg.LBL_DL_Type,
							subLabel : "",
							visibilityChecks : [ZaDLXFormView.hasListGroupRight],
							enableDisableChecks : false
						}
						,
						{
							ref : ZaDistributionList.A_zimbraIsACLGroup,
							type : _WIZ_CHECKBOX_,
							trueValue : "TRUE",
							falseValue : "FALSE",
							label : ZaMsg.LBL_ACL_Group,
							labelLocation : _LEFT_,
							labelCssClass : "xform_label",
							align : _LEFT_,
							subLabel : "",
							visibilityChecks : [ZaDLXFormView.isDynamicDL],
							enableDisableChecks : false
						}
						,
						{
							ref : ZaAccount.A_zimbraHideInGal,
							type : _CHECKBOX_,
							trueValue : "TRUE",
							falseValue : "FALSE",
							label : ZaMsg.LBL_zimbraHideInGal,
							labelLocation : _LEFT_,
							labelCssClass : "xform_label",
							labelWrap : true,
							align : _LEFT_,
							nowrap : false,
							msgName : ZaMsg.LBL_zimbraHideInGal,
							cssStyle : "padding-left:0px"
						}
						,
						{
							ref : "zimbraMailStatus",
							type : _CHECKBOX_,
							trueValue : "enabled",
							falseValue : "disabled",
							align : _LEFT_,
							nowrap : false,
							labelWrap : true,
							label : ZaMsg.DLXV_LabelEnabled,
							msgName : ZaMsg.DLXV_LabelEnabled,
							labelLocation : _LEFT_,
							labelCssClass : "xform_label",
							cssStyle : "padding-left:0px"
						}
						,
						{
							type : _GROUP_,
							numCols : 2,
							label:ZaMsg.DLXV_SubscriptionRequest,
							labelLocation:_LEFT_,
							items :
								[{
									ref:ZaDistributionList.A_zimbraDistributionListSubscriptionPolicy,
									type:_RADIO_,
									groupname:"subscription_settings",
									msgName:ZaMsg.DLXV_SubscriptionPolicyAccept,
									label:ZaMsg.DLXV_SubscriptionPolicyAccept,
									onChange:ZaTabView.onFormFieldChanged,
									updateElement:function () {
										this.getElement().checked = (this.getInstanceValue(ZaDistributionList.A_zimbraDistributionListSubscriptionPolicy) == ZaDistributionList.A2_zimbraDLSubscriptionPolicyAccept);
									},
									elementChanged: function(elementValue,instanceValue, event) {
										this.getForm().itemChanged(this, ZaDistributionList.A2_zimbraDLSubscriptionPolicyAccept, event);
									}
								}
								,
								{
									ref:ZaDistributionList.A_zimbraDistributionListSubscriptionPolicy,
									type:_RADIO_,
									groupname:"subscription_settings",
									msgName:ZaMsg.DLXV_SubscriptionPolicyApproval,
									label:ZaMsg.DLXV_SubscriptionPolicyApproval,
									onChange:ZaTabView.onFormFieldChanged,
									updateElement:function () {
										this.getElement().checked = (this.getInstanceValue(ZaDistributionList.A_zimbraDistributionListSubscriptionPolicy) == ZaDistributionList.A2_zimbraDLSubscriptionPolicyApproval);
									},
									elementChanged: function(elementValue,instanceValue, event) {
										this.getForm().itemChanged(this, ZaDistributionList.A2_zimbraDLSubscriptionPolicyApproval, event);
									}
								}
								,
								{
									ref:ZaDistributionList.A_zimbraDistributionListSubscriptionPolicy,
									type:_RADIO_,
									groupname:"subscription_settings",
									msgName:ZaMsg.DLXV_SubscriptionPolicyReject,
									label:ZaMsg.DLXV_SubscriptionPolicyReject,
									onChange:ZaTabView.onFormFieldChanged,
									updateElement:function () {
										this.getElement().checked = (this.getInstanceValue(ZaDistributionList.A_zimbraDistributionListSubscriptionPolicy) == ZaDistributionList.A2_zimbraDLSubscriptionPolicyReject);
									},
									elementChanged: function(elementValue,instanceValue, event) {
										this.getForm().itemChanged(this, ZaDistributionList.A2_zimbraDLSubscriptionPolicyReject, event);
									}
								}]
						},
						{
							type : _GROUP_,
							numCols : 2,
							label:ZaMsg.DLXV_UnsubscriptionRequest,
							labelLocation:_LEFT_,
							items :
								[{
									ref:ZaDistributionList.A_zimbraDistributionListUnsubscriptionPolicy,
									type:_RADIO_,
									groupname:"unsubscription_settings",
									msgName:ZaMsg.DLXV_SubscriptionPolicyAccept,
									label:ZaMsg.DLXV_SubscriptionPolicyAccept,
									onChange:ZaTabView.onFormFieldChanged,
									updateElement:function () {
										this.getElement().checked = (this.getInstanceValue(ZaDistributionList.A_zimbraDistributionListUnsubscriptionPolicy) == ZaDistributionList.A2_zimbraDLSubscriptionPolicyAccept);
									},
									elementChanged: function(elementValue,instanceValue, event) {
										this.getForm().itemChanged(this, ZaDistributionList.A2_zimbraDLSubscriptionPolicyAccept, event);
									}
								}
									,
									{
										ref:ZaDistributionList.A_zimbraDistributionListUnsubscriptionPolicy,
										type:_RADIO_,
										groupname:"unsubscription_settings",
										msgName:ZaMsg.DLXV_SubscriptionPolicyApproval,
										label:ZaMsg.DLXV_SubscriptionPolicyApproval,
										onChange:ZaTabView.onFormFieldChanged,
										updateElement:function () {
											this.getElement().checked = (this.getInstanceValue(ZaDistributionList.A_zimbraDistributionListUnsubscriptionPolicy) == ZaDistributionList.A2_zimbraDLSubscriptionPolicyApproval);
										},
										elementChanged: function(elementValue,instanceValue, event) {
											this.getForm().itemChanged(this, ZaDistributionList.A2_zimbraDLSubscriptionPolicyApproval, event);
										}
									}
									,
									{
										ref:ZaDistributionList.A_zimbraDistributionListUnsubscriptionPolicy,
										type:_RADIO_,
										groupname:"unsubscription_settings",
										msgName:ZaMsg.DLXV_SubscriptionPolicyReject,
										label:ZaMsg.DLXV_SubscriptionPolicyReject,
										onChange:ZaTabView.onFormFieldChanged,
										updateElement:function () {
											this.getElement().checked = (this.getInstanceValue(ZaDistributionList.A_zimbraDistributionListUnsubscriptionPolicy) == ZaDistributionList.A2_zimbraDLSubscriptionPolicyReject);
										},
										elementChanged: function(elementValue,instanceValue, event) {
											this.getForm().itemChanged(this, ZaDistributionList.A2_zimbraDLSubscriptionPolicyReject, event);
										}
									}]
						}
						,
                        {
                            ref: ZaDistributionList.A_zimbraDistributionListSendShareMessageToNewMembers,
                            type: _CHECKBOX_,
                            trueValue: "TRUE",
                            falseValue: "FALSE",
                            align: _LEFT_,
                            nowrap: false,
                            labelWrap: true,
                            label: ZaMsg.DL_zimbraDistributionListSendShareMessageToNewMembers,
                            msgName: ZaMsg.DL_zimbraDistributionListSendShareMessageToNewMembers,
                            labelLocation: _LEFT_,
                            labelCssClass: "xform_label",
                            cssStyle: "padding-left: 0px"
                        },
						{
							ref:ZaAccount.A_notes,
							type:_TEXTAREA_,
							label:ZaMsg.DLXV_LabelNotes,
							labelLocation:_LEFT_,
							width:"98%",
							height:"100",
							labelCssStyle:"vertical-align: top",
							cssStyle : "margin-left:5px"
						}
					]
				}
			]
		};
		cases.push(case2);
	}
	if(_tab3) {	
		var spaceHeight = "7";
                if(AjxEnv.isIE){
                       spaceHeight = "3";
                }

		var case3 = {type:_ZATABCASE_, numCols:2, colSpan:"*", caseKey:_tab3, colSizes: ["450px","420px"],
			items: [
				//layout rapper around the direct/indrect list	
				{type: _GROUP_, width: "98%", numCols: 1, //colSizes: ["auto", 20],
					items: [
					    {type:_SPACER_, height:"5"}, 							
						//direct member group
						{type:_ZALEFT_GROUPER_, numCols:1, label:ZaMsg.Account_DirectGroupLabel,containerCssStyle: "padding-top:5px", width: "100%",  //height: 400,
							items:[
								{ref: ZaAccount.A2_directMemberList, type: _S_DWT_LIST_, width: "98%", height: 200,
									cssClass: "DLSource", widgetClass: ZaAccountMemberOfListView, 
									headerList: directMemberOfHeaderList, defaultColumnSortable: 0,
									onSelection:ZaDLXFormView.directMemberSelectionListener,
									forceUpdate: true 
								},
								{type:_SPACER_, height:"5"},
								{type:_GROUP_, width:"100%", numCols:8, colSizes:[65,10,65,55,75,10,65,10], 
									items:[
										{type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonRemoveAll, 
									      enableDisableChangeEventSources:[ZaDistributionList.A2_directMemberList],
									      enableDisableChecks:[[XForm.checkInstanceValueNotEmty,ZaDistributionList.A2_directMemberList]],
										  onActivate:"ZaAccountMemberOfListView.removeAllGroups.call(this,event, ZaAccount.A2_directMemberList)"
										},
										{type:_CELLSPACER_},
										{type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonRemove, id:"removeButton",
									      onActivate:"ZaAccountMemberOfListView.removeGroups.call(this,event, ZaAccount.A2_directMemberList)",
									      enableDisableChangeEventSources:[ZaDistributionList.A2_directMemberSelected],
									      enableDisableChecks:[[XForm.checkInstanceValueNotEmty,ZaDistributionList.A2_directMemberSelected]]
									    },
										{type:_CELLSPACER_},
										{type:_DWT_BUTTON_, label:ZaMsg.Previous, id:"backButton", icon:"LeftArrow", disIcon:"LeftArrowDis", 	
											onActivate:"ZaAccountMemberOfListView.backButtonHndlr.call(this,event, ZaAccount.A2_directMemberList)", 
											enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableBackButton,ZaAccount.A2_directMemberList]],
											enableDisableChangeEventSources:[ZaAccount.A2_directMemberList + "_offset"]													 
									    },								       
										{type:_CELLSPACER_},
										{type:_DWT_BUTTON_, label:ZaMsg.Next, id:"fwdButton", icon:"RightArrow", disIcon:"RightArrowDis",	
											onActivate:"ZaAccountMemberOfListView.fwdButtonHndlr.call(this,event, ZaAccount.A2_directMemberList)", 
											enableDisableChangeEventSources:[ZaAccount.A2_directMemberList + "_more"],
											enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableForwardButton,ZaAccount.A2_directMemberList]]
									    },								       
										{type:_CELLSPACER_}									
									]
                                                               } 	
							]
						},		
						{type:_SPACER_, height:"10"},	
						//indirect member group
						{type:_ZALEFT_GROUPER_, numCols:1, width: "100%", label:ZaMsg.Account_IndirectGroupLabel, containerCssStyle: "padding-top:5px",
							items:[
								{ref: ZaAccount.A2_indirectMemberList, type: _S_DWT_LIST_, width: "98%", height: 200,
									cssClass: "DLSource", widgetClass: ZaAccountMemberOfListView, 
									headerList: indirectMemberOfHeaderList, defaultColumnSortable: 0,
									onSelection:ZaDLXFormView.indirectMemberSelectionListener,
									forceUpdate: true 
								},
								{type:_SPACER_, height:"5"},
								{type:_GROUP_, width:"100%", numCols:8, colSizes:[65,10,65,55,75,10,65,10], 
									items:[
										{type:_CELLSPACER_},
										{type:_CELLSPACER_},
										{type:_CELLSPACER_},
										{type:_CELLSPACER_},
										{type:_DWT_BUTTON_, label:ZaMsg.Previous, id:"indirectBackButton", icon:"LeftArrow", disIcon:"LeftArrowDis",
											onActivate:"ZaAccountMemberOfListView.backButtonHndlr.call(this,event, ZaAccount.A2_indirectMemberList)", 
											enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableBackButton,ZaAccount.A2_indirectMemberList]],
											enableDisableChangeEventSources:[ZaAccount.A2_indirectMemberList+"_offset"]
									    },								       
										{type:_CELLSPACER_},
										{type:_DWT_BUTTON_, label:ZaMsg.Next, id:"indirectFwdButton", icon:"RightArrow", disIcon:"RightArrowDis",	
											onActivate:"ZaAccountMemberOfListView.fwdButtonHndlr.call(this,event, ZaAccount.A2_indirectMemberList)", 
											enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableForwardButton,ZaAccount.A2_indirectMemberList]],
											enableDisableChangeEventSources:[ZaAccount.A2_indirectMemberList+"_more"]
									    },								       
										{type:_CELLSPACER_}									
									]
								}
							]
						}
					]
				},
				//non member group
				//layout rapper around the elements						
				{type: _GROUP_, width: "98%", numCols: 1, //colSizes: ["auto", 20],
					items: [
					    {type:_SPACER_, height:"5"}, 							
						{type:_ZARIGHT_GROUPER_, numCols:1, width: "100%", label:ZaMsg.Account_NonGroupLabel, containerCssStyle: "padding-top:5px",
							items:[
								{type:_GROUP_, numCols:3, width:"98%", 
								   items:[
										{ref:"query", type:_TEXTFIELD_, width:"100%", cssClass:"admin_xform_name_input",  
											nowrap:false,labelWrap:true,
											label:ZaMsg.DLXV_LabelFind,labelCssStyle:"white-space: nowrap;",
											visibilityChecks:[],enableDisableChecks:[],
											elementChanged: function(elementValue,instanceValue, event) {
											  var charCode = event.charCode;
											  if (charCode == 13 || charCode == 3) {
											      ZaAccountMemberOfListView.prototype.srchButtonHndlr.call(this);
											  } else {
											      this.getForm().itemChanged(this, elementValue, event);
											  }
								      		}
										},
										{type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonSearch, width:80,
										   onActivate:ZaAccountMemberOfListView.prototype.srchButtonHndlr
										},
										{ref: ZaAccount.A2_showSameDomain, type: _CHECKBOX_, align:_RIGHT_, 												
												label:null,labelLocation:_NONE_, trueValue:"TRUE", falseValue:"FALSE",
												visibilityChecks:[]
										},										
										{type:_OUTPUT_, value:ZaMsg.NAD_SearchSameDomain,colSpan:2}
									]
						         },
						        {type:_SPACER_, height:spaceHeight},
								{ref: ZaAccount.A2_nonMemberList, type: _S_DWT_LIST_, width: "98%", height: 440,
									cssClass: "DLSource", widgetClass: ZaAccountMemberOfListView, 
									headerList: nonMemberOfHeaderList, defaultColumnSortable: 0,
									onSelection:ZaDLXFormView.nonmemberSelectionListener,
									//createPopupMenu: 
									forceUpdate: true },
									
								{type:_SPACER_, height:"5"},	
								//add action buttons
								{type:_GROUP_, width:"100%", numCols:8, colSizes:[55,10,65,10,65,10,55,10],
									items: [
									   {type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonAddFromList, 
										onActivate:"ZaAccountMemberOfListView.addGroups.call(this,event, ZaAccount.A2_nonMemberList)",
										enableDisableChangeEventSources:[ZaDistributionList.A2_nonmembersSelected],
										enableDisableChecks:[[XForm.checkInstanceValueNotEmty,ZaDistributionList.A2_nonmembersSelected]]
									   },
									   {type:_CELLSPACER_},
									   {type:_DWT_BUTTON_, label:ZaMsg.DLXV_ButtonAddAll,
										onActivate:"ZaAccountMemberOfListView.addAllGroups.call(this,event, ZaAccount.A2_nonMemberList)",
										enableDisableChangeEventSources:[ZaAccount.A2_nonMemberList],
										enableDisableChecks:[[XForm.checkInstanceValueNotEmty, ZaAccount.A2_nonMemberList]]
									   },
										{type:_CELLSPACER_},
										{type:_DWT_BUTTON_, label:ZaMsg.Previous, id:"backButton", icon:"LeftArrow", disIcon:"LeftArrowDis",
											enableDisableChangeEventSources:[ZaAccount.A2_nonMemberList+"_offset"],
											enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableBackButton, ZaAccount.A2_nonMemberList]],
											onActivate:"ZaAccountMemberOfListView.backButtonHndlr.call(this,event, ZaAccount.A2_nonMemberList)"
										},								       
										{type:_CELLSPACER_},
										{type:_DWT_BUTTON_, label:ZaMsg.Next, id:"fwdButton", icon:"RightArrow", disIcon:"RightArrowDis",
										 	enableDisableChangeEventSources:[ZaAccount.A2_nonMemberList + "_more"],
										 	enableDisableChecks:[[ZaAccountMemberOfListView.shouldEnableForwardButton,ZaAccount.A2_nonMemberList]],
											onActivate:"ZaAccountMemberOfListView.fwdButtonHndlr.call(this,event, ZaAccount.A2_nonMemberList)"									
										},								       
										{type:_CELLSPACER_}	
									  ]
							    }								
							]
						}
					]
				}
			]
		};
		cases.push(case3);
              
	}		
				
	if(_tab4) {
		var addAliasButton = {type:_DWT_BUTTON_, label:ZaMsg.NAD_Add,width:"100px",
						onActivate:"ZaDLXFormView.addAliasButtonListener.call(this);"
					};
		if(entry.id) { 
			addAliasButton.enableDisableChecks = [[XFormItem.prototype.hasRight,ZaDistributionList.ADD_DL_ALIAS_RIGHT]];
		} else {
			addAliasButton.enableDisableChecks = [[ZaItem.hasWritePermission, ZaAccount.A_zimbraMailAlias]];
		}
		
		var editAliasButton = {type:_DWT_BUTTON_, label:ZaMsg.TBB_Edit,width:"100px",
				enableDisableChangeEventSources:[ZaDistributionList.A2_alias_selection_cache],
				onActivate:"ZaDLXFormView.editAliasButtonListener.call(this);",id:"editAliasButton"
			};
		if(entry.id) {
			editAliasButton.enableDisableChecks = [ZaDLXFormView.isEditAliasEnabled,[XFormItem.prototype.hasRight,ZaDistributionList.REMOVE_DL_ALIAS_RIGHT],[XFormItem.prototype.hasRight,ZaAccount.ADD_DL_ALIAS_RIGHT]];	
		} else {
			editAliasButton.enableDisableChecks = [ZaDLXFormView.isEditAliasEnabled,[ZaItem.hasWritePermission, ZaAccount.A_zimbraMailAlias]];
		}
		
		var deleteAliasButton = {type:_DWT_BUTTON_, label:ZaMsg.TBB_Delete,width:"100px",
				onActivate:"ZaDLXFormView.deleteAliasButtonListener.call(this);",id:"deleteAliasButton",
				
				enableDisableChangeEventSources:[ZaDistributionList.A2_alias_selection_cache]
			};
		if(entry.id) {
			deleteAliasButton.enableDisableChecks=[ZaDLXFormView.isDeleteAliasEnabled,[XFormItem.prototype.hasRight,ZaDistributionList.REMOVE_DL_ALIAS_RIGHT]];
		} else {
			deleteAliasButton.enableDisableChecks=[ZaDLXFormView.isDeleteAliasEnabled,[ZaItem.hasWritePermission, ZaAccount.A_zimbraMailAlias]];
		}
		var case4 = {type:_ZATABCASE_, width:"100%", numCols:1, colSizes:["auto"],caseKey:_tab4,
		items: [
			{type:_SPACER_, height:"9"},
			{type:_GROUPER_, borderCssClass:"LeftGrouperBorder",
				width:"100%", numCols:1,colSizes:["auto"],
				label:ZaMsg.NAD_EditDLAliasesGroup,
				items :[
					{ref:ZaAccount.A_zimbraMailAlias, type:_DWT_LIST_, height:"200", width:"350px",
						getDisplayValue: AjxUtil.htmlEncode,
						forceUpdate: true, preserveSelection:false, multiselect:true,cssClass: "DLSource", 
						headerList:null,onSelection:ZaDLXFormView.aliasSelectionListener
					},
 					{type:_GROUP_, numCols:6, colSizes:["100px","10px","100px","10px","100px","auto"],
						cssStyle:"margin:10px;padding-bottom:0;",
						items: [
							deleteAliasButton,
							{type:_CELLSPACER_},
							editAliasButton,
							{type:_CELLSPACER_},
							addAliasButton
						]
					}
				]
			}
		]
	};
	cases.push(case4);
	}

	if(_tab5) {
		var addOwnerButton = {type:_DWT_BUTTON_, label:ZaMsg.NAD_Add,width:"100px",
						onActivate:"ZaDLXFormView.addOwnerButtonListener.call(this);"
					};

		var editOwnerButton = {type:_DWT_BUTTON_, label:ZaMsg.TBB_Edit,width:"100px",
				enableDisableChangeEventSources:[ZaDistributionList.A2_owners_selection_cache],
                enableDisableChecks:[ZaDLXFormView.isEditOwnerEnabled],
				onActivate:"ZaDLXFormView.editOwnerButtonListener.call(this);"
			};

		var deleteOwnerButton = {type:_DWT_BUTTON_, label:ZaMsg.TBB_Delete,width:"100px",
				onActivate:"ZaDLXFormView.deleteOwnerButtonListener.call(this);",
				enableDisableChangeEventSources:[ZaDistributionList.A2_owners_selection_cache],
                enableDisableChecks:[ZaDLXFormView.isDeleteOwnerEnabled]
			};

		var case5 = {type:_ZATABCASE_, width:"100%", numCols:1, colSizes:["auto"],caseKey:_tab5,
		items: [
			{type:_SPACER_, height:"9"},
			{type:_GROUPER_, borderCssClass:"LeftGrouperBorder",
				width:"100%", numCols:1,colSizes:["auto"],
				label: ZaMsg.DLXV_GroupLabelDLOwners,
				items :[
					{ref:ZaDistributionList.A2_DLOwners, type:_DWT_LIST_, height:"200", width:"350px",
						getDisplayValue: AjxUtil.htmlEncode,
						forceUpdate: true, preserveSelection:false, multiselect:true,cssClass: "DLSource",
						headerList:null,onSelection:ZaDLXFormView.ownerSelectionListener
					},
					{type:_GROUP_, numCols:6, colSizes:["100px","10px","100px","10px","100px","auto"],
						cssStyle:"margin:10px;padding-bottom:0;",
						items: [
							deleteOwnerButton,
							{type:_CELLSPACER_},
							editOwnerButton,
							{type:_CELLSPACER_},
							addOwnerButton
						]
					}
				]
			}
		]
	};
	cases.push(case5);
	}

	if(_tab6) {
		var case6 =
		{type:_ZATABCASE_, caseKey:_tab6, colSpan:"*",
			paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
			items:[
                {type:_ZA_TOP_GROUPER_, label:ZaMsg.NAD_MailOptionsReceiving, id:"dl_pref_replyto_group",
                    colSpan: "*", numCols: 2, colSizes:[275, "*"],
                    visibilityChecks:[[ZATopGrouper_XFormItem.isGroupVisible,[
                            ZaDistributionList.A_zimbraPrefReplyToEnabled,
                            ZaDistributionList.A_zimbraPrefReplyToDisplay,
                            ZaDistributionList.A_zimbraPrefReplyToAddress
                    ]]],
                    visibilityChangeEventSources:[],
                    items: [
                        {ref:ZaDistributionList.A_zimbraPrefReplyToEnabled, type:_CHECKBOX_,
                            visibilityChecks:[[ZaItem.hasReadPermission, ZaDistributionList.A_zimbraPrefReplyToEnabled]],
                            label:ZaMsg.DLXV_ReplayToEnabled, trueValue:"TRUE", falseValue:"FALSE"
                        },
                        {ref:ZaDistributionList.A_zimbraPrefReplyToDisplay, type:_TEXTFIELD_,
                            label:ZaMsg.DLXV_ReplayToAddrDisplay, labelLocation:_LEFT_, containerCssStyle:"padding-left:3px;",
                            emptyText: ZaMsg.DLXV_ReplayToAddrEmptyText,
                            visibilityChecks:[[ZaItem.hasReadPermission, ZaDistributionList.A_zimbraPrefReplyToDisplay]],
                            enableDisableChecks:[[XForm.checkInstanceValue,ZaDistributionList.A_zimbraPrefReplyToEnabled,"TRUE"],
                            [ZaItem.hasWritePermission,ZaDistributionList.A_zimbraPrefReplyToAddress]],
                            enableDisableChangeEventSources:[ZaDistributionList.A_zimbraPrefReplyToEnabled],width:"15em"
                        },
                        {ref:ZaDistributionList.A_zimbraPrefReplyToAddress,
                            type:_TEXTFIELD_,
                            label:ZaMsg.DLXV_ReplayToAddr,
                            labelLocation:_LEFT_,
                            containerCssStyle:"padding-left:3px;",
                            width:"24em", inputWidth:"32em",
                            nowrap:false,labelWrap:true,
                            visibilityChecks:[[ZaItem.hasReadPermission, ZaDistributionList.A_zimbraPrefReplyToAddress]],
                            enableDisableChangeEventSources:[ZaDistributionList.A_zimbraPrefReplyToEnabled],
                            enableDisableChecks:[[XForm.checkInstanceValue,ZaDistributionList.A_zimbraPrefReplyToEnabled,"TRUE"],
                                [ZaItem.hasWritePermission,ZaDistributionList.A_zimbraPrefReplyToAddress]]
                        }
                   ]
                }
			]
		};
		cases.push(case6);
	}

    var headerItems = [{type:_AJX_IMAGE_, src:"Group_32", label:null, rowSpan:3},
						{type:_OUTPUT_, ref:"name", label:null,cssClass:"AdminTitle", height:"auto", width:350, rowSpan:3, cssStyle:"word-wrap:break-word;overflow:hidden",
							getDisplayValue: AjxUtil.htmlEncode
						}] ;

    if (ZaItem.hasReadPermission (ZaItem.A_zimbraId, entry)) 
        headerItems.push (  {type:_OUTPUT_, ref:ZaItem.A_zimbraId, label:ZaMsg.NAD_ZimbraID}) ;

    if (ZaItem.hasReadPermission (ZaItem.A_zimbraCreateTimestamp, entry))
        headerItems.push({type:_OUTPUT_, ref:ZaItem.A_zimbraCreateTimestamp,
							label:ZaMsg.LBL_zimbraCreateTimestamp, labelLocation:_LEFT_,
							getDisplayValue:function() {
								var val = ZaItem.formatServerTime(this.getInstanceValue());
								if(!val)
									return ZaMsg.Server_Time_NA;
								else
									return val;
							}	
						});

    if (ZaItem.hasReadPermission (ZaDistributionList.A_mailStatus, entry))
        headerItems.push (  {type:_OUTPUT_, ref:ZaDistributionList.A_mailStatus, label:ZaMsg.NAD_ResourceStatus,
								choices: this.dlStatusChoices
						}) ;


	xFormObject.items = [
		{type:_GROUP_, cssClass:"ZmSelectedHeaderBg", colSpan: "*", id:"xform_header", 
			items: [
				{type:_GROUP_,	numCols:4,colSizes:["32px","*","80px","*"],
					items: headerItems
				}
			]
		},
		{type:_TAB_BAR_, choices:this.tabChoices,
            cssStyle:"display:none;",
			ref: ZaModel.currentTab, colSpan:"*",cssClass:"ZaTabBar", id:"xform_tabbar"
		},
		{type:_SWITCH_,items:cases}
	];	
};

ZaTabView.XFormModifiers["ZaDLXFormView"].push(ZaDLXFormView.myXFormModifier);

ZaDLXFormView.prototype.getTabChoices =
function() {
    return this.tabChoices;
}

ZaDLXFormView.isMoreThanOnePage =
function(refOfPageNum) {
    var form = this.getForm();
    var pageNumInPool = form.getInstanceValue(refOfPageNum) || 0;
    return pageNumInPool > 1;
}

ZaDLXFormView.showSearchFoundNum = function(value){
    if (AjxUtil.isEmpty(value)) {
        return;
    }

    return AjxMessageFormat.format(ZaMsg.DLXV_MsgSearchFound, [value]);
}

ZaDLXFormView.showSearchFoundPaging  = function(value){
    var curPageNum = value || 1;
    var totalPageNum = this.getForm().getInstanceValue(ZaDistributionList.A2_poolNumPages) || 1;
    return curPageNum + "/" + totalPageNum;
}

ZaDLXFormView.showMembersNum = function(value){
    if ( value == null ){
        return ZaMsg.splashScreenLoading;
    }
    if ( value < 0 ){
        value = 0;
    }
    return AjxMessageFormat.format(ZaMsg.DLXV_MsgMemberNum, [value]);
}

ZaDLXFormView.showMembersPaging = function(value){
    var curPageNum = value || 1;
    var totalPagenum = this.getForm().getInstanceValue(ZaDistributionList.A2_memNumPages) || 1;
    return curPageNum + "/" + totalPagenum;
}

ZaDLXFormView.checkTotalNumInPool = function(base){
	if (AjxUtil.isEmpty(base)) {
		base = 0;
	}
	var totalNumInPool = this.getForm().getInstanceValue(ZaDistributionList.A2_totalNumInPool);
	if ( totalNumInPool == null ) {
		totalNumInPool = -1;
	}
	return totalNumInPool > base;
}


ZaDLXFormView.prototype.updateMemberList = function(entry) {
	if (AjxUtil.isEmpty(entry)) { //entry is a updated dl 
		return;
	}

	var xform = this.getMyForm();  //make it when loading
	if (xform) {
		var instance = xform.getInstance() || {};

		//all its members
		instance [ZaDistributionList.A2_allMemberHash] = entry [ZaDistributionList.A2_allMemberHash] || {};
		instance [ZaDistributionList.A2_numMembers] = entry [ZaDistributionList.A2_numMembers] || 0;

		var allMemberPages = entry [ZaDistributionList.A2_allMemberPages] || [];
		instance [ZaDistributionList.A2_allMemberPages] = allMemberPages;

		var firstPage = (allMemberPages && allMemberPages.length) ? allMemberPages[0] : [];
		firstPage._version = 1;
		instance [ZaDistributionList.A2_memberList] = entry [ZaDistributionList.A2_memberList] = firstPage;

		instance [ZaDistributionList.A2_memPagenum ] = 1; //show first page
		instance [ZaDistributionList.A2_memNumPages] = entry [ZaDistributionList.A2_memNumPages] || 1;

		//membership related instance variables
		instance [ZaAccount.A2_memberOf] = ZaAccountMemberOfListView.cloneMemberOf(entry);

		instance [ZaAccount.A2_directMemberList + "_more"] = entry [ZaAccount.A2_directMemberList + "_more"];
		instance [ZaAccount.A2_directMemberList + "_offset"] = entry [ZaAccount.A2_directMemberList + "_offset"];
		instance [ZaAccount.A2_indirectMemberList + "_more"] = entry [ZaAccount.A2_indirectMemberList + "_more"];
		instance [ZaAccount.A2_indirectMemberList + "_offset"] = entry [ZaAccount.A2_indirectMemberList + "_offset"];
		instance [ZaAccount.A2_nonMemberList + "_more"] = entry [ZaAccount.A2_nonMemberList + "_more"];
		instance [ZaAccount.A2_nonMemberList + "_offset"] = entry [ZaAccount.A2_nonMemberList + "_offset"];

		//dl owners
		if (entry[ZaDistributionList.A2_DLOwners]) {
			instance [ZaDistributionList.A2_DLOwners] = ZaItem.deepCloneListItem(entry[ZaDistributionList.A2_DLOwners]);
		}

		//whether is dynamic group
		if(entry[ZaDistributionList.A2_dlType]) {
			instance [ZaDistributionList.A2_dlType] = entry[ZaDistributionList.A2_dlType];
		}

		if ( instance.id != entry.id ) {
			instance.id = entry.id;
		}

		//copy the attrs
		ZaDLXFormView._copyAttrFromEntry( xform, instance, entry );
		xform.setInstance(instance);
	}
}

ZaDLXFormView.hasListGroupRight = function(){
	return ZaZimbraAdmin.haveTargetRight(ZaItem.GROUP, ZaDomain.RIGHT_LIST_GROUP, ZaAccount.getDomain(this.getInstance().getName()));
}
}
if (AjxPackage.define("zimbraAdmin.dl.view.ZaNewDLXWizard")) {
/**
 * Created by IntelliJ IDEA.
 * User: jxy
 * Date: 10/19/11
 * Time: 11:07 PM
 * To change this template use File | Settings | File Templates.
 */
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
ZaNewDLXWizard = function(parent, entry) {
	var height, width;
	if (AjxEnv.isWebKitBased || AjxEnv.isFirefox) {
		width = "740px"; //940px is full view, but it is too big, so cut it
		height = "465px"; //665px is full view ....
	} else {
		width = "720px"; //920px is full view, but it is too big, so cut it
		height = "455px";  //655px is full view ....
	}
	ZaXWizardDialog.call(this, parent, null, ZaMsg.DLTBB_New_tt, width, height, "ZaNewDLXWizard",null,ZaId.DLG_NEW_DL);
	this.dlStatusChoices = [
		{value:"enabled", label:ZaMsg.DL_Status_enabled},
		{value:"disabled", label:ZaMsg.DL_Status_disabled}
	]
	this.initForm(ZaDistributionList.myXModel,this.getMyXForm(entry));
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_CHANGED, new AjxListener(this, ZaNewDLXWizard.prototype.handleXFormChange));
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, new AjxListener(this, ZaNewDLXWizard.prototype.handleXFormChange));
}

ZaNewDLXWizard.prototype = new ZaXWizardDialog;
ZaNewDLXWizard.prototype.constructor = ZaNewDLXWizard;
ZaNewDLXWizard.prototype.toString = function() {
    return "ZaNewDLXWizard";
}
ZaXDialog.XFormModifiers["ZaNewDLXWizard"] = new Array();
ZaNewDLXWizard.helpURL = ZaUtil.HELP_URL;


ZaNewDLXWizard.prototype.getTitle =
function () {
	return ZaMsg.DLTBB_New_tt;
}

ZaNewDLXWizard.prototype.getTabIcon =
function () {
	if (this._containedObject && this._containedObject.attrs && this._containedObject.attrs[ZaDistributionList.A_isAdminGroup]=="TRUE" ) {
                return "DistributionListGroup";

        } else {
                return "DistributionList" ;
        }

}

ZaNewDLXWizard.prototype.handleXFormChange = function (ev) {
    if(ev && this._localXForm.hasErrors()) {
        this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
	    this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
	} else {
		if(this._containedObject[ZaAccount.A_name]
                && this._containedObject[ZaAccount.A_name].indexOf("@") > 0) {
			this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(true);
            if (this._containedObject[ZaModel.currentStep] != this._lastStep) {
                 this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
            }
            if (this._containedObject[ZaModel.currentStep] != 1) {
                 this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
            }
        }
	}
}



ZaNewDLXWizard.prototype.popup =
function (loc) {
	ZaXWizardDialog.prototype.popup.call(this, loc);
	this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
	this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
	this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
}


ZaNewDLXWizard.prototype.createDomainAndAccount = function(domainName) {
	try {
		var newDomain = new ZaDomain();
		newDomain.name=domainName;
		newDomain.attrs[ZaDomain.A_domainName] = domainName;
		var domain = ZaItem.create(newDomain,ZaDomain,"ZaDomain");
		if(domain != null) {
			ZaApp.getInstance().getCurrentController().closeCnfrmDelDlg();
			this.finishWizard();
		}
	} catch(ex) {
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaNewDLXWizard.prototype.createDomainAndAccount", null, false);
	}
}


ZaNewDLXWizard.prototype.finishWizard =
function() {
	try {
		if(!ZaDistributionList.checkValues(this._containedObject)) {
			return false;
		}
		var dl = ZaItem.create(this._containedObject, ZaDistributionList, "ZaDistributionList");
		if(dl != null) {
			ZaApp.getInstance().getDistributionListController().fireCreationEvent(this._containedObject);
			this.popdown();
            ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.DLCreated,[dl.name]));
		}
	} catch (ex) {
		switch(ex.code) {
			case ZmCsfeException.ACCT_EXISTS:
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_ACCOUNT_EXISTS);
			break;
			case ZmCsfeException.ACCT_INVALID_PASSWORD:
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_INVALID, ex);
				ZaApp.getInstance().getAppCtxt().getErrorDialog().showDetail(true);
			break;
			case ZmCsfeException.NO_SUCH_COS:
				ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_NO_SUCH_COS,[this._containedObject.attrs[ZaAccount.A_COSId]]), ex);
		    break;
			case ZmCsfeException.NO_SUCH_DOMAIN:
				ZaApp.getInstance().dialogs["confirmMessageDialog2"].setMessage(AjxMessageFormat.format(ZaMsg.CreateDomain_q,[ZaAccount.getDomain(this._containedObject.name)]), DwtMessageDialog.WARNING_STYLE);
				ZaApp.getInstance().dialogs["confirmMessageDialog2"].registerCallback(DwtDialog.YES_BUTTON, this.createDomainAndAccount, this, [ZaAccount.getDomain(this._containedObject.name)]);
				ZaApp.getInstance().dialogs["confirmMessageDialog2"].registerCallback(DwtDialog.NO_BUTTON, ZaController.prototype.closeCnfrmDelDlg, ZaApp.getInstance().getCurrentController(), null);
				ZaApp.getInstance().dialogs["confirmMessageDialog2"].popup();
			break;
			default:
				ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaNewDLXWizard.prototype.finishWizard", null, false);
			break;
		}
	}
}

ZaNewDLXWizard.prototype.goNext =
function() {
	if (this._containedObject[ZaModel.currentStep] == 1) {
		
		//check if account exists
        if (ZaSearch.isAccountExist.call(this, {name: this._containedObject[ZaAccount.A_name], popupError: true})) {
            return false ;
        }
        this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
	}
	this.goPage(this._containedObject[ZaModel.currentStep] + 1);
	if(this._containedObject[ZaModel.currentStep] == this._lastStep) {
		this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
	}
}

ZaNewDLXWizard.prototype.goPrev =
function() {
	if (this._containedObject[ZaModel.currentStep] == 2) {
		this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
	} else if(this._containedObject[ZaModel.currentStep] == this._lastStep) {
		this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
	}
	this.goPage(this._containedObject[ZaModel.currentStep] - 1);
}






ZaNewDLXWizard.nonmemberSelectionListener =
function (ev) {
	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		arr.sort();
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_nonmembersSelected, arr);
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_nonmembersSelected, null);
	}

    if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		ZaAccountMemberOfListView._addSelectedLists(this.getForm(), arr);
	}
}


ZaNewDLXWizard.directMemberSelectionListener =
function (ev) {
	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		arr.sort();
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_directMemberSelected, arr);
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_directMemberSelected, null);
	}

    if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		ZaAccountMemberOfListView._removeSelectedLists(this.getForm(), arr);
	}
}

ZaNewDLXWizard.indirectMemberSelectionListener =
function (ev) {
	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		arr.sort();
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_indirectMemberSelected, arr);
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_indirectMemberSelected, null);
	}
}

/**
* method of an XFormItem
**/
ZaNewDLXWizard.removeAllMembers = function(event) {
	var form = this.getForm();
	var tmpCurrentRemoveList = form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_removeList);
	var tmpCurrentMemberList = form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_memberList);
	var tmpCurrentAddList = form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_addList);
        var removeExistedList = [];
        for(var i = 0; i < tmpCurrentMemberList.length; i++) {
                var removedItem = tmpCurrentMemberList[i];
                if(!tmpCurrentAddList || tmpCurrentAddList.length == 0 || AjxUtil.indexOf(tmpCurrentAddList,removedItem,false) < 0)
                        removeExistedList.push(removedItem);
        }

	var newRemoveList = AjxUtil.mergeArrays(tmpCurrentRemoveList,removeExistedList);
	newRemoveList._version = tmpCurrentRemoveList._version+1;

	this.setInstanceValue([], ZaDistributionList.A2_addList);
	this.setInstanceValue([], ZaDistributionList.A2_memberList);
	this.setInstanceValue(newRemoveList, ZaDistributionList.A2_removeList);

	this.getForm().parent.setDirty(true);
};

/**
* method of an XFormItem
**/
ZaNewDLXWizard.removeMembers = function(event) {
	var form = this.getForm();

	var tmpCurrentMemberList = form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_memberList);
	var tmpCurrentAddList = form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_addList);
	var tmpSelectedList = form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_membersSelected);
	var tmpCurrentRemoveList = form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_removeList);
	var tmpOrigList = form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_origList);

	var newMemberList = AjxUtil.arraySubtract(tmpCurrentMemberList, form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_membersSelected));
	newMemberList._version = tmpCurrentMemberList._version + 1;
	this.setInstanceValue(newMemberList, ZaDistributionList.A2_memberList);


	var newAddList = AjxUtil.arraySubtract(tmpCurrentAddList,form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_membersSelected));
	newAddList._version = tmpCurrentAddList._version + 1;
	this.setInstanceValue(newAddList, ZaDistributionList.A2_addList);

        var removeExistedList = [];
        for(var i = 0; i < tmpSelectedList.length; i++) {
                var removedItem = tmpSelectedList[i];
                if(!tmpCurrentAddList || tmpCurrentAddList.length == 0 ||AjxUtil.indexOf(tmpCurrentAddList,removedItem,false) < 0) {
			if(tmpOrigList && tmpOrigList.length > 0 && AjxUtil.indexOf(tmpOrigList, removedItem, false) >= 0)
				removeExistedList.push(removedItem);
		}
        }

	var newRemoveList = AjxUtil.mergeArrays(tmpCurrentRemoveList,removeExistedList);
	newRemoveList._version = tmpCurrentRemoveList._version+1;
	this.setInstanceValue(newRemoveList, ZaDistributionList.A2_removeList);

	this.getForm().parent.setDirty(true);
};


/**
* method of the XForm
**/
ZaNewDLXWizard.getMemberSelection =
function () {
	var memberItem = this.getItemsById(ZaDistributionList.A2_members )[0];
	var membersSelection = null;
	if(memberItem) {
		var membersSelection = memberItem.getSelection();
	}

	if(membersSelection) {
		return membersSelection;
	} else {
		return [];
	}
}
/**
* method of the XForm
**/
ZaNewDLXWizard.shouldEnableMemberListButtons = function() {
	return (ZaNewDLXWizard.getMemberSelection.call(this).length>0);
};

/**
* method of the XForm
**/
ZaNewDLXWizard.shouldEnableRemoveAllButton = function() {
	return (!AjxUtil.isEmpty(this.getInstanceValue(ZaDistributionList.A2_memberList)));
};

/**
* method of the XForm
**/
ZaNewDLXWizard.shouldEnableAddAllButton = function() {
	var list = this.getItemsById("memberPool")[0].widget.getList();
	if (list != null) {
		return ( list.size() > 0);
	}
	return false;
};

/**
* method of the XForm
**/
ZaNewDLXWizard.getMemberPoolSelection =
function () {
	var memberItem = this.getItemsById("memberPool")[0];
	var membersSelection = null;
	if(memberItem) {
		var membersSelection = memberItem.getSelection();
	}

	if(membersSelection) {
		return membersSelection;
	} else {
		return [];
	}
}

/**
* method of the XForm
**/
ZaNewDLXWizard.shouldEnableMemberPoolListButtons = function() {
	return (ZaNewDLXWizard.getMemberPoolSelection.call(this).length>0);
};

/**
* method of the XForm
**/
ZaNewDLXWizard.shouldEnableFreeFormButtons = function () {
	var optionalAdd = this.getInstance().optionalAdd;
	return (optionalAdd && optionalAdd.length > 0);
};



/**
 * method of an XFormItem
 * Currently, this manages the data, redraws the whole list, and then sets
 * the selection.
 * TODO - change the routine to add only the necessary rows to the list view.
 * Same is true of addAllAddresses
 */
ZaNewDLXWizard.addAddressesToMembers = function (event) {
 	var form = this.getForm();
	//Don't allow add self as member
	var selectedAddArray = form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_memberPoolSelected);
	var newSelectedArray = [];
	for(var i = 0; i < selectedAddArray.length; i++) {
		var selectedItem = selectedAddArray[i];
		if(selectedItem.name != form.getInstance().name)
			newSelectedArray.push(selectedItem);
	}

	var tmpAddArray = AjxUtil.mergeArrays(form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_addList),
		newSelectedArray,ZaDistributionList.compareTwoMembers);

	tmpAddArray._version = form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_addList)._version + 1;

	var tmpMembersArray = AjxUtil.mergeArrays(form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_memberList),
		newSelectedArray,ZaDistributionList.compareTwoMembers);

	tmpMembersArray._version = form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_memberList)._version + 1;

	this.setInstanceValue(tmpAddArray, ZaDistributionList.A2_addList);
	this.setInstanceValue(tmpMembersArray, ZaDistributionList.A2_memberList);

	this.getForm().parent.setDirty(true);
};

/**
 * method of an XFormItem
**/
ZaNewDLXWizard.addAllAddressesToMembers = function (event) {
	var form = this.getForm();
	//Don't allow add self as member
        var selectedAddArray = form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_memberPool);
        var newSelectedArray = [];
        for(var i = 0; i < selectedAddArray.length; i++) {
                var selectedItem = selectedAddArray[i];
                if(selectedItem.name != form.getInstance().name)
                        newSelectedArray.push(selectedItem);
        }
	var tmpAddArray = AjxUtil.mergeArrays(form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_addList),
		newSelectedArray,ZaDistributionList.compareTwoMembers);

	tmpAddArray._version = form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_addList)._version + 1;

	var tmpMembersArray = AjxUtil.mergeArrays(form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_memberList),
		newSelectedArray,ZaDistributionList.compareTwoMembers);

	tmpMembersArray._version = form.getModel().getInstanceValue(form.getInstance(),ZaDistributionList.A2_memberList)._version + 1;

	this.setInstanceValue(tmpAddArray, ZaDistributionList.A2_addList);
	this.setInstanceValue(tmpMembersArray, ZaDistributionList.A2_memberList);
	this.getForm().parent.setDirty(true);
};


ZaNewDLXWizard.prototype.setObject =
function (entry) {
	this._containedObject = new ZaDistributionList();
	this._containedObject.attrs = new Object();
	this._containedObject[ZaDistributionList.A2_memberList] = new Array();
	this._containedObject[ZaDistributionList.A2_memberList]._version = 1;


    if(entry._uuid) {
        this._containedObject._uuid = entry._uuid;
    }

	if(entry[ZaDistributionList.A2_memberList]) {
		var memberList;
		memberList = entry[ZaDistributionList.A2_memberList];
 		for (var i = 0 ; i < memberList.length; ++i) {
 			this._containedObject[ZaDistributionList.A2_memberList].push(memberList[i]);
 		}
	}

	for (var a in entry.attrs) {
        var modelItem = this._localXForm.getModel().getItem(a) ;
        if ((modelItem != null && modelItem.type == _LIST_)
           || (entry.attrs[a] != null && entry.attrs[a] instanceof Array))
        {  //need deep clone
            this._containedObject.attrs [a] =
                    ZaItem.deepCloneListItem (entry.attrs[a]);
        } else {
            this._containedObject.attrs[a] = entry.attrs[a];
        }
    }

    //Utility members
	this._containedObject[ZaDistributionList.A2_addList] = entry[ZaDistributionList.A2_addList]||new Array(); //members to add
	this._containedObject[ZaDistributionList.A2_addList]._version = 1;
	this._containedObject[ZaDistributionList.A2_removeList] = entry[ZaDistributionList.A2_removeList]||new Array(); //members to remove
	this._containedObject[ZaDistributionList.A2_removeList]._version = 1;
	this._containedObject[ZaDistributionList.A2_poolPagenum] = entry[ZaDistributionList.A2_poolPagenum]||1;
	this._containedObject[ZaDistributionList.A2_poolNumPages] = entry [ZaDistributionList.A2_poolNumPages];
	this._containedObject[ZaDistributionList.A2_memPagenum] =entry[ZaDistributionList.A2_memPagenum]|| 1;
	this._containedObject[ZaDistributionList.A2_memNumPages] = entry [ZaDistributionList.A2_memNumPages];
	this._containedObject[ZaDistributionList.A2_query] =entry[ZaDistributionList.A2_query]|| "";
	//membership related instance variables
	this._containedObject[ZaAccount.A2_memberOf] = ZaAccountMemberOfListView.cloneMemberOf(entry);
	// the origList is inited when we load the object, it won't be modified unless the first time
	// So there is no need for me to do deep clone
	this._containedObject[ZaDistributionList.A2_origList] = entry [ZaDistributionList.A2_origList];
	this._containedObject[ZaAccount.A2_directMemberList + "_more"] = entry[ZaAccount.A2_directMemberList + "_more"];
	this._containedObject[ZaAccount.A2_directMemberList + "_offset"] = entry[ZaAccount.A2_directMemberList + "_offset"];
	this._containedObject[ZaAccount.A2_indirectMemberList + "_more"] = entry[ZaAccount.A2_indirectMemberList + "_more"];
	this._containedObject[ZaAccount.A2_indirectMemberList + "_offset"] = entry[ZaAccount.A2_indirectMemberList + "_offset"];
	this._containedObject[ZaAccount.A2_nonMemberList + "_more"] = entry[ZaAccount.A2_nonMemberList + "_more"];
	this._containedObject[ZaAccount.A2_nonMemberList + "_offset"] = entry[ZaAccount.A2_nonMemberList + "_offset"];
    this._containedObject[ZaModel.currentStep] = entry[ZaModel.currentStep] || 1;
	//dl.isgroup = this.isgroup ;

	//new ZaDistributionList don't have members, so here two are empty list
	this._containedObject[ZaDistributionList.A2_allMemberHash] = new Array();
	this._containedObject[ZaDistributionList.A2_allMemberPages] = new Array();


	if(entry.rights)
		this._containedObject.rights = entry.rights;

	if(entry.setAttrs)
		this._containedObject.setAttrs = entry.setAttrs;

	if(entry.getAttrs)
		this._containedObject.getAttrs = entry.getAttrs;

	if(entry._defaultValues)
		this._containedObject._defaultValues = entry._defaultValues;

    this._containedObject[ZaDistributionList.A2_DLOwners] = new Array();
    if (entry[ZaDistributionList.A2_DLOwners])
        this._containedObject[ZaDistributionList.A2_DLOwners] = ZaItem.deepCloneListItem(entry[ZaDistributionList.A2_DLOwners]);

	this._containedObject.name = entry.name;
        if(entry.name == ""){this._containedObject.name = ZaMsg.TBB_New;}
	this._containedObject.type = entry.type;
	this._containedObject.id = entry.id;

	if (entry[ZaDistributionList.A2_dlType] === ZaDistributionList.STATIC_DL_TYPE) {
		this._containedObject[ZaAccount.A2_autoMailServer] = entry[ZaAccount.A2_autoMailServer];
	}

    if(entry[ZaDistributionList.A2_dlType])
        this._containedObject[ZaDistributionList.A2_dlType] = entry[ZaDistributionList.A2_dlType];

	if(!entry.id) {
		if(ZaItem.hasWritePermission(ZaAccount.A_zimbraIsDelegatedAdminAccount,entry)) {
			this._containedObject.attrs[ZaDistributionList.A_mailStatus] = "enabled";
		}
	}
        //this.modifyContainedObject () ;
	this._localXForm.setInstance(this._containedObject);
}

ZaNewDLXWizard.prototype.srchResWithoutSelf =
function(resList, selfName) {
	var resArr = new Array();
	var tmpArr = resList.getArray();
	for(var i = 0; i < tmpArr.length; i++) {
		if(tmpArr[i].type == ZaItem.DL && tmpArr[i] == selfName) {
			continue;
		}else if(tmpArr[i].type == ZaItem.ALIAS && tmpArr[i].getAliasTargetObj() == selfName) {
			continue;
		}else resArr.push(tmpArr[i]);
	}
	return resArr;
}

ZaNewDLXWizard.prototype.searchAccounts =
function (orderby, isascending) {
	try {
		orderby = (orderby !=null) ? orderby : ZaAccount.A_name;
		var types = [ZaSearch.ACCOUNTS,ZaSearch.DLS,ZaSearch.ALIASES] ;
		var  searchQueryHolder = new ZaSearchQuery(ZaSearch.getSearchByNameQuery(this._containedObject["query"], types,true),
                                types , false, "",null,10);
		var result = ZaSearch.searchByQueryHolder(searchQueryHolder, this._containedObject["poolPagenum"], orderby, isascending);
		if(result.list) {
			this._containedObject.memberPool = this.srchResWithoutSelf(result.list, this._containedObject[ZaAccount.A_name]);
		}
		this._containedObject.poolNumPages = result.numPages;
		this._localXForm.setInstance(this._containedObject);

	} catch (ex) {
		// Only restart on error if we are not initialized and it isn't a parse error
		if (ex.code != ZmCsfeException.MAIL_QUERY_PARSE_ERROR) {
//			ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaNewDLXWizard.prototype.searchAccounts", null, (this._inited) ? false : true);
			ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaNewDLXWizard.prototype.searchAccounts", null, false );
		} else {
			this.popupErrorDialog(ZaMsg.queryParseError, ex);
			this._searchField.setEnabled(true);
		}
	}
}

ZaNewDLXWizard.aliasSelectionListener =
function (ev) {
	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		arr.sort();
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_alias_selection_cache, arr);
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaDistributionList.A2_alias_selection_cache, null);
	}
	if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		ZaNewDLXWizard.editAliasButtonListener.call(this);
	}
}

ZaNewDLXWizard.deleteAliasButtonListener = function () {
	var instance = this.getInstance();
	if(instance[ZaDistributionList.A2_alias_selection_cache] != null) {
		var cnt = instance[ZaDistributionList.A2_alias_selection_cache].length;
		if(cnt && instance.attrs[ZaAccount.A_zimbraMailAlias]) {
			var aliasArr = instance.attrs[ZaAccount.A_zimbraMailAlias];
			for(var i=0;i<cnt;i++) {
				var cnt2 = aliasArr.length-1;
				for(var k=cnt2;k>=0;k--) {
					if(aliasArr[k]==instance[ZaDistributionList.A2_alias_selection_cache][i]) {
						aliasArr.splice(k,1);
						break;
					}
				}
			}
			this.getModel().setInstanceValue(instance, ZaAccount.A_zimbraMailAlias, aliasArr);
		}
	}
	this.getModel().setInstanceValue(instance, ZaDistributionList.A2_alias_selection_cache, []);
	this.getForm().parent.setDirty(true);
}

ZaNewDLXWizard.editAliasButtonListener =
function () {
	var instance = this.getInstance();
	if(instance.alias_selection_cache && instance.alias_selection_cache[0]) {
		var formPage = this.getForm().parent; if(!formPage.editAliasDlg) {
			formPage.editAliasDlg = new ZaEditAliasXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "550px", "150px",ZaMsg.Edit_Alias_Title);
			formPage.editAliasDlg.registerCallback(DwtDialog.OK_BUTTON, ZaNewDLXWizard.updateAlias, this.getForm(), null);
		}
		var obj = {};
		obj[ZaAccount.A_name] = instance[ZaDistributionList.A2_alias_selection_cache][0];
		var cnt = instance.attrs[ZaAccount.A_zimbraMailAlias].length;
		for(var i=0;i<cnt;i++) {
			if(instance[ZaDistributionList.A2_alias_selection_cache][0]==instance.attrs[ZaAccount.A_zimbraMailAlias][i]) {
				obj[ZaAlias.A_index] = i;
				break;
			}
		}

		formPage.editAliasDlg.setObject(obj);
		formPage.editAliasDlg.popup();
	}
}

ZaNewDLXWizard.updateAlias = function () {
	if(this.parent.editAliasDlg) {
		this.parent.editAliasDlg.popdown();
		var obj = this.parent.editAliasDlg.getObject();
		var instance = this.getInstance();
		var arr = instance.attrs[ZaAccount.A_zimbraMailAlias];
		if(obj[ZaAlias.A_index] >=0 && arr[obj[ZaAlias.A_index]] != obj[ZaAccount.A_name] ) {
			arr[obj[ZaAlias.A_index]] = obj[ZaAccount.A_name];
			this.getModel().setInstanceValue(this.getInstance(),ZaAccount.A_zimbraMailAlias, arr);
			this.getModel().setInstanceValue(this.getInstance(),ZaDistributionList.A2_alias_selection_cache, new Array());
			this.parent.setDirty(true);
		}
	}
}

ZaNewDLXWizard.addAliasButtonListener =
function () {
	var instance = this.getInstance();
	var formPage = this.getForm().parent;
	if(!formPage.addAliasDlg) {
		formPage.addAliasDlg = new ZaEditAliasXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "550px", "150px",ZaMsg.Add_Alias_Title);
		formPage.addAliasDlg.registerCallback(DwtDialog.OK_BUTTON, ZaNewDLXWizard.addAlias, this.getForm(), null);
	}

	var obj = {};
	obj[ZaAccount.A_name] = "";
	obj[ZaAlias.A_index] = -1;
	formPage.addAliasDlg.setObject(obj);
	formPage.addAliasDlg.popup();
}

ZaNewDLXWizard.addAlias  = function () {
	if(this.parent.addAliasDlg) {
		this.parent.addAliasDlg.popdown();
		var obj = this.parent.addAliasDlg.getObject();
		if(obj[ZaAccount.A_name] && obj[ZaAccount.A_name].length>1) {
			var instance = this.getInstance();
			var arr = instance.attrs[ZaAccount.A_zimbraMailAlias];
			arr.push(obj[ZaAccount.A_name]);
			this.getModel().setInstanceValue(this.getInstance(),ZaAccount.A_zimbraMailAlias, arr);
			this.getModel().setInstanceValue(this.getInstance(),ZaDistributionList.A2_alias_selection_cache, new Array());
			this.parent.setDirty(true);
		}
	}
}

ZaNewDLXWizard.isEditAliasEnabled = function () {
	return (!AjxUtil.isEmpty(this.getInstanceValue(ZaDistributionList.A2_alias_selection_cache)) && this.getInstanceValue(ZaAccount.A2_alias_selection_cache).length==1);
}

ZaNewDLXWizard.isDeleteAliasEnabled = function () {
	return (!AjxUtil.isEmpty(this.getInstanceValue(ZaDistributionList.A2_alias_selection_cache)));
}


ZaNewDLXWizard.NOTES_TAB_ATTRS = [ZaAccount.A_notes];
ZaNewDLXWizard.NOTES_TAB_RIGHTS = [];

ZaNewDLXWizard.MEMBEROF_TAB_ATTRS = [];
ZaNewDLXWizard.MEMBEROF_TAB_RIGHTS = [ZaDistributionList.GET_DL_MEMBERSHIP_RIGHT];

ZaNewDLXWizard.ALIASES_TAB_ATTRS = [ZaAccount.A_zimbraMailAlias];
ZaNewDLXWizard.ALIASES_TAB_RIGHTS = [ZaDistributionList.ADD_DL_ALIAS_RIGHT,ZaDistributionList.REMOVE_DL_ALIAS_RIGHT];

ZaNewDLXWizard.OWNER_TAB_ATTRS = [];
ZaNewDLXWizard.OWNER_TAB_RIGHTS = [];

ZaNewDLXWizard.PREF_TAB_ATTRS = [ZaDistributionList.A_zimbraPrefReplyToEnabled, ZaDistributionList.A_zimbraPrefReplyToDisplay,
    ZaDistributionList.A_zimbraPrefReplyToAddress];
ZaNewDLXWizard.PREF_TAB_RIGHTS = [];

ZaNewDLXWizard.myXFormModifier = function(xFormObject, entry) {
	var sourceHeaderList = new Array();
	var sortable=1;
	sourceHeaderList[0] = new ZaListHeaderItem("type", ZaMsg.ALV_Type_col, null, null, null, "objectClass", true, true);
	sourceHeaderList[1] = new ZaListHeaderItem(ZaAccount.A_name, ZaMsg.ALV_Name_col, null, null, sortable++, ZaAccount.A_name, true, true);
	//idPrefix, label, iconInfo, width, sortable, sortField, resizeable, visible
	sourceHeaderList[2] = new ZaListHeaderItem(ZaAccount.A_displayname, ZaMsg.ALV_DspName_col, null, null, sortable++,ZaAccount.A_displayname, true, true);
	//sourceHeaderList[3] = new ZaListHeaderItem(null, null, null, "10px", null, null, false, true);
	var membersHeaderList = new Array();
	membersHeaderList[0] = new ZaListHeaderItem(ZaAccount.A_name, ZaMsg.ALV_Name_col, null, "100%", sortable++, ZaAccount.A_name, true, true);

	var directMemberOfHeaderList = new ZaAccountMemberOfsourceHeaderList(ZaAccountMemberOfsourceHeaderList.DIRECT);
	var indirectMemberOfHeaderList = new ZaAccountMemberOfsourceHeaderList(ZaAccountMemberOfsourceHeaderList.INDIRECT);
	var nonMemberOfHeaderList = new ZaAccountMemberOfsourceHeaderList(ZaAccountMemberOfsourceHeaderList.NON);

    this.TAB_INDEX = 0;
    this.stepChoices = [];

	var _tab1, _tab2, _tab3, _tab4, _tab5, _tab6;
	_tab1 = ++this.TAB_INDEX;
	this.stepChoices.push({value:_tab1, label:ZaMsg.DLXV_TabMembers});

	if(ZaTabView.isTAB_ENABLED(entry,ZaNewDLXWizard.NOTES_TAB_ATTRS, ZaNewDLXWizard.NOTES_TAB_RIGHTS)) {
		_tab2 = ++this.TAB_INDEX;
		this.stepChoices.push({value:_tab2, label:ZaMsg.DLXV_TabProperties});
	}

	if(ZaTabView.isTAB_ENABLED(entry,ZaNewDLXWizard.MEMBEROF_TAB_ATTRS, ZaNewDLXWizard.MEMBEROF_TAB_RIGHTS)) {
		_tab3 = ++this.TAB_INDEX;
		this.stepChoices.push({value:_tab3, label:ZaMsg.TABT_MemberOf});
	}

	if(ZaTabView.isTAB_ENABLED(entry,ZaNewDLXWizard.ALIASES_TAB_ATTRS, ZaNewDLXWizard.ALIASES_TAB_RIGHTS)) {
		_tab4 = ++this.TAB_INDEX;
		this.stepChoices.push({value:_tab4, label:ZaMsg.TABT_Aliases});
	}

	if(ZaTabView.isTAB_ENABLED(entry,ZaNewDLXWizard.OWNER_TAB_ATTRS, ZaNewDLXWizard.OWNER_TAB_RIGHTS)) {
		_tab5 = ++this.TAB_INDEX;
		this.stepChoices.push({value:_tab5, label:ZaMsg.TABT_Owners});
	}

	if(ZaTabView.isTAB_ENABLED(entry,ZaNewDLXWizard.PREF_TAB_ATTRS, ZaNewDLXWizard.PREF_TAB_RIGHTS)) {
		_tab6 = ++this.TAB_INDEX;
		this.stepChoices.push({value:_tab6, label:ZaMsg.TABT_Preferences});
	}

	xFormObject.tableCssStyle = "width:100%;overflow:auto;";
	xFormObject.numCols=5;
	xFormObject.colSizes = [10,"auto", 20, "auto", 10];
	xFormObject.itemDefaults = {
			_INPUT_: { cssClass:"inputBorder" },
			_TEXTAREA_: {cssClass: "inputBorder"},
			_TEXTFIELD_: {cssClass: "inputBorder", containerCssStyle:"width:95%"}
	    };

	var cases = [];

	var hMsgMemberNum, hMemberList, wMemberList, hMemberPool, wMemberPool, wRightPanel;

    hMsgMemberNum = 30;
    hMemberList = 200;
    wMemberList = "98%";
    hMemberPool = 250;
    wMemberPool = "98%";

    wRightPanel = "100%";

    var case1 = {
        type: _CASE_,
        caseKey: _tab1,
        numCols: 2,
        id: "dl_form_members",
        colSizes: ["320px", "380px"],
        cssStyle: "padding-top:5px; table-layout:fixed;",
        items: [
            {
                type: _GROUP_,
                width: "98%",
                numCols: 1,
                items: [
                    {
                        type: _SPACER_,
                        height: "5"
                    },
                    {
                        type: _GROUP_,
                        width: "96%",
                        id: "dl_form_members_general_group",
                        numCols: 2,
                        colSizes: [100, "*"],
                        items: [
                            {
                                ref: ZaAccount.A_name,
                                type: _EMAILADDR_,
                                msgName: ZaMsg.MSG_LabelListName,
                                label: ZaMsg.LBL_LabelListName,
                                forceUpdate: true,
                                tableCssStyle: "width: 100%",
                                inputWidth: "70px",
                                domainPartWidth: "80px",
                                id: "dl_name_field",
                                nameContainerCss: "width: 70px",
                                domainContainerWidth: "80px",
                                midContainerCss: "width: 20px",
                                visibilityChecks: [],
                                enableDisableChecks: [
                                    [
                                        XFormItem.prototype.hasRight,
                                        ZaDistributionList.RENAME_DL_RIGHT
                                    ]
                                ]
                            },
                            {
                                type: _SPACER_,
                                height: "3"
                            },
                            {
                                ref: ZaAccount.A_displayname,
                                type: _TEXTFIELD_,
                                label: ZaMsg.NAD_DisplayName,
                                msgName: ZaMsg.NAD_DisplayName,
                                align: _LEFT_,
                                cssClass: "admin_xform_name_input",
                                width: "95%"
                            },
                            {
                                type: _SPACER_,
                                height: "3"
                            },
                            {
                                ref: "description",
                                msgName: ZaMsg.NAD_Description,
                                label: ZaMsg.NAD_Description,
                                labelLocation: _LEFT_,
                                align: _LEFT_,
                                type: _TEXTAREA_,
                                enableDisableChecks: [ZaItem.hasWritePermission],
                                visibilityChecks: [ZaItem.hasReadPermission],
                                cssClass: "admin_xform_name_input",
                                cssStyle: "resize: none",
                                width: "100%",
                                height: "100"
                            }
                        ]
                    },
                    {
                        type: _SPACER_,
                        height: "20"
                    },
                    {
                        type: _GROUPER_,
                        borderCssClass: "LeftGrouperBorder",
                        width: "100%",
                        numCols: 1,
                        colSizes: ["auto"],
                        label: ZaMsg.DLXV_LabelListMembers,
                        items: [
                            {
                                type: _GROUP_,
                                width: "100%",
                                height: hMsgMemberNum,
                                numCols: 3,
                                colSizes: [ "*", "20px", "104px"],
                                items: [
                                    {
                                        type: _OUTPUT_,
                                        ref: ZaDistributionList.A2_numMembers,
                                        align: _LEFT_,
                                        valueChangeEventSources: [
                                            ZaDistributionList.A2_numMembers,
                                            ZaDistributionList.A2_memNumPages
                                        ],
                                        getDisplayValue: ZaDLXFormView.showMembersNum
                                    },
                                    {
                                        type: _CELLSPACER_
                                    },
                                    {
                                        type: _GROUP_,
                                        width: "100%",
                                        numCols: 3,
                                        colSizes: ["32px", "40px", "32px"],
                                        visibilityChangeEventSources: [ZaDistributionList.A2_memNumPages],
                                        visibilityChecks: [
                                            [
                                                ZaDLXFormView.isMoreThanOnePage,
                                                ZaDistributionList.A2_memNumPages
                                            ]
                                        ],
                                        items: [
                                            {
                                                type: _DWT_BUTTON_,
                                                label: null,
                                                labelLocation: _NONE_,
                                                width: "100%",
                                                id: "backButton",
                                                icon: "LeftArrow",
                                                disIcon: "LeftArrowDis",
                                                enableDisableChecks: [ZaDLXFormView.shouldEnableMemBackButton],
                                                enableDisableChangeEventSources: [
                                                    ZaDistributionList.A2_memberList,
                                                    ZaDistributionList.A2_memNumPages,
                                                    ZaDistributionList.A2_memPagenum
                                                ],
                                                onActivate: "ZaDLXFormView.backMemButtonHndlr.call(this,event)"
                                            },
                                            {
                                                type: _OUTPUT_,
                                                ref: ZaDistributionList.A2_memPagenum,
                                                valueChangeEventSources: [
                                                    ZaDistributionList.A2_memPagenum,
                                                    ZaDistributionList.A2_memNumPages
                                                ],
                                                align: _CENTER_,
                                                getDisplayValue: ZaDLXFormView.showMembersPaging
                                            },
                                            {
                                                type: _DWT_BUTTON_,
                                                label: null,
                                                labelLocation: _NONE_,
                                                width: "100%",
                                                id: "fwdButton",
                                                icon: "RightArrow",
                                                disIcon: "RightArrowDis",
                                                enableDisableChecks: [ZaDLXFormView.shouldEnableMemForwardButton],
                                                enableDisableChangeEventSources: [
                                                    ZaDistributionList.A2_memberList,
                                                    ZaDistributionList.A2_memNumPages,
                                                    ZaDistributionList.A2_memPagenum
                                                ],
                                                onActivate: "ZaDLXFormView.fwdMemButtonHndlr.call(this,event)"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                type: _SPACER_,
                                height: "5"
                            },
                            {
                                ref: ZaDistributionList.A2_memberList,
                                type: _DWT_LIST_,
                                height: hMemberList,
                                width: wMemberList,
                                cssClass: "DLTarget",
                                cssStyle: "margin-left: 5px; ",
                                widgetClass: ZaAccMiniListView,
                                headerList: membersHeaderList,
                                hideHeader: true,
                                onSelection: ZaDLXFormView.membersSelectionListener,
                                bmolsnr: true
                            },
                            {
                                type: _SPACER_,
                                height: "8"
                            },
                            {
                                type: _GROUP_,
                                width: "98%",
                                numCols: 3,
                                cssStyle: "table-layout:fixed",
                                items: [
                                    {
                                        type: _DWT_BUTTON_,
                                        id: "removeButton",
                                        label: ZaMsg.DLXV_ButtonRemoveSelected,
                                        width: "140px", //in IE should use it to control width
                                        nowrap: true,
                                        cssStyle: "padding:0px;",
                                        enableDisableChangeEventSources: [ZaDistributionList.A2_membersSelected],
                                        enableDisableChecks: [
                                            [
                                                XForm.checkInstanceValueNotEmty,
                                                ZaDistributionList.A2_membersSelected
                                            ],
                                            [
                                                XFormItem.prototype.hasRight,
                                                ZaDistributionList.REMOVE_DL_MEMBER_RIGHT
                                            ]
                                        ],
                                        onActivate: "ZaDLXFormView.removeSelectedMembers.call(this,event)"
                                    },
                                    {
                                        type: _CELLSPACER_,
                                        width: "10px" //in IE should use it to control width
                                    },
                                    {
                                        type: _DWT_BUTTON_,
                                        label: ZaMsg.DLXV_ButtonRemovePage,
                                        width: "140px", //in IE should use it to control width
                                        nowrap: true,
                                        cssStyle: "padding:0px;",
                                        visibilityChangeEventSources: [ZaDistributionList.A2_numMembers],
                                        visibilityChecks: [
                                            [
                                                XForm.checkInstanceValueNot,
                                                ZaDistributionList.A2_numMembers,
                                                0
                                            ]
                                        ],
                                        enableDisableChangeEventSources: [ZaDistributionList.A2_memberList],
                                        enableDisableChecks: [
                                            ZaDLXFormView.shouldEnableRemoveThisPageButton,
                                            [
                                                XFormItem.prototype.hasRight,
                                                ZaDistributionList.REMOVE_DL_MEMBER_RIGHT
                                            ]
                                        ],
                                        onActivate: "ZaDLXFormView.removeOnePageMembers.call(this,event)"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        type: _SPACER_,
                        height: "5"
                    }
                ]
            },
            {
                type: _ZARIGHT_GROUPER_,
                numCols: 1,
                width: wRightPanel,
                label: ZaMsg.DLXV_GroupLabelAddMembers,
                items: [
                    {
                        type: _GROUP_,
                        width: "100%",
                        numCols: 3,
                        colSizes: ["64%", "6%", "30%"],
                        items: [
                            {
                                type: _GROUP_,
                                width: "100%",
                                numCols: 2,
                                colSizes: ["20%", "80%"],
                                items: [
                                    {
                                        type: _TEXTFIELD_,
                                        cssClass: "admin_xform_name_input",
                                        ref: ZaSearch.A_query,
                                        label: ZaMsg.DLXV_LabelFind,
                                        labelLocation: _LEFT_,
                                        labelCssStyle: "white-space: nowrap;",
                                        visibilityChecks: [],
                                        enableDisableChecks: [],
                                        width: "95%",
                                        align: _LEFT_,
                                        elementChanged: function(elementValue, instanceValue, event) {
                                            var charCode = event.charCode;
                                            if (charCode == 13 || charCode == 3) {
                                                ZaDLXFormView.srchButtonHndlr.call(this);
                                            } else {
                                                this.getForm().itemChanged(this, elementValue, event);
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                type: _CELLSPACER_
                            },
                            {
                                type: _DWT_BUTTON_,
                                label: ZaMsg.DLXV_ButtonSearch,
                                onActivate: ZaDLXFormView.srchButtonHndlr
                            }
                        ]
                    },
                    {
                        type: _SPACER_,
                        height: "5",
                        colSpan: "*"
                    },
                    {
                        type: _GROUP_,
                        width: "100%",
                        numCols: 3,
                        colSizes: [ "*", "10px", "104px"],
                        items: [
                            {
                                type: _GROUP_,
                                items: [
                                    {
                                        type: _OUTPUT_,
                                        ref: ZaDistributionList.A2_totalNumInPool,
                                        align: _LEFT_,
                                        visibilityChecks: [
                                            [
                                                ZaDLXFormView.checkTotalNumInPool,
                                                -1
                                            ]
                                        ],
                                        getDisplayValue: ZaDLXFormView.showSearchFoundNum,
                                        nowrap: false
                                    }
                                ]
                            },
                            {
                                type: _CELLSPACER_
                            },
                            {
                                type: _GROUP_,
                                visibilityChangeEventSources: [ZaDistributionList.A2_poolNumPages],
                                visibilityChecks: [
                                    [
                                        ZaDLXFormView.isMoreThanOnePage,
                                        ZaDistributionList.A2_poolNumPages
                                    ]
                                ],
                                numCols: 3,
                                colSizes: ["32px", "40px", "32px"],
                                width: "100%",
                                items: [
                                    {
                                        type: _DWT_BUTTON_,
                                        label: null,
                                        labelLocation: _NONE_,
                                        id: "backButton",
                                        icon: "LeftArrow",
                                        disIcon: "LeftArrowDis",
                                        enableDisableChecks: [ZaDLXFormView.shouldEnablePoolBackButton],
                                        enableDisableChangeEventSources: [ZaDistributionList.A2_poolPagenum],
                                        onActivate: "ZaDLXFormView.backPoolButtonHndlr.call(this,event)"
                                    },
                                    {
                                        type: _OUTPUT_,
                                        ref: ZaDistributionList.A2_poolPagenum,
                                        align: _CENTER_,
                                        getDisplayValue: ZaDLXFormView.showSearchFoundPaging
                                    },
                                    {
                                        type: _DWT_BUTTON_,
                                        label: null,
                                        labelLocation: _NONE_,
                                        id: "fwdButton",
                                        icon: "RightArrow",
                                        disIcon: "RightArrowDis",
                                        enableDisableChecks: [ZaDLXFormView.shouldEnablePoolForwardButton],
                                        enableDisableChangeEventSources: [ZaDistributionList.A2_poolPagenum],
                                        onActivate: "ZaDLXFormView.fwdPoolButtonHndlr.call(this,event)"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        type: _SPACER_,
                        height: "5"
                    },
                    {
                        ref: ZaDistributionList.A2_memberPool,
                        type: _DWT_LIST_,
                        height: hMemberPool,
                        width:  wMemberPool,
                        cssClass: "DLSource",
                        forceUpdate: true,
                        widgetClass: ZaAccMiniListView,
                        headerList: sourceHeaderList,
                        hideHeader: false,
                        onSelection: ZaDLXFormView.memberPoolSelectionListener
                    },
                    {
                        type: _SPACER_,
                        height: "5",
                        colSpan: "*"
                    },
                    {
                        type: _GROUP_,
                        width: wRightPanel,
                        items: [
                            {
                                type: _GROUP_,
                                width: "98%",
                                numCols: 3,
                                cssStyle: "table-layout:fixed",
                                items: [
                                    {
                                        type: _DWT_BUTTON_,
                                        label: ZaMsg.DLXV_ButtonAddSelected,
                                        width: "140px", //in IE should use it to control width
                                        nowrap: true,
                                        onActivate: "ZaDLXFormView.addSelectedAddressesToMembers.call(this,event)",
                                        enableDisableChangeEventSources: [ZaDistributionList.A2_memberPoolSelected],
                                        enableDisableChecks: [
                                            [
                                                XForm.checkInstanceValueNotEmty,
                                                ZaDistributionList.A2_memberPoolSelected
                                            ],
                                            [
                                                XFormItem.prototype.hasRight,
                                                ZaDistributionList.ADD_DL_MEMBER_RIGHT
                                            ]
                                        ]
                                    },
                                    {
                                        type: _CELLSPACER_,
                                        width: "10px" //in IE should use it to control width
                                    },
                                    {
                                        type: _DWT_BUTTON_,
                                        label: ZaMsg.DLXV_ButtonAddPage,
                                        width: "140px", //in IE should use it to control width
                                        nowrap: true,
                                        onActivate: "ZaDLXFormView.addOnePageAddressesToMembers.call(this,event)",
                                        visibilityChangeEventSources: [ZaDistributionList.A2_totalNumInPool],
                                        visibilityChecks: [
                                            [
                                                ZaDLXFormView.checkTotalNumInPool,
                                                1
                                            ]
                                        ],
                                        enableDisableChangeEventSources: [ZaDistributionList.A2_memberPool],
                                        enableDisableChecks: [
                                            [
                                                XForm.checkInstanceValueNotEmty,
                                                ZaDistributionList.A2_memberPool
                                            ],
                                            [
                                                XFormItem.prototype.hasRight,
                                                ZaDistributionList.ADD_DL_MEMBER_RIGHT
                                            ]
                                        ]
                                    }
                                ]
                            },
                            {
                                type: _SPACER_
                            }
                        ]
                    },
                    {
                        type: _SPACER_,
                        height: "5"
                    },
                    {
                        type: _OUTPUT_,
                        value: ZaMsg.DLXV_GroupLabelEnterAddressBelow,
                        visibilityChecks: [
                            [
                                XFormItem.prototype.hasRight,
                                ZaDistributionList.ADD_DL_MEMBER_RIGHT
                            ]
                        ]
                    },
                    {
                        type: _SPACER_,
                        height: "5"
                    }
                    ,
                    {
                        ref: ZaDistributionList.A2_optionalAdd,
                        type: _TEXTAREA_,
                        cssStyle: "resize: none",
                        width: "98%",
                        height: 98,
                        bmolsnr: true,
                        visibilityChecks: [
                            [
                                XFormItem.prototype.hasRight,
                                ZaDistributionList.ADD_DL_MEMBER_RIGHT
                            ]
                        ],
                        enableDisableChecks: []
                    },
                    {
                        type: _SPACER_,
                        height: "5",
                        visibilityChecks: [
                            [
                                XFormItem.prototype.hasRight,
                                ZaDistributionList.ADD_DL_MEMBER_RIGHT
                            ]
                        ]
                    },
                    {
                        type: _GROUP_,
                        numCols: 2,
                        colSizes: ["20%", "80%"],
                        width: wRightPanel,
                        visibilityChecks: [
                            [
                                XFormItem.prototype.hasRight,
                                ZaDistributionList.ADD_DL_MEMBER_RIGHT
                            ]
                        ],
                        items: [
                            {
                                type: _DWT_BUTTON_,
                                label: ZaMsg.DLXV_ButtonAddFromFreeForm,
                                onActivate: "ZaDLXFormView.addFreeFormAddressToMembers.call(this,event)",
                                enableDisableChecks: [
                                    [
                                        XForm.checkInstanceValueNotEmty,
                                        ZaDistributionList.A2_optionalAdd
                                    ]
                                ],
                                enableDisableChangeEventSources: [ZaDistributionList.A2_optionalAdd]
                            },
                            {
                                type: _OUTPUT_,
                                value: ZaMsg.DLXV_SeparateAddresses
                            }
                        ]
                    }
                ]
            }
        ]
    };

    cases.push(case1);

    if(_tab2) {
        var case2 = {
            type: _CASE_,
            caseKey: _tab2,
            colSpan: "*",
            items: [
                {
                    type: _GROUPER_,
                    label: ZaMsg.DLXV_LabelProperties,
                    id: "dl_properties",
                    colSpan: "*",
                    numCols: 2,
                    colSizes: [175, "*"],
                    visibilityChangeEventSources: [],
                    items: [
                        {
                            ref: "zimbraMailStatus",
                            type: _WIZ_CHECKBOX_,
                            trueValue: "enabled",
                            falseValue: "disabled",
                            align: _LEFT_,
                            nowrap: false,
                            labelWrap: true,
                            label: ZaMsg.DLXV_LabelEnabled,
                            msgName: ZaMsg.DLXV_LabelEnabled,
                            labelLocation: _LEFT_,
                            labelCssClass: "xform_label",
                            cssStyle: "padding-left:0px;margin-bottom-10px;"
                        },
                        {
                            ref: ZaAccount.A_zimbraHideInGal,
                            type: _WIZ_CHECKBOX_,
                            trueValue: "TRUE",
                            falseValue: "FALSE",
                            label: ZaMsg.LBL_zimbraHideInGal,
                            labelLocation: _LEFT_,
                            labelCssClass: "xform_label",
                            labelWrap: true,
                            align: _LEFT_,
                            nowrap: false,
                            msgName: ZaMsg.LBL_zimbraHideInGal,
                            cssStyle: "padding-left: 0px; margin-bottom: 10px;"
                        },
                        {
                            type: _GROUP_,
                            colSpan: "*",
                            colSizes: [ "175px", "*"],
                            labelCssClass: "xform_label",
                            cssStyle: "padding-left: 0px",
                            items: [
                                {
                                    ref: ZaDistributionList.A2_dlType,
                                    type: _WIZ_CHECKBOX_,
                                    trueValue: ZaDistributionList.DYNAMIC_DL_TYPE,
                                    falseValue: ZaDistributionList.STATIC_DL_TYPE,
                                    label: ZaMsg.LBL_DL_Type,
									labelLocation: _LEFT_,
                                    labelCssClass: "xform_label",
                                    cssStyle: "margin-bottom-10px;",
                                    labelWrap: true,
                                    align: _LEFT_,
                                    nowrap: false,
                                    msgName: ZaMsg.LBL_DL_Type,
                                    subLabel: "",
                                    visibilityChecks: [ZaZimbraAdmin.canCreateGroup],
                                    enableDisableChecks: [],
                                    elementChanged: function (elementValue, instanceValue, event) {
                                        var memberItem = this.getParentItem().items[2];
                                        if (elementValue == ZaDistributionList.STATIC_DL_TYPE) {
                                            if (memberItem.hasError()) {
                                                memberItem.clearError();
                                            }
                                            memberItem.setInstanceValue(null);
                                        } else {
                                            if (this.getInstanceValue(ZaDistributionList.A_zimbraIsACLGroup) != "TRUE") {
                                                memberItem.setError(AjxMsg.valueIsRequired);
                                            }
                                        }
                                        this.getForm().itemChanged(this, elementValue, event);
                                    }
                                },
                                {
                                    type: _GROUP_,
                                    numCols: 3,
                                    colSizes: ["25%", "10%", "65%"],
                                    nowrap: true,
                                    label: ZaMsg.NAD_MailServer,
                                    labelLocation: _LEFT_,
                                    visibilityChangeEventSources: [
                                        ZaDistributionList.A2_dlType
                                    ],
                                    visibilityChecks: [
                                        [
                                            ZaItem.hasWritePermission,
                                            ZaAccount.A_mailHost
                                        ],
                                        [
                                            XForm.checkInstanceValue,
                                            ZaDistributionList.A2_dlType,
                                            ZaDistributionList.STATIC_DL_TYPE
                                        ]
                                    ],
                                    items: [
                                        {
                                            ref: ZaAccount.A_mailHost,
                                            type: _OSELECT1_,
                                            label: null,
                                            editable: false,
                                            choices: ZaApp.getInstance().getServerListChoices(),
                                            enableDisableChecks: [ZaAccount.isAutoMailServer],
                                            enableDisableChangeEventSources: [ZaAccount.A2_autoMailServer],
                                            visibilityChecks: [],
                                            cssStyle: "margin-left: 5px;"
                                        },
                                        {
                                            ref: ZaAccount.A2_autoMailServer,
                                            type: _WIZ_CHECKBOX_,
                                            msgName: ZaMsg.NAD_Auto,
                                            label: ZaMsg.NAD_Auto,
                                            trueValue: "TRUE",
                                            falseValue: "FALSE",
                                            visibilityChecks: [],
                                            labelLocation: _RIGHT_,
                                            align: _RIGHT_,
                                            subLabel: "",
                                            enableDisableChecks: []
                                        }
                                    ]
                                },
                                {
                                    ref: ZaDistributionList.A_zimbraIsACLGroup,
                                    type: _WIZ_CHECKBOX_,
                                    trueValue: "TRUE",
                                    falseValue: "FALSE",
                                    label: ZaMsg.LBL_ACL_Group,
                                    labelLocation: _LEFT_,
                                    labelCssClass: "xform_label",
                                    align: _LEFT_,
                                    subLabel: "",
                                    visibilityChangeEventSources: [ZaDistributionList.A2_dlType],
                                    visibilityChecks: [
                                        [
                                            XForm.checkInstanceValue,
                                            ZaDistributionList.A2_dlType,
                                            ZaDistributionList.DYNAMIC_DL_TYPE
                                        ]
                                    ],
                                    enableDisableChecks: [],
                                    elementChanged: function (elementValue, instanceValue, event) {
                                        var memberItem = this.getParentItem().items[2];
                                        if (elementValue == "TRUE") {
                                            if (memberItem.hasError()) {
                                                memberItem.clearError();
                                            }
                                            memberItem.setInstanceValue(null);
                                        } else {
                                            memberItem.setError(AjxMsg.valueIsRequired);
                                        }
                                        this.getForm().itemChanged(this, elementValue, event);
                                    }
                                },
                                {
                                    type: _INPUT_,
                                    ref: ZaDistributionList.A_memberOfURL,
                                    label: ZaMsg.LBL_Member_URL,
                                    labelLocation: _LEFT_,
                                    labelCssClass: "xform_label",
                                    cssStyle: "margin-left: 5px;",
                                    width: "80%",
                                    bmolsnr: true,
                                    visibilityChangeEventSources: [ZaDistributionList.A2_dlType],
                                    visibilityChecks: [
                                        [
                                            XForm.checkInstanceValue,
                                            ZaDistributionList.A2_dlType,
                                            ZaDistributionList.DYNAMIC_DL_TYPE
                                        ]
                                    ],
                                    enableDisableChangeEventSources: [ZaDistributionList.A_zimbraIsACLGroup],
                                    enableDisableChecks: [ZaDLXFormView.isNotACLGroup]
                                }
                            ]
                        },
                        {
                            type: _SPACER_,
                            height: "5"
                        },
                        {
                            type: _GROUP_,
                            numCols: 2,
                            colSizes: [ "5%", "*"],
                            label: ZaMsg.DLXV_SubscriptionRequest,
                            labelLocation: _LEFT_,
                            items: [
                                {
                                    ref: ZaDistributionList.A_zimbraDistributionListSubscriptionPolicy,
                                    type: _RADIO_,
                                    groupname: "subscription_settings",
                                    msgName: ZaMsg.DLXV_SubscriptionPolicyAccept,
                                    label: ZaMsg.DLXV_SubscriptionPolicyAccept,
                                    onChange: ZaTabView.onFormFieldChanged,
                                    updateElement: function () {
                                        this.getElement().checked = (this.getInstanceValue(ZaDistributionList.A_zimbraDistributionListSubscriptionPolicy) == ZaDistributionList.A2_zimbraDLSubscriptionPolicyAccept);
                                    },
                                    elementChanged: function(elementValue,instanceValue, event) {
                                        this.getForm().itemChanged(
                                            this,
                                            ZaDistributionList.A2_zimbraDLSubscriptionPolicyAccept,
                                            event
                                        );
                                    }
                                },
                                {
                                    ref: ZaDistributionList.A_zimbraDistributionListSubscriptionPolicy,
                                    type: _RADIO_,
                                    groupname: "subscription_settings",
                                    msgName: ZaMsg.DLXV_SubscriptionPolicyApproval,
                                    label: ZaMsg.DLXV_SubscriptionPolicyApproval,
                                    onChange: ZaTabView.onFormFieldChanged,
                                    updateElement: function () {
                                        this.getElement().checked = (this.getInstanceValue(ZaDistributionList.A_zimbraDistributionListSubscriptionPolicy) == ZaDistributionList.A2_zimbraDLSubscriptionPolicyApproval);
                                    },
                                    elementChanged: function(elementValue,instanceValue, event) {
                                        this.getForm().itemChanged(
                                            this,
                                            ZaDistributionList.A2_zimbraDLSubscriptionPolicyApproval,
                                            event
                                        );
                                    }
                                },
                                {
                                    ref: ZaDistributionList.A_zimbraDistributionListSubscriptionPolicy,
                                    type: _RADIO_,
                                    groupname: "subscription_settings",
                                    msgName: ZaMsg.DLXV_SubscriptionPolicyReject,
                                    label: ZaMsg.DLXV_SubscriptionPolicyReject,
                                    onChange: ZaTabView.onFormFieldChanged,
                                    updateElement: function () {
                                        this.getElement().checked = (this.getInstanceValue(ZaDistributionList.A_zimbraDistributionListSubscriptionPolicy) == ZaDistributionList.A2_zimbraDLSubscriptionPolicyReject);
                                    },
                                    elementChanged: function(elementValue,instanceValue, event) {
                                        this.getForm().itemChanged(
                                            this,
                                            ZaDistributionList.A2_zimbraDLSubscriptionPolicyReject,
                                            event
                                        );
                                    }
                                }
                            ]
                        },
                        {
                            type: _SPACER_,
                            height: "5"
                        },
                        {
                            type: _GROUP_,
                            numCols: 2,
                            colSizes: [ "5%", "*"],
                            label: ZaMsg.DLXV_UnsubscriptionRequest,
                            labelLocation: _LEFT_,
                            items: [
                                {
                                    ref: ZaDistributionList.A_zimbraDistributionListUnsubscriptionPolicy,
                                    type: _RADIO_,
                                    groupname: "unsubscription_settings",
                                    msgName: ZaMsg.DLXV_SubscriptionPolicyAccept,
                                    label: ZaMsg.DLXV_SubscriptionPolicyAccept,
                                    onChange: ZaTabView.onFormFieldChanged,
                                    updateElement: function () {
                                        this.getElement().checked = (this.getInstanceValue(ZaDistributionList.A_zimbraDistributionListUnsubscriptionPolicy) == ZaDistributionList.A2_zimbraDLSubscriptionPolicyAccept);
                                    },
                                    elementChanged: function (elementValue,instanceValue, event) {
                                        this.getForm().itemChanged(
                                            this,
                                            ZaDistributionList.A2_zimbraDLSubscriptionPolicyAccept,
                                            event
                                        );
                                    }
                                },
                                {
                                    ref: ZaDistributionList.A_zimbraDistributionListUnsubscriptionPolicy,
                                    type: _RADIO_,
                                    groupname: "unsubscription_settings",
                                    msgName: ZaMsg.DLXV_SubscriptionPolicyApproval,
                                    label: ZaMsg.DLXV_SubscriptionPolicyApproval,
                                    onChange: ZaTabView.onFormFieldChanged,
                                    updateElement: function () {
                                        this.getElement().checked = (this.getInstanceValue(ZaDistributionList.A_zimbraDistributionListUnsubscriptionPolicy) == ZaDistributionList.A2_zimbraDLSubscriptionPolicyApproval);
                                    },
                                    elementChanged: function (elementValue,instanceValue, event) {
                                        this.getForm().itemChanged(
                                            this,
                                            ZaDistributionList.A2_zimbraDLSubscriptionPolicyApproval,
                                            event
                                        );
                                    }
                                },
                                {
                                    ref: ZaDistributionList.A_zimbraDistributionListUnsubscriptionPolicy,
                                    type: _RADIO_,
                                    groupname: "unsubscription_settings",
                                    msgName: ZaMsg.DLXV_SubscriptionPolicyReject,
                                    label: ZaMsg.DLXV_SubscriptionPolicyReject,
                                    onChange: ZaTabView.onFormFieldChanged,
                                    updateElement: function () {
                                        this.getElement().checked = (this.getInstanceValue(ZaDistributionList.A_zimbraDistributionListUnsubscriptionPolicy) == ZaDistributionList.A2_zimbraDLSubscriptionPolicyReject);
                                    },
                                    elementChanged: function (elementValue,instanceValue, event) {
                                        this.getForm().itemChanged(
                                            this,
                                            ZaDistributionList.A2_zimbraDLSubscriptionPolicyReject,
                                            event
                                        );
                                    }
                                }
                            ]
                        },
                        {
                            type: _SPACER_,
                            height: "5"
                        },
                        {
                            ref: ZaDistributionList.A_zimbraDistributionListSendShareMessageToNewMembers,
                            type: _WIZ_CHECKBOX_,
                            trueValue: "TRUE",
                            falseValue: "FALSE",
                            align: _LEFT_,
                            nowrap: false,
                            labelWrap: true,
                            label: ZaMsg.DL_zimbraDistributionListSendShareMessageToNewMembers,
                            subLabel: "",
                            msgName: ZaMsg.DL_zimbraDistributionListSendShareMessageToNewMembers,
                            labelLocation: _LEFT_,
                            labelCssClass: "xform_label",
                            cssStyle: "padding-left: 0px"
                        },
                        {
                            type: _SPACER_,
                            height: "5"
                        },
                        {
                            ref: ZaAccount.A_notes,
                            type: _TEXTAREA_,
                            label: ZaMsg.DLXV_LabelNotes,
                            labelLocation: _LEFT_,
                            width: "400",
                            height: "100",
                            labelCssStyle: "vertical-align: top",
                            cssStyle: "margin-left: 5px; resize: none;"
                        }
                    ]
                }
            ]
        };

        cases.push(case2);
    }

    if(_tab3) {
        var case3 = {
            type: _CASE_,
            caseKey: _tab3,
            numCols: 2,
            colSpan: "*",
            colSizes: [400, 400],
            items: [
                {
                    type: _DWT_ALERT_,
                    containerCssStyle: "padding-bottom:0;",
                    style: DwtAlert.INFO,
                    colSpan: "*",
                    iconVisible: false,
                    content: ZaMsg.WARNING_DYNAMIC_DL_MEMBER,
                    visibilityChecks: [
                        [
                            XForm.checkInstanceValue,
                            ZaDistributionList.A2_dlType,
                            ZaDistributionList.DYNAMIC_DL_TYPE
                        ]
                    ],
                    visibilityChangeEventSources: [ZaDistributionList.A2_dlType]
                },
                {
                    type: _GROUP_,
                    width: "98%",
                    numCols: 1,
                    visibilityChecks: [
                        [
                            XForm.checkInstanceValue,
                            ZaDistributionList.A2_dlType,
                            ZaDistributionList.STATIC_DL_TYPE
                        ]
                    ],
                    visibilityChangeEventSources: [ZaDistributionList.A2_dlType],
                    items: [
                        {
                            type: _SPACER_,
                            height: "5"
                        },
                        {
                            type: _ZALEFT_GROUPER_,
                            numCols: 1,
                            label: ZaMsg.Account_DirectGroupLabel,
                            containerCssStyle: "padding-top: 5px",
                            width: "100%",
                            items: [
                                {
                                    ref: ZaAccount.A2_directMemberList,
                                    type: _S_DWT_LIST_,
                                    width: "98%",
                                    height: 200,
                                    cssClass: "DLSource",
                                    widgetClass: ZaAccountMemberOfListView,
                                    headerList: directMemberOfHeaderList,
                                    defaultColumnSortable: 0,
                                    onSelection: ZaNewDLXWizard.directMemberSelectionListener,
                                    forceUpdate: true
                                },
                                {
                                    type: _SPACER_,
                                    height: "5"
                                },
                                {
                                    type: _GROUP_,
                                    width: "100%",
                                    numCols: 8,
                                    colSizes: [70, 5, 65, 5, 75, 5, 60, 5],
                                    items: [
                                        {
                                            type: _DWT_BUTTON_,
                                            label: ZaMsg.DLXV_ButtonRemoveAll,
                                            enableDisableChangeEventSources: [ZaDistributionList.A2_directMemberList],
                                            enableDisableChecks: [
                                                [
                                                    XForm.checkInstanceValueNotEmty,
                                                    ZaDistributionList.A2_directMemberList
                                                ]
                                            ],
                                            onActivate: "ZaAccountMemberOfListView.removeAllGroups.call(this,event, ZaAccount.A2_directMemberList)"
                                        },
                                        {
                                            type: _CELLSPACER_
                                        },
                                        {
                                            type: _DWT_BUTTON_,
                                            label: ZaMsg.DLXV_ButtonRemove,
                                            id: "removeButton",
                                            onActivate: "ZaAccountMemberOfListView.removeGroups.call(this,event, ZaAccount.A2_directMemberList)",
                                            enableDisableChangeEventSources: [ZaDistributionList.A2_directMemberSelected],
                                            enableDisableChecks: [
                                                [
                                                    XForm.checkInstanceValueNotEmty,
                                                    ZaDistributionList.A2_directMemberSelected
                                                ]
                                            ]
                                        },
                                        {
                                            type: _CELLSPACER_
                                        },
                                        {
                                            type: _DWT_BUTTON_,
                                            label: ZaMsg.Previous,
                                            id: "backButton",
                                            icon: "LeftArrow",
                                            disIcon: "LeftArrowDis",
                                            onActivate: "ZaAccountMemberOfListView.backButtonHndlr.call(this,event, ZaAccount.A2_directMemberList)",
                                            enableDisableChecks: [
                                                [
                                                    ZaAccountMemberOfListView.shouldEnableBackButton,
                                                    ZaAccount.A2_directMemberList
                                                ]
                                            ],
                                            enableDisableChangeEventSources: [ZaAccount.A2_directMemberList + "_offset"]
                                        },
                                        {
                                            type: _CELLSPACER_
                                        },
                                        {
                                            type: _DWT_BUTTON_,
                                            label: ZaMsg.Next,
                                            id: "fwdButton",
                                            icon: "RightArrow",
                                            disIcon: "RightArrowDis",
                                            onActivate: "ZaAccountMemberOfListView.fwdButtonHndlr.call(this,event, ZaAccount.A2_directMemberList)",
                                            enableDisableChangeEventSources: [ZaAccount.A2_directMemberList + "_more"],
                                            enableDisableChecks: [
                                                [
                                                    ZaAccountMemberOfListView.shouldEnableForwardButton,
                                                    ZaAccount.A2_directMemberList
                                                ]
                                            ]
                                        },
                                        {
                                            type: _CELLSPACER_
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            type: _SPACER_,
                            height: "10"
                        },
                        {
                            type: _ZALEFT_GROUPER_,
                            numCols: 1,
                            width: "100%",
                            label: ZaMsg.Account_IndirectGroupLabel,
                            containerCssStyle: "padding-top: 5px",
                            items: [
                                {
                                    ref: ZaAccount.A2_indirectMemberList,
                                    type: _S_DWT_LIST_,
                                    width: "98%",
                                    height: 200,
                                    cssClass: "DLSource",
                                    widgetClass: ZaAccountMemberOfListView,
                                    headerList: indirectMemberOfHeaderList,
                                    defaultColumnSortable: 0,
                                    onSelection: ZaNewDLXWizard.indirectMemberSelectionListener,
                                    forceUpdate: true
                                },
                                {
                                    type: _SPACER_,
                                    height: "5"
                                },
                                {
                                    type: _GROUP_,
                                    width: "100%",
                                    numCols: 8,
                                    colSizes: [70, 5, 65, 5, 75, 5, 60, 5],
                                    items: [
                                        {
                                            type: _CELLSPACER_
                                        },
                                        {
                                            type: _CELLSPACER_
                                        },
                                        {
                                            type: _CELLSPACER_
                                        },
                                        {
                                            type: _CELLSPACER_
                                        },
                                        {
                                            type: _DWT_BUTTON_,
                                            label: ZaMsg.Previous,
                                            id: "indirectBackButton",
                                            icon: "LeftArrow",
                                            disIcon: "LeftArrowDis",
                                            onActivate: "ZaAccountMemberOfListView.backButtonHndlr.call(this,event, ZaAccount.A2_indirectMemberList)",
                                            enableDisableChecks: [
                                                [
                                                    ZaAccountMemberOfListView.shouldEnableBackButton,
                                                    ZaAccount.A2_indirectMemberList
                                                ]
                                            ],
                                            enableDisableChangeEventSources: [ZaAccount.A2_indirectMemberList+"_offset"]
                                        },
                                        {
                                            type: _CELLSPACER_
                                        },
                                        {
                                            type: _DWT_BUTTON_,
                                            label: ZaMsg.Next,
                                            id: "indirectFwdButton",
                                            icon: "RightArrow",
                                            disIcon: "RightArrowDis",
                                            onActivate: "ZaAccountMemberOfListView.fwdButtonHndlr.call(this,event, ZaAccount.A2_indirectMemberList)",
                                            enableDisableChecks: [
                                                [
                                                    ZaAccountMemberOfListView.shouldEnableForwardButton,
                                                    ZaAccount.A2_indirectMemberList
                                                ]
                                            ],
                                            enableDisableChangeEventSources: [ZaAccount.A2_indirectMemberList+"_more"]
                                        },
                                        {
                                            type: _CELLSPACER_
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    type: _GROUP_,
                    width: "98%",
                    numCols: 1,
                    visibilityChecks: [
                        [
                            XForm.checkInstanceValue,
                            ZaDistributionList.A2_dlType,
                            ZaDistributionList.STATIC_DL_TYPE
                        ]
                    ],
                    visibilityChangeEventSources: [ZaDistributionList.A2_dlType],
                    items: [
                        {
                            type: _ZARIGHT_GROUPER_,
                            numCols: 1,
                            width: "100%",
                            label: ZaMsg.Account_NonGroupLabel,
                            containerCssStyle: "padding-top: 5px",
                            items: [
                                {
                                    type: _GROUP_,
                                    width: "100%",
                                    numCols: 3,
                                    colSizes: ["64%", "6%", "30%"],
                                    items: [
                                        {
                                            type: _GROUP_,
                                            width: "100%",
                                            numCols: 2,
                                            colSizes: ["20%", "80%"],
                                            items: [
                                                {
                                                    ref: "query",
                                                    type: _TEXTFIELD_,
                                                    width: "95%",
                                                    cssClass: "admin_xform_name_input",
                                                    nowrap: false,
                                                    labelWrap: true,
                                                    label: ZaMsg.DLXV_LabelFind,
                                                    visibilityChecks: [],
                                                    enableDisableChecks: [],
                                                    elementChanged: function (elementValue,instanceValue, event) {
                                                        var charCode = event.charCode;
                                                        if (charCode == 13 || charCode == 3) {
                                                            ZaAccountMemberOfListView.prototype.srchButtonHndlr.call(this);
                                                        } else {
                                                            this.getForm().itemChanged(this, elementValue, event);
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            type: _CELLSPACER_
                                        },
                                        {
                                            type: _DWT_BUTTON_,
                                            label: ZaMsg.DLXV_ButtonSearch,
                                            onActivate: ZaAccountMemberOfListView.prototype.srchButtonHndlr
                                        }
                                    ]
                                },
                                {
                                    type: _GROUP_,
                                    width: "100%",
                                    numCols: 2,
                                    items: [
                                        {
                                            ref: ZaAccount.A2_showSameDomain,
                                            type: _WIZ_CHECKBOX_,
                                            label: ZaMsg.NAD_SearchSameDomain,
                                            labelLocation: _RIGHT_,
                                            trueValue: "TRUE",
                                            falseValue: "FALSE",
                                            visibilityChecks: []
                                        }
                                    ]
                                },
                                {
                                    type: _SPACER_,
                                    height: "5"
                                },
                                {
                                    ref: ZaAccount.A2_nonMemberList,
                                    type: _S_DWT_LIST_,
                                    width: "98%",
                                    height: 440,
                                    cssClass: "DLSource",
                                    widgetClass: ZaAccountMemberOfListView,
                                    headerList: nonMemberOfHeaderList,
                                    defaultColumnSortable: 0,
                                    onSelection: ZaNewDLXWizard.nonmemberSelectionListener,
                                    forceUpdate: true
                                },
                                {
                                    type: _SPACER_,
                                    height: "5"
                                },
                                {
                                    type: _GROUP_,
                                    width: "100%",
                                    numCols: 8,
                                    colSizes: [70, 5, 65, 5, 75, 5, 60, 5],
                                    items: [
                                        {
                                            type: _DWT_BUTTON_,
                                            label: ZaMsg.DLXV_ButtonAddFromList,
                                            onActivate: "ZaAccountMemberOfListView.addGroups.call(this,event, ZaAccount.A2_nonMemberList)",
                                            enableDisableChangeEventSources: [ZaDistributionList.A2_nonmembersSelected],
                                            enableDisableChecks: [
                                                [
                                                    XForm.checkInstanceValueNotEmty,
                                                    ZaDistributionList.A2_nonmembersSelected
                                                ]
                                            ]
                                        },
                                        {
                                            type: _CELLSPACER_
                                        },
                                        {
                                            type: _DWT_BUTTON_,
                                            label: ZaMsg.DLXV_ButtonAddAll,
                                            onActivate: "ZaAccountMemberOfListView.addAllGroups.call(this,event, ZaAccount.A2_nonMemberList)",
                                            enableDisableChangeEventSources: [ZaAccount.A2_nonMemberList],
                                            enableDisableChecks: [
                                                [
                                                    XForm.checkInstanceValueNotEmty,
                                                    ZaAccount.A2_nonMemberList
                                                ]
                                            ]
                                        },
                                        {
                                            type: _CELLSPACER_
                                        },
                                        {
                                            type: _DWT_BUTTON_,
                                            label: ZaMsg.Previous,
                                            id: "backButton",
                                            icon: "LeftArrow",
                                            disIcon: "LeftArrowDis",
                                            enableDisableChangeEventSources: [ZaAccount.A2_nonMemberList + "_offset"],
                                            enableDisableChecks: [
                                                [
                                                    ZaAccountMemberOfListView.shouldEnableBackButton,
                                                    ZaAccount.A2_nonMemberList
                                                ]
                                            ],
                                            onActivate: "ZaAccountMemberOfListView.backButtonHndlr.call(this,event, ZaAccount.A2_nonMemberList)"
                                        },
                                        {
                                            type: _CELLSPACER_
                                        },
                                        {
                                            type: _DWT_BUTTON_,
                                            label: ZaMsg.Next,
                                            id: "fwdButton",
                                            icon: "RightArrow",
                                            disIcon: "RightArrowDis",
                                            enableDisableChangeEventSources: [ZaAccount.A2_nonMemberList + "_more"],
                                            enableDisableChecks: [
                                                [
                                                    ZaAccountMemberOfListView.shouldEnableForwardButton,
                                                    ZaAccount.A2_nonMemberList
                                                ]
                                            ],
                                            onActivate: "ZaAccountMemberOfListView.fwdButtonHndlr.call(this,event, ZaAccount.A2_nonMemberList)"
                                        },
                                        {
                                            type: _CELLSPACER_
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        };

        cases.push(case3);
    }

    if (_tab4) {
        var addAliasButton = {
            type: _DWT_BUTTON_,
            label: ZaMsg.NAD_Add,
            width: "100px",
            onActivate: "ZaNewDLXWizard.addAliasButtonListener.call(this);"
        };

        if (entry.id) {
            addAliasButton.enableDisableChecks = [
                [
                    XFormItem.prototype.hasRight,
                    ZaDistributionList.ADD_DL_ALIAS_RIGHT
                ]
            ];
        } else {
            addAliasButton.enableDisableChecks = [
                [
                    ZaItem.hasWritePermission,
                    ZaAccount.A_zimbraMailAlias
                ]
            ];
        }

        var editAliasButton = {
            type: _DWT_BUTTON_,
            label: ZaMsg.TBB_Edit,
            width: "100px",
            enableDisableChangeEventSources: [ZaDistributionList.A2_alias_selection_cache],
            onActivate: "ZaNewDLXWizard.editAliasButtonListener.call(this);",
            id: "editAliasButton"
        };

        if (entry.id) {
            editAliasButton.enableDisableChecks = [
                ZaNewDLXWizard.isEditAliasEnabled,
                [
                    XFormItem.prototype.hasRight,
                    ZaDistributionList.REMOVE_DL_ALIAS_RIGHT
                ],
                [
                    XFormItem.prototype.hasRight,
                    ZaAccount.ADD_DL_ALIAS_RIGHT
                ]
            ];
        } else {
            editAliasButton.enableDisableChecks = [
                ZaNewDLXWizard.isEditAliasEnabled,
                [
                    ZaItem.hasWritePermission,
                    ZaAccount.A_zimbraMailAlias
                ]
            ];
        }

        var deleteAliasButton = {
            type: _DWT_BUTTON_,
            label: ZaMsg.TBB_Delete,
            width: "100px",
            onActivate: "ZaNewDLXWizard.deleteAliasButtonListener.call(this);",
            id: "deleteAliasButton",
            enableDisableChangeEventSources: [ZaDistributionList.A2_alias_selection_cache]
        };

        if (entry.id) {
            deleteAliasButton.enableDisableChecks = [
                ZaNewDLXWizard.isDeleteAliasEnabled,
                [
                    XFormItem.prototype.hasRight,
                    ZaDistributionList.REMOVE_DL_ALIAS_RIGHT
                ]
            ];
        } else {
            deleteAliasButton.enableDisableChecks = [
                ZaNewDLXWizard.isDeleteAliasEnabled,
                [
                    ZaItem.hasWritePermission,
                    ZaAccount.A_zimbraMailAlias
                ]
            ];
        }

        var case4 = {
            type: _CASE_,
            caseKey: _tab4,
            width: "100%",
            numCols: 1,
            items: [
                {
                    type: _GROUPER_,
                    borderCssClass: "LeftGrouperBorder",
                    width: "100%",
                    numCols: 1,
                    label: ZaMsg.NAD_EditDLAliasesGroup,
                    items: [
                        {
                            ref: ZaAccount.A_zimbraMailAlias,
                            type: _DWT_LIST_,
                            height: "200",
                            width: "98%",
                            forceUpdate: true,
                            preserveSelection: false,
                            multiselect: true,
                            cssClass: "DLSource",
                            headerList: null,
                            onSelection: ZaNewDLXWizard.aliasSelectionListener
                        },
                        {
                            type: _GROUP_,
                            numCols: 6,
                            colSizes: ["100px", "10px", "100px", "10px", "100px", "auto"],
                            cssStyle: "margin-bottom: 10px; padding-bottom: 0px; margin-top: 10px; margin-left: 10px; margin-right: 10px;",
                            items: [
                                deleteAliasButton,
                                {
                                    type: _CELLSPACER_
                                },
                                editAliasButton,
                                {
                                    type: _CELLSPACER_
                                },
                                addAliasButton
                            ]
                        }
                    ]
                }
            ]
        };

        cases.push(case4);
    }

    if (_tab5) {
        var case5 = {
            type: _CASE_,
            caseKey: _tab5,
            numCols: 1,
            items: [
                {
                    ref: ZaDistributionList.A2_DLOwners,
                    type: _REPEAT_,
                    label: null,
                    showAddButton: true,
                    showRemoveButton: true,
                    addButtonLabel: ZaMsg.BTN_Add_Owner,
                    showAddOnNextRow: true,
                    removeButtonLabel: ZaMsg.BTN_Remove_Owner,
                    removeButtonCSSStyle: "margin-left: 50px",
                    enableDisableChecks: [],
                    visibilityChecks: [],
                    items: [
                        {
                            ref: ".",
                            type: _EMAILADDR_,
                            getDisplayValue: AjxUtil.htmlEncode,
                            label: null,
                            enableDisableChecks: [],
                            visibilityChecks: []
                        }
                    ]
                }
            ]
        };

        cases.push(case5);
    }

    if (_tab6) {
        var case6 = {
            type: _CASE_,
            caseKey: _tab6,
            numCols: 1,
            items: [
                {
                    type: _GROUPER_,
                    label: ZaMsg.NAD_MailOptionsReceiving,
                    id: "dl_pref_replyto_group",
                    colSpan: "*",
                    numCols: 2,
                    colSizes: [225, "*"],
                    visibilityChecks: [
                        [
                            ZATopGrouper_XFormItem.isGroupVisible,
                            [
                                ZaDistributionList.A_zimbraPrefReplyToEnabled,
                                ZaDistributionList.A_zimbraPrefReplyToDisplay,
                                ZaDistributionList.A_zimbraPrefReplyToAddress
                            ]
                        ]
                    ],
                    visibilityChangeEventSources: [],
                    items: [
                        {
                            ref: ZaDistributionList.A_zimbraPrefReplyToEnabled,
                            type: _WIZ_CHECKBOX_,
                            visibilityChecks: [
                                [
                                    ZaItem.hasReadPermission,
                                    ZaDistributionList.A_zimbraPrefReplyToEnabled
                                ]
                            ],
                            label: ZaMsg.DLXV_ReplayToEnabled,
                            trueValue: "TRUE",
                            falseValue: "FALSE"
                        },
                        {
                            ref: ZaDistributionList.A_zimbraPrefReplyToDisplay,
                            type: _TEXTFIELD_,
                            label: ZaMsg.DLXV_ReplayToAddrDisplay,
                            emptyText: ZaMsg.DLXV_ReplayToAddrEmptyText,
                            visibilityChecks: [
                                [
                                    ZaItem.hasReadPermission,
                                    ZaDistributionList.A_zimbraPrefReplyToDisplay
                                ]
                            ],
                            enableDisableChecks: [
                                [
                                    XForm.checkInstanceValue,
                                    ZaDistributionList.A_zimbraPrefReplyToEnabled,
                                    "TRUE"
                                ],
                                [
                                    ZaItem.hasWritePermission,
                                    ZaDistributionList.A_zimbraPrefReplyToAddress
                                ]
                            ],
                            enableDisableChangeEventSources: [ZaDistributionList.A_zimbraPrefReplyToEnabled]
                        },
                        {
                            type: _TEXTFIELD_,
                            ref: ZaDistributionList.A_zimbraPrefReplyToAddress,
                            label: ZaMsg.DLXV_ReplayToAddr,
                            editable: true,
                            forceUpdate: true,
                            visibilityChecks: [
                                [
                                    ZaItem.hasReadPermission,
                                    ZaDistributionList.A_zimbraPrefReplyToAddress
                                ]
                            ],
                            enableDisableChangeEventSources: [ZaDistributionList.A_zimbraPrefReplyToEnabled],
                            enableDisableChecks: [
                                [
                                    XForm.checkInstanceValue,
                                    ZaDistributionList.A_zimbraPrefReplyToEnabled,
                                    "TRUE"
                                ],
                                [
                                    ZaItem.hasWritePermission,
                                    ZaDistributionList.A_zimbraPrefReplyToAddress
                                ]
                            ]
                        }
                    ]
                }
            ]
        };

        cases.push(case6);
    }

    var headerItems = [
        {
            type: _AJX_IMAGE_,
            src: "Group_32",
            label: null,
            rowSpan: 3
        },
        {
            type: _OUTPUT_,
            ref: "name",
            label: null,
            cssClass: "AdminTitle",
            height: "auto",
            width: 350,
            rowSpan: 3,
            cssStyle: "word-wrap: break-word; overflow: hidden"
        }
    ];

    if (ZaItem.hasReadPermission (ZaItem.A_zimbraId, entry)) {
        headerItems.push (
            {
                type: _OUTPUT_,
                ref: ZaItem.A_zimbraId,
                label: ZaMsg.NAD_ZimbraID
            }
        );
    }

    if (ZaItem.hasReadPermission (ZaItem.A_zimbraCreateTimestamp, entry)) {
        headerItems.push(
            {
                type: _OUTPUT_,
                ref: ZaItem.A_zimbraCreateTimestamp,
                label: ZaMsg.LBL_zimbraCreateTimestamp,
                labelLocation: _LEFT_,
                getDisplayValue: function() {
                    var val = ZaItem.formatServerTime(this.getInstanceValue());
                    if (!val) {
                        return ZaMsg.Server_Time_NA;
                    }
                    return val;
                }
            }
        );
    }

    if (ZaItem.hasReadPermission (ZaDistributionList.A_mailStatus, entry)) {
        headerItems.push (
            {
                type: _OUTPUT_,
                ref: ZaDistributionList.A_mailStatus,
                label: ZaMsg.NAD_ResourceStatus,
                choices: this.dlStatusChoices
            }
        );
    }

    this._lastStep = this.stepChoices.length;

    xFormObject.items = [
        {
            type: _OUTPUT_,
            colSpan: 2,
            valign: _TOP_,
            cssStyle: "white-space: normal",
            ref: ZaModel.currentStep,
            choices: this.stepChoices,
            valueChangeEventSources: [ZaModel.currentStep]
        },
        {
            type: _SEPARATOR_,
            align: _CENTER_,
            valign: _TOP_
        },
        {
            type: _SPACER_,
            align: _CENTER_,
            valign: _TOP_
        },
        {
            type: _SWITCH_,
            width: 700,
            align: _LEFT_,
            valign: _TOP_,
            cssStyle: "white-space: normal",
            items:cases
        }
    ];
};

ZaXDialog.XFormModifiers["ZaNewDLXWizard"].push(ZaNewDLXWizard.myXFormModifier);
ZaNewDLXWizard.isAutoDisplayname = function () {
        return(this.getInstanceValue(ZaResource.A2_autoLocationName)=="FALSE");
}

}
if (AjxPackage.define("zimbraAdmin.resource.view.ZaResourceXFormView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* This class describes a view of a single resource Account, it will be called during the edit mode
* @class ZaResourceXFormView
* @contructor
* @param parent {DwtComposite}
* @param app {ZaApp}
* @author Greg Solovyev
**/
ZaResourceXFormView = function(parent, entry) {
	ZaTabView.call(this, {
		parent:parent,
		iKeyName:"ZaResourceXFormView",
		contextId:ZaId.TAB_RES_EDIT
	});	
	this.TAB_INDEX = 0;		
	if(!ZaResource.accountStatusChoices) {
		ZaResource.accountStatusChoices = [
	   		{value:ZaResource.ACCOUNT_STATUS_ACTIVE, label:ZaResource.getAccountStatusLabel(ZaResource.ACCOUNT_STATUS_ACTIVE)}, 
	   		{value:ZaResource.ACCOUNT_STATUS_CLOSED, label:ZaResource.getAccountStatusLabel(ZaResource.ACCOUNT_STATUS_CLOSED)}
		//{value:ZaResource.ACCOUNT_STATUS_LOCKED, label: ZaResource.getAccountStatusLabel(ZaResource.ACCOUNT_STATUS_LOCKED)},
		//{value:ZaResource.ACCOUNT_STATUS_MAINTENANCE, label:ZaResource.getAccountStatusLabel(ZaResource.ACCOUNT_STATUS_MAINTENANCE)}
	   	];		
	}
	this.cosChoices = new XFormChoices([], XFormChoices.OBJECT_LIST, "id", "name");
    this.signatureChoices = new XFormChoices([], XFormChoices.OBJECT_LIST, "id", "name");
	this.initForm(ZaResource.myXModel,this.getMyXForm(entry), null);
	this._localXForm.setController(ZaApp.getInstance());	
	this._helpURL = ZaResourceXFormView.helpURL;
}

ZaResourceXFormView.prototype = new ZaTabView();
ZaResourceXFormView.prototype.constructor = ZaResourceXFormView;
ZaTabView.XFormModifiers["ZaResourceXFormView"] = new Array();
ZaResourceXFormView.TAB_INDEX=0;
ZaResourceXFormView.helpURL = ZaUtil.HELP_URL;

ZaResourceXFormView.prototype.getTabIcon =
function () {
	if (this._containedObject && this._containedObject.attrs && this._containedObject.attrs[ZaResource.A_zimbraCalResType] == ZaResource.RESOURCE_TYPE_LOCATION){
		return "Location" ;	
	}else {
		return "Resource" ;
	}
}

/**
* Sets the object contained in the view
* @param entry - {ZaResource} object to display
**/
ZaResourceXFormView.prototype.setObject =
function(entry) {
	this._containedObject = new ZaResource();
    this._containedObject.attrs = new Object();

    for (var a in entry.attrs) {
        var modelItem = this._localXForm.getModel().getItem(a) ;
        if ((modelItem != null && modelItem.type == _LIST_)
           || (entry.attrs[a] != null && entry.attrs[a] instanceof Array))
        {  //need deep clone
            this._containedObject.attrs [a] =
                    ZaItem.deepCloneListItem (entry.attrs[a]);
        } else {
            this._containedObject.attrs[a] = entry.attrs[a];
        }
    }
	this._containedObject.name = entry.name;
	this._containedObject.type = entry.type ;
	if(entry.id)
		this._containedObject.id = entry.id;

	if(entry.rights)
		this._containedObject.rights = entry.rights;
	
	if(entry.setAttrs)
		this._containedObject.setAttrs = entry.setAttrs;
	
	if(entry.getAttrs)
		this._containedObject.getAttrs = entry.getAttrs;
		
	if(entry._defaultValues)
		this._containedObject._defaultValues = entry._defaultValues;
		
	
	if(this._containedObject.attrs[ZaResource.A_COSId]) {	
		this._containedObject[ZaResource.A2_autoCos] = "FALSE" ;		
	}
	if(!this._containedObject.attrs[ZaResource.A_COSId]) {
		this._containedObject[ZaResource.A2_autoCos] = "TRUE" ;
	}
	if(this._containedObject.setAttrs[ZaResource.A_COSId]) {
		var cos = ZaCos.getCosById(this._containedObject.attrs[ZaResource.A_COSId]);	
		this.cosChoices.setChoices([cos]);
		this.cosChoices.dirtyChoices();
	}		

    if(entry[ZaResource.A2_signatureList]) {
        this._containedObject[ZaResource.A2_signatureList] = entry[ZaResource.A2_signatureList];

    } else {
        this._containedObject[ZaResource.A2_signatureList] = [];
    }

    this.signatureChoices.setChoices(ZaSignature.getSignatureChoices(this._containedObject[ZaResource.A2_signatureList]));
    this.signatureChoices.dirtyChoices();

   	this._containedObject[ZaResource.A2_autodisplayname] = "FALSE";
   	this._containedObject[ZaResource.A2_autoLocationName] = entry[ZaResource.A2_autoLocationName];
   	
   	//set the value of the A_schedulePolicy
   	ZaResource.prototype.setSchedulePolicyFromLdapAttrs.call (this._containedObject) ;
   	   				
	if(!entry[ZaModel.currentTab])
		this._containedObject[ZaModel.currentTab] = "1";
	else
		this._containedObject[ZaModel.currentTab] = entry[ZaModel.currentTab];
		
	this._localXForm.setInstance(this._containedObject);
	
	//enforce the dirty = false, so the save button after the save can be disabled.
	this.setDirty(false);
	this.formDirtyLsnr = new AjxListener(ZaApp.getInstance().getCurrentController(), ZaResourceController.prototype.handleXFormChange);
	this._localXForm.addListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, this.formDirtyLsnr);
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, this.formDirtyLsnr);	
}

ZaResourceXFormView.deleteCalFwdAddrButtonListener = function () {
	var instance = this.getInstance();	
	if(instance[ZaResource.A2_calFwdAddr_selection_cache] != null) {
		var cnt = instance[ZaResource.A2_calFwdAddr_selection_cache].length;
		if(cnt && instance.attrs[ZaResource.A_zimbraPrefCalendarForwardInvitesTo]) {
			var arr = instance.attrs[ZaResource.A_zimbraPrefCalendarForwardInvitesTo];
			for(var i=0;i<cnt;i++) {
				var cnt2 = arr.length-1;				
				for(var k=cnt2;k>=0;k--) {
					if(arr[k]==instance[ZaResource.A2_calFwdAddr_selection_cache][i]) {
						arr.splice(k,1);
						break;	
					}
				}
			}
			this.getModel().setInstanceValue(instance, ZaResource.A_zimbraPrefCalendarForwardInvitesTo, arr);
			this.getModel().setInstanceValue(instance, ZaResource.A2_calFwdAddr_selection_cache, []);	
		}
	}
	this.getForm().parent.setDirty(true);
}

ZaResourceXFormView.calFwdAddrSelectionListener = 
function (ev) {
	var arr = this.widget.getSelection();	
	if(arr && arr.length) {
		arr.sort();
		// When getting data from view make sure to html decode it before storing
		arr = AjxUtil.htmlDecode(arr);

		this.getModel().setInstanceValue(this.getInstance(), ZaResource.A2_calFwdAddr_selection_cache, arr);	
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaResource.A2_calFwdAddr_selection_cache, []);
	}	
	if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		ZaResourceXFormView.editCalFwdAddrButtonListener.call(this);
	}	
}

ZaResourceXFormView.editCalFwdAddrButtonListener =
function () {
	var instance = this.getInstance();
	if(instance[ZaResource.A2_calFwdAddr_selection_cache] && instance[ZaResource.A2_calFwdAddr_selection_cache][0]) {	
		var formPage = this.getForm().parent;
		if(!formPage.editCalFwdAddrDlg) {
			formPage.editCalFwdAddrDlg = new ZaEditFwdAddrXDialog(ZaApp.getInstance().getAppCtxt().getShell(),"400px", "150px",ZaMsg.Edit_FwdAddr_Title);
			formPage.editCalFwdAddrDlg.registerCallback(DwtDialog.OK_BUTTON, ZaAccountXFormView.updateCalFwdAddr, this.getForm(), null);						
		}
		var obj = {};
		obj[ZaAccount.A_name] = instance[ZaAccount.A2_calFwdAddr_selection_cache][0];
		var cnt = instance.attrs[ZaResource.A_zimbraPrefCalendarForwardInvitesTo].length;
		for(var i=0;i<cnt;i++) {
			if(instance[ZaResource.A2_calFwdAddr_selection_cache][0]==instance.attrs[ZaResource.A_zimbraPrefCalendarForwardInvitesTo][i]) {
				obj[ZaAlias.A_index] = i;
				break;		
			}
		}
		
		formPage.editCalFwdAddrDlg.setObject(obj);
		formPage.editCalFwdAddrDlg.popup();		
	}
}

ZaResourceXFormView.updateCalFwdAddr = function () {
	if(this.parent.editCalFwdAddrDlg) {
		this.parent.editCalFwdAddrDlg.popdown();
		var obj = this.parent.editCalFwdAddrDlg.getObject();
		var instance = this.getInstance();
		var arr = instance.attrs[ZaResource.A_zimbraPrefCalendarForwardInvitesTo];
		if(obj[ZaAlias.A_index] >=0 && arr[obj[ZaAlias.A_index]] != obj[ZaResource.A_name] ) {
			this.getModel().setInstanceValue(this.getInstance(), ZaResource.A2_calFwdAddr_selection_cache, []);
			arr[obj[ZaAlias.A_index]] = obj[ZaResource.A_name];
			this.getModel().setInstanceValue(instance, ZaResource.A_zimbraPrefCalendarForwardInvitesTo, arr);
			this.parent.setDirty(true);	
		}
	}
}

ZaResourceXFormView.addCalFwdAddrButtonListener =
function () {
	var instance = this.getInstance();
	var formPage = this.getForm().parent;
	if(!formPage.addCalFwdAddrDlg) {
		formPage.addCalFwdAddrDlg = new ZaEditFwdAddrXDialog(ZaApp.getInstance().getAppCtxt().getShell(), "400px", "150px",ZaMsg.Add_FwdAddr_Title);
		formPage.addCalFwdAddrDlg.registerCallback(DwtDialog.OK_BUTTON, ZaResourceXFormView.addCalFwdAddr, this.getForm(), null);						
	}
	
	var obj = {};
	obj[ZaAccount.A_name] = "";
	obj[ZaAlias.A_index] = - 1;
	formPage.addCalFwdAddrDlg.setObject(obj);
	formPage.addCalFwdAddrDlg.popup();		
}

ZaResourceXFormView.addCalFwdAddr  = function () {
	if(this.parent.addCalFwdAddrDlg) {
		this.parent.addCalFwdAddrDlg.popdown();
		var obj = this.parent.addCalFwdAddrDlg.getObject();
		if(obj[ZaResource.A_name] && obj[ZaResource.A_name].length>1) {
			var arr = this.getInstance().attrs[ZaResource.A_zimbraPrefCalendarForwardInvitesTo];
			arr.push(obj[ZaResource.A_name]);
			this.getModel().setInstanceValue(this.getInstance(), ZaResource.A_zimbraPrefCalendarForwardInvitesTo, arr);
			this.getModel().setInstanceValue(this.getInstance(), ZaResource.A2_calFwdAddr_selection_cache, []);
			this.parent.setDirty(true);
		}
	}
}

ZaResourceXFormView.isEditCalFwdAddrEnabled = function () {
	return (!AjxUtil.isEmpty(this.getInstanceValue(ZaResource.A2_calFwdAddr_selection_cache)) && this.getInstanceValue(ZaResource.A2_calFwdAddr_selection_cache).length==1);
}

ZaResourceXFormView.isDeleteCalFwdAddrEnabled = function () {
	return (!AjxUtil.isEmpty(this.getInstanceValue(ZaResource.A2_calFwdAddr_selection_cache)));
}

ZaResourceXFormView.isAutoDisplayname = function () {
    return(this.getInstanceValue(ZaResource.A2_autoLocationName)=="FALSE");
}


ZaResourceXFormView.SignatureSelectionListener =
function (ev) {
	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		arr.sort();
		// When retrieving data from view make sure to html decode it
		arr = arr.map(function(item) {
			// Clone object to break reference so we will not be modifying the original object
			return new ZaSignature(AjxStringUtil.htmlDecode(item.name), item.id, AjxStringUtil.htmlDecode(item.content), item.type);
		});
		this.getModel().setInstanceValue(this.getInstance(), ZaResource.A2_signature_selection_cache, arr);
	} else {
		this.getModel().setInstanceValue(this.getInstance(), ZaResource.A2_signature_selection_cache, []);
	}
	if (ev.detail == DwtListView.ITEM_DBL_CLICKED) {
		ZaResourceXFormView.editSignatureButtonListener.call(this);
	}
}


ZaResourceXFormView.editSignatureButtonListener =
function () {
    try {
        var instance = this.getInstance();
        if(instance[ZaResource.A2_signature_selection_cache] && instance[ZaResource.A2_signature_selection_cache][0]) {
            var formPage = this.getForm().parent;
            if(!formPage.editSignatureDlg) {
                formPage.editSignatureDlg = new ZaEditSignatureDialog(ZaApp.getInstance().getAppCtxt().getShell(),"400px", "150px",ZaMsg.Title_EditSignature);
                formPage.editSignatureDlg.registerCallback(DwtDialog.OK_BUTTON, ZaResourceXFormView.updateSignature, this.getForm(), null);
            }
            var obj  = ZaUtil.deepCloneObject(instance[ZaResource.A2_signature_selection_cache][0]);

            formPage.editSignatureDlg.setObject(obj);
            formPage.editSignatureDlg.popup();
        }
    } catch(ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaResourceXFormView.editSignatureButtonListener", null, false);
    }
}

ZaResourceXFormView.updateSignature = function () {
   try {
        if(this.parent.editSignatureDlg) {
            this.parent.editSignatureDlg.popdown();
            var obj = this.parent.editSignatureDlg.getObject();
            var instance = this.getInstance();
            var arr = instance[ZaResource.A2_signatureList];
            var index = ZaUtil.findValueInObjArrByPropertyName(arr, obj[ZaSignature.A2_id], ZaSignature.A2_id);
            if(index != -1 && !ZaSignature.compareObject(obj, arr[index])) {
                ZaSignature.ModifySignature.call(obj, "id", instance.id);
                this.getModel().setInstanceValue(this.getInstance(), ZaResource.A2_signature_selection_cache, []);
                arr[index] = obj;
                this.getModel().setInstanceValue(instance, ZaResource.A2_signatureList, arr);
            }
        }
   } catch(ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaResourceXFormView.updateSignature", null, false);
   }
}


ZaResourceXFormView.addSignatureButtonListener =
function () {
    try{
        var instance = this.getInstance();
        var formPage = this.getForm().parent;
        if(!formPage.addSignatureDlg) {
            formPage.addSignatureDlg = new ZaEditSignatureDialog(ZaApp.getInstance().getAppCtxt().getShell(), "400px", "150px",ZaMsg.Title_CreateSignature);
            formPage.addSignatureDlg.registerCallback(DwtDialog.OK_BUTTON, ZaResourceXFormView.addSignature, this.getForm(), null);
        }

        var obj = new ZaSignature();
        formPage.addSignatureDlg.setObject(obj);
        formPage.addSignatureDlg.popup();
    } catch(ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaResourceXFormView.addSignatureButtonListener", null, false);
    }
}

ZaResourceXFormView.addSignature  = function () {
    try {
        if(this.parent.addSignatureDlg) {
            this.parent.addSignatureDlg.popdown();
            var obj = this.parent.addSignatureDlg.getObject();
            if(obj[ZaSignature.A2_name] && obj[ZaSignature.A2_name].length>0) {
                var instance = this.getInstance();
                var arr = instance[ZaResource.A2_signatureList];
                var index = ZaUtil.findValueInObjArrByPropertyName(arr, obj[ZaSignature.A2_name], ZaSignature.A2_name);
                if(index == -1) {
                obj =  ZaSignature.CreateSignature.call(obj, "id", instance.id);
                arr.push(obj);
                this.getModel().setInstanceValue(this.getInstance(), ZaResource.A2_signatureList, arr);
                this.getModel().setInstanceValue(this.getInstance(), ZaResource.A2_signature_selection_cache, []);
                } else {
                    var warningMsg = AjxMessageFormat.format(ZaMsg.SignatureExist, obj[ZaSignature.A2_name]);
                    ZaApp.getInstance().getCurrentController().popupErrorDialog(warningMsg);
                }
            } else {
                ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.CreateWarningMsg);
            }
        }
    } catch (ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaResourceXFormView.addSignature", null, false);
    }
}


ZaResourceXFormView.deleteSignatureButtonListener = function () {
    try {
        var instance = this.getInstance();
        if(instance[ZaResource.A2_signature_selection_cache] != null) {
            var cnt = instance[ZaResource.A2_signature_selection_cache].length;
            if(cnt && instance[ZaResource.A2_signatureList]) {
                var i;
                var isUsed = false;
                var warningMsg;
                for (i = 0; i < cnt; i++) {
                    var currentId = instance[ZaResource.A2_signature_selection_cache][i][ZaSignature.A2_id];
                    if(this.getInstanceValue(ZaResource.A_zimbraPrefCalendarAutoAcceptSignatureId) == currentId){
                        isUsed = true;
                        warningMsg = AjxMessageFormat.format(ZaMsg.DeleteWarningAcceptMsg, instance[ZaResource.A2_signature_selection_cache][i][ZaSignature.A2_name]);
                        break;
                    }

                    if(this.getInstanceValue(ZaResource.A_zimbraPrefCalendarAutoDenySignatureId) == currentId){
                        isUsed = true;
                        warningMsg = AjxMessageFormat.format(ZaMsg.DeleteWarningDenyMsg, instance[ZaResource.A2_signature_selection_cache][i][ZaSignature.A2_name]);
                        break;
                    }

                    if(this.getInstanceValue(ZaResource.A_zimbraPrefCalendarAutoDeclineSignatureId) == currentId){
                        warningMsg = AjxMessageFormat.format(ZaMsg.DeleteWarningDeclineMsg, instance[ZaResource.A2_signature_selection_cache][i][ZaSignature.A2_name]);
                        isUsed = true;
                        break;
                    }
                }

                if (!isUsed) {
                    var arr = instance[ZaResource.A2_signatureList];
                    for(i=0;i<cnt;i++) {
                        var cnt2 = arr.length-1;
                        for(var k=cnt2;k>=0;k--) {
                            if(arr[k][ZaSignature.A2_id]==instance[ZaResource.A2_signature_selection_cache][i][ZaSignature.A2_id]) {
                                ZaSignature.DeleteSignature.call(instance[ZaResource.A2_signature_selection_cache][i], "id", instance.id);
                                arr.splice(k,1);
                                break;
                            }
                        }
                    }
                    this.getModel().setInstanceValue(instance, ZaResource.A2_signatureList, arr);
                    this.getModel().setInstanceValue(instance, ZaResource.A2_signature_selection_cache, []);
                } else {
                    ZaApp.getInstance().getCurrentController().popupErrorDialog(warningMsg);
                }
            }
        }
    } catch(ex) {
        ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaResourceXFormView.deleteSignatureButtonListener", null, false);
    }
}

ZaResourceXFormView.isEditSignatureEnabled = function () {
	return (!AjxUtil.isEmpty(this.getInstanceValue(ZaResource.A2_signature_selection_cache)) && this.getInstanceValue(ZaResource.A2_signature_selection_cache).length==1);
}

ZaResourceXFormView.isDeleteSignatureEnabled = function () {
	return (!AjxUtil.isEmpty(this.getInstanceValue(ZaResource.A2_signature_selection_cache)));
}

ZaResourceXFormView.isSignatureSelectionEnabled = function() {
	return (!AjxUtil.isEmpty(this.getInstanceValue(ZaResource.A2_signatureList)));
}

ZaResourceXFormView.isSignatureSectionVisible = function () {
	return (ZaZimbraAdmin.haveTargetRight(ZaItem.RESOURCE,ZaResource.VIEW_RESOURCE_MAIL_RIGHT,this.getInstance().name)
	|| ZaZimbraAdmin.haveTargetRight(ZaItem.RESOURCE,ZaResource.VIEW_RESOURCE_MAIL_RIGHT,ZaAccount.getDomain(this.getInstance().name)));
}

ZaResourceXFormView.CONTACT_TAB_ATTRS = [ZaResource.A_zimbraCalResContactName,
		ZaResource.A_zimbraCalResContactEmail, 
		ZaResource.A_zimbraCalResContactPhone, 
		ZaResource.A_contactInfoAutoComplete, 
		ZaResource.A_locationDisplayName,
		ZaResource.A2_autoLocationName,
		ZaResource.A_zimbraCalResSite,
		ZaResource.A_zimbraCalResBuilding,
		ZaResource.A_zimbraCalResFloor,
		ZaResource.A_zimbraCalResRoom,
		ZaResource.A_zimbraCalResCapacity,
		ZaResource.A_street,
		ZaResource.A_city,
		ZaResource.A_state,
		ZaResource.A_country,
		ZaResource.A_zip];

ZaResourceXFormView.CONTACT_TAB_RIGHTS = [];

/**
* This method is added to the map {@link ZaTabView#XFormModifiers}
* @param xFormObject {Object} a definition of the form. This method adds/removes/modifies xFormObject to construct
* an Account view. 
**/
ZaResourceXFormView.myXFormModifier = function(xFormObject, entry) {	
	ZaResource.resTypeChoices = [
   		{value:ZaResource.RESOURCE_TYPE_LOCATION, label:ZaMsg.resType_location}, 
   		{value:ZaResource.RESOURCE_TYPE_EQUIPMENT, label:ZaMsg.resType_equipment}
   	];	
  		                     	
  	ZaResource.schedulePolicyChoices = [
   		{value:ZaResource.SCHEDULE_POLICY_TT, label:ZaMsg.resScheduleTT},
   		{value:ZaResource.SCHEDULE_POLICY_FT, label:ZaMsg.resScheduleFT},
   		{value:ZaResource.SCHEDULE_POLICY_TF, label:ZaMsg.resScheduleTF},
   		{value:ZaResource.SCHEDULE_POLICY_FF, label:ZaMsg.resScheduleFF}
   	];		

	var domainName;
	domainName = ZaSettings.myDomainName;

	//get the image according to the type
	var imgChoices = [ 	{value:ZaResource.RESOURCE_TYPE_LOCATION, label: "Location_32"},
						{value:ZaResource.RESOURCE_TYPE_EQUIPMENT, label: "Resource_32"}   ];
						
	var headerItems = [	{type:_AJX_IMAGE_, ref:ZaResource.A_zimbraCalResType, src:"Resource_32", label:null, rowSpan:3, choices: imgChoices, cssStyle:"margin:auto;"},
						{type:_OUTPUT_, ref:ZaResource.A_displayname, label:null,cssClass:"AdminTitle", height:"auto", width:350, rowSpan:3, cssStyle:"word-wrap:break-word;overflow:hidden;",
                             visibilityChecks:[ZaItem.hasReadPermission],
                             getDisplayValue: AjxUtil.htmlEncode
                         }];
						
	/*headerItems.push({type:_OUTPUT_, ref:ZaResource.A_COSId, labelLocation:_LEFT_, label:ZaMsg.NAD_ClassOfService, 
		choices:this.cosChoices,getDisplayValue:function(newValue) {
			if(ZaItem.ID_PATTERN.test(newValue)) {
				var cos = ZaCos.getCosById(newValue, this.getForm().parent._app);
				if(cos)
					newValue = cos.name;
				} 
				if (newValue == null) {
					newValue = "";
				} else {
					newValue = "" + newValue;
				}
				return newValue;
			},
	 visibilityChecks:[ZaItem.hasReadPermission]});*/
	
    if (ZaItem.hasReadPermission(ZaItem.A_zimbraId, entry))
        headerItems.push({type:_OUTPUT_,  ref:ZaItem.A_zimbraId, label:ZaMsg.NAD_ZimbraID});
	
    if (ZaItem.hasReadPermission(ZaItem.A_zimbraCreateTimestamp, entry))
        headerItems.push({type:_OUTPUT_, ref:ZaItem.A_zimbraCreateTimestamp,
						 label:ZaMsg.LBL_zimbraCreateTimestamp, labelLocation:_LEFT_,
						 getDisplayValue:function() {
						 var val = ZaItem.formatServerTime(this.getInstanceValue());
						 if(!val)
						 return ZaMsg.Server_Time_NA;
						 else
						 return val;
						 }	
						 });
	
    if (ZaItem.hasReadPermission(ZaResource.A_mailHost, entry)) {
	    headerItems.push({type:_OUTPUT_, ref:ZaResource.A_mailHost, labelLocation:_LEFT_,label:ZaMsg.NAD_MailServer, getDisplayValue: AjxUtil.htmlEncode});
    }
	
    if (AjxUtil.isEmailAddress(entry[ZaAccount.A_name], false)) {
    	headerItems.push({type:_OUTPUT_, ref:ZaResource.A_name, label:ZaMsg.NAD_Email, labelLocation:_LEFT_, required:false, getDisplayValue: AjxUtil.htmlEncode});
    }

    if (ZaItem.hasReadPermission(ZaResource.A_accountStatus, entry))
	    headerItems.push({type:_OUTPUT_,  ref:ZaResource.A_accountStatus, label:ZaMsg.NAD_ResourceStatus, labelLocation:_LEFT_, choices:ZaResource.accountStatusChoices});

    if (ZaItem.hasReadPermission(ZaResource.A_zimbraCalResType, entry))
        headerItems.push({type:_OUTPUT_, ref:ZaResource.A_zimbraCalResType, label:ZaMsg.NAD_ResType, labelLocation:_LEFT_, required:false,
						getDisplayValue: ZaResource.getResTypeLabel });	

	this.tabChoices = new Array();
	var _tab2;
	var _tab1 = ++this.TAB_INDEX;
    this.tabChoices.push({value:_tab1, label:ZaMsg.TABT_ResourceProperties});
    this.helpMap = {};
    this.helpMap[_tab1] = ZaUtil.HELP_URL;
	if(ZaTabView.isTAB_ENABLED(entry,ZaResourceXFormView.CONTACT_TAB_ATTRS, ZaResourceXFormView.CONTACT_TAB_RIGHTS)) {
		_tab2 = ++this.TAB_INDEX;
		this.tabChoices.push({value:_tab2, label:ZaMsg.TABT_ResLocationContact});	
	}

    var cases = [];

    var nameGroup = {type:_TOP_GROUPER_, label:ZaMsg.NAD_ResourceNameGrouper, id:"resource_form_name_group",
            colSizes:["275px","*"],numCols:2,items:[
            {ref:ZaResource.A_displayname, type:_TEXTFIELD_, msgName:ZaMsg.NAD_ResourceName,
                label:ZaMsg.NAD_ResourceName, labelLocation:_LEFT_, width: "200px" },
            {ref:ZaResource.A_name, type:_EMAILADDR_, msgName:ZaMsg.NAD_ResAccountName,label:ZaMsg.NAD_ResAccountName,
                labelLocation:_LEFT_,enableDisableChecks:[[XFormItem.prototype.hasRight,ZaResource.RENAME_CALRES_RIGHT]],
				visibilityChecks:[]
            }]
    };
    var setupGroup = {type:_TOP_GROUPER_, label:ZaMsg.NAD_ResourceSetupGrouper, id:"resource_form_setup_group",
        colSizes:["275px","*"],numCols:2,items:[
        {ref:ZaResource.A_zimbraCalResType, type:_OSELECT1_, msgName:ZaMsg.NAD_ResType,
            label:ZaMsg.NAD_ResType, labelLocation:_LEFT_,
            choices:ZaResource.resTypeChoices
    }]};
       setupGroup.items.push(
          {type:_GROUP_, numCols:3, nowrap:true, label:ZaMsg.NAD_ClassOfService, labelLocation:_LEFT_,
          	visibilityChecks:[[ZaItem.hasWritePermission,ZaResource.A_COSId]],
            items: [
				{
					ref : ZaResource.A_COSId,
					type : _INPUT_,
					onChange : ZaAccount.setCosChanged,
					enableDisableChecks : [[XForm.checkInstanceValue, ZaResource.A2_autoCos, "FALSE"]],
					enableDisableChangeEventSources : [ZaResource.A2_autoCos],
					getDisplayValue : function(newValue) {
						this.createDataList(ZaApp.getInstance().getCosListName());
						if (newValue) {
							var cos = ZaCos.getCosById(newValue);
							return cos && cos.name;
						}
					}
				},
               {ref:ZaResource.A2_autoCos, type:_CHECKBOX_,
                   msgName:ZaMsg.NAD_Auto,label:ZaMsg.NAD_Auto,labelLocation:_RIGHT_,subLabel: "",
                   trueValue:"TRUE", falseValue:"FALSE" ,
                   elementChanged: function(elementValue,instanceValue, event) {
                       this.getForm().parent.setDirty(true);
                       if(elementValue=="TRUE") {
                           ZaAccount.setDefaultCos(this.getInstance(), this.getForm().parent._app);
						   this.getParentItem().getItems()[0].updateElement(null);
					   }
                       this.getForm().itemChanged(this, elementValue, event);
                   },
                   enableDisableChecks:[ [ZaItem.hasWritePermission,ZaAccount.A_COSId]],
                   visibilityChecks:[]                   
               }
           ]
       }
    );
    
    setupGroup.items.push({ref:ZaResource.A_accountStatus, type:_OSELECT1_, editable:false,
        msgName:ZaMsg.NAD_ResourceStatus,label:ZaMsg.NAD_ResourceStatus,
        labelLocation:_LEFT_, choices:ZaResource.accountStatusChoices});

    setupGroup.items.push({ref:ZaResource.A_zimbraCalResAutoDeclineRecurring, type:_CHECKBOX_,
        msgName:ZaMsg.NAD_DeclineRecurring,label:ZaMsg.NAD_DeclineRecurring,
        trueValue:"TRUE", falseValue:"FALSE"});
        
    setupGroup.items.push({ref:ZaResource.A2_schedulePolicy, type:_OSELECT1_,
            msgName:ZaMsg.NAD_ResType,label:ZaMsg.NAD_SchedulePolicy,
            visibilityChecks:[[ZaItem.hasWritePermission,ZaResource.A_zimbraCalResAutoAcceptDecline],[ZaItem.hasWritePermission,ZaResource.A_zimbraCalResAutoDeclineIfBusy]],
            enableDisableChecks:[[ZaItem.hasReadPermission,ZaResource.A_zimbraCalResAutoAcceptDecline],[ZaItem.hasReadPermission,ZaResource.A_zimbraCalResAutoDeclineIfBusy]],
            labelLocation:_LEFT_, width:"320px", choices:ZaResource.schedulePolicyChoices});

    setupGroup.items.push({ref:ZaResource.A_zimbraCalResMaxNumConflictsAllowed, type:_TEXTFIELD_,
        msgName:ZaMsg.zimbraCalResMaxNumConflictsAllowed, label:ZaMsg.zimbraCalResMaxNumConflictsAllowed,
        enableDisableChecks:[ZaResource.isAutoDeclineEnabled,[XForm.checkInstanceValueNot,ZaResource.A_zimbraCalResAutoDeclineRecurring,"TRUE"]],
        enableDisableChangeEventSources:[ZaResource.A2_schedulePolicy,ZaResource.A_zimbraCalResAutoDeclineRecurring],
        labelLocation:_LEFT_, cssClass:"admin_xform_number_input"});

    setupGroup.items.push({ref:ZaResource.A_zimbraCalResMaxPercentConflictsAllowed, type:_TEXTFIELD_,
        msgName:ZaMsg.zimbraCalResMaxPercentConflictsAllowed, label:ZaMsg.zimbraCalResMaxPercentConflictsAllowed,
        enableDisableChecks:[ZaResource.isAutoDeclineEnabled,[XForm.checkInstanceValueNot,ZaResource.A_zimbraCalResAutoDeclineRecurring,"TRUE"]],
        enableDisableChangeEventSources:[ZaResource.A2_schedulePolicy,ZaResource.A_zimbraCalResAutoDeclineRecurring],
        labelLocation:_LEFT_, cssClass:"admin_xform_number_input"});


	var fwdInvitesGrpr = {type:_GROUP_, id:"resource_form_forwarding_group",
							numCols:2,label:null,colSizes:["275px","425px"], colSpan: "*",
							visibilityChecks:[[ZaItem.hasReadPermission,ZaResource.A_zimbraPrefCalendarForwardInvitesTo]],
							items :[
								{ref:ZaResource.A_zimbraPrefCalendarForwardInvitesTo, type:_DWT_LIST_, height:"100", width:"350px",
									forceUpdate: true, preserveSelection:false, multiselect:true,cssClass: "DLSource", 
									headerList:null,onSelection:ZaResourceXFormView.calFwdAddrSelectionListener,label:ZaMsg.zimbraPrefCalendarForwardInvitesTo,
                                    visibilityChecks:[ZaItem.hasReadPermission],
                                    labelCssClass:"gridGroupBodyLabel",
                                    labelCssStyle:"text-align:left;border-right:1px solid;",
                                    getDisplayValue: AjxUtil.htmlEncode
								},
								{type:_GROUP_, numCols:6, width:"625px",colSizes:["275","100px","auto","100px","auto","100px"], colSpan:2,
									cssStyle:"margin:10px;padding-bottom:0;",
									items: [
										{type:_CELLSPACER_},
										{type:_DWT_BUTTON_, label:ZaMsg.TBB_Delete,width:"100px",
											onActivate:"ZaResourceXFormView.deleteCalFwdAddrButtonListener.call(this);",
											enableDisableChecks:[ZaResourceXFormView.isDeleteCalFwdAddrEnabled,[ZaItem.hasWritePermission,ZaResource.A_zimbraPrefCalendarForwardInvitesTo]],
											enableDisableChangeEventSources:[ZaResource.A2_calFwdAddr_selection_cache]
										},
										{type:_CELLSPACER_},
										{type:_DWT_BUTTON_, label:ZaMsg.TBB_Edit,width:"100px",
											onActivate:"ZaResourceXFormView.editCalFwdAddrButtonListener.call(this);",
											enableDisableChecks:[ZaResourceXFormView.isEditCalFwdAddrEnabled,[ZaItem.hasWritePermission,ZaResource.A_zimbraPrefCalendarForwardInvitesTo]],
											enableDisableChangeEventSources:[ZaResource.A2_calFwdAddr_selection_cache]
										},
										{type:_CELLSPACER_},
	                                       {type:_DWT_BUTTON_, label:ZaMsg.NAD_Add,width:"100px",
											enableDisableChecks:[[ZaItem.hasWritePermission,ZaResource.A_zimbraPrefCalendarForwardInvitesTo]],                                        
											onActivate:"ZaResourceXFormView.addCalFwdAddrButtonListener.call(this);"
										}
									]
								}]};
	 setupGroup.items.push(fwdInvitesGrpr);							

    var passwordGroup = {type:_TOP_GROUPER_, label:ZaMsg.NAD_PasswordGrouper, id:"resource_form_password_group",
        visibilityChecks:[[XFormItem.prototype.hasAnyRight,[ZaResource.SET_CALRES_PASSWORD_RIGHT, ZaResource.CHANGE_CALRES_PASSWORD_RIGHT]]],
        colSizes:["275px","*"],numCols:2,items:[
        {ref:ZaResource.A_password, type:_SECRET_,
                msgName:ZaMsg.NAD_Password,label:ZaMsg.NAD_Password, labelLocation:_LEFT_,
                cssClass:"admin_xform_name_input", visibilityChecks:[],enableDisableChecks:[]
        },
        {ref:ZaResource.A2_confirmPassword, type:_SECRET_,
            msgName:ZaMsg.NAD_ConfirmPassword,label:ZaMsg.NAD_ConfirmPassword, labelLocation:_LEFT_,
            cssClass:"admin_xform_name_input",visibilityChecks:[],enableDisableChecks:[]
        }
    ]};

    var signatureGroup = {
		type : _TOP_GROUPER_,
		label : ZaMsg.NAD_SignatureGrouper,
		id : "resource_form_signature_group",
		visibilityChecks:[ZaResourceXFormView.isSignatureSectionVisible],
		colSizes : [ "275px", "*" ],
		numCols : 2,
		items : [
				{
					type : _GROUP_,
					id : "resource_form_allsignature_group",
					numCols : 2,
					label : null,
					colSizes : [ "275px", "*" ],
					colSpan : "*",
					items : [
							{
								ref : ZaResource.A2_signatureList,
								type : _DWT_LIST_,
								height : "100",
								width : "350px",
								forceUpdate : true,
								preserveSelection : false,
								multiselect : true,
								cssClass : "DLSource",
								headerList : null,
								label : ZaMsg.NAD_AllSignature,
								labelCssClass : "gridGroupBodyLabel",
								labelCssStyle : "text-align:left;border-right:1px solid;",
								onSelection : ZaResourceXFormView.SignatureSelectionListener,
								bmolsnr : true,
								getDisplayValue : function(value) {
									var form = this.getForm().parent;
									var instance = this.getInstance();
									var tempChoice = ZaSignature
											.getSignatureChoices(instance[ZaResource.A2_signatureList]);
									form.signatureChoices
											.setChoices(tempChoice);
									form.signatureChoices.dirtyChoices();

									return value.map(function(val) {
										// Clone object to break reference so we will not be modifying the model data
										return new ZaSignature(AjxStringUtil.htmlEncode(val.name), val.id, AjxStringUtil.htmlEncode(val.content), val.type);
									});
								}
							},
							{
								type : _GROUP_,
								numCols : 6,
								width : "625px",
								colSizes : [ "275", "100px", "auto", "100px",
										"auto", "100px" ],
								colSpan : 2,
								cssStyle : "margin:10px;padding-bottom:0;",
								items : [
										{
											type : _CELLSPACER_
										},
										{
											type : _DWT_BUTTON_,
											label : ZaMsg.TBB_Delete,
											width : "100px",
											onActivate : "ZaResourceXFormView.deleteSignatureButtonListener.call(this);",
											enableDisableChecks : [ ZaResourceXFormView.isDeleteSignatureEnabled ],
											enableDisableChangeEventSources : [ ZaResource.A2_signature_selection_cache ]
										},
										{
											type : _CELLSPACER_
										},
										{
											type : _DWT_BUTTON_,
											label : ZaMsg.TBB_Edit,
											width : "100px",
											onActivate : "ZaResourceXFormView.editSignatureButtonListener.call(this);",
											enableDisableChecks : [ ZaResourceXFormView.isEditSignatureEnabled ],
											enableDisableChangeEventSources : [ ZaResource.A2_signature_selection_cache ]
										},
										{
											type : _CELLSPACER_
										},
										{
											type : _DWT_BUTTON_,
											label : ZaMsg.NAD_Add,
											width : "100px",
											enableDisableChecks : [ [
													ZaItem.hasWritePermission,
													ZaResource.A_zimbraPrefCalendarForwardInvitesTo ] ],
											onActivate : "ZaResourceXFormView.addSignatureButtonListener.call(this);"
										} ]
							} ]
				},
				{
					ref : ZaResource.A_zimbraPrefCalendarAutoAcceptSignatureId,
					type : _OSELECT1_,
					msgName : ZaMsg.NAD_zimbraPrefCalendarAutoAcceptSignatureId,
					width : "280px",
					label : ZaMsg.NAD_zimbraPrefCalendarAutoAcceptSignatureId,
					labelLocation : _LEFT_,
					visibilityChecks : [ZaItem.hasReadPermission],
					enableDisableChecks : [ ZaResourceXFormView.isSignatureSelectionEnabled, ZaItem.hasWritePermission ],
					enableDisableChangeEventSources : [ ZaResource.A2_signatureList ],
					valueChangeEventSources : [ ZaResource.A2_signatureList ],
					choices : this.signatureChoices
				},
				{
					ref : ZaResource.A_zimbraPrefCalendarAutoDeclineSignatureId,
					type : _OSELECT1_,
					msgName : ZaMsg.NAD_zimbraPrefCalendarAutoDeclineSignatureId,
					width : "280px",
					label : ZaMsg.NAD_zimbraPrefCalendarAutoDeclineSignatureId,
					labelLocation : _LEFT_,
					visibilityChecks : [ZaItem.hasReadPermission],
					enableDisableChecks : [ ZaResourceXFormView.isSignatureSelectionEnabled, ZaItem.hasWritePermission ],
					enableDisableChangeEventSources : [ ZaResource.A2_signatureList ],
					valueChangeEventSources : [ ZaResource.A2_signatureList ],
					choices : this.signatureChoices
				},
				{
					ref : ZaResource.A_zimbraPrefCalendarAutoDenySignatureId,
					type : _OSELECT1_,
					msgName : ZaMsg.NAD_zimbraPrefCalendarAutoDenySignatureId,
					width : "280px",
					label : ZaMsg.NAD_zimbraPrefCalendarAutoDenySignatureId,
					labelLocation : _LEFT_,
					visibilityChecks : [ZaItem.hasReadPermission],
					enableDisableChecks : [ ZaResourceXFormView.isSignatureSelectionEnabled, ZaItem.hasWritePermission ],
					enableDisableChangeEventSources : [ ZaResource.A2_signatureList ],
					valueChangeEventSources : [ ZaResource.A2_signatureList ],
					choices : this.signatureChoices
				} ]
	};

    var notesGroup = {type:_TOP_GROUPER_, label:ZaMsg.NAD_NotesGrouper, id:"resource_form_notes_group",
        colSizes:["275px","*"],numCols:2,items:[
        ZaItem.descriptionXFormItem,
        /*{ref:ZaResource.A_description, type:_INPUT_, width: "300px",
            msgName:ZaMsg.NAD_Description,label:ZaMsg.NAD_Description,
            labelLocation:_LEFT_, cssClass:"admin_xform_name_input"
        },*/
        {ref:ZaResource.A_notes, type:_TEXTAREA_, width: "300px",
            msgName:ZaMsg.NAD_Notes,label:ZaMsg.NAD_Notes,
            labelLocation:_LEFT_
        }
    ]};

    var case1 = {type:_ZATABCASE_, numCols:1,  caseKey:_tab1,
        paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
//        height:"400px",  align:_LEFT_, valign:_TOP_,
        items:[nameGroup,setupGroup,passwordGroup,signatureGroup,notesGroup]
    };

    cases.push(case1);


    var defaultWidth = 200 ;
	if(_tab2) {
		this.helpMap[_tab2] = ZaUtil.HELP_URL;
        var case2={type:_ZATABCASE_, numCols:1, caseKey:_tab2,
             paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
            items: [
                {type:_ZA_TOP_GROUPER_, label:ZaMsg.NAD_ContactInfo, items:[
                    {ref:ZaResource.A_zimbraCalResContactName, type:_TEXTFIELD_, msgName:ZaMsg.NAD_ContactName,label:ZaMsg.NAD_ContactName, labelLocation:_LEFT_, width:defaultWidth},
                    {ref:ZaResource.A_zimbraCalResContactEmail, type:_TEXTFIELD_, msgName:ZaMsg.NAD_ContactEmail,label:ZaMsg.NAD_ContactEmail, labelLocation:_LEFT_, width:defaultWidth},
                    {ref:ZaResource.A_zimbraCalResContactPhone, type:_TEXTFIELD_, msgName:ZaMsg.NAD_ContactPhone,label:ZaMsg.NAD_ContactPhone, labelLocation:_LEFT_, width:defaultWidth},
                    {ref:ZaResource.A_contactInfoAutoComplete, type: _AUTO_COMPLETE_LIST_,
                        matchValue:ZaContactList.matchValue, matchText: ZaContactList.matchText,
                        dataLoaderClass: ZaContactList , dataLoaderMethod: ZaContactList.prototype.getContactList ,
                        compCallback: ZaContactList.prototype._autocompleteCallback,
                        inputFieldElementId: ZaResource.A_zimbraCalResContactName
                    }

                ]},
                {type:_ZA_TOP_GROUPER_, label:ZaMsg.NAD_LocationInfo, colSizes:["275px","*"],numCols:2, items:[
                    {type:_GROUP_, numCols:3,colSizes:["156px","22px","100px"], nowrap:true, msgName:ZaMsg.NAD_LocationDisplayName, label:ZaMsg.NAD_LocationDisplayName, labelLocation:_LEFT_,
                        visibilityChecks:[[ZaItem.hasReadPermission,ZaResource.A_locationDisplayName]],
                        items: [
                            {ref:ZaResource.A_locationDisplayName, type:_TEXTFIELD_, label:null, cssClass:"admin_xform_name_input", width:defaultWidth,
                                enableDisableChecks:[ZaResourceXFormView.isAutoDisplayname, ZaItem.hasWritePermission],
                                enableDisableChangeEventSources:[ZaResource.A2_autoLocationName],bmolsnr:true
                            },
                            {ref:ZaResource.A2_autoLocationName, type:_CHECKBOX_, msgName:ZaMsg.NAD_Auto,
                                subLabel:"",
                                label:ZaMsg.NAD_Auto,labelLocation:_RIGHT_,
                                trueValue:"TRUE", falseValue:"FALSE",
                                elementChanged: ZaResource.setAutoLocationName,
                                enableDisableChecks:[[ZaItem.hasWritePermission,ZaResource.A_locationDisplayName]],
                                visibilityChecks:[[ZaItem.hasReadPermission,ZaResource.A_locationDisplayName]]
                            }
                    ]},
                    {ref:ZaResource.A_zimbraCalResSite, type:_TEXTFIELD_, msgName:ZaMsg.NAD_Site,label:ZaMsg.NAD_Site,
                        labelLocation:_LEFT_, width:defaultWidth,
                        elementChanged: ZaResource.setAutoLocationName
                    },
                    {ref:ZaResource.A_zimbraCalResBuilding, type:_TEXTFIELD_, msgName:ZaMsg.NAD_Building,
                        label:ZaMsg.NAD_Building, labelLocation:_LEFT_,
                        width:defaultWidth, elementChanged: ZaResource.setAutoLocationName
                    },
                    {ref:ZaResource.A_zimbraCalResFloor, type:_TEXTFIELD_,
                        msgName:ZaMsg.NAD_Floor,label:ZaMsg.NAD_Floor,
                        labelLocation:_LEFT_, width:defaultWidth,
                        elementChanged: ZaResource.setAutoLocationName
                    },
                    {ref:ZaResource.A_zimbraCalResRoom, type:_TEXTFIELD_,
                        msgName:ZaMsg.NAD_Room,label:ZaMsg.NAD_Room,
                        labelLocation:_LEFT_, width:defaultWidth,
                        elementChanged: ZaResource.setAutoLocationName
                    },
                    {ref:ZaResource.A_zimbraCalResCapacity, type:_TEXTFIELD_,
                        msgName:ZaMsg.NAD_Capacity,label:ZaMsg.NAD_Capacity,
                        labelLocation:_LEFT_, width:defaultWidth,
                        visibilityChecks:[ZaResource.isLocation],
                        visibilityChangeEventSources:[ZaResource.A_zimbraCalResType]
                    }
                ]},
                {type:_ZA_TOP_GROUPER_, label:ZaMsg.NAD_Address, items:ZaAccountXFormView.getAddressFormItem()
                 }
            ]
        };
        cases.push(case2);
    }
    
    xFormObject.tableCssStyle="width:100%;";
	xFormObject.items = [
			{type:_GROUP_, cssClass:"ZmSelectedHeaderBg", colSpan:"*", id:"xform_header", 
				items: [
					{type:_GROUP_,	numCols:4,colSizes:["60px","*","80px","*"],items:headerItems}
				]
			},
			{type:_TAB_BAR_,  ref:ZaModel.currentTab,choices:this.tabChoices,cssClass:"ZaTabBar", cssStyle:"display:none;", id:"xform_tabbar"},
			{type:_SWITCH_, align:_LEFT_, valign:_TOP_, items:cases}
	];
};
ZaTabView.XFormModifiers["ZaResourceXFormView"].push(ZaResourceXFormView.myXFormModifier);

ZaResourceXFormView.prototype.getTabChoices =
function() {
    return this.tabChoices;
}
}
if (AjxPackage.define("zimbraAdmin.resource.view.ZaNewResourceXWizard")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaNewResourceXWizard
* @contructor ZaNewResourceXWizard
* @param parent
* @param ZaApp app
* This class defines the New Resource Wazards in XForm
* @author Charles Cao
**/
ZaNewResourceXWizard = function(parent) {
	ZaXWizardDialog.call(this, parent,null, ZaMsg.NCD_NewResTitle, "760px", "300px","ZaNewResourceXWizard", null, ZaId.DLG_NEW_RES);
	


	this.TAB_INDEX = 0;
	ZaNewResourceXWizard.step1 = ++this.TAB_INDEX;
	ZaNewResourceXWizard.step2 = ++this.TAB_INDEX;
    ZaNewResourceXWizard.step3 = ++this.TAB_INDEX;
	if(!ZaResource.accountStatusChoices) {
		ZaResource.accountStatusChoices = [
			{value:ZaResource.ACCOUNT_STATUS_ACTIVE, label:ZaResource.getAccountStatusLabel(ZaResource.ACCOUNT_STATUS_ACTIVE)}, 
			{value:ZaResource.ACCOUNT_STATUS_CLOSED, label:ZaResource.getAccountStatusLabel(ZaResource.ACCOUNT_STATUS_CLOSED)}
			//{value:ZaResource.ACCOUNT_STATUS_LOCKED, label: ZaResource.getAccountStatusLabel(ZaResource.ACCOUNT_STATUS_LOCKED)},
			//{value:ZaResource.ACCOUNT_STATUS_MAINTENANCE, label:ZaResource.getAccountStatusLabel(ZaResource.ACCOUNT_STATUS_MAINTENANCE)}
		];		
	}
	this.stepChoices = [
		{label:ZaMsg.TABT_ResourceProperties, value:ZaNewResourceXWizard.step1},
		{label:ZaMsg.TABT_ResLocationContact, value:ZaNewResourceXWizard.step2},
		{label:ZaMsg.TABT_SignatureProperties, value:ZaNewResourceXWizard.step3}
	];
    this.signatureChoices = new XFormChoices([], XFormChoices.OBJECT_LIST, "id", "name");
	this._lastStep = this.stepChoices.length;	
	this.initForm(ZaResource.myXModel,this.getMyXForm());	

	this._localXForm.setController(ZaApp.getInstance());	
	this._localXForm.addListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, new AjxListener(this, ZaNewResourceXWizard.prototype.handleXFormChange));
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, new AjxListener(this, ZaNewResourceXWizard.prototype.handleXFormChange));	
	this._helpURL = ZaNewResourceXWizard.helpURL;
	
	this._domains = {} ;
}


ZaNewResourceXWizard.prototype = new ZaXWizardDialog;
ZaNewResourceXWizard.prototype.constructor = ZaNewResourceXWizard;
ZaXDialog.XFormModifiers["ZaNewResourceXWizard"] = new Array();
ZaNewResourceXWizard.helpURL = ZaUtil.HELP_URL;

ZaNewResourceXWizard.prototype.handleXFormChange = 
function () {
	//Enable/disable the finish button
	if(this._localXForm.hasErrors()) {
		this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
	} else {
		if(this._containedObject.attrs[ZaResource.A_displayname] && this._containedObject[ZaResource.A_name].indexOf("@") > 0){
           this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(true);
           if (this._containedObject[ZaModel.currentStep] != this._lastStep) {
                 this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
            }
           if (this._containedObject[ZaModel.currentStep] != 1) {
                 this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);
            }
        }

	}
}

/**
* Overwritten methods that control wizard's flow (open, go next,go previous, finish)
**/
ZaNewResourceXWizard.prototype.popup = 
function (loc) {
	ZaXWizardDialog.prototype.popup.call(this, loc);
	this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
	this._button[DwtWizardDialog.FINISH_BUTTON].setEnabled(false);
	this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);	
}

ZaNewResourceXWizard.prototype.createDomainAndAccount = function(domainName) {
	try {
		var newDomain = new ZaDomain();
		newDomain.name=domainName;
		newDomain.attrs[ZaDomain.A_domainName] = domainName;
		var domain = ZaItem.create(newDomain,ZaDomain,"ZaDomain");
		if(domain != null) {
			ZaApp.getInstance().getCurrentController().closeCnfrmDelDlg();
			this.finishWizard();
		}
	} catch(ex) {
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaNewResourceXWizard.prototype.createDomainAndAccount", null, false);	
	}
}

ZaNewResourceXWizard.prototype.finishWizard = 
function() {
	try {		
		if(!ZaResource.checkValues(this._containedObject)) {
			return false;
		}
		var resource = ZaItem.create(this._containedObject, ZaResource, "ZaResource");
		if(resource != null) {
			ZaApp.getInstance().getResourceController().fireCreationEvent(resource);
			this.popdown();
            ZaApp.getInstance().getAppCtxt().getAppController().setActionStatusMsg(AjxMessageFormat.format(ZaMsg.ResourceCreated,[resource.name]));
		}
	} catch (ex) {
		switch(ex.code) {		
			case ZmCsfeException.ACCT_EXISTS:
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_ACCOUNT_EXISTS);
			break;
			case ZmCsfeException.ACCT_INVALID_PASSWORD:
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_INVALID, ex);
				ZaApp.getInstance().getAppCtxt().getErrorDialog().showDetail(true);
			break;
			case ZmCsfeException.NO_SUCH_COS:
				ZaApp.getInstance().getCurrentController().popupErrorDialog(AjxMessageFormat.format(ZaMsg.ERROR_NO_SUCH_COS,[this._containedObject.attrs[ZaAccount.A_COSId]]), ex);
		    break;
            case ZmCsfeException.SIGNATURE_EXISTS:
                this.popdown();
                ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaNewResourceXWizard.prototype.finishWizard", null, false);
            break;
			case ZmCsfeException.NO_SUCH_DOMAIN:
				ZaApp.getInstance().dialogs["confirmMessageDialog2"].setMessage(AjxMessageFormat.format(ZaMsg.CreateDomain_q,[ZaAccount.getDomain(this._containedObject.name)]), DwtMessageDialog.WARNING_STYLE);
				ZaApp.getInstance().dialogs["confirmMessageDialog2"].registerCallback(DwtDialog.YES_BUTTON, this.createDomainAndAccount, this, [ZaAccount.getDomain(this._containedObject.name)]);		
				ZaApp.getInstance().dialogs["confirmMessageDialog2"].registerCallback(DwtDialog.NO_BUTTON, ZaController.prototype.closeCnfrmDelDlg, ZaApp.getInstance().getCurrentController(), null);				
				ZaApp.getInstance().dialogs["confirmMessageDialog2"].popup();  				
			break;
			default:
				ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaNewResourceXWizard.prototype.finishWizard", null, false);
			break;		
		}
	}
}

ZaNewResourceXWizard.prototype.goNext = 
function() {
	if (this._containedObject[ZaModel.currentStep] == 1) {
		//check if passwords match
		if(this._containedObject.attrs[ZaResource.A_password]) {
			if(this._containedObject.attrs[ZaResource.A_password] != this._containedObject[ZaResource.A2_confirmPassword]) {
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_PASSWORD_MISMATCH);
				return false;
			}
		}
		this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);

		//check if account exists
		var params = { 	query: ["(|(uid=",this._containedObject[ZaResource.A_name],")(cn=",this._containedObject[ZaResource.A_name],")(sn=",this._containedObject[ZaResource.A_name],")(gn=",this._containedObject[ZaResource.A_name],")(mail=",this._containedObject[ZaResource.A_name],")(zimbraMailDeliveryAddress=",this._containedObject[ZaResource.A_name],"))"].join(""),
						limit : 2,
						applyCos: 0,
						controller: ZaApp.getInstance().getCurrentController(),
						types: [ZaSearch.DLS,ZaSearch.ALIASES,ZaSearch.ACCOUNTS,ZaSearch.RESOURCES]
					 };
					
		var resp = ZaSearch.searchDirectory(params).Body.SearchDirectoryResponse;		
		var list = new ZaItemList();	
		list.loadFromJS(resp);	
		if(list.size() > 0) {
			var acc = list.getArray()[0];
			if(acc.type==ZaItem.ALIAS) {
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_aliasWithThisNameExists);
			} else if (acc.type==ZaItem.RESOURCE) {
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_resourceWithThisNameExists);
			} else if (acc.type==ZaItem.DL) {
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_dlWithThisNameExists);
			} else {
				ZaApp.getInstance().getCurrentController().popupErrorDialog(ZaMsg.ERROR_accountWithThisNameExists);
			}
			return false;
		} 
		this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(true);		
	} 	
	
	this.goPage(this._containedObject[ZaModel.currentStep] + 1);
	if(this._containedObject[ZaModel.currentStep] == this._lastStep) {
		this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(false);
	}	
}

ZaNewResourceXWizard.prototype.goPrev = 
function() {
	if (this._containedObject[ZaModel.currentStep] == 2) {
		this._button[DwtWizardDialog.PREV_BUTTON].setEnabled(false);
	}
	
	this._button[DwtWizardDialog.NEXT_BUTTON].setEnabled(true);
	
	this.goPage(this._containedObject[ZaModel.currentStep] - 1);
}

/**
* @method setObject sets the object contained in the view
* @param entry - ZaResource object to display
**/
ZaNewResourceXWizard.prototype.setObject =
function(entry) {
	this._containedObject = new ZaResource();
	this._containedObject.attrs = new Object();

	for (var a in entry.attrs) {
		this._containedObject.attrs[a] = entry.attrs[a];
	}

    if (entry.name)
	    this._containedObject.name = entry.name;
	if(entry.rights)
		this._containedObject.rights = entry.rights;

	if(entry.setAttrs)
		this._containedObject.setAttrs = entry.setAttrs;
	
	if(entry.getAttrs)
		this._containedObject.getAttrs = entry.getAttrs;
		
	if(entry._defaultValues)
		this._containedObject._defaultValues = entry._defaultValues;

	this._containedObject.id = entry.id || null;
    if(entry._uuid) {
        this._containedObject._uuid = entry._uuid;
    }
	//set the default value of resource type and schedule policy
	this._containedObject.attrs[ZaResource.A_zimbraCalResType] = entry.attrs[ZaResource.A_zimbraCalResType] || ZaResource.RESOURCE_TYPE_LOCATION;
	this._containedObject[ZaResource.A2_schedulePolicy] = entry[ZaResource.A2_schedulePolicy] || ZaResource.SCHEDULE_POLICY_TT;
	this._containedObject.attrs[ZaResource.A_accountStatus] = entry.attrs[ZaResource.A_accountStatus] || ZaResource.ACCOUNT_STATUS_ACTIVE;
	this._containedObject[ZaResource.A2_autodisplayname] = entry[ZaResource.A2_autodisplayname] || "TRUE";
	this._containedObject[ZaResource.A2_autoMailServer] = entry[ZaResource.A2_autoMailServer] || "TRUE";
	this._containedObject[ZaResource.A2_autoCos] = entry[ZaResource.A2_autoCos] || "TRUE";
	this._containedObject[ZaResource.A2_autoLocationName] = entry[ZaResource.A2_autoLocationName] || "TRUE";
	this._containedObject[ZaResource.A2_confirmPassword] = entry[ZaResource.A2_confirmPassword] || null;
	this._containedObject[ZaModel.currentStep] = entry[ZaModel.currentStep] || 1;
    this._containedObject[ZaResource.A2_signatureList] = entry[ZaResource.A2_signatureList] || [];
    this.signatureChoices.setChoices(ZaSignature.getNewSignatureChoices(this._containedObject[ZaResource.A2_signatureList]));
    this.signatureChoices.dirtyChoices();

	var domainName;
	
	if(!domainName) {
		//find out what is the default domain
		try {
			domainName = ZaApp.getInstance().getGlobalConfig().attrs[ZaGlobalConfig.A_zimbraDefaultDomainName];
		} catch (ex) {
			if(ex.code != ZmCsfeException.SVC_PERM_DENIED) {
				throw (ex);
			}
		}
	}

 
	if(!domainName) {
		domainName =  ZaSettings.myDomainName;
	}

    if (entry[ZaResource.A_name])
	    this._containedObject[ZaResource.A_name] = entry[ZaResource.A_name];
    else
	    this._containedObject[ZaResource.A_name] = "@" + domainName;
	this._localXForm.setInstance(this._containedObject);
}

ZaNewResourceXWizard.onCOSChanged = 
function(value, event, form) {
	if(ZaItem.ID_PATTERN.test(value))  {
		form.getInstance()._defaultValues = ZaCos.getCosById(value, form.parent._app);
		this.setInstanceValue(value);
	} else {
		form.getInstance()._defaultValues = ZaCos.getCosByName(value, form.parent._app);
		if(form.getInstance().cos) {
			//value = form.getInstance()._defaultValues.id;
			value = form.getInstance()._defaultValues.id;
		} 
	}
	this.setInstanceValue(value);
    form.parent._isCosChanged = true ;

    //if cos is changed,  update the account type information
 
    return value;
}

ZaNewResourceXWizard.isAutoDisplayname = ZaResourceXFormView.isAutoDisplayname;

ZaNewResourceXWizard.myXFormModifier = function(xFormObject) {
	ZaResource.resTypeChoices = [
		{value:ZaResource.RESOURCE_TYPE_LOCATION, label:ZaMsg.resType_location}, 
		{value:ZaResource.RESOURCE_TYPE_EQUIPMENT, label:ZaMsg.resType_equipment}
	];	
	                     	
	ZaResource.schedulePolicyChoices = [
		{value:ZaResource.SCHEDULE_POLICY_TT, label:ZaMsg.resScheduleTT},
		{value:ZaResource.SCHEDULE_POLICY_FT, label:ZaMsg.resScheduleFT},
		{value:ZaResource.SCHEDULE_POLICY_TF, label:ZaMsg.resScheduleTF},
		{value:ZaResource.SCHEDULE_POLICY_FF, label:ZaMsg.resScheduleFF}
	];		
	
	var domainName;
	domainName = ZaSettings.myDomainName;

	var emptyAlias = "@" + domainName;

	var cases = new Array();
	this.cosChoices = new XFormChoices([], XFormChoices.OBJECT_LIST, "id", "name");
	var nameGroup = {type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_ResourceNameGrouper, id:"resource_wiz_name_group",numCols:2,
		items:[
			{ref:ZaResource.A_displayname, type:_TEXTFIELD_, msgName:ZaMsg.NAD_ResourceName,
				label:ZaMsg.NAD_ResourceName, labelLocation:_LEFT_, 
				elementChanged: function(elementValue,instanceValue, event) {
					//auto fill the account name when autodisplayname is true
					if(this.getInstance()[ZaResource.A2_autodisplayname]=="TRUE") {
						try {
							
							var oldAccName = this.getInstanceValue(ZaResource.A_name);
							var regEx = /[^a-zA-Z0-9_\-\.]/g ;
							var newName = elementValue.replace(regEx, "") + oldAccName.substring(oldAccName.indexOf("@")) ;	
							this.getModel().setInstanceValue(this.getInstance(),ZaResource.A_name,newName);
							this.getModel().setInstanceValue(this.getInstance(),ZaResource.A2_autodisplayname,"TRUE");
						} catch (ex) {
							ZaApp.getInstance().getCurrentController()._handleException(ex, "XForm." + ZaResource.A_displayname + ".elementChanged", null, false);
						}
					}
					this.getForm().itemChanged(this, elementValue, event);
				}
			},			
/*			{ref:ZaResource.A_zimbraCalResType, type:_OSELECT1_, msgName:ZaMsg.NAD_ResType,label:ZaMsg.NAD_ResType, 
				labelLocation:_LEFT_, choices:ZaResource.resTypeChoices
			},	*/	
			{ref:ZaResource.A_name, type:_EMAILADDR_, msgName:ZaMsg.NAD_ResAccountName,label:ZaMsg.NAD_ResAccountName, 
				labelLocation:_LEFT_,id:"resource_email_addr", bmolsnr: true, 
				onChange: function(value, event, form) {
					//disable the autodisplayname whenever user does some action on the account name
					this.getModel().setInstanceValue(this.getInstance(),ZaResource.A2_autodisplayname,"FALSE");							
					this.setInstanceValue(value);	
				},visibilityChecks:[],enableDisableChecks:[]
			}				
		]
	}
	
	var setupGroup = {type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_ResourceSetupGrouper, id:"resource_wiz_name_group",numCols:2,
		items:[
			{ref:ZaResource.A_zimbraCalResType, type:_OSELECT1_, msgName:ZaMsg.NAD_ResType,label:ZaMsg.NAD_ResType, 
				labelLocation:_LEFT_, choices:ZaResource.resTypeChoices,visibilityChecks:[],enableDisableChecks:[]
			}		
		]
	}	


	setupGroup.items.push(
		{type:_GROUP_, numCols:3, nowrap:true, label:ZaMsg.NAD_ClassOfService, labelLocation:_LEFT_,
			visibilityChecks:[[ZaItem.hasWritePermission,ZaAccount.A_COSId]],
			items: [
				{
					ref : ZaResource.A_COSId,
					type : _INPUT_,
					label : null,
					onChange : ZaAccount.setCosChanged,
					enableDisableChecks : [[XForm.checkInstanceValue, ZaResource.A2_autoCos, "FALSE"]],
					enableDisableChangeEventSources : [ZaResource.A2_autoCos],
					getDisplayValue: function(newValue) {
						if (newValue) {
							var cos = ZaCos.getCosById(newValue);
							return cos && cos.name;
						}
					}
				},
				{ref:ZaResource.A2_autoCos, type:_WIZ_CHECKBOX_,
					msgName:ZaMsg.NAD_Auto,label:ZaMsg.NAD_Auto,labelLocation:_RIGHT_,
					trueValue:"TRUE", falseValue:"FALSE" ,
					elementChanged: function(elementValue,instanceValue, event) {
						var cositem = this.getParentItem().getItems()[0];
						var form = this.getForm();
						if(elementValue=="TRUE") {
							cositem.updateElement(null);
							ZaAccount.setDefaultCos(this.getInstance(), form.parent._app);
						}
						else {
							cositem.createDataList(ZaApp.getInstance().getCosListName());
						}
						form.itemChanged(this, elementValue, event);
					},
					visibilityChecks:[],enableDisableChecks:[ [ZaItem.hasWritePermission,ZaAccount.A_COSId]]
				}
			]
		}
	);

	
	setupGroup.items.push({ref:ZaResource.A_accountStatus, type:_OSELECT1_, editable:false, msgName:ZaMsg.NAD_ResourceStatus,
					  label:ZaMsg.NAD_ResourceStatus, labelLocation:_LEFT_, choices:ZaResource.accountStatusChoices,
					  visibilityChecks:[[ZaItem.hasWritePermission,ZaResource.A_accountStatus]],
					  enableDisableChecks:[]
					  });
		
	setupGroup.items.push({ref:ZaResource.A_zimbraCalResAutoDeclineRecurring, type:_WIZ_CHECKBOX_,
						msgName:ZaMsg.NAD_DeclineRecurring,label:ZaMsg.NAD_DeclineRecurring, 
						labelCssClass:"xform_label", align:_LEFT_,labelLocation:_LEFT_,trueValue:"TRUE", falseValue:"FALSE"});

	setupGroup.items.push({ref:ZaResource.A2_schedulePolicy, type:_OSELECT1_, msgName:ZaMsg.NAD_ResType,
						visibilityChecks:[[ZaItem.hasWritePermission,ZaResource.A_zimbraCalResAutoAcceptDecline],[ZaItem.hasWritePermission,ZaResource.A_zimbraCalResAutoDeclineIfBusy]],
						enableDisableChecks:[],
						label:ZaMsg.NAD_SchedulePolicy, labelLocation:_LEFT_,
						choices:ZaResource.schedulePolicyChoices});	
						
	setupGroup.items.push({ref:ZaResource.A_zimbraCalResMaxNumConflictsAllowed, type:_TEXTFIELD_,
		msgName:ZaMsg.zimbraCalResMaxNumConflictsAllowed, label:ZaMsg.zimbraCalResMaxNumConflictsAllowed,
		enableDisableChecks:[ZaResource.isAutoDeclineEnabled,[XForm.checkInstanceValueNot,ZaResource.A_zimbraCalResAutoDeclineRecurring,"TRUE"]],
		enableDisableChangeEventSources:[ZaResource.A_zimbraCalResAutoDeclineRecurring,ZaResource.A2_schedulePolicy],			
		labelLocation:_LEFT_, cssClass:"admin_xform_number_input"});		
		
	setupGroup.items.push({ref:ZaResource.A_zimbraCalResMaxPercentConflictsAllowed, type:_TEXTFIELD_,
		msgName:ZaMsg.zimbraCalResMaxPercentConflictsAllowed, label:ZaMsg.zimbraCalResMaxPercentConflictsAllowed,
		enableDisableChecks:[ZaResource.isAutoDeclineEnabled,[XForm.checkInstanceValueNot,ZaResource.A_zimbraCalResAutoDeclineRecurring,"TRUE"]],
		enableDisableChangeEventSources:[ZaResource.A_zimbraCalResAutoDeclineRecurring,ZaResource.A2_schedulePolicy],			
		labelLocation:_LEFT_, cssClass:"admin_xform_number_input"});	
								
	setupGroup.items.push({type:_GROUP_, numCols:3, nowrap:true, label:ZaMsg.NAD_MailServer, labelLocation:_LEFT_,
						visibilityChecks:[[ZaItem.hasWritePermission,ZaAccount.A_mailHost]],
						items: [
							{ ref: ZaResource.A_mailHost, type: _OSELECT1_, label: null, editable:false, 
								choices: ZaApp.getInstance().getServerListChoices(), 
								visibilityChecks:[],
								enableDisableChecks:[ZaAccount.isAutoMailServer],
								enableDisableChangeEventSources:[ZaResource.A2_autoMailServer]									
						  	},
							{ref:ZaResource.A2_autoMailServer, type:_WIZ_CHECKBOX_, msgName:ZaMsg.NAD_Auto,
								visibilityChecks:[],enableDisableChecks:[],
								label:ZaMsg.NAD_Auto,labelLocation:_RIGHT_,trueValue:"TRUE", falseValue:"FALSE"}
						]
					}); 

	setupGroup.items.push({ref:ZaResource.A_zimbraPrefCalendarForwardInvitesTo, type:_REPEAT_,
							label:ZaMsg.zimbraPrefCalendarForwardInvitesTo, labelLocation:_LEFT_,labelCssClass:"xform_label",
							repeatInstance:emptyAlias, 
							showAddButton:true, showRemoveButton:true, 
							addButtonLabel:ZaMsg.NAD_AddAddress, 
							showAddOnNextRow:true,
							removeButtonLabel:ZaMsg.NAD_RemoveAddress,
							nowrap:false,labelWrap:true,
							items: [
								{ref:".", type:_TEXTFIELD_, label:null, width:250,visibilityChecks:[], enableDisableChecks:[]}
							]
						});
						
	var passwordGroup = {type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_PasswordGrouper,id:"account_wiz_password_group", 
		numCols:2,visibilityChecks:[ZaNewResourceXWizard.canSetPassword],
		items:[
			{ref:ZaResource.A_password, type:_SECRET_, msgName:ZaMsg.NAD_Password,label:ZaMsg.NAD_Password, visibilityChecks:[],enableDisableChecks:[], labelLocation:_LEFT_, cssClass:"admin_xform_name_input"},
			{ref:ZaResource.A2_confirmPassword, type:_SECRET_, msgName:ZaMsg.NAD_ConfirmPassword,label:ZaMsg.NAD_ConfirmPassword, visibilityChecks:[],enableDisableChecks:[], labelLocation:_LEFT_, cssClass:"admin_xform_name_input"}
		]
		
	}

	var notesGroup = {type:_ZAWIZ_TOP_GROUPER_, label:ZaMsg.NAD_NotesGrouper, id:"account_wiz_notes_group",
		numCols:2,
	 	items:[
			{ref:ZaResource.A_description, type:_INPUT_, msgName:ZaMsg.NAD_Description,
					label:ZaMsg.NAD_Description, labelLocation:_LEFT_, width: "300px", cssClass:"admin_xform_name_input"},
			{ref:ZaResource.A_notes, type:_TEXTAREA_, msgName:ZaMsg.NAD_Notes,label:ZaMsg.NAD_Notes, labelLocation:_LEFT_}
		]
	};
	var case1 = {type:_CASE_, numCols:1, caseKey:ZaNewResourceXWizard.step1, align:_LEFT_, valign:_TOP_,
		items:[nameGroup,setupGroup,passwordGroup,notesGroup]
	
	};	

	cases.push(case1);

		
	var defaultWidth = 250;	
	var case2={type:_CASE_, numCols:1,  caseKey:ZaNewResourceXWizard.step2,
					items: [
					   {type:_ZAWIZGROUP_,  colSizes:["200px","275px"],
							items:[
								{ref:ZaResource.A_zimbraCalResContactName, type:_TEXTFIELD_, msgName:ZaMsg.NAD_ContactName,
									label:ZaMsg.NAD_ContactName, labelLocation:_LEFT_, width:defaultWidth},
								{ref:ZaResource.A_zimbraCalResContactEmail, type:_TEXTFIELD_, msgName:ZaMsg.NAD_ContactEmail,
									label:ZaMsg.NAD_ContactEmail, labelLocation:_LEFT_, width:defaultWidth},
								{ref:ZaResource.A_zimbraCalResContactPhone, type:_TEXTFIELD_, msgName:ZaMsg.NAD_ContactPhone,
									label:ZaMsg.NAD_ContactPhone, labelLocation:_LEFT_, width:defaultWidth},
								{ref:ZaResource.A_contactInfoAutoComplete, type: _AUTO_COMPLETE_LIST_,
                        						matchValue:ZaContactList.matchValue, matchText: ZaContactList.matchText,
                        						dataLoaderClass: ZaContactList , dataLoaderMethod: ZaContactList.prototype.getContactList ,
                        						compCallback: ZaContactList.prototype._autocompleteCallback,
                        						inputFieldElementId: ZaResource.A_zimbraCalResContactName
                    						}
							]
						},
						{type:_ZAWIZGROUP_, colSizes:["200px","300px"],
							items:[
								{type:_GROUP_, numCols:3, nowrap:true, width:200, msgName:ZaMsg.NAD_LocationDisplayName,label:ZaMsg.NAD_LocationDisplayName, labelLocation:_LEFT_, 
									visibilityChecks:[[ZaItem.hasWritePermission,ZaResource.A_locationDisplayName]],
									items: [
										{ref:ZaResource.A_locationDisplayName, type:_TEXTFIELD_, 
											label:null,	width:defaultWidth,
											enableDisableChecks:[ZaNewResourceXWizard.isAutoDisplayname, ZaItem.hasWritePermission],
                                                                                        enableDisableChangeEventSources:[ZaResource.A2_autoLocationName],bmolsnr:true
										},
										{ref:ZaResource.A2_autoLocationName, type:_WIZ_CHECKBOX_, msgName:ZaMsg.NAD_Auto,label:ZaMsg.NAD_Auto,labelLocation:_RIGHT_,trueValue:"TRUE", falseValue:"FALSE",
											elementChanged: ZaResource.setAutoLocationName,
											enableDisableChecks:[[ZaItem.hasWritePermission,ZaResource.A_locationDisplayName]],
											visibilityChecks:[[ZaItem.hasWritePermission,ZaResource.A_locationDisplayName]]
										}
									]
								},								
								{ref:ZaResource.A_zimbraCalResSite, type:_TEXTFIELD_, msgName:ZaMsg.NAD_Site,label:ZaMsg.NAD_Site, 
										labelLocation:_LEFT_, width:defaultWidth, elementChanged: ZaResource.setAutoLocationName},
								{ref:ZaResource.A_zimbraCalResBuilding, type:_TEXTFIELD_, msgName:ZaMsg.NAD_Building,label:ZaMsg.NAD_Building, 
										labelLocation:_LEFT_, width:defaultWidth, elementChanged: ZaResource.setAutoLocationName},						
								{ref:ZaResource.A_zimbraCalResFloor, type:_TEXTFIELD_, msgName:ZaMsg.NAD_Floor,label:ZaMsg.NAD_Floor, 
										labelLocation:_LEFT_, width:defaultWidth, elementChanged: ZaResource.setAutoLocationName},						
								{ref:ZaResource.A_zimbraCalResRoom, type:_TEXTFIELD_, msgName:ZaMsg.NAD_Room,label:ZaMsg.NAD_Room, 
										labelLocation:_LEFT_, width:defaultWidth, elementChanged: ZaResource.setAutoLocationName},
								{ref:ZaResource.A_zimbraCalResCapacity, type:_TEXTFIELD_, msgName:ZaMsg.NAD_Capacity,label:ZaMsg.NAD_Capacity, 
									labelLocation:_LEFT_, width:defaultWidth,
									visibilityChecks:[ZaResourceXFormView.isLocation],
									visibilityChangeEventSources:[ZaResource.A_zimbraCalResType]
								}
							]
						},
						{type:_ZAWIZGROUP_, colSizes:["200px","275px"],
							items:ZaAccountXFormView.getAddressFormItemForDialog()
						}
					]
				};
	cases.push(case2);

	var signatureGroup = {type:_ZAWIZGROUP_, id:"account_wiz_signature_group",
		numCols:2, colSpan:2, width:"100%", colSizes:["200px", "auto"],
	 	items:[
			{ref:ZaResource.A2_signatureList, type:_REPEAT_, msgName:"", colSpan:2,
				label:"", labelLocation:_NONE_,
                addButtonLabel:ZaMsg.NAD_AddSignature, removeButtonLabel: ZaMsg.NAD_RemoveSignature,  showAddOnNextRow:true,
                addButtonCSSStyle:"margin-left:200px",
				showAddButton:true, showRemoveButton:true,
                visibilityChecks: [ZaResourceXFormView.isSignatureSectionVisible],
                enableDisableChecks: [],
                items: [
                    {
                        ref:".", type:_SIGNATURE_, width:"100%",
                        visibilityChecks: [],
                        enableDisableChecks: []
                    }
                ],
                getDisplayValue: function(value){
                    var form = this.getForm().parent;
                    var instance = this.getInstance();
                    var tempChoice = ZaSignature.getNewSignatureChoices(instance[ZaResource.A2_signatureList]);
                    form.signatureChoices.setChoices(tempChoice);
                    form.signatureChoices.dirtyChoices();
                    return value;
                }
            },
            {ref:ZaResource.A_zimbraPrefCalendarAutoAcceptSignatureId, type:_OSELECT1_,
                msgName:ZaMsg.NAD_zimbraPrefCalendarAutoAcceptSignatureId,
                width: "280px",
                label:ZaMsg.NAD_zimbraPrefCalendarAutoAcceptSignatureId, labelLocation:_LEFT_,
                visibilityChecks:[ZaItem.hasWritePermission],
                enableDisableChecks:[ZaResourceXFormView.isSignatureSelectionEnabled],
                enableDisableChangeEventSources:[ZaResource.A2_signatureList],
                valueChangeEventSources:[ZaResource.A2_signatureList],
                choices:this.signatureChoices
            },
            {ref:ZaResource.A_zimbraPrefCalendarAutoDeclineSignatureId, type:_OSELECT1_,
                msgName:ZaMsg.NAD_zimbraPrefCalendarAutoDeclineSignatureId,
                width: "280px",
                label:ZaMsg.NAD_zimbraPrefCalendarAutoDeclineSignatureId, labelLocation:_LEFT_,
                visibilityChecks:[ZaItem.hasWritePermission],
                enableDisableChecks:[ZaResourceXFormView.isSignatureSelectionEnabled],
                enableDisableChangeEventSources:[ZaResource.A2_signatureList],
                valueChangeEventSources:[ZaResource.A2_signatureList],
                choices:this.signatureChoices
            },
            {ref:ZaResource.A_zimbraPrefCalendarAutoDenySignatureId, type:_OSELECT1_,
                msgName:ZaMsg.NAD_zimbraPrefCalendarAutoDenySignatureId,
                width: "280px",
                label:ZaMsg.NAD_zimbraPrefCalendarAutoDenySignatureId, labelLocation:_LEFT_,
                visibilityChecks:[ZaItem.hasWritePermission],
                enableDisableChecks:[ZaResourceXFormView.isSignatureSelectionEnabled],
                enableDisableChangeEventSources:[ZaResource.A2_signatureList],
                valueChangeEventSources:[ZaResource.A2_signatureList],
                choices:this.signatureChoices
            }
		]
	};
    var case3 = {type:_CASE_, numCols:1, caseKey:ZaNewResourceXWizard.step3, align:_LEFT_, valign:_TOP_,
		items:[signatureGroup]
	};
    cases.push(case3);

	xFormObject.items = [
        {
            type: _OUTPUT_,
            colSpan: 2,
            valign: _TOP_,
            cssStyle: "white-space: normal",
            ref: ZaModel.currentStep,
            choices: this.stepChoices,
            valueChangeEventSources: [ZaModel.currentStep]
        },
        {
            type: _SEPARATOR_,
            align: _CENTER_,
            valign: _TOP_
        },
        {
            type: _SPACER_,
            align: _CENTER_,
            valign: _TOP_
        },
        {
            type: _SWITCH_,
            width: 720,
            align: _LEFT_,
            valign: _TOP_,
            cssStyle: "white-space: normal",
            items: cases
        }
    ];
};
ZaXDialog.XFormModifiers["ZaNewResourceXWizard"].push(ZaNewResourceXWizard.myXFormModifier);
ZaNewResourceXWizard.isAutoDisplayname = function () {
        return(this.getInstanceValue(ZaResource.A2_autoLocationName)=="FALSE");
}

ZaNewResourceXWizard.canSetPassword = function() {
    return (ZaZimbraAdmin.haveAnyTargetRight(ZaItem.RESOURCE, ZaResource.SET_CALRES_PASSWORD_RIGHT)
         || ZaZimbraAdmin.haveAnyTargetRight(ZaItem.RESOURCE, ZaResource.CHANGE_CALRES_PASSWORD_RIGHT));
}
}
if (AjxPackage.define("zimbraAdmin.resource.view.ZaSignatureDlg")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 5/26/11
 * Time: 8:12 PM
 * To change this template use File | Settings | File Templates.
 */


ZaEditSignatureDialog = function(parent,   w, h, title) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.OK_BUTTON, DwtDialog.CANCEL_BUTTON];
	ZaXDialog.call(this, parent, null, title, w, h, null, ZaId.DLG_EDIT_SIGNATURE);
	this._containedObject = {};
	this.initForm(ZaSignature.myXModel,this.getMyXForm());
    this._localXForm.addListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, new AjxListener(this, ZaEditSignatureDialog.prototype.handleXFormChange));
	this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, new AjxListener(this, ZaEditSignatureDialog.prototype.handleXFormChange));
}

ZaEditSignatureDialog.prototype = new ZaXDialog;
ZaEditSignatureDialog.prototype.constructor = ZaEditSignatureDialog;

ZaEditSignatureDialog.prototype.handleXFormChange = function () {
    var obj = this.getObject();

    var isEnabledOk = (!AjxUtil.isEmpty(obj[ZaSignature.A2_name])) && (!AjxUtil.isEmpty(obj[ZaSignature.A2_content]));

    this._button[DwtDialog.OK_BUTTON].setEnabled(isEnabledOk);
}

ZaEditSignatureDialog.prototype.getMyXForm =
function() {
	var xFormObject = {
		numCols:1,
		items:[
            {type:_GROUP_,isTabGroup:true,
            	items: [ //allows tab key iteration
                	{ref:ZaSignature.A2_name, type:_TEXTFIELD_, width:"300px", label:ZaMsg.Dlg_SignatureName,visibilityChecks:[],enableDisableChecks:[]},
                    {ref:ZaSignature.A2_content, type:_TEXTAREA_,
                        width:"300px", label:ZaMsg.Dlg_SignatureContent, msgName:ZaMsg.Dlg_SignatureContent,
                        labelLocation:_LEFT_,visibilityChecks:[],enableDisableChecks:[]}
                ]
            }
        ]
	};
	return xFormObject;
}


}
if (AjxPackage.define("zimbraAdmin.ZaZimbraAdmin")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* Creates a controller to run ZimbraAdmin. Do not call directly, instead use the run()
* factory method.
* @constructor ZimbraAdmin
* @param appCtx
* @class ZimbraAdmin
* This class is responsible for bootstrapping the ZimbraAdmin application.
*/
ZaZimbraAdmin = function(appCtxt) {
    if (arguments.length == 0) return;
    ZaZimbraAdmin._instance = this;
    ZaController.call(this, appCtxt, null,"ZaZimbraAdmin");

    ZaZimbraAdmin.showSplash(this._shell);
    skin.showSkin();
    appCtxt.setAppController(this);
    
    // handles to various apps
    this._appFactory = new Object();
    this._appFactory[ZaZimbraAdmin.ADMIN_APP] = ZaApp;
    this.startup();
    //this.aboutDialog = new ZaAboutDialog(this._shell,null,ZabMsg.about_title);
}

ZaZimbraAdmin.prototype = new ZaController;
ZaZimbraAdmin.prototype.constructor = ZaZimbraAdmin;
ZaZimbraAdmin._instance = null;

ZaZimbraAdmin.ADMIN_APP = "admin";
ZaZimbraAdmin.currentUserName = "" ;
ZaZimbraAdmin.currentUserLogin = "";
ZaZimbraAdmin.currentUserId = "";
ZaZimbraAdmin.URN = "urn:zimbraAdmin";
ZaZimbraAdmin.VIEW_INDEX = 0;
ZaZimbraAdmin.FIRST_DAY_OF_WEEK = 0;
ZaZimbraAdmin.isFirstRequest = false;

ZaZimbraAdmin._ADDRESSES = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._SEARCHES = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._ACCOUNTS_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._ALIASES_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._DISTRIBUTION_LISTS_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._SYS_CONFIG = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._GLOBAL_SETTINGS = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._SERVERS_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._DOMAINS_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._COS_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._MONITORING = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._TOOLS = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._STATUS = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._STATISTICS = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._STATISTICS_BY_SERVER = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._SEARCH_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._SEARCH_BUILDER_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._SEARCH_BUILDER_TOOLBAR_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._ZIMLET_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._ADMIN_ZIMLET_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._RESOURCE_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;

ZaZimbraAdmin._SERVER_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._DOMAIN_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._COS_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._ACCOUNT_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._ALIAS_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._DL_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._HELP_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._MIGRATION_WIZ_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._POSTQ_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._POSTQ_BY_SERVER_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._RESOURCE_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._ZIMLET_VIEW = ZaZimbraAdmin.VIEW_INDEX++;

// new UI
ZaZimbraAdmin._HOME_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._MONITOR_HOME_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._MANAGE_ACCOUNT_HOME_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._ADMINISTRATION_HOME_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._MIGRATION_HOME_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._DOWNLOAD_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._SEARCH_HOME_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._SEARCH_RESULT_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._SEARCH_FILTER_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._SERVER_STATUS_VIEW =  ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._SERVER_STATISTICS_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._SERVER_STATISTICS_TAB_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._SERVER_LIST_FOR_STATISTICS_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._HELP_CENTER_HOME_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._HELP_CENTER_VIEW = ZaZimbraAdmin.VIEW_INDEX++;

ZaZimbraAdmin._HOME_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._XFORM_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._XFORM_TAB_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._ACCOUNT_ALIAS_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._COS_ACCOUNT_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._COS_DOMAIN_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._DOMAIN_ACCOUNT_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._DOMAIN_ALIAS_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._DL_ALIAS_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;
ZaZimbraAdmin._DL_MEMBERS_LIST_VIEW = ZaZimbraAdmin.VIEW_INDEX++;

// do not change the name of the cookie! SoapServlet looks for it
ZaZimbraAdmin._COOKIE_NAME = "ZM_ADMIN_AUTH_TOKEN";
ZaZimbraAdmin.TEST_COOKIE_NAME = "ZA_TEST";
    
// Public methods

ZaZimbraAdmin.prototype.toString = 
function() {
    return "ZaZimbraAdmin";
}

ZaZimbraAdmin.clearCookie = function () {
    try {
        var soapDoc = AjxSoapDoc.create("ClearCookieRequest", ZaZimbraAdmin.URN, null);
        var cookieBy = soapDoc.set("cookie");
        cookieBy.setAttribute("name", ZaZimbraAdmin._COOKIE_NAME);
        var clearCookieCommand = new ZmCsfeCommand();
        var params = new Object();
        params.soapDoc = soapDoc;
        params.skipExpiredToken = true;    
        params.asyncMode = false;
        params.noAuthToken = true;
        clearCookieCommand.invoke(params);
    } catch (ex) {
        this._handleException(ex, "ZaZimbraAdmin.clearCookie", null, true);
    }
}
/**
* Sets up ZimbraMail, and then starts it by calling its constructor. It is assumed that the
* CSFE is on the same host.
*
* @param domain        the host that we're running on
*/
ZaZimbraAdmin.run =
function(domain) {
    if(window._dwtShellId )
        return;
    if(!DBG)
        DBG = new AjxDebug(AjxDebug.NONE, null, false);
    ZmCsfeCommand.setServerUri(location.protocol+"//" + domain + ZaSettings.CSFE_SERVER_URI);
    ZmCsfeCommand.setCookieName(ZaZimbraAdmin._COOKIE_NAME);

    var soapDoc = AjxSoapDoc.create("GetDomainInfoRequest", ZaZimbraAdmin.URN, null);
    var elBy = soapDoc.set("domain", location.hostname);
    elBy.setAttribute("by", "virtualHostname");

    var command = new ZmCsfeCommand();
    var params = new Object();
    params.soapDoc = soapDoc;
    params.noAuthToken = true;
    var resp;
    var isResend = false;
    try {
        resp = command.invoke(params).Body.GetDomainInfoResponse;
    } catch (ex) {
        if (ex.code == ZmCsfeException.SVC_AUTH_EXPIRED) {
          isResend = true;
        } else {
            throw ex;
        }
    }
    if (isResend) {
        ZaZimbraAdmin.clearCookie();
        params.resend = true;
        resp = command.invoke(params).Body.GetDomainInfoResponse;
    }

    if(resp) {
        var obj = {};
        ZaItem.prototype.initFromJS.call(obj, resp.domain[0]);
        ZaZimbraAdmin.zimbraAdminLoginURL = obj.attrs["zimbraAdminConsoleLoginURL"] ;
        if(obj.attrs["zimbraSkinLogoURL"]){
            ZaSettings.LOGO_URI = obj.attrs["zimbraSkinLogoURL"];
        }
    }
    // Create the global app context
    var appCtxt = new ZaAppCtxt();

    // Create the shell
    var userShell = window.document.getElementById(ZaSettings.get(ZaSettings.SKIN_SHELL_ID));
    var shell = new DwtShell({userShell:userShell});
    appCtxt.setShell(shell);    
    
    /* Register our keymap and global key action handler with the shell's keyboard manager 
     * CURRENTLY use $set: kbnav. 
     */
    this._kbMgr = shell.getKeyboardMgr();
    this._kbMgr.enable(true);
    this._kbMgr.registerKeyMap(new ZaKeyMap());
    this._kbMgr.pushDefaultHandler(this);
    this._kbMgr.setTabGroup(appCtxt.getRootTabGroup());

    // Disable preventSelection
    DwtControl.prototype.preventSelection = function(){
        return false;
    };

    // Go!
    var lm = new ZaZimbraAdmin(appCtxt);
}
ZaZimbraAdmin.prototype.getKeymapNameToUse = function () {
    if (ZaApp.getInstance() && ZaApp.getInstance().getCurrentController()) {
        var c = ZaApp.getInstance().getCurrentController();
        if (c && c.handleKeyAction)
            return c.toString();
    }
    return "ZaGlobal";
}

ZaZimbraAdmin.prototype.handleKeyAction = function () {
    switch (actionCode) {
        case ZaKeyMap.DBG_NONE:
            alert("Setting domain search limit to:" + AjxDebug.NONE);
            DBG.setDebugLevel(AjxDebug.NONE);
            break;
            
        case ZaKeyMap.DBG_1:
                        alert("Setting domain search limit to:" + AjxDebug.DBG1);
            DBG.setDebugLevel(AjxDebug.DBG1);
            break;
            
        case ZaKeyMap.DBG_2:
            alert("Setting domain search limit to:" + AjxDebug.DBG2);
            DBG.setDebugLevel(AjxDebug.DBG2);
            break;
            
        case ZaKeyMap.DBG_3:
            alert("Setting domain search limit to:" + AjxDebug.DBG3);
            DBG.setDebugLevel(AjxDebug.DBG3);
            break;
            
        default: {
            
            if (ZaApp.getInstance() && ZaApp.getInstance().getCurrentController()) {
                var c = ZaApp.getInstance().getCurrentController();
                if (c && c.handleKeyAction)
                    return c.handleKeyAction(actionCode, ev);
            } else {
                return false;
            }
            break;
        }
    }
    return true;
}
ZaZimbraAdmin.getInstance = function() {
    if(ZaZimbraAdmin._instance) {
        return ZaZimbraAdmin._instance;
    } else {
        ZaZimbraAdmin.run(document.domain);
        return ZaZimbraAdmin._instance;
    }
}

/**
* Returns a handle to the given app.
*
* @param appName    an app name
*/
ZaZimbraAdmin.prototype.getApp =
function() {
    return this._app;    
}

ZaZimbraAdmin.prototype.getAdminApp = 
function() {
    return this._app;
}

/**
* Returns a handle to the app view manager.
*/
ZaZimbraAdmin.prototype.getAppViewMgr =
function() {
    return this._appViewMgr;
}

/**
* Returns a handle to the overview panel controller.
*/

ZaZimbraAdmin.prototype.getOverviewPanelController =
function() {
    if(ZaSettings.TREE_ENABLED) {
        if (this._overviewPanelController == null) {
            this._overviewPanelController = new ZaOverviewPanelController(this._appCtxt, this._shell);
            this._overviewPanelController.addSearchListener(new AjxListener(this._overviewPanelController, ZaOverviewPanelController.prototype.handleSearchFinished));
        }
        return this._overviewPanelController;
    } else {
        return null;
    }
}

ZaZimbraAdmin.prototype.getTaskController =
function() {
    if (this._taskController == null) {
        this._taskController= new ZaTaskController(this._appCtxt, this._shell);
    }
    return this._taskController;
}

/**
* Sets the name of the currently active app. Done so we can figure out when an
* app needs to be launched.
*
* @param appName    the app
*/
ZaZimbraAdmin.prototype.setActiveApp =
function(appName) {
//    this._activeApp = appName;
}

ZaZimbraAdmin.logOff =
function() {
    ZmCsfeCommand.noAuth = true;
    window.onbeforeunload = null;
    
    // NOTE: Mozilla sometimes handles UI events while the page is
    //       unloading which references classes and objects that no
    //       longer exist. So we put up the busy veil and reload
    //       after a short delay.
    var shell = DwtShell.getShell(window);
    shell.setBusy(true);
    
    var locationStr = location.protocol + "//" + location.hostname
            + ((location.port == '80') ? "" : ":" +location.port)
            + location.pathname
            //we want to add the query string as well
            + location.search;
    if (location.search) {
        locationStr = locationStr + "&logoff=1";
    } else {
        locationStr = locationStr + "?logoff=1";
    }

    var act = new AjxTimedAction(null, ZaZimbraAdmin.redir, [locationStr]);
    AjxTimedAction.scheduleAction(act, 100);
}

ZaZimbraAdmin.redir =
function(locationStr){
    window.location = locationStr;
}
// This function must be called after ZaZimbraAdmin.initInfo() is called.
ZaZimbraAdmin.isLanguage =
function(lang){
    var defaultLang = null;
    //if user have set its pref, just use user's seting
    //else use brower's setting 
    if(ZaZimbraAdmin.LOCALE == null){
        defaultLang = AjxEnv.DEFAULT_LOCALE;
    }else{
        defaultLang = ZaZimbraAdmin.LOCALE;
    }

    return defaultLang == lang;
}
// Start up the ZimbraMail application
ZaZimbraAdmin.prototype.startup =
function(aIsAuthTokenPresent) {

    this._appViewMgr = new ZaAppViewMgr(this._shell, this, true);
    try {
        if (!aIsAuthTokenPresent) {
            //try refreshing the AuthToken, if we're not logged in we will be thrown out here
            this._refreshing = true;
            this._doAuth();
        }
    } catch (ex) {
        if(ex && ex.code != ZmCsfeException.NO_AUTH_TOKEN && ex.code != ZmCsfeException.SVC_AUTH_EXPIRED && ex.code != ZmCsfeException.SVC_AUTH_REQUIRED) {
            if(!ZaSettings.initialized)
                ZaSettings.init();
            else
                ZaZimbraAdmin._killSplash();
        }
        this._handleException(ex, "ZaZimbraAdmin.prototype.startup", null, true);
    }
}

ZaZimbraAdmin.reload_msg = function () {
    //if(window.console && window.console.log) console.log("Reloading the message ...");
    var includes = [] ;
    includes.push ( [appContextPath , "/res/" , "I18nMsg,TzMsg,AjxMsg,ZMsg,ZaMsg,ZabMsg,AjxKeys" , ".js?v=",
                        appVers , ZaZimbraAdmin.LOCALE_QS].join("") );

    //the dynamic script load is asynchronous, may need a callback to make sure all the messages are actually loaded
    //if(window.console && window.console.log) console.log("Reload the message file: " + includes.toString());

    //reinitialize the AjxFormat after the message files are loaded
    var callback = new AjxCallback (ZaZimbraAdmin.reinit_func);

    AjxInclude(includes, null, callback);
    ZaZimbraAdmin._LOCALE_MSG_RELOADED = true;
}

ZaZimbraAdmin.reinit_func = function() {
    AjxFormat.initialize();
    ZaItem.initDescriptionItem();
    ZaSettings.initConst();
    ZaDomain.initDomainStatus();
    Dwt_Datetime_XFormItem.initialize();
}

ZaZimbraAdmin.initInfo =
function (resp) {
    if(resp && resp.Body && resp.Body.GetInfoResponse) {
        ZaZimbraAdmin.currentUserLogin = resp.Body.GetInfoResponse.name;
        ZaZimbraAdmin.currentUserId = resp.Body.GetInfoResponse.id;
        var adminName = resp.Body.GetInfoResponse.name;

        if(adminName) {
            var emailChunks = adminName.split("@");
            if(emailChunks.length > 1 ) {
                ZaSettings.myDomainName = emailChunks[1];
            }
        }
        
        ZaZimbraAdmin.currentAdminId = resp.Body.GetInfoResponse.id;
        
        if (resp.Body.GetInfoResponse.attrs){
            if(resp.Body.GetInfoResponse.attrs.attr && resp.Body.GetInfoResponse.attrs.attr instanceof Array) {
                var attrsArr = resp.Body.GetInfoResponse.attrs.attr;
                for ( var i=0; i < attrsArr.length; i ++) {
                    if (attrsArr[i].name == "displayName") {
                        var v = attrsArr[i]._content ;
                        if (v != null && v.length > 0) {
                            ZaZimbraAdmin.currentUserName = v ;
                        }
                    }
                }
            } else if (resp.Body.GetInfoResponse.attrs._attrs && typeof(resp.Body.GetInfoResponse.attrs._attrs) == "object") {
                var attrsArr = resp.Body.GetInfoResponse.attrs._attrs;
                if(attrsArr["displayName"] && attrsArr["displayName"].length) 
                    ZaZimbraAdmin.currentUserName = attrsArr["displayName"];
    
            }
            //fallback to email address    
            if (!ZaZimbraAdmin.currentUserName || ZaZimbraAdmin.currentUserName.length <=0){
                ZaZimbraAdmin.currentUserName = ZaZimbraAdmin.currentUserLogin;
            }
    
            if (resp && resp.Body && resp.Body.GetInfoResponse && resp.Body.GetInfoResponse.prefs) {
                var prefs = resp.Body.GetInfoResponse.prefs._attrs ;
                if (prefs && prefs["zimbraPrefLocale"]) {
                    //get the zimbraPrefLocale
                    ZaZimbraAdmin.LOCALE = prefs["zimbraPrefLocale"] ;
                }

                if (prefs && prefs[ZaAccount.A_zimbraPrefAdminConsoleWarnOnExit]) {
                    ZaZimbraAdmin.isWarnOnExit = (prefs[ZaAccount.A_zimbraPrefAdminConsoleWarnOnExit] == "TRUE") ;
                }
               
                if (prefs && !AjxUtil.isEmpty(prefs[ZaAccount.A_zimbraPrefCalendarFirstDayOfWeek])) {
                    ZaZimbraAdmin.FIRST_DAY_OF_WEEK = prefs[ZaAccount.A_zimbraPrefCalendarFirstDayOfWeek];
                }
            }
        }
    }
}

ZaZimbraAdmin.prototype._setLicenseStatusMessage = function () {
    if ((typeof ZaLicense == "function") && (ZaSettings.LICENSE_ENABLED)){
        ZaLicense.setLicenseStatus(this);
    } 
}

ZaZimbraAdmin.prototype.setStatusMsg = 
function(msg, clear) {
    if(!ZaSettings.STATUS_ENABLED) {
        return;
    }
}

ZaZimbraAdmin.prototype.clearStatus = 
function() {
    if(!ZaSettings.STATUS_ENABLED) {
        return;
    }
}

ZaZimbraAdmin.prototype._createAppTabs =
function () {
    var appTabGroup = new ZaAppTabGroup(this._shell);
    return appTabGroup ;
}

ZaZimbraAdmin.prototype._createRefreshLink =
function() {
    var refreshContainer = document.getElementById(ZaSettings.SKIN_REFRESH_DOM_ID);
    if(!refreshContainer) {
        return;
    }
    var refreshLabel = new DwtComposite (this._shell, "RefreshContainer", Dwt.RELATIVE_STYLE);
    var refreshEl = refreshLabel.getHtmlElement();
    refreshLabel.setCursor ("pointer");
    refreshEl.onclick = function () { ZaZimbraAdmin.prototype._refreshListener.call(ZaZimbraAdmin.getInstance());};
    refreshEl.innerHTML = this._getAppLink(null, "SearchRefreshWhite");
    refreshLabel.reparentHtmlElement (ZaSettings.SKIN_REFRESH_DOM_ID) ;
}


ZaZimbraAdmin.prototype._createPreviousLink =
function() {
    var previousContainer = document.getElementById(ZaSettings.SKIN_PREVIOUS_DOM_ID);
    if(!previousContainer) {
        return;
    }
    var previousLabel = this._previousContainer = new DwtComposite (this._shell, "PreviousContainer", Dwt.RELATIVE_STYLE);
    var previousEl = previousLabel.getHtmlElement();
    previousLabel.setCursor ("pointer");
    previousEl.onclick = function () { ZaZimbraAdmin.prototype._goPrevListener.call(ZaZimbraAdmin.getInstance());};
    previousEl.innerHTML =  AjxImg.getImageSpanHtml("LeftArrowNormal");
    previousLabel.reparentHtmlElement (ZaSettings.SKIN_PREVIOUS_DOM_ID) ;
}

ZaZimbraAdmin.prototype._createNextLink =
function() {
    var nextContainer = document.getElementById(ZaSettings.SKIN_NEXT_DOM_ID);
    if(!nextContainer) {
        return;
    }
    var nextLabel = this._nextContainer = new DwtComposite (this._shell, "NextContainer", Dwt.RELATIVE_STYLE);
    var nextEl = nextLabel.getHtmlElement();
    nextLabel.setCursor ("pointer");
    nextEl.onclick = function () { ZaZimbraAdmin.prototype._goNextListener.call(ZaZimbraAdmin.getInstance());};
    nextEl.innerHTML = AjxImg.getImageSpanHtml("RightArrowNormal");
    nextLabel.reparentHtmlElement (ZaSettings.SKIN_NEXT_DOM_ID) ;
}

ZaZimbraAdmin.prototype.updatePreNext =
function () {
    var isPrevious = this._historyMgr.isPrevious();
    var isNext = this._historyMgr.isNext();

    this._previousContainer.setEnabled(isPrevious);
    this._nextContainer.setEnabled(isNext);

}
ZaZimbraAdmin.prototype._refreshListener =
function(ev) {
    var curController = ZaApp.getInstance().getCurrentController();
    if (AjxUtil.isInstance(curController, ZaHelpViewController)){
        return; //don't refresh help
    }

    var tree = ZaZimbraAdmin.getInstance().getOverviewPanelController().getOverviewPanel().getFolderTree();
    if(AjxUtil.isEmpty(tree)){
        return;
    }

    var curItems = tree.getCurrentSelectedItems().getArray();
    if(AjxUtil.isEmpty(curItems) || AjxUtil.isEmpty(curItems[0])){
        return;
    }

    var curItem = curItems[0];
    var curPath = tree.getABPath(curItem.getData("dataItem"));
    if(AjxUtil.isEmpty(curPath)){
        return;
    }

    tree.setSelectionByPath(curPath, false, undefined, undefined, undefined, true);
}

ZaZimbraAdmin.prototype._goPrevListener =
function(ev) {
    var currentObject = this._historyMgr.getPrevious();
    if (currentObject) {
        currentObject.goToView();
        this.updatePreNext();
    }
}

ZaZimbraAdmin.prototype._goNextListener =
function(ev) {
    var currentObject = this._historyMgr.getNext();
    if (currentObject) {
        currentObject.goToView();
        this.updatePreNext();
    }
}

ZaZimbraAdmin.prototype._createHelpLink =
function() {
    var helpSkinContainer = document.getElementById(ZaSettings.SKIN_HELP_DOM_ID);
    if(!helpSkinContainer) {
        return;
    }
    var dwButton = new DwtBorderlessButton(this._shell, "", "", Dwt.RELATIVE_STYLE);
    dwButton.setText(ZaMsg.help);
    dwButton.setDropDownImages("NodeExpandedWhite");

    helpSkinContainer.innerHTML = "";
    dwButton.reparentHtmlElement (ZaSettings.SKIN_HELP_DOM_ID);

    // Add Zimbra Help Desk Menu
    var helpMenuOpList = new Array();
    var menu = new ZaPopupMenu(dwButton, "ZaHelpDropdown",null, helpMenuOpList, "ZA_HELP");

    var mItem =  new DwtMenuItem ({parent:menu, id: "zaHelpHomepage", className:"ZaHelpDropdownFirstItem"});
    mItem.setText(ZabMsg.homePage);
    mItem.addSelectionListener(new AjxListener(this, this._contextHelpListener));

    mItem =  new DwtMenuItem ({parent:menu, id: "zaHelpCenter", className:"ZaHelpDropdownItem"});
    mItem.setText(ZaMsg.zimbraHelpCenter);
    mItem.addSelectionListener(new AjxListener(this, this._helpListener));

    mItem =  new DwtMenuItem ({parent:menu, id: "aboutZimbra", className:"ZaHelpDropdownLastItem"});
    mItem.setText(ZabMsg.about);
    mItem.addSelectionListener(new AjxListener(this, this._aboutZimbraListener));

    menu.addChild(this._createHelpSearch(), 0);
    menu.addPopupListener(new AjxListener(this, this._helpMenuPopupListener, menu));

    dwButton.setMenu(menu,true);
}

ZaZimbraAdmin.prototype._createHelpSearch =
function() {
    var helpSearch = new DwtComposite (this._shell, "ZaHelpDropdownSearch", Dwt.RELATIVE_STYLE);
    var helpSearchBox = new DwtComposite (helpSearch, "SearchPanel", Dwt.RELATIVE_STYLE);
    var searchIcon = new DwtComposite({parent:helpSearchBox, className:"ImgSearch ZaHelpSearchIcon"});
    searchIcon.getHtmlElement().onclick = this._openSupportSite;

    var searchInputField = new DwtInputField({parent:helpSearchBox, validationStyle:DwtInputField.ONEXIT_VALIDATION, inputId:"ZaHelpSearchInput"});
    searchInputField.setValidatorFunction(searchInputField.getInputElement(), this._openSupportSite);
    searchInputField.getInputElement().onblur = null;
    return helpSearch;
}

ZaZimbraAdmin.prototype._helpMenuPopupListener =
function(menu) {
    var helpHomePageItem = menu.getItem(1);
    if (!helpHomePageItem) {
        return null;
    }

    var itemW = helpHomePageItem.getW() - 20;

    //assume 5.5px per letter
    var maxNumberOfLetters = Math.floor((itemW - 30)/5.5);
    var text = ZaApp.getInstance().getCurrentController()._helpButtonText;
    if (maxNumberOfLetters < text.length){ //set the new text
        text = text.substring(0, (maxNumberOfLetters - 3)) + "...";
    }

    helpHomePageItem.setText(text);
}

ZaZimbraAdmin.prototype._openSupportSite =
function() {
    window.open(ZaSettings.ZIMBRA_SUPPORT_URL_QUERY + document.getElementById("ZaHelpSearchInput").value);
}

ZaZimbraAdmin.prototype._contextHelpListener =
function() {
    window.open(ZaApp.getInstance().getCurrentController()._helpURL);
}

ZaZimbraAdmin.prototype._aboutZimbraListener =
function() {
    if (!this.aboutZimbraDialog) {
        this.aboutZimbraDialog = new ZaAboutDialog(this._shell);
    }
    this.aboutZimbraDialog.popup();
}

ZaZimbraAdmin.prototype._createOldHelpLink =
function() {
    var helpSkinContainer = document.getElementById(ZaSettings.SKIN_HELP_DOM_ID);
    if(!helpSkinContainer) {
        return;
    }
    var helpLabel = new DwtComposite (this._shell, "HelpContainer", Dwt.RELATIVE_STYLE);
    var helpEl = helpLabel.getHtmlElement();
    helpLabel.setCursor ("pointer") ;

    var iconName = "";
    if (ZaSettings.isYahooSmbPADomainAdmin)   {
        helpLabel.getHtmlElement().innerHTML =
            this._getAppLink("SMBAccount.openHelpDesk();", iconName,  ZaMsg.helpDesk, skin.skin_container_help_max_str_length);
    } else { //this is the help link for the regular admin
        var listener = new AjxListener(this, this._helpListener);
        var adminObj = this ;
        helpLabel.getHtmlElement().onclick = function () { ZaZimbraAdmin.prototype._helpListener.call(adminObj) ;};
        helpLabel.getHtmlElement().innerHTML =
             this._getAppLink(null, iconName,  ZaMsg.helpDesk, skin.skin_container_help_max_str_length);
    }
    helpLabel.reparentHtmlElement (ZaSettings.SKIN_HELP_DOM_ID) ;
}

ZaZimbraAdmin.prototype._createDownloadLink =
function() {
    var downloadsContainer = document.getElementById(ZaSettings.SKIN_DW_DOM_ID);
    if(!downloadsContainer) {
        return;
    }
    var dwLabel = new DwtComposite (this._shell, "DWContainer", Dwt.RELATIVE_STYLE);
    var listener = new AjxListener(this, this._dwListener);
    
    //AjxTK addListener doesn't seem to work
    var adminObj = this ;
    dwLabel.getHtmlElement().onclick = function () { ZaZimbraAdmin.prototype._dwListener.call(adminObj) ;};
    dwLabel.setCursor ("pointer") ;
    
    dwLabel.getHtmlElement().innerHTML = 
        this._getAppLink(null, "Migration",  ZaMsg.goToMigrationWiz, skin.skin_container_dw_max_str_length);
    
    dwLabel.reparentHtmlElement (ZaSettings.SKIN_DW_DOM_ID) ;
}

ZaZimbraAdmin.prototype._setUserName =
function () {
    var userNameContainer = document.getElementById(ZaSettings.SKIN_USER_NAME_ID) ;
    if(!userNameContainer) {
        return;
    }
        
    if(!ZaZimbraAdmin.currentUserName) {
        return;
    }
    
    var dwLabel = new DwtLabel(this._shell, "", "", Dwt.RELATIVE_STYLE);    

    var tmpName = AjxStringUtil.htmlEncode(ZaZimbraAdmin.currentUserName);

    var innerContent = "<div class='skin_container_username_div'>" + tmpName + "</div>";

    dwLabel.setText(innerContent);
    dwLabel._setMouseEvents();
    dwLabel.setToolTipContent( tmpName );

    userNameContainer.innerHTML = ""; // clean the "Administrator" inherited from the skin's raw html code
    dwLabel.reparentHtmlElement (ZaSettings.SKIN_USER_NAME_ID) ;
}

ZaZimbraAdmin.prototype._createUserName =
function () {
    var userNameContainer = document.getElementById(ZaSettings.SKIN_USERNAME_DOM_ID) ;
    if(!userNameContainer) {
        return;
    }

    if(!ZaZimbraAdmin.currentUserName) {
        return;
    }

    var dwButton = new DwtBorderlessButton(this._shell, "", "", Dwt.RELATIVE_STYLE);

    var tmpName = AjxStringUtil.htmlEncode(ZaZimbraAdmin.currentUserName);

    var innerContent = "<div class='skin_container_username_div'>" + tmpName + "</div>";

    dwButton.setText(innerContent);
    dwButton.setDropDownImages("NodeExpandedWhite");
    dwButton.setToolTipContent( tmpName );

    userNameContainer.innerHTML = "";
    dwButton.reparentHtmlElement (ZaSettings.SKIN_USERNAME_DOM_ID);

    // Add LogOff Menu
    var userNameMenuOpList = new Array();
    userNameMenuOpList.push(new ZaOperation(ZaOperation.LOGOFF, ZaMsg.logOff, ZaMsg.logOff,  "Logoff", "LogoffDis", new AjxListener(window,ZaZimbraAdmin.logOff)));

    var menu = new ZaPopupMenu(dwButton, null,null, userNameMenuOpList, "ZA_LOGOFF");
    dwButton.setMenu(menu,true);

}

ZaZimbraAdmin.prototype._helpListener =
function(ev) {
    //DBG.println(AjxDebug.DBG1, "Help is clicked ...") ;
    var acctName = ZaZimbraAdmin.currentUserLogin;
    var curAcct = ZaZimbraAdmin.currentAdminAccount;

    if(curAcct) {
        var url = null;
        var prop = (curAcct.attrs[ZaAccount.A_zimbraIsAdminAccount] == "TRUE") ? "A_zimbraHelpAdminURL" : "A_zimbraHelpDelegatedURL";

        var domainName = acctName.split('@')[1];
        var domain = ZaDomain.getDomainByName(domainName);
        var config = ZaApp.getInstance().getGlobalConfig();

        // Check first on domain level
        if(domain) {
            url = domain.attrs[ZaDomain[prop]];
        }

        // Check in global config
        if(!url && config) {
            url = config.attrs[ZaGlobalConfig[prop]];
        }

        if(url) {
            window.open(url);
            return;
        }
    }

    //skin takes the zimbraHelpAdminURL and put it into the skin hints
    var helpButton = skin && skin.hints && skin.hints.helpButton;      
    if (helpButton && helpButton.url) {
        var url = helpButton.url;
        window.open(url);
        return;
    }

    if(ZaApp.getInstance().getCurrentController()) {
        ZaApp.getInstance().getCurrentController().switchToNextView(ZaApp.getInstance().getHelpViewController(), ZaHelpViewController.prototype.show, null);
    } else {                    
        ZaApp.getInstance().getHelpViewController().show();
    }

}

ZaZimbraAdmin.prototype._dwListener = 
function (ev) {
    //DBG.println(AjxDebug.DBG1, "Download is clicked ...") ;
    if(ZaApp.getInstance().getCurrentController()) {
        ZaApp.getInstance().getCurrentController().switchToNextView(ZaApp.getInstance().getMigrationWizController(), ZaMigrationWizController.prototype.show, null);
    } else {                    
        ZaApp.getInstance().getMigrationWizController().show();
    }
}

ZaZimbraAdmin.prototype._createBanner =
function() {
    var logoContainer = document.getElementById(ZaSettings.SKIN_LOGO_DOM_ID);
    if(!logoContainer) {
        return;
    }
    // The LogoContainer style centers the logo
    var banner = new DwtComposite(this._shell, "LogoContainer", Dwt.ABSOLUTE_STYLE);
    var html = new Array();
    var i = 0;
    html[i++] = "<a href='";
    html[i++] = ZaAppCtxt.getLogoURI ();
    html[i++] = "' target='_blank'><div  class='"+AjxImg.getClassForImage("AppBanner")+"'></div></a>";
    banner.getHtmlElement().innerHTML = html.join("");
    banner.getHtmlElement().style.height = '100%';
    return banner;
}

ZaZimbraAdmin.prototype._createLogOff =
function () {
    var logoffMethod ;
    if (ZaSettings.isYahooSmbPADomainAdmin)   {
        logoffMethod = "SMBAccount.logOff();"
    }   else {
        logoffMethod = "ZaZimbraAdmin.logOff();" ;
    }
    
    var logoff = document.getElementById(ZaSettings.SKIN_LOGOFF_DOM_ID);
    if (logoff) {
        logoff.innerHTML = this._getAppLink(logoffMethod, "Logoff",  ZaMsg.logOff);
        logoff.style.cursor = "pointer" ;
    }
}


ZaZimbraAdmin.prototype._getLoginMsgPanel = function () {
    if (!this._loginMsgPanel) {
        this._loginMsgPanel = new DwtComposite (this._shell, null, Dwt.ABSOLUTE_STYLE);

        var loginMsg ;
        try {
            loginMsg = ZaDomain.getLoginMessage() ;
        }catch (ex) {
            this._handleException(ex, "ZaZimbraAdmin.prototype._getLoginMsgPanel", null, true);
        }
        if (loginMsg) {
            var loginMsgEl = new DwtAlert (this._loginMsgPanel, null, Dwt.ABSOLUTE_STYLE) ;

            loginMsgEl.setStyle(DwtAlert.INFORMATION) ;
            loginMsgEl.setContent (loginMsg);

            var dismissBt = new DwtButton({parent: this._loginMsgPanel, className: "DwtToolbarButton"})
            dismissBt.setImage("Close") ;
            dismissBt.setText(ZaMsg.TBB_Close) ;
            dismissBt.addSelectionListener(new AjxListener(this, this.closeLoginMsg)) ;
            loginMsgEl.setDismissContent(dismissBt) ;           
        }else{
            this.closeLoginMsg();
        }
    }
    return this._loginMsgPanel ;
}

ZaZimbraAdmin.prototype.closeLoginMsg = function () {
    //hide the login msg skin component
//    this._loginMsgPanel.setVisible(false)  ;
    var loginMsgPanelId = this._loginMsgPanel.getHTMLElId() ;
    Dwt.hide(loginMsgPanelId) ;
    skin.hideLoginMsg() ;

    //resize the components
    var appViewMgr = ZaApp.getInstance ().getAppViewMgr () ;
    /*var list = [//ZaAppViewMgr.C_LOGIN_MESSAGE,
                ZaAppViewMgr.C_CURRENT_APP, ZaAppViewMgr.C_APP_TABS,
                ZaAppViewMgr.C_TREE,ZaAppViewMgr.C_SASH,
                ZaAppViewMgr.C_TREE_FOOTER ,
                ZaAppViewMgr.C_TOOLBAR_TOP, ZaAppViewMgr.C_APP_CONTENT];
    appViewMgr._stickToGrid(list);
     */
    appViewMgr.fitAll();
    
}

//set the html content for logoff, help and download
//max_lbl_length is used to constrict the maximum length of the label
//which is different in different languages.
ZaZimbraAdmin.prototype._getAppLink =
function(staticFunc, icon, lbl, max_lbl_length) {
    var html = [];
    var i = 0;
    html[i++] = "<table border=0 cellpadding=1 cellspacing=1 align=right><tr>";
    
    //html[i++] = "<td align=right><a  href='javascript:;'";
    html[i++] = "<td align=right><span ";
    if (staticFunc) {
        html[i++] = " onclick='" + staticFunc + "' " ;
    }
    html[i++] = ">";
    html[i++] = AjxImg.getImageHtml(icon, null, "border=0");
    //html[i++] = "</a></td>";
    html[i++] = "</span></td>";

    html[i++] = "<td width=1% align=right style='white-space:nowrap;'><span " ;
    if (staticFunc) {
        html[i++] = " onclick='" + staticFunc + "' " ;
    }

    //if the label is too long, it will be replaced by the
    //label.substr(0, max_length -3) + "..."
    //And a title will also be added, so user will have the chance
    //to view the whole length
    if ((max_lbl_length != null) && max_lbl_length > 0) {
         if (lbl != null && lbl.length > max_lbl_length) {
             var title = lbl ;
             lbl = lbl.substring(0, max_lbl_length -3) + "..." ;
             html[i++] = "title='" + title +"'" ;
         }
    }
    html[i++] = ">";
    html[i++] = lbl;
    html[i++] = "</span></td></tr></table>";
    
    //var cell = document.getElementById(id);
    //if (cell) cell.innerHTML = html.join("");
    return html.join("");
}

/**
* Creates an action status view
**/
ZaZimbraAdmin.prototype._createActionStatus =
function() {
    this.actionStatusView = new ZaActionStatusView(this._shell, "ZaStatus", Dwt.ABSOLUTE_STYLE);
}

/**
 * Displays a status message.
 *
 * @param    {Hash}    params        a hash of parameters
 * @param {String}    params.msg        the message
 * @param {constant}    [params.level] ZaActionStatusView.LEVEL_INFO, ZaActionStatusView.LEVEL_WARNING, or ZaActionStatusView.LEVEL_CRITICAL
 * @param {constant}    [params.detail]     the details
 * @param {constant}    [params.transitions]        the transitions
 * @param {constant}    [params.toast]        the toast control
 * @param {boolean}     [force]        force any displayed toasts out of the way (dismiss them and run their dismissCallback). Enqueued messages that are not yet displayed will not be displayed
 * @param {AjxCallback}    [dismissCallback]    callback to run when the toast is dismissed (by another message using [force], or explicitly calling ZmStatusView.prototype.dismiss())
 * @param {AjxCallback}    [finishCallback]     callback to run when the toast finishes its transitions by itself (not when dismissed)
 */
ZaZimbraAdmin.prototype.setActionStatusMsg =
function(params) {
    if(this.actionStatusView) {
        params = Dwt.getParams(arguments, ZaActionStatusView.MSG_PARAMS);
        this.actionStatusView.setStatusMsg(params);
    }
};
// Private methods

ZaZimbraAdmin._killSplash =
function() {
    //if(window.console && window.console.log) console.log("Killing splash window now ...") ;
    if(ZaZimbraAdmin._splashScreen)
        ZaZimbraAdmin._splashScreen.setVisible(false);
}

ZaZimbraAdmin.showSplash =
function(shell) {
    if(ZaZimbraAdmin._splashScreen)
        ZaZimbraAdmin._splashScreen.setVisible(true);
    else {
        ZaZimbraAdmin._splashScreen = new ZaSplashScreen(shell);
        ZaZimbraAdmin._splashScreen.setVisible(true);
    }
}



/**
* Creates an app object, which doesn't necessarily do anything just yet.
**/
ZaZimbraAdmin.prototype._createApp =
function() {
    this._app = ZaApp.getInstance(this._appCtxt, this._shell);
        
}

ZaZimbraAdmin.prototype.getHistoryMgr =
function() {
    return this._historyMgr;
}

ZaZimbraAdmin.prototype._createHistoryMgr =
function() {
    if (!this._historyMgr)
        this._historyMgr = new ZaHistoryMgr();
}
/**
* Launching an app causes it to create a view (if necessary) and display it. The view that is created is up to the app.
* Since most apps schedule an action as part of their launch, a call to this function should not be
* followed by any code that depends on it (ie, it should be a leaf action).
**/
ZaZimbraAdmin.prototype._launchApp =
function() {
    ZaSettings.TREE_ENABLED = (document.getElementById(ZaSettings.SKIN_TREE_ID)!=null);
    ZaSettings.CURRENT_APP_ENABLED = (document.getElementById(ZaSettings.SKIN_CURRENT_APP_ID)!=null);
    ZaSettings.BANNER_ENABLED = (document.getElementById(ZaSettings.SKIN_LOGO_DOM_ID)!=null);
    ZaSettings.STATUS_ENABLED = (document.getElementById(ZaSettings.SKIN_STATUS_ID)!=null);
    ZaSettings.SEARCH_PANEL_ENABLED = (document.getElementById(ZaSettings.SKIN_SEARCH_PANEL_ID)!=null);
    
    //console.log("Launching ZimbraAdmin Application ....") ;
    if (!this._app)
        this._createApp();

    //recreate the error/msg dialogs
    ZaApp.getInstance().initDialogs();
   // if (ZaZimbraAdmin._LOCALE_MSG_RELOADED) this.initDialogs(true) ;

    this._appCtxt.setClientCmdHdlr(new ZaClientCmdHandler());
    //draw stuff
    var elements = new Object();
        
    //elements[ZaAppViewMgr.C_APP_CHOOSER] = this._createAppChooser();
    


    // the outer element of the entire skin is hidden until this point
    // so that the skin won't flash (become briefly visible) during app loading
    if (skin && skin.show){
        skin.show(true);    
        //hide the advanced search builder at the beginning
        skin.showSearchBuilder(false);  
    }    

    //add logoff
    this._createLogOff();
    this._createHelpLink();
    this._createDownloadLink() ;
    this._setUserName() ;
    
    if(ZaSettings.BANNER_ENABLED) {
        elements[ZaAppViewMgr.C_BANNER] = this._createBanner();
    }
    if(ZaSettings.STATUS_ENABLED) {
        elements[ZaAppViewMgr.C_STATUS] = this._statusBox = new DwtText(this._shell, "statusBox", Dwt.ABSOLUTE_STYLE);
        this.clearStatus();
        this._setLicenseStatusMessage();    
    }
    if(ZaSettings.SEARCH_PANEL_ENABLED) {
        this._createActionStatus();
        elements[ZaAppViewMgr.C_SEARCH_BUILDER_TOOLBAR] = ZaApp.getInstance().getSearchBuilderToolbarController ().getSearchBuilderTBPanel();
        elements[ZaAppViewMgr.C_SEARCH_BUILDER] = ZaApp.getInstance().getSearchBuilderController().getSearchBuilderPanel();
    }
    if(ZaSettings.TREE_ENABLED) {
        elements[ZaAppViewMgr.C_TREE] = this.getOverviewPanelController().getOverviewPanel();
    } 
    if(document.getElementById(ZaSettings.SKIN_APP_SASH_ID)) {
        elements[ZaAppViewMgr.C_SASH] =  new DwtSash({parent:this._shell, style:DwtSash.HORIZONTAL_STYLE,className:"AppSash-horiz", threshold:20, id:"z_sash"});
    }
    if(ZaSettings.SEARCH_PANEL_ENABLED) {
        elements[ZaAppViewMgr.C_SEARCH] = ZaApp.getInstance().getSearchListController().getSearchPanel();
    }
       
       if(document.getElementById (ZaSettings.SKIN_SEARCH_BUILDER_APP_SASH_ID) != null){
            elements[ZaAppViewMgr.C_SEARCH_BUILDER_SASH] = new DwtSash({parent:this._shell, style: DwtSash.VERTICAL_STYLE, className: "AppSash-vert", threshod:20, id:"z_sb_sash"});
    }

    elements[ZaAppViewMgr.C_LOGIN_MESSAGE]  = this._getLoginMsgPanel();
    //Use reparentHtmlelement to add the tabs. Reenable this line if it doesn't work well.
    elements[ZaAppViewMgr.C_APP_TABS] = this._createAppTabs() ;
    if(ZaSettings.CURRENT_APP_ENABLED) {
        elements[ZaAppViewMgr.C_CURRENT_APP] = new ZaCurrentAppToolBar(this._shell);
    }
    this._appViewMgr.addComponents(elements, true);
    
    ZaApp.getInstance().launch();

     ZaZimbraAdmin._killSplash();
};

ZaZimbraAdmin.prototype.updateHistory =
function(historyObject, isAddHistory) {
    if(isAddHistory) {
        this._historyMgr.addHistory(historyObject);
    }

    if (historyObject.displayName) {
        // Don't html encode display name as display name returned from ZaTreeItem is already encoded
        this._header.setText(historyObject);
    }

    if (historyObject.path) {
        this._currentAppBar.setText(historyObject.path);
    }
}

ZaZimbraAdmin.prototype.refreshHistoryTreeByDelete = function(items) {
    var itemArray = AjxUtil.toArray(items);
    var refresh = false;
    for(var i = 0 ; i <  itemArray.length; i++){
        var itemName = itemArray[i].name;

        var historys = this._historyMgr.findHistoryByName(itemName);
        for(var j = 0; j< historys.size(); j++){
            historys.get(j).setEnabled(false);
            refresh = true;
        }
        this._historyMgr.deleteHistoryObjByName(itemName);
    }
    if(refresh)
        this._historyMgr.refreshHistory();
}

ZaZimbraAdmin.prototype.getSettingMenu =
function(popupOperation, popupOrder) {
    if (!this._currentAppBar)
        return "";

    return this._currentAppBar.getMenu();
}

ZaZimbraAdmin.prototype.getCurrentAppBar =
function () {
    return this._currentAppBar;
}

ZaZimbraAdmin.prototype._lauchNewApp =
function() {
    ZaSettings.TREE_ENABLED = (document.getElementById(ZaSettings.SKIN_TREE_DOM_ID)!=null);
    ZaSettings.BANNER_ENABLED = (document.getElementById(ZaSettings.SKIN_LOGO_DOM_ID)!=null);
    ZaSettings.TOASTER_ENABLED = (document.getElementById(ZaSettings.SKIN_TOASTER_DOM_ID)!=null);

    //console.log("Launching ZimbraAdmin Application ....") ;
    if (!this._app)
        this._createApp();

    // add history mgr
    this._createHistoryMgr();
    //recreate the error/msg dialogs
    ZaApp.getInstance().initDialogs();
   // if (ZaZimbraAdmin._LOCALE_MSG_RELOADED) this.initDialogs(true) ;

    this._appCtxt.setClientCmdHdlr(new ZaClientCmdHandler());
    //draw stuff
    var elements = new Object();

    // the outer element of the entire skin is hidden until this point
    // so that the skin won't flash (become briefly visible) during app loading
    if (skin && skin.show){
        skin.show(true);
    }

    //add logoff
    /*
    this._createLogOff();
    this._createHelpLink();
    this._createDownloadLink() ;
    this._setUserName();
    */
    this._createRefreshLink();
    this._createPreviousLink();
    this._createNextLink();
    this._historyMgr.addChangeListener(new AjxListener(this, this.updatePreNext));
    this._createUserName();
    this._createHelpLink();

    if(ZaSettings.BANNER_ENABLED) {
        elements[ZaAppViewMgr.C_BANNER] = this._createBanner();
    }

    if (ZaSettings.TOASTER_ENABLED) {
        this._createActionStatus();
    }
    elements[ZaAppViewMgr.C_SEARCH] = ZaApp.getInstance().getSearchListController().getSearchPanel();

    this._header = elements[ZaAppViewMgr.C_TREE_TOP] = new ZaCrtAppTreeHeader(this._shell);
    if(ZaSettings.TREE_ENABLED) {
        elements[ZaAppViewMgr.C_TREE] = this.getOverviewPanelController().getOverviewPanel();
    }

    this._currentAppBar = elements[ZaAppViewMgr.C_APP_HEADER] = new ZaCurrentAppBar(this._shell);
    elements[ZaAppViewMgr.C_TOOL_HEADER] = this.getTaskController().getTaskHeaderPanel();
    elements[ZaAppViewMgr.C_TOOL] = this.getTaskController().getTaskContentPanel();
    this._appViewMgr.addComponents(elements, true);
    ZaApp.getInstance().launch();

     ZaZimbraAdmin._killSplash();
};

ZaZimbraAdmin.noOpAction = null;
ZaZimbraAdmin.noOpHandler = null;
ZaZimbraAdmin.noOpInterval = 120000;

ZaZimbraAdmin.prototype.cancelNoOp = function() {
    if(ZaZimbraAdmin.noOpHandler) {
        AjxTimedAction.cancelAction(this.noOpHandler);
        ZaZimbraAdmin.noOpHandler = null;
    }    
}

ZaZimbraAdmin.prototype.scheduleNoOp = function() {
    if(!ZaZimbraAdmin.noOpAction) {
        ZaZimbraAdmin.noOpAction = new AjxTimedAction(this, this.sendNoOp);
    }
    ZaZimbraAdmin.noOpHandler = AjxTimedAction.scheduleAction(ZaZimbraAdmin.noOpAction, 120000);
};

ZaZimbraAdmin.prototype.sendNoOp = function () {
    try {
        var soapDoc = AjxSoapDoc.create("NoOpRequest", ZaZimbraAdmin.URN, null);
        var noOpCommand = new ZmCsfeCommand();
        var params = new Object();
        params.soapDoc = soapDoc;    
        params.asyncMode = false;
        params.noAuthToken = true;
        noOpCommand.invoke(params);
        this.scheduleNoOp();
    } catch (ex) {
        this._handleException(ex, "ZaZimbraAdmin.prototype.sendNoOp", null, true);
        this.cancelNoOp();
    }
}

// Listeners

// Banner button mouseover/mouseout handlers
ZaZimbraAdmin._bannerBarMouseHdlr =
function(ev) {
    window.status = ZaMsg.done;
    return true;
}

// This method is called by the window.onbeforeunload method.
ZaZimbraAdmin._confirmExitMethod =
function() {
    //check whether all the tabs are clean by close them
    var msg = ZaMsg.appExitWarning ;
    var tabTitles = ZaAppTabGroup.getDirtyTabTitles() ;
    if ( tabTitles.length > 0 ){
        msg = ZaMsg.appExitWarningWithDirtyTab + "\n" + tabTitles.join("\n");
    }
    return msg;
}

ZaZimbraAdmin._confirmAuthInvalidExitMethod =
function () {
    var msg = ZaMsg.authInvalidExitWarning ;
    return msg ;
}


ZaZimbraAdmin.setOnbeforeunload = 
function(msg) {
    if (msg){
        window.onbeforeunload = msg;
    }else{
        window.onbeforeunload = null;
    }
};

/** This method is used for the download link hack to avoid the exit warning message **/
ZaZimbraAdmin.unloadHackCallback =
function() {
    if (ZaZimbraAdmin.isWarnOnExit) { //hack is only needed when we are set to warn on exit
        ZaZimbraAdmin.setOnbeforeunload (null) ;
        var f = function() { ZaZimbraAdmin.setOnbeforeunload(ZaZimbraAdmin._confirmExitMethod); };
        var t = new AjxTimedAction(null, f);
        AjxTimedAction.scheduleAction(t, 3000);
    }
};

ZaZimbraAdmin.isGlobalAdmin = function () {
    return (ZaZimbraAdmin.currentAdminAccount 
            && ZaZimbraAdmin.currentAdminAccount.attrs
            && (ZaZimbraAdmin.currentAdminAccount.attrs[ZaAccount.A_zimbraIsAdminAccount] == 'TRUE'));
}

ZaZimbraAdmin.hasGlobalDomainListAccess = function () {
    return (ZaZimbraAdmin.isGlobalAdmin() || 
            (ZaSettings.targetRights[ZaItem.DOMAIN] 
                && ZaSettings.targetRights[ZaItem.DOMAIN][ZaDomain.RIGHT_LIST_DOMAIN]
                && ZaSettings.targetRights[ZaItem.DOMAIN][ZaDomain.RIGHT_LIST_DOMAIN].some));
}

ZaZimbraAdmin.hasGlobalCOSSListAccess = function () {
    return (ZaZimbraAdmin.isGlobalAdmin() || 
            (ZaSettings.targetRights[ZaItem.COS] 
                && ZaSettings.targetRights[ZaItem.COS][ZaCos.RIGHT_LIST_COS] 
            && ZaSettings.targetRights[ZaItem.COS][ZaCos.RIGHT_LIST_COS].some));
}

ZaZimbraAdmin.canCreateTopDomain = function() {
    return (ZaZimbraAdmin.isGlobalAdmin() || (ZaSettings.targetRights[ZaItem.GLOBAL_GRANT]
        && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.RIGHT_CREATE_TOP_DOMAIN]
        && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.RIGHT_CREATE_TOP_DOMAIN].some));
}

ZaZimbraAdmin.canCreateDomain = function() {
    return (ZaZimbraAdmin.isGlobalAdmin() || (ZaSettings.targetRights[ZaItem.GLOBAL_GRANT]
        && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.RIGHT_CREATE_TOP_DOMAIN]
        && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.RIGHT_CREATE_TOP_DOMAIN].some) 
        || (ZaSettings.targetRights[ZaItem.GLOBAL_GRANT]
            && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.RIGHT_CREATE_SUB_DOMAIN]
            && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.RIGHT_CREATE_SUB_DOMAIN].some)
        || (ZaSettings.targetRights[ZaItem.DOMAIN]
            && ZaSettings.targetRights[ZaItem.DOMAIN][ZaDomain.RIGHT_CREATE_SUB_DOMAIN]
            && ZaSettings.targetRights[ZaItem.DOMAIN][ZaDomain.RIGHT_CREATE_SUB_DOMAIN].some));
}

ZaZimbraAdmin.canCreateAccount = function() {
    return (ZaZimbraAdmin.isGlobalAdmin() || (ZaSettings.targetRights[ZaItem.DOMAIN]
        && ZaSettings.targetRights[ZaItem.DOMAIN][ZaDomain.RIGHT_CREATE_ACCOUNT]
        && ZaSettings.targetRights[ZaItem.DOMAIN][ZaDomain.RIGHT_CREATE_ACCOUNT].some)
        || (ZaSettings.targetRights[ZaItem.GLOBAL_GRANT]
            && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.RIGHT_CREATE_ACCOUNT]
            && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.RIGHT_CREATE_ACCOUNT].some));
}

ZaZimbraAdmin.canListAccounts = function() {
    return (ZaZimbraAdmin.isGlobalAdmin() || (ZaSettings.targetRights[ZaItem.DOMAIN]
        && ZaSettings.targetRights[ZaItem.DOMAIN][ZaAccount.RIGHT_LIST_ACCOUNT]
        && ZaSettings.targetRights[ZaItem.DOMAIN][ZaAccount.RIGHT_LIST_ACCOUNT].some)
        || (ZaSettings.targetRights[ZaItem.GLOBAL_GRANT]
            && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaAccount.RIGHT_LIST_ACCOUNT]
            && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaAccount.RIGHT_LIST_ACCOUNT].some)
            || (ZaSettings.targetRights[ZaItem.ACCOUNT]
            && ZaSettings.targetRights[ZaItem.ACCOUNT][ZaAccount.RIGHT_LIST_ACCOUNT]
            && ZaSettings.targetRights[ZaItem.ACCOUNT][ZaAccount.RIGHT_LIST_ACCOUNT].some));
}

ZaZimbraAdmin.canCreateAlias = function() {
    return (ZaZimbraAdmin.isGlobalAdmin() || (ZaSettings.targetRights[ZaItem.DOMAIN]
        && ZaSettings.targetRights[ZaItem.DOMAIN][ZaDomain.RIGHT_CREATE_ALIAS]
        && ZaSettings.targetRights[ZaItem.DOMAIN][ZaDomain.RIGHT_CREATE_ALIAS].some)
        || (ZaSettings.targetRights[ZaItem.GLOBAL_GRANT]
            && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.RIGHT_CREATE_ALIAS]
            && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.RIGHT_CREATE_ALIAS].some));
}

ZaZimbraAdmin.canCreateDL = function() {
    return (ZaZimbraAdmin.isGlobalAdmin() || (ZaSettings.targetRights[ZaItem.DOMAIN]
        && ZaSettings.targetRights[ZaItem.DOMAIN][ZaDomain.RIGHT_CREATE_DL]
        && ZaSettings.targetRights[ZaItem.DOMAIN][ZaDomain.RIGHT_CREATE_DL].some)
        || (ZaSettings.targetRights[ZaItem.GLOBAL_GRANT]
            && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.RIGHT_CREATE_DL]
            && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.RIGHT_CREATE_DL].some));
}

ZaZimbraAdmin.canCreateGroup = function() {
    return (ZaZimbraAdmin.isGlobalAdmin() || (ZaSettings.targetRights[ZaItem.DOMAIN]
        && ZaSettings.targetRights[ZaItem.DOMAIN][ZaDomain.RIGHT_CREATE_GROUP]
        && ZaSettings.targetRights[ZaItem.DOMAIN][ZaDomain.RIGHT_CREATE_GROUP].some)
        || (ZaSettings.targetRights[ZaItem.GLOBAL_GRANT]
            && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.RIGHT_CREATE_GROUP]
            && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.RIGHT_CREATE_GROUP].some));
}

ZaZimbraAdmin.canCreateCalRes = function() {
    return (ZaZimbraAdmin.isGlobalAdmin() || (ZaSettings.targetRights[ZaItem.DOMAIN]
        && ZaSettings.targetRights[ZaItem.DOMAIN][ZaDomain.RIGHT_CREATE_CALRES]
        && ZaSettings.targetRights[ZaItem.DOMAIN][ZaDomain.RIGHT_CREATE_CALRES].some)
        || (ZaSettings.targetRights[ZaItem.GLOBAL_GRANT]
            && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.RIGHT_CREATE_CALRES]
            && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.RIGHT_CREATE_CALRES].some));
}

ZaZimbraAdmin.canCreateCos = function() {
    return (ZaZimbraAdmin.isGlobalAdmin() || (ZaSettings.targetRights[ZaItem.GLOBAL_GRANT]
        && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.CREATE_COS_RIGHT]
        && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.CREATE_COS_RIGHT].some));
}

ZaZimbraAdmin.canChangeExchangeConfig = function() {
    return (ZaZimbraAdmin.isGlobalAdmin() || (ZaSettings.targetRights[ZaItem.DOMAIN]
    && ZaSettings.targetRights[ZaItem.DOMAIN][ZaDomain.CHECK_EXCHANGE_AUTH_CONFIG_RIGHT]
    && ZaSettings.targetRights[ZaItem.DOMAIN][ZaDomain.CHECK_EXCHANGE_AUTH_CONFIG_RIGHT].some)
    || (ZaSettings.targetRights[ZaItem.GLOBAL_GRANT]
        && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.CHECK_EXCHANGE_AUTH_CONFIG_RIGHT]
        && ZaSettings.targetRights[ZaItem.GLOBAL_GRANT][ZaDomain.CHECK_EXCHANGE_AUTH_CONFIG_RIGHT].some));
}

ZaZimbraAdmin.haveTargetRight = function(targetType, rightName, targetName) {
    return (ZaZimbraAdmin.isGlobalAdmin()
        || (ZaSettings.targetRights[targetType][rightName]
            && (ZaSettings.targetRights[targetType][rightName][targetName]
                || ZaSettings.targetRights[targetType][rightName].all)));
}

ZaZimbraAdmin.haveAnyTargetRight = function(targetType, rightName) {
    return (ZaZimbraAdmin.isGlobalAdmin() || (ZaSettings.targetRights[targetType][rightName] 
            && ZaSettings.targetRights[targetType][rightName].some));
}
}
if (AjxPackage.define("zimbraAdmin.helpdesk.view.ZaHelpView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaHelpView
* @contructor ZaHelpView
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaHelpView = function(parent) {
	if (arguments.length == 0) return;
	ZaTabView.call(this, parent,"ZaHelpView");
	this.setScrollStyle(Dwt.SCROLL);
	this.initForm(new Object(), this.getMyXForm())
//	this._createHTML();
}
ZaHelpView.mainHelpPage = "administration_console_help.htm";

// URL for the most latest documentation page
ZaHelpView.RELEASE_NOTES_URL = "https://docs.zextras.com";

ZaHelpView.HELP_FORUM_LINK = "https://community.zextras.com/";
ZaHelpView.HELP_WIKI_LINK = "https://docs.zextras.com";
ZaHelpView.prototype = new ZaTabView();
ZaHelpView.prototype.constructor = ZaHelpView;
ZaTabView.XFormModifiers["ZaHelpView"] = new Array();

ZaHelpView.prototype.getTabIcon =
function () {
	return "Help" ;
}

ZaHelpView.prototype.getTabTitle =
function () {
	return ZaMsg.Help_view_title ;
}

ZaHelpView.prototype.getTitle =
function () {
	return ZaMsg.Help_view_title ;
}


/**
* @param xModelMetaData - XModel metadata that describes data model
* @param xFormMetaData - XForm metadata that describes the form
**/
ZaHelpView.prototype.initForm = 
function (xModelMetaData, xFormMetaData) {
	if(xModelMetaData == null || xFormMetaData == null)
		throw new AjxException("Metadata for XForm and/or XModel are not defined", AjxException.INVALID_PARAM, "ZaHelpView.prototype.initForm");

	this._localXModel = new XModel(xModelMetaData);
	this._localXForm = new XForm(xFormMetaData, this._localXModel, null, this);
	this._localXForm.setController(this);
	this._localXForm.draw();
	// This is specifically for the dwt button. If the instance is null, which here it is,
	// dwt widgets don't get inserted into the xform, until you manually call refresh().
//	this._localXForm.refresh();
    //since 6.0, we use setInstance to force the item to got inserted to xform. An xform bug???
    this._localXForm.setInstance({}) ;
    this._drawn = true;                                    
}

ZaHelpView.prototype.showAboutDialog = function () {                  
    var appCtrl = this._appCtxt.getAppController() ;
    appCtrl._aboutZimbraListener();
};

ZaHelpView.showWikiLink = function () {
    return !AjxUtil.isEmpty(ZabMsg.HELP_WIKI_LINK);
}
ZaHelpView.myXFormModifier = function(xFormObject) {	
	xFormObject.tableCssStyle="width:100%;overflow:auto;";
	xFormObject.itemDefaults = {_SEPARATOR_: {containerCssStyle:"padding-right:3px;padding-left:3px;"}};
    if (!ZaSettings.isOctopus()) {
        xFormObject.items = ZaHelpView.getAdminXFormItems();
        return;
    }
	xFormObject.items = [
	        {type:_SWITCH_, align:_LEFT_, valign:_TOP_, items:[{type:_ZATABCASE_,id:"help_view_tab",  numCols:1, width:"100%", caseKey:1,
	        		paddingStyle:"padding-left:15px;", width:"98%", cellpadding:2,
	        		visibilityChecks:[],
	        		items: [
			{type:_OUTPUT_, label:null, value:ZabMsg.HELP_PAGE_0, colSpan:"*", cssStyle:"font-size:12pt;	font-weight: bold;"},
			{type:_OUTPUT_, label:null, value:ZabMsg.HELP_PAGE_1, colSpan:"*", cssStyle:"font-size:12px;"},

			{type:_SPACER_, colSpan:"*"},
			{type:_GROUP_, numCols:2, id:"ZimbraHelpPageDownloadItems" , colSpan: "*",
				items: [
					{type:_GROUP_,numCols:2,
						items: [
							{type:_OUTPUT_, value:AjxImg.getImageHtml("Help")},
							{type:_ANCHOR_, cssStyle:"font-size:12px;", showInNewWindow:true, labelLocation:_NONE_, label:ZabMsg.HELP_PAGE_2, href:(ZaUtil.HELP_URL)}
						]
					},
					{type:_GROUP_,numCols:2,
						items: [
							{type:_OUTPUT_,  value:AjxImg.getImageHtml("PDFDoc")},
							{
                                type:_ANCHOR_,
                                cssStyle: "font-size:12px;",
                                showInNewWindow: true,
                                labelLocation: _NONE_,
                                label: ZaMsg.HELP_PAGE_4,
                                href: ZaHelpView.RELEASE_NOTES_URL
                            }
						]
					},
					{type:_SPACER_, colSpan:"*"},					
					{type:_OUTPUT_, cssStyle:"font-size:12px;", label:null, value:ZabMsg.HELP_PAGE_3, 
					 cssStyle:"padding-right:10px;padding-left:10px;",containerCssStyle: "width:50%;"},
					{type:_OUTPUT_, cssStyle:"font-size:12px;", label:null, value:ZaMsg.HELP_PAGE_5,
					 cssStyle:"padding-right:10px;padding-left:10px;",containerCssStyle: "width:50%;"},
					{type:_SEPARATOR_, colSpan:1, cssClass:"helpSeparator"},
					{type:_SEPARATOR_, colSpan:1, cssClass:"helpSeparator"},

					{type:_GROUP_,numCols:2,
						items: [
							{type:_OUTPUT_, value:AjxImg.getImageHtml("PDFDoc")},
							{type:_ANCHOR_, cssStyle:"font-size:12px;", href:ZaHelpView.HELP_FORUM_LINK, showInNewWindow:true,labelLocation:_NONE_,  label:ZabMsg.HELP_PAGE_6 }
						]
					},					
					{type:_SPACER_, colSpan:"*"},					
					{type:_OUTPUT_, cssStyle:"font-size:12px;", label:null, value:ZabMsg.HELP_PAGE_7,
					 cssStyle:"padding-right:10px;padding-left:10px;"},
					{type:_SEPARATOR_, colSpan:1, cssClass:"helpSeparator"},
					{type:_SEPARATOR_, colSpan:1, cssClass:"helpSeparator"}
				]
			},
        {type: _SPACER_, height: 10 },    
        {type:_GROUP_, colSpan:"*", items: [
                {type:_DWT_BUTTON_, id: "about_button", label:ZabMsg.About_Button_Label,
                    onActivate:"this.getFormController().showAboutDialog()", width:"125px"}
            ]
        }
    ]}]}];

    var adminGuideItem;
    if (!ZaSettings.isOctopus()) {
        adminGuideItem = [
            {type:_GROUP_,numCols:2,
                items: [
                    {type:_OUTPUT_, value:AjxImg.getImageHtml("PDFDoc")},
                    {type:_ANCHOR_, cssStyle:"font-size:12px;", showInNewWindow:true, labelLocation:_NONE_, label:ZabMsg.HELP_PAGE_8,href:("https://docs.zextras.com")}
                ]
            },
            {type:_GROUP_,numCols:4,
                items: [
                    {type:_OUTPUT_, value:AjxImg.getImageHtml("PDFDoc")},
                    {type:_ANCHOR_, cssStyle:"font-size:12px;", showInNewWindow:true, labelLocation:_NONE_, label:ZaMsg.HELP_PAGE_10_EXCHANGE,href:("https://docs.zextras.com")},
                    {type:_OUTPUT_, value:AjxImg.getImageHtml("PDFDoc")},
                    {type:_ANCHOR_, cssStyle:"font-size:12px;", showInNewWindow:true, labelLocation:_NONE_, label:ZaMsg.HELP_PAGE_10_DOMINO,href:("https://docs.zextras.com")}
                ]
            },
            {type:_SPACER_, colSpan:"*"},
            {type:_OUTPUT_, cssStyle:"font-size:12px;", label:null, value:ZabMsg.HELP_PAGE_9,
             cssStyle:"padding-right:10px;padding-left:10px;"},
            {type:_OUTPUT_, cssStyle:"font-size:12px;", label:null, value:ZaMsg.HELP_PAGE_11,
             cssStyle:"padding-right:10px;padding-left:10px;"},
            {type:_SEPARATOR_, colSpan:1, cssClass:"helpSeparator"},
            {type:_SEPARATOR_, colSpan:1, cssClass:"helpSeparator"},

            {type:_GROUP_,numCols:2, id: "HelpOtherGuides",
                items: [
                    {type:_OUTPUT_, value:AjxImg.getImageHtml("PDFDoc")},
                    {type:_ANCHOR_, cssStyle:"font-size:12px;", showInNewWindow:true, labelLocation:_NONE_, label:ZaMsg.HELP_OTHER_GUIDES_IMPORT,href:("https://docs.zextras.com")}
                ]
            },
            {type:_GROUP_,numCols:2, id: "iCalMigDoc",
                items: [
                    {type:_OUTPUT_, value:AjxImg.getImageHtml("PDFDoc")},
                    {type:_ANCHOR_, cssStyle:"font-size:12px;", showInNewWindow:true, labelLocation:_NONE_, label: ZaMsg.ICAL_MIG_GUIDE,
                         href:("https://docs.zextras.com")}
                ]
            },
            {type:_SPACER_},

            {type:_OUTPUT_, cssStyle:"font-size:12px;", label:null, value:ZaMsg.HELP_OTHER_GUIDES_IMPORT_INFO,
             cssStyle:"padding-right:10px;padding-left:10px;"},
            {type:_OUTPUT_, cssStyle:"font-size:12px;", label:null, value:ZaMsg.ICAL_MIG_GUIDE_INFO,
                cssStyle:"padding-right:10px;padding-left:10px;"},
            {type:_SEPARATOR_, colSpan:1, cssClass:"helpSeparator"},
            {type:_SEPARATOR_, colSpan:1, cssClass:"helpSeparator"}
        ];
    } else {
        adminGuideItem = [
            {type:_GROUP_,numCols:2,
                items: [
                    {type:_OUTPUT_, value:AjxImg.getImageHtml("PDFDoc")},
                    {type:_ANCHOR_, cssStyle:"font-size:12px;", showInNewWindow:true, labelLocation:_NONE_, label:ZabMsg.HELP_PAGE_8,href:("https://docs.zextras.com")}
                ]
            },
            {type:_GROUP_,numCols:2, id: "zwcEndUserGuide",
                items: [
                    {type:_OUTPUT_, value:AjxImg.getImageHtml("PDFDoc")},
                    {type:_ANCHOR_, cssStyle:"font-size:12px;", showInNewWindow:true, labelLocation:_NONE_, label: ZabMsg.ZWC_END_USER_GUIDE,
                         href:("https://docs.zextras.com")},
                    {type:_OUTPUT_, value:AjxImg.getImageHtml("PDFDoc")},
                    {type:_ANCHOR_, cssStyle:"font-size:12px;", showInNewWindow:true, labelLocation:_NONE_, label: ZabMsg.ANDROID_END_USER_GUIDE,
                         href:("https://docs.zextras.com")},
                    {type:_OUTPUT_, value:AjxImg.getImageHtml("PDFDoc")},
                    {type:_ANCHOR_, cssStyle:"font-size:12px;", showInNewWindow:true, labelLocation:_NONE_, label: ZabMsg.IOS_END_USER_GUIDE,
                         href:("https://docs.zextras.com")}
                ]
            },
            {type:_SPACER_, colSpan:"*"},
            {type:_OUTPUT_, cssStyle:"font-size:12px;", label:null, value:ZabMsg.HELP_PAGE_9,
             cssStyle:"padding-right:10px;padding-left:10px;"},
            {type:_OUTPUT_, cssStyle:"font-size:12px;", label:null, value:ZabMsg.ZWC_END_USER_GUIDE_INFO,
                cssStyle:"padding-right:10px;padding-left:10px;"},
            {type:_SEPARATOR_, colSpan:1, cssClass:"helpSeparator"},
            {type:_SEPARATOR_, colSpan:1, cssClass:"helpSeparator"}
        ];
    }

    var helpItems = xFormObject.items[0].items[0].items ;
    for (var i=0; i< helpItems.length; i++) {
        //insert teh networkHelpItems before the About button
        if (helpItems[i].id == "ZimbraHelpPageDownloadItems") {
            helpItems [i].items = helpItems[i].items.concat(adminGuideItem) ;
            break ;
        }
    }

    if (!ZaSettings.isNetworkVersion () && !ZaSettings.isOctopus()) {
        var zwcUserGuideItem = [
             //ZWC end user guide
            {type:_GROUP_,numCols:2, id: "zwcEndUserGuide",
                items: [
                    {type:_OUTPUT_, value:AjxImg.getImageHtml("PDFDoc")},
                    {type:_ANCHOR_, cssStyle:"font-size:12px;", showInNewWindow:true, labelLocation:_NONE_, label: ZabMsg.ZWC_END_USER_GUIDE,
                         href:("https://docs.zextras.com")}
                ]
            },
            {type:_CELL_SPACER_},
            {type:_SPACER_, colSpan:"*"},
            {type:_OUTPUT_, cssStyle:"font-size:12px;", label:null, value:ZabMsg.ZWC_END_USER_GUIDE_INFO,
                cssStyle:"padding-right:10px;padding-left:10px;"},
            {type:_CELL_SPACER_},
            {type:_SEPARATOR_, colSpan:1, cssClass:"helpSeparator"}
        ];
        var helpItems = xFormObject.items[0].items[0].items ;
        for (var i=0; i< helpItems.length; i++) {
            //insert teh networkHelpItems before the About button
            if (helpItems[i].id == "ZimbraHelpPageDownloadItems") {
                helpItems [i].items = helpItems[i].items.concat(zwcUserGuideItem) ;
                break ;
            }
        }
    }else {
        //zwcUserGuide Item will be modified in delegated admin extension
    }
}
ZaTabView.XFormModifiers["ZaHelpView"].push(ZaHelpView.myXFormModifier);

ZaHelpView.getAdminXFormItems = function() {

    var descCSSStyle = "";

    var bulletImgItem = {
        type: _OUTPUT_,
        cssStyle: "font-size: 8px; margin-left: 20px;",
        label: null,
        value: "<li></li>"
    };

    return [
        {
            type: _SWITCH_,
            align: _LEFT_,
            valign: _TOP_,
            items: [
                {
                    type: _ZATABCASE_,
                    id: "help_view_tab",
                    numCols: 1,
                    width: "100%",
                    caseKey: 1,
                    paddingStyle: "padding-left: 15px;",
                    width: "98%",
                    cellpadding: 2,
                    visibilityChecks: [
                        function() {
                            return true;
                        }
                    ],
                    items: [
                        {
                            type: _SPACER_,
                            height: "10"
                        },
                        {
                            type: _OUTPUT_,
                            label: null,
                            value: ZaMsg.title_help_center,
                            colSpan: "*",
                            cssStyle: "font-size: 12pt; font-weight: bold;"
                        },
                        {
                            type: _GROUP_,
                            width: "100%",
                            numCols: 2,
                            colSizes: ["70%", "30%"],
                            items: [
                                {
                                    type: _SPACER_,
                                    height: "10"
                                },
                                {
                                    type: _ZALEFT_GROUPER_,
                                    numCols: 1,
                                    width: "100%",
                                    labelCssClass: "ZaHelpViewGroupLabel",
                                    borderCssClass: "ZaHelpViewGroupBorder",
                                    items: [
                                        {
                                            type: _GROUP_,
                                            id: "helpDocsGroup",
                                            numCols: 1,
                                            width: "100%",
                                            items: [
                                                ZaHelpView._getAnchorItem(
                                                    ZaMsg.subtitle_help_center_1,
                                                    ZaUtil.HELP_URL,
                                                    14
                                                ),
                                                ZaHelpView._getDescItem(
                                                    ZaMsg.desc_help_center_1
                                                ),
                                                {
                                                    type: _SPACER_,
                                                    height: "5"
                                                },
                                                {
                                                    type: _GROUP_,
                                                    width: "100%",
                                                    numCols: 2,
                                                    colSizes: ["20", "*"],
                                                    items: [
                                                        bulletImgItem,
                                                        {
                                                            type: _ANCHOR_,
                                                            cssStyle: "font-size: 13px;",
                                                            showInNewWindow: true,
                                                            labelLocation: _NONE_,
                                                            label: ZaMsg.sub_desc_help_center_1,
                                                            href: ZaHelpView.RELEASE_NOTES_URL
                                                        }
                                                    ]
                                                },
                                                {
                                                    type: _SPACER_,
                                                    height: "20"
                                                },
                                                ZaHelpView._getAnchorItem(
                                                    ZaMsg.subtitle_help_center_2,
                                                    14
                                                ),
                                                ZaHelpView._getDescItem(
                                                    ZaMsg.desc_help_center_2
                                                ),
                                                {
                                                    type: _SPACER_,
                                                    height: "5"
                                                }
                                            ]
                                        },
                                        {
                                            type: _SPACER_,
                                            height:"20"
                                        },
                                        {
                                            type: _GROUP_,
                                            colSpan: "*",
                                            id: "helpAskCommunity",
                                            containerCssClass: "ZaHelpAskCommunityContainer",
                                            cssClass: "ZaHelpAskCommunityPanel",
                                            numCols: 1,
                                            items: [
                                                {
                                                    type: _GROUP_,
                                                    colSpan: "*",
                                                    numCols: 1,
                                                    width: "100%",
                                                    containerCssClass: "ZaHelpAskCommunityContent",
                                                    items: [
                                                        {
                                                            type: _OUTPUT_,
                                                            label: null,
                                                            value: ZaMsg.title_ask_community,
                                                            colSpan: "*",
                                                            cssStyle: "font-size: 12px; font-weight: bold;"
                                                        },
                                                        ZaHelpView._getDescItem(ZaMsg.desc_ask_community_1)
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ];
}

/**
 *
 * @param label REQUIRED
 * @param fileName REQUIRED
 * @param fontSize OPTIONAL, default is 12
 * @returns {{type: *, showInNewWindow: boolean, labelLocation: *, label: *, href: *, cssStyle: string}}
 * @private
 */
ZaHelpView._getAnchorItem = function (label, fileName, fontSize) {
    if (!label || ! fileName) {
        return;
    }

    if (!fontSize) {
        fontSize = 12;
    }

    var anchorItem = {
        type: _ANCHOR_,
        showInNewWindow: true,
        labelLocation: _NONE_,
        label: label,
        href: ZaHelpView.HELP_WIKI_LINK,
        cssStyle: "font-size: " + fontSize + "px;"
    }

    return anchorItem;
}

/**
 *
 * @param descMsg
 * @returns {{type: *, cssStyle: string, label: null, value: *}}
 * @private
 */
ZaHelpView._getDescItem = function (descMsg) {
    if (!descMsg) {
        return;
    }

    var descItem = {
        type: _OUTPUT_,
        cssStyle: "font-size: 12px; padding-top: 5px; padding-right: 10px; padding-left: 10px;",
        label: null,
        value: descMsg
    }

    return descItem;
}
}
if (AjxPackage.define("zimbraAdmin.helpdesk.view.ZaMWizView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaMigrationWizView
* @contructor ZaMigrationWizView
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaMigrationWizView = function(parent) {
	if (arguments.length == 0) return;
        ZaTabView.call(this, {
                parent:parent,
                iKeyName:"ZaMigrationWizView",
                contextId:ZaId.TAB_DOWNLOADS
        });
	this.setScrollStyle(Dwt.SCROLL);
	this.initForm(new Object(), this.getMyXForm())
//	this._createHTML();
}

ZaMigrationWizView.prototype = new ZaTabView();
ZaMigrationWizView.prototype.constructor = ZaMigrationWizView;
ZaTabView.XFormModifiers["ZaMigrationWizView"] = new Array();

ZaMigrationWizView.prototype.getTabIcon =
function () {
	return "MigrationWiz" ;
}

ZaMigrationWizView.prototype.getTabTitle =
function () {
	return ZaMsg.Migration_wiz_title ;
}

ZaMigrationWizView.prototype.getTitle =
function () {
	return ZaMsg.Migration_wiz_title ;
}

/**
* @param xModelMetaData - XModel metadata that describes data model
* @param xFormMetaData - XForm metadata that describes the form
**/
ZaMigrationWizView.prototype.initForm = 
function (xModelMetaData, xFormMetaData) {
	if(xModelMetaData == null || xFormMetaData == null)
		throw new AjxException("Metadata for XForm and/or XModel are not defined", AjxException.INVALID_PARAM, "ZaMigrationWizView.prototype.initForm");

	this._localXModel = new XModel(xModelMetaData);
	this._localXForm = new XForm(xFormMetaData, this._localXModel, null, this, ZaId.getTabViewId(this._contextId));
	this._localXForm.setController(this);
	this._localXForm.draw();
	// This is specifically for the dwt button. If the instance is null, which here it is,
	// dwt widgets don't get inserted into the xform, until you manually call refresh().
	this._localXForm.refresh();
	this._drawn = true;
}

ZaMigrationWizView.myXFormModifier = function(xFormObject) {	
	xFormObject.tableCssStyle="width:100%;overflow:auto;";
	xFormObject.itemDefaults = {_SEPARATOR_: {containerCssStyle:"padding-right:3px;padding-left:3px;"}};	
	xFormObject.items = [
			{type:_OUTPUT_, label:null, value:ZaMsg.DOWNLOAD_PAGE_0, colSpan:"*", cssStyle:"font-size:12pt;	font-weight: bold;"},
			{type: _GROUP_, numCols: 2, colSpan: "*", items: [
					{type:_OUTPUT_, label:null, value:ZaMsg.DOWNLOAD_PAGE_1, cssStyle:"font-size:12px;"},
					{type: _OUTPUT_, value: AjxImg.getImageHtml("Help")}
				]
			},
			{type:_SPACER_, colSpan:"*"},
			{type:_OUTPUT_, label:null, value:ZaMsg.DOWNLOAD_FOR_ADMIN, colSpan:"*", cssStyle:"font-size:10pt;font-weight: bold;"},
			{type:_SPACER_, colSpan:"*"},
			{type:_GROUP_, numCols:1, colSpan:"*", zName:"DownloadsForAdmin",
				items: [
                    // bug 70664, new genaral migration tool that will replace the original exchange/domino migration tool
				    {type:_GROUP_, numCols:3,
				    	items: [
				    	    {type:_OUTPUT_, value:AjxImg.getImageHtml("Migration")},
				    	    {type:_OUTPUT_, cssStyle:"font-size:12px", labelLocation:_NONE_, label:null,
				    	     id:"general_migration_x86_link",
				    	     value: ZaMigrationWizView.getDownloadLink(ZaMsg.GENERAL_MIG_WIZ_X86_DOWNLOAD_LINK, ZaMsg.GENERAL_MIG_WIZ_X86_DOWNLOAD_LINK_MSG)
				    	    },
				    	    {type:_OUTPUT_, cssStyle:"font-size:12px", labelLocation:_NONE_, label:null,
				    	     id:"general_migration_x64_link",
				    	     value: ZaMigrationWizView.getDownloadLink(ZaMsg.GENERAL_MIG_WIZ_X64_DOWNLOAD_LINK, ZaMsg.GENERAL_MIG_WIZ_X64_DOWNLOAD_LINK_MSG)
				    	    }
				    	]
				    },
				    {type:_OUTPUT_, cssClass:"ZaDownloadText", label: null, value:ZaMsg.GENERAL_MIG_WIZ_DOWNLOAD_TEXT},

					//Groupwise Mig Wiz
					/*Disable it for bug 19041
					{type:_GROUP_,numCols:2,
						items: [
							{type:_OUTPUT_,  value:AjxImg.getImageHtml("MigrationWiz")},
							{type:_OUTPUT_, cssStyle:"font-size:12px;", labelLocation:_NONE_, label:null, value:ZaMsg.GROUPWISE_MIG_WIZ_DOWNLOAD_LINK}
							
						]
					},
					{type:_OUTPUT_, cssClass:"ZaDownloadText", label: null, value:ZaMsg.GROUPWISE_MIG_WIZ_DOWNLOAD_TEXT},
					*/
					//Domino Mig Wiz
					{type:_GROUP_,numCols:2,
						items: [
							{type:_OUTPUT_,  value:AjxImg.getImageHtml("Migration")},
							{type:_OUTPUT_, cssStyle:"font-size:12px;", labelLocation:_NONE_, label:null,
							id:"domino_migration_link",
                                value: ZaMigrationWizView.getDownloadLink(ZaMsg.DOMINO_MIG_WIZ_DOWNLOAD_LINK, ZaMsg.DOMINO_MIG_WIZ_DOWNLOAD_LINK_MSG)
                            }
						]
					},
					{type:_OUTPUT_, cssClass:"ZaDownloadText", label: null, value:ZaMsg.DOMINO_MIG_WIZ_DOWNLOAD_TEXT},

					//Exchange Mig Wiz
					{type:_GROUP_,numCols:2,
						items: [
							{type:_OUTPUT_,  value:AjxImg.getImageHtml("Migration")},
							{type:_OUTPUT_, cssStyle:"font-size:12px;", labelLocation:_NONE_, label:null,
								id:"exchange_migration_link",
								value: ZaMigrationWizView.getDownloadLink(ZaMsg.MIG_WIZ_DOWNLOAD_LINK, ZaMsg.MIG_WIZ_DOWNLOAD_LINK_MSG)
							}
						]
					},
					{type:_OUTPUT_, cssClass:"ZaDownloadText", label: null, value:ZaMsg.MIG_WIZ_DOWNLOAD_TEXT},
				]
			},
			{type:_SPACER_, colSpan:"*"},
			{type:_OUTPUT_, label:null, value:ZaMsg.DOWNLOAD_FOR_USER,  colSpan:"*", cssStyle:"font-size:10pt;font-weight: bold;"},
			{type:_SPACER_, colSpan:"*"},
			{type:_GROUP_, numCols:1, colSpan:"*", zName:"DownloadsForUser",
				items: [
					//PST import
					{type: _GROUP_ , numCols:3,
						items: [
							{type:_OUTPUT_, value:AjxImg.getImageHtml("Migration")},
							{type:_OUTPUT_, cssStyle:"font-size:12px;", labelLocation:_NONE_, label:null,
							id:"pst_import_link",
                                value: ZaMigrationWizView.getDownloadLink(ZaMsg.IMPORT_WIZ_DOWNLOAD_LINK, ZaMsg.IMPORT_WIZ_DOWNLOAD_LINK_MSG)
                            },
							{type:_OUTPUT_, cssStyle:"font-size:12px;", labelLocation:_NONE_, label:null,
							id:"pst_import_help_link",
                                value:["(<A target='_blank' onclick='ZaZimbraAdmin.unloadHackCallback();' HREF='","https://docs.zextras.com","</a>)"].join("")}
						]
					},
					{type:_OUTPUT_, cssClass:"ZaDownloadText", label: null, value:ZaMsg.IMPORT_WIZ_DOWNLOAD_TEXT}/*,
					
					//TOASTER
					{type:_GROUP_,numCols:2,
						items: [
							{type:_OUTPUT_, value:AjxImg.getImageHtml("MigrationWiz")},
							{type:_OUTPUT_, cssStyle:"font-size:12px;", labelLocation:_NONE_, label:null,
                                value:ZaMigrationWizView.getDownloadLink(ZaMsg.ZIMBRA_TOASTER_DOWNLOAD_LINK, ZaMsg.ZIMBRA_TOASTER_DOWNLOAD_LINK_MSG)
                            }
						]
					},
					{type:_OUTPUT_, cssClass:"ZaDownloadText", label: null, value:ZaMsg.ZIMBRA_TOASTER_DOWNLOAD_TEXT} */
				]
			}
		];
}
ZaTabView.XFormModifiers["ZaMigrationWizView"].push(ZaMigrationWizView.myXFormModifier);

ZaMigrationWizView.getDownloadLink =  function (link, msg) {
    return "<a onclick=\"ZaZimbraAdmin.unloadHackCallback();\" target=\"_blank\" href=\""
            + link  + "\">" + msg + "</a>";
}
}
if (AjxPackage.define("zimbraAdmin.mta.view.ZaQSummaryListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
 
 /**
 * @author Greg Solovyev
 **/
ZaQSummaryListView = function(parent, className, posStyle, headerList) {
	//var headerList = this._getHeaderList();
	ZaListView.call(this, parent, className, posStyle, headerList);
}

ZaQSummaryListView.prototype = new ZaListView;
ZaQSummaryListView.prototype.constructor = ZaQSummaryListView;

ZaQSummaryListView.prototype.toString = function() {
	return "ZaQSummaryListView";
};

ZaQSummaryListView.prototype._createItemHtml =
function(item) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(item, div, DwtListView.TYPE_LIST_ITEM);
	
	var idx = 0;
	html[idx++] = "<table width='100%' cellspacing='2' cellpadding='0'>";

	html[idx++] = "<tr>";
	if(this._headerList) {
		var cnt = this._headerList.length;
		for(var i = 0; i < cnt; i++) {
			var field = this._headerList[i]._field;
			if(field == ZaMTAQSummaryItem.A_text_col) {

				html[idx++] = "<td width='" + this._headerList[i]._width + "' align=left>";
				html[idx++] = AjxStringUtil.htmlEncode(item[ZaMTAQSummaryItem.A_text]);
				html[idx++] = "</td>";
			} else if(field == ZaMTAQSummaryItem.A_count_col) {

				html[idx++] = "<td width='" + this._headerList[i]._width + "' align=left>";
				html[idx++] = item[ZaMTAQSummaryItem.A_count];
				html[idx++] = "</td>";
			} 
		}
	} else {
		html[idx++] = "<td width=100%>";
		html[idx++] = AjxStringUtil.htmlEncode(item);
		html[idx++] = "</td>";
	}
	
	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}


ZaQSummaryListView.prototype._setNoResultsHtml = function() {
	var buffer = new AjxBuffer();
	var	div = document.createElement("div");
	
	buffer.append("<table width='100%' cellspacing='0' cellpadding='1'>",
				  "<tr><td class='NoResults'><br>&nbsp",
				  "</td></tr></table>");
	
	div.innerHTML = buffer.toString();
	this._addRow(div);
};

ZaQSummaryListView.prototype._sortColumn = function (columnItem, bSortAsc){
	if (bSortAsc) {
		var comparator = function (a, b) {
			return (a < b)? 1 :((a > b)? -1 : 0);
		};
		this.getList().sort(comparator);
	} else {
		this.getList().sort();
	}
};

ZaQSummaryListView.prototype._handleColHeaderResize = function(ev){
	ZaListView._handleColHeaderResize.call(this,ev);
}
}
if (AjxPackage.define("zimbraAdmin.mta.view.ZaQMessagesListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

 
 /**
 * @author Greg Solovyev
 **/
ZaQMessagesListView = function(parent, className, posStyle, headerList) {
	//var headerList = this._getHeaderList();
	ZaListView.call(this, parent, className, posStyle, headerList);
}

ZaQMessagesListView.prototype = new ZaListView;
ZaQMessagesListView.prototype.constructor = ZaQMessagesListView;

ZaQMessagesListView.prototype.toString = function() {
	return "ZaQMessagesListView";
};

ZaQMessagesListView.prototype._createItemHtml =
function(item) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(item, div, DwtListView.TYPE_LIST_ITEM);
	
	var idx = 0;
	html[idx++] = "<table width='100%' cellspacing='0' cellpadding='0'>";

	html[idx++] = "<tr>";
	if(this._headerList) {
		var cnt = this._headerList.length;
		for(var i = 0; i < cnt; i++) {
			var field = this._headerList[i]._field;
			if(field == ZaMTAQMsgItem.A_id) {
				// type
				html[idx++] = "<td align=left height=20px width=" + this._headerList[i]._width + ">";
				html[idx++] = AjxStringUtil.htmlEncode(String(item[ZaMTAQMsgItem.A_id]));
				html[idx++] = "</td>";
			} else if(field == ZaMTAQMsgItem.A_recipients) {
				// name
				html[idx++] = "<td align=left height=20px width=" + this._headerList[i]._width + ">";
				html[idx++] = item[ZaMTAQMsgItem.A_recipients];
				html[idx++] = "</td>";
			} else if(field == ZaMTAQMsgItem.A_content_filter) {
				// name
				html[idx++] = "<td align=left height=20px width=" + this._headerList[i]._width + ">";
				html[idx++] = item[ZaMTAQMsgItem.A_content_filter];
				html[idx++] = "</td>";
			} else if(field == ZaMTAQMsgItem.A_time) {
				// name
				html[idx++] = "<td align=left height=20px width=" + this._headerList[i]._width + ">";
				html[idx++] = AjxDateUtil.computeDateStr(new Date(), parseInt(item[ZaMTAQMsgItem.A_time]));
				html[idx++] = "</td>";
			} else if(field == ZaMTAQMsgItem.A_origin_host) {
				// name
				html[idx++] = "<td align=left height=20px width=" + this._headerList[i]._width + ">";
				html[idx++] = AjxStringUtil.htmlEncode(item[ZaMTAQMsgItem.A_origin_host]);
				html[idx++] = "</td>";
			} else if(field == ZaMTAQMsgItem.A_sender) {
				// name
				html[idx++] = "<td align=left height=20px width=" + this._headerList[i]._width + ">";
				html[idx++] =item[ZaMTAQMsgItem.A_sender];
				html[idx++] = "</td>";
			} else if(field == ZaMTAQMsgItem.A_origin_ip) {
				// name
				html[idx++] = "<td align=left height=20px width=" + this._headerList[i]._width + ">";
				html[idx++] =item[ZaMTAQMsgItem.A_origin_ip];
				html[idx++] = "</td>";
			} else if(field == ZaMTAQMsgItem.A_fromdomain) {
				// name
				html[idx++] = "<td align=left height=20px width=" + this._headerList[i]._width + ">";
				html[idx++] =item[ZaMTAQMsgItem.A_fromdomain];
				html[idx++] = "</td>";
			}			
		}
	} else {
		html[idx++] = "<td width=100%>";
		html[idx++] = AjxStringUtil.htmlEncode(item);
		html[idx++] = "</td>";
	}
	
	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}


ZaQMessagesListView.prototype._setNoResultsHtml = function() {
	var buffer = new AjxBuffer();
	var	div = document.createElement("div");
	
	buffer.append("<table width='100%' cellspacing='0' cellpadding='1'>",
				  "<tr><td class='NoResults'><br>&nbsp",
				  "</td></tr></table>");
	
	div.innerHTML = buffer.toString();
	this._addRow(div);
};

ZaQMessagesListView.prototype._sortColumn = function (columnItem, bSortAsc){
	if (bSortAsc) {
		var comparator = function (a, b) {
			return (a < b)? 1 :((a > b)? -1 : 0);
		};
		this.getList().sort(comparator);
	} else {
		this.getList().sort();
	}
};


ZaQMessagesListView.prototype._handleColHeaderResize = function(ev){
	ZaListView._handleColHeaderResize.call(this,ev);
}


}
if (AjxPackage.define("zimbraAdmin.mta.view.ZaMTAListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @constructor
* @class ZaMTAListView
* @param parent
* @author Greg Solovyev
**/

ZaMTAListView = function(parent) {

	var className = null;
	var posStyle = DwtControl.ABSOLUTE_STYLE;
	
	var headerList = this._getHeaderList();
	
	ZaListView.call(this, {
		parent:parent, 
		className:className, 
		posStyle:posStyle, 
		headerList:headerList,
		id:ZaId.TAB_MTX_MANAGE
	});

	this._appCtxt = this.shell.getData(ZaAppCtxt.LABEL);
	
}

ZaMTAListView.prototype = new ZaListView;

ZaMTAListView.prototype.toString = 
function() {
	return "ZaMTAListView";
}

ZaMTAListView.prototype.getTitle = 
function () {
	return ZaMsg.PostQ_title;
}

ZaMTAListView.prototype.getTabIcon =
function () {
	return "Queue";
}

ZaMTAListView.prototype.setUI = 
function () {
	ZaListView.prototype.setUI.call(this);
	var list = this._list;
	var len = list.size();
	for (var i=0; i < len; i++) {
		var mta = list.get(i);
		var itemId = this._getItemId(mta);
		this.higlightQItem(itemId,ZaMTA.A_DeferredQ, (parseInt(mta[ZaMTA.A_DeferredQ][ZaMTA.A_count]) > parseInt(ZaMTA.threashHold)));
		this.higlightQItem(itemId,ZaMTA.A_IncomingQ, (parseInt(mta[ZaMTA.A_IncomingQ][ZaMTA.A_count]) > parseInt(ZaMTA.threashHold)));
		this.higlightQItem(itemId,ZaMTA.A_ActiveQ, (parseInt(mta[ZaMTA.A_ActiveQ][ZaMTA.A_count]) > parseInt(ZaMTA.threashHold)));
		this.higlightQItem(itemId,ZaMTA.A_CorruptQ, (parseInt(mta[ZaMTA.A_CorruptQ][ZaMTA.A_count]) > parseInt(ZaMTA.threashHold)));
		this.higlightQItem(itemId,ZaMTA.A_HoldQ, (parseInt(mta[ZaMTA.A_HoldQ][ZaMTA.A_count]) > parseInt(ZaMTA.threashHold)));
	}
}

ZaMTAListView.prototype.higlightQItem = function(itemId,queue, higlight) {

	var span = document.getElementById(itemId+"_"+queue);
	if(span) {
		span.style.color = higlight ? "#FD4545" : "black";
		span.style.fontWeight = higlight ? "bold" : "normal";
	}
}
/**
* Renders a single item as a DIV element.
*/
ZaMTAListView.prototype._createItemHtml =
function(mta, now, isDragProxy) {
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(mta, div, DwtListView.TYPE_LIST_ITEM);
	var itemId = this._getItemId(mta);
	var idx = 0;
	html[idx++] = "<table width='100%' cellspacing='0' cellpadding='0'>";
	html[idx++] = "<tr>";
	var cnt = this._headerList.length;
	for(var i = 0; i < cnt; i++) {
		var field = this._headerList[i]._field;
		if(field == ZaMTA.A_Servername) {	
			// name
			html[idx++] = "<td width=" + this._headerList[i]._width + ">";
			html[idx++] = AjxStringUtil.htmlEncode(mta[ZaMTA.A_name]);
			html[idx++] = "</td>";
		} else if(field == ZaMTA.A_DeferredQ) {	
			html[idx++] = "<td width=" + this._headerList[i]._width + "><span id='" + (itemId+"_"+ZaMTA.A_DeferredQ)+ "'>";


			html[idx++] = mta[ZaMTA.A_DeferredQ][ZaMTA.A_count];
			html[idx++] = "</span></td>";
		} else if(field == ZaMTA.A_IncomingQ) {	

			html[idx++] = "<td width=" + this._headerList[i]._width + "><span id='" + (itemId+"_"+ZaMTA.A_IncomingQ)+ "'>";

			html[idx++] = mta[ZaMTA.A_IncomingQ][ZaMTA.A_count];
			html[idx++] = "</span></td>";
		}  else if(field == ZaMTA.A_ActiveQ) {	

			html[idx++] = "<td width=" + this._headerList[i]._width + "><span id='" + (itemId+"_"+ZaMTA.A_ActiveQ)+ "'>";
			html[idx++] = mta[ZaMTA.A_ActiveQ][ZaMTA.A_count];
			html[idx++] = "</span></td>";
		} else if(field == ZaMTA.A_CorruptQ) {	

			html[idx++] = "<td width=" + this._headerList[i]._width + "><span id='" + (itemId+"_"+ZaMTA.A_CorruptQ)+ "'>";
			html[idx++] = mta[ZaMTA.A_CorruptQ][ZaMTA.A_count];
			html[idx++] = "</span></td>";
		} else if(field == ZaMTA.A_HoldQ) {	

			html[idx++] = "<td width=" + this._headerList[i]._width + "><span id='" + (itemId+"_"+ZaMTA.A_HoldQ)+ "'>";
			html[idx++] = mta[ZaMTA.A_HoldQ][ZaMTA.A_count];
			html[idx++] = "</span></td>";
		}
	}
	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
}

ZaMTAListView.prototype._getHeaderList =
function() {

	var headerList = new Array();
//idPrefix, label, iconInfo, width, sortable, sortField, resizeable, visible

	headerList[0] = new ZaListHeaderItem(ZaMTA.A_Servername, ZaMsg.SLV_ServiceHName_col, null, "auto", null, null, true, true);

	headerList[1] = new ZaListHeaderItem(ZaMTA.A_DeferredQ, ZaMsg.PQV_DeferredQ_col, null, 100, null, null, true, true);

	headerList[2] = new ZaListHeaderItem(ZaMTA.A_IncomingQ, ZaMsg.PQV_IncomingQ_col, null, 100, null, null, true, true);		
	
	headerList[3] = new ZaListHeaderItem(ZaMTA.A_ActiveQ, ZaMsg.PQV_ActiveQ_col, null, 100, null, null, true, true);		
	
	headerList[4] = new ZaListHeaderItem(ZaMTA.A_CorruptQ, ZaMsg.PQV_CorruptQ_col, null, 100, null, null, true, true);			
	
	headerList[5] = new ZaListHeaderItem(ZaMTA.A_HoldQ, ZaMsg.PQV_HoldQ_col, null, 100, null, null, true, true);		
		
	return headerList;
}


}
if (AjxPackage.define("zimbraAdmin.mta.view.ZaMTAXFormView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaMTAXFormView
* @contructor
* @param parent
* @param app
* @author Greg Solovyev
**/
ZaMTAXFormView = function(parent) {
	ZaTabView.call(this, {
		parent:parent, 
		iKeyName:"ZaMTAXFormView",
		contextId:ZaId.TAB_MTX_EDIT
	});	

	this.TAB_INDEX = 0;
	ZaMTAXFormView._tab1 = ++this.TAB_INDEX;
	ZaMTAXFormView._tab2 = ++this.TAB_INDEX;	
	ZaMTAXFormView._tab3 = ++this.TAB_INDEX;	
	ZaMTAXFormView._tab4 = ++this.TAB_INDEX;	
	ZaMTAXFormView._tab5 = ++this.TAB_INDEX;	
			
	this.initForm(ZaMTA.myXModel,this.getMyXForm());
	this._localXForm.addListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, new AjxListener(this, ZaMTAXFormView.prototype.handleXFormChange));	
	this._localXForm.setController(ZaApp.getInstance());
}

ZaMTAXFormView.prototype = new ZaTabView();
ZaMTAXFormView.prototype.constructor = ZaMTAXFormView;
ZaTabView.XFormModifiers["ZaMTAXFormView"] = new Array();

ZaMTAXFormView.SCANNER_STATUS_CHOICES = new XFormChoices(
    [
        {
            value: ZaMTA.STATUS_IDLE,
            label: ZaMsg.PQ_ScannerIdle
        },
        {
            value: ZaMTA.STATUS_SCANNING,
            label: ZaMsg.PQ_ScannerScanning
        },
        {
            value: ZaMTA.STATUS_SCAN_COMPLETE,
            label: ZaMsg.PQ_ScannerScanComplete
        },
        {
            value: ZaMTA.STATUS_STALE,
            label: ZaMsg.PQ_ScannerStaleData
        }
    ],
    XFormChoices.OBJECT_LIST,
    "value",
    "label"
);

ZaMTAXFormView.tabChoices = new XFormChoices([{value:ZaMTAXFormView._tab1, label:ZaMsg.PQV_Tab_Deferred},
				{value:ZaMTAXFormView._tab2, label:ZaMsg.PQV_Tab_IncomingQ},
				{value:ZaMTAXFormView._tab3, label:ZaMsg.PQV_Tab_ActiveQ},
				{value:ZaMTAXFormView._tab4, label:ZaMsg.PQV_Tab_HoldQ},					
				{value:ZaMTAXFormView._tab5, label:ZaMsg.PQV_Tab_CorruptQ}],
				XFormChoices.OBJECT_LIST, "value", "label");

ZaMTAXFormView.prototype.getTabIcon =
function () {
	return "Queue" ;
}

ZaMTAXFormView.prototype.setObject = 
function (entry) {
	this._containedObject = entry;
	this._containedObject._viewInternalId = this.__internalId;
	if(!entry[ZaModel.currentTab])
		this._containedObject[ZaModel.currentTab] = "1";
	else
		this._containedObject[ZaModel.currentTab] = entry[ZaModel.currentTab];

    ZaMTAXFormView.SCANNER_STATUS_CHOICES.setChoices([
        {
            value: ZaMTA.STATUS_IDLE,
            label: ZaMsg.PQ_ScannerIdle
        },
        {
            value: ZaMTA.STATUS_SCANNING,
            label: ZaMsg.PQ_ScannerScanning
        },
        {
            value: ZaMTA.STATUS_SCAN_COMPLETE,
            label: ZaMsg.PQ_ScannerScanComplete
        },
        {
            value: ZaMTA.STATUS_STALE,
            label: ZaMsg.PQ_ScannerStaleData
        }
    ]);
		
	ZaMTAXFormView.tabChoices.setChoices([
		{value:ZaMTAXFormView._tab1, label:ZaMsg.PQV_Tab_Deferred + " (" + this._containedObject[ZaMTA.A_DeferredQ][ZaMTA.A_count] + ")"},
		{value:ZaMTAXFormView._tab2, label:ZaMsg.PQV_Tab_IncomingQ + " (" + this._containedObject[ZaMTA.A_IncomingQ][ZaMTA.A_count] + ")"},
				{value:ZaMTAXFormView._tab3, label:ZaMsg.PQV_Tab_ActiveQ + " (" + this._containedObject[ZaMTA.A_ActiveQ][ZaMTA.A_count] + ")"},
				{value:ZaMTAXFormView._tab4, label:ZaMsg.PQV_Tab_HoldQ + " (" + this._containedObject[ZaMTA.A_HoldQ][ZaMTA.A_count] + ")"},					
				{value:ZaMTAXFormView._tab5, label:ZaMsg.PQV_Tab_CorruptQ + " (" + this._containedObject[ZaMTA.A_CorruptQ][ZaMTA.A_count] + ")"}]),

	ZaMTAXFormView.tabChoices.dirtyChoices();
	this._localXForm.setInstance(this._containedObject);	
	ZaMTAXFormView.prototype.handleXFormChange.call(this);

}
ZaMTAXFormView.prototype.handleXFormChange = function () {
	if(this._containedObject[ZaModel.currentTab] == "1" && (this._containedObject[ZaMTA.A_DeferredQ][ZaMTA.A_Status]==ZaMTA.STATUS_IDLE)) {
		this._containedObject.getMailQStatus(ZaMTA.A_DeferredQ, null, 0,null,true);	
	}
	if(this._containedObject[ZaModel.currentTab] == "2" && (this._containedObject[ZaMTA.A_IncomingQ][ZaMTA.A_Status]==ZaMTA.STATUS_IDLE)) {
		this._containedObject.getMailQStatus(ZaMTA.A_IncomingQ, null, 0,null,true);	
	}
	if(this._containedObject[ZaModel.currentTab] == "3" && (this._containedObject[ZaMTA.A_ActiveQ][ZaMTA.A_Status]==ZaMTA.STATUS_IDLE)) {
		this._containedObject.getMailQStatus(ZaMTA.A_ActiveQ, null, 0,null,true);	
	}
	if(this._containedObject[ZaModel.currentTab] == "4" && (this._containedObject[ZaMTA.A_HoldQ][ZaMTA.A_Status]==ZaMTA.STATUS_IDLE)) {
		this._containedObject.getMailQStatus(ZaMTA.A_HoldQ, null, 0,null,true);	
	}
	if(this._containedObject[ZaModel.currentTab] == "5" && (this._containedObject[ZaMTA.A_CorruptQ][ZaMTA.A_Status]==ZaMTA.STATUS_IDLE)) {
		this._containedObject.getMailQStatus(ZaMTA.A_CorruptQ, null, 0,null,true);	
	}				
}

ZaMTAXFormView._listObjects = {};

ZaMTAXFormView.filterListSelectionListener = function (ev) {
	//register this list in the map, so that we can deselect it later
	if(ev.dwtObj && this.refPath) {
		ZaMTAXFormView._listObjects[this.refPath] = ev.dwtObj;
	}
	var instance = this.getInstance();
	var refParts = this.getRef().split("/");
	var filterName = refParts[1];
	var qName = refParts[0];
	if(!instance[qName][ZaMTA.A_selection_cache])
		instance[qName][ZaMTA.A_selection_cache] = {};

	var arr = this.widget.getSelection();
	if(arr && arr.length) {
		this.getModel().setInstanceValue(instance,qName + "/" + ZaMTA.A_selection_cache + "/" + filterName,arr);
		//instance[qName][ZaMTA.A_selection_cache][filterName] = arr;
	} else { 
		this.getModel().setInstanceValue(instance,qName + "/" + ZaMTA.A_selection_cache + "/" + filterName,null);		
		instance[qName][ZaMTA.A_selection_cache][filterName] = null;
	}
	//rebuild the query
	//this.getForm().refresh();
	instance._viewInternalId = this.getForm().parent.__internalId;
	instance.getMailQStatus(qName, instance[qName][ZaMTA.A_selection_cache]);	
}

ZaMTAXFormView.msgListSelectionListener = function (ev) {
	//register this list in the map, so that we can deselect it later
	if(ev.dwtObj && this.refPath) {
		ZaMTAXFormView._listObjects[this.refPath] = ev.dwtObj;
	}
	var instance = this.getInstance();
	var refParts = this.getRef().split("/");

	var qName = refParts[0];
	if(!instance[qName][ZaMTA.MsgIDS])
		instance[qName][ZaMTA.MsgIDS] = {};

	this.getModel().setInstanceValue(instance,qName + "/" + ZaMTA.MsgIDS, AjxUtil.isEmpty(this.widget.getSelection()) ? {} : this.widget.getSelection()); 
	//instance[qName][ZaMTA.MsgIDS] = this.widget.getSelection();
}

ZaMTAXFormView.searchQueue = function (ev) {
	var instance = this.getInstance();
	var qName = this.getRef();
	//var query = instance[qName][ZaMTA.A_query];
	instance.getMailQStatus(qName, instance[qName][ZaMTA.A_selection_cache]);	
	
}
			
ZaMTAXFormView.clearFilter = 
function (ev) {
//	this.setInstanceValue("",this.getRef()+"/"+ZaMTA.A_queue_filter_name);
//	this.setInstanceValue("",this.getRef()+"/"+ZaMTA.A_queue_filter_value);	
	this.setInstanceValue("",this.getRef()+"/"+ZaMTA.A_selection_cache);	

	this.setInstanceValue("",this.getRef()+"/"+ZaMTA.A_query);		
	//this.getForm().refresh();
	for(var x in ZaMTAXFormView._listObjects) {
		if(ZaMTAXFormView._listObjects[x]) {
			ZaMTAXFormView._listObjects[x].deselectAll();
		}
	}
}

ZaMTAXFormView.showAllMsgs = function (ev) {
	ZaMTAXFormView.clearFilter.call(this,ev);
	ZaMTAXFormView.searchQueue.call(this,ev);
}

ZaMTAXFormView.actionButtonListener = function (action) {
	var qName, field, dlgTitle,instance;
	qName = this.getRef();
	form = this.getForm();
	
	instance = this.getInstance();
	var obj = new Object();
	
	obj[ZaMTAActionDialog.QNAME]=qName;	
	switch(action) {
		case ZaMTA.ActionRequeue:
			dlgTitle = ZaMsg.PQ_REQ_DLG_TITLE;
			obj[ZaMTAActionDialog.MESSAGE]=ZaMsg.PQ_SELECT_WHAT_TO_REQ;
			obj[ZaMTAActionDialog.QUESTION]=ZaMsg.PQ_Q_REQUEUE_MESSAGES;
		break;
		case ZaMTA.ActionDelete:
			dlgTitle = ZaMsg.PQ_DEL_DLG_TITLE;
			obj[ZaMTAActionDialog.MESSAGE]=ZaMsg.PQ_SELECT_WHAT_TO_DEL;
			obj[ZaMTAActionDialog.QUESTION]=ZaMsg.PQ_Q_DELETE_MESSAGES;			
		break;
		case ZaMTA.ActionHold:
			dlgTitle = ZaMsg.PQ_HOLD_DLG_TITLE;
			obj[ZaMTAActionDialog.MESSAGE]=ZaMsg.PQ_SELECT_WHAT_TO_HOLD;
			obj[ZaMTAActionDialog.QUESTION]=ZaMsg.PQ_Q_HOLD_MESSAGES;			
		break;
		case ZaMTA.ActionRelease:
			dlgTitle = ZaMsg.PQ_REL_DLG_TITLE;
			obj[ZaMTAActionDialog.MESSAGE]=ZaMsg.PQ_SELECT_WHAT_TO_REL;
			obj[ZaMTAActionDialog.QUESTION]=ZaMsg.PQ_Q_RELEASE_MESSAGES;			
		break;
	}		
	var view = form.parent;
	view.selectActionDialog = ZaApp.getInstance().dialogs["selectActionDialog"] = new ZaMTAActionDialog(ZaApp.getInstance().getAppCtxt().getShell(),dlgTitle,instance);
	obj[ZaMTAActionDialog.MSG_IDS] = instance[qName][ZaMTA.MsgIDS];
	obj[ZaMTAActionDialog.FLTR_ITEMS] = instance[qName][ZaMTA.A_selection_cache];	
	obj[ZaMTAActionDialog.ANSWER] = ZaMTAActionDialog.SELECTED_MSGS; //default is selected messages
	obj[ZaMTAActionDialog.ACTION] = action;
	view.selectActionDialog.setObject(obj);
	view.selectActionDialog.registerCallback(DwtDialog.OK_BUTTON, view.actionDlgCallback, view, action);
	view.selectActionDialog.popup();
	
}

ZaMTAXFormView.prototype.actionDlgCallback = function(args)  {
	if(this.selectActionDialog) {
		var obj = this.selectActionDialog.getObject();
		var removeList;
		if(obj[ZaMTAActionDialog.ANSWER] == ZaMTAActionDialog.SELECTED_MSGS) {
			removeList = obj[ZaMTAActionDialog.MSG_IDS];
			if (removeList && removeList.length) {
				this.showConfirmationDlg(obj[ZaMTAActionDialog.ACTION],removeList, obj[ZaMTAActionDialog.QNAME],ZaMTA.A_messages);
			} else {
				this.selectActionDialog.popdown();
			}
		} else if(obj[ZaMTAActionDialog.ANSWER] == ZaMTAActionDialog.FLTRED_SET) {
			removeList = {};
			var field;
			if(obj[ZaMTAActionDialog.FLTR_ITEMS]) {
				for (var key in obj[ZaMTAActionDialog.FLTR_ITEMS]) {
					if(obj[ZaMTAActionDialog.FLTR_ITEMS][key]) {
						field = key;
						removeList[key] = obj[ZaMTAActionDialog.FLTR_ITEMS][key];
					}
				}
			}
			if(field) {
				this.showConfirmationDlg(obj[ZaMTAActionDialog.ACTION],removeList, obj[ZaMTAActionDialog.QNAME],field);
			} else {
				removeList = [];
				removeList[0] = {};
				removeList[0][ZaMTAQMsgItem.A_id] = ZaMTA.ID_ALL;
				this.showConfirmationDlg(obj[ZaMTAActionDialog.ACTION],removeList, obj[ZaMTAActionDialog.QNAME],ZaMTA.A_messages);
			}
		}
	}
}

ZaMTAXFormView.prototype.showConfirmationDlg = function (action, removelist,qName, field) {
	this.confirmMessageDialog = ZaApp.getInstance().dialogs["ConfirmMessageDialog"] = new ZaMsgDialog(ZaApp.getInstance().getAppCtxt().getShell(), null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON],null,ZaId.VIEW_MTA + "_confirmMessage");			
	if(removelist) {
		if(field == ZaMTA.A_messages) {
			var subst = "0";
			if(removelist.length) {
				if(removelist[0][ZaMTAQMsgItem.A_id]==ZaMTA.ID_ALL) {
					subst = ZaMsg.PQ_AllMessages;
				} else {
					subst = String(removelist.length);
				}
			}
			switch(action) {
				case ZaMTA.ActionRequeue:
					dlgMsg = String(ZaMsg.PQ_Q_REQUEUE_MESSAGES).replace("{0}", subst).replace("{1}",qName);
				break;
				case ZaMTA.ActionDelete:
					dlgMsg = String(ZaMsg.PQ_Q_DELETE_MESSAGES).replace("{0}", subst).replace("{1}",qName);
				break;
				case ZaMTA.ActionHold:
					dlgMsg = String(ZaMsg.PQ_Q_HOLD_MESSAGES).replace("{0}", subst).replace("{1}",qName);				
				break;
				case ZaMTA.ActionRelease:
					dlgMsg = String(ZaMsg.PQ_Q_RELEASE_MESSAGES).replace("{0}", subst).replace("{1}",qName);								
				break;
			}
		} else {
			switch(action) {
				case ZaMTA.ActionRequeue:
					dlgMsg = ZaMsg.PQ_Q_REQUEUE_MESSAGES2;
				break;
				case ZaMTA.ActionDelete:
					dlgMsg = ZaMsg.PQ_Q_DELETE_MESSAGES2;
				break;
				case ZaMTA.ActionHold:
					dlgMsg = ZaMsg.PQ_Q_HOLD_MESSAGES2;
				break;
				case ZaMTA.ActionRelease:
					dlgMsg = ZaMsg.PQ_Q_RELEASE_MESSAGES2;
				break;
			}		
			dlgMsg +=  "<br><ul>";
			var i=0;
			for(var key in removelist) {
				if(removelist[key]) {
					var cnt = removelist[key].length;
					dlgMsg += "<li>";
					dlgMsg += key;
					dlgMsg += "<ul>";
					for(var j=0; j < cnt; j++) {
						if(i > 19) {
							dlgMsg += "<li>...</li>";
							break;
						}
						dlgMsg += "<li>";
								dlgMsg += removelist[key][j][ZaMTAQSummaryItem.A_text];
						dlgMsg += (" (" + removelist[key][j][ZaMTAQSummaryItem.A_count] + " " + ZaMsg.messages + ")");
						dlgMsg += "</li>";						
						i++;
					}
					dlgMsg += "</ul></li>";
				}
			}
		}
		dlgMsg += "</ul>";
		if(field == ZaMTA.A_messages) {
			this.confirmMessageDialog.registerCallback(DwtDialog.YES_BUTTON, this.actionMsgsByIDCallback, this, {action:action,removelist:removelist, qName:qName, field:field});
		} else {
			this.confirmMessageDialog.registerCallback(DwtDialog.YES_BUTTON, this.actionMsgsByQueryCallback, this,{action:action,removelist:removelist, qName:qName, field:field});
		}
	}
	if(dlgMsg) {
		this.confirmMessageDialog.setMessage(dlgMsg,  DwtMessageDialog.INFO_STYLE);
	}
	this.confirmMessageDialog.registerCallback(DwtDialog.NO_BUTTON, this.doNotCallback, this);		
	this.confirmMessageDialog.popup();	
}

ZaMTAXFormView.popupMenuListener = function (action) {
	var qName, field, removeList;
	if(this.xFormItem) {
		var refParts = this.xFormItem.getRef().split("/");
		qName = refParts[0];
		if(refParts.length > 1)
			field = refParts[1];
	} 	

	var view = this.xFormItem.getForm().parent;
	if(field == ZaMTA.A_messages) {
		var removeList = new Array();
		if(this.getSelectionCount()>0) {
			removeList = this.getSelection();
		}
	} else  {
		var removeList = {};
		removeList[field] = new Array();
		if(this.getSelectionCount()>0) {
			removeList[field] = this.getSelection();
		}		
	}
	view.showConfirmationDlg(action, removeList, qName, field);
}

ZaMTAXFormView.prototype.actionMsgsByIDCallback = function (args) {
	var arr = [], action, qName,removelist;
	action = args.action;
	removelist = args.removelist;
	qName = args.qName;
	for(var key in removelist) {
		arr.push(removelist[key][ZaMTAQMsgItem.A_id])
	}
	if(arr.length > 0) {
	/*	if(this.xFormItem) {
			instance = this.xFormItem.getInstance();
			var refParts = this.xFormItem.getRef().split("/");
			qName = refParts[0];
		} else {
			instance = this.getInstance();
			qName = this.getRef();
		}*/
		
		this._containedObject.mailQueueAction(qName, action, "id", arr.join(","));
	}
	this.confirmMessageDialog.popdown();
	if(this.selectActionDialog)
		this.selectActionDialog.popdown();
}

ZaMTAXFormView.prototype.actionMsgsByQueryCallback = function (args) {
	var arr = [], action, removelist, qName, field;
	action = args.action;
	removelist = args.removelist;
	qName = args.qName;
	field = args.field;
	this._containedObject.mailQueueAction(qName, action, "query", removelist);
	this.confirmMessageDialog.popdown();
	if(this.selectActionDialog)
		this.selectActionDialog.popdown();
}

ZaMTAXFormView.prototype.doNotCallback = function () {
	if(this.confirmMessageDialog)
		this.confirmMessageDialog.popdown();
}


ZaMTAXFormView.backMsgsButtonHndlr = function (ev) {
	var instance = this.getInstance();
	var qName = this.getRef();
	var currentPage = this.getInstanceValue(this.getRef()+"/"+ZaMTA.A_pageNum);

	if (currentPage)
		currentPage--;
	else 
		currentPage = 0;
			
	instance.getMailQStatus(qName, instance[qName][ZaMTA.A_selection_cache],currentPage*ZaMTA.RESULTSPERPAGE);
}

ZaMTAXFormView.fwdMsgsButtonHndlr = function (ev) {
	var instance = this.getInstance();
	var qName = this.getRef();
	var currentPage = this.getInstanceValue(this.getRef()+"/"+ZaMTA.A_pageNum);
	if (currentPage)
		currentPage++;
	else 
		currentPage = 1;

	instance.getMailQStatus(qName, instance[qName][ZaMTA.A_selection_cache],currentPage*ZaMTA.RESULTSPERPAGE);
}

ZaMTAXFormView.listActionListener = function (ev) {
	this.actionMenu.popup(0, ev.docX, ev.docY);	
}

ZaMTAXFormView.isParsingProgressBarVisible = function (quename) {
	var instance = this.getInstance();
	return (instance[quename][ZaMTA.A_Status] == ZaMTA.STATUS_SCANNING || instance[quename][ZaMTA.A_Status] == ZaMTA.STATUS_SCAN_COMPLETE);	
}

ZaMTAXFormView.refreshListener = function (ev) {
	var refParts = this.getRef().split("/");
	var filterName = refParts[1];
	var qName = refParts[0];
	ZaMTAXFormView.clearFilter.call(this,ev);	
	this.getInstance().getMailQStatus(qName,null,null,null,true);
	this.getInstance().load();
	ZaMTAXFormView.tabChoices.setChoices([
		{value:ZaMTAXFormView._tab1, label:ZaMsg.PQV_Tab_Deferred + " (" + this.getInstance()[ZaMTA.A_DeferredQ][ZaMTA.A_count] + ")"},
		{value:ZaMTAXFormView._tab2, label:ZaMsg.PQV_Tab_IncomingQ + " (" + this.getInstance()[ZaMTA.A_IncomingQ][ZaMTA.A_count] + ")"},
				{value:ZaMTAXFormView._tab3, label:ZaMsg.PQV_Tab_ActiveQ + " (" + this.getInstance()[ZaMTA.A_ActiveQ][ZaMTA.A_count] + ")"},
				{value:ZaMTAXFormView._tab4, label:ZaMsg.PQV_Tab_HoldQ + " (" + this.getInstance()[ZaMTA.A_HoldQ][ZaMTA.A_count] + ")"},					
				{value:ZaMTAXFormView._tab5, label:ZaMsg.PQV_Tab_CorruptQ + " (" + this.getInstance()[ZaMTA.A_CorruptQ][ZaMTA.A_count] + ")"}]),

	ZaMTAXFormView.tabChoices.dirtyChoices();	
}

ZaMTAXFormView.createPopupMenu = function (listWidget) {
	popupOperations = [new ZaOperation(ZaOperation.DELETE, ZaMsg.TBB_Delete, ZaMsg.PQ_Delete_tt, null, null, new AjxListener(listWidget, ZaMTAXFormView.popupMenuListener, ZaMTA.ActionDelete)),
	new ZaOperation(ZaOperation.REQUEUE, ZaMsg.TBB_Requeue, ZaMsg.PQ_Requeue_tt, null, null, new AjxListener(listWidget, ZaMTAXFormView.popupMenuListener,ZaMTA.ActionRequeue ))];

	var refParts = this.getRef().split("/");
	var qName = refParts[0];
	if(qName == ZaMTA.A_HoldQ) {
		popupOperations.push(new ZaOperation(ZaOperation.RELEASE, ZaMsg.TBB_Release, ZaMsg.PQ_Release_tt, null, null, new AjxListener(listWidget, ZaMTAXFormView.popupMenuListener,ZaMTA.ActionRelease)));
	} else {
		popupOperations.push(new ZaOperation(ZaOperation.HOLD, ZaMsg.TBB_Hold, ZaMsg.PQ_Hold_tt, null, null, new AjxListener(listWidget, ZaMTAXFormView.popupMenuListener,ZaMTA.ActionHold )));
	}
	listWidget.actionMenu = new ZaPopupMenu(listWidget, "ActionMenu", null, popupOperations, ZaId.VIEW_MTA, ZaId.MENU_POP);
	listWidget.addActionListener(new AjxListener(listWidget, ZaMTAXFormView.listActionListener));		
	listWidget.xFormItem = this;
}

/**
* method of the XForm
**/
ZaMTAXFormView.shouldEnableMsgsForwardButton = function (qName) {
	return (this.getInstanceValue(qName + "/" +ZaMTA.A_more));
};

/**
* method of the XForm
**/
ZaMTAXFormView.shouldEnableMsgsBackButton = function (qName) {
	var val = this.getInstanceValue(qName + "/" + ZaMTA.A_pageNum);
	return (val && (val>0));
};

ZaMTAXFormView.myXFormModifier = function(xFormObject) {	
	xFormObject.tableCssStyle="width:100%;position:static;overflow:auto;";
	
	
	var headerList = new Array();

    headerList[0] = new ZaListHeaderItem(ZaMTAQSummaryItem.A_text_col, ZaMsg.PQV_name_col, null, "auto", false, null, true, true);
    headerList[1] = new ZaListHeaderItem(ZaMTAQSummaryItem.A_count_col, ZaMsg.PQV_count_col, null, "38px", false, null, true, true);

	var msgHeaderList = new Array();
	msgHeaderList[0] = new ZaListHeaderItem(ZaMTAQMsgItem.A_id, ZaMsg.PQV_qid_col, null, "132px", null, null, true, true);

    if(ZaZimbraAdmin.LOCALE=="en"||ZaZimbraAdmin.LOCALE=="en_AU"||ZaZimbraAdmin.LOCALE=="en_GB"){
        msgHeaderList[1] = new ZaListHeaderItem(ZaMTAQMsgItem.A_recipients, ZaMsg.PQV_recipients_col, null, "136px", null, null, true, true);
        msgHeaderList[2] = new ZaListHeaderItem(ZaMTAQMsgItem.A_sender, ZaMsg.PQV_sender_col, null, "136px", null, null, true, true);
    }
     else{
         msgHeaderList[1] = new ZaListHeaderItem(ZaMTAQMsgItem.A_recipients, ZaMsg.PQV_recipients_col, null, "106px", null, null, true, true);
	     msgHeaderList[2] = new ZaListHeaderItem(ZaMTAQMsgItem.A_sender, ZaMsg.PQV_sender_col, null, "106px", null, null, true, true);
    }
	msgHeaderList[3] = new ZaListHeaderItem(ZaMTAQMsgItem.A_origin_ip, ZaMsg.PQV_origin_ip_col, null, "97px", null, null, true, true);
	msgHeaderList[4] = new ZaListHeaderItem(ZaMTAQMsgItem.A_origin_host, ZaMsg.PQV_origin_host_col, null, "103px", null, null, true, true);
	msgHeaderList[5] = new ZaListHeaderItem(ZaMTAQMsgItem.A_fromdomain, ZaMsg.PQV_origin_domain_col, null, "106px", null, null, true, true);
	msgHeaderList[6] = new ZaListHeaderItem(ZaMTAQMsgItem.A_content_filter, ZaMsg.PQV_content_filter_col, "103px", null, null, null, true, true);
	msgHeaderList[7] = new ZaListHeaderItem(ZaMTAQMsgItem.A_time, ZaMsg.PQV_time_col, null, "78px", null, null, true, true);

	xFormObject.items = [
		{type:_GROUP_, cssClass:"ZmSelectedHeaderBg", colSpan:"*", id:"xform_header", 
			items: [
				{type:_GROUP_, numCols:2, colSizes:["32px","auto"],
					items: [
						{type:_AJX_IMAGE_, src:"Queue_32", label:null},
						{type:_OUTPUT_, ref:ZaMTA.A_name, label:null,cssClass:"AdminTitle",
                           visibilityChecks:[ZaItem.hasReadPermission], height:32 }
					]
				}
			]
		},
		{type:_TAB_BAR_, ref:ZaModel.currentTab,
			containerCssStyle: "background-color:#DDD;padding-top:5px;",
			choices:ZaMTAXFormView.tabChoices,
			cssClass:"ZaTabBar", id:"xform_tabbar"
		},
		{type:_SWITCH_, items:[
				{type:_ZATABCASE_, numCols:1, width:"100%", caseKey:ZaMTAXFormView._tab1, 
					items:[	
						{type:_SPACER_, height:"15"},
						{type:_GROUP_,numCols:8, colSizes:["10%", "10%","10%", "15%", "17%", "25%", "auto", "10%"],tableCssClass:"search_field_tableCssClass", cssClass:"qsearch_field_bar", width:"95%", items: [
							{type:_OUTPUT_, label:ZaMsg.TBB_LastUpdated, ref:ZaMTA.A_DeferredQ+"/"+ZaMTA.A_refreshTime},
							{type:_OUTPUT_, label:ZaMsg.PQ_AnalyzerStatus, ref:ZaMTA.A_DeferredQ+"/"+ZaMTA.A_Status,choices:ZaMTAXFormView.SCANNER_STATUS_CHOICES},
							{type:_DWT_PROGRESS_BAR_,label:ZaMsg.PQ_ParsingProgress,
								maxValue:null,
								maxValueRef:ZaMTA.A_DeferredQ+"/"+ZaMTA.A_count,
								ref:ZaMTA.A_DeferredQ+"/"+ZaMTA.A_totalComplete,
								visibilityChecks:[[ZaMTAXFormView.isParsingProgressBarVisible,ZaMTA.A_DeferredQ]],
								visibilityChangeEventSources:[ZaMTA.A_DeferredQ+"/"+ZaMTA.A_Status],
								align:_CENTER_,	
								wholeCssClass:"mtaprogressbar",
								progressCssClass:"progressused"
							},
							{type:_CELLSPACER_},
							{type:_DWT_BUTTON_,ref:ZaMTA.A_DeferredQ, label:ZaMsg.PQ_AnalyzeQueue,onActivate:ZaMTAXFormView.refreshListener}							
						]},								
						{type:_SPACER_, height:"1"},							
						{type:_ZAALLSCREEN_GROUPER_, numCols:6, width: "100%",colSizes:["18%","15%","17%","17%","17%","15%"],
							label:ZaMsg.PQV_Summary,
							items: [						
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1,width:"100%", label:ZaMsg.PQV_GroupRDomain, items: [
								    {ref:ZaMTA.A_DeferredQ+"/"+ZaMTA.A_rdomain, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu, preserveSelection:true, multiselect:true,bmolsnr:true,onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},		
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1, width: "100%", label:ZaMsg.PQV_GroupOriginIP,items: [
								    {ref:ZaMTA.A_DeferredQ+"/"+ZaMTA.A_origip, type:_DWT_LIST_, height:"150", width:"96%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},		
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1, width: "100%", label:ZaMsg.PQV_GroupSenderDomain,items: [
								    {ref:ZaMTA.A_DeferredQ+"/"+ZaMTA.A_sdomain, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},	
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1,width: "100%", label:ZaMsg.PQV_GroupReceiverAddress,items: [
								    {ref:ZaMTA.A_DeferredQ+"/"+ZaMTA.A_raddress, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},		
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1,width: "100%", label:ZaMsg.PQV_GroupSenderAddress,items: [
								    {ref:ZaMTA.A_DeferredQ+"/"+ZaMTA.A_saddress, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},		
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1, width: "100%", label:ZaMsg.PQV_GroupError,items: [
								    {ref:ZaMTA.A_DeferredQ+"/"+ZaMTA.A_error, type:_DWT_LIST_, height:"150", width:"96%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							}						
						]},
						{type:_SPACER_, height:"15"},	
																
						{type:_ZAALLSCREEN_GROUPER_, numCols:1, width:"100%", label:ZaMsg.PQV_Messages,  items: [
							{type:_GROUP_, numCols:9, colSizes:["16%", "2%", "16%", "2%", "16%", "2%", "16%", "2%", "28%"], tableCssClass:"search_field_tableCssClass", cssClass:"qsearch_field_bar", items: [
								{type:_DWT_BUTTON_,ref:ZaMTA.A_DeferredQ, label:ZaMsg.TBB_RequeueAll,onActivate:"ZaMTAXFormView.actionButtonListener.call(this,ZaMTA.ActionRequeue);",toolTipContent:ZaMsg.PQ_Requeue_tt},{type:_CELLSPACER_},
								{type:_DWT_BUTTON_,ref:ZaMTA.A_DeferredQ, label:ZaMsg.TBB_HoldAll,onActivate:"ZaMTAXFormView.actionButtonListener.call(this,ZaMTA.ActionHold);",toolTipContent:ZaMsg.PQ_Hold_tt},{type:_CELLSPACER_},							
								{type:_DWT_BUTTON_,ref:ZaMTA.A_DeferredQ, label:ZaMsg.PQ_DeleteAll,onActivate:"ZaMTAXFormView.actionButtonListener.call(this,ZaMTA.ActionDelete);" ,toolTipContent:ZaMsg.PQ_Delete_tt},{type:_CELLSPACER_},							
								{type:_DWT_BUTTON_, label:ZaMsg.PQ_showAllMsgs, ref:ZaMTA.A_DeferredQ, onActivate:ZaMTAXFormView.showAllMsgs},{type:_CELLSPACER_},
								{type:_GROUP_, numCols:3, items:[
									{type:_DWT_BUTTON_, label:ZaMsg.Previous,toolTipContent:ZaMsg.PrevPage_tt, width:86, id:"backButton", icon:"LeftArrow", disIcon:"LeftArrowDis",
										ref:ZaMTA.A_DeferredQ,
										onActivate:"ZaMTAXFormView.backMsgsButtonHndlr.call(this,event)", 
										enableDisableChangeEventSources:[ZaMTA.A_DeferredQ + "/" + ZaMTA.A_pageNum],
										enableDisableChecks:[[ZaMTAXFormView.shouldEnableMsgsBackButton,ZaMTA.A_DeferredQ]]
								    },								       
									{type:_CELLSPACER_},
									{type:_DWT_BUTTON_, label:ZaMsg.Next,toolTipContent:ZaMsg.NextPage_tt, width:86, id:"fwdButton", icon:"RightArrow", disIcon:"RightArrowDis",
										ref:ZaMTA.A_DeferredQ,labelLocation:(DwtLabel.IMAGE_RIGHT | DwtLabel.ALIGN_CENTER),
										enableDisableChangeEventSources:[ZaMTA.A_DeferredQ + "/" + ZaMTA.A_more],
										enableDisableChecks:[[ZaMTAXFormView.shouldEnableMsgsForwardButton,ZaMTA.A_DeferredQ]],										
										onActivate:"ZaMTAXFormView.fwdMsgsButtonHndlr.call(this,event)" 
								    }]
								 }
							]},			
						    {ref:ZaMTA.A_DeferredQ+"/"+ZaMTA.A_messages, onSelection:ZaMTAXFormView.msgListSelectionListener, type:_DWT_LIST_, height:"200", width:"99%", cssClass: "DLSource",
						   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,multiselect:true, widgetClass:ZaQMessagesListView, headerList:msgHeaderList}								
						]}		
					]
				},							
				{type:_ZATABCASE_, numCols:1, width:"100%", caseKey:ZaMTAXFormView._tab2, 
					items:[	
						{type:_SPACER_, height:"15"},
						{type:_GROUP_,numCols:8, colSizes:["10%", "10%","10%", "15%", "15%", "25%", "auto", "10%"],tableCssClass:"search_field_tableCssClass", cssClass:"qsearch_field_bar", width:"95%", items: [
							{type:_OUTPUT_, label:ZaMsg.TBB_LastUpdated, ref:ZaMTA.A_IncomingQ+"/"+ZaMTA.A_refreshTime},
							{type:_OUTPUT_, label:ZaMsg.PQ_AnalyzerStatus, ref:ZaMTA.A_IncomingQ+"/"+ZaMTA.A_Status,choices:ZaMTAXFormView.SCANNER_STATUS_CHOICES},
							{type:_DWT_PROGRESS_BAR_,label:ZaMsg.PQ_ParsingProgress,
								maxValue:null,
								maxValueRef:ZaMTA.A_IncomingQ+"/"+ZaMTA.A_count,
								ref:ZaMTA.A_IncomingQ+"/"+ZaMTA.A_totalComplete,
								visibilityChecks:[[ZaMTAXFormView.isParsingProgressBarVisible,ZaMTA.A_IncomingQ]],
								visibilityChangeEventSources:[ZaMTA.A_IncomingQ+"/"+ZaMTA.A_Status],								
								align:_CENTER_,	
								wholeCssClass:"mtaprogressbar",
								progressCssClass:"progressused"
							},
							{type:_CELLSPACER_},
							{type:_DWT_BUTTON_,ref:ZaMTA.A_IncomingQ, label:ZaMsg.PQ_AnalyzeQueue,onActivate:ZaMTAXFormView.refreshListener}													
						]},							
						{type:_SPACER_, height:"1"},		
						{type:_ZAALLSCREEN_GROUPER_, numCols:5, width: "100%", label:ZaMsg.PQV_Summary, colSizes:["20%","20%","20%","20%","20%"], items:[
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1,width:"100%", label:ZaMsg.PQV_GroupRDomain, items: [
								    {ref:ZaMTA.A_IncomingQ+"/"+ZaMTA.A_rdomain, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu, preserveSelection:true, multiselect:true,bmolsnr:true,onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},		
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1, width: "100%", label:ZaMsg.PQV_GroupOriginIP,items: [
								    {ref:ZaMTA.A_IncomingQ+"/"+ZaMTA.A_origip, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},		
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1, width: "100%", label:ZaMsg.PQV_GroupSenderDomain,items: [
								    {ref:ZaMTA.A_IncomingQ+"/"+ZaMTA.A_sdomain, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},	
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1,width: "100%", label:ZaMsg.PQV_GroupReceiverAddress,items: [
								    {ref:ZaMTA.A_IncomingQ+"/"+ZaMTA.A_raddress, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},		
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1,width: "100%", label:ZaMsg.PQV_GroupSenderAddress,items: [
								    {ref:ZaMTA.A_IncomingQ+"/"+ZaMTA.A_saddress, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							}						
						]},
						{type:_SPACER_, height:"15"},	
						{type:_ZAALLSCREEN_GROUPER_, numCols:1, width:"100%", label:ZaMsg.PQV_Messages,  items: [
							{type:_GROUP_, numCols:9, colSizes:["16%", "3%", "16%", "3%", "16%", "3%", "16%", "3%", "24%"], tableCssClass:"search_field_tableCssClass", cssClass:"qsearch_field_bar", items: [
								{type:_DWT_BUTTON_,ref:ZaMTA.A_IncomingQ, label:ZaMsg.TBB_RequeueAll,onActivate:"ZaMTAXFormView.actionButtonListener.call(this,ZaMTA.ActionRequeue)",toolTipContent:ZaMsg.PQ_Requeue_tt},{type:_CELLSPACER_},
								{type:_DWT_BUTTON_,ref:ZaMTA.A_IncomingQ, label:ZaMsg.TBB_HoldAll,onActivate:"ZaMTAXFormView.actionButtonListener.call(this,ZaMTA.ActionHold)",toolTipContent:ZaMsg.PQ_Hold_tt},{type:_CELLSPACER_},	
								{type:_DWT_BUTTON_,ref:ZaMTA.A_IncomingQ, label:ZaMsg.PQ_DeleteAll,onActivate:"ZaMTAXFormView.actionButtonListener.call(this,ZaMTA.ActionDelete)",toolTipContent:ZaMsg.PQ_Delete_tt},{type:_CELLSPACER_},
								{type:_DWT_BUTTON_, label:ZaMsg.PQ_showAllMsgs, ref:ZaMTA.A_IncomingQ, onActivate:ZaMTAXFormView.showAllMsgs},
								{type:_CELLSPACER_},
								{type:_GROUP_, numCols:3, items:[
									{type:_DWT_BUTTON_, label:ZaMsg.Previous,toolTipContent:ZaMsg.PrevPage_tt, width:86, id:"backButton", icon:"LeftArrow", disIcon:"LeftArrowDis", 	
										ref:ZaMTA.A_IncomingQ,
										onActivate:"ZaMTAXFormView.backMsgsButtonHndlr.call(this,event)", 
										enableDisableChangeEventSources:[ZaMTA.A_IncomingQ + "/" + ZaMTA.A_pageNum],
										enableDisableChecks:[[ZaMTAXFormView.shouldEnableMsgsBackButton,ZaMTA.A_IncomingQ]]										
								    },								       
									{type:_CELLSPACER_},
									{type:_DWT_BUTTON_, label:ZaMsg.Next,toolTipContent:ZaMsg.NextPage_tt, width:86, id:"fwdButton", icon:"RightArrow", disIcon:"RightArrowDis",	
										ref:ZaMTA.A_IncomingQ,labelLocation:(DwtLabel.IMAGE_RIGHT | DwtLabel.ALIGN_CENTER),
										onActivate:"ZaMTAXFormView.fwdMsgsButtonHndlr.call(this,event)", 
										enableDisableChangeEventSources:[ZaMTA.A_IncomingQ + "/" + ZaMTA.A_more],
										enableDisableChecks:[[ZaMTAXFormView.shouldEnableMsgsForwardButton,ZaMTA.A_IncomingQ]]										
								    }]
								}														
							]},										
						    {ref:ZaMTA.A_IncomingQ+"/"+ZaMTA.A_messages, onSelection:ZaMTAXFormView.msgListSelectionListener, type:_DWT_LIST_, height:"200", width:"99%", cssClass: "DLSource", 
						   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,multiselect:true, widgetClass:ZaQMessagesListView, headerList:msgHeaderList}								
								]
							}		
					]
				},
				{type:_ZATABCASE_, numCols:1, cssClass:(AjxEnv.isIE ? "IEcontainer" : "XFormCase"), width:"100%",
					caseKey:ZaMTAXFormView._tab3, 
					items:[	
						{type:_SPACER_, height:"15"},
						{type:_GROUP_,numCols:8, colSizes:["10%", "10%","10%", "15%", "15%", "25%", "auto", "10%"],tableCssClass:"search_field_tableCssClass", cssClass:"qsearch_field_bar", items: [
							{type:_OUTPUT_, label:ZaMsg.TBB_LastUpdated, ref:ZaMTA.A_ActiveQ+"/"+ZaMTA.A_refreshTime},
							{type:_OUTPUT_, label:ZaMsg.PQ_AnalyzerStatus, ref:ZaMTA.A_ActiveQ+"/"+ZaMTA.A_Status,choices:ZaMTAXFormView.SCANNER_STATUS_CHOICES},
							{type:_DWT_PROGRESS_BAR_,label:ZaMsg.PQ_ParsingProgress,
								maxValue:null,
								maxValueRef:ZaMTA.A_ActiveQ+"/"+ZaMTA.A_count,
								ref:ZaMTA.A_ActiveQ+"/"+ZaMTA.A_totalComplete,
								visibilityChecks:[[ZaMTAXFormView.isParsingProgressBarVisible,ZaMTA.A_ActiveQ]],
								visibilityChangeEventSources:[ZaMTA.A_ActiveQ+"/"+ZaMTA.A_Status],								
								align:_CENTER_,	
								wholeCssClass:"mtaprogressbar",
								progressCssClass:"progressused"
							},
							{type:_CELLSPACER_},							
							{type:_DWT_BUTTON_,ref:ZaMTA.A_ActiveQ, label:ZaMsg.PQ_AnalyzeQueue,onActivate:ZaMTAXFormView.refreshListener}
						]},								
						{type:_SPACER_, height:"1"},							
						{type:_ZAALLSCREEN_GROUPER_, numCols:5, width: "100%", label:ZaMsg.PQV_Summary, colSizes:["20%","20%","20%","20%","20%"], items:[
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1,width:"100%", label:ZaMsg.PQV_GroupRDomain, items: [
							    {ref:ZaMTA.A_ActiveQ+"/"+ZaMTA.A_rdomain, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu, preserveSelection:true, multiselect:true,bmolsnr:true,onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
							]},		
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1, width: "100%", label:ZaMsg.PQV_GroupOriginIP,items: [
								    {ref:ZaMTA.A_ActiveQ+"/"+ZaMTA.A_origip, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},		
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1, width: "100%", label:ZaMsg.PQV_GroupSenderDomain,items: [
								    {ref:ZaMTA.A_ActiveQ+"/"+ZaMTA.A_sdomain, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},	
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1,width: "100%", label:ZaMsg.PQV_GroupReceiverAddress,items: [
								    {ref:ZaMTA.A_ActiveQ+"/"+ZaMTA.A_raddress, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},		
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1,width: "100%", label:ZaMsg.PQV_GroupSenderAddress,items: [
								    {ref:ZaMTA.A_ActiveQ+"/"+ZaMTA.A_saddress, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							}						
						]},
						{type:_SPACER_, height:"15"},	
						{type:_ZAALLSCREEN_GROUPER_, numCols:1, width:"100%", label:ZaMsg.PQV_Messages,  items: [
							{type:_GROUP_, numCols:9, colSizes:["16%", "3%", "16%", "3%", "16%", "3%", "16%", "3%", "24%"], tableCssClass:"search_field_tableCssClass", cssClass:"qsearch_field_bar", items: [
								{type:_DWT_BUTTON_,ref:ZaMTA.A_ActiveQ, label:ZaMsg.TBB_RequeueAll,onActivate:"ZaMTAXFormView.actionButtonListener.call(this,ZaMTA.ActionRequeue)",toolTipContent:ZaMsg.PQ_Requeue_tt},{type:_CELLSPACER_},
								{type:_DWT_BUTTON_,ref:ZaMTA.A_ActiveQ, label:ZaMsg.TBB_HoldAll,onActivate:"ZaMTAXFormView.actionButtonListener.call(this,ZaMTA.ActionHold)",toolTipContent:ZaMsg.PQ_Hold_tt},{type:_CELLSPACER_},	
								{type:_DWT_BUTTON_,ref:ZaMTA.A_ActiveQ, label:ZaMsg.PQ_DeleteAll,onActivate:"ZaMTAXFormView.actionButtonListener.call(this,ZaMTA.ActionDelete)",toolTipContent:ZaMsg.PQ_Delete_tt},{type:_CELLSPACER_},
								{type:_DWT_BUTTON_, label:ZaMsg.PQ_showAllMsgs, ref:ZaMTA.A_ActiveQ, onActivate:ZaMTAXFormView.showAllMsgs},
								{type:_CELLSPACER_},
								{type:_GROUP_, numCols:3, items:[					
									{type:_DWT_BUTTON_, label:ZaMsg.Previous,toolTipContent:ZaMsg.PrevPage_tt, width:86, id:"backButton", icon:"LeftArrow", disIcon:"LeftArrowDis", 	
										ref:ZaMTA.A_ActiveQ,
										onActivate:"ZaMTAXFormView.backMsgsButtonHndlr.call(this,event)",
										enableDisableChangeEventSources:[ZaMTA.A_ActiveQ + "/" + ZaMTA.A_pageNum],
										enableDisableChecks:[[ZaMTAXFormView.shouldEnableMsgsBackButton,ZaMTA.A_ActiveQ]]	
								    },								       
									{type:_CELLSPACER_},
									{type:_DWT_BUTTON_, label:ZaMsg.Next,toolTipContent:ZaMsg.NextPage_tt, width:86, id:"fwdButton", icon:"RightArrow", disIcon:"RightArrowDis",	
										ref:ZaMTA.A_ActiveQ,labelLocation:(DwtLabel.IMAGE_RIGHT | DwtLabel.ALIGN_CENTER),
										onActivate:"ZaMTAXFormView.fwdMsgsButtonHndlr.call(this,event)",
										enableDisableChangeEventSources:[ZaMTA.A_ActiveQ + "/" + ZaMTA.A_more],
										enableDisableChecks:[[ZaMTAXFormView.shouldEnableMsgsForwardButton,ZaMTA.A_ActiveQ]]										 
								    }
								 ]}
							]},									
							{ref:ZaMTA.A_ActiveQ+"/"+ZaMTA.A_messages, onSelection:ZaMTAXFormView.msgListSelectionListener, type:_DWT_LIST_, height:"200", width:"99%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,multiselect:true, widgetClass:ZaQMessagesListView, headerList:msgHeaderList}								
						]}		
					]
				},
				{type:_ZATABCASE_, numCols:1, cssClass:(AjxEnv.isIE ? "IEcontainer" : "XFormCase"), width:"100%",
					caseKey:ZaMTAXFormView._tab4, 
					items:[	
						{type:_SPACER_, height:"15"},
						{type:_GROUP_,numCols:8, colSizes:["10%", "10%","10%", "15%", "15%", "25%", "auto", "10%"],tableCssClass:"search_field_tableCssClass", cssClass:"qsearch_field_bar", width:"95%", items: [
							{type:_OUTPUT_, label:ZaMsg.TBB_LastUpdated, ref:ZaMTA.A_HoldQ+"/"+ZaMTA.A_refreshTime},
							{type:_OUTPUT_, label:ZaMsg.PQ_AnalyzerStatus, ref:ZaMTA.A_HoldQ+"/"+ZaMTA.A_Status,choices:ZaMTAXFormView.SCANNER_STATUS_CHOICES},
							{type:_DWT_PROGRESS_BAR_,label:ZaMsg.PQ_ParsingProgress,
								maxValue:null,
								maxValueRef:ZaMTA.A_HoldQ+"/"+ZaMTA.A_count,
								ref:ZaMTA.A_HoldQ+"/"+ZaMTA.A_totalComplete,
								visibilityChecks:[[ZaMTAXFormView.isParsingProgressBarVisible,ZaMTA.A_HoldQ]],
								visibilityChangeEventSources:[ZaMTA.A_HoldQ+"/"+ZaMTA.A_Status],								
								align:_CENTER_,	
								wholeCssClass:"mtaprogressbar",
								progressCssClass:"progressused"
							},
							{type:_CELLSPACER_},							
							{type:_DWT_BUTTON_,ref:ZaMTA.A_HoldQ, label:ZaMsg.PQ_AnalyzeQueue,onActivate:ZaMTAXFormView.refreshListener}
						]},							
						{type:_SPACER_, height:"1"},							
						{type:_ZAALLSCREEN_GROUPER_, numCols:5, width: "100%", label:ZaMsg.PQV_Summary, colSizes:["20%","20%","20%","20%","20%"], items:[
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1,width:"100%", label:ZaMsg.PQV_GroupRDomain, items: [
								    {ref:ZaMTA.A_HoldQ+"/"+ZaMTA.A_rdomain, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu, preserveSelection:true, multiselect:true,bmolsnr:true,onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},		
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1, width: "100%", label:ZaMsg.PQV_GroupOriginIP,items: [
								    {ref:ZaMTA.A_HoldQ+"/"+ZaMTA.A_origip, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},		
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1, width: "100%", label:ZaMsg.PQV_GroupSenderDomain,items: [
								    {ref:ZaMTA.A_HoldQ+"/"+ZaMTA.A_sdomain, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},	
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1,width: "100%", label:ZaMsg.PQV_GroupReceiverAddress,items: [
								    {ref:ZaMTA.A_HoldQ+"/"+ZaMTA.A_raddress, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},		
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1,width: "100%", label:ZaMsg.PQV_GroupSenderAddress,items: [
								    {ref:ZaMTA.A_HoldQ+"/"+ZaMTA.A_saddress, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							}						
						]},
						{type:_SPACER_, height:"15"},	
						{type:_ZAALLSCREEN_GROUPER_, numCols:1, width:"100%", label:ZaMsg.PQV_Messages,  items: [
							{type:_GROUP_, numCols:9, colSizes:["16%", "3%", "16%", "3%", "16%", "3%", "16%", "3%", "24%"], tableCssClass:"search_field_tableCssClass", cssClass:"qsearch_field_bar", items: [
								{type:_DWT_BUTTON_,ref:ZaMTA.A_HoldQ, label:ZaMsg.TBB_RequeueAll,onActivate:"ZaMTAXFormView.actionButtonListener.call(this,ZaMTA.ActionRequeue)",toolTipContent:ZaMsg.PQ_Requeue_tt},{type:_CELLSPACER_},
								{type:_DWT_BUTTON_,ref:ZaMTA.A_HoldQ, label:ZaMsg.TBB_ReleaseAll,onActivate:"ZaMTAXFormView.actionButtonListener.call(this,ZaMTA.ActionRelease)",toolTipContent:ZaMsg.PQ_Release_tt},{type:_CELLSPACER_},	
								{type:_DWT_BUTTON_,ref:ZaMTA.A_HoldQ, label:ZaMsg.PQ_DeleteAll,onActivate:"ZaMTAXFormView.actionButtonListener.call(this,ZaMTA.ActionDelete)",toolTipContent:ZaMsg.PQ_Delete_tt},{type:_CELLSPACER_},
								{type:_DWT_BUTTON_, label:ZaMsg.PQ_showAllMsgs, ref:ZaMTA.A_HoldQ, onActivate:ZaMTAXFormView.showAllMsgs},
								{type:_CELLSPACER_},
								{type:_GROUP_, numCols:3, items:[								
									{type:_DWT_BUTTON_, label:ZaMsg.Previous,toolTipContent:ZaMsg.PrevPage_tt, width:86, id:"backButton", icon:"LeftArrow", disIcon:"LeftArrowDis", 	
										ref:ZaMTA.A_HoldQ,
										onActivate:"ZaMTAXFormView.backMsgsButtonHndlr.call(this,event)",
										enableDisableChangeEventSources:[ZaMTA.A_HoldQ + "/" + ZaMTA.A_pageNum],
										enableDisableChecks:[[ZaMTAXFormView.shouldEnableMsgsBackButton,ZaMTA.A_HoldQ]]										 
								    },								       
									{type:_CELLSPACER_},
									{type:_DWT_BUTTON_, label:ZaMsg.Next,toolTipContent:ZaMsg.NextPage_tt, width:86, id:"fwdButton", icon:"RightArrow", disIcon:"RightArrowDis",	
										ref:ZaMTA.A_HoldQ,labelLocation:(DwtLabel.IMAGE_RIGHT | DwtLabel.ALIGN_CENTER),
										onActivate:"ZaMTAXFormView.fwdMsgsButtonHndlr.call(this,event)",
										enableDisableChangeEventSources:[ZaMTA.A_HoldQ + "/" + ZaMTA.A_more],
										enableDisableChecks:[[ZaMTAXFormView.shouldEnableMsgsForwardButton,ZaMTA.A_HoldQ]]										 
							    	}
							    ]}
							]},								
						    {ref:ZaMTA.A_HoldQ+"/"+ZaMTA.A_messages, onSelection:ZaMTAXFormView.msgListSelectionListener, type:_DWT_LIST_, height:"200", width:"99%", cssClass: "DLSource", 
						   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,multiselect:true, widgetClass:ZaQMessagesListView, headerList:msgHeaderList
						   	}								
						]}		
					]
				},											
					
				{type:_ZATABCASE_, numCols:1, cssClass:(AjxEnv.isIE ? "IEcontainer" : "XFormCase"), width:"100%",
					caseKey:ZaMTAXFormView._tab5, 
					items:[	
						{type:_SPACER_, height:"15"},
						
						{type:_GROUP_,numCols:8, colSizes:["10%", "10%","10%", "15%", "15%", "25%", "auto", "10%"],tableCssClass:"search_field_tableCssClass", cssClass:"qsearch_field_bar", items: [
							{type:_OUTPUT_, label:ZaMsg.TBB_LastUpdated, ref:ZaMTA.A_CorruptQ+"/"+ZaMTA.A_refreshTime},
							{type:_OUTPUT_, label:ZaMsg.PQ_AnalyzerStatus, ref:ZaMTA.A_CorruptQ+"/"+ZaMTA.A_Status,choices:ZaMTAXFormView.SCANNER_STATUS_CHOICES},
							{type:_DWT_PROGRESS_BAR_,label:ZaMsg.PQ_ParsingProgress,
								maxValue:null,
								maxValueRef:ZaMTA.A_CorruptQ+"/"+ZaMTA.A_count,
								ref:ZaMTA.A_CorruptQ+"/"+ZaMTA.A_totalComplete,
								visibilityChecks:[[ZaMTAXFormView.isParsingProgressBarVisible,ZaMTA.A_CorruptQ]],
								visibilityChangeEventSources:[ZaMTA.A_CorruptQ+"/"+ZaMTA.A_Status],								
								align:_CENTER_,	
								wholeCssClass:"mtaprogressbar",
								progressCssClass:"progressused"
							},
							{type:_CELLSPACER_},							
							{type:_DWT_BUTTON_,ref:ZaMTA.A_CorruptQ, label:ZaMsg.PQ_AnalyzeQueue,onActivate:ZaMTAXFormView.refreshListener}
						]},							
						{type:_SPACER_, height:"1"},							
						{type:_ZAALLSCREEN_GROUPER_, numCols:5, width: "100%", label:ZaMsg.PQV_Summary, colSizes:["20%","20%","20%","20%","20%"], items:[
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1,width:"100%", label:ZaMsg.PQV_GroupRDomain, items: [
								    {ref:ZaMTA.A_CorruptQ+"/"+ZaMTA.A_rdomain, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu, preserveSelection:true, multiselect:true,bmolsnr:true,onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},		
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1, width: "100%", label:ZaMsg.PQV_GroupOriginIP,items: [
								    {ref:ZaMTA.A_CorruptQ+"/"+ZaMTA.A_origip, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},		
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1, width: "100%", label:ZaMsg.PQV_GroupSenderDomain,items: [
								    {ref:ZaMTA.A_CorruptQ+"/"+ZaMTA.A_sdomain, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},	
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1,width: "100%", label:ZaMsg.PQV_GroupReceiverAddress,items: [
								    {ref:ZaMTA.A_CorruptQ+"/"+ZaMTA.A_raddress, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							},		
							{type:_ZASMALL_CENTER_GROUPER_, numCols:1,width: "100%", label:ZaMsg.PQV_GroupSenderAddress,items: [
								    {ref:ZaMTA.A_CorruptQ+"/"+ZaMTA.A_saddress, type:_DWT_LIST_, height:"150", width:"97%", cssClass: "DLSource", 
							   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,preserveSelection:true, multiselect:true,bmolsnr:true, onSelection:ZaMTAXFormView.filterListSelectionListener, widgetClass:ZaQSummaryListView, headerList:headerList}								
								]
							}						
						]},
						{type:_SPACER_, height:"15"},	
						{type:_ZAALLSCREEN_GROUPER_, numCols:1, width:"100%", label:ZaMsg.PQV_Messages,  items: [
						{type:_GROUP_, numCols:9, colSizes:["16%", "3%", "16%", "3%", "16%", "3%", "16%", "3%", "24%"], tableCssClass:"search_field_tableCssClass", cssClass:"qsearch_field_bar", items: [
							{type:_DWT_BUTTON_,ref:ZaMTA.A_CorruptQ, label:ZaMsg.TBB_RequeueAll,onActivate:"ZaMTAXFormView.actionButtonListener.call(this,ZaMTA.ActionRequeue)",toolTipContent:ZaMsg.PQ_Requeue_tt},{type:_CELLSPACER_},
							{type:_DWT_BUTTON_,ref:ZaMTA.A_CorruptQ, label:ZaMsg.TBB_HoldAll,onActivate:"ZaMTAXFormView.actionButtonListener.call(this,ZaMTA.ActionHold)",toolTipContent:ZaMsg.PQ_Hold_tt},{type:_CELLSPACER_},	
							{type:_DWT_BUTTON_,ref:ZaMTA.A_CorruptQ, label:ZaMsg.PQ_DeleteAll,onActivate:"ZaMTAXFormView.actionButtonListener.call(this,ZaMTA.ActionDelete)",toolTipContent:ZaMsg.PQ_Delete_tt},{type:_CELLSPACER_},
							{type:_DWT_BUTTON_, label:ZaMsg.PQ_showAllMsgs, ref:ZaMTA.A_CorruptQ, onActivate:ZaMTAXFormView.showAllMsgs},
							{type:_CELLSPACER_},
							{type:_GROUP_, numCols:3, items:[
								{type:_DWT_BUTTON_, label:ZaMsg.Previous,toolTipContent:ZaMsg.PrevPage_tt, width:86, id:"backButton", icon:"LeftArrow", disIcon:"LeftArrowDis", 	
									ref:ZaMTA.A_CorruptQ,
									onActivate:"ZaMTAXFormView.backMsgsButtonHndlr.call(this,event)",
									enableDisableChangeEventSources:[ZaMTA.A_CorruptQ + "/" + ZaMTA.A_pageNum],
									enableDisableChecks:[[ZaMTAXFormView.shouldEnableMsgsBackButton,ZaMTA.A_CorruptQ]]									 
							    },								       
								{type:_CELLSPACER_},
								{type:_DWT_BUTTON_, label:ZaMsg.Next,toolTipContent:ZaMsg.NextPage_tt, width:86, id:"fwdButton", icon:"RightArrow", disIcon:"RightArrowDis",	
									ref:ZaMTA.A_CorruptQ,labelLocation:(DwtLabel.IMAGE_RIGHT | DwtLabel.ALIGN_CENTER),
									onActivate:"ZaMTAXFormView.fwdMsgsButtonHndlr.call(this,event)",
									enableDisableChangeEventSources:[ZaMTA.A_CorruptQ + "/" + ZaMTA.A_more],
									enableDisableChecks:[[ZaMTAXFormView.shouldEnableMsgsForwardButton,ZaMTA.A_CorruptQ]]									 
							    }]
							 }					
						]},									
					    {ref:ZaMTA.A_CorruptQ+"/"+ZaMTA.A_messages, onSelection:ZaMTAXFormView.msgListSelectionListener, type:_DWT_LIST_, height:"200", width:"99%", cssClass: "DLSource", 
						   		forceUpdate: false,createPopupMenu:ZaMTAXFormView.createPopupMenu,multiselect:true, widgetClass:ZaQMessagesListView, headerList:msgHeaderList}								
							]
						}		
					]
				}											
			]
		}
	]
};
ZaTabView.XFormModifiers["ZaMTAXFormView"].push(ZaMTAXFormView.myXFormModifier);
}
if (AjxPackage.define("zimbraAdmin.mta.view.ZaMTAActionDialog")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* @class ZaMTAActionDialog
* @contructor ZaMTAActionDialog
* @author Greg Solovyev
* @param parent
* param w (width)
* param h (height)
**/
ZaMTAActionDialog = function(parent,title, instance, w, h) {
	if (arguments.length == 0) return;
	this._standardButtons = [DwtDialog.CANCEL_BUTTON,DwtDialog.OK_BUTTON];
	ZaXDialog.call(this, parent,null, title, w,h);
	this.initForm(ZaMTAActionDialog.myXModel,this.getMyXForm(instance));
	this._helpURL = ZaMTAActionDialog.helpURL;
}

ZaMTAActionDialog.prototype = new ZaXDialog;
ZaMTAActionDialog.prototype.constructor = ZaMTAActionDialog;
ZaMTAActionDialog.helpURL = ZaUtil.HELP_URL;
ZaMTAActionDialog.ACTION = "action";
ZaMTAActionDialog.QNAME = "qname";
ZaMTAActionDialog.MESSAGE = "message"; //Select what you want to action on
ZaMTAActionDialog.ANSWER = "answer";
ZaMTAActionDialog.MSG_IDS = "messageids";
ZaMTAActionDialog.FLTR_ITEMS = "filteritems";
ZaMTAActionDialog.SELECTED_MSGS = "selectedmsgs";
ZaMTAActionDialog.FLTRED_SET = "filteredset";
ZaMTAActionDialog.QUESTION = "question"; //confirmation dialog question
ZaMTAActionDialog.ANSWER_CHOICES = [{value:ZaMTAActionDialog.SELECTED_MSGS, label:ZaMsg.PQ_SELECTED_MSGS}, {value:ZaMTAActionDialog.FLTRED_SET, label:ZaMsg.PQ_FILTERED_SET}];

ZaMTAActionDialog.myXModel = {
	items: [
		{type:_STRING_, ref:ZaMTAActionDialog.QNAME, id:ZaMTAActionDialog.QNAME},
		{type:_STRING_, ref:ZaMTAActionDialog.ACTION, id:ZaMTAActionDialog.ACTION},
		{type:_STRING_, ref:ZaMTAActionDialog.MESSAGE, id:ZaMTAActionDialog.MESSAGE},		
		{type:_STRING_, ref:ZaMTAActionDialog.QUESTION, id:ZaMTAActionDialog.QUESTION},
		{type:_ENUM_, ref:ZaMTAActionDialog.ANSWER, id:ZaMTAActionDialog.ANSWER, choices:ZaMTAActionDialog.ANSWER_CHOICES}, 
		{type:_LIST_, id:ZaMTAActionDialog.MSG_IDS,ref:ZaMTAActionDialog.MSG_IDS,
			listItem: {type:_OBJECT_, 
				items:[
					{id:ZaMTAQMsgItem.A_id, type:_STRING_},
					{id:ZaMTAQSummaryItem.A_text, type:_STRING_}
				]
			}
		},
		{type:_LIST_, id:ZaMTAActionDialog.FLTR_ITEMS,ref:ZaMTAActionDialog.FLTR_ITEMS,
			listItem: {type:_OBJECT_, 
				items:[
					{id:ZaMTAQSummaryItem.A_text, type:_STRING_},					
					{id:ZaMTAQSummaryItem.A_count, type:_NUMBER_}										
				]
			}
		}
		
	]
}

Q_MSGS_QUESTION_RADIO_XFormItem = function() {}
XFormItemFactory.createItemType("_Q_MSGS_QUESTION_RADIO_", "q_msgs_question_radio", Q_MSGS_QUESTION_RADIO_XFormItem, Composite_XFormItem);
Q_MSGS_QUESTION_RADIO_XFormItem.prototype.numCols = 2;
Q_MSGS_QUESTION_RADIO_XFormItem.prototype.nowrap = true;

Q_MSGS_QUESTION_RADIO_XFormItem.prototype.items = [
	{type:_RADIO_,width:"40px",containerCssStyle:"width:40px", forceUpdate:true, 
		ref:ZaMTAActionDialog.ANSWER, labelLocation:_NONE_, label:null, 
		trueValue:ZaMTAActionDialog.SELECTED_MSGS,falseValue:ZaMTAActionDialog.FLTRED_SET,
		updateElement:function (newValue) {
			this.getElement().checked = (newValue == ZaMTAActionDialog.SELECTED_MSGS);
		},
		elementChanged: function(elementValue,instanceValue, event) {
			this.getForm().itemChanged(this, ZaMTAActionDialog.SELECTED_MSGS, event);
		},
		bmolsnr:true
	},
	{type:_OUTPUT_, ref:ZaMTAActionDialog.MSG_IDS,
		getDisplayValue:function (itemVal) {
			var retVal = "", cnt = "0";
			if(itemVal) {
				cnt = itemVal.length;
			}
			//retVal = String(ZaMsg.PQ_SelectedMessages).replace("{0}",cnt);
			retVal = AjxMessageFormat.format (ZaMsg.PQ_SelectedMessages, [cnt])  ;
            return retVal;
		}
	}
];

Q_MSGS_QUESTION_RADIO_XFormItem.prototype.setElementEnabled = function (enable) {
    this.getElement().disabled = (enable != true);
}

Q_MSGS_QUESTION_RADIO_XFormItem.prototype.updateEnabledDisabled = function () {
    var isEnabled = true;

    if (isEnabled) {
        var myEnabledDisabledChecks = this.getInheritedProperty("enableDisableChecks");

        if (myEnabledDisabledChecks && myEnabledDisabledChecks instanceof Array) {
            var cnt = myEnabledDisabledChecks.length;

            for (var i = 0; i < cnt; i++) {
                if (myEnabledDisabledChecks[i] != null) {
                    if (typeof myEnabledDisabledChecks[i] === "function") {
                        isEnabled = myEnabledDisabledChecks[i].call(this);
                        if (!isEnabled) {
                            break;
                        }
                    } else if (myEnabledDisabledChecks[i] instanceof Array) {
                        var func = myEnabledDisabledChecks[i].shift();
                        if (!func || !func.apply) {
                            continue;
                        }
                        isEnabled = func.apply(this, myEnabledDisabledChecks[i]);
                        myEnabledDisabledChecks[i].unshift(func);
                        if (!isEnabled) {
                            break;
                        }
                    }
                }
            }
        } else if (myEnabledDisabledChecks == false) {
            isEnabled = false;
        }
    }

    if (isEnabled) {
        this.enableElement();
    } else {
        this.disableElement();
    }
}

Q_MSGS_QUESTION_RADIO_XFormItem.prototype.updateVisibility = function () {
    var isVisible = true;

    if (isVisible) {
        var myVisibilityChecks = this.getInheritedProperty("visibilityChecks");

        if (myVisibilityChecks && myVisibilityChecks instanceof Array) {
            var cnt = myVisibilityChecks.length;
            for (var i = 0; i < cnt; i++) {
                if (myVisibilityChecks[i] != null) {
                    if (typeof myVisibilityChecks[i] === "function") {
                        isVisible = myVisibilityChecks[i].call(this);
                        if (!isVisible) {
                            break;
                        }
                    } else if (myVisibilityChecks[i] instanceof Array) {
                        var func = myVisibilityChecks[i].shift();
                        isVisible = func.apply(this, myVisibilityChecks[i]);
                        myVisibilityChecks[i].unshift(func);
                        if (!isVisible) {
                            break;
                        }
                    } else if (typeof myVisibilityChecks === "string") {
                        var instance = this.getInstance();
                        isVisible = eval(myVisibilityChecks[i]);
                        if (!isVisible) {
                            break;
                        }
                    }
                }
            }
        }
    }

    if (isVisible) {
        this.show();
    } else {
        this.hide();
    }
}

Q_FLTRD_QUESTION_RADIO_XFormItem = function() {}
XFormItemFactory.createItemType("_Q_FLTRD_QUESTION_RADIO_", "q_fltrd_question_radio", Q_FLTRD_QUESTION_RADIO_XFormItem, Composite_XFormItem);
Q_FLTRD_QUESTION_RADIO_XFormItem.prototype.numCols = 2;
Q_FLTRD_QUESTION_RADIO_XFormItem.prototype.nowrap = true;

Q_FLTRD_QUESTION_RADIO_XFormItem.prototype.items = [
	{type:_RADIO_,width:"40px",containerCssStyle:"width:40px", forceUpdate:true, 
		ref:ZaMTAActionDialog.ANSWER, labelLocation:_NONE_, label:null, 
		trueValue:ZaMTAActionDialog.FLTRED_SET,falseValue:ZaMTAActionDialog.SELECTED_MSGS,
		updateElement:function (newValue) {
			this.getElement().checked = (newValue == ZaMTAActionDialog.FLTRED_SET);
		},
		elementChanged: function(elementValue,instanceValue, event) {
			this.getForm().itemChanged(this, ZaMTAActionDialog.FLTRED_SET, event);
		},
		bmolsnr:true
	},
	{type:_OUTPUT_, ref:ZaMTAActionDialog.FLTR_ITEMS,
		getDisplayValue:function (itemVal) {
			var retVal = "";
			var _temp = [];
			if(itemVal) {
				for(var key in itemVal) {

					if(itemVal[key]) {
						var _temp2 = [];
						var cnt = itemVal[key].length;
						for(var i =0; i < cnt; i++) {
							_temp2.push(itemVal[key][i][ZaMTAQSummaryItem.A_text]);
						}
						_temp.push((key + ": " + _temp2.join(", ")));
					}
				}
			} 
			if(_temp.length) {
				retVal = String(ZaMsg.PQ_FilteredSet).replace("{0}",_temp.join("; "));
			} else {
				retVal = String(ZaMsg.PQ_FilteredSet).replace("{0}",ZaMsg.PQ_AllMessages);
			}
			return retVal;			
		}
	}
];

Q_FLTRD_QUESTION_RADIO_XFormItem.prototype.setElementEnabled = function (enable) {
    this.getElement().disabled = (enable != true);
}

Q_FLTRD_QUESTION_RADIO_XFormItem.prototype.updateEnabledDisabled = function () {
    var isEnabled = true;

    if (isEnabled) {
        var myEnabledDisabledChecks = this.getInheritedProperty("enableDisableChecks");

        if (myEnabledDisabledChecks && myEnabledDisabledChecks instanceof Array) {
            var cnt = myEnabledDisabledChecks.length;

            for (var i = 0; i < cnt; i++) {
                if (myEnabledDisabledChecks[i] != null) {
                    if (typeof myEnabledDisabledChecks[i] === "function") {
                        isEnabled = myEnabledDisabledChecks[i].call(this);
                        if (!isEnabled) {
                            break;
                        }
                    } else if (myEnabledDisabledChecks[i] instanceof Array) {
                        var func = myEnabledDisabledChecks[i].shift();
                        if (!func || !func.apply) {
                            continue;
                        }
                        isEnabled = func.apply(this, myEnabledDisabledChecks[i]);
                        myEnabledDisabledChecks[i].unshift(func);
                        if (!isEnabled) {
                            break;
                        }
                    }
                }
            }
        } else if (myEnabledDisabledChecks == false) {
            isEnabled = false;
        }
    }

    if (isEnabled) {
        this.enableElement();
    } else {
        this.disableElement();
    }
}

Q_FLTRD_QUESTION_RADIO_XFormItem.prototype.updateVisibility = function () {
    var isVisible = true;

    if (isVisible) {
        var myVisibilityChecks = this.getInheritedProperty("visibilityChecks");

        if (myVisibilityChecks && myVisibilityChecks instanceof Array) {
            var cnt = myVisibilityChecks.length;
            for (var i = 0; i < cnt; i++) {
                if (myVisibilityChecks[i] != null) {
                    if (typeof myVisibilityChecks[i] === "function") {
                        isVisible = myVisibilityChecks[i].call(this);
                        if (!isVisible) {
                            break;
                        }
                    } else if (myVisibilityChecks[i] instanceof Array) {
                        var func = myVisibilityChecks[i].shift();
                        isVisible = func.apply(this, myVisibilityChecks[i]);
                        myVisibilityChecks[i].unshift(func);
                        if (!isVisible) {
                            break;
                        }
                    } else if (typeof myVisibilityChecks === "string") {
                        var instance = this.getInstance();
                        isVisible = eval(myVisibilityChecks[i]);
                        if (!isVisible) {
                            break;
                        }
                    }
                }
            }
        }
    }

    if (isVisible) {
        this.show();
    } else {
        this.hide();
    }
}

ZaMTAActionDialog.prototype.getMyXForm = 
function(instance) {
	var xFormObject = {
		numCols:1, align:_CENTER_,cssStyle:"text-align:center",
		items:[
			{ type: _OUTPUT_,
			  ref:ZaMTAActionDialog.MESSAGE,
			  label:null,
			  colSpan:"*",
			  align:_LEFT_,
			  valign:_TOP_
			},
			{ type: _Q_MSGS_QUESTION_RADIO_,
                visibilityChecks:[[ZaItem.hasAnyRight,[ZaMTA.MANAGE_MAIL_QUEUE_RIGHT],instance]],
                enableDisableChecks:[[ZaItem.hasAnyRight,[ZaMTA.MANAGE_MAIL_QUEUE_RIGHT],instance]],
			  align:_LEFT_
			},	
			{ type: _Q_FLTRD_QUESTION_RADIO_,
                visibilityChecks:[[ZaItem.hasAnyRight,[ZaMTA.MANAGE_MAIL_QUEUE_RIGHT],instance]],
                enableDisableChecks:[[ZaItem.hasAnyRight,[ZaMTA.MANAGE_MAIL_QUEUE_RIGHT],instance]],
			  align:_LEFT_
			}
		]		
	}
	return xFormObject;
}
}
if (AjxPackage.define("zimbraAdmin.accounts.view.ZaAccountMemberOfListView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* This class describes a List view of an account's Member Of tab
* @class ZaAccountMemberOfListView
* @contructor ZaAccountMemberOfListView
* @author Charles Cao
**/
ZaAccountMemberOfListView = function(parent, className, posStyle, headerList){
	ZaListView.call(this, parent, className, posStyle, headerList);
}

ZaAccountMemberOfListView.prototype = new ZaListView ;
ZaAccountMemberOfListView.prototype.constructor = ZaAccountMemberOfListView ;
ZaAccountMemberOfListView.prototype.toString = function (){
	return "ZaAccountMemberOfListView";
};

ZaAccountMemberOfListView.A_name = "name" ;
//ZaAccountMemberOfListView.A_isgroup = "isgroup" ;
ZaAccountMemberOfListView.A_via = "via" ;
ZaAccountMemberOfListView.SEARCH_LIMIT = 25 ;

//modify the ZaAccount and ZaDistributionList model
ZaAccountMemberOfListView.modelItems = [
		//{id:ZaAccount.A2_isgroup, type:_ENUM_, choices:ZaModel.BOOLEAN_CHOICES, ref:ZaAccount.A2_memberOf + "/" + ZaAccount.A2_isgroup},
		{id:ZaAccount.A2_directMemberList, type: _LIST_, ref:ZaAccount.A2_memberOf + "/" + ZaAccount.A2_directMemberList},
		{id:ZaAccount.A2_indirectMemberList, type: _LIST_, ref:ZaAccount.A2_memberOf + "/" + ZaAccount.A2_indirectMemberList},
		{id:ZaAccount.A2_nonMemberList, type: _LIST_, ref:ZaAccount.A2_memberOf + "/" + ZaAccount.A2_nonMemberList},
        {id:ZaAccount.A2_nonMemberListSelected, type: _LIST_, ref:ZaAccount.A2_memberOf + "/" + ZaAccount.A2_nonMemberListSelected},
        {id:ZaAccount.A2_directMemberListSelected, type: _LIST_, ref:ZaAccount.A2_memberOf + "/" + ZaAccount.A2_directMemberListSelected},
        {id:ZaAccount.A2_indirectMemberListSelected, type: _LIST_, ref:ZaAccount.A2_memberOf + "/" + ZaAccount.A2_indirectMemberListSelected},
        {id:ZaAccount.A2_directMemberList + "_offset", ref: ZaAccount.A2_directMemberList + "_offset", type:_NUMBER_, defaultValue: 0},
		{id:ZaAccount.A2_nonMemberList + "_offset", ref: ZaAccount.A2_nonMemberList + "_offset", type:_NUMBER_, defaultValue: 0},
		{id:ZaAccount.A2_directMemberList + "_more", ref: ZaAccount.A2_directMemberList + "_more", type:_NUMBER_, defaultValue: 0},
		{id:ZaAccount.A2_nonMemberList + "_more", ref: ZaAccount.A2_nonMemberList + "_more", type:_NUMBER_, defaultValue: 0},
		{id:ZaAccount.A2_showSameDomain, type: _ENUM_, choices:ZaModel.BOOLEAN_CHOICES, 
			ref:ZaAccount.A2_memberOf + "/" + ZaAccount.A2_showSameDomain, defaultValue: "FALSE" },
		{id:"query", type:_STRING_}
]
ZaAccount.myXModel.items = ZaAccount.myXModel.items.concat(ZaAccountMemberOfListView.modelItems);
ZaDistributionList.myXModel.items = ZaDistributionList.myXModel.items.concat(ZaAccountMemberOfListView.modelItems);

ZaAccountMemberOfListView.parseGetAccMembershipResponse =
function(resp) {
	var directML = [];
	var indirectML = [];
	var nonML = [];	
	if (resp.dl && (resp.dl instanceof Array)){
		var dls = resp.dl ;
		var n = resp.dl.length ;
		for (var i=0, d=0, m=0; m < n; m++ ){
			if (dls[m].via && (dls[m].via.length >0)){ //indirect dl
				indirectML[i] = { name: dls[m].name, id: dls[m].id, via: dls[m].via} ;
				i ++ ;
			} else{
				directML[d] = { name: dls[m].name, id: dls[m].id } ;
                var attrs = ZaItem.initAttrsFromJS (dls[m]) ;
                if (attrs["zimbraIsAdminGroup"] != null) {
                	directML[d]["zimbraIsAdminGroup"] = attrs["zimbraIsAdminGroup"] ; 
                }
                d ++ ;
			}
		}
	}
	return {directMemberList: directML,indirectMemberList: indirectML,nonMemberList: nonML};	
}
/**
 * @param app
 * @param val {account value corresponding to by}
 * @param by  {either by id or name} 
 * @return the memberOf object 
 * 				{ 	directMemberList: [ { name: dl1@test.com, id: 394394 } , {..}, ...] ,
 * 					indirectMemberList: [ { name: dl1@test.com, id: 394394, via: dl2@test.com} , {..}, ...] ,
 * 					nonMemberList: [ { name: dl1@test.com, id: 394394 } , {..}, ...]
 * 				}
 * 					
 */
ZaAccountMemberOfListView.getAccountMemberShip = 
function (val, by){
	var directML = [];
	var indirectML = [];
	var nonML = [];
		 
	try {
		soapDoc = AjxSoapDoc.create("GetAccountMembershipRequest", ZaZimbraAdmin.URN, null);
		var elBy = soapDoc.set("account", val);
		elBy.setAttribute("by", by);

		//var getAccMemberShipCommand = new ZmCsfeCommand();
		var params = new Object();
		params.soapDoc = soapDoc;
		params.noAuthToken = true;	
		var reqMgrParams = {
			controller: ZaApp.getInstance().getCurrentController ()
		}
		var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.GetAccountMembershipResponse;
		if (resp.dl && (resp.dl instanceof Array)){
			var dls = resp.dl ;
			var n = resp.dl.length ;
			for (var i=0, d=0, m=0; m < n; m++ ){
				if (dls[m].via && (dls[m].via.length >0)){ //indirect dl
					indirectML[i] = { name: dls[m].name, id: dls[m].id, via: dls[m].via} ;
					i ++ ;
				}else{
					directML[d] = { name: dls[m].name, id: dls[m].id } ;
                    var attrs = ZaItem.initAttrsFromJS (dls[m]) ;
                    if (attrs["zimbraIsAdminGroup"] != null) {
                        directML[d]["zimbraIsAdminGroup"] = attrs["zimbraIsAdminGroup"] ; 
                    }
                    d ++ ;
				}
			}
		}
	}catch (ex){
		ZaApp.getInstance().getCurrentController()._handleException(ex,
                "ZaAccountMemberOfListView.getAccountMemberShip", null, false);
	}
	
	var memberOf = {	directMemberList: directML,
						indirectMemberList: indirectML,
						nonMemberList: nonML
					};
	return memberOf ;
}

ZaAccountMemberOfListView.getDlMemberShip = 
function (val, by){
	var directML = [];
	var indirectML = [];
	var nonML = [];
		 
	try {
		soapDoc = AjxSoapDoc.create("GetDistributionListMembershipRequest", ZaZimbraAdmin.URN, null);
		var elBy = soapDoc.set("dl", val);
		elBy.setAttribute("by", by);

		//var getDlMemberShipCommand = new ZmCsfeCommand();
		var params = new Object();
		params.soapDoc = soapDoc;	
		var reqMgrParams = {
			controller: ZaApp.getInstance().getCurrentController()
		}
		var resp = ZaRequestMgr.invoke(params, reqMgrParams).Body.GetDistributionListMembershipResponse;
		
		if (resp.dl && (resp.dl instanceof Array)){
			var dls = resp.dl ;
			var n = resp.dl.length ;
			for (var i=0, d=0, m=0; m < n; m++ ){
				//if (dls[m].isgroup) {
				if (dls[m].via && (dls[m].via.length >0)){ //indirect dl
					indirectML[i] = { name: dls[m].name, id: dls[m].id, via: dls[m].via} ;
					i ++ ;
				}else{
					directML[d] = { name: dls[m].name, id: dls[m].id } ;
					d ++ ;
				}
			}
		}

	}catch (ex){
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaAccountMemberOfListView.getDlMemberShip", null, false);
	}
	
	var memberOf = {	directMemberList: directML,
						indirectMemberList: indirectML,
						nonMemberList: nonML
					};
	return memberOf ;
}

ZaAccountMemberOfListView.cloneMemberOf = function (src) {
    var memberOf = {};
    for (var p in src[ZaAccount.A2_memberOf]) {
        memberOf [p] = [] ;
        for (var i = 0; i < src[ZaAccount.A2_memberOf][p].length; i ++) {
            var v = src[ZaAccount.A2_memberOf][p][i] ;
            if (v instanceof Object) {
                var newV = {} ;
                for (var p2 in v) {
                    newV [p2] = v[p2] ;
                }
                memberOf[p].push (newV) ;
            } else {
                memberOf [p].push (v) ;
            }
        }
    }

    return memberOf;
}

ZaAccountMemberOfListView.removeAllGroups =
function(event, listId){
	var form = this.getForm();
	var allSelections = ZaAccountMemberOfListView._getAllInList(form, listId);
	ZaAccountMemberOfListView._removeSelectedLists(form, allSelections);
};

ZaAccountMemberOfListView.removeGroups =
function (event, listId){
	var form = this.getForm();
	var selections = ZaAccountMemberOfListView._getSelections(form, listId);
	ZaAccountMemberOfListView._removeSelectedLists(form, selections);	
};

ZaAccountMemberOfListView._removeSelectedLists =
function (form, listArr){
	var instance = form.getInstance();
	var directMemberList = instance[ZaAccount.A2_memberOf][ZaAccount.A2_directMemberList];
	var indirectMemberList = instance[ZaAccount.A2_memberOf][ZaAccount.A2_indirectMemberList];	
	var nonMemberList = instance[ZaAccount.A2_memberOf][ZaAccount.A2_nonMemberList];		

	var j = -1;	
	var dlName = null ;
	var indirectArrFound = null;
	
	for(var i=0; i<listArr.length; i++) {
		dlName = listArr[i][ZaAccountMemberOfListView.A_name] ;
		j = ZaUtil.findValueInObjArrByPropertyName(directMemberList, dlName, ZaAccountMemberOfListView.A_name);
		if (j >= 0 ) {
			//check whether there is derived indirect list, and display warning is yes
			indirectArrFound = ZaAccountMemberOfListView._findIndirect(indirectMemberList, dlName);
			if (indirectArrFound.length > 0){
				
				//ZaAccountMemberOfListView._toBeConfirmedList.push([directDlName, indirectArrFound]);
				var indirectDls = indirectArrFound.join("<br />");			
				msg = AjxMessageFormat.format (ZaMsg.Q_REMOVE_INDIRECT_GROUP, [dlName, indirectDls]);
				
				var confirmMessageDialog =  new ZaMsgDialog(form.shell, null, [DwtDialog.YES_BUTTON, DwtDialog.NO_BUTTON], null, ZaId.VIEW_MEMLIST);					
				
				confirmMessageDialog.setMessage(msg,  DwtMessageDialog.WARNING_STYLE);
				confirmMessageDialog.registerCallback(DwtDialog.YES_BUTTON, ZaAccountMemberOfListView._removeConfirmedList, null ,
														[form, confirmMessageDialog, dlName, indirectArrFound]) ;		
				confirmMessageDialog.registerCallback(DwtDialog.NO_BUTTON, ZaAccountMemberOfListView._closeConfirmDialog, null, [form, confirmMessageDialog]);				
				confirmMessageDialog.popup();
				
				//splice the entry in the callback method.
				continue;
			}			
			directMemberList.splice(j, 1);
            form.parent.setDirty(true);
        }
	}

    form.getModel().setInstanceValue(instance, ZaAccount.A2_directMemberList, directMemberList) ;
    form.getModel().setInstanceValue(instance, ZaAccount.A2_indirectMemberList, indirectMemberList) ;
    form.getModel().setInstanceValue(instance, ZaAccount.A2_nonMemberList, nonMemberList) ;

    if(directMemberList == null || directMemberList.length <= ZaAccountMemberOfListView.SEARCH_LIMIT)
        form.getModel().setInstanceValue(instance, ZaAccount.A2_directMemberList + "_more", 0);
};

ZaAccountMemberOfListView._closeConfirmDialog =
function (form, dialog){
	if (dialog)
		dialog.popdown();
};

ZaAccountMemberOfListView._removeConfirmedList = 
function (form, dialog, directDlName, indirectDlsNameArr){
	if (dialog) {
		var instance = form.getInstance();
		var directMemberList = instance[ZaAccount.A2_memberOf][ZaAccount.A2_directMemberList];
		var indirectMemberList = instance[ZaAccount.A2_memberOf][ZaAccount.A2_indirectMemberList];
        var nonMemberList = instance[ZaAccount.A2_memberOf][ZaAccount.A2_nonMemberList];
        
        var j = -1;
		var m = -1;
		//remove from directMemberList
		j = ZaUtil.findValueInObjArrByPropertyName(directMemberList, directDlName, ZaAccountMemberOfListView.A_name);
		if (j >= 0){		
			directMemberList.splice(j, 1);
		}
		
		for(var i=0; i<indirectDlsNameArr.length; i++) {
			j = ZaUtil.findValueInObjArrByPropertyName(indirectMemberList, indirectDlsNameArr[i], ZaAccountMemberOfListView.A_name);
			if (j>=0) 
				indirectMemberList.splice(j, 1);			
		}		
		form.parent.setDirty(true);		
		ZaAccountMemberOfListView._closeConfirmDialog(form, dialog);
        form.getModel().setInstanceValue(instance, ZaAccount.A2_directMemberList, directMemberList) ;
        form.getModel().setInstanceValue(instance, ZaAccount.A2_indirectMemberList, indirectMemberList) ;
        form.getModel().setInstanceValue(instance, ZaAccount.A2_nonMemberList, nonMemberList) ;
    }
}

ZaAccountMemberOfListView._findIndirect  =
function(arr, value, foundArr){
	var j = -1 ;
	if (!foundArr) {
		foundArr = new Array();
	}
	
	if (arr) { 
	for(var i=0; i<arr.length; i++) {
		if (arr[i][ZaAccountMemberOfListView.A_via] == value) {		
			//j = ZaAccountMemberOfListView._find(arr, value, ZaAccountMemberOfListView.A_via) ;
			foundArr.push (arr[i][ZaAccountMemberOfListView.A_name]) ;
			foundArr = ZaAccountMemberOfListView._findIndirect(arr, arr[i][ZaAccountMemberOfListView.A_name], foundArr);
		}
	}
	}
	return foundArr;			
}

ZaAccountMemberOfListView.addGroups=
function (event, listId){
	var form = this.getForm();
	var selections = ZaAccountMemberOfListView._getSelections(form, listId);
	ZaAccountMemberOfListView._addSelectedLists(form, selections);
};


ZaAccountMemberOfListView.addAllGroups =
function(event, listId){
	var form = this.getForm ();
	var allSelections = ZaAccountMemberOfListView._getAllInList(form, listId);
	ZaAccountMemberOfListView._addSelectedLists(form, allSelections);
    
};

ZaAccountMemberOfListView._addSelectedLists=
function (form, listArr){	
	var instance = form.getInstance();
	var memberOf = instance[ZaAccount.A2_memberOf];

    //don't add the duplicated entry                                                           
    var nonDupArr = [] ;
    for (var i=0; i < listArr.length; i ++) {
        var j = ZaUtil.findValueInObjArrByPropertyName(
                instance[ZaAccount.A2_memberOf][ZaAccount.A2_directMemberList],
                listArr[i][ZaAccountMemberOfListView.A_name], ZaAccountMemberOfListView.A_name);
        
        if (j >= 0) {
            continue ;
        } else {
            nonDupArr.push(listArr [i]) ;
        }
    }

    if(!memberOf[ZaAccount.A2_directMemberList]){
	memberOf[ZaAccount.A2_directMemberList] = [];
    }

    memberOf[ZaAccount.A2_directMemberList] = memberOf[ZaAccount.A2_directMemberList].concat(nonDupArr);

	form.parent.setDirty(true);
    form.getModel().setInstanceValue(instance, ZaAccount.A2_directMemberList, memberOf[ZaAccount.A2_directMemberList]) ;
    form.getModel().setInstanceValue(instance, ZaAccount.A2_nonMemberList, memberOf[ZaAccount.A2_nonMemberList]) ;
    form.getModel().setInstanceValue(instance, ZaAccount.A2_indirectMemberList, memberOf[ZaAccount.A2_indirectMemberList]) ;

    if(memberOf[ZaAccount.A2_directMemberList].length > ZaAccountMemberOfListView.SEARCH_LIMIT)
        form.getModel().setInstanceValue(instance, ZaAccount.A2_directMemberList + "_more", 1);
};


ZaAccountMemberOfListView._getSelections =
function (form, listId){
	var selections = form.getItemsById(listId)[0].getSelection();
	return (selections) ? selections : [] ;
};

ZaAccountMemberOfListView._getAllInList =
function (form, listId){
	//set selections
	var dwtListItem = form.getItemsById(listId)[0].widget ;
	var allListArr =  dwtListItem.getList().getArray() ;
	dwtListItem.setSelectedItems(allListArr); //get all the lists	
	return allListArr ;	
}

/**
 * Enable/Disable Add Button or remove button based on the itemId
 */
ZaAccountMemberOfListView.shouldEnableAddRemoveButton =
function (listId){
	return  (ZaAccountMemberOfListView._getSelections(this.getForm(), listId).length > 0);
};

/**
 * Enable/Diable "Add All" or "Remove All" buttons based on the itemId
 */
ZaAccountMemberOfListView.shouldEnableAllButton =
function (listItemId){
//	var list = this.getForm().getItemsById(listItemId)[0].widget.getList();
    var list = this.getInstanceValue (listItemId) ;
    if (list != null) return ( list.length > 0);
	return false;
};

ZaAccountMemberOfListView.shouldEnableBackButton =
function(listItemId){
	var offset = this.getInstance()[listItemId + "_offset"] ;
	return ((offset && offset > 0) ? true : false) ;	
};

ZaAccountMemberOfListView.shouldEnableForwardButton =
function (listItemId){
	var more = this.getInstance()[listItemId + "_more"] ;
	return ((more && more > 0) ? true : false) ;		
};

ZaAccountMemberOfListView.addMemberList =
function (tmpObj, item) {
     try {
        var addList = [];
        if (tmpObj[ZaAccount.A2_memberOf] && tmpObj[ZaAccount.A2_memberOf][ZaAccount.A2_directMemberList]) {
            var newDirectMember = tmpObj[ZaAccount.A2_memberOf][ZaAccount.A2_directMemberList];

            //Compose the added dl list - any dl from new direct memberOf list, not in the current memberOf list
            if (newDirectMember ) {
                if (!newDirectMember instanceof Array) {
                     newDirectMember = [newDirectMember] ;
                }
                
                for (var i = 0; i < newDirectMember.length; i ++) {
                    var dlName = newDirectMember[i].name ; //dl in the new direct member
                    addList.push (newDirectMember[i]) ;
                }

                if (addList.length > 0) { //you have new membership to be added.
                    ZaAccountMemberOfListView.addNewGroupsBySoap(item, addList);
                }
            }
        }
    }catch (ex){
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaAccountMemberOfListView.addMemberList: add group failed", null, false);	//try not to halt the account modification
	}
}
ZaItem.createMethods["ZaAccount"].push (ZaAccountMemberOfListView.addMemberList) ;
ZaItem.createMethods["ZaDistributionList"].push (ZaAccountMemberOfListView.addMemberList) ;

ZaAccountMemberOfListView.modifyMemberList =
function (mods, tmpObj) {
     try {
        if (!tmpObj || (this[ZaAccount.A2_memberOf] == null) || !tmpObj[ZaAccount.A2_memberOf]) {
            //no need to modify the member list
            return ;
        }
        var addList = [];
        var removeList = [] ;

        var currentDirectMember = this[ZaAccount.A2_memberOf][ZaAccount.A2_directMemberList];
        var newDirectMember = tmpObj[ZaAccount.A2_memberOf][ZaAccount.A2_directMemberList];

        //Compose the added dl list - any dl from new direct memberOf list, not in the current memberOf list
        for (var i = 0; i < newDirectMember.length; i ++) {
            var dlName = newDirectMember[i].name ; //dl in the new direct member
            var j = ZaUtil.findValueInObjArrByPropertyName(currentDirectMember, dlName, ZaAccountMemberOfListView.A_name);
            if (j >= 0){
                //found in the current memberOf List, not need to add
            }else{   //need to be added
                addList.push (newDirectMember[i]) ;
            }
        }

         //Compose the remove dl list - any dl in the current memberOf list not in the new direct member list, 
         for (var m = 0; m < currentDirectMember.length; m ++) {
             var dlName = currentDirectMember[m].name ; //dl in the current direct member
             var j = ZaUtil.findValueInObjArrByPropertyName(newDirectMember, dlName, ZaAccountMemberOfListView.A_name);
             if (j >= 0){
                 //found in the new memberOf List, no need to remove
             }else{   //need to be removed
                 removeList.push (currentDirectMember[m]) ;
             }
         }


        if (addList.length > 0) { //you have new membership to be added.
            ZaAccountMemberOfListView.addNewGroupsBySoap(this, addList);
        }

         if (removeList.length >0){//you have membership to be removed
			ZaAccountMemberOfListView.removeGroupsBySoap(this, removeList);
		}

    }catch (ex){
		ZaApp.getInstance().getCurrentController()._handleException(ex, "ZaAccountMemberOfListView.modifyMemberList: add group failed", null, false);	//try not to halt the account modification
	}
}
ZaItem.modifyMethods["ZaAccount"].push (ZaAccountMemberOfListView.modifyMemberList) ;
ZaItem.modifyMethods["ZaDistributionList"].push(ZaAccountMemberOfListView.modifyMemberList);

/*
 * Add the current account/dl to the new groups/dls 
 * @param addArray new groups/dls
 */
ZaAccountMemberOfListView.addNewGroupsBySoap = 
function (account, addArray) {	
	var len = addArray.length;
	var addMemberSoapDoc, r, addMemberSoapDoc;
	var command = new ZmCsfeCommand();
	for (var i = 0; i < len; ++i) {
		addMemberSoapDoc = AjxSoapDoc.create("AddDistributionListMemberRequest", ZaZimbraAdmin.URN, null);
		addMemberSoapDoc.set("id", addArray[i].id); //group id 
		addMemberSoapDoc.set("dlm", account.name); //account name
		var params = new Object();
		params.soapDoc = addMemberSoapDoc;
		params.noAuthToken = true;	
		r=command.invoke(params).Body.AddDistributionListMemberResponse;
	}
};

/**
 * remove the current account from groups
 * @params removeArray
 */
ZaAccountMemberOfListView.removeGroupsBySoap = 
function (account, removeArray){
	var len = removeArray.length;
	var addMemberSoapDoc, r, removeMemberSoapDoc, type, target;
	var command = new ZmCsfeCommand();
	if (account instanceof ZaDistributionList) {
		type = "dlm";
		target = account.toString();
	} else {
		type = "account";
		target = account.id;
	}
	var type = account instanceof ZaDistributionList ? "dlm" : "account";
	for (var i = 0; i < len; ++i) {
		removeMemberSoapDoc = AjxSoapDoc.create("RemoveDistributionListMemberRequest", ZaZimbraAdmin.URN, null);
		removeMemberSoapDoc.set("id", removeArray[i].id);
		accountEl = removeMemberSoapDoc.set(type, target);
		var params = new Object();
		params.soapDoc = removeMemberSoapDoc;
		params.noAuthToken = true;	
		r=command.invoke(params).Body.RemoveDistributionListMemberResponse;		
	}
}

/**
 * search the directory for all the distribution lists when the search button is clicked.
 */
ZaAccountMemberOfListView.prototype.srchButtonHndlr =
function (){
	var item = this ;
	ZaAccountMemberOfListView.doSearch(item, 0) ;
}

ZaAccountMemberOfListView.backButtonHndlr = 
function (event, listItemId){
    var instance = this.getInstance();
	var currentOffset = this.getInstanceValue( listItemId + "_offset") ;
	if (currentOffset == null) currentOffset = 0;
	var nextOffset = 0;
	if (listItemId == ZaAccount.A2_nonMemberList) {		
		nextOffset = currentOffset - ZaAccountMemberOfListView.SEARCH_LIMIT ;  
		ZaAccountMemberOfListView.doSearch(this, nextOffset) ;
	}else{ //directMemmberList // if (listItemId == ZaAccount.A2_directMemberList)
		nextOffset = currentOffset - ZaAccountMemberOfListView.SEARCH_LIMIT ;
		this.setInstanceValue(nextOffset, listItemId + "_offset" );
		this.setInstanceValue(1, listItemId + "_more");	

        var directMemberOfList = instance [ZaAccount.A2_memberOf][ZaAccount.A2_directMemberList] ;
        var indirectMemberOfList = instance [ZaAccount.A2_memberOf][ZaAccount.A2_indirectMemberList] ;
        this.setInstanceValue( directMemberOfList , ZaAccount.A2_directMemberList);
        this.setInstanceValue( indirectMemberOfList , ZaAccount.A2_indirectMemberList);
    }
};

ZaAccountMemberOfListView.fwdButtonHndlr =
function(event, listItemId){
	var instance = this.getInstance();
	var currentOffset = this.getInstanceValue(listItemId + "_offset") ;	
	if (currentOffset == null) currentOffset = 0;
	var nextOffset = 0;
		
	if (listItemId == ZaAccount.A2_nonMemberList) {		
		nextOffset = currentOffset + ZaAccountMemberOfListView.SEARCH_LIMIT ;  
		ZaAccountMemberOfListView.doSearch(this, nextOffset) ;
	}else{ // if (listItemId == ZaAccount.A2_directMemberList){ //directMemmberList
		nextOffset = currentOffset + ZaAccountMemberOfListView.SEARCH_LIMIT ;
				
		if ((nextOffset + ZaAccountMemberOfListView.SEARCH_LIMIT) 
				< instance[ZaAccount.A2_memberOf][listItemId].length){
			
			this.setInstanceValue(1, listItemId + "_more");
		}else{
			this.setInstanceValue(0,  listItemId + "_more");
		}
		this.setInstanceValue(nextOffset,  listItemId + "_offset");
        var directMemberOfList = instance [ZaAccount.A2_memberOf][ZaAccount.A2_directMemberList] ;
        var indirectMemberOfList = instance [ZaAccount.A2_memberOf][ZaAccount.A2_indirectMemberList] ; 
        this.setInstanceValue( directMemberOfList , ZaAccount.A2_directMemberList);
        this.setInstanceValue( indirectMemberOfList , ZaAccount.A2_indirectMemberList);
	}
};

ZaAccountMemberOfListView.makeQueryStringWithoutNonACLGroup =
function (rawQueryString) {
	if (rawQueryString == null) {
		rawQueryString = "";
	}

	return "(&" + rawQueryString + "(!(zimbraIsACLGroup=FALSE)))";
}

/**
 * search for the dls or groups
 * 
 */                                       
ZaAccountMemberOfListView.doSearch=
function (item, offset){
	var arr = [] ;
	//the preassumption is that both memberOf is the name of the attr of the instance 
	var xform = item.getForm() ; //item refers to a xform item
    
    if (xform){
		var curInstance = xform.getInstance();
		
		if (! offset) offset = 0 ;
		
		var memberOfObj = curInstance[ZaAccount.A2_memberOf] ;
		try {
			var sortby = ZaAccount.A_name ; 
			var searchByDomain = (memberOfObj [ZaAccount.A2_showSameDomain] && (memberOfObj [ZaAccount.A2_showSameDomain] == "TRUE")) ? true : false ;
			var domainName = null;			
			
			if (searchByDomain){
				try {
					var emailChunks = curInstance[ZaAccount.A_name].split("@");
					domainName = emailChunks[1];
				//	var domainName = xform.getItemById(xform.getId()+"_case").__xform.getItemById(xform.getId()+"_dl_name_field")._domainPart;
				} catch (ex) {
					//keep the domainName null
				}
			}
			
			var attrs = [ZaAccount.A_name, ZaItem.A_zimbraId];
			//var attrs = [""];
			var valStr = curInstance[ZaSearch.A_query];
			var queryTypes = [ZaSearch.DLS] ;
			var query = ZaSearch.getSearchByNameQuery(valStr, queryTypes);
			query = ZaAccountMemberOfListView.makeQueryStringWithoutNonACLGroup(query);

			var params = { 	query: query ,
							sortBy: sortby,
							limit : ZaAccountMemberOfListView.SEARCH_LIMIT,
							offset: offset,
							domain: domainName,
							applyCos: 0,
							attrs: attrs,
							types: queryTypes,
							controller: ZaApp.getInstance().getCurrentController()
						 } ;
					
			var result = ZaSearch.searchDirectory(params).Body.SearchDirectoryResponse;
//			curInstance [ZaAccount.A2_nonMemberList + "_more"] = (result.more ? 1 : 0) ;
            item.setInstanceValue ((result.more ? 1 : 0), ZaAccount.A2_nonMemberList + "_more")  ;
			var list = new ZaItemList(ZaDistributionList, null);
			list.loadFromJS(result);
			arr = list.getArray();		
			var nonMemberList = new Array();
			for(var i=0; i<arr.length; i++) {				
				nonMemberList.push({
									name: arr[i].name,
									id: arr[i].id			
									});
			}
				
//			memberOfObj[ZaAccount.A2_nonMemberList] = nonMemberList ;
			item.setInstanceValue(nonMemberList, ZaAccount.A2_nonMemberList)  ;
			//set the instance variable listItemId_offset & listItemId_more 
//			curInstance [ZaAccount.A2_nonMemberList + "_offset"] = offset;
			item.setInstanceValue (offset, ZaAccount.A2_nonMemberList + "_offset" )	;	
			//xform.setInstance(curInstance) ;
//			xform.refresh();
		}catch (ex){
			ZaApp.getInstance().getCurrentController()._handleException(
				ex, "ZaAccountMemberOfListView.prototype.srchButtonHndlr");
		}	
	}
		
	return true;	
}

ZaAccountMemberOfListView.join =
function (memberListArr){
	var result = [];
	for(var i=0; i<memberListArr.length; i++) {
		if (memberListArr[i].name) {
			result.push(memberListArr[i].name);
		}
	}
	return result.join();
}
ZaAccountMemberOfListView.prototype._createItemHtml = function (group, now, isDragProxy){
	var html = new Array(50);
	var	div = document.createElement("div");
	div[DwtListView._STYLE_CLASS] = "Row";
	div[DwtListView._SELECTED_STYLE_CLASS] = div[DwtListView._STYLE_CLASS] + "-" + DwtCssStyle.SELECTED;
	div.className = div[DwtListView._STYLE_CLASS];
	this.associateItemWithElement(group, div, DwtListView.TYPE_LIST_ITEM);
	
	var idx = 0;
	html[idx++] = "<table width='100%' cellspacing='0' cellpadding='0'>";

	html[idx++] = "<tr>";
	if(this._headerList) {
		var cnt = this._headerList.length;
		for(var i = 0; i < cnt; i++) {
			//if ()
			var field = this._headerList[i]._field;
			if(field == ZaAccountMemberOfListView.A_name) {
				html[idx++] = "<td width=" + this._headerList[i]._width + ">";
				html[idx++] = AjxStringUtil.htmlEncode(group[ZaAccountMemberOfListView.A_name]);				
				html[idx++] = "</td>";			
			}  /*
			else if(field == ZaAccountMemberOfListView.A_isgroup) {
				html[idx++] = "<td width=" + this._headerList[i]._width + ">";
				html[idx++] = AjxStringUtil.htmlEncode(group[ZaAccountMemberOfListView.A_isgroup] ? ZaMsg.Yes : ZaMsg.No);
				html[idx++] = "</td>";
			}*/
			else if(field == ZaAccountMemberOfListView.A_via) {
				html[idx++] = "<td width=" + this._headerList[i]._width + ">";
				html[idx++] = AjxStringUtil.htmlEncode(group[ZaAccountMemberOfListView.A_via]);
				html[idx++] = "</td>";
			} 
			 
		}
	} else {
		html[idx++] = "<td width=100%><nobr>";
		html[idx++] = AjxStringUtil.htmlEncode(group[ZaAccountMemberOfListView.A_name]);
		html[idx++] = "</nobr></td>";
	}
	
	html[idx++] = "</tr></table>";
	div.innerHTML = html.join("");
	return div;
};

ZaAccountMemberOfListView.prototype._setNoResultsHtml = function() {
	var buffer = new AjxBuffer();
	var	div = document.createElement("div");
	var msg = "";
	if (this.getCurrentListId().indexOf(ZaAccount.A2_indirectMemberList) >= 0) {
		msg = ZaMsg.Account_Group_NoInDirectMember;
	}else if (this.getCurrentListId().indexOf(ZaAccount.A2_directMemberList) >= 0){
		msg = ZaMsg.Account_Group_NoDirectMember;
	}
	
	buffer.append(
				  "<table width='99%' cellspacing='0' cellpadding='1' style='table-layout:fixed'>",
				  "<tr>",
				  "<td class='NoResults' style='white-space:normal; word-wrap:break-word; word-break:break-all;' >",
				  AjxStringUtil.htmlEncode(msg),
				  "</td>",
				  "</tr>",
				  "</table>"
	);
	
	div.innerHTML = buffer.toString();
	this._addRow(div);
};

ZaAccountMemberOfListView.prototype.setCurrentListId =
function(id){
	this._currentListId = id;
}

ZaAccountMemberOfListView.prototype.getCurrentListId =
function(){
	return this._currentListId;
}

/**
 * Customized Dwt_list for MemberShip list view. It is specialized, so the show group only check box can filter
 * the non group dls. 
 * 
 */
S_Dwt_List_XFormItem = function(){}
XFormItemFactory.createItemType("_S_DWT_LIST_", "s_dwt_list", S_Dwt_List_XFormItem, Dwt_List_XFormItem);


/**
 * This function overrides the Dwt_List_XFormItem.prototype.setItems
 * @param itemArray - the list array to be displayed
 */
S_Dwt_List_XFormItem.prototype.setItems = function (itemArray){
	var list = this.widget.getList();
	var existingArr = []; //the list in the current view
	var tmpArr = new Array();
	if (list) {
		existingArr = list.getArray();
	}
	tmpArr = new Array();
	var instance = this.getForm().getInstance();
	var isGroupOnlyCkbAction = instance[ZaAccount.A2_memberOf] ? instance[ZaAccount.A2_memberOf]["showGroupOnlyAction"] : false;
	var isGroupOnly = instance[ZaAccount.A2_memberOf] ? instance[ZaAccount.A2_memberOf][ZaAccountMemberOfListView.A_isgroup] : false;
	
	//set the current list id in widget which is used to display the proper noResultMessage
	this.widget.setCurrentListId(this.id);
	
	if (itemArray && itemArray.length > 0) {	
		var offset = 0 ;
		var more = 0;
		var len = itemArray.length ;
		if (this.id.indexOf(ZaAccount.A2_indirectMemberList) >= 0){
			offset = instance [ZaAccount.A2_indirectMemberList + "_offset"] ;
			if (offset == null) offset = 0;
			more = instance [ ZaAccount.A2_indirectMemberList + "_more"] ;
			if (more == null) more = 0;
			if (more > 0 && offset + ZaAccountMemberOfListView.SEARCH_LIMIT <= len) {
				len = offset + ZaAccountMemberOfListView.SEARCH_LIMIT ;
			}
		}else if (this.id.indexOf(ZaAccount.A2_directMemberList) >= 0){
			offset = instance [ZaAccount.A2_directMemberList + "_offset"] ;
			if (offset == null) offset = 0;
			more = instance [ ZaAccount.A2_directMemberList + "_more"] ;
			if (more == null) more = 0;
			if (more > 0 && offset + ZaAccountMemberOfListView.SEARCH_LIMIT <= len) {
				len = offset + ZaAccountMemberOfListView.SEARCH_LIMIT ;
			}
		}
		
		
		//filter out the itemArray first based on the checkboxes
		var filteredItemArray = new Array();
		var j = -1;		
		for(var i=offset; i<len; i++) {					
			if (this.id.indexOf(ZaAccount.A2_nonMemberList) >= 0){ 
				//filter out the dl itself in the DL View
				if (instance.id == itemArray[i].id) continue ;
				
				//filter out the directMember in nonMemberList
				j = ZaUtil.findValueInObjArrByPropertyName(
						instance[ZaAccount.A2_memberOf][ZaAccount.A2_directMemberList], 
						itemArray[i][ZaAccountMemberOfListView.A_name], ZaAccountMemberOfListView.A_name);
				if (j >= 0) {
					continue ;
				}
			}
			
			filteredItemArray.push(itemArray[i]);					
		}
				
		//we have to compare the objects, because XForm calls this method every time an item in the list is selected
		if(ZaAccountMemberOfListView.join(filteredItemArray) != ZaAccountMemberOfListView.join (existingArr) ) {
			var preserveSelection = this.getInheritedProperty("preserveSelection");
			var selection = null;
			if(preserveSelection) {
				selection = this.widget.getSelection();
			}		
			var cnt=filteredItemArray.length;
			for(var i = 0; i< cnt; i++) {
				tmpArr.push(filteredItemArray[i]);		
			}
			//add the default sort column
			this.widget.set(AjxVector.fromArray(tmpArr), this.getInheritedProperty("defaultColumnSortable"));
			if(preserveSelection && selection) {
				this.widget.setSelectedItems(selection);
			}
		}		
	}else{
		//display the empty list (no result html)
		this.widget.set(AjxVector.fromArray([])); 
	}
};
   
/**
* This class describes a header for the ZaAccountMemberOfList
* @class ZaAccountMemberOfListView
* @contructor ZaAccountMemberOfListView
* @author Charles Cao
**/
ZaAccountMemberOfsourceHeaderList = function(type, nameDefaultWidth) {
	var sourceHeaderList = new Array();

	sourceHeaderList[0] = new ZaListHeaderItem (
        ZaAccountMemberOfListView.A_name,
        ZaMsg.CLV_Name_col,
        null,
        null,
        null,
        ZaAccountMemberOfListView.A_name,
        false,
        true
    );

    if (type == ZaAccountMemberOfsourceHeaderList.INDIRECT) {
        sourceHeaderList[1] = new ZaListHeaderItem (
            ZaAccountMemberOfListView.A_via,
            ZaMsg.Group_via,
            null,
            null,
            null,
            ZaAccountMemberOfListView.A_via,
            false,
            true
        );
    }
	
	return sourceHeaderList ;
}

ZaAccountMemberOfsourceHeaderList.DIRECT = 1 ; //direct membership group
ZaAccountMemberOfsourceHeaderList.INDIRECT = 2; //indirect/derived membership group
ZaAccountMemberOfsourceHeaderList.NON = 3; //non membership groups.
}
if (AjxPackage.define("zimbraAdmin.task.view.ZaTaskHeaderPanel")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 9/5/11
 * Time: 1:00 AM
 * To change this template use File | Settings | File Templates.
 */

ZaTaskHeaderPanel = function(parent) {
    DwtComposite.call(this, parent, "TaskHeaderPanel", Dwt.ABSOLUTE_STYLE);
    this._expanded = false;
    this.getHtmlElement().innerHTML = this.getImgHtml();
    this.getHtmlElement().onclick = AjxCallback.simpleClosure(ZaTaskHeaderPanel.__handleClick, this);
    var showStatusPane = ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI];
    if (!showStatusPane) {
        for (var i = 0; i < ZaSettings.STATUS_PANE_ITEMS.length; i++) {
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.STATUS_PANE_ITEMS[i]]) {
                showStatusPane = true;
                break;
            }
        }
    }
    if (!showStatusPane){
        this.getHtmlElement().style.visibility = "hidden";
    }
}

ZaTaskHeaderPanel.expandedImg =  "ImgCollapseRight";
ZaTaskHeaderPanel.collapsedImg =  "ImgCollapseLeft";

ZaTaskHeaderPanel.prototype = new DwtComposite;
ZaTaskHeaderPanel.prototype.constructor = ZaTaskHeaderPanel;

ZaTaskHeaderPanel.prototype.getImgHtml = function() {
   if (this._expanded) {
       return ["<div class='", ZaTaskHeaderPanel.expandedImg, "' ></div>"].join("");
   } else {
       return ["<div class='", ZaTaskHeaderPanel.collapsedImg, "' ></div>"].join("");
   }
}

ZaTaskHeaderPanel.__handleClick =
function(ev) {
    this._expanded = !this._expanded;
    this.getHtmlElement().innerHTML = this.getImgHtml();
    ZaZimbraAdmin.getInstance().getTaskController().setExpanded(this._expanded);
}

}
if (AjxPackage.define("zimbraAdmin.task.view.ZaTaskContentView")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only
/**
 * Created by IntelliJ IDEA.
 * User: mingzhang
 * Date: 9/5/11
 * Time: 1:42 AM
 * To change this template use File | Settings | File Templates.
 */

ZaTaskContentView = function(parent, entry) {
    ZaTabView.call(this, {
        parent:parent,
        cssClassName:"ZaTaskTabView DwtTabView",
        iKeyName:"ZaTaskContentView",
        contextId:"TabContent"
    });
    this.initForm(ZaTask.myXModel,this.getMyXForm(entry), null);
    ZaTaskContentView.showStatusPane = ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.CARTE_BLANCHE_UI];
    if (!ZaTaskContentView.showStatusPane) {
        for (var i = 0; i < ZaSettings.STATUS_PANE_ITEMS.length; i++) {
            if (ZaSettings.ENABLED_UI_COMPONENTS[ZaSettings.STATUS_PANE_ITEMS[i]]) {
                ZaTaskContentView.showStatusPane = true;
                break;
            }
        }
    }
}

ZaTaskContentView.prototype = new ZaTabView();
ZaTaskContentView.prototype.constructor = ZaTaskContentView;
ZaTabView.XFormModifiers["ZaTaskContentView"] = new Array();

ZaTaskContentView._dialogCache = new Array();
ZaTaskContentView._getDialog =
function(selectedItem) {
    var dialog
    if (selectedItem.type == 1) {
        var cacheName = selectedItem.cacheName;
        var myConstructor = selectedItem.viewForPopup;
        var entry = selectedItem.data;
        if(selectedItem.cacheDialog && !ZaTaskContentView._dialogCache[cacheName])
                ZaTaskContentView._dialogCache[cacheName] = ZaApp.getInstance().dialogs[cacheName];

        if(!selectedItem.cacheDialog ||!ZaTaskContentView._dialogCache[cacheName]){
              ZaTaskContentView._dialogCache[cacheName] = ZaApp.getInstance().dialogs[cacheName] = new myConstructor(ZaApp.getInstance().getAppCtxt().getShell(), entry);
              if (selectedItem.finishCallback)
                   ZaTaskContentView._dialogCache[cacheName].registerCallback(selectedItem.finishCallback.id, selectedItem.finishCallback.callback);
        }

        dialog = ZaTaskContentView._dialogCache[cacheName];
        dialog.setObject(selectedItem.data);
    } else if  (selectedItem.type == 2) {
        dialog = selectedItem.viewForPopup;
    } else {
        // shouldn't go here
    }
    return dialog;
}

ZaTaskContentView.prototype.setObject =
function(entry) {

    this._containedObject = entry;

    this._localXForm.setInstance(this._containedObject);

    this.formDirtyLsnr = new AjxListener(ZaApp.getInstance().getCurrentController(), ZaXFormViewController.prototype.handleXFormChange);
    this._localXForm.addListener(DwtEvent.XFORMS_FORM_DIRTY_CHANGE, this.formDirtyLsnr);
    this._localXForm.addListener(DwtEvent.XFORMS_VALUE_ERROR, this.formDirtyLsnr);
}

ZaTaskContentView.taskItemSelectionListener =
function (ev) {
    var arr = this.widget.getSelection();
    if(arr && arr.length) {
        var selectedItem = arr[0];
        var dialog = ZaTaskContentView._getDialog(selectedItem);
        dialog.popup();
        var position = selectedItem.position;
        dialog.setBounds(position.x, position.y, position.width, position.height);
        if (dialog.handleXFormChange) {
            dialog.handleXFormChange();
        }
    }
}

ZaTaskContentView.myXFormModifier = function(xFormObject, entry) {
    var cases = [];

    var case1 = {
        type: _ZATABCASE_,
        numCols: 1,
        caseKey: 1,
        paddingStyle: "",
        width: "100%",
        getCustomWidth: ZaTaskContentView.prototype.getCustomWidth,
        getCustomHeight: ZaTaskContentView.prototype.getCustomHeight,
        items:[
            {
                type: _AJX_IMAGE_,
                src: "WorkInProgress",
                label: null,
                containerCssStyle: "text-align:center;",
                visibilityChecks: [
                    [
                        XForm.checkInstanceValue,
                        ZaTask.A2_isExpanded,
                        false
                    ]
                ],
                visibilityChangeEventSources: [
                    ZaTask.A2_isExpanded
                ]
            },
            {
                ref: ZaTask.A_workingInProcess,
                type: _OUTPUT_,
                bmolsnr: true,
                value: 0,
                visibilityChecks: [
                    [
                        XForm.checkInstanceValue,
                        ZaTask.A2_isExpanded,
                        false
                    ]
                ],
                visibilityChangeEventSources: [
                    ZaTask.A2_isExpanded
                ],
                containerCssStyle: "padding-bottom:10px;text-align:center;",
                getDisplayValue: function(newValue) {
                    return newValue.length;
                }
            },
            {
                type: _GROUP_,
                numCols: 1,
                visibilityChecks: [
                    [
                        XForm.checkInstanceValue,
                        ZaTask.A2_isExpanded,
                        true
                    ]
                ],
                visibilityChangeEventSources: [
                    ZaTask.A2_isExpanded
                ],
                cssClass: "ZaTaskListGroup",
                items: [
                    {
                        type: _COMPOSITE_,
                        numCols: 3,
                        tableCssStyle: "width:100%",
                        visibilityChecks: [
                            [
                                XForm.checkInstanceValue,
                                ZaTask.A2_isWIPExpanded,
                                true
                            ]
                        ],
                        visibilityChangeEventSources: [
                            ZaTask.A2_isWIPExpanded
                        ],
                        colSizes: [
                            "18px",
                            "16px",
                            "100%"
                        ],
                        items: [
                            {
                                type: _DWT_IMAGE_,
                                value: "ImgNodeExpanded",
                                cssStyle: "position:static;",
                                onClick: function() {
                                    this.setInstanceValue(false, ZaTask.A2_isWIPExpanded);
                                }
                            },
                            {
                                type: _AJX_IMAGE_,
                                src: "WorkInProgress",
                                label: null
                            },
                            {
                                type: _OUTPUT_,
                                value: ZaMsg.MSG_WorkingTask
                            }
                        ],
                        cssClass:"ZaTaskTitleNameHeader"
                    },
                    {
                        type: _COMPOSITE_,
                        numCols: 3,
                        tableCssStyle: "width:100%",
                        visibilityChecks: [
                            [
                                XForm.checkInstanceValue,
                                ZaTask.A2_isWIPExpanded,
                                false
                            ]
                        ],
                        visibilityChangeEventSources: [
                            ZaTask.A2_isWIPExpanded
                        ],
                        colSizes: [
                            "18px",
                            "16px",
                            "100%"
                        ],
                        items: [
                            {
                                type: _DWT_IMAGE_,
                                value: "ImgNodeCollapsed",
                                cssStyle: "position:static;",
                                onClick: function() {
                                    this.setInstanceValue(true, ZaTask.A2_isWIPExpanded);
                                }
                            },
                            {
                                type: _AJX_IMAGE_,
                                src: "WorkInProgress",
                                label: null
                            },
                            {
                                type: _OUTPUT_,
                                value: ZaMsg.MSG_WorkingTask
                            }
                        ],
                        cssClass:"ZaTaskTitleNameHeader"
                    },
                    {
                        ref: ZaTask.A_workingInProcess,
                        type: _DWT_LIST_,
                        cssClass: "ZaTaskListContent",
                        forceUpdate: true,
                        preserveSelection: false,
                        multiselect: false,
                        visibilityChecks: [
                            [
                                XForm.checkInstanceValue,
                                ZaTask.A2_isWIPExpanded,
                                true
                            ]
                        ],
                        visibilityChangeEventSources: [
                            ZaTask.A2_isWIPExpanded
                        ],
                        onSelection: ZaTaskContentView.taskItemSelectionListener
                    }
                ]
            },
            {
                type: _AJX_IMAGE_,
                src: "TaskViewWaiting",
                label: null,
                containerCssStyle: "text-align:center;",
                visibilityChecks: [
                    [
                        XForm.checkInstanceValue,
                        ZaTask.A2_isExpanded,
                        false
                    ]
                ],
                visibilityChangeEventSources: [
                    ZaTask.A2_isExpanded
                ]
            },
            {
                ref: ZaTask.A_runningTask,
                type: _OUTPUT_,
                bmolsnr: true,
                value: 0,
                visibilityChecks: [
                    [
                        XForm.checkInstanceValue,
                        ZaTask.A2_isExpanded,
                        false
                    ]
                ],
                visibilityChangeEventSources: [
                    ZaTask.A2_isExpanded
                ],
                containerCssStyle: "padding-bottom:10px;text-align:center;",
                getDisplayValue: function(newValue) {
                    return newValue.length;
                }
            },
            {
                type: _GROUP_,
                numCols: 1,
                visibilityChecks: [
                    [
                        XForm.checkInstanceValue,
                        ZaTask.A2_isExpanded,
                        true
                    ]
                ],
                visibilityChangeEventSources: [
                    ZaTask.A2_isExpanded
                ],
                cssClass: "ZaTaskListGroup",
                items: [
                    {
                        type:_COMPOSITE_,
                        numCols: 3,
                        tableCssStyle: "width:100%",
                        visibilityChecks: [
                            [
                                XForm.checkInstanceValue,
                                ZaTask.A2_isRTExpanded,
                                true
                            ]
                        ],
                        visibilityChangeEventSources: [
                            ZaTask.A2_isRTExpanded
                        ],
                        colSizes: [
                            "18px",
                            "16px",
                            "100%"
                        ],
                        items: [
                            {
                                type: _DWT_IMAGE_,
                                value: "ImgNodeExpanded",
                                cssStyle: "position:static;",
                                onClick: function() {
                                    this.setInstanceValue(false, ZaTask.A2_isRTExpanded);
                                }
                            },
                            {
                                type: _AJX_IMAGE_,
                                src: "TaskViewWaiting",
                                label: null
                            },
                            {
                                type: _OUTPUT_,
                                value: ZaMsg.MSG_RunningTask
                            }
                        ],
                        cssClass: "ZaTaskTitleNameHeader"
                    },
                    {
                        type: _COMPOSITE_,
                        numCols: 3,
                        tableCssStyle: "width:100%",
                        visibilityChecks: [
                            [
                                XForm.checkInstanceValue,
                                ZaTask.A2_isRTExpanded,
                                false
                            ]
                        ],
                        visibilityChangeEventSources: [
                            ZaTask.A2_isRTExpanded
                        ],
                        colSizes: [
                            "18px",
                            "16px",
                            "100%"
                        ],
                        items: [
                            {
                                type: _DWT_IMAGE_,
                                value: "ImgNodeCollapsed",
                                cssStyle: "position:static;",
                                onClick: function() {
                                    this.setInstanceValue(true, ZaTask.A2_isRTExpanded);
                                }
                            },
                            {
                                type: _AJX_IMAGE_,
                                src: "TaskViewWaiting",
                                label: null
                            },
                            {
                                type: _OUTPUT_,
                                value: ZaMsg.MSG_RunningTask
                            }
                        ],
                        cssClass: "ZaTaskTitleNameHeader"
                    },
                    {
                        ref: ZaTask.A_runningTask,
                        type: _DWT_LIST_,
                        cssClass: "ZaTaskListContent",
                        forceUpdate: true,
                        preserveSelection: false,
                        multiselect: false,
                        visibilityChecks: [
                            [
                                XForm.checkInstanceValue,
                                ZaTask.A2_isRTExpanded,
                                true
                            ]
                        ],
                        visibilityChangeEventSources: [
                            ZaTask.A2_isRTExpanded
                        ],
                        onSelection: ZaTaskContentView.taskItemSelectionListener
                    }
                ]
            },
            {
                type: _AJX_IMAGE_,
                src: "Status",
                label: null,
                containerCssStyle: "text-align:center;",
                visibilityChecks: [
                    [
                        XForm.checkInstanceValue,
                        ZaTask.A2_isExpanded,
                        false
                    ]
                ],
                visibilityChangeEventSources: [
                    ZaTask.A2_isExpanded
                ]
            },
            {
                ref: ZaTask.A2_notificationCount,
                type: _OUTPUT_,
                bmolsnr: true,
                value: 0,
                visibilityChecks: [
                    [
                        XForm.checkInstanceValue,
                        ZaTask.A2_isExpanded,
                        false
                    ]
                ],
                visibilityChangeEventSources: [
                    ZaTask.A2_isExpanded
                ],
                containerCssStyle: "padding-bottom:10px;text-align:center;",
                getDisplayValue: function(newValue) {
                    if (!newValue || newValue < 0) {
                        return 0;
                    }
                    return newValue;
                }
            },
            {
                type: _GROUP_,
                numCols: 1,
                visibilityChecks: [
                    [
                        XForm.checkInstanceValue,
                        ZaTask.A2_isExpanded,
                        true
                    ]
                ],
                visibilityChangeEventSources: [
                    ZaTask.A2_isExpanded
                ],
                cssClass: "ZaTaskListGroup",
                items: [
                    {
                        type: _COMPOSITE_,
                        numCols:3,
                        tableCssStyle: "width:100%",
                        visibilityChecks: [
                            [
                                XForm.checkInstanceValue,
                                ZaTask.A2_isServerExpaned,
                                true
                            ]
                        ],
                        visibilityChangeEventSources: [
                            ZaTask.A2_isServerExpaned
                        ],
                        colSizes: [
                            "18px",
                            "16px",
                            "100%"
                        ],
                        items: [
                            {
                                type: _DWT_IMAGE_,
                                value: "ImgNodeExpanded",
                                cssStyle: "position:static;",
                                onClick: function() {
                                    this.setInstanceValue(false, ZaTask.A2_isServerExpaned);
                                }
                            },
                            {
                                type: _AJX_IMAGE_,
                                src: "Status",
                                label: null
                            },
                            {
                                type: _OUTPUT_,
                                value: ZaMsg.MSG_ServerStatus
                            }
                        ],
                        cssClass: "ZaTaskTitleNameHeader"
                    },
                    {
                        type: _COMPOSITE_,
                        numCols: 3,
                        tableCssStyle: "width:100%",
                        visibilityChecks: [
                            [
                                XForm.checkInstanceValue,
                                ZaTask.A2_isServerExpaned,
                                false
                            ]
                        ],
                        visibilityChangeEventSources: [
                            ZaTask.A2_isServerExpaned
                        ],
                        colSizes: [
                            "18px",
                            "16px",
                            "100%"
                        ],
                        items: [
                            {
                                type: _DWT_IMAGE_,
                                value: "ImgNodeCollapsed",
                                cssStyle: "position:static;",
                                onClick: function() {
                                    this.setInstanceValue(true, ZaTask.A2_isServerExpaned);
                                }
                            },
                            {
                                type: _AJX_IMAGE_,
                                src: "Status",
                                label: null
                            },
                            {
                                type: _OUTPUT_,
                                value: ZaMsg.MSG_ServerStatus
                            }
                        ],
                        cssClass: "ZaTaskTitleNameHeader"
                    },
                    {
                        ref: ZaTask.A_serverStatus,
                        type: _GROUP_,
                        numCols: 1,
                        width: "100%",
                        cssClass: "ZaTaskListContent",
                        forceUpdate: true,
                        preserveSelection: false,
                        multiselect: false,
                        visibilityChecks: [
                            [
                                XForm.checkInstanceValue,
                                ZaTask.A2_isServerExpaned,
                                true
                            ]
                        ],
                        visibilityChangeEventSources: [
                            ZaTask.A2_isServerExpaned
                        ],
                        onSelection: ZaTaskContentView.taskItemSelectionListener,
                        items: [
                            {
                                type: _GROUP_,
                                tableCssClass: "NoResults",
                                width: "100%",
                                visibilityChecks: [
                                    [
                                        ZaTaskContentView.prototype.canShowServerStatusIsHealthy
                                    ]
                                ],
                                visibilityChangeEventSources: [
                                    ZaTask.A2_isRTExpanded,
                                    ZaTask.A2_notificationCount
                                ],
                                items: [
                                    {
                                        type: _OUTPUT_,
                                        value: "<br><br>" + ZaMsg.ServerStatusHealthy,
                                        width: "100%"
                                        //use  <br><br> to align the style of 'Running Tasks' and 'Work in Progress'
                                        //when they are 'No results found'
                                    }
                                ]
                            }
                            //will be appended by others as notification
                        ]
                    }
                ]
            },
            {
                type: _SPACER_,
                height: "10px"
            }
        ]
    };

    cases.push(case1);

    xFormObject.tableCssStyle = "width:100%;";
    xFormObject.items = [
        {
            type: _SWITCH_,
            align: _LEFT_,
            valign: _TOP_,
            items: cases
        }
    ];
}

ZaTaskContentView.prototype.canShowServerStatusIsHealthy = function () {
    var isRTExpanded = this.getInstanceValue( ZaTask.A2_isRTExpanded ) || false;
    var notificationCount = this.getInstanceValue(ZaTask.A2_notificationCount) || 0;
    return  isRTExpanded && (notificationCount == 0)
}

ZaTaskContentView.prototype.getCustomWidth = function () {
    return ZaTaskContentView.showStatusPane ? "100%" : "0px";
}

ZaTaskContentView.prototype.getCustomHeight = function () {
    return ZaTaskContentView.showStatusPane ? "100%" : "0px";
}

ZaTaskContentView.getImgText = function(imageName, label) {
    var     html = [
                "<div class='", "Img", imageName, "' style='text-align:center;'>",label,"</div>"
            ].join("");
    return html;
}
ZaTabView.XFormModifiers["ZaTaskContentView"].push(ZaTaskContentView.myXFormModifier);


ZaTaskContentView.getNotificationBoard = function (taskContentViewXFormObj) {
    return taskContentViewXFormObj.items[0].items[0].items[8].items[2];
}
}

if (AjxPackage.define("zimbraAdmin.common.EmailAddr_FormItem")) {
// SPDX-FileCopyrightText: 2022 Synacor, Inc.
// SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
//
// SPDX-License-Identifier: AGPL-3.0-only

/**
* XFormItem class: "dynselect_domain_part"
* A select box with asynchronous autocomplete capability
* @class DynSelectDomainPart_XFormItem
* @constructor DynSelectDomainPart_XFormItem
* @author Greg Solovyev
**/
DynSelectDomainPart_XFormItem = function() {}
XFormItemFactory.createItemType("_DYNSELECT_DOMAIN_PART_", "dynselect_domain_part", DynSelectDomainPart_XFormItem, DynSelect_XFormItem);
DynSelectDomainPart_XFormItem.prototype.inputSize = 35 ;
DynSelectDomainPart_XFormItem.prototype.setMenuWidth = false;
DynSelectDomainPart_XFormItem.prototype.handleKeyPressDelay = function (event,value) {
	if(!this.dataFetcherObject && this.dataFetcherClass !=null && this.dataFetcherMethod !=null) {
		this.dataFetcherObject = new this.dataFetcherClass(this.getForm().getController());
	}
	if(!this.dataFetcherObject)
		return;
		
	var callback = new AjxCallback(this, this.changeDomainChoicesCallback);
	this.dataFetcherMethod.call(this.dataFetcherObject, {value:value, event:event, callback:callback, applyConfig:1});
	var val = "";
	if(this.getParentItem()._namePart) {
		val = this.getParentItem()._namePart;
	}
	val +="@";
	val +=value;
	this.getForm().itemChanged(this, val, event);	
}

// But 51430 should be fixed in server side to support domain alias. 
// Now, temporary fix it by disable the domain alias in drop-down menu.
DynSelectDomainPart_XFormItem.prototype.changeDomainChoicesCallback =
function(data, more, total) {
	// filter the domain alias
	var withoutAlias = [];
	AjxEmailAddress.customEmailValidateEegex = {};
	for(var i = 0; data && i < data.length; i++) {
		//var targetObj = ZaDomain.getTargetDomainByName(data[i]) ;
		if (data[i] && data[i].attrs [ZaDomain.A_domainType] == ZaDomain.domainTypes.local){
			withoutAlias.push(data[i]);
			AjxEmailAddress.customEmailValidateEegex[data[i].name] = data[i].attrs[ZaDomain.A_zimbraMailAddressValidationRegex];
		}
	}
	// call the default callback
	this.changeChoicesCallback(withoutAlias, more, total);
}


/**
* XFormItem class: "emailaddr (composite item)
* this item is used in the Admin UI to display email address fields like alias and account name
* @class EmailAddr_XFormItem
* @constructor EmailAddr_XFormItem
* @author Greg Solovyev
**/
EmailAddr_XFormItem = function() {}
XFormItemFactory.createItemType("_EMAILADDR_", "emailaddr", EmailAddr_XFormItem, Composite_XFormItem);
EmailAddr_XFormItem.domainChoices = new XFormChoices([], XFormChoices.OBJECT_LIST, "name", "name");
EmailAddr_XFormItem.choicesDirty = false ;
EmailAddr_XFormItem.prototype.numCols = 4;
EmailAddr_XFormItem.prototype.nowrap = true;
EmailAddr_XFormItem.prototype.visibilityChecks = [ZaItem.hasReadPermission];
EmailAddr_XFormItem.prototype.enableDisableChecks = [ZaItem.hasWritePermission];
EmailAddr_XFormItem.prototype.initializeItems = 
function () {
	this._inputWidth = this.getInheritedProperty("inputWidth");
	if (this._inputWidth == null) this._inputWidth = 200;
	this.items[0].width = this._inputWidth;

	this.items[0].containerCssStyle = this.getInheritedProperty("nameContainerCss"); 

	this.items[1].containerCssStyle = this.getInheritedProperty("midContainerCss");
	
	this.items[2].inputWidth =  this.getInheritedProperty("domainPartWidth");

	this.items[2].width  =  this.getInheritedProperty("domainContainerWidth");

	Composite_XFormItem.prototype.initializeItems.call(this);
	try {
		
		this._domainPart = ZaSettings.myDomainName;
		
	} catch (ex) {
		this._domainPart = null;
	}
	if(this._domainPart == null) {
		if(EmailAddr_XFormItem.domainChoices) {
			if(EmailAddr_XFormItem.domainChoices._choiceObject.length >0) {
				if(EmailAddr_XFormItem.domainChoices._choiceObject[0]) {
					this._domainPart = EmailAddr_XFormItem.domainChoices._choiceObject[0].name;
				}	
			}
		}
	}
    this._oldDomainPart = this._domainPart ; //initialization time, old domain and current domain are the same ;		
	this._inputDomainPart = "";
};

EmailAddr_XFormItem.prototype.items = [
	{type:_TEXTFIELD_,forceUpdate:true, ref:".", labelLocation:_NONE_,cssClass:"admin_xform_name_input",
	 visibilityChecks:[],
	 enableDisableChecks:[],
	 errorLocation:_PARENT_,
		getDisplayValue:function (itemVal) {
			var val = itemVal;
			if(val) {
				var emailChunks = val.split("@");

				if(emailChunks.length > 1 ) {
					val = emailChunks[0];
				} 
			} 

			if(val === null || val ===undefined)
				val = "";
				
			this.getParentItem()._namePart = val;
			return val;	
		},
		elementChanged:function(namePart, instanceValue, event) {
			if(namePart && this.getParentItem()._inputDomainPart) {
				this.getParentItem()._oldDomainPart = this.getParentItem()._domainPart;
				this.getParentItem()._domainPart = this.getParentItem()._inputDomainPart;
				this.getParentItem()._inputDomainPart = "";
			}
            this.getParentItem()._namePart = namePart;
            var val = namePart + "@";
			if(this.getParentItem()._domainPart)
				val += this.getParentItem()._domainPart;
            this.getForm().itemChanged(this.getParentItem(), val, event);
			//if(window.console && window.console.log) console.log("EmailAddr_XFormItem setting value to "+val);
		}
	},
	{type:_OUTPUT_, value:"@"},
	{type:_DYNSELECT_DOMAIN_PART_, ref:".", labelLocation:_NONE_,  
	 	choices:EmailAddr_XFormItem.domainChoices,
	 	editable:true,
        bmolsnr:true,
        toolTipContent:ZaMsg.tt_StartTypingDomainName,
         //visibilityChecks:[EmailAddr_XFormItem.isNonSaticDomain],
	 	visibilityChecks:[],
	 	enableDisableChecks:[],
	 	dataFetcherMethod:ZaSearch.prototype.dynSelectSearchDomains,
		dataFetcherClass:ZaSearch,
	 	errorLocation:_PARENT_,
		getDisplayValue:function (itemVal){
			var val = null;
			if(itemVal) {
				var emailChunks = itemVal.split("@");
			
				if(emailChunks.length > 1 ) {
					val = emailChunks[1];
				} else
					val = itemVal;
			}
			if(!val) {
				if(!this.getParentItem()._domainPart) {
					if(this.getChoices() && this.getChoices()._choiceObject && this.getChoices()._choiceObject[0]) {
						val = this.getChoices()._choiceObject[0].name;
						this.getParentItem()._domainPart = val;
					}
				} else {
					//val = this.getParentItem()._domainPart;
				}
			} else {
				this.getParentItem()._domainPart = val;
			}
			
			return val;
		},
		elementChanged:function(domainPart,instanceValue, event) {
			var val;
			var oldDomainPart = this.getParentItem()._domainPart;
			if(this.getParentItem()._namePart) {
				val = this.getParentItem()._namePart + "@" + domainPart;
			} else {
				val = "@" + domainPart;
			}
			if(domainPart) {
				var el = this.getDisplayElement();
				if (el) {
					if(this.getInheritedProperty("editable")) {
						el.value = domainPart;
					} else {
						el.innerHTML = domainPart;
					}
				}	
			}
			if(this.getParentItem()._namePart) {
			this.getParentItem()._domainPart = domainPart;
			this.getParentItem()._oldDomainPart = oldDomainPart ;
			}else this.getParentItem()._inputDomainPart = domainPart;
            //bug: 14250, change the instance value here also even if the whole email address is invalid
			//this.getParentItem().setInstanceValue (val) ;
			// set the email validation regex according domain
			var regList = AjxEmailAddress.customEmailValidateEegex[domainPart];
			if(regList && regList instanceof Array)
				AjxEmailAddress.customInvalidEmailPats = regList;
			else if(regList) 
				AjxEmailAddress.customInvalidEmailPats = [regList];
			else AjxEmailAddress.customInvalidEmailPats = [];
			this.getForm().itemChanged(this.getParentItem(), val, event);
		}	
	}
];

EmailAddr_XFormItem.prototype.resetEditedState = function () {
	this.items[2].edited = false;
}
//reset the domainchoices for the domain list menu, bug 12495
EmailAddr_XFormItem.resetDomainLists =
function (force) {
	if (force || EmailAddr_XFormItem.choicesDirty) {
		DBG.println(AjxDebug.DBG3, "Reset the domain lists ....") ;
		ZaApp.getInstance().searchDomains();
		 EmailAddr_XFormItem.choicesDirty = false ;
	}
}

EmailAddr_XFormItem.prototype.getOldDomainPart = function () {
    return this._oldDomainPart ;
}

EmailAddr_XFormItem.prototype.getCurrentDomainPart = function () {
    return this._domainPart ;
}

/*bug 49662. reset the email-address error status when the _namePart from non-null to null
 *when add alias name. We don't think this is a  error*/
EmailAddr_XFormItem.prototype.clearNameNullError = function () {
    if(this._namePart == ""){
	if(this.hasError()){
	    this.clearError();
            this.setInstanceValue("");
            var form = this.getForm();
            var event = new DwtXFormsEvent(form, this, "");
            form.notifyListeners(DwtEvent.XFORMS_VALUE_CHANGED, event);
	    form.setIsDirty(true, this);
	    return true;
	}
    }
    
    return false;
}
}
}
if (AjxPackage.define("admin.Widgets")) {
AjxTemplate.register("admin.Widgets#ZaAppTab", 
function(name, params, data, buffer) {
	var _hasBuffer = Boolean(buffer);
	data = (typeof data == "string" ? { id: data } : data) || {};
	buffer = buffer || [];
	var _i = buffer.length;

	buffer[_i++] = "<table role=\"presentation\" class='ZWidgetTable ZAppTabTable ZAppTabBorder' style='table-layout:auto;'><tr id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_row'><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_left_icon'  \tclass='ZLeftIcon ZWidgetIcon'></td><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_title'\t\tclass='ZWidgetTitle'></td><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_right_icon' \tclass='ZRightIcon ZWidgetIcon'></td></tr></table>";

	return _hasBuffer ? buffer.length : buffer.join("");
},
{
	"id": "admin.Widgets#ZaAppTab",
	"class": "ZAppTab"
}, false);
AjxTemplate.register("admin.Widgets", AjxTemplate.getTemplate("admin.Widgets#ZaAppTab"), AjxTemplate.getParams("admin.Widgets#ZaAppTab"));

AjxTemplate.register("admin.Widgets#ZaToolBarLabel", 
function(name, params, data, buffer) {
	var _hasBuffer = Boolean(buffer);
	data = (typeof data == "string" ? { id: data } : data) || {};
	buffer = buffer || [];
	var _i = buffer.length;

	buffer[_i++] = "<table role=\"presentation\" id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_label'\t\tclass='ZWidgetTable ZLabelBorder'><tr><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_left_icon'\tclass='ZLeftIcon ZWidgetIcon'></td><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_title'\t\tclass='ZWidgetTitle ZaNowrapTitle'></td><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_right_icon'\tclass='ZRightIcon ZWidgetIcon'></td></tr></table>";

	return _hasBuffer ? buffer.length : buffer.join("");
},
{
	"id": "admin.Widgets#ZaToolBarLabel",
	"class": "ZaToolBarLabel ZWidget"
}, false);

AjxTemplate.register("admin.Widgets#ZaToast", 
function(name, params, data, buffer) {
	var _hasBuffer = Boolean(buffer);
	data = (typeof data == "string" ? { id: data } : data) || {};
	buffer = buffer || [];
	var _i = buffer.length;

	buffer[_i++] = "<div class='ZaToastBG'><div class='ZaToastContent'><div id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_icon' class='ZaToastIcon'></div><div id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_text' class='ZaToastText'></div></div></div>";

	return _hasBuffer ? buffer.length : buffer.join("");
},
{
	"id": "admin.Widgets#ZaToast",
	"class": "ZaToastInfo"
}, false);

AjxTemplate.register("admin.Widgets#ZaCurrentAppBar", 
function(name, params, data, buffer) {
	var _hasBuffer = Boolean(buffer);
	data = (typeof data == "string" ? { id: data } : data) || {};
	buffer = buffer || [];
	var _i = buffer.length;

	buffer[_i++] = "<table role=\"presentation\" style='table-layout:fixed;width:100%; height:100%'><tr><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_title'\tclass='ZWidgetTitle'\tstyle='width:100%'></td><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_action'\t\t\t\t\t\t\tstyle='width:0px'><div><table role=\"presentation\" class='ZToolbarTable'><tr id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_actionitems'></tr></table></div></td><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_settingimg'\t\t\t\t\t\tstyle='width:20px'></td><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_dropdown'\tclass='ZDropDown'\t\tstyle='width:20px'></td></tr></table>";

	return _hasBuffer ? buffer.length : buffer.join("");
},
{
	"id": "admin.Widgets#ZaCurrentAppBar",
	"class": "ZaCurrentAppBar"
}, false);

AjxTemplate.register("admin.Widgets#ZaTreeHeaderButton", 
function(name, params, data, buffer) {
	var _hasBuffer = Boolean(buffer);
	data = (typeof data == "string" ? { id: data } : data) || {};
	buffer = buffer || [];
	var _i = buffer.length;

	buffer[_i++] = "<table role=\"presentation\" id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_table' class='DwtLinkButtonTable ";
	buffer[_i++] = data["bgImg"];
	buffer[_i++] = "' style='table-layout:fixed;width:100%'><tr><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_doubleArrow' style='width:20px'><div></div></td><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_left_icon'  \tclass='ZLeftIcon ZWidgetIcon'\tstyle='width:0px'></td><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_title'\t\tclass='ZWidgetTitle'\t\t\tstyle='width:120px'></td><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_right_icon' \tclass='ZRightIcon ZWidgetIcon'\tstyle='width:0px'></td><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_dropdown' \tclass='ZDropDown'\t\t\t\tstyle='width:20px'></td><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_fill'\t\t\t\t\t\t\t\t\t\t\tstyle='width:100%;'></td><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_img'\t\t\t\t\t\t\t\t\t\t\tstyle='width:20px'></td></tr></table>";

	return _hasBuffer ? buffer.length : buffer.join("");
},
{
	"id": "admin.Widgets#ZaTreeHeaderButton",
	"class": "ZWidget"
}, false);

AjxTemplate.register("admin.Widgets#ZaTreeItem", 
function(name, params, data, buffer) {
	var _hasBuffer = Boolean(buffer);
	data = (typeof data == "string" ? { id: data } : data) || {};
	buffer = buffer || [];
	var _i = buffer.length;

	buffer[_i++] = "<div class='";
	buffer[_i++] = data["divClassName"];
	buffer[_i++] = "' id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_div'><table role=\"presentation\" id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_table'><tr>";
	 if (data.isCheckedStyle) { 
	buffer[_i++] = "<td nowrap id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_checkboxCell' class=\"ZTreeItemCheckboxCell\"><div class=\"ZTreeItemCheckbox\" id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_checkbox'><div class=\"ZTreeItemCheckboxImg\" id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_checkboxImg'>";
	buffer[_i++] =  AjxImg.getImageHtml("MenuCheck") ;
	buffer[_i++] = "</div></div></td>";
	 } 
	buffer[_i++] = "<td width=16 nowrap class='imageCell' id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_imageCell'></td><td nowrap class='";
	buffer[_i++] = data["textClassName"];
	buffer[_i++] = "' id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_textTDCell'><div class='ZTreeItemTextCell' id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_textCell'></div></td><td width=16 class='imageCell' id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_extraCell'></td><td width=1% align=center nowrap id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_countCell'></td><td align=center nowrap id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_nodeCell'></td></tr></table></div>";

	return _hasBuffer ? buffer.length : buffer.join("");
},
{
	"id": "admin.Widgets#ZaTreeItem"
}, false);

AjxTemplate.register("admin.Widgets#ZaBaseDialog", 
function(name, params, data, buffer) {
	var _hasBuffer = Boolean(buffer);
	data = (typeof data == "string" ? { id: data } : data) || {};
	buffer = buffer || [];
	var _i = buffer.length;

	buffer[_i++] = "<div class='DwtDialog WindowOuterContainer'><table role=\"presentation\"><tr class='DwtDialogHeader' id='";
	buffer[_i++] = data["dragId"];
	buffer[_i++] = "'><td class='minWidth'>";
	buffer[_i++] = data["icon"];
	buffer[_i++] = "</td><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_title' class='DwtDialogTitle'>";
	buffer[_i++] = data["title"];
	buffer[_i++] = "</td><td class='minWidth'><div class='";
	buffer[_i++] = data["closeIcon2"];
	buffer[_i++] = "'></div></td><td class='minWidth'><div class='";
	buffer[_i++] = data["closeIcon1"];
	buffer[_i++] = "'></div></td><td width=24 id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_minimize' class='DwtDialogMinIcon'></td></tr><tr><td colspan='5'><div class='horizSep'></div></td></tr><tr><td class='WindowInnerContainer' colspan='5'><table role=\"presentation\"><tr><td><div id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_content' class='DwtDialogBody'></div></td></tr></tr><td>";
	 if (data.controlsTemplateId) { 
	buffer[_i++] =  AjxTemplate.expand(data.controlsTemplateId, data) ;
	 } 
	buffer[_i++] = "</td></table></td></tr></table></div>";

	return _hasBuffer ? buffer.length : buffer.join("");
},
{
	"width": "20",
	"id": "admin.Widgets#ZaBaseDialog",
	"height": "32"
}, false);

AjxTemplate.register("admin.Widgets#ZaSeachOptionDialog", 
function(name, params, data, buffer) {
	var _hasBuffer = Boolean(buffer);
	data = (typeof data == "string" ? { id: data } : data) || {};
	buffer = buffer || [];
	var _i = buffer.length;

	buffer[_i++] = "<div class='DwtDialog'><table role=\"presentation\"><tr><td class='WindowInnerContainer' colspan='4'><table role=\"presentation\"><tr><td><div id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_content' class='DwtDialogBody'></div></td></tr></tr><td>";
	 if (data.controlsTemplateId) { 
	buffer[_i++] =  AjxTemplate.expand(data.controlsTemplateId, data) ;
	 } 
	buffer[_i++] = "</td></table></td></tr></table></div>";

	return _hasBuffer ? buffer.length : buffer.join("");
},
{
	"width": "20",
	"id": "admin.Widgets#ZaSeachOptionDialog",
	"height": "32"
}, false);

AjxTemplate.register("admin.Widgets#ZaAboutDialog", 
function(name, params, data, buffer) {
	var _hasBuffer = Boolean(buffer);
	data = (typeof data == "string" ? { id: data } : data) || {};
	buffer = buffer || [];
	var _i = buffer.length;

	buffer[_i++] = "<div class='ZaAboutDialog'><table role=\"presentation\" style='table-layout:fixed;width:100%'><tr class='ZaAboutDialogHeader' id='";
	buffer[_i++] = data["dragId"];
	buffer[_i++] = "'><td id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_full' class='ZaAboutDialogTitle' style='width:100%;'>&nbsp</td><td width=24 id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_close' ><div class=";
	buffer[_i++] = data["closeIcon"];
	buffer[_i++] = "></div></td></tr><tr><td class='WindowInnerContainer' colspan='2'><table role=\"presentation\"><tr><td><div id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_content' class='DwtDialogBody'><div><div class='contentBox'><h1><a id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_bannerLink' target='_new' href='";
	buffer[_i++] = data["logoURL"];
	buffer[_i++] = "'><span class='";
	buffer[_i++] = data["aboutBanner"];
	buffer[_i++] = "'></span></a></h1><div id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_longVersion' class='version'>\n";
	buffer[_i++] = "                                                ";
	buffer[_i++] = data["version"];
	buffer[_i++] = "\n";
	buffer[_i++] = "                                            </div></div></div><div id='";
	buffer[_i++] = data["id"];
	buffer[_i++] = "_footer' class='Footer'><div class='copyright'>\n";
	buffer[_i++] = "                                            ";
	buffer[_i++] = data["copyright"];
	buffer[_i++] = "\n";
	buffer[_i++] = "                                        </div></div></div></td></tr></table></td></tr></table></div>";

	return _hasBuffer ? buffer.length : buffer.join("");
},
{
	"width": "20",
	"id": "admin.Widgets#ZaAboutDialog",
	"height": "32"
}, false);

}
